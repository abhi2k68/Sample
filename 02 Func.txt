IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'V' AND name = 'VW_DEDUCTIONREPORT')
DROP View VW_DEDUCTIONREPORT
GO
CREATE VIEW [DBO].[VW_DEDUCTIONREPORT]        
AS        
  SELECT DD.BRANCHID, DD.FORMID , D.DEDUCTEEID, (D.NAME + '('+ CAST(NE.SERIALNO AS VARCHAR) +')')NAME, TS.SECTIONNAME, TR.BGLCODE,       
     DD.PAYMENTMADE, DD.PAYMENTDATE, DD.INCOMETAX, DD.SURCHARGE, DD.EDUCATIONCESS, DD.TAXRATE, DD.TOTALDEDUCTED, DD.DEDUCTEDDATE,      
     CASE WHEN DD.FORMID = 2 THEN      
           CASE WHEN DD.NONDEDREASON = 0 THEN ''       
             WHEN DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'       
             WHEN DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'       
             WHEN DD.NONDEDREASON = 3 THEN 'PAN NOT AVAILABLE - HIGHER RATE (20%)'        
             WHEN DD.NONDEDREASON = 4 THEN 'TRANSPORTER WITH VALID PAN (0%)'        
             WHEN DD.NONDEDREASON = 5 THEN 'AMOUNT PAID/CREDITED IS UNDER THRESHOLD'         
          END        
            WHEN DD.FORMID = 3 THEN      
           CASE WHEN DD.NONDEDREASON = 0 THEN ''      
             WHEN DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'      
             WHEN DD.NONDEDREASON = 2 THEN 'LOWER DEDUCTION/NO DEDUCTION CERTIFICATE ISSUED BY THE CA'      
             WHEN DD.NONDEDREASON = 3 THEN 'PAN NOT AVAILABLE - HIGHER RATE (20%)'        
          END        
     END AS NONDEDREASON      
      FROM DEDUCTIONDETAIL DD  
      INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID        
      INNER JOIN NONEMPLOYEE NE ON NE.DEDUCTEEID = D.DEDUCTEEID        
      INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = DD.SECTIONID        
      INNER JOIN TDSRATE TR ON TR.BGLCODEID = DD.BGLCODEID      
        INNER JOIN  REPORTPAYMENT RP ON PARENTBRANCHID = DD.BRANCHID AND ID= DD.REPORTPAYMENTID
     WHERE DD.ENTRYTYPE <> 4
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'V' AND name = 'VW_GetChallanITNS281ReportDetails')
DROP View VW_GetChallanITNS281ReportDetails
GO
CREATE VIEW [dbo].[VW_GetChallanITNS281ReportDetails]  
AS  
SELECT     D.DEDUCTORNAME, D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, CAST(D.FINANCIALYEAR AS VARCHAR) 
                      + '-' + CAST(D.FINANCIALYEAR + 1 AS VARCHAR) AS FINANCIALYEAR, CAST(D.FINANCIALYEAR + 1 AS VARCHAR) 
                      + '-' + CAST(D.FINANCIALYEAR + 2 AS VARCHAR) AS ASSESSMENTYEAR, D.TAN, D.PAN, D.PINCODE, D.STDCODE + '-' + D.PHONENO AS PHONENO, 
                      SM.STATENAME, CASE WHEN ISNULL(CD.MINORHEAD, - 1) = - 1 THEN 200 ELSE MINORHEAD END AS MINORHEAD, CD.BRANCHID, CD.FORMID, 
                      CD.QUARTER, CD.SERIALNO, CD.INCOMETAX, CD.SURCHARGE, CD.EDUCATIONCESS, CD.INTEREST, CD.PENALTY + CD.OTHERS AS PENALTY, 
                      CD.CHALLANTOTAL, CD.CHALLANPAIDDATE, CD.CHEQUENO, CD.CHEQUEDATE, CD.CHEQUEDRAWNON, CD.TRANREFNO, CD.ISCOMPANY, 
                      ISNULL(CD.FEE, 0) AS FEE, CASE WHEN CD.FORMID = 4 THEN TS .SECTIONNAME ELSE TS .TAXNAME END AS TAXNAME, 
                      CASE WHEN CD.MODEOFPAYMENT = 3 THEN CD.TRNVOUCHERNO ELSE CD.BANKCHALLANNO END AS BANKCHALLANNO, 
                      CASE WHEN CD.MODEOFPAYMENT = 3 THEN CD.TVRECEIPTNUMBER ELSE RB.BSRCODE END AS BSRCODE,MODEOFPAYMENT,
                      CD.ISAUTOGENERATED
FROM         dbo.CHALLANDETAIL AS CD LEFT JOIN
                      dbo.REMITTINGBANK AS RB ON CD.BANKID = RB.BANKID LEFT OUTER JOIN
                      dbo.BRANCHDEDUCTORS AS BD ON CD.BRANCHID = BD.BRANCHID AND CD.QUARTER = BD.QUARTER LEFT OUTER JOIN
                      dbo.DEDUCTOR AS D ON D.DEDUCTORID = BD.DEDUCTORID LEFT OUTER JOIN
                      dbo.STATEMASTER AS SM ON D.STATEID = SM.STATEID LEFT OUTER JOIN
                      dbo.TAXSECTIONS AS TS ON CD.SECTIONID = TS.SECTIONID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'V' AND name = 'VW_TDS_GETFORM2627TDSPAYMENTREGISTER')
DROP View VW_TDS_GETFORM2627TDSPAYMENTREGISTER
GO
CREATE VIEW [dbo].[VW_TDS_GETFORM2627TDSPAYMENTREGISTER]  
AS  
 SELECT D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME,PAN,NE.SERIALNO,  
     TS.SECTIONNAME,DD.SECTIONID,  
     DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,  
     CD.CHALLANPAIDDATE,CD.CHEQUENO,RB.BSRCODE + REPLACE(CONVERT(VARCHAR,CD.CHALLANPAIDDATE,103),'/','') + CD.BANKCHALLANNO AS CIN,  
     RB.BRANCHNAME  
 FROM   DEDUCTIONDETAIL DD INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID  
         INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID  
         INNER JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID  
         INNER JOIN DEDCHALINK DCL ON DD.DEDUCTIONID = DCL.DEDUCTIONID  
         INNER JOIN CHALLANDETAIL CD ON DCL.CHALLANID = CD.CHALLANID  
         LEFT JOIN REMITTINGBANK RB ON CD.BANKID = RB.BANKID;
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'V' AND name = 'VWFORM16A')
DROP View VWFORM16A
GO
CREATE VIEW [DBO].[VWFORM16A]      
AS      
 SELECT DD.BRANCHID,DD.FORMID,DD.QUARTER,DD.DEDUCTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,  
  CASE WHEN MODEOFPAYMENT <> 3 THEN CONVERT(VARCHAR(10),CD.CHALLANPAIDDATE,103)   
  ELSE NULL END AS CHALLANDATE,  
  CASE WHEN MODEOFPAYMENT = 3 THEN CONVERT(VARCHAR(10),CD.CHALLANPAIDDATE,103)   
  ELSE NULL END AS VOUCHERDATE,  
  DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.DEDUCTEDDATE,  
  CASE WHEN MODEOFPAYMENT = 3 THEN DD.TOTALDEDUCTED ELSE NULL END AS VOUCHERTOTALDEDUCTED,      
  CASE WHEN MODEOFPAYMENT <> 3 THEN DD.TOTALDEDUCTED ELSE NULL END AS TOTALDEDUCTED,      
      S.TOTALAMNTPAID,S.TOTALTAXDEDUCTED,      
      F.DCOUNT,      
      DR.FINANCIALYEAR,CAST(DR.FINANCIALYEAR + 1 AS VARCHAR) + '-' + CAST(DR.FINANCIALYEAR + 2 AS VARCHAR) AS ASSESSMENTYEAR,DR.DEDUCTORNAME,DR.ADDRESS1 AS DEDADDR1,DR.ADDRESS2 AS DEDADDR2,DR.ADDRESS3 AS DEDADDR3,DR.ADDRESS4 AS DEDADDR4,DR.ADDRESS5 AS DEDADDR5,DR.PINCODE AS DEDPINCODE,DR.[TAN] AS DEDTAN,DR.PAN AS DEDPAN,DSM.STATENAME AS DEDUCTORSTATENAME,      
      RP.PERSONNAME,RP.DESIGNATION,CASE WHEN RP.GENDER=1 THEN 'S/O' ELSE 'D/O' END AS GENDERTITLE,RP.FATHERNAME,      
      D.DEDUCTEEID,D.NAME,D.ADDRESS1 AS DEDUCTEEADDR1,D.ADDRESS2 AS DEDUCTEEADDR2,D.ADDRESS3 AS DEDUCTEEADDR3,D.ADDRESS4 AS DEDUCTEEADDR4,D.ADDRESS5 AS DEDUCTEEADDR5,D.PINCODE AS DEDUCTEEPINCODE,D.PAN AS DEDUCTEEPAN,SM.STATENAME AS DEDUCTEESTATENAME,           TS.SECTIONID,TS.SECTIONNAME,TS.DESCRIPTION,DL.DEDCHALINKID,CD.CHEQUENO,  
      CASE WHEN MODEOFPAYMENT <> 3 THEN CHALLANPAIDDATE ELSE NULL END AS CHALLANPAIDDATE,  
      --CASE WHEN MODEOFPAYMENT = 3 THEN CHALLANPAIDDATE ELSE NULL END AS VOUCHERDATE,        
      CASE WHEN (LEN(ISNULL(BANKCHALLANNO,'')) > 0)   
   THEN RIGHT(REPLICATE('0', 5)+ CAST(BANKCHALLANNO AS VARCHAR), 5)   
     ELSE '' END AS BANKCHALLANNO,  
      CASE WHEN (LEN(ISNULL(TRNVOUCHERNO,'')) > 0)   
      THEN RIGHT(REPLICATE('0', 5)+ CAST(TRNVOUCHERNO AS VARCHAR), 5)   
     ELSE '' END AS TRNVOUCHERNO,RB.BSRCODE,CD.TVRECEIPTNUMBER,  
      F16A.PRINTCERTIFICATENO,F16A.TDSCERTIFICATENO,      
     (SELECT CASE WHEN (SELECT COUNT(ACKNOREVID) FROM ACKNOREV WHERE ACKID=O.ACKID) = 0       
       THEN O.ORGNUM       
       ELSE (SELECT TOP 1 REVNUM FROM ACKNOREV WHERE ACKID=O.ACKID ORDER BY REVFILEDDATE DESC)      
       END AS ACKNO      
      FROM ACKNO O  WHERE BRANCHID=DD.BRANCHID AND FORMID=DD.FORMID AND QUARTER=1) AS ACKNO1,      
      (SELECT CASE WHEN (SELECT COUNT(ACKNOREVID) FROM ACKNOREV WHERE ACKID=O.ACKID) = 0       
       THEN O.ORGNUM       
       ELSE (SELECT TOP 1 REVNUM FROM ACKNOREV WHERE ACKID=O.ACKID ORDER BY REVFILEDDATE DESC)      
       END AS ACKNO      
      FROM ACKNO O  WHERE BRANCHID=DD.BRANCHID AND FORMID=DD.FORMID AND QUARTER=2) AS ACKNO2,      
      (SELECT CASE WHEN (SELECT COUNT(ACKNOREVID) FROM ACKNOREV WHERE ACKID=O.ACKID) = 0       
       THEN O.ORGNUM       
       ELSE (SELECT TOP 1 REVNUM FROM ACKNOREV WHERE ACKID=O.ACKID ORDER BY REVFILEDDATE DESC)      
       END AS ACKNO      
      FROM ACKNO O  WHERE BRANCHID=DD.BRANCHID AND FORMID=DD.FORMID AND QUARTER=3) AS ACKNO3,      
      (SELECT CASE WHEN (SELECT COUNT(ACKNOREVID) FROM ACKNOREV WHERE ACKID=O.ACKID) = 0       
       THEN O.ORGNUM       
       ELSE (SELECT TOP 1 REVNUM FROM ACKNOREV WHERE ACKID=O.ACKID ORDER BY REVFILEDDATE DESC)      
       END AS ACKNO      
      FROM ACKNO O  WHERE BRANCHID=DD.BRANCHID AND FORMID=DD.FORMID AND QUARTER=4) AS ACKNO4,      
      (SELECT RECEIPTNO FROM ACKNO WHERE BRANCHID=DD.BRANCHID AND FORMID=DD.FORMID AND [QUARTER]=DD.[QUARTER]) AS RECEIPTNO      
  FROM   DEDUCTIONDETAIL DD      
     INNER JOIN BRANCHDEDUCTORS BD ON DD.BRANCHID = BD.BRANCHID AND DD.QUARTER=BD.QUARTER      
     INNER JOIN DEDUCTOR DR ON BD.DEDUCTORID = DR.DEDUCTORID      
     INNER JOIN RESPONSIBLEPERSON RP ON RP.DEDUCTORID = DR.DEDUCTORID      
     INNER JOIN STATEMASTER DSM ON DR.STATEID = DSM.STATEID      
     INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID      
   INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID      
     INNER JOIN STATEMASTER SM ON D.STATEID = SM.STATEID      
     INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = DD.SECTIONID      
     INNER JOIN FORMDETAILS FD ON FD.FORMID = DD.FORMID      
     LEFT JOIN DEDCHALINK DL ON DL.DEDUCTIONID = DD.DEDUCTIONID      
     LEFT JOIN CHALLANDETAIL CD ON CD.CHALLANID = DL.CHALLANID      
     LEFT JOIN REMITTINGBANK RB ON RB.BANKID=CD.BANKID      
     LEFT JOIN FORM16A F16A ON DD.DEDUCTIONID = F16A.DEDUCTIONID      
     LEFT JOIN (SELECT DD.DEDUCTEEID,SUM(TOTALDEDUCTED) TOTALTAXDEDUCTED,SUM(DD.PAYMENTMADE) AS TOTALAMNTPAID,DD.SECTIONID,DD.QUARTER FROM DEDUCTIONDETAIL DD       
     LEFT JOIN DEDCHALINK DL ON DD.DEDUCTIONID = DL.DEDUCTIONID      
          WHERE  (DD.TOTALDEDUCTED=0 OR DL.DEDCHALINKID IS NOT NULL) GROUP BY DD.DEDUCTEEID,DD.SECTIONID,DD.QUARTER) S ON DD.DEDUCTEEID=S.DEDUCTEEID AND DD.SECTIONID = S.SECTIONID AND DD.QUARTER=S.QUARTER      
     LEFT JOIN (SELECT BRANCHID,COUNT(DEDUCTIONID) DCOUNT,PRINTCERTIFICATENO FROM FORM16A WHERE PRINTCERTIFICATENO IS NOT NULL AND LEN(PRINTCERTIFICATENO)>0      
          GROUP BY PRINTCERTIFICATENO,BRANCHID) F ON F16A.PRINTCERTIFICATENO  = F.PRINTCERTIFICATENO AND DD.BRANCHID = F.BRANCHID       
  WHERE  DD.FORMID IN (2,3,4) AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL)
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'V' AND name = 'vwTest')
DROP View vwTest
GO
create view vwTest
as
 select 1 as col;

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'procTest')
DROP PROCEDURE procTest
GO
create procedure procTest
as
begin
 print (1)
end;

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'sp_alterdiagram')
DROP PROCEDURE sp_alterdiagram
GO
	CREATE PROCEDURE dbo.sp_alterdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null,
		@version 	int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @retval 		int
		declare @IsDbo 			int
		declare @UIDFound 		int
		declare @DiagId			int
		declare @ShouldChangeUID	int
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid ARG', 16, 1)
			return -1
		end
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();	 
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		revert;
		select @ShouldChangeUID = 0
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
		if(@IsDbo <> 0)
		begin
			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id
			begin
				select @ShouldChangeUID = 1 ;
			end
		end
		-- update dds data			
		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;
		-- change owner
		if(@ShouldChangeUID = 1)
			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;
		-- update dds version
		if(@version is not null)
			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;
		return 0
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'sp_creatediagram')
DROP PROCEDURE sp_creatediagram
GO
	CREATE PROCEDURE dbo.sp_creatediagram
	(
		@diagramname 	sysname,
		@owner_id		int	= null, 	
		@version 		int,
		@definition 	varbinary(max)
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId int
		declare @retval int
		declare @IsDbo	int
		declare @userName sysname
		if(@version is null or @diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID(); 
		select @IsDbo = IS_MEMBER(N'db_owner');
		revert; 
		if @owner_id is null
		begin
			select @owner_id = @theId;
		end
		else
		begin
			if @theId <> @owner_id
			begin
				if @IsDbo = 0
				begin
					RAISERROR (N'E_INVALIDARG', 16, 1);
					return -1
				end
				select @theId = @owner_id
			end
		end
		-- next 2 line only for test, will be removed after define name unique
		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end
		insert into dbo.sysdiagrams(name, principal_id , version, definition)
				VALUES(@diagramname, @theId, @version, @definition) ;
		select @retval = @@IDENTITY 
		return @retval
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'sp_dropdiagram')
DROP PROCEDURE sp_dropdiagram
GO
	CREATE PROCEDURE dbo.sp_dropdiagram
	(
		@diagramname 	sysname,
		@owner_id	int	= null
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		declare @UIDFound 		int
		declare @DiagId			int
		if(@diagramname is null)
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT; 
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
		delete from dbo.sysdiagrams where diagram_id = @DiagId;
		return 0;
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'sp_helpdiagramdefinition')
DROP PROCEDURE sp_helpdiagramdefinition
GO
	CREATE PROCEDURE dbo.sp_helpdiagramdefinition
	(
		@diagramname 	sysname,
		@owner_id	int	= null 		
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 		int
		declare @IsDbo 		int
		declare @DiagId		int
		declare @UIDFound	int
		if(@diagramname is null)
		begin
			RAISERROR (N'E_INVALIDARG', 16, 1);
			return -1
		end
		execute as caller;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner');
		if(@owner_id is null)
			select @owner_id = @theId;
		revert; 
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname;
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId ))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1);
			return -3
		end
		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ; 
		return 0
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'sp_helpdiagrams')
DROP PROCEDURE sp_helpdiagrams
GO
	CREATE PROCEDURE dbo.sp_helpdiagrams
	(
		@diagramname sysname = NULL,
		@owner_id int = NULL
	)
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		DECLARE @user sysname
		DECLARE @dboLogin bit
		EXECUTE AS CALLER;
			SET @user = USER_NAME();
			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner'));
		REVERT;
		SELECT
			[Database] = DB_NAME(),
			[Name] = name,
			[ID] = diagram_id,
			[Owner] = USER_NAME(principal_id),
			[OwnerID] = principal_id
		FROM
			sysdiagrams
		WHERE
			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND
			(@diagramname IS NULL OR name = @diagramname) AND
			(@owner_id IS NULL OR principal_id = @owner_id)
		ORDER BY
			4, 5, 1
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'sp_renamediagram')
DROP PROCEDURE sp_renamediagram
GO
	CREATE PROCEDURE dbo.sp_renamediagram
	(
		@diagramname 		sysname,
		@owner_id		int	= null,
		@new_diagramname	sysname
	)
	WITH EXECUTE AS 'dbo'
	AS
	BEGIN
		set nocount on
		declare @theId 			int
		declare @IsDbo 			int
		declare @UIDFound 		int
		declare @DiagId			int
		declare @DiagIdTarg		int
		declare @u_name			sysname
		if((@diagramname is null) or (@new_diagramname is null))
		begin
			RAISERROR ('Invalid value', 16, 1);
			return -1
		end
		EXECUTE AS CALLER;
		select @theId = DATABASE_PRINCIPAL_ID();
		select @IsDbo = IS_MEMBER(N'db_owner'); 
		if(@owner_id is null)
			select @owner_id = @theId;
		REVERT;
		select @u_name = USER_NAME(@owner_id)
		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname 
		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId))
		begin
			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1)
			return -3
		end
		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change
		--	return 0;
		if(@u_name is null)
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname
		else
			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname
		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg)
		begin
			RAISERROR ('The name is already used.', 16, 1);
			return -2
		end		
		if(@u_name is null)
			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId
		else
			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId
		return 0
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'sp_upgraddiagrams')
DROP PROCEDURE sp_upgraddiagrams
GO
	CREATE PROCEDURE dbo.sp_upgraddiagrams
	AS
	BEGIN
		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL
			return 0;
		CREATE TABLE dbo.sysdiagrams
		(
			name sysname NOT NULL,
			principal_id int NOT NULL,	-- we may change it to varbinary(85)
			diagram_id int PRIMARY KEY IDENTITY,
			version int,
			definition varbinary(max)
			CONSTRAINT UK_principal_name UNIQUE
			(
				principal_id,
				name
			)
		);
		/* Add this if we need to have some form of extended properties for diagrams */
		/*
		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL
		BEGIN
			CREATE TABLE dbo.sysdiagram_properties
			(
				diagram_id int,
				name sysname,
				value varbinary(max) NOT NULL
			)
		END
		*/
		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL
		begin
			insert into dbo.sysdiagrams
			(
				[name],
				[principal_id],
				[version],
				[definition]
			)
			select	 
				convert(sysname, dgnm.[uvalue]),
				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa
				0,							-- zero for old format, dgdef.[version],
				dgdef.[lvalue]
			from dbo.[dtproperties] dgnm
				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	
				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid]
			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_' 
			return 2;
		end
		return 1;
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_CheckApproval')
DROP PROCEDURE USP_CUS_CheckApproval
GO
CREATE PROCEDURE [USP_CUS_CheckApproval]
	@dTaxAuditID INT
AS
BEGIN
	 DECLARE @DTAXID INT
	 SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID
	 INTO #CURRAUDITPOS 
	 FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
	 WHERE ISDELETED = 0
	 GROUP BY DTAXID
	 SELECT CAP.DTAXAUDITID,CAP.DTAXID,STATUS
	 INTO #CUSTOMERDTAXAUDIT
	 FROM CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
	 INNER JOIN #CURRAUDITPOS CAP ON CDA.DTAXAUDITID = CAP.DTAXAUDITID
	 WHERE ISDELETED = 0
	SET @DTAXID = (SELECT DTAXID FROM #CUSTOMERDTAXAUDIT WITH(NOLOCK) WHERE DTAXAUDITID = @DTAXAUDITID)
	IF(EXISTS(SELECT * FROM #CUSTOMERDTAXAUDIT WHERE DTAXID = @DTAXID AND [STATUS] = 13))
	BEGIN
		SELECT 1 RETVAL
	END
	ELSE
	BEGIN
		SELECT 0 RETVAL
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_CheckDuplicatePaymentCode')
DROP PROCEDURE USP_CUS_CheckDuplicatePaymentCode
GO
CREATE PROCEDURE [USP_CUS_CheckDuplicatePaymentCode]
	@PAYCODEID INT = -1,
	@PAYMENTTYPE INT, 
	@CODES VARCHAR(20)
AS
BEGIN
	SELECT * INTO #CODES FROM DBO.UDF_TDS_SPLITSTRING(@CODES,',')
	IF(@PAYCODEID = -1)
	BEGIN
		SELECT COUNT(PAYCODEID)
		FROM PAYMENTCODE WITH(NOLOCK)
		WHERE PAYMENTTYPE = @PAYMENTTYPE 
			AND 
			(TAXCODE IN (SELECT * FROM #CODES)
				OR IPCODE IN (SELECT * FROM #CODES)
				OR PCODE IN (SELECT * FROM #CODES)
			)
	END
	ELSE
	BEGIN
		SELECT COUNT(PAYCODEID)
		FROM PAYMENTCODE WITH(NOLOCK)
		WHERE PAYMENTTYPE = @PAYMENTTYPE AND PAYCODEID <> @PAYCODEID
			AND 
			(TAXCODE  IN (SELECT * FROM #CODES)
				OR IPCODE  IN (SELECT * FROM #CODES)
				OR PCODE  IN (SELECT * FROM #CODES)
			)
	END	
	DROP TABLE #CODES
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_CustomerDtaxCinUpdate')
DROP PROCEDURE USP_CUS_CustomerDtaxCinUpdate
GO
CREATE PROCEDURE [dbo].[USP_CUS_CustomerDtaxCinUpdate]
	@DTAXPAYID INT,
	@CHAREFNO VARCHAR(25),
	@BANKREFNO VARCHAR(25),
	@REFERENCEDOC VARBINARY(MAX),
	@FILENAME VARCHAR(260)
AS
BEGIN
	SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID,DTAXPAYID 
	INTO #TEMP 
	FROM DTAXPAYAUDIT
	WHERE [STATUS] = 8 AND ISDELETED = 0 
	GROUP BY DTAXPAYAUDITID,DTAXPAYID
	SELECT T.*,DTA.AUDITDATE INTO #DTAXPAYAUDIT 
	FROM #TEMP T
	INNER JOIN DTAXPAYAUDIT DTA
	ON DTA.DTAXPAYAUDITID = T.DTAXPAYAUDITID
	UPDATE CUSTOMERDTAXPAYMENT SET CHAREFNO=@CHAREFNO, BANKREFNO=@BANKREFNO,REFERENCEDOC=@REFERENCEDOC,FILENAME=@FILENAME
	FROM CUSTOMERDTAXPAYMENT CIT
	INNER JOIN #DTAXPAYAUDIT DTA ON DTA.DTAXPAYID = CIT.DTAXPAYID
	WHERE CIT.DTAXPAYID=@DTAXPAYID
	UPDATE DTAXPAYAUDIT SET STATUS=9,AUDITDATE=GETDATE()
	FROM #DTAXPAYAUDIT DT1
	INNER JOIN DTAXPAYAUDIT DT2
	ON DT2.DTAXPAYAUDITID = DT1.DTAXPAYAUDITID
	INNER JOIN CUSTOMERDTAXPAYMENT CIT
	ON DT1.DTAXPAYID=CIT.DTAXPAYID
	WHERE CIT.DTAXPAYID=@DTAXPAYID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_CustomerItaxCinUpdate')
DROP PROCEDURE USP_CUS_CustomerItaxCinUpdate
GO
CREATE PROCEDURE USP_CUS_CustomerItaxCinUpdate
	@ITAXPAYID INT,
	@CHAREFNO VARCHAR(25),
	@BANKREFNO VARCHAR(25),
	@REFERENCEDOC VARBINARY(MAX),
	@FILENAME VARCHAR(260)
AS
BEGIN
	SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID, ITAXPAYID 
	INTO #CURRAUDITPOS
	FROM ITAXPAYAUDIT
	WHERE ISDELETED = 0
	GROUP BY ITAXPAYID
	SELECT CAP.ITAXPAYID, CAP.ITAXPAYAUDITID,STATUS
	INTO #LATESTPAYAUDITDATA
	FROM ITAXPAYAUDIT IPA WITH(NOLOCK)
	INNER JOIN #CURRAUDITPOS CAP ON IPA.ITAXPAYAUDITID = CAP.ITAXPAYAUDITID
	WHERE STATUS = 8
	SELECT LPA.*,ITA.AUDITDATE INTO #ITAXPAYAUDIT 
	FROM #LATESTPAYAUDITDATA LPA
	INNER JOIN ITAXPAYAUDIT ITA
	ON ITA.ITAXPAYAUDITID = LPA.ITAXPAYAUDITID
	UPDATE CUSTOMERITAXPAYMENT SET CHAREFNO=@CHAREFNO, BANKREFNO=@BANKREFNO,
	REFERENCEDOC=@REFERENCEDOC,
	[FILENAME] = @FILENAME
	FROM CUSTOMERITAXPAYMENT CIT
	INNER JOIN #ITAXPAYAUDIT ITA ON ITA.ITAXPAYID = CIT.ITAXPAYID
	WHERE CIT.ITAXPAYID=@ITAXPAYID
	UPDATE ITAXPAYAUDIT SET STATUS=9,AUDITDATE=GETDATE()
	FROM #ITAXPAYAUDIT IT1
	INNER JOIN ITAXPAYAUDIT IT2
	ON IT2.ITAXPAYAUDITID = IT1.ITAXPAYAUDITID
	INNER JOIN CUSTOMERITAXPAYMENT CIT
	ON IT1.ITAXPAYID = CIT.ITAXPAYID
	WHERE CIT.ITAXPAYID = @ITAXPAYID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_DeleteAccountingheads')
DROP PROCEDURE USP_CUS_DeleteAccountingheads
GO
CREATE PROCEDURE [USP_CUS_DeleteAccountingheads]
@PAYCODEID INT,  
@PAYMENTTYPE INT,
@TAXCODE VARCHAR(4),
@INTERESTCODE VARCHAR(4),
@PENALTYCODE VARCHAR(4)
AS
BEGIN
	IF(@PAYMENTTYPE = 1)  
		BEGIN 
			DECLARE @PAYCODEEXIST INT;
			SET @PAYCODEEXIST = (SELECT COUNT(ITAXPAYID) FROM CUSTOMERITAXPAYMENT WITH(NOLOCK) 
			WHERE ACCCODE1 = @TAXCODE OR ACCCODE2 = @TAXCODE OR ACCCODE3 = @TAXCODE OR 
			  ACCCODE4 = @TAXCODE OR ACCCODE5 = @TAXCODE OR ACCCODE6 = @TAXCODE OR 
			  ACCCODE1 = @INTERESTCODE OR ACCCODE2 = @INTERESTCODE OR ACCCODE3 = @INTERESTCODE OR 
			  ACCCODE4 = @INTERESTCODE OR ACCCODE5 = @INTERESTCODE OR ACCCODE6 = @INTERESTCODE OR
			  ACCCODE1 = @PENALTYCODE OR ACCCODE2 = @PENALTYCODE OR ACCCODE3 = @PENALTYCODE OR 
			  ACCCODE4 = @PENALTYCODE OR ACCCODE5 = @PENALTYCODE OR ACCCODE6 = @PENALTYCODE) 
	    END 
    ELSE
		BEGIN
			SET @PAYCODEEXIST = (SELECT COUNT(ITAXPAYID) FROM CUSTOMERITAXPAYMENT WITH(NOLOCK) 
			WHERE ACCCODE1 = @TAXCODE OR ACCCODE2 = @TAXCODE OR ACCCODE3 = @TAXCODE OR 
			  ACCCODE4 = @TAXCODE OR ACCCODE5 = @TAXCODE OR ACCCODE6 = @TAXCODE)
	    END
    IF(@PAYCODEEXIST>0)
		BEGIN
			SELECT -1
		END
	ELSE
		BEGIN
			DELETE FROM PAYMENTCODE WHERE PAYCODEID=@PAYCODEID 
			SELECT 1 
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_DirectTaxAudit')
DROP PROCEDURE USP_CUS_DirectTaxAudit
GO
CREATE PROCEDURE [USP_CUS_DirectTaxAudit]
	@pageIndex INT,
	@pageSize INT,
	@isMaster BIT,
	@auditID INT,
	@Name VARCHAR(75) = '',
	@customerID VARCHAR(9) = '',
	@challanType INT = -1
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX);
	/* Fetching Master Data for search and show all */
	IF(@isMaster = 1 AND @auditID = 0)
	BEGIN
		CREATE TABLE #TEMP(ROWNUMBER INT,DTAXAUDITID INT,DTAXID INT,AUDITDATE DATETIME,[STATUS] INT,
		REMARKS VARCHAR(200),USERNAME VARCHAR(75),ISDELETED BIT,BRANCHID INT,PAN VARCHAR(10),
		[TAN] VARCHAR(10),NAME VARCHAR(75),CITY VARCHAR(25),PINCODE VARCHAR(6),STATEID INT,
		ADDRESS1 VARCHAR(25),ADDRESS2 VARCHAR(25),ADDRESS3 VARCHAR(25),ADDRESS4 VARCHAR(25),
		CUSTOMERID VARCHAR(9),EMAILID VARCHAR(75),PHONENUMBER VARCHAR(10),BRANCH VARCHAR(200))
		SET @QUERY ='
		SELECT  ROW_NUMBER() OVER
		(
			ORDER BY (SELECT 0)
		) AS ROWNUMBER,DTAXAUDITID,CDT.DTAXID,AUDITDATE,
		[STATUS],REMARKS,USERNAME,
		ISDELETED,BRANCHID,PAN,[TAN],NAME,CITY,PINCODE,STATEID,
		ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,CUSTOMERID,EMAILID,PHONENUMBER,'''' BRANCH
		FROM CUSTOMERDTAX CDT WITH(NOLOCK)
		INNER JOIN CUSTOMERDTAXAUDIT CDTA WITH(NOLOCK)
		ON CDTA.DTAXID = CDT.DTAXID'
		IF(@Name <> '')
		BEGIN
			SET @QUERY = @QUERY + ' WHERE CDT.NAME LIKE ''' + @Name +'%'''
		END
		IF(@customerID <> '')
		BEGIN
			SET @QUERY = @QUERY + ' AND CDT.CUSTOMERID LIKE ''' + @customerID + '%'''
		END
		SET @QUERY = @QUERY + ' ORDER BY CDT.DTAXID,CDTA.DTAXAUDITID'
		INSERT INTO #TEMP
		EXEC SP_EXECUTESQL @QUERY
		SELECT MIN(DTAXAUDITID)DTAXAUDITID,DTAXID 
		INTO #DTMTEMP
		FROM #TEMP
		GROUP BY DTAXID
		SELECT T.BRANCHID,DT.DTAXAUDITID,DT.DTAXID 
		INTO #DTMBRANCH
		FROM #TEMP T
		INNER JOIN #DTMTEMP DT
		ON DT.DTAXAUDITID = T.DTAXAUDITID
		SELECT CB.BRANCHCODE + '-' + CB.BRANCHNAME BRANCH,DTMB.DTAXID 
		INTO #BRANCHTEMP
		FROM #DTMBRANCH DTMB
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = DTMB.BRANCHID
		UPDATE #TEMP
		SET BRANCH = BT.BRANCH
		FROM #BRANCHTEMP BT
		INNER JOIN #TEMP T
		ON T.DTAXID = BT.DTAXID
		DROP TABLE #BRANCHTEMP
		DROP TABLE #DTMTEMP
		SELECT * FROM #TEMP
		WHERE ROWNUMBER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
	/* Fetching master data for showing audit details of a particular customer */
	ELSE IF(@isMaster = 1 AND @auditID > 0)
	BEGIN 
		SELECT  ROW_NUMBER() OVER
		(
			ORDER BY (SELECT 0)
		) AS ROWNUMBER,DTAXAUDITID,CDT.DTAXID,AUDITDATE,
		[STATUS],REMARKS,USERNAME,
		ISDELETED,BRANCHID,PAN,[TAN],NAME,CITY,PINCODE,STATEID,
		ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,CUSTOMERID,EMAILID,PHONENUMBER
		INTO #TEMP1
		FROM CUSTOMERDTAX CDT WITH(NOLOCK)
		INNER JOIN CUSTOMERDTAXAUDIT CDTA WITH(NOLOCK)
		ON CDTA.DTAXID = CDT.DTAXID
		WHERE CDT.DTAXID = @auditID
		ORDER BY CDT.DTAXID,CDTA.DTAXAUDITID
		SELECT T1.*,CB.BRANCHCODE + '-' + CB.BRANCHNAME BRANCH FROM #TEMP1 T1
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = T1.BRANCHID
		WHERE ROWNUMBER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
	/* Fetching customer payment data for show all and search */
	ELSE IF(@isMaster = 0 AND @auditID = 0)
	BEGIN
		CREATE TABLE #TEMP2(ROWNUMBER INT,DTAXPAYID INT,CHALLANTYPE INT,TAXAPPLICABLE INT,PAYMENTTYPE INT,
		DTAXID INT,NATOFPAY INT,INCOMETAX DECIMAL(13,2),SURCHARGE DECIMAL(13,2),EDUCESS DECIMAL(13,2),
		INTEREST DECIMAL(13,2),PENALTY DECIMAL(13,2),OTHERS DECIMAL(13,2),LATEFEE DECIMAL(13,2),
		CHAREFNO VARCHAR(25),BANKREFNO VARCHAR(25),CONTENTTYPE NVARCHAR(MAX),FINACLETRANSID VARCHAR(25),
		TRANSDATE DATETIME,ASSESSMENTYEAR VARCHAR(10),DTAXPAYAUDITID INT,BRANCHID INT,[STATUS] INT,
		AUDITDATE DATETIME,ISDELETED BIT,USERNAME VARCHAR(75),REMARKS VARCHAR(200),PAN VARCHAR(10),
		[TAN] VARCHAR(10),NAME VARCHAR(75),CUSTOMERID VARCHAR(9),BRANCHCODE VARCHAR(100))
		SET @QUERY ='
		SELECT  ROW_NUMBER() OVER
		(
			ORDER BY (SELECT 0)
		) AS ROWNUMBER,CDTP.DTAXPAYID,CHALLANTYPE,TAXAPPLICABLE,PAYMENTTYPE,CDT.DTAXID,
		NATOFPAY,INCOMETAX,SURCHARGE,EDUCESS,INTEREST,PENALTY,OTHERS,LATEFEE,
		CHAREFNO,BANKREFNO,CONTENTTYPE,
		FINACLETRANSID,TRANSDATE,ISNULL(ASSESSMENTYEAR,'''')ASSESSMENTYEAR,
		DTAXPAYAUDITID,BRANCHID,[STATUS],AUDITDATE,ISDELETED,USERNAME,REMARKS,
		PAN,[TAN],NAME,CUSTOMERID,'''' BRANCHCODE
		FROM CUSTOMERDTAX CDT WITH(NOLOCK)
		INNER JOIN CUSTOMERDTAXPAYMENT CDTP WITH(NOLOCK)
		ON CDTP.DTAXID = CDT.DTAXID
		INNER JOIN DTAXPAYAUDIT DTPA WITH(NOLOCK)
		ON DTPA.DTAXPAYID = CDTP.DTAXPAYID'
		IF(@Name <> '')
		BEGIN
			SET @QUERY = @QUERY + ' WHERE CDT.NAME LIKE ''' + @Name +'%'''
		END
		IF(@customerID <> '')
		BEGIN
			SET @QUERY = @QUERY + ' AND CDT.CUSTOMERID LIKE ''' + @customerID + '%'''
		END
		IF(@challanType <> -1)
		BEGIN
			SET @QUERY = @QUERY + ' AND CDTP.CHALLANTYPE = ' + CAST(@challanType AS VARCHAR)
		END
		SET @QUERY = @QUERY + ' ORDER BY CDTP.DTAXPAYID'
		INSERT INTO #TEMP2
		EXEC SP_EXECUTESQL @QUERY
		SELECT T2.*,CB.BRANCHCODE FROM #TEMP2 T2
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = T2.BRANCHID
		WHERE ROWNUMBER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
	/* Fetching payment audit detail */
	ELSE IF(@isMaster = 0 AND @auditID > 0)
	BEGIN
		SELECT  ROW_NUMBER() OVER
		(
			ORDER BY (SELECT 0)
		) AS ROWNUMBER,CDTP.DTAXPAYID,CHALLANTYPE,TAXAPPLICABLE,PAYMENTTYPE,CDT.DTAXID,
		NATOFPAY,INCOMETAX,SURCHARGE,EDUCESS,INTEREST,PENALTY,OTHERS,LATEFEE,
		CHAREFNO,BANKREFNO,CONTENTTYPE,
		FINACLETRANSID,TRANSDATE,ISNULL(ASSESSMENTYEAR,'')ASSESSMENTYEAR,DTAXPAYAUDITID,BRANCHID,[STATUS],AUDITDATE,ISDELETED,USERNAME,REMARKS,
		PAN,[TAN],NAME,CUSTOMERID
		INTO #TEMP3
		FROM CUSTOMERDTAX CDT WITH(NOLOCK)
		INNER JOIN CUSTOMERDTAXPAYMENT CDTP WITH(NOLOCK)
		ON CDTP.DTAXID = CDT.DTAXID
		INNER JOIN DTAXPAYAUDIT DTPA WITH(NOLOCK)
		ON DTPA.DTAXPAYID = CDTP.DTAXPAYID
		WHERE DTPA.DTAXPAYID = @auditID
		SELECT T3.*,CB.BRANCHCODE FROM #TEMP3 T3
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = T3.BRANCHID
		WHERE ROWNUMBER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_DirectTaxAuditCount')
DROP PROCEDURE USP_CUS_DirectTaxAuditCount
GO
CREATE PROCEDURE [USP_CUS_DirectTaxAuditCount]
 @isMaster BIT,  
 @auditID INT,  
 @customerID VARCHAR(9) ='',  
 @Name VARCHAR(75) ='',  
 @challanType INT = -1  
AS  
BEGIN  
 DECLARE @QUERY NVARCHAR(MAX)  
 IF(@isMaster = 1 AND @auditID = 0)  
 BEGIN  
  CREATE TABLE #TEMP(ROWNUMBER INT,DTAXAUDITID INT,DTAXID INT,AUDITDATE DATETIME,[STATUS] INT,   
  REMARKS VARCHAR(200),USERNAME VARCHAR(75),ISDELETED BIT,BRANCHID INT,PAN VARCHAR(10),
  [TAN] VARCHAR(10),NAME VARCHAR(75),CITY VARCHAR(25),PINCODE VARCHAR(6),STATEID INT,
  ADDRESS1 VARCHAR(25),ADDRESS2 VARCHAR(25),ADDRESS3 VARCHAR(25),ADDRESS4 VARCHAR(25),
  CUSTOMERID VARCHAR(9),EMAILID VARCHAR(75),PHONENUMBER VARCHAR(15),BRANCH VARCHAR(200))  
  SET @QUERY ='  
  SELECT  ROW_NUMBER() OVER  
  (  
   ORDER BY (SELECT 0)  
  ) AS ROWNUMBER,DTAXAUDITID,CDT.DTAXID,AUDITDATE,   
  [STATUS],REMARKS,USERNAME,   
  ISDELETED,BRANCHID,PAN,[TAN],NAME,CITY,PINCODE,STATEID,   
  ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,CUSTOMERID,EMAILID,PHONENUMBER,'''' BRANCH  
  FROM CUSTOMERDTAX CDT WITH(NOLOCK)  
  INNER JOIN CUSTOMERDTAXAUDIT CDTA WITH(NOLOCK)  
  ON CDTA.DTAXID = CDT.DTAXID'  
  IF(@Name <> '')  
  BEGIN  
   SET @QUERY = @QUERY + ' WHERE CDT.NAME LIKE ''' + @Name +'%'''  
  END  
  IF(@customerID <> '')  
  BEGIN  
   SET @QUERY = @QUERY + ' AND CDT.CUSTOMERID LIKE ''' + @customerID + '%'''  
  END  
  SET @QUERY = @QUERY + ' ORDER BY CDT.DTAXID,CDTA.DTAXAUDITID'  
  INSERT INTO #TEMP  
  EXEC SP_EXECUTESQL @QUERY  
  SELECT COUNT(*) NOOFITEMS FROM #TEMP  
 END  
 ELSE IF(@isMaster = 1 AND @auditID > 0)  
 BEGIN   
  SELECT  ROW_NUMBER() OVER  
  (  
   ORDER BY (SELECT 0)  
  ) AS ROWNUMBER,DTAXAUDITID,CDT.DTAXID,AUDITDATE,   
  [STATUS],REMARKS,USERNAME,   
  ISDELETED,BRANCHID,PAN,[TAN],NAME,CITY,PINCODE,STATEID,   
  ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,CUSTOMERID,EMAILID,PHONENUMBER  
  INTO #TEMP1  
  FROM CUSTOMERDTAX CDT WITH(NOLOCK)  
  INNER JOIN CUSTOMERDTAXAUDIT CDTA WITH(NOLOCK)  
  ON CDTA.DTAXID = CDT.DTAXID  
  WHERE CDT.DTAXID = @auditID  
  ORDER BY CDT.DTAXID,CDTA.DTAXAUDITID  
  SELECT COUNT(*)NOOFITEMS FROM #TEMP1  
 END  
 ELSE IF(@isMaster = 0 AND @auditID = 0)  
 BEGIN  
  CREATE TABLE #TEMP2(ROWNUMBER INT,DTAXPAYID INT,CHALLANTYPE INT,TAXAPPLICABLE INT,PAYMENTTYPE INT,  
  DTAXID INT,NATOFPAY INT,INCOMETAX DECIMAL(13,2),SURCHARGE DECIMAL(13,2),EDUCESS DECIMAL(13,2),  
  INTEREST DECIMAL(13,2),PENALTY DECIMAL(13,2),OTHERS DECIMAL(13,2),LATEFEE DECIMAL(13,2),  
  CHAREFNO VARCHAR(25),BANKREFNO VARCHAR(25),CONTENTTYPE NVARCHAR(MAX),FINACLETRANSID VARCHAR(25),  
  TRANSDATE DATETIME,ASSESSMENTYEAR VARCHAR(10),DTAXPAYAUDITID INT,BRANCHID INT,[STATUS] INT,  
  AUDITDATE DATETIME,ISDELETED BIT,USERNAME VARCHAR(75),REMARKS VARCHAR(200),PAN VARCHAR(10),  
  [TAN] VARCHAR(10),NAME VARCHAR(75),CUSTOMERID VARCHAR(9),BRANCHCODE VARCHAR(200))  
  SET @QUERY ='  
  SELECT  ROW_NUMBER() OVER  
  (  
   ORDER BY (SELECT 0)  
  ) AS ROWNUMBER,CDTP.DTAXPAYID,CHALLANTYPE,TAXAPPLICABLE,PAYMENTTYPE,CDT.DTAXID,   
  NATOFPAY,INCOMETAX,SURCHARGE,EDUCESS,INTEREST,PENALTY,OTHERS,LATEFEE,   
  CHAREFNO,BANKREFNO,CONTENTTYPE,   
  FINACLETRANSID,TRANSDATE,ISNULL(ASSESSMENTYEAR,'''')ASSESSMENTYEAR,  
  DTAXPAYAUDITID,BRANCHID,[STATUS],AUDITDATE,ISDELETED,USERNAME,REMARKS,   
  PAN,[TAN],NAME,CUSTOMERID,'''' BRANCHCODE  
  FROM CUSTOMERDTAX CDT WITH(NOLOCK)  
  INNER JOIN CUSTOMERDTAXPAYMENT CDTP WITH(NOLOCK)  
  ON CDTP.DTAXID = CDT.DTAXID  
  INNER JOIN DTAXPAYAUDIT DTPA WITH(NOLOCK)  
  ON DTPA.DTAXPAYID = CDTP.DTAXPAYID'  
  IF(@Name <> '')  
  BEGIN  
   SET @QUERY = @QUERY + ' WHERE CDT.NAME LIKE ''' + @Name +'%'''  
  END  
  IF(@customerID <> '')  
  BEGIN  
   SET @QUERY = @QUERY + ' AND CDT.CUSTOMERID LIKE ''' + @customerID + '%'''  
  END  
  IF(@challanType <> -1)  
  BEGIN  
   SET @QUERY = @QUERY + ' AND CDTP.CHALLANTYPE = ' + CAST(@challanType AS VARCHAR)  
  END  
  SET @QUERY = @QUERY + ' ORDER BY CDTP.DTAXPAYID'  
  INSERT INTO #TEMP2  
  EXEC SP_EXECUTESQL @QUERY  
  SELECT COUNT(*) NOOFITEMS FROM #TEMP2  
 END  
 ELSE IF(@isMaster = 0 AND @auditID > 0)  
 BEGIN  
  SELECT  ROW_NUMBER() OVER  
  (  
   ORDER BY (SELECT 0)  
  ) AS ROWNUMBER,CDTP.DTAXPAYID,CHALLANTYPE,TAXAPPLICABLE,PAYMENTTYPE,CDT.DTAXID,   
  NATOFPAY,INCOMETAX,SURCHARGE,EDUCESS,INTEREST,PENALTY,OTHERS,LATEFEE,   
  CHAREFNO,BANKREFNO,CONTENTTYPE,   
  FINACLETRANSID,TRANSDATE,ISNULL(ASSESSMENTYEAR,'')ASSESSMENTYEAR,    DTAXPAYAUDITID,BRANCHID,[STATUS],AUDITDATE,ISDELETED,USERNAME,REMARKS,  
  PAN,[TAN],NAME,CUSTOMERID   
  INTO #TEMP3   FROM CUSTOMERDTAX CDT WITH(NOLOCK)  
  INNER JOIN CUSTOMERDTAXPAYMENT CDTP WITH(NOLOCK)  
  ON CDTP.DTAXID = CDT.DTAXID  
  INNER JOIN DTAXPAYAUDIT DTPA WITH(NOLOCK)  
  ON DTPA.DTAXPAYID = CDTP.DTAXPAYID  
  WHERE DTPA.DTAXPAYID = @auditID  
  SELECT COUNT(*) NOOFITEMS FROM #TEMP3  
 END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetAccountingHeadsByPayCode')
DROP PROCEDURE USP_CUS_GetAccountingHeadsByPayCode
GO
CREATE PROCEDURE [USP_CUS_GetAccountingHeadsByPayCode] 
	@PAYCODEID INT
AS
BEGIN 
	SELECT PAYCODEID, PAYMENTTYPE, PAYMENTNAME, TAXCODE, IPCODE, SORTORDER, PCODE 
    FROM PAYMENTCODE WITH(NOLOCK)
    WHERE PAYCODEID = @PAYCODEID 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetAccountingHeadsCounts')
DROP PROCEDURE USP_CUS_GetAccountingHeadsCounts
GO
CREATE PROCEDURE [USP_CUS_GetAccountingHeadsCounts] 
	@PAYMENTTYPE INT
AS
BEGIN
	SELECT COUNT(PAYCODEID) 
	FROM PAYMENTCODE WITH(NOLOCK) 
	WHERE PAYMENTTYPE = @PAYMENTTYPE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetAccountingHeadsPaged')
DROP PROCEDURE USP_CUS_GetAccountingHeadsPaged
GO
CREATE PROCEDURE [USP_CUS_GetAccountingHeadsPaged]
	@STARTROW INT,
	@PAGESIZE INT,
	@PAYMENTTYPE INT
AS
	BEGIN
		DECLARE @ACCOUNTINGHEADS TABLE(ID INT IDENTITY(1,1), PAYCODEID INT, PAYMENTTYPE INT,
				PAYMENTNAME NVARCHAR(255), TAXCODE VARCHAR(4), IPCODE VARCHAR(4), PCODE VARCHAR(4))
		DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
			SELECT PAYCODEID, PAYMENTTYPE, PAYMENTNAME, TAXCODE, IPCODE, PCODE 
			FROM PAYMENTCODE WITH(NOLOCK) 
			WHERE PAYMENTTYPE = ' + CAST(@PAYMENTTYPE AS VARCHAR) + ' ORDER BY SORTORDER';
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		INSERT INTO @ACCOUNTINGHEADS EXECUTE SP_EXECUTESQL @QUERY;
		SELECT TOP (@LASTREC - 1) * FROM @ACCOUNTINGHEADS WHERE ID > @FIRSTREC AND ID < @LASTREC
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetAllItaxCustomerAssesseeCodes')
DROP PROCEDURE USP_CUS_GetAllItaxCustomerAssesseeCodes
GO
CREATE PROCEDURE USP_CUS_GetAllItaxCustomerAssesseeCodes
 @BRANCHID INT,      
 @PREFIXTEXT NVARCHAR(MAX),      
 @RECORDCOUNT INT,  
 @NAME VARCHAR(MAX)      
AS      
 BEGIN      
  DECLARE @QUERY NVARCHAR(MAX);  
 SELECT MAX(ITAXAUDITID) ITAXAUDITID,ITAXID  
 INTO #TEMPMAXITAXID   
 FROM CUSTOMERITAXAUDIT WITH(NOLOCK)  
 GROUP BY ITAXID  
    SET @QUERY = 'SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + '   
    (CAST(CUSTOMERITAX.ASSESSECODE AS VARCHAR))  AS ASSESSECODE,(CUSTOMERITAX.COMNAME + ''µ'' + CUSTOMERITAX.COMCODE + ''µ'' + CUSTOMERITAX.DIVCODE + ''µ'' + CUSTOMERITAX.RANGECODE + ''µ'' + CAST(CUSTOMERITAX.ITAXID AS VARCHAR)) AS COMRATENAME  
       FROM  CUSTOMERITAX WITH(NOLOCK)  
       INNER JOIN CUSTOMERITAXAUDIT WITH(NOLOCK)  
       ON CUSTOMERITAX.ITAXID = CUSTOMERITAXAUDIT.ITAXID  
       INNER JOIN #TEMPMAXITAXID T WITH(NOLOCK)  
       ON T.ITAXID=CUSTOMERITAXAUDIT.ITAXID AND T.ITAXAUDITID = CUSTOMERITAXAUDIT.ITAXAUDITID   
       WHERE CUSTOMERITAXAUDIT.STATUS = 13 AND CUSTOMERITAX.CUSTOMERID = '''+ @NAME +''' AND CUSTOMERITAX.ASSESSECODE LIKE ''' + @PREFIXTEXT + '%''' ;  
   EXEC SP_EXECUTESQL @QUERY;      
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetAllItaxCustomerNames')
DROP PROCEDURE USP_CUS_GetAllItaxCustomerNames
GO
CREATE PROCEDURE USP_CUS_GetAllItaxCustomerNames
	@BRANCHID INT,      
	@PREFIXTEXT NVARCHAR(MAX),      
	@RECORDCOUNT INT      
AS      
 BEGIN      
	DECLARE @QUERY NVARCHAR(MAX);  
	SELECT MAX(ITAXAUDITID) ITAXAUDITID,ITAXID  
	INTO #TEMPMAXITAXID   
	FROM CUSTOMERITAXAUDIT WITH(NOLOCK)  
	GROUP BY ITAXID  
	SET @QUERY = 'SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + '   
		CUSTOMERITAX.CUSTOMERID + ''-'' + CUSTOMERITAX.NAME NAME, (CB.BRANCHCODE + ''-'' + CB.BRANCHNAME) AS BRANCH 
		FROM  CUSTOMERITAX WITH(NOLOCK)  
		INNER JOIN CUSTOMERITAXAUDIT WITH(NOLOCK)  
		ON CUSTOMERITAX.ITAXID = CUSTOMERITAXAUDIT.ITAXID  
		INNER JOIN #TEMPMAXITAXID T WITH(NOLOCK)  
		ON T.ITAXID=CUSTOMERITAXAUDIT.ITAXID AND T.ITAXAUDITID = CUSTOMERITAXAUDIT.ITAXAUDITID
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = CUSTOMERITAX.BRANCHID   
		WHERE CUSTOMERITAXAUDIT.ISDELETED = 0 
			AND CUSTOMERITAXAUDIT.STATUS = 13 
			AND CUSTOMERITAX.CUSTOMERID LIKE ''' + @PREFIXTEXT + '%''';  
	EXEC SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GETASSIGNEDBRANCHESCUSPAGEWISE')
DROP PROCEDURE USP_CUS_GETASSIGNEDBRANCHESCUSPAGEWISE
GO
CREATE PROCEDURE [USP_CUS_GETASSIGNEDBRANCHESCUSPAGEWISE]
    @PAGEINDEX INT,
    @PAGESIZE INT,
    @USERNAME VARCHAR(20),
    @RECORDCOUNT INT OUTPUT              
AS              
BEGIN              
    SET NOCOUNT ON;              
    SELECT SORTORDER,BRANCHNAME,BRANCHCODE,ASSIGNEDTO,BRANCHID,USERID,ASSIGNED,ROWNUMBER         
    INTO #RESULTS FROM   
    (  
	   SELECT 1 SORTORDER,       
		  (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = AB.BRANCHID) BRANCHNAME,      
		  (SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = AB.BRANCHID) BRANCHCODE,      
		  M.USERNAME AS ASSIGNEDTO, AB.BRANCHID AS BRANCHID, M.USERID AS USERID, 1 AS ASSIGNED,        
		  ROW_NUMBER() OVER (ORDER BY AB.BRANCHID ASC) AS ROWNUMBER         
	   FROM USERMASTER M WITH(NOLOCK)        
		  INNER JOIN ASSIGNBRANCHCUS AB WITH(NOLOCK) ON M.USERID = AB.USERID  
	   WHERE M.USERNAME = @USERNAME        
	   UNION        
	   SELECT 2 SORTORDER,       
		  (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = AB.BRANCHID) BRANCHNAME,      
		  (SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = AB.BRANCHID) BRANCHCODE,      
		  M.USERNAME AS ASSIGNEDTO, AB.BRANCHID AS BRANCHID, M.USERID AS USERID, 0 AS ASSIGNED,        
		  ROW_NUMBER() OVER (ORDER BY AB.BRANCHID ASC) AS ROWNUMBER         
	   FROM USERMASTER M WITH(NOLOCK)        
		  INNER JOIN ASSIGNBRANCHCUS AB WITH(NOLOCK) ON M.USERID = AB.USERID        
	   WHERE M.USERNAME <> @USERNAME        
	   UNION        
	   SELECT 3 SORTORDER, CB.BRANCHNAME AS BRANCHNAME,         
		  CB.BRANCHCODE AS BRANCHCODE, 'NOT ASSIGNED' ASSIGNEDTO,        
		  CB.BRANCHID AS BRANCHID, 0 AS USERID, 0 AS ASSIGNED,        
		  ROW_NUMBER() OVER (ORDER BY CB.BRANCHID ASC) AS ROWNUMBER         
	   FROM COMPANYBRANCH CB WITH(NOLOCK)        
	   WHERE CB.BRANCHID NOT IN (SELECT BRANCHID FROM ASSIGNBRANCHCUS WITH(NOLOCK))        
    )  RESULT      
    ORDER BY SORTORDER            
    SELECT @RECORDCOUNT = COUNT(*)            
    FROM #RESULTS              
    SELECT * FROM #RESULTS              
    WHERE ROWNUMBER BETWEEN(@PAGEINDEX -1) * @PAGESIZE + 1 AND(((@PAGEINDEX -1) * @PAGESIZE + 1) + @PAGESIZE) - 1              
    DROP TABLE #RESULTS    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomerDtaxCin')
DROP PROCEDURE USP_CUS_GetCustomerDtaxCin
GO
CREATE PROCEDURE USP_CUS_GetCustomerDtaxCin
	@TRANSDATE SMALLDATETIME	
AS
BEGIN
	SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID,DTAXPAYID
	INTO #CURRENTAUDIT
	FROM DTAXPAYAUDIT
	WHERE ISDELETED = 0
	GROUP BY DTAXPAYID
	SELECT DTA.* 
	INTO #REQAUDIT
	FROM #CURRENTAUDIT CA
	INNER JOIN DTAXPAYAUDIT DTA WITH(NOLOCK)
	ON CA.DTAXPAYAUDITID = DTA.DTAXPAYAUDITID
	WHERE DTA.[STATUS] = 8
	SELECT 
	CDT.NAME,CDT.PAN,CDT.[TAN],CDT.CITY,
	CDT.STATEID,CDT.PINCODE,
	CDT.ADDRESS1 + ''+ CDT.ADDRESS2 ADDRESS1,
	CDT.ADDRESS3 + '' + CDT.ADDRESS4 ADDRESS2,
	CDP.DTAXPAYID,CDP.CHALLANTYPE,CDP.TAXAPPLICABLE,
	CDP.PAYMENTTYPE,CDP.DTAXID,
	CASE WHEN CDP.NATOFPAY > 0 THEN CDP.NATOFPAY ELSE '' END NATOFPAY,
	(CDP.INCOMETAX + CDP.SURCHARGE + CDP.EDUCESS + CDP.INTEREST + CDP.PENALTY + CDP.OTHERS + CDP.LATEFEE) TOTALAMT,
	CDP.INCOMETAX,CDP.SURCHARGE,CDP.EDUCESS,
	CDP.INTEREST,CDP.PENALTY,CDP.OTHERS,
	CDP.LATEFEE,ISNULL(CDP.CHAREFNO,'') CHAREFNO,ISNULL(CDP.BANKREFNO,'')BANKREFNO,
	CDP.REFERENCEDOC,ISNULL(CDP.CONTENTTYPE,'') CONTENTTYPE,ISNULL(CDP.[FILENAME],'') [FILENAME],
	DTA.DTAXPAYAUDITID,DTA.BRANCHID,
	DTA.[STATUS],DTA.AUDITDATE,DTA.ISDELETED,
	DTA.USERNAME,DTA.REMARKS,CDP.TRANSDATE
	INTO #TEMP
	FROM DTAXPAYAUDIT DTA WITH(NOLOCK)
	INNER JOIN CUSTOMERDTAXPAYMENT CDP WITH(NOLOCK)
	ON CDP.DTAXPAYID = DTA.DTAXPAYID
	INNER JOIN CUSTOMERDTAX CDT WITH(NOLOCK)
	ON CDT.DTAXID = CDP.DTAXID
	WHERE DTA.ISDELETED = 0
	AND CDP.TRANSDATE = @TRANSDATE
	SELECT T.*
	INTO #TEMP1
	FROM #TEMP T
	INNER JOIN #REQAUDIT REQ
	ON REQ.DTAXPAYAUDITID = T.DTAXPAYAUDITID
	DROP TABLE #TEMP
	DROP TABLE #REQAUDIT
	DROP TABLE #CURRENTAUDIT
	SELECT 
	NAME,PAN,[TAN],CITY,SM.STATENAME + ' - ' +PINCODE STATEPIN,ADDRESS1,ADDRESS2,DTAXPAYID,
	CHALLANTYPE,TAXAPPLICABLE,PAYMENTTYPE,DTAXID,ISNULL(TS.TAXNAME,'') NATOFPAY,TOTALAMT,
	INCOMETAX,SURCHARGE,EDUCESS,INTEREST,PENALTY,OTHERS,LATEFEE,
	CHAREFNO,BANKREFNO,REFERENCEDOC,CONTENTTYPE,[FILENAME],
	DTAXPAYAUDITID,BRANCHID,[STATUS],AUDITDATE,ISDELETED,USERNAME,REMARKS
	FROM #TEMP1 T
	INNER JOIN STATEMASTER SM WITH(NOLOCK)
	ON SM.STATEID = T.STATEID
	LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)
	ON TS.SECTIONID = T.NATOFPAY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomerDTaxMasterDetails')
DROP PROCEDURE USP_CUS_GetCustomerDTaxMasterDetails
GO
CREATE PROCEDURE [USP_CUS_GetCustomerDTaxMasterDetails]
	@BRANCHID INT,
	@customerID VARCHAR(9),
	@dTaxAuditID INT
AS
BEGIN
	DECLARE @dTaxID INT;
	DECLARE @maxDTaxAuditID INT;
	DECLARE @lastEditUser VARCHAR(100);
	SET @dTaxID = (SELECT DTAXID FROM CUSTOMERDTAXAUDIT WITH(NOLOCK) WHERE DTAXAUDITID = @dTaxAuditID)
	SET @maxDTaxAuditID = (SELECT MAX(DTAXAUDITID) FROM CUSTOMERDTAXAUDIT WITH(NOLOCK) WHERE DTAXID = @dTaxID)
	SELECT @lastEditUser = USERNAME
	FROM CUSTOMERDTAXAUDIT
	WHERE DTAXAUDITID = 
	(
		SELECT MAX(DTAXAUDITID) 
		FROM CUSTOMERDTAXAUDIT
		WHERE DTAXID = @dTaxID
		AND STATUS = 1
	)
	SELECT 
	CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CITY,CDT.PINCODE,CDT.STATEID,
	CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,CDT.EMAILID,CDT.PHONENUMBER,
	CDA.BRANCHID,CDA.DTAXAUDITID,
	CDA.REMARKS,CDA.ISDELETED,CDA.USERNAME,CDA.[STATUS],CDA.AUDITDATE,CDT.CUSTOMERID,
	@lastEditUser LASTEDITUSER
	FROM CUSTOMERDTAX CDT WITH(NOLOCK)
	INNER JOIN CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
	ON CDA.DTAXID = CDT.DTAXID
	WHERE CDA.ISDELETED = 0 AND CDA.DTAXAUDITID = @maxDTaxAuditID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomerDTaxPayDetails')
DROP PROCEDURE USP_CUS_GetCustomerDTaxPayDetails
GO
CREATE PROCEDURE USP_CUS_GetCustomerDTaxPayDetails 
	@BRANCHID INT,
	@customerID VARCHAR(9),
	@payAuditID INT,
	@custdTaxID INT
AS
BEGIN
	DECLARE @dTaxPayID INT;
	DECLARE @minDTaxPayAuditID INT;
	DECLARE @createdBranchID INT;
	DECLARE @custminDTaxAuditID INT;
	DECLARE @custcreatedBranchID INT;
	DECLARE @lastEditUser VARCHAR(100);
	DECLARE @branch VARCHAR(100);
	DECLARE @custBranch VARCHAR(100);
	SET NOCOUNT ON
	SET @dTaxPayID = (SELECT DTAXPAYID FROM DTAXPAYAUDIT WITH(NOLOCK) WHERE DTAXPAYAUDITID = @payAuditID)
	SET @minDTaxPayAuditID = (SELECT MIN(DTAXPAYAUDITID) FROM DTAXPAYAUDIT WITH(NOLOCK) WHERE DTAXPAYID = @dTaxPayID)
	SET @createdBranchID = (SELECT BRANCHID FROM DTAXPAYAUDIT WITH(NOLOCK) WHERE DTAXPAYAUDITID = @minDTaxPayAuditID)
	SET @custminDTaxAuditID = (SELECT MIN(DTAXAUDITID) FROM CUSTOMERDTAXAUDIT WITH(NOLOCK) WHERE DTAXID = @custdTaxID)
	SET @custcreatedBranchID = (SELECT BRANCHID FROM CUSTOMERDTAXAUDIT WITH(NOLOCK) WHERE DTAXAUDITID = @custminDTaxAuditID)
	SET @branch = (SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @createdBranchID) 
		+ '-' + (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @createdBranchID)
	SET @custBranch = (SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @custcreatedBranchID) 
		+ '-' + (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @custcreatedBranchID)
	SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITIDM
	INTO #MAXAUDITID
	FROM DTAXPAYAUDIT WITH(NOLOCK)
	WHERE DTAXPAYID = @dTaxPayID
	AND STATUS = 1
	SELECT @lastEditUser = USERNAME
	FROM DTAXPAYAUDIT WITH(NOLOCK)
	WHERE DTAXPAYAUDITID = 
	(
		SELECT DTAXPAYAUDITIDM 
		FROM #MAXAUDITID
	)
	DROP TABLE #MAXAUDITID
	SELECT *
	INTO #DTAXPAYAUDIT
	FROM DTAXPAYAUDIT WITH(NOLOCK)
	WHERE
		ISDELETED = 0 AND DTAXPAYAUDITID = @payAuditID
	SELECT *
	INTO #CUSTOMERDTAXPAYMENT
	FROM CUSTOMERDTAXPAYMENT WITH(NOLOCK)
	WHERE DTAXPAYID IN (SELECT DTAXPAYID FROM #DTAXPAYAUDIT)
	SELECT *
	INTO #CUSTOMERDTAX
	FROM CUSTOMERDTAX WITH(NOLOCK)
	WHERE DTAXID IN (SELECT DTAXID FROM #CUSTOMERDTAXPAYMENT)
	SELECT 
		CDT.NAME,CDT.PAN,CDT.[TAN],CDT.CUSTOMERID,
		CDP.DTAXPAYID,CDP.CHALLANTYPE,CDP.TAXAPPLICABLE,
		CDP.PAYMENTTYPE,CDP.DTAXID,CDP.NATOFPAY,
		CDP.INCOMETAX,CDP.SURCHARGE,CDP.EDUCESS,
		CDP.INTEREST,CDP.PENALTY,CDP.OTHERS,
		CDP.LATEFEE,ISNULL(CDP.CHAREFNO,'') CHAREFNO,ISNULL(CDP.BANKREFNO,'')BANKREFNO,
		CDP.REFERENCEDOC,ISNULL(CDP.CONTENTTYPE,'') CONTENTTYPE,ISNULL(CDP.[FILENAME],'') [FILENAME],
		ISNULL(CDP.FINACLETRANSID,'') FINACLETRANSID,CDP.TRANSDATE,
		DTA.DTAXPAYAUDITID,DTA.BRANCHID,
		DTA.[STATUS],DTA.AUDITDATE,DTA.ISDELETED,
		DTA.USERNAME,DTA.REMARKS,
		@branch BRANCH, @custBranch CUSTBRANCH,	@lastEditUser LASTEDITUSER
	FROM #DTAXPAYAUDIT DTA WITH(NOLOCK)
		INNER JOIN #CUSTOMERDTAXPAYMENT CDP WITH(NOLOCK)
			ON CDP.DTAXPAYID = DTA.DTAXPAYID
		INNER JOIN #CUSTOMERDTAX CDT WITH(NOLOCK)
			ON CDT.DTAXID = CDP.DTAXID
	WHERE DTA.ISDELETED = 0 AND DTA.DTAXPAYAUDITID = @payAuditID
	DROP TABLE #CUSTOMERDTAX
	DROP TABLE #CUSTOMERDTAXPAYMENT
	DROP TABLE #DTAXPAYAUDIT
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomerDTaxPayDetailsPaged')
DROP PROCEDURE USP_CUS_GetCustomerDTaxPayDetailsPaged
GO
CREATE PROCEDURE USP_CUS_GetCustomerDTaxPayDetailsPaged 
	@pageIndex INT,
	@pageSize INT,
	@BRANCHID INT,
	@ISCHECKER BIT,
	@NAME VARCHAR(75),
	@customerID VARCHAR(9),
	@PAN VARCHAR(10),
	@TAN VARCHAR(10),
	@challanType INT,
	@incomeTaxFrom NUMERIC(13,2),
	@incomeTaxTo NUMERIC(13,2),
	@interestFrom NUMERIC(13,2),
	@interestTo NUMERIC(13,2),
	@transdateFrom DATETIME = NULL,                                  
	@transdateTo DATETIME = NULL,  
	@USERID INT = 0,
	@finacleTransID VARCHAR(10),
	@totalFrom NUMERIC(13,2),
	@totalTo NUMERIC(13,2)
AS
	BEGIN
	    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED  
		DECLARE @QUERY NVARCHAR(MAX)
		CREATE TABLE #TEMP(NAME VARCHAR(75), PAN VARCHAR(10), [TAN] VARCHAR(10),
			CUSTOMERID VARCHAR(9), DTAXPAYID INT, CHALLANTYPE INT, TAXAPPLICABLE INT,
			PAYMENTTYPE INT, DTAXID INT,NATOFPAY INT,
			INCOMETAX NUMERIC(13,2), SURCHARGE NUMERIC(13,2), EDUCESS NUMERIC(13,2),
			INTEREST NUMERIC(13,2), PENALTY NUMERIC(13,2), OTHERS NUMERIC(13,2),
			LATEFEE NUMERIC(13,2), CHAREFNO VARCHAR(25), BANKREFNO VARCHAR(25),
			REFERENCEDOC VARBINARY(MAX), CONTENTTYPE INT, [FILENAME] VARCHAR(260),
			FINACLETRANSID VARCHAR(10), TRANSDATE DATETIME, ASSESSMENTYEAR VARCHAR(8),
			DTAXPAYAUDITID INT, BRANCHID INT, [STATUS] INT,
			AUDITDATE DATETIME, ISDELETED BIT, USERNAME VARCHAR(75), REMARKS VARCHAR(200), BRANCH VARCHAR(200))
		SET @QUERY = 'SELECT 
				CDT.NAME,CDT.PAN,CDT.[TAN],CDT.CUSTOMERID,
				CDP.DTAXPAYID,CDP.CHALLANTYPE,CDP.TAXAPPLICABLE,
				CDP.PAYMENTTYPE,CDP.DTAXID,CDP.NATOFPAY,
				CDP.INCOMETAX,CDP.SURCHARGE,CDP.EDUCESS,
				CDP.INTEREST,CDP.PENALTY,CDP.OTHERS,
				CDP.LATEFEE,ISNULL(CDP.CHAREFNO,'''') CHAREFNO,ISNULL(CDP.BANKREFNO,'''')BANKREFNO,
				CDP.REFERENCEDOC,ISNULL(CDP.CONTENTTYPE,'''') CONTENTTYPE,ISNULL(CDP.[FILENAME],'''') [FILENAME],
				ISNULL(CDP.FINACLETRANSID,'''') FINACLETRANSID,CDP.TRANSDATE,ISNULL(CDP.ASSESSMENTYEAR,'''') ASSESSMENTYEAR,
				DTA.DTAXPAYAUDITID,DTA.BRANCHID,
				DTA.[STATUS],DTA.AUDITDATE,DTA.ISDELETED,
				DTA.USERNAME,DTA.REMARKS,'''' BRANCH
			FROM DTAXPAYAUDIT DTA WITH(NOLOCK)
				INNER JOIN CUSTOMERDTAXPAYMENT CDP WITH(NOLOCK)
					ON CDP.DTAXPAYID = DTA.DTAXPAYID
				INNER JOIN CUSTOMERDTAX CDT WITH(NOLOCK)
					ON CDT.DTAXID = CDP.DTAXID
			WHERE DTA.ISDELETED = 0'
		IF (@USERID <> 1)
			BEGIN
				SET @QUERY = @QUERY + ' AND DTA.BRANCHID =' + CAST(@BRANCHID AS VARCHAR)
				IF (@ISCHECKER = 1)
				BEGIN
					SET @QUERY = @QUERY + ' AND DTA.[STATUS] = 1' + ' AND DTA.BRANCHID =' + CAST(@BRANCHID AS VARCHAR)
				END
			END
		ELSE
			BEGIN
				SET @QUERY = @QUERY + ' AND DTA.[STATUS] IN (7,10)'
			END
		IF(@ISCHECKER = 1)
			BEGIN
				SET @QUERY = @QUERY + ' AND DTA.[STATUS] = 1' + ' AND DTA.BRANCHID =' + CAST(@BRANCHID AS VARCHAR)
			END
		IF(@NAME < >'')
			BEGIN
				SET @QUERY = @QUERY + ' AND CDT.NAME LIKE ''%' + @NAME + '%'''
			END
		IF(@customerID < > '')
			BEGIN
				SET @QUERY = @QUERY + ' AND CDT.CUSTOMERID LIKE ''%'+ @customerID + '%'''
			END
		IF(@PAN < > '')
			BEGIN
				SET @QUERY = @QUERY + ' AND CDT.PAN LIKE ''%'+ @PAN + '%'''
			END
		IF(@TAN < > '')
			BEGIN
				SET @QUERY = @QUERY + ' AND CDT.[TAN] LIKE ''%'+ @TAN +'%'''
			END
		IF(@challanType < > -1)
			BEGIN
				SET @QUERY = @QUERY + ' AND CDP.CHALLANTYPE = ' + CAST(@challanType AS VARCHAR)
			END
		IF(@finacleTransID < > '')
			BEGIN
				SET @QUERY = @QUERY + ' AND CDP.FINACLETRANSID LIKE ''%'+ @finacleTransID + '%'''
			END
		IF(@totalFrom < > 0)
			BEGIN
				SET @QUERY = @QUERY + ' AND CDP.INCOMETAX + CDP.SURCHARGE + CDP.EDUCESS + CDP.INTEREST BETWEEN ' + CAST(@totalFrom AS VARCHAR) +' AND ' + CAST(@totalTo AS VARCHAR)
			END
		IF(@incomeTaxFrom < > 0)
			BEGIN
				SET @QUERY = @QUERY + ' AND CDP.INCOMETAX BETWEEN ' + CAST(@incomeTaxFrom AS VARCHAR) +' AND ' + CAST(@incomeTaxTo AS VARCHAR)
			END
		IF(@interestFrom < > 0)
			BEGIN
				SET @QUERY = @QUERY + ' AND CDP.INTEREST BETWEEN ' + CAST(@interestFrom AS VARCHAR) +' AND ' + CAST(@interestTo AS VARCHAR)
			END
		IF(@transdateFrom IS NOT NULL AND @transdateTo IS NOT NULL)                                  
			BEGIN                   
				SET @QUERY = @QUERY + ' AND CDP.TRANSDATE BETWEEN ''' + CAST(@transdateFrom AS VARCHAR) + ''' AND ''' + CAST(@transdateTo AS VARCHAR) + '''';                                  
			END  
		INSERT INTO #TEMP 
		EXEC sp_executesql @QUERY
		SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID, DTAXPAYID 
		INTO #TEMP1
		FROM DTAXPAYAUDIT WITH(NOLOCK)
		GROUP BY DTAXPAYID
		SELECT ROW_NUMBER() OVER
		(
			ORDER BY (SELECT 0)
		) AS ROWNUMBER,
		T.*
		INTO #RESULT
		FROM #TEMP T
			INNER JOIN #TEMP1 T1
			ON T1.DTAXPAYAUDITID = T.DTAXPAYAUDITID AND T1.DTAXPAYID = T.DTAXPAYID
		DROP TABLE #TEMP
		DROP TABLE #TEMP1
		SELECT * 
		INTO #RESULT1
		FROM #RESULT
		WHERE ROWNUMBER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
		SELECT MIN(CDTA.DTAXAUDITID) DTAXAUDITID,CDTA.DTAXID
		INTO #RESULT2
		FROM #RESULT1 R1
			INNER JOIN CUSTOMERDTAXAUDIT CDTA
				ON CDTA.DTAXID = R1.DTAXID
		GROUP BY CDTA.DTAXID
		SELECT CDTA.BRANCHID,R2.DTAXID 
		INTO #RESULT3
		FROM CUSTOMERDTAXAUDIT CDTA
			INNER JOIN #RESULT2 R2
				ON R2.DTAXAUDITID = CDTA.DTAXAUDITID
		SELECT CB.BRANCHCODE + '-' + CB.BRANCHNAME BRANCH,R3.DTAXID 
		INTO #RESULT4
		FROM COMPANYBRANCH CB 
			INNER JOIN #RESULT3 R3
				ON CB.BRANCHID = R3.BRANCHID
		UPDATE #RESULT1
		SET BRANCH = R4.BRANCH
		FROM #RESULT1 R1
			INNER JOIN #RESULT4 R4
				ON R4.DTAXID = R1.DTAXID
		DROP TABLE #RESULT
		DROP TABLE #RESULT2
		DROP TABLE #RESULT3
		DROP TABLE #RESULT4
		SELECT * FROM #RESULT1
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomerDTaxPayReport')
DROP PROCEDURE USP_CUS_GetCustomerDTaxPayReport
GO
CREATE PROCEDURE [USP_CUS_GetCustomerDTaxPayReport]
	@BRANCHID INT,
	@customerID VARCHAR(20),
	@challanType INT,
	@dTaxPayID INT,
	@dTaxID INT,
	@dTaxPayAuditID INT
AS
BEGIN
	DECLARE @lastEditUser VARCHAR(100);
	SELECT @lastEditUser = USERNAME
	FROM DTAXPAYAUDIT
	WHERE DTAXPAYAUDITID = 
	(
		SELECT MAX(DTAXPAYAUDITID) 
		FROM DTAXPAYAUDIT
		WHERE DTAXPAYID = @dTaxPayID
		AND STATUS = 1
	)
	SELECT 
	CDT.NAME,CDT.PAN,CDT.[TAN],CDT.CITY,
	CDT.STATEID,CDT.PINCODE,CDT.CUSTOMERID,
	CDT.ADDRESS1 + ''+ CDT.ADDRESS2 ADDRESS1,
	CDT.ADDRESS3 + '' + CDT.ADDRESS4 ADDRESS2,
	CDP.DTAXPAYID,CDP.CHALLANTYPE,CDP.TAXAPPLICABLE,
	CDP.PAYMENTTYPE,CDP.DTAXID,
	CASE WHEN CDP.NATOFPAY > 0 THEN CDP.NATOFPAY ELSE '' END NATOFPAY,
	(CDP.INCOMETAX + CDP.SURCHARGE + CDP.EDUCESS + CDP.INTEREST + CDP.PENALTY + CDP.OTHERS + CDP.LATEFEE) TOTALAMT,
	CDP.INCOMETAX,CDP.SURCHARGE,CDP.EDUCESS,
	CDP.INTEREST,CDP.PENALTY,CDP.OTHERS,
	CDP.LATEFEE,ISNULL(CDP.CHAREFNO,'') CHAREFNO,ISNULL(CDP.BANKREFNO,'')BANKREFNO,
	CDP.REFERENCEDOC,ISNULL(CDP.CONTENTTYPE,'') CONTENTTYPE,ISNULL(CDP.[FILENAME],'') [FILENAME],CDP.FINACLETRANSID,CDP.TRANSDATE,
	DTA.DTAXPAYAUDITID,DTA.BRANCHID,
	DTA.[STATUS],DTA.AUDITDATE,DTA.ISDELETED,
	DTA.USERNAME,DTA.REMARKS
	INTO #TEMP
	FROM DTAXPAYAUDIT DTA WITH(NOLOCK)
	INNER JOIN CUSTOMERDTAXPAYMENT CDP WITH(NOLOCK)
	ON CDP.DTAXPAYID = DTA.DTAXPAYID
	INNER JOIN CUSTOMERDTAX CDT WITH(NOLOCK)
	ON CDT.DTAXID = CDP.DTAXID
	WHERE DTA.ISDELETED = 0
	AND DTA.[STATUS] = 9
	AND CDP.DTAXPAYID = @dTaxPayID AND CDT.DTAXID = @dTaxID
	AND CDT.CUSTOMERID = CAST(@customerID AS VARCHAR)
	AND CDP.CHALLANTYPE = @challanType 
	SELECT 
	NAME,PAN,[TAN],CITY,SM.STATENAME + ' - ' +PINCODE STATEPIN,CUSTOMERID,ADDRESS1,ADDRESS2,DTAXPAYID,
	CHALLANTYPE,TAXAPPLICABLE,PAYMENTTYPE,DTAXID,ISNULL(TS.TAXNAME,'') NATOFPAY,TOTALAMT,
	INCOMETAX,SURCHARGE,EDUCESS,INTEREST,PENALTY,OTHERS,LATEFEE,
	CHAREFNO,BANKREFNO,REFERENCEDOC,CONTENTTYPE,[FILENAME],FINACLETRANSID,TRANSDATE,
	DTAXPAYAUDITID,BRANCHID,[STATUS],AUDITDATE,ISDELETED,USERNAME,REMARKS,
	'' BRANCH, '' CUSTBRANCH,@lastEditUser LASTEDITUSER
	FROM #TEMP T
	INNER JOIN STATEMASTER SM WITH(NOLOCK)
	ON SM.STATEID = T.STATEID
	LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)
	ON TS.SECTIONID = T.NATOFPAY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomerItax')
DROP PROCEDURE USP_CUS_GetCustomerItax
GO
CREATE PROCEDURE [USP_CUS_GetCustomerItax]  
	@CUSTOMERITAXID INT     
AS   
BEGIN
	DECLARE @lastEditUser VARCHAR(100);
	SELECT MAX(ITAXAUDITID) ITAXAUDITID,ITAXID
	INTO #TEMPITAX1  
	FROM CUSTOMERITAXAUDIT WITH(NOLOCK) 
	WHERE ITAXID = @CUSTOMERITAXID 
	GROUP BY ITAXID
	SELECT @lastEditUser = USERNAME
	FROM CUSTOMERITAXAUDIT
	WHERE ITAXAUDITID = 
	(
		SELECT MAX(ITAXAUDITID) 
		FROM CUSTOMERITAXAUDIT
		WHERE ITAXID = @CUSTOMERITAXID
		AND STATUS = 1
	) 
	SELECT CI.ITAXID,CI.ASSESSECODE,CI.COMNAME,CI.COMCODE,CI.DIVCODE,CI.RANGECODE,
	CI.NAME,CI.CITY,CI.PINCODE,CI.CUSTOMERID,CI.ADDRESS1,CI.ADDRESS2,CI.ADDRESS3,
	CI.ADDRESS4,CI.PHONENO,CI.EMAILID,CI.BRANCHID,SM.STATENAME,
	CIA.ITAXAUDITID,CIA.REMARKS,CIA.ISDELETED,CIA.USERNAME,CIA.[STATUS],CIA.AUDITDATE,
	@lastEditUser LASTEDITUSER 
	FROM CUSTOMERITAX CI WITH(NOLOCK)   
	INNER JOIN STATEMASTER SM WITH(NOLOCK) ON SM.STATEID = CI.STATEID  
	INNER JOIN #TEMPITAX1 T WITH(NOLOCK) ON T.ITAXID = CI.ITAXID
	INNER JOIN CUSTOMERITAXAUDIT CIA WITH(NOLOCK) ON CIA.ITAXAUDITID = T.ITAXAUDITID
	WHERE CI.ITAXID = @CUSTOMERITAXID AND CIA.ISDELETED=0
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomerItaxCin')
DROP PROCEDURE USP_CUS_GetCustomerItaxCin
GO
CREATE PROCEDURE [USP_CUS_GetCustomerItaxCin]
	@TRANSDATE SMALLDATETIME
AS
BEGIN
	SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID,ITAXPAYID
	INTO #CURRENTAUDIT
	FROM ITAXPAYAUDIT
	WHERE ISDELETED = 0
	GROUP BY ITAXPAYID
	SELECT ITA.* 
	INTO #REQAUDIT
	FROM #CURRENTAUDIT CA
	INNER JOIN ITAXPAYAUDIT ITA WITH(NOLOCK)
	ON CA.ITAXPAYAUDITID = ITA.ITAXPAYAUDITID
	WHERE ITA.[STATUS] = 8
	SELECT ISNULL(CIP.BANKREFNO,'')BANKREFNO,'' AS EFOCALBRANCH,CIP.ITAXPAYID,CIP.BRANCHID,CIP.PAYMENTTYPE,CI.NAME,CI.ASSESSECODE,CI.COMNAME,
	CI.COMCODE,CI.DIVCODE,CI.RANGECODE,(CI.COMCODE + CI.DIVCODE + CI.RANGECODE)LOCATIONCODE,(CI.COMCODE + '-' + CI.COMNAME)COMCODENAME,
	CI.ADDRESS1,CI.ADDRESS2,CI.ADDRESS3,CI.ADDRESS4,CI.CITY,SM.STATENAME,CI.PINCODE,ISNULL(CIP.CHAREFNO,'')CHAREFNO,'' AS CINDETAILS,'' AS SHEDULEDDATE,
    '' AS SHEDULEDDATETIME,'' AS REASON,CIP.ITAXID,
    CIP.AMTCODE1,CIP.AMTCODE2,CIP.AMTCODE3,CIP.AMTCODE4,CIP.AMTCODE5,CIP.AMTCODE6,(CIP.AMTCODE1 + CIP.AMTCODE2 + CIP.AMTCODE3 + CIP.AMTCODE4 + CIP.AMTCODE5 + CIP.AMTCODE6) AMTCODETOTAL,
    CIP.ACCCODE1 CODE1,CIP.ACCCODE2 CODE2,CIP.ACCCODE3 CODE3,CIP.ACCCODE4 CODE4,CIP.ACCCODE5 CODE5,CIP.ACCCODE6 CODE6,
    IPA.ITAXPAYAUDITID,IPA.STATUS,IPA.AUDITDATE,IPA.ISDELETED,IPA.USERNAME,IPA.REMARKS,
    (CB.BRANCHCODE + '-' + CB.BRANCHNAME)DEBITBRANCHNAME,'' AS ACCNO, '' AS FINALREMARKS,
     CIP.TRANSDATE
    INTO #TEMP
    FROM CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)
	INNER JOIN CUSTOMERITAX CI WITH(NOLOCK) ON CIP.ITAXID = CI.ITAXID
	INNER JOIN ITAXPAYAUDIT IPA WITH(NOLOCK) ON CIP.ITAXPAYID = IPA.ITAXPAYID
	INNER JOIN STATEMASTER SM WITH(NOLOCK) ON CI.STATEID = SM.STATEID
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= IPA.BRANCHID
	WHERE IPA.ISDELETED = 0
	AND CIP.TRANSDATE = @TRANSDATE
	SELECT T.*
	INTO #TEMP1
	FROM #TEMP T
	INNER JOIN #REQAUDIT REQ
	ON REQ.ITAXPAYAUDITID = T.ITAXPAYAUDITID
	DROP TABLE #TEMP
	DROP TABLE #REQAUDIT
	DROP TABLE #CURRENTAUDIT
	SELECT * FROM #TEMP1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomerITaxPaged')
DROP PROCEDURE USP_CUS_GetCustomerITaxPaged
GO
CREATE PROCEDURE [dbo].[USP_CUS_GetCustomerITaxPaged]
	@STARTROW INT,        
	@PAGESIZE INT,  
	@ISCHECKER BIT=0,  
	@STATUS INT=1,  
	@NAME VARCHAR(75),  
	@CUSTOMERID VARCHAR(9) ,  
	@ASSESSECODE VARCHAR(15),
	@BRANCHID INT,
	@USERID INT = 0,
	@showApproved BIT = 0  
AS        
	BEGIN        
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED         
		/* The number of rows affected by the different commands does not interest the application, so turn NOCOUNT ON*/        
		--SET NOCOUNT ON        
		/* Determine the first record and last record */        
		DECLARE @FIRSTREC INT, @LASTREC INT, @SQLQUERY NVARCHAR(MAX);        
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE        
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);   
		CREATE TABLE #TEMPITAX(ITAXID INT,ASSESSECODE VARCHAR(15),COMNAME VARCHAR(75),COMCODE VARCHAR(4),DIVCODE VARCHAR(4),RANGECODE VARCHAR(4),NAME VARCHAR(75),CITY VARCHAR(25),PINCODE VARCHAR(6),STATENAME VARCHAR(100),CUSTOMERID VARCHAR(9),  
			ADDRESS1 VARCHAR(25),ADDRESS2 VARCHAR(25),ADDRESS3 VARCHAR(25),ADDRESS4 VARCHAR(25),PHONENO VARCHAR(25),EMAILID VARCHAR(75),BRANCHID INT,BRANCHCODE VARCHAR(10),ITAXAUDITID INT,  
			REMARKS VARCHAR(200),ISDELETED BIT,USERNAME VARCHAR(75),[STATUS] INT,AUDITDATE DATETIME)  
		SET @SQLQUERY = 'SELECT CI.ITAXID,CI.ASSESSECODE,CI.COMNAME,CI.COMCODE,CI.DIVCODE,CI.RANGECODE,CI.NAME,CI.CITY,CI.PINCODE,SM.STATENAME,CI.CUSTOMERID,CI.ADDRESS1,CI.ADDRESS2,CI.ADDRESS3,CI.ADDRESS4,CI.PHONENO,CI.EMAILID,CIA.BRANCHID,CB.BRANCHCODE,  
			 CIA.ITAXAUDITID,CIA.REMARKS,CIA.ISDELETED,CIA.USERNAME,CIA.STATUS,CIA.AUDITDATE  
			 FROM CUSTOMERITAX CI WITH(NOLOCK)   
			 INNER JOIN CUSTOMERITAXAUDIT CIA WITH(NOLOCK) ON CI.ITAXID = CIA.ITAXID  
			 INNER JOIN STATEMASTER SM WITH(NOLOCK) ON SM.STATEID=CI.STATEID
			 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=CIA.BRANCHID  
			 WHERE CIA.ISDELETED = 0'  
		IF (@ISCHECKER = 1)  
			BEGIN
				IF(@showApproved = 0)
					BEGIN
						IF (EXISTS(SELECT * FROM ASSIGNBRANCHCUS WITH(NOLOCK) WHERE USERID = @userID))
							BEGIN
								SET @SQLQUERY = @SQLQUERY + ' AND CIA.[STATUS] IN ('+CAST(@STATUS AS VARCHAR) +',14) AND CIA.BRANCHID IN(SELECT BRANCHID FROM ASSIGNBRANCHCUS WHERE USERID ='+ CAST(@USERID AS VARCHAR)+')'
							END
						ELSE
							BEGIN
								SET @SQLQUERY = @SQLQUERY + ' AND CIA.[STATUS] = '+CAST(@STATUS AS VARCHAR) +' AND CIA.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)
							END
					END
				ELSE
					BEGIN
						IF (EXISTS(SELECT * FROM ASSIGNBRANCHCUS WITH(NOLOCK) WHERE USERID = @userID))
							BEGIN
								SET @SQLQUERY = @SQLQUERY + ' AND CIA.[STATUS] IN(7,13)' +' AND CIA.BRANCHID IN(SELECT BRANCHID FROM ASSIGNBRANCHCUS WHERE USERID ='+ CAST(@USERID AS VARCHAR)+')'
							END
						ELSE
							BEGIN
								SET @SQLQUERY = @SQLQUERY + ' AND CIA.[STATUS] IN(7,13)' +' AND CIA.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)
							END
					END
			END  
		IF (@NAME <> '')  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND CI.NAME LIKE ''%'+ @NAME +'%'''  
			END  
		IF(@CUSTOMERID <> '' OR @CUSTOMERID <> NULL)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND CI.CUSTOMERID LIKE ''%'+ @CUSTOMERID +'%'''  
			END  
		IF(@ASSESSECODE <> '')  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND CI.ASSESSECODE LIKE ''%'+ @ASSESSECODE +'%'''  
			END  
		INSERT INTO #TEMPITAX  
		EXEC sp_executesql @SQLQUERY  
		PRINT @SQLQUERY
		SELECT MAX(ITAXAUDITID) ITAXAUDITID,ITAXID  
		INTO #TEMPITAX1  
		FROM CUSTOMERITAXAUDIT WITH(NOLOCK)  
		GROUP BY ITAXID  
		SELECT ROW_NUMBER() OVER  
		(  
			ORDER BY T.ITAXID ASC  
		) AS ROWNUM,  
		T.*  
		INTO #RESULT  
		FROM #TEMPITAX T  
		INNER JOIN #TEMPITAX1 T1  
		ON T.ITAXID = T1.ITAXID AND T.ITAXAUDITID = T1.ITAXAUDITID  
		IF(@isChecker = 1)
		BEGIN
			SELECT * INTO #FINALTAX 
			FROM (
			SELECT * FROM #RESULT  WHERE STATUS IN (1) AND BRANCHID=@BRANCHID
			UNION
			SELECT * FROM #RESULT WHERE STATUS NOT IN(1)
			) AS FINTMPTAX
		END
		ELSE
		BEGIN
			SELECT * INTO #FINALUSER
			FROM (
			SELECT * FROM #RESULT  WHERE STATUS IN (1,7,14) AND BRANCHID=@BRANCHID
			UNION
			SELECT * FROM #RESULT WHERE STATUS NOT IN(1,7,14)
			) AS FINTMPUSER
		END
		IF(@isChecker = 1)
		BEGIN
			SELECT ROW_NUMBER() OVER
			(
				ORDER BY F.ITAXID ASC
			) AS FINALROWNUMBERTAX,
			F.*
			INTO #FINALRESULTTAX
			FROM #FINALTAX F
		END 
		ELSE
		BEGIN
				SELECT ROW_NUMBER() OVER
			(
				ORDER BY F.ITAXID ASC
			) AS FINALROWNUMBERUSER,
			F.*
			INTO #FINALRESULTUSER
			FROM #FINALUSER F
		END
		IF(@isChecker = 1)
		BEGIN
			SELECT * FROM #FINALRESULTTAX WHERE FINALROWNUMBERTAX >  CAST(@FIRSTREC AS VARCHAR) AND FINALROWNUMBERTAX < CAST(@LASTREC AS VARCHAR)      
		END
		ELSE
		BEGIN
			SELECT * FROM #FINALRESULTUSER WHERE FINALROWNUMBERUSER >  CAST(@FIRSTREC AS VARCHAR) AND FINALROWNUMBERUSER < CAST(@LASTREC AS VARCHAR)      
		END 
		IF OBJECT_ID('TEMPDB..#TEMPITAX') IS NOT NULL
			DROP TABLE #TEMPITAX  
		IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL
			DROP TABLE #RESULT  
		IF OBJECT_ID('TEMPDB..#TEMPITAX1') IS NOT NULL
			DROP TABLE #TEMPITAX1
		IF OBJECT_ID('TEMPDB..#FINALTAX') IS NOT NULL
			DROP TABLE #FINALTAX    
		IF OBJECT_ID('TEMPDB..#FINALUSER') IS NOT NULL
			DROP TABLE #FINALUSER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomerITaxPayReport')
DROP PROCEDURE USP_CUS_GetCustomerITaxPayReport
GO
CREATE PROCEDURE [USP_CUS_GetCustomerITaxPayReport]
 @BRANCHID INT = 0,  
 @CUSTOMERID VARCHAR(20) = '',  
 @PAYMENTTYPE INT = 0,  
 @ITAXPAYID INT = 0,  
 @ITAXID INT = 0  
AS  
BEGIN
	DECLARE @lastEditUser VARCHAR(100);
	SELECT @lastEditUser = USERNAME
	FROM DTAXPAYAUDIT
	WHERE DTAXPAYAUDITID = 
	(
		SELECT MAX(ITAXPAYAUDITID) 
		FROM ITAXPAYAUDIT
		WHERE ITAXPAYID = @ITAXPAYID
		AND STATUS = 1
	)
SELECT ISNULL(CIP.BANKREFNO,'')BANKREFNO,'' AS EFOCALBRANCH,CIP.ITAXPAYID,CIP.BRANCHID,CIP.PAYMENTTYPE,CI.NAME,CI.ASSESSECODE,CI.COMNAME,  
CI.COMCODE,CI.DIVCODE,CI.RANGECODE,(CI.COMCODE + CI.DIVCODE + CI.RANGECODE)LOCATIONCODE,(CI.COMCODE + '-' + CI.COMNAME)COMCODENAME,  
CI.ADDRESS1,CI.ADDRESS2,CI.ADDRESS3,CI.ADDRESS4,CI.CITY,SM.STATENAME,CI.PINCODE,CI.CUSTOMERID,ISNULL(CIP.CHAREFNO,'')CHAREFNO,'' AS CINDETAILS,CIP.REFERENCEDOC,CIP.FILENAME,'' AS SHEDULEDDATE,  
    '' AS SHEDULEDDATETIME,'' AS REASON,CIP.ITAXID,  
    (SELECT PC.PAYMENTNAME + '-' + CIP.ACCCODE1 + '-' +  
    CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE1 = PC.TAXCODE) THEN 'Tax'  
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE1 = PC.IPCODE) THEN 'Interest'
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE1 = PC.PCODE) THEN 'Penalty'       
    WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE1 = PC.TAXCODE) THEN 'Tax' END  
     FROM PAYMENTCODE PC   
    INNER JOIN CUSTOMERITAXPAYMENT CIP ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
     WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
      (PC.IPCODE = CIP.ACCCODE1 OR PC.TAXCODE = CIP.ACCCODE1 OR PC.PCODE = CIP.ACCCODE1 AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE1 AND PC.IPCODE = NULL AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE1 OR PC.IPCODE = NULL OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2) AND CIP.ITAXPAYID=@ITAXPAYID)ACCCODE1,  
     (SELECT PC.PAYMENTNAME + '-' + CIP.ACCCODE2 + '-' +  
    CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE2 = PC.TAXCODE) THEN 'Tax'  
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE2 = PC.IPCODE) THEN 'Interest'
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE2 = PC.PCODE) THEN 'Penalty'    
       WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE2 = PC.TAXCODE) THEN 'Tax' END  
     FROM PAYMENTCODE PC  
     INNER JOIN CUSTOMERITAXPAYMENT CIP ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
     WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
      (PC.IPCODE = CIP.ACCCODE2 OR PC.TAXCODE = CIP.ACCCODE2 OR PC.PCODE = CIP.ACCCODE2 AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE2 AND PC.IPCODE = NULL AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE2 OR PC.IPCODE = NULL OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2) AND CIP.ITAXPAYID=@ITAXPAYID)ACCCODE2,  
     (SELECT PC.PAYMENTNAME + '-' + CIP.ACCCODE3 + '-' +  
    CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE3 = PC.TAXCODE) THEN 'Tax'  
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE3 = PC.IPCODE) THEN 'Interest'
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE3 = PC.PCODE) THEN 'Penalty'     
    WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE3 = PC.TAXCODE) THEN 'Tax' END  
     FROM PAYMENTCODE PC   
 INNER JOIN CUSTOMERITAXPAYMENT CIP ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
     WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
      (PC.IPCODE = CIP.ACCCODE3 OR PC.TAXCODE = CIP.ACCCODE3 OR PC.PCODE = CIP.ACCCODE3 AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE3 AND PC.IPCODE = NULL AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE3 OR PC.IPCODE = NULL OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2) AND CIP.ITAXPAYID=@ITAXPAYID)ACCCODE3,  
     (SELECT PC.PAYMENTNAME + '-' + CIP.ACCCODE4 + '-' +  
    CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE4 = PC.TAXCODE) THEN 'Tax'  
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE4 = PC.IPCODE) THEN 'Interest'
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE4 = PC.PCODE) THEN 'Penalty'   
    WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE4 = PC.TAXCODE) THEN 'Tax' END  
     FROM PAYMENTCODE PC   
      INNER JOIN CUSTOMERITAXPAYMENT CIP ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
     WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
      (PC.IPCODE = CIP.ACCCODE4 OR PC.TAXCODE = CIP.ACCCODE4 OR PC.PCODE = CIP.ACCCODE4 AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE4 AND PC.IPCODE = NULL AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE4 OR PC.IPCODE = NULL OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2) AND CIP.ITAXPAYID=@ITAXPAYID)ACCCODE4,  
     (SELECT PC.PAYMENTNAME + '-' + CIP.ACCCODE5 + '-' +  
    CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE5 = PC.TAXCODE) THEN 'Tax'  
	WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE5 = PC.IPCODE) THEN 'Interest'
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE5 = PC.PCODE) THEN 'Penalty'    
    WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE5 = PC.TAXCODE) THEN 'Tax' END  
     FROM PAYMENTCODE PC   
     INNER JOIN CUSTOMERITAXPAYMENT CIP ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
     WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
      (PC.IPCODE = CIP.ACCCODE5 OR PC.TAXCODE = CIP.ACCCODE5 OR PC.PCODE = CIP.ACCCODE5 AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE5 AND PC.IPCODE = NULL AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE5 OR PC.IPCODE = NULL OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2) AND CIP.ITAXPAYID=@ITAXPAYID)ACCCODE5,  
     (SELECT PC.PAYMENTNAME + '-' + CIP.ACCCODE6 + '-' +  
    CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE6 = PC.TAXCODE) THEN 'Tax'  
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE6 = PC.IPCODE) THEN 'Interest'
    WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE6 = PC.PCODE) THEN 'Penalty'     
    WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE6 = PC.TAXCODE) THEN 'Tax' END  
     FROM PAYMENTCODE PC   
    WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
      (PC.IPCODE = CIP.ACCCODE6 OR PC.TAXCODE = CIP.ACCCODE6 OR PC.PCODE = CIP.ACCCODE6 AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE6 AND PC.IPCODE = NULL AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 AND CIP.ITAXPAYID=@ITAXPAYID) OR   
       (PC.TAXCODE = CIP.ACCCODE6 OR PC.IPCODE = NULL OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2) AND CIP.ITAXPAYID=@ITAXPAYID)ACCCODE6, 
     CIP.AMTCODE1,CIP.AMTCODE2,CIP.AMTCODE3,CIP.AMTCODE4,CIP.AMTCODE5,CIP.AMTCODE6,(CIP.AMTCODE1 + CIP.AMTCODE2 + CIP.AMTCODE3 + CIP.AMTCODE4 + CIP.AMTCODE5 + CIP.AMTCODE6) AMTCODETOTAL,  
     CIP.ACCCODE1 CODE1,CIP.ACCCODE2 CODE2,CIP.ACCCODE3 CODE3,CIP.ACCCODE4 CODE4,CIP.ACCCODE5 CODE5,CIP.ACCCODE6 CODE6,CIP.FINACLETRANSID,CONVERT(DATETIME,CIP.TRANSDATE,101) TRANSDATE,  
     IPA.ITAXPAYAUDITID,IPA.STATUS,IPA.AUDITDATE,IPA.ISDELETED,IPA.USERNAME,IPA.REMARKS,  
     (CB.BRANCHCODE + '-' + CB.BRANCHNAME)DEBITBRANCHNAME,'' AS ACCNO, '' AS FINALREMARKS,
     '' BRANCH, '' CUSTBRANCHPAY,@lastEditUser LASTEDITUSER  
    FROM CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)  
 INNER JOIN CUSTOMERITAX CI WITH(NOLOCK) ON CIP.ITAXID = CI.ITAXID  
 INNER JOIN ITAXPAYAUDIT IPA WITH(NOLOCK) ON CIP.ITAXPAYID = IPA.ITAXPAYID  
 INNER JOIN STATEMASTER SM WITH(NOLOCK) ON CI.STATEID = SM.STATEID  
 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= IPA.BRANCHID  
 WHERE CIP.ITAXPAYID = @ITAXPAYID AND IPA.ISDELETED =0  
 AND CI.ITAXID=@ITAXID AND CIP.PAYMENTTYPE=@PAYMENTTYPE AND IPA.STATUS =9 AND CI.CUSTOMERID=CAST(@CUSTOMERID AS VARCHAR)  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetCustomersItaxCount')
DROP PROCEDURE USP_CUS_GetCustomersItaxCount
GO
CREATE PROCEDURE [USP_CUS_GetCustomersItaxCount]
 	@BRANCHID INT,  
	@ISCHECKER INT,  
	@NAME VARCHAR(75),  
	@CUSTOMERID VARCHAR(9) ,  
	@ASSESSECODE VARCHAR(15),  
	@STATUS INT=1,
	@userID INT = 0,
	@showApproved BIT = 0  
AS  
 BEGIN  
	 DECLARE @SQLQUERY NVARCHAR(MAX);        
	 CREATE TABLE #TEMPITAX(ITAXID INT,ASSESSECODE VARCHAR(15),COMNAME VARCHAR(75),COMCODE VARCHAR(4),DIVCODE VARCHAR(4),RANGECODE VARCHAR(4),NAME VARCHAR(75),CITY VARCHAR(25),PINCODE VARCHAR(6),STATEID INT,CUSTOMERID VARCHAR(9),  
	 ADDRESS1 VARCHAR(25),ADDRESS2 VARCHAR(25),ADDRESS3 VARCHAR(25),ADDRESS4 VARCHAR(25),PHONENO VARCHAR(25),EMAILID VARCHAR(75),BRANCHID INT,BRANCHCODE VARCHAR(10),ITAXAUDITID INT,  
	 REMARKS VARCHAR(200),ISDELETED BIT,USERNAME VARCHAR(75),[STATUS] INT,AUDITDATE DATETIME)  
	 SET @SQLQUERY = 'SELECT CI.ITAXID,CI.ASSESSECODE,CI.COMNAME,CI.COMCODE,CI.DIVCODE,CI.RANGECODE,CI.NAME,CI.CITY,CI.PINCODE,CI.STATEID,CI.CUSTOMERID,CI.ADDRESS1,CI.ADDRESS2,CI.ADDRESS3,CI.ADDRESS4,CI.PHONENO,CI.EMAILID,CIA.BRANCHID,  
	 CB.BRANCHCODE,CIA.ITAXAUDITID,CIA.REMARKS,CIA.ISDELETED,CIA.USERNAME,CIA.STATUS,CIA.AUDITDATE  
	 FROM CUSTOMERITAX CI WITH(NOLOCK)   
	 INNER JOIN CUSTOMERITAXAUDIT CIA WITH(NOLOCK) ON CI.ITAXID = CIA.ITAXID  
	 INNER JOIN STATEMASTER SM WITH(NOLOCK) ON SM.STATEID=CI.STATEID
	 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=CIA.BRANCHID   
	 WHERE CIA.ISDELETED = 0'  
	 IF(@ISCHECKER = 1)  
	 BEGIN  
	  IF(@showApproved = 0)
		BEGIN
			IF (EXISTS(SELECT * FROM ASSIGNBRANCHCUS WITH(NOLOCK) WHERE USERID = @userID))
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND CIA.[STATUS] IN('+CAST(@STATUS AS VARCHAR) +',14) AND CIA.BRANCHID IN(SELECT BRANCHID FROM ASSIGNBRANCHCUS WHERE USERID ='+ CAST(@userID AS VARCHAR)+')'
			END
			ELSE
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND CIA.[STATUS] = '+CAST(@STATUS AS VARCHAR) +' AND CIA.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)
			END
		END
		ELSE
		BEGIN
			IF (EXISTS(SELECT * FROM ASSIGNBRANCHCUS WITH(NOLOCK) WHERE USERID = @userID))
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND CIA.[STATUS] IN(7,13)' +' AND CIA.BRANCHID IN(SELECT BRANCHID FROM ASSIGNBRANCHCUS WHERE USERID ='+ CAST(@userID AS VARCHAR)+')'
			END
			ELSE
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND CIA.[STATUS] IN(7,13)' +' AND CIA.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)
			END
		END
	 END  
	 IF(@NAME < >'')  
	 BEGIN  
	  SET @SQLQUERY = @SQLQUERY + ' AND CI.NAME LIKE ''%'+ @NAME +'%'''  
	 END  
	 IF(@CUSTOMERID < > '' OR @CUSTOMERID <> NULL)  
	 BEGIN  
	  SET @SQLQUERY = @SQLQUERY + ' AND CI.CUSTOMERID LIKE ''%'+ @CUSTOMERID +'%'''  
	 END  
	 IF(@ASSESSECODE < >'')  
	 BEGIN  
	  SET @SQLQUERY = @SQLQUERY + ' AND CI.ASSESSECODE LIKE ''%'+ @ASSESSECODE +'%'''  
	 END  
	 INSERT INTO #TEMPITAX  
	 EXEC sp_executesql @SQLQUERY  
	 SELECT MAX(ITAXAUDITID) ITAXAUDITID,ITAXID  
	 INTO #TEMPITAX1  
	 FROM CUSTOMERITAXAUDIT WITH(NOLOCK)  
	 GROUP BY ITAXID  
	 SELECT ROW_NUMBER() OVER  
	 (  
	  ORDER BY T.ITAXID ASC  
	 ) AS ROWNUM,  
	 T.*  
	 INTO #RESULT  
	 FROM #TEMPITAX T  
	 INNER JOIN #TEMPITAX1 T1  
	 ON T.ITAXID = T1.ITAXID AND T.ITAXAUDITID = T1.ITAXAUDITID  
	 	IF(@isChecker = 1)
		BEGIN
		SELECT * INTO #FINALTAX 
		FROM (
		SELECT * FROM #RESULT  WHERE STATUS IN (1) AND BRANCHID=@BRANCHID
		UNION
		SELECT * FROM #RESULT WHERE STATUS NOT IN(1)
		) AS FINTMPTAX
		END
		ELSE
		BEGIN
		SELECT * INTO #FINALUSER
		FROM (
		SELECT * FROM #RESULT  WHERE STATUS IN (1,7,14) AND BRANCHID=@BRANCHID
		UNION
		SELECT * FROM #RESULT WHERE STATUS NOT IN(1,7,14)
		) AS FINTMPUSER
		END
		IF(@isChecker = 1)
		BEGIN
		SELECT ROW_NUMBER() OVER
		(
			ORDER BY F.ITAXID ASC
		) AS FINALROWNUMBERTAX,
		F.*
		INTO #FINALRESULTTAX
		FROM #FINALTAX F
		END 
		ELSE
		BEGIN
			SELECT ROW_NUMBER() OVER
		(
			ORDER BY F.ITAXID ASC
		) AS FINALROWNUMBERUSER,
		F.*
		INTO #FINALRESULTUSER
		FROM #FINALUSER F
		END
	 IF(@isChecker = 1)
		BEGIN 
			SELECT COUNT(*) FROM  #FINALRESULTTAX
		END 
		ELSE
		BEGIN
			SELECT COUNT(*) FROM #FINALRESULTUSER
		END
    IF OBJECT_ID('TEMPDB..#TEMPITAX') IS NOT NULL
	   DROP TABLE #TEMPITAX  
    IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL
	   DROP TABLE #RESULT  
    IF OBJECT_ID('TEMPDB..#TEMPITAX1') IS NOT NULL
	   DROP TABLE #TEMPITAX1
    IF OBJECT_ID('TEMPDB..#FINALTAX') IS NOT NULL
	   DROP TABLE #FINALTAX
    IF OBJECT_ID('TEMPDB..#FINALUSER') IS NOT NULL
	   DROP TABLE #FINALUSER  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GETCUSTTAXSUMMARY')
DROP PROCEDURE USP_CUS_GETCUSTTAXSUMMARY
GO
CREATE PROCEDURE USP_CUS_GETCUSTTAXSUMMARY
@BRANCHID INT
AS
BEGIN
	DECLARE @ITAXTOBEAPPRVDCOUNT INT;
	DECLARE @DTAXTOBEAPPRVDCOUNT INT;
	DECLARE @ITAXPDFCOUNT INT;
	DECLARE @DTAXPDFCOUNT INT;	 	 	 
	SELECT @ITAXTOBEAPPRVDCOUNT = COUNT(CI.ITAXPAYID)
	FROM CUSTOMERITAXPAYMENT CI WITH(NOLOCK) 
	INNER JOIN ITAXPAYAUDIT IPA WITH(NOLOCK) 
	ON CI.ITAXPAYID = IPA.ITAXPAYID
	WHERE IPA.STATUS = 1 AND IPA.BRANCHID = @BRANCHID
	SELECT @DTAXTOBEAPPRVDCOUNT = COUNT(CD.DTAXPAYID)
	FROM CUSTOMERDTAXPAYMENT CD WITH(NOLOCK) 
	INNER JOIN DTAXPAYAUDIT DPA WITH(NOLOCK) 
	ON CD.DTAXPAYID = DPA.DTAXPAYID
	WHERE DPA.STATUS = 1 AND DPA.BRANCHID = @BRANCHID
	SELECT @ITAXPDFCOUNT = COUNT(ITAXPAYID) FROM
	(SELECT ITAXPAYID,BRANCHID FROM CUSTOMERITAXPAYMENT WITH(NOLOCK)
	EXCEPT 
	SELECT ITAXPAYID,BRANCHID FROM CUSTOMERITAXPAYMENT WITH(NOLOCK)
	WHERE REFERENCEDOC IS NOT NULL) ITAX
	WHERE BRANCHID = @BRANCHID
	SELECT @DTAXPDFCOUNT = COUNT(DTAXPAYID) FROM
	(SELECT CD.DTAXPAYID,DPA.BRANCHID FROM CUSTOMERDTAXPAYMENT CD WITH(NOLOCK)
	INNER JOIN DTAXPAYAUDIT DPA WITH(NOLOCK) 
	ON CD.DTAXPAYID = DPA.DTAXPAYID
	EXCEPT 
	SELECT CD.DTAXPAYID,DPA.BRANCHID FROM CUSTOMERDTAXPAYMENT CD WITH(NOLOCK)
	INNER JOIN DTAXPAYAUDIT DPA WITH(NOLOCK) 
	ON CD.DTAXPAYID = DPA.DTAXPAYID
	WHERE REFERENCEDOC IS NOT NULL) DTAX
	WHERE BRANCHID = @BRANCHID
	SELECT @ITAXTOBEAPPRVDCOUNT AS ITAXTOBEAPPRVDCOUNT, @DTAXTOBEAPPRVDCOUNT AS DTAXTOBEAPPRVDCOUNT, 
			@ITAXPDFCOUNT AS ITAXPDFCOUNT, @DTAXPDFCOUNT AS DTAXPDFCOUNT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GETDEDCHABRANCHCODE')
DROP PROCEDURE USP_CUS_GETDEDCHABRANCHCODE
GO
CREATE PROCEDURE USP_CUS_GETDEDCHABRANCHCODE
	@BRANCHCODES NVARCHAR(MAX),
	@FORMNAME NVARCHAR(20),
	@QUARTER INT  
AS
	BEGIN
	    DECLARE @FORMID INT; 
	    IF(@FORMNAME = '24Q')
			SET @FORMID = 1
		ELSE IF(@FORMNAME = '26Q')	
		    SET @FORMID=2
		ELSE
		    SET @FORMID=3
	    SELECT * INTO #BRANCHES FROM  dbo.UDF_TDS_SplitString(@BRANCHCODES,',')  
	   SELECT * FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID=CB.BRANCHID
			INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID = DD.DEDUCTIONID 
			INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID 
		WHERE CB.BRANCHCODE IN (SELECT DATA FROM #BRANCHES) AND DD.QUARTER=@QUARTER
	   AND DD.FORMID=@FORMID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetDirectTaxCustomer')
DROP PROCEDURE USP_CUS_GetDirectTaxCustomer
GO
CREATE PROCEDURE USP_CUS_GetDirectTaxCustomer 
	@customerID VARCHAR(9),
	@BRANCHID INT
AS
	BEGIN
		SET NOCOUNT ON
		SELECT DTAXID,PAN,[TAN],NAME,CUSTOMERID 
		INTO #CUSDTAX 
		FROM CUSTOMERDTAX WITH(NOLOCK) 
		WHERE CUSTOMERID LIKE @customerID + '%'
		SELECT DTAXAUDITID,DTAXID,[STATUS],ISDELETED,BRANCHID 
		INTO #CUSDTAXAUDIT 
		FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
		WHERE DTAXID IN (SELECT DTAXID FROM #CUSDTAX)
		SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID 
		INTO #TEMP
		FROM #CUSDTAXAUDIT WITH(NOLOCK)
		GROUP BY DTAXID
		SELECT MIN(DTAXAUDITID) DTAXAUDITID,DTAXID 
		INTO #MINTEMP
		FROM #CUSDTAXAUDIT WITH(NOLOCK)
		GROUP BY DTAXID
		SELECT CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CUSTOMERID,DTAXAUDITID
		INTO #CUSTOMER
		FROM #CUSDTAX CDT WITH(NOLOCK)
			INNER JOIN #CUSDTAXAUDIT CDA ON CDA.DTAXID = CDT.DTAXID
		WHERE CDA.ISDELETED = 0 
			AND CDA.[STATUS] = 13
		SELECT CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CUSTOMERID,DTAXAUDITID,CDA.BRANCHID
		INTO #MINCUSTOMER
		FROM #CUSDTAX CDT WITH(NOLOCK)
			INNER JOIN #CUSDTAXAUDIT CDA ON CDA.DTAXID = CDT.DTAXID
		SELECT C.DTAXID,C.PAN,C.[TAN],C.NAME,C.CUSTOMERID 
		INTO #FINAL1
		FROM #CUSTOMER C
			INNER JOIN #TEMP T ON T.DTAXAUDITID = C.DTAXAUDITID
		GROUP BY C.DTAXID,C.PAN,C.[TAN],C.NAME,CUSTOMERID
		SELECT C.DTAXID,C.PAN,C.[TAN],C.NAME,C.CUSTOMERID,C.BRANCHID
		INTO #FINAL2
		FROM #MINCUSTOMER C
			INNER JOIN #MINTEMP T ON T.DTAXAUDITID = C.DTAXAUDITID
		GROUP BY C.DTAXID,C.PAN,C.[TAN],C.NAME,CUSTOMERID,C.BRANCHID
		SELECT TOP 10 F1.DTAXID,F1.PAN,F1.[TAN],F1.NAME,F1.CUSTOMERID,F2.BRANCHID
		INTO #FINAL3
		FROM #FINAL1 F1
			INNER JOIN #FINAL2 F2 ON F1.DTAXID = F2.DTAXID
		SELECT F3.DTAXID,F3.PAN,F3.[TAN],F3.NAME,F3.CUSTOMERID,
		CB.BRANCHCODE + ' - ' + CB.BRANCHNAME BRANCHCODE
		FROM #FINAL3 F3
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = F3.BRANCHID
		DROP TABLE #CUSDTAXAUDIT
		DROP TABLE #CUSDTAX	
		DROP TABLE #TEMP
		DROP TABLE #MINTEMP
		DROP TABLE #CUSTOMER
		DROP TABLE #MINCUSTOMER
		DROP TABLE #FINAL1
		DROP TABLE #FINAL2
		DROP TABLE #FINAL3
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetDTaxCount')
DROP PROCEDURE USP_CUS_GetDTaxCount
GO
CREATE PROCEDURE [USP_CUS_GetDTaxCount]
	@BRANCHID INT,
	@isChecker BIT = 0,
	@NAME VARCHAR(75),
	@customerID VARCHAR(9),
	@PAN VARCHAR(10),
	@TAN VARCHAR(10),
	@STATUS INT = 1,
	@userID INT = 0,
	@showApproved BIT = 0
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX) = ''
	CREATE TABLE #TEMP(DTAXID INT,PAN VARCHAR(10),[TAN] VARCHAR(10),NAME VARCHAR(75),CITY VARCHAR(25),PINCODE VARCHAR(6),STATEID INT,
	ADDRESS1 VARCHAR(25),ADDRESS2 VARCHAR(25),ADDRESS3 VARCHAR(25),ADDRESS4 VARCHAR(25),BRANCHID INT,BRANCHCODE VARCHAR(10),DTAXAUDITID INT,
	REMARKS VARCHAR(200),ISDELETED BIT,USERNAME VARCHAR(75),[STATUS] INT,AUDITDATE DATETIME)
	SET @QUERY = 'SELECT 
	CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CITY,CDT.PINCODE,CDT.STATEID,
	CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,CDA.BRANCHID,CB.BRANCHCODE,CDA.DTAXAUDITID,
	CDA.REMARKS,CDA.ISDELETED,CDA.USERNAME,CDA.[STATUS],CDA.AUDITDATE
	FROM CUSTOMERDTAX CDT WITH(NOLOCK)
	INNER JOIN CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
	ON CDA.DTAXID = CDT.DTAXID
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
	ON CB.BRANCHID=CDA.BRANCHID 
	WHERE CDA.ISDELETED = 0'
	IF(@isChecker = 1)
	BEGIN 
		IF(@showApproved = 0)
		BEGIN
			IF (EXISTS(SELECT * FROM ASSIGNBRANCHCUS WITH(NOLOCK) WHERE USERID = @userID))
			BEGIN
				SET @QUERY = @QUERY + ' AND CDA.[STATUS] IN('+CAST(@STATUS AS VARCHAR) +',14) AND CDA.BRANCHID IN(SELECT BRANCHID FROM ASSIGNBRANCHCUS WHERE USERID ='+ CAST(@USERID AS VARCHAR)+')'
			END
			ELSE
			BEGIN
				SET @QUERY = @QUERY + ' AND CDA.[STATUS] = '+CAST(@STATUS AS VARCHAR) +' AND CDA.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)
			END
		END
		ELSE
		BEGIN
			IF (EXISTS(SELECT * FROM ASSIGNBRANCHCUS WITH(NOLOCK) WHERE USERID = @userID))
			BEGIN
				SET @QUERY = @QUERY + ' AND CDA.[STATUS] IN(7,13)' +' AND CDA.BRANCHID IN(SELECT BRANCHID FROM ASSIGNBRANCHCUS WHERE USERID ='+ CAST(@USERID AS VARCHAR)+')'
			END
			ELSE
			BEGIN
				SET @QUERY = @QUERY + ' AND CDA.[STATUS] IN(7,13)' +' AND CDA.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)
			END
		END
	END
	IF(@NAME < > '')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.NAME LIKE ''%'+ @NAME +'%'''
	END
	IF(@customerID < > '')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.CUSTOMERID LIKE ''%'+ @customerID +'%'''
	END
	IF(@PAN < > '')
	BEGIN
		SET @QUERY = @QUERY + 'AND CDT.PAN LIKE ''%' + @PAN +'%'''
	END
	IF(@TAN < > '')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.[TAN] LIKE ''%' + @TAN +'%'''
	END
	INSERT INTO #TEMP 
	EXEC sp_executesql @QUERY
	SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID 
	INTO #TEMP1
	FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
	GROUP BY DTAXID
	SELECT ROW_NUMBER() OVER
	(
		ORDER BY T.DTAXID ASC
	) AS ROWNUMBER,
	T.*
	INTO #RESULT
	FROM #TEMP T
	INNER JOIN #TEMP1 T1
	ON T.DTAXID = T1.DTAXID AND T.DTAXAUDITID = T1.DTAXAUDITID
		IF(@isChecker = 1)
	BEGIN
			SELECT * INTO #FINALTAX FROM(
			SELECT * FROM #RESULT  WHERE STATUS IN (1) AND BRANCHID=@BRANCHID
			UNION
			SELECT * FROM #RESULT WHERE STATUS NOT IN(1)
			) AS FINTMPTAX
	END 
	ELSE
	BEGIN 
		SELECT * INTO #FINALUSER FROM(
				SELECT * FROM #RESULT  WHERE STATUS IN (1,7,14) AND BRANCHID=@BRANCHID
				UNION
				SELECT * FROM #RESULT WHERE STATUS NOT IN(1,7,14)
				) AS FINTMPUSER
	END 
	IF(@isChecker = 1)
	BEGIN
	SELECT ROW_NUMBER() OVER
	(
		ORDER BY F.DTAXID ASC
	) AS FINALROWNUMBERTAX,
	F.*
	INTO #FINALRESULTTAX
	FROM #FINALTAX F
	END
	ELSE
	BEGIN
	SELECT ROW_NUMBER() OVER
	(
		ORDER BY F.DTAXID ASC
	) AS FINALROWNUMBERUSER,
	F.*
	INTO #FINALRESULTUSER
	FROM #FINALUSER F
	END
	IF(@isChecker = 1)
	BEGIN 
		SELECT ISNULL(COUNT(*),0) NOOFITEMS FROM #FINALRESULTTAX
		END 
		ELSE
		BEGIN
			SELECT ISNULL(COUNT(*),0) NOOFITEMS FROM #FINALRESULTUSER
	END
	IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
	   DROP TABLE #TEMP  
    IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL
	   DROP TABLE #TEMP1  
    IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL
	   DROP TABLE #RESULT
    IF OBJECT_ID('TEMPDB..#FINALTAX') IS NOT NULL
	   DROP TABLE #FINALTAX
    IF OBJECT_ID('TEMPDB..#FINALUSER') IS NOT NULL
	   DROP TABLE #FINALUSER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetDTaxCustomerDetailsPaged')
DROP PROCEDURE USP_CUS_GetDTaxCustomerDetailsPaged
GO
CREATE PROCEDURE [USP_CUS_GetDTaxCustomerDetailsPaged]
	@PageIndex INT = 1,
	@PageSize INT = 10,
	@BRANCHID INT = -1,
	@isChecker BIT = 0,
	@NAME VARCHAR(75),
	@customerID VARCHAR(9),
	@PAN VARCHAR(10),
	@TAN VARCHAR(10),
	@STATUS INT = 1,
	@userID INT = 0,
	@showApproved BIT = 0
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX) = ''
	CREATE TABLE #TEMP(DTAXID INT,PAN VARCHAR(10),[TAN] VARCHAR(10),NAME VARCHAR(75),CITY VARCHAR(25),PINCODE VARCHAR(6),STATEID INT,
	ADDRESS1 VARCHAR(25),ADDRESS2 VARCHAR(25),ADDRESS3 VARCHAR(25),ADDRESS4 VARCHAR(25),EMAILID VARCHAR(75),PHONENUMBER VARCHAR(15),
	BRANCHID INT,BRANCHCODE VARCHAR(10),DTAXAUDITID INT,
	REMARKS VARCHAR(200),ISDELETED BIT,USERNAME VARCHAR(75),[STATUS] INT,AUDITDATE DATETIME,CUSTOMERID VARCHAR(9))
	SET @QUERY = 'SELECT 
	CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CITY,CDT.PINCODE,CDT.STATEID,
	CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,ISNULL(CDT.EMAILID,0)EMAILID,ISNULL(CDT.PHONENUMBER,0)PHONENUMBER,
	CDA.BRANCHID,CB.BRANCHCODE,CDA.DTAXAUDITID,CDA.REMARKS,CDA.ISDELETED,CDA.USERNAME,CDA.[STATUS],
	CDA.AUDITDATE,CDT.CUSTOMERID
	FROM CUSTOMERDTAX CDT WITH(NOLOCK)
	INNER JOIN CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
	ON CDA.DTAXID = CDT.DTAXID
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
	ON CB.BRANCHID=CDA.BRANCHID  
	WHERE CDA.ISDELETED = 0'
	IF(@isChecker = 1)
	BEGIN 
		IF(@showApproved = 0)
		BEGIN
			IF (EXISTS(SELECT * FROM ASSIGNBRANCHCUS WITH(NOLOCK) WHERE USERID = @userID))
			BEGIN
				SET @QUERY = @QUERY + ' AND CDA.[STATUS] IN ('+CAST(@STATUS AS VARCHAR) +',14) AND CDA.BRANCHID IN(SELECT BRANCHID FROM ASSIGNBRANCHCUS WHERE USERID ='+ CAST(@USERID AS VARCHAR)+')'
			END
			ELSE
			BEGIN
				SET @QUERY = @QUERY + ' AND CDA.[STATUS] = '+CAST(@STATUS AS VARCHAR) +' AND CDA.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)
			END
		END
		ELSE
		BEGIN
			IF (EXISTS(SELECT * FROM ASSIGNBRANCHCUS WITH(NOLOCK) WHERE USERID = @userID))
			BEGIN
				SET @QUERY = @QUERY + ' AND CDA.[STATUS] IN(7,13)' +' AND CDA.BRANCHID IN(SELECT BRANCHID FROM ASSIGNBRANCHCUS WHERE USERID ='+ CAST(@USERID AS VARCHAR)+')'
			END
			ELSE
			BEGIN
				SET @QUERY = @QUERY + ' AND CDA.[STATUS] IN(7,13)' +' AND CDA.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)
			END
		END
	END
	IF(@NAME < > '')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.NAME LIKE ''%'+ @NAME +'%'''
	END
	IF(@customerID < > '')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.CUSTOMERID LIKE ''%'+ @customerID +'%'''
	END
	IF(@PAN < > '')
	BEGIN
		SET @QUERY = @QUERY + 'AND CDT.PAN LIKE ''%' + @PAN +'%'''
	END
	IF(@TAN < > '')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.[TAN] LIKE ''%' + @TAN +'%'''
	END
	INSERT INTO #TEMP 
	EXEC sp_executesql @QUERY
	PRINT @QUERY
	SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID 
	INTO #TEMP1
	FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
	GROUP BY DTAXID
	SELECT ROW_NUMBER() OVER
	(
		ORDER BY T.DTAXID ASC
	) AS ROWNUMBER,
	T.*
	INTO #RESULT
	FROM #TEMP T
	INNER JOIN #TEMP1 T1
	ON T.DTAXID = T1.DTAXID AND T.DTAXAUDITID = T1.DTAXAUDITID
	IF(@isChecker = 1)
	BEGIN
			SELECT * INTO #FINALTAX FROM(
			SELECT * FROM #RESULT  WHERE STATUS IN (1) AND BRANCHID=@BRANCHID
			UNION
			SELECT * FROM #RESULT WHERE STATUS NOT IN(1)
			) AS FINTMPTAX
	END 
	ELSE
	BEGIN 
		SELECT * INTO #FINALUSER FROM(
				SELECT * FROM #RESULT  WHERE STATUS IN (1,7,14) AND BRANCHID=@BRANCHID
				UNION
				SELECT * FROM #RESULT WHERE STATUS NOT IN(1,7,14)
				) AS FINTMPUSER
	END 
	IF(@isChecker = 1)
	BEGIN
	SELECT ROW_NUMBER() OVER
	(
		ORDER BY F.DTAXID ASC
	) AS FINALROWNUMBERTAX,
	F.*
	INTO #FINALRESULTTAX
	FROM #FINALTAX F
	END
	ELSE
	BEGIN
	SELECT ROW_NUMBER() OVER
	(
		ORDER BY F.DTAXID ASC
	) AS FINALROWNUMBERUSER,
	F.*
	INTO #FINALRESULTUSER
	FROM #FINALUSER F
	END
	IF(@isChecker = 1)
	BEGIN
	SELECT * FROM #FINALRESULTTAX
	WHERE FINALROWNUMBERTAX BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
	ELSE
	BEGIN 
	SELECT * FROM #FINALRESULTUSER
	WHERE FINALROWNUMBERUSER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
	IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
	   DROP TABLE #TEMP  
    IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL
	   DROP TABLE #TEMP1  
    IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL
	   DROP TABLE #RESULT
    IF OBJECT_ID('TEMPDB..#FINALTAX') IS NOT NULL
	   DROP TABLE #FINALTAX
    IF OBJECT_ID('TEMPDB..#FINALUSER') IS NOT NULL
	   DROP TABLE #FINALUSER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetDTaxDailyTransaction')
DROP PROCEDURE USP_CUS_GetDTaxDailyTransaction
GO
CREATE PROCEDURE [dbo].[USP_CUS_GetDTaxDailyTransaction] 
	@fromDate VARCHAR(10),
	@toDate VARCHAR(10),
	@isToBeApproved BIT = 0
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON
	IF(@isToBeApproved = 0)
	BEGIN
		DECLARE @minDate DATETIME
		DECLARE @maxDate DATETIME
		SET @minDate = CONVERT(DATETIME,@fromDate,103)
		SET @maxDate = CONVERT(DATETIME,@toDate,103)
		SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID,DTAXPAYID
		INTO #CURRENTTEMPLATEST 
		FROM DTAXPAYAUDIT
		GROUP BY DTAXPAYID
		SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID,DTAXPAYID,BRANCHID,STATUS
		INTO #CURRENTTEMPALL
		FROM DTAXPAYAUDIT
		GROUP BY DTAXPAYID,BRANCHID,STATUS
		SELECT MAX(CTA.DTAXPAYAUDITID) DTAXPAYAUDITID,CTA.DTAXPAYID,CTA.BRANCHID,CTA.STATUS
		INTO #CURRENTTEMP
		FROM  #CURRENTTEMPALL CTA
			INNER JOIN #CURRENTTEMPLATEST CTL
				ON CTA.DTAXPAYAUDITID = CTL.DTAXPAYAUDITID
		GROUP BY CTA.DTAXPAYID,CTA.BRANCHID,CTA.STATUS
		SELECT CAP.DTAXPAYAUDITID,CAP.DTAXPAYID,CAP.BRANCHID,CAP.STATUS
		INTO #CURRSTATTEMP
		FROM DTAXPAYAUDIT DTP WITH(NOLOCK)
			INNER JOIN #CURRENTTEMP CAP ON CAP.DTAXPAYAUDITID = DTP.DTAXPAYAUDITID
		WHERE DTP.STATUS IN (7,8,9,10)
		GROUP BY CAP.DTAXPAYAUDITID,CAP.DTAXPAYID,CAP.BRANCHID,CAP.STATUS
		SELECT T.*,DTA.AUDITDATE 
		INTO #DTAXPAYAUDIT 
		FROM #CURRSTATTEMP T
			INNER JOIN DTAXPAYAUDIT DTA
			ON DTA.DTAXPAYAUDITID = T.DTAXPAYAUDITID
		SELECT CDT.*,DTA.AUDITDATE,DTA.BRANCHID AS DTAXBRANCHID,STATUS
		INTO #CUSTOMERDTAXPAYMENT
		FROM CUSTOMERDTAXPAYMENT CDT WITH(NOLOCK)
			INNER JOIN #DTAXPAYAUDIT DTA
				ON DTA.DTAXPAYID = CDT.DTAXPAYID
		WHERE CDT.TRANSDATE >= @minDate AND CDT.TRANSDATE <= @maxDate
		SELECT CD.DTAXBRANCHID,CD.FINACLETRANSID,CD.TRANSDATE,CASE WHEN CD.CHALLANTYPE = 280 THEN CDT.PAN ELSE CDT.[TAN] END AS PANTAN,
			CDT.NAME,CD.CHALLANTYPE,CASE WHEN CD.TAXAPPLICABLE = 1 THEN 0020 ELSE 0021 END AS MAJORHEADCODE,
			CASE WHEN CD.CHALLANTYPE = 281 AND CD.PAYMENTTYPE = 1 THEN 200
				 WHEN CD.CHALLANTYPE = 281 AND CD.PAYMENTTYPE = 2 THEN 400
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 1 THEN 100
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 1 THEN 102
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 2 THEN 102
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 3 THEN 106
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 4 THEN 107
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 5 THEN 300
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 6 THEN 400
			ELSE 0 END AS MINORCODE,
			CD.TAXAPPLICABLE,CD.PAYMENTTYPE,
			CD.ASSESSMENTYEAR,CD.NATOFPAY,
			CDT.CITY,SM.STATENAME,CDT.PINCODE,
			CD.INCOMETAX,CD.SURCHARGE,CD.EDUCESS,CD.INTEREST,CD.STATUS
		INTO #TEMP1
		FROM CUSTOMERDTAX CDT WITH(NOLOCK)
			INNER JOIN #CUSTOMERDTAXPAYMENT CD WITH(NOLOCK)
				ON CD.DTAXID = CDT.DTAXID
			INNER JOIN STATEMASTER SM WITH(NOLOCK)  
				ON SM.STATEID=CDT.STATEID
		DROP TABLE #CURRENTTEMPLATEST 
		DROP TABLE #CURRENTTEMPALL
		DROP TABLE #CUSTOMERDTAXPAYMENT
		DROP TABLE #DTAXPAYAUDIT
		DROP TABLE #CURRENTTEMP
		DROP TABLE #CURRSTATTEMP
		SELECT 
			CB.BRANCHCODE,T1.FINACLETRANSID,T1.TRANSDATE,T1.PANTAN,T1.NAME,(SUM(T1.INCOMETAX) + SUM(T1.SURCHARGE) + SUM(T1.EDUCESS) + SUM(T1.INTEREST)) AS TOTALAMOUNT,
			T1.CHALLANTYPE,T1.MAJORHEADCODE,T1.MINORCODE,T1.ASSESSMENTYEAR,CASE WHEN TS.FORMID = 4 THEN ISNULL(TS.SECTIONNAME, '') ELSE ISNULL(TS.TAXNAME, '') END SECTIONNAME,T1.CITY,T1.STATENAME,
			T1.PINCODE,T1.INCOMETAX,T1.SURCHARGE,T1.EDUCESS,T1.INTEREST,
			CASE WHEN STATUS=7 THEN 'ApprovedByBranch'
				 WHEN STATUS=8 THEN 'TakenForPayment'
				 WHEN STATUS=9 THEN 'Completed'
				 WHEN STATUS=10 THEN 'ModifiedByTaxCell'
			ELSE '' END AS STATUS			
		FROM #TEMP1 T1
			LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)
				ON TS.SECTIONID = T1.NATOFPAY
			INNER JOIN dbo.COMPANYBRANCH CB WITH(NOLOCK)  
				ON CB.BRANCHID=T1.DTAXBRANCHID
		GROUP BY CB.BRANCHCODE,T1.FINACLETRANSID,T1.TRANSDATE,T1.PANTAN,T1.NAME,T1.NATOFPAY,TS.FORMID,TS.SECTIONNAME,TS.TAXNAME,T1.CHALLANTYPE,
			T1.MAJORHEADCODE,T1.MINORCODE,T1.ASSESSMENTYEAR,T1.CITY,T1.STATENAME,
			T1.PINCODE,T1.INCOMETAX,T1.SURCHARGE,T1.EDUCESS,T1.INTEREST,STATUS
		DROP TABLE #TEMP1
   END
   ELSE
   BEGIN
		DECLARE @minDateToBeApproved DATETIME
		DECLARE @maxDateToBeApproved DATETIME
		SET @minDate = CONVERT(DATETIME,@fromDate,103)
		SET @maxDate = CONVERT(DATETIME,@toDate,103)
		SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID,DTAXPAYID
		INTO #CURRENTTEMPLATESTTOBEAPPROVED 
		FROM DTAXPAYAUDIT
		GROUP BY DTAXPAYID
		SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID,DTAXPAYID,BRANCHID,STATUS
		INTO #CURRENTTEMPALLTOBEAPPROVED
		FROM DTAXPAYAUDIT
		GROUP BY DTAXPAYID,BRANCHID,STATUS
		SELECT MAX(CTA.DTAXPAYAUDITID) DTAXPAYAUDITID,CTA.DTAXPAYID,CTA.BRANCHID,CTA.STATUS
		INTO #CURRENTTEMPTOBEAPPROVED 
		FROM  #CURRENTTEMPALLTOBEAPPROVED CTA
			INNER JOIN #CURRENTTEMPLATESTTOBEAPPROVED CTL
				ON CTA.DTAXPAYAUDITID = CTL.DTAXPAYAUDITID
		GROUP BY CTA.DTAXPAYID,CTA.BRANCHID,CTA.STATUS
		SELECT CAP.DTAXPAYAUDITID,CAP.DTAXPAYID,CAP.BRANCHID,CAP.STATUS
		INTO #CURRSTATTEMPTOBEAPPROVED 
		FROM DTAXPAYAUDIT DTP WITH(NOLOCK)
			INNER JOIN #CURRENTTEMPTOBEAPPROVED CAP ON CAP.DTAXPAYAUDITID = DTP.DTAXPAYAUDITID
		WHERE DTP.STATUS IN (1)
		GROUP BY CAP.DTAXPAYAUDITID,CAP.DTAXPAYID,CAP.BRANCHID,CAP.STATUS
		SELECT T.*,DTA.AUDITDATE 
		INTO #DTAXPAYAUDITTOBEAPPROVED  
		FROM #CURRSTATTEMPTOBEAPPROVED  T
			INNER JOIN DTAXPAYAUDIT DTA
			ON DTA.DTAXPAYAUDITID = T.DTAXPAYAUDITID
		SELECT CDT.*,DTA.AUDITDATE,DTA.BRANCHID AS DTAXBRANCHID,STATUS
		INTO #CUSTOMERDTAXPAYMENTTOBEAPPROVED
		FROM CUSTOMERDTAXPAYMENT CDT WITH(NOLOCK)
			INNER JOIN #DTAXPAYAUDITTOBEAPPROVED DTA
				ON DTA.DTAXPAYID = CDT.DTAXPAYID
		WHERE CDT.TRANSDATE >= @minDate AND CDT.TRANSDATE <= @maxDate
		SELECT CD.DTAXBRANCHID,CD.FINACLETRANSID,CD.TRANSDATE,CASE WHEN CD.CHALLANTYPE = 280 THEN CDT.PAN ELSE CDT.[TAN] END AS PANTAN,
			CDT.NAME,CD.CHALLANTYPE,CASE WHEN CD.TAXAPPLICABLE = 1 THEN 0020 ELSE 0021 END AS MAJORHEADCODE,
			CASE WHEN CD.CHALLANTYPE = 281 AND CD.PAYMENTTYPE = 1 THEN 200
				 WHEN CD.CHALLANTYPE = 281 AND CD.PAYMENTTYPE = 2 THEN 400
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 1 THEN 100
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 1 THEN 102
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 2 THEN 102
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 3 THEN 106
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 4 THEN 107
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 5 THEN 300
				 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 6 THEN 400
			ELSE 0 END AS MINORCODE,
			CD.TAXAPPLICABLE,CD.PAYMENTTYPE,
			CD.ASSESSMENTYEAR,CD.NATOFPAY,
			CDT.CITY,SM.STATENAME,CDT.PINCODE,
			CD.INCOMETAX,CD.SURCHARGE,CD.EDUCESS,CD.INTEREST,CD.STATUS
		INTO #TEMP1TOBEAPPROVED 
		FROM CUSTOMERDTAX CDT WITH(NOLOCK)
			INNER JOIN #CUSTOMERDTAXPAYMENTTOBEAPPROVED CD WITH(NOLOCK)
				ON CD.DTAXID = CDT.DTAXID
			INNER JOIN STATEMASTER SM WITH(NOLOCK)  
				ON SM.STATEID=CDT.STATEID
		DROP TABLE #CURRENTTEMPLATESTTOBEAPPROVED 
		DROP TABLE #CURRENTTEMPALLTOBEAPPROVED
		DROP TABLE #CUSTOMERDTAXPAYMENTTOBEAPPROVED
		DROP TABLE #DTAXPAYAUDITTOBEAPPROVED
		DROP TABLE #CURRENTTEMPTOBEAPPROVED
		DROP TABLE #CURRSTATTEMPTOBEAPPROVED
		SELECT 
			CB.BRANCHCODE,T1.FINACLETRANSID,T1.TRANSDATE,T1.PANTAN,T1.NAME,(SUM(T1.INCOMETAX) + SUM(T1.SURCHARGE) + SUM(T1.EDUCESS) + SUM(T1.INTEREST)) AS TOTALAMOUNT,
			T1.CHALLANTYPE,T1.MAJORHEADCODE,T1.MINORCODE,T1.ASSESSMENTYEAR,CASE WHEN TS.FORMID = 4 THEN ISNULL(TS.SECTIONNAME, '') ELSE ISNULL(TS.TAXNAME, '') END SECTIONNAME,T1.CITY,T1.STATENAME,
			T1.PINCODE,T1.INCOMETAX,T1.SURCHARGE,T1.EDUCESS,T1.INTEREST,
			CASE WHEN STATUS=1 THEN 'ToBeApproved'
			ELSE '' END AS STATUS			
		FROM #TEMP1TOBEAPPROVED T1
			LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)
				ON TS.SECTIONID = T1.NATOFPAY
			INNER JOIN dbo.COMPANYBRANCH CB WITH(NOLOCK)  
				ON CB.BRANCHID=T1.DTAXBRANCHID
		GROUP BY CB.BRANCHCODE,T1.FINACLETRANSID,T1.TRANSDATE,T1.PANTAN,T1.NAME,T1.NATOFPAY,TS.FORMID,TS.SECTIONNAME,TS.TAXNAME,T1.CHALLANTYPE,
			T1.MAJORHEADCODE,T1.MINORCODE,T1.ASSESSMENTYEAR,T1.CITY,T1.STATENAME,
			T1.PINCODE,T1.INCOMETAX,T1.SURCHARGE,T1.EDUCESS,T1.INTEREST,STATUS
		DROP TABLE #TEMP1TOBEAPPROVED
   END
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetDTaxDailyTransactionBranchWise')
DROP PROCEDURE USP_CUS_GetDTaxDailyTransactionBranchWise
GO
CREATE PROCEDURE USP_CUS_GetDTaxDailyTransactionBranchWise
	@fromDate SMALLDATETIME,
	@toDate SMALLDATETIME,
	@BranchID INT
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED	
	SET NOCOUNT ON
	SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID,DTAXPAYID,BRANCHID,STATUS
	INTO #CURRENTTEMP 
	FROM DTAXPAYAUDIT
	GROUP BY DTAXPAYID,BRANCHID,STATUS
	SELECT CAP.DTAXPAYAUDITID,CAP.DTAXPAYID,CAP.BRANCHID,CAP.STATUS
	INTO #CURRSTATTEMP
	FROM DTAXPAYAUDIT DTP WITH(NOLOCK)
	INNER JOIN #CURRENTTEMP CAP ON CAP.DTAXPAYAUDITID = DTP.DTAXPAYAUDITID
	WHERE DTP.STATUS IN (1,5,7,8,9,10,11,12,13,14) AND DTP.BRANCHID = @BranchID
	GROUP BY CAP.DTAXPAYAUDITID,CAP.DTAXPAYID,CAP.BRANCHID,CAP.STATUS
	SELECT T.*,DTA.AUDITDATE 
	INTO #DTAXPAYAUDIT 
	FROM #CURRSTATTEMP T
	INNER JOIN DTAXPAYAUDIT DTA
	ON DTA.DTAXPAYAUDITID = T.DTAXPAYAUDITID
	SELECT CDT.*,DTA.AUDITDATE,DTA.BRANCHID AS DTAXBRANCHID,STATUS
	INTO #CUSTOMERDTAXPAYMENT
	FROM CUSTOMERDTAXPAYMENT CDT WITH(NOLOCK)
	INNER JOIN #DTAXPAYAUDIT DTA
	ON DTA.DTAXPAYID = CDT.DTAXPAYID
	WHERE CDT.TRANSDATE >= @fromDate AND  CDT.TRANSDATE <= @toDate AND DTA.BRANCHID=@BranchID
	SELECT CD.DTAXBRANCHID,CD.FINACLETRANSID,CD.TRANSDATE,
		CASE WHEN CD.CHALLANTYPE = 280 OR CD.CHALLANTYPE = 282 THEN CDT.PAN ELSE CDT.[TAN] END AS PANTAN,
		CDT.NAME,CD.CHALLANTYPE,
		CASE WHEN CD.CHALLANTYPE = 280 AND CD.TAXAPPLICABLE = 1 THEN 0020
			 WHEN CD.CHALLANTYPE = 280 AND CD.TAXAPPLICABLE = 2 THEN 0021 
			 WHEN CD.CHALLANTYPE = 281 AND CD.TAXAPPLICABLE = 1 THEN 0020 
			 WHEN CD.CHALLANTYPE = 281 AND CD.TAXAPPLICABLE = 2 THEN 0021 
			 WHEN CD.CHALLANTYPE = 282 AND CD.TAXAPPLICABLE = 1 THEN 0031 
			 WHEN CD.CHALLANTYPE = 282 AND CD.TAXAPPLICABLE = 2 THEN 0032
			 WHEN CD.CHALLANTYPE = 282 AND CD.TAXAPPLICABLE = 3 THEN 0033 
			 WHEN CD.CHALLANTYPE = 282 AND CD.TAXAPPLICABLE = 4 THEN 0034 
			 WHEN CD.CHALLANTYPE = 282 AND CD.TAXAPPLICABLE = 5 THEN 0023 
			 WHEN CD.CHALLANTYPE = 282 AND CD.TAXAPPLICABLE = 6 THEN 0024 
			 WHEN CD.CHALLANTYPE = 282 AND CD.TAXAPPLICABLE = 7 THEN 0028 
		ELSE 0 END AS MAJORHEADCODE,
		CASE WHEN CD.CHALLANTYPE = 281 AND CD.PAYMENTTYPE = 1 THEN 200
			 WHEN CD.CHALLANTYPE = 281 AND CD.PAYMENTTYPE = 2 THEN 400
			 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 1 THEN 100
			 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 1 THEN 102
			 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 2 THEN 102
			 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 3 THEN 106
			 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 4 THEN 107
			 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 5 THEN 300
			 WHEN CD.CHALLANTYPE = 280 AND CD.PAYMENTTYPE = 6 THEN 400
			 WHEN CD.CHALLANTYPE = 282 AND CD.PAYMENTTYPE = 1 THEN 100
			 WHEN CD.CHALLANTYPE = 282 AND CD.PAYMENTTYPE = 2 THEN 300
			 WHEN CD.CHALLANTYPE = 282 AND CD.PAYMENTTYPE = 3 THEN 400
			 WHEN CD.CHALLANTYPE = 282 AND CD.PAYMENTTYPE = 4 THEN 800
		ELSE 0 END AS MINORCODE,
		CD.TAXAPPLICABLE,CD.PAYMENTTYPE,
		CD.ASSESSMENTYEAR,CD.NATOFPAY,
		CDT.CITY,SM.STATENAME,CDT.PINCODE,
		CD.INCOMETAX,CD.SURCHARGE,CD.EDUCESS,CD.INTEREST,CD.STATUS
	INTO #TEMP1
	FROM CUSTOMERDTAX CDT WITH(NOLOCK)
		INNER JOIN #CUSTOMERDTAXPAYMENT CD WITH(NOLOCK)
			ON CD.DTAXID = CDT.DTAXID
		INNER JOIN STATEMASTER SM WITH(NOLOCK)  
			ON SM.STATEID=CDT.STATEID
	DROP TABLE #CUSTOMERDTAXPAYMENT
	DROP TABLE #DTAXPAYAUDIT
	DROP TABLE #CURRENTTEMP
	SELECT 
	CB.BRANCHCODE,T1.FINACLETRANSID,T1.TRANSDATE,T1.PANTAN,T1.NAME,(SUM(T1.INCOMETAX) + SUM(T1.SURCHARGE) + SUM(T1.EDUCESS) + SUM(T1.INTEREST)) AS TOTALAMOUNT,
	T1.CHALLANTYPE,T1.MAJORHEADCODE,T1.MINORCODE,T1.ASSESSMENTYEAR,CASE WHEN TS.FORMID = 4 THEN ISNULL(TS.SECTIONNAME, '') ELSE ISNULL(TS.TAXNAME, '') END SECTIONNAME,T1.CITY,T1.STATENAME,
	T1.PINCODE,T1.INCOMETAX,T1.SURCHARGE,T1.EDUCESS,T1.INTEREST,
	CASE WHEN STATUS=1 THEN 'ToBeApproved'
		 WHEN STATUS=5 THEN 'Deleted'
		 WHEN STATUS=7 THEN 'ApprovedByBranch'
		 WHEN STATUS=8 THEN 'TakenForPayment'
		 WHEN STATUS=9 THEN 'Completed'
		 WHEN STATUS=10 THEN 'ModifiedByTaxCell'
		 WHEN STATUS=11 THEN 'RejectedByBranch'
		 WHEN STATUS=12 THEN 'RejectedByTaxCell'
		 WHEN STATUS=13 THEN 'ApprovedByTaxCell'
		 WHEN STATUS=14 THEN 'EditedByAdmin'
	ELSE '' END AS STATUS			
	FROM #TEMP1 T1
	LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)
	ON TS.SECTIONID = T1.NATOFPAY
	INNER JOIN dbo.COMPANYBRANCH CB WITH(NOLOCK)  
    ON CB.BRANCHID=T1.DTAXBRANCHID
	GROUP BY CB.BRANCHCODE,T1.FINACLETRANSID,T1.TRANSDATE,T1.PANTAN,T1.NAME,T1.NATOFPAY,TS.FORMID,TS.SECTIONNAME,TS.TAXNAME,T1.CHALLANTYPE,
	T1.MAJORHEADCODE,T1.MINORCODE,T1.ASSESSMENTYEAR,T1.CITY,T1.STATENAME,
	T1.PINCODE,T1.INCOMETAX,T1.SURCHARGE,T1.EDUCESS,T1.INTEREST,STATUS
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetDTaxMasterData')
DROP PROCEDURE USP_CUS_GetDTaxMasterData
GO
CREATE PROCEDURE [USP_CUS_GetDTaxMasterData]
	@fromDate VARCHAR(10),
	@toDate VARCHAR(10),
	@isExcel BIT=0 
AS
BEGIN
	IF(@isExcel = 0)
	   BEGIN
			DECLARE @minDate DATETIME
			DECLARE @maxDate DATETIME
			SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID
			INTO #CURRAUDITPOS 
			FROM CUSTOMERDTAXAUDIT
			GROUP BY DTAXID
			SELECT CAP.DTAXAUDITID,CAP.DTAXID,STATUS
			INTO #CUSTOMERDTAXAUDIT
			FROM CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
			INNER JOIN #CURRAUDITPOS CAP ON CDA.DTAXAUDITID = CAP.DTAXAUDITID
			WHERE [STATUS] = 13 AND ISDELETED = 0 
			SELECT CDT.* 
			INTO #LATESTSTAT
			FROM CUSTOMERDTAXAUDIT CDT WITH(NOLOCK)
			INNER JOIN #CUSTOMERDTAXAUDIT CDA
			ON CDA.DTAXAUDITID = CDT.DTAXAUDITID
			SET @minDate = ISNULL((SELECT MIN(AUDITDATE) FROM #LATESTSTAT 
			WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@fromDate,103)),
			CONVERT(DATETIME,@fromDate,103))
			SET @maxDate = ISNULL((SELECT MAX(AUDITDATE) FROM #LATESTSTAT 
			WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@toDate,103)),
			CONVERT(DATETIME,@toDate,103))
			DROP TABLE #CUSTOMERDTAXAUDIT
			SELECT CDT.PAN,CDT.[TAN],CDT.NAME,
			CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,
			CDT.CITY,CDT.STATEID [STATE],CDT.PINCODE,LS.AUDITDATE,CDT.EMAILID,CDT.PHONENUMBER
			FROM #LATESTSTAT LS
			INNER JOIN CUSTOMERDTAX CDT WITH(NOLOCK)
			ON CDT.DTAXID = LS.DTAXID
			WHERE LS.AUDITDATE >= @minDate AND LS.AUDITDATE <= @maxDate
	   END
    ELSE
	   BEGIN
			DECLARE @minDateExcel DATETIME
			DECLARE @maxDateExcel DATETIME
			SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID
			INTO #CURRAUDITPOSEXCEL 
			FROM CUSTOMERDTAXAUDIT
			GROUP BY DTAXID
			SELECT CAP.DTAXAUDITID,CAP.DTAXID,STATUS
			INTO #CUSTOMERDTAXAUDITEXCEL
			FROM CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
			INNER JOIN #CURRAUDITPOSEXCEL CAP ON CDA.DTAXAUDITID = CAP.DTAXAUDITID
			WHERE [STATUS] = 13 AND ISDELETED = 0 
			SELECT CDT.* 
			INTO #LATESTSTATEXCEL
			FROM CUSTOMERDTAXAUDIT CDT WITH(NOLOCK)
			INNER JOIN #CUSTOMERDTAXAUDITEXCEL CDA
			ON CDA.DTAXAUDITID = CDT.DTAXAUDITID
			SET @minDateExcel = ISNULL((SELECT MIN(AUDITDATE) FROM #LATESTSTATEXCEL 
			WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@fromDate,103)),
			CONVERT(DATETIME,@fromDate,103))
			SET @maxDateExcel = ISNULL((SELECT MAX(AUDITDATE) FROM #LATESTSTATEXCEL 
			WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@toDate,103)),
			CONVERT(DATETIME,@toDate,103))
			DROP TABLE #CUSTOMERDTAXAUDITEXCEL
			SELECT CDT.PAN,CDT.[TAN],CDT.NAME,
			CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,
			CDT.CITY,CDT.STATEID [STATE],CDT.PINCODE,CDT.CUSTOMERID
			FROM #LATESTSTATEXCEL LS
			INNER JOIN CUSTOMERDTAX CDT WITH(NOLOCK)
			ON CDT.DTAXID = LS.DTAXID
			WHERE LS.AUDITDATE >= @minDateExcel AND LS.AUDITDATE <= @maxDateExcel
	   END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetDTaxPayData')
DROP PROCEDURE USP_CUS_GetDTaxPayData
GO
CREATE PROCEDURE USP_CUS_GetDTaxPayData 
	@fromDate VARCHAR(10),
	@toDate VARCHAR(10),
	@BRANCHID INT,
	@formType INT
AS
BEGIN
	DECLARE @minDate DATETIME
	DECLARE @maxDate DATETIME
	SET @minDate = ISNULL((SELECT MIN(AUDITDATE) FROM DTAXPAYAUDIT WITH(NOLOCK)
	WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@fromDate,103)),
	CONVERT(DATETIME,@fromDate,103))
	SET @maxDate = ISNULL((SELECT MAX(AUDITDATE) FROM DTAXPAYAUDIT WITH(NOLOCK)
	WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@toDate,103)),
	CONVERT(DATETIME,@toDate,103))
	SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID,DTAXPAYID 
	INTO #CURRENTTEMP 
	FROM DTAXPAYAUDIT
	GROUP BY DTAXPAYID
	SELECT CAP.DTAXPAYAUDITID,CAP.DTAXPAYID
	INTO #CURRSTATTEMP
	FROM DTAXPAYAUDIT DTP WITH(NOLOCK)
	INNER JOIN #CURRENTTEMP CAP ON CAP.DTAXPAYAUDITID = DTP.DTAXPAYAUDITID
	WHERE [STATUS] IN (7,10) AND ISDELETED = 0 
	AND AUDITDATE >= @minDate AND AUDITDATE <= @maxDate
	GROUP BY CAP.DTAXPAYAUDITID,CAP.DTAXPAYID
	SELECT T.*,DTA.AUDITDATE INTO #DTAXPAYAUDIT 
	FROM #CURRSTATTEMP T
	INNER JOIN DTAXPAYAUDIT DTA
	ON DTA.DTAXPAYAUDITID = T.DTAXPAYAUDITID
	UPDATE DTAXPAYAUDIT
	SET [STATUS] = 8,AUDITDATE=GETDATE()
	FROM #DTAXPAYAUDIT DT1
	INNER JOIN DTAXPAYAUDIT DT2
	ON DT2.DTAXPAYAUDITID = DT1.DTAXPAYAUDITID
	SELECT CDT.*,DTA.AUDITDATE
	INTO #CUSTOMERDTAXPAYMENT
	FROM CUSTOMERDTAXPAYMENT CDT WITH(NOLOCK)
	INNER JOIN #DTAXPAYAUDIT DTA
	ON DTA.DTAXPAYID = CDT.DTAXPAYID
	SELECT CD.CHALLANTYPE,CD.TAXAPPLICABLE,CD.PAYMENTTYPE,
		CASE WHEN CD.CHALLANTYPE = 280 OR CD.CHALLANTYPE = 282 THEN CDT.PAN ELSE CDT.[TAN] END AS PANTAN,
		CD.ASSESSMENTYEAR,CD.NATOFPAY, CDT.NAME,CDT.ADDRESS1,	
		CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,
		CDT.CITY,CDT.STATEID,CDT.PINCODE,
		CD.INCOMETAX,CD.SURCHARGE,CD.EDUCESS,CD.INTEREST,CD.PENALTY,CD.OTHERS,
		CD.DTAXPAYID,CD.LATEFEE
	INTO #TEMP1
	FROM CUSTOMERDTAX CDT WITH(NOLOCK)
	INNER JOIN #CUSTOMERDTAXPAYMENT CD WITH(NOLOCK)
	ON CD.DTAXID = CDT.DTAXID
	DROP TABLE #CUSTOMERDTAXPAYMENT
	DROP TABLE #DTAXPAYAUDIT
	DROP TABLE #CURRENTTEMP
	SELECT 
	T1.CHALLANTYPE,T1.TAXAPPLICABLE,T1.PAYMENTTYPE,T1.PANTAN,T1.ASSESSMENTYEAR,
	CASE WHEN TS.FORMID = 4 THEN ISNULL(TS.SECTIONNAME, '') ELSE ISNULL(TS.TAXNAME, '') END SECTIONNAME, 
	T1.NAME,T1.ADDRESS1,
	T1.ADDRESS2,T1.ADDRESS3,T1.ADDRESS4,T1.CITY,
	CASE WHEN T1.STATEID < 10 THEN '0' + CAST(T1.STATEID AS VARCHAR) ELSE CAST(T1.STATEID AS VARCHAR) END STATEID,
	T1.PINCODE,
	T1.INCOMETAX,T1.SURCHARGE,T1.EDUCESS,T1.INTEREST,T1.PENALTY,
	T1.OTHERS,T1.DTAXPAYID,T1.LATEFEE
	FROM #TEMP1 T1
	LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)
	ON TS.SECTIONID = T1.NATOFPAY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetDTaxSections')
DROP PROCEDURE USP_CUS_GetDTaxSections
GO
CREATE PROCEDURE USP_CUS_GetDTaxSections
AS
	BEGIN
		SELECT SECTIONID, TAXNAME, SECTIONNAME, FORMID, [DESCRIPTION] 
		FROM TAXSECTIONS WITH(NOLOCK) 
		WHERE TAXNAME NOT IN ('4BA', '2AA', 'LBB', '92C', '4IA', '4IB')
		UNION
		SELECT TOP 1 SECTIONID, TAXNAME, SECTIONNAME, FORMID, [DESCRIPTION] 
		FROM TAXSECTIONS WITH(NOLOCK) 
		WHERE TAXNAME = '4BA'
		UNION
		SELECT TOP 1 SECTIONID, TAXNAME, SECTIONNAME, FORMID, [DESCRIPTION] 
		FROM TAXSECTIONS WITH(NOLOCK) 
		WHERE TAXNAME = '2AA'
		UNION
		SELECT TOP 1 SECTIONID, TAXNAME, SECTIONNAME, FORMID, [DESCRIPTION] 
		FROM TAXSECTIONS WITH(NOLOCK) 
		WHERE TAXNAME = 'LBB'
		ORDER BY SECTIONID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GETDTAXTRANSACTIONID')
DROP PROCEDURE USP_CUS_GETDTAXTRANSACTIONID
GO
CREATE PROCEDURE USP_CUS_GETDTAXTRANSACTIONID
    @DTAXPAYID INT,
    @FINACLETRANSID VARCHAR(20),
    @TRANSDATE SMALLDATETIME
AS
    BEGIN
	   SELECT DTAXPAYID
	   FROM CUSTOMERDTAXPAYMENT WITH(NOLOCK)
	   WHERE TRANSDATE = @TRANSDATE
		  AND UPPER(FINACLETRANSID) = UPPER(@FINACLETRANSID)
		  AND DTAXPAYID <> @DTAXPAYID
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetDuplicateCustomerID')
DROP PROCEDURE USP_CUS_GetDuplicateCustomerID
GO
CREATE PROCEDURE [USP_CUS_GetDuplicateCustomerID]
	@customerID VARCHAR(9),
	@dtaxID INT
AS
BEGIN
	IF(@DTAXID = -1)
		BEGIN 
			SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID 
			INTO #TEMP1
			FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
			GROUP BY DTAXID
			SELECT 
			CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CITY,CDT.PINCODE,CDT.STATEID,
			CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,CDA.BRANCHID,CDA.DTAXAUDITID,
			CDA.REMARKS,CDA.ISDELETED,CDA.USERNAME,CDA.[STATUS],CDA.AUDITDATE,CDT.CUSTOMERID
			INTO #RESULT1
			FROM CUSTOMERDTAX CDT WITH(NOLOCK)
			INNER JOIN CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
			ON CDA.DTAXID = CDT.DTAXID
			SELECT ROW_NUMBER() OVER
			(
				ORDER BY T.DTAXID ASC
			) AS ROWNUMBER,
			T.*
			INTO #FINAL1
			FROM #RESULT1 T
			INNER JOIN #TEMP1 T1
			ON T.DTAXAUDITID = T1.DTAXAUDITID
			IF(ISNULL((SELECT COUNT(*) FROM #FINAL1 CDT WITH(NOLOCK) WHERE CUSTOMERID = @customerID AND ISDELETED = 0 AND CUSTOMERID <> ''),0)>0)
				BEGIN
					SELECT 1 NOOFITEMS
				END
			ELSE
				BEGIN 
					SELECT 0 NOOFITEMS
				END
	    END
	ELSE
	   BEGIN 
			SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID 
			INTO #TEMP11
			FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
			GROUP BY DTAXID
			SELECT 
			CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CITY,CDT.PINCODE,CDT.STATEID,
			CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,CDA.BRANCHID,CDA.DTAXAUDITID,
			CDA.REMARKS,CDA.ISDELETED,CDA.USERNAME,CDA.[STATUS],CDA.AUDITDATE,CDT.CUSTOMERID
			INTO #RESULT11
			FROM CUSTOMERDTAX CDT WITH(NOLOCK)
			INNER JOIN CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
			ON CDA.DTAXID = CDT.DTAXID
			SELECT ROW_NUMBER() OVER
			(
				ORDER BY T.DTAXID ASC
			) AS ROWNUMBER,
			T.*
			INTO #FINAL11
			FROM #RESULT11 T
			INNER JOIN #TEMP11 T1
			ON T.DTAXAUDITID = T1.DTAXAUDITID
		    IF(ISNULL((SELECT COUNT(*) FROM #FINAL11 CDT WITH(NOLOCK) WHERE CUSTOMERID = @customerID AND ISDELETED = 0 AND CUSTOMERID <> '' AND DTAXID <> @DTAXID),0) > 0)
			    BEGIN
					SELECT 1 NOOFITEMS
				END
			ELSE
			BEGIN
				SELECT 0 NOOFITEMS
		    END
	   END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetIsDuplicateAssesseeCode')
DROP PROCEDURE USP_CUS_GetIsDuplicateAssesseeCode
GO
CREATE PROCEDURE USP_CUS_GetIsDuplicateAssesseeCode
	@ASSESSECODE VARCHAR(15)  
AS  
BEGIN  
	 SELECT MAX(ITAXAUDITID) ITAXAUDITID,ITAXID   
	 INTO #TEMP1  
	 FROM CUSTOMERITAXAUDIT WITH(NOLOCK)  
	 GROUP BY ITAXID  
	 SELECT CI.ITAXID,CI.ASSESSECODE,CI.COMNAME,CI.COMCODE,CI.DIVCODE,CI.RANGECODE,
	 CI.NAME,CI.CITY,CI.PINCODE,SM.STATENAME,CI.CUSTOMERID,CI.ADDRESS1,CI.ADDRESS2,
	 CI.ADDRESS3,CI.ADDRESS4,CI.PHONENO,CI.EMAILID,CI.BRANCHID,  
	 CIA.ITAXAUDITID,CIA.REMARKS,CIA.ISDELETED,CIA.USERNAME,CIA.STATUS,CIA.AUDITDATE  
	 INTO #RESULT  
	 FROM CUSTOMERITAX CI WITH(NOLOCK)  
	 INNER JOIN STATEMASTER SM WITH(NOLOCK) ON SM.STATEID=CI.STATEID  
	 INNER JOIN CUSTOMERITAXAUDIT CIA WITH(NOLOCK)  
	 ON CI.ITAXID = CIA.ITAXID  
	 SELECT ROW_NUMBER() OVER  
	 (  
	  ORDER BY T.ITAXID ASC  
	 ) AS ROWNUMBER,  
	 T.*  
	 INTO #FINAL  
	 FROM #RESULT T  
	 INNER JOIN #TEMP1 T1  
	 ON T.ITAXAUDITID = T1.ITAXAUDITID  
	 IF(ISNULL((SELECT COUNT(*) FROM #FINAL  WITH(NOLOCK) WHERE ASSESSECODE = @ASSESSECODE AND ISDELETED=0 AND ASSESSECODE <> ''),0)>0)  
	  BEGIN  
	   SELECT 1 NOOFITEMS  
	  END  
	 ELSE  
	  BEGIN  
	   SELECT 0 NOOFITEMS  
	  END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetIsDuplicatePANTAN')
DROP PROCEDURE USP_CUS_GetIsDuplicatePANTAN
GO
CREATE PROCEDURE [USP_CUS_GetIsDuplicatePANTAN]
	@PAN VARCHAR(10),
	@TAN VARCHAR(10),
	@DTAXID INT
AS
BEGIN
	IF(@DTAXID = -1)
		BEGIN 
			SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID 
			INTO #TEMP1
			FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
			GROUP BY DTAXID
			SELECT 
			CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CITY,CDT.PINCODE,CDT.STATEID,
			CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,CDA.BRANCHID,CDA.DTAXAUDITID,
			CDA.REMARKS,CDA.ISDELETED,CDA.USERNAME,CDA.[STATUS],CDA.AUDITDATE,CDT.CUSTOMERID
			INTO #RESULT1
			FROM CUSTOMERDTAX CDT WITH(NOLOCK)
			INNER JOIN CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
			ON CDA.DTAXID = CDT.DTAXID
			SELECT ROW_NUMBER() OVER
			(
				ORDER BY T.DTAXID ASC
			) AS ROWNUMBER,
			T.*
			INTO #FINAL1
			FROM #RESULT1 T
			INNER JOIN #TEMP1 T1
			ON T.DTAXAUDITID = T1.DTAXAUDITID
			IF(ISNULL((SELECT COUNT(*) FROM #FINAL1 CDT WITH(NOLOCK) WHERE PAN = @PAN AND ISDELETED = 0 AND PAN <> ''),0)>0)
				BEGIN
					SELECT 1 NOOFITEMS
				END
			ELSE
				BEGIN
					SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID 
					INTO #TEMP2
					FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
					GROUP BY DTAXID
					SELECT 
					CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CITY,CDT.PINCODE,CDT.STATEID,
					CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,CDA.BRANCHID,CDA.DTAXAUDITID,
					CDA.REMARKS,CDA.ISDELETED,CDA.USERNAME,CDA.[STATUS],CDA.AUDITDATE,CDT.CUSTOMERID
					INTO #RESULT2
					FROM CUSTOMERDTAX CDT WITH(NOLOCK)
					INNER JOIN CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
					ON CDA.DTAXID = CDT.DTAXID
					SELECT ROW_NUMBER() OVER
					(
						ORDER BY T.DTAXID ASC
					) AS ROWNUMBER,
					T.*
					INTO #FINAL2
					FROM #RESULT2 T
					INNER JOIN #TEMP2 T1
					ON T.DTAXAUDITID = T1.DTAXAUDITID
			IF(ISNULL((SELECT COUNT(*) FROM #FINAL1 CDT WITH(NOLOCK) WHERE [TAN] = @TAN AND ISDELETED = 0 AND [TAN] <>''),0)>0)
				BEGIN
					SELECT 2 NOOFITEMS
				END
			ELSE
				BEGIN
					SELECT 3 NOOFITEMS
				END
		    END
	    END
	ELSE
	   BEGIN 
			SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID 
			INTO #TEMP11
			FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
			GROUP BY DTAXID
			SELECT 
			CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CITY,CDT.PINCODE,CDT.STATEID,
			CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,CDA.BRANCHID,CDA.DTAXAUDITID,
			CDA.REMARKS,CDA.ISDELETED,CDA.USERNAME,CDA.[STATUS],CDA.AUDITDATE,CDT.CUSTOMERID
			INTO #RESULT11
			FROM CUSTOMERDTAX CDT WITH(NOLOCK)
			INNER JOIN CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
			ON CDA.DTAXID = CDT.DTAXID
			SELECT ROW_NUMBER() OVER
			(
				ORDER BY T.DTAXID ASC
			) AS ROWNUMBER,
			T.*
			INTO #FINAL11
			FROM #RESULT11 T
			INNER JOIN #TEMP11 T1
			ON T.DTAXAUDITID = T1.DTAXAUDITID
		    IF(ISNULL((SELECT COUNT(*) FROM #FINAL11 CDT WITH(NOLOCK) WHERE PAN = @PAN AND ISDELETED = 0 AND PAN <> '' AND DTAXID <> @DTAXID),0) > 0)
			    BEGIN
					SELECT 1 NOOFITEMS
				END
			ELSE
				BEGIN
					SELECT MAX(DTAXAUDITID) DTAXAUDITID,DTAXID 
					INTO #TEMP22
					FROM CUSTOMERDTAXAUDIT WITH(NOLOCK)
					GROUP BY DTAXID
					SELECT 
					CDT.DTAXID,CDT.PAN,CDT.[TAN],CDT.NAME,CDT.CITY,CDT.PINCODE,CDT.STATEID,
					CDT.ADDRESS1,CDT.ADDRESS2,CDT.ADDRESS3,CDT.ADDRESS4,CDA.BRANCHID,CDA.DTAXAUDITID,
					CDA.REMARKS,CDA.ISDELETED,CDA.USERNAME,CDA.[STATUS],CDA.AUDITDATE,CDT.CUSTOMERID
					INTO #RESULT22
					FROM CUSTOMERDTAX CDT WITH(NOLOCK)
					INNER JOIN CUSTOMERDTAXAUDIT CDA WITH(NOLOCK)
					ON CDA.DTAXID = CDT.DTAXID
					SELECT ROW_NUMBER() OVER
					(
						ORDER BY T.DTAXID ASC
					) AS ROWNUMBER,
					T.*
					INTO #FINAL22
					FROM #RESULT22 T
					INNER JOIN #TEMP22 T1
					ON T.DTAXAUDITID = T1.DTAXAUDITID
			IF(ISNULL((SELECT COUNT(*) FROM #FINAL22 CDT WITH(NOLOCK) WHERE [TAN] = @TAN AND ISDELETED = 0 AND [TAN] <>'' AND DTAXID <> @DTAXID),0) > 0)
				BEGIN
					SELECT 2 NOOFITEMS
				END
			ELSE
				BEGIN
					SELECT 3 NOOFITEMS
				END
		       END
	   END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetITaxDailyTransaction')
DROP PROCEDURE USP_CUS_GetITaxDailyTransaction
GO
CREATE PROCEDURE [dbo].[USP_CUS_GetITaxDailyTransaction]
    @fromDate VARCHAR(10),  
    @toDate VARCHAR(10),
    @isToBeApproved BIT=0  
AS  
BEGIN
	IF(@isToBeApproved = 0)
		BEGIN  
			DECLARE @minDate DATETIME  
			DECLARE @maxDate DATETIME 
			SET @minDate = CONVERT(DATETIME,@fromDate,103)
			SET @maxDate = CONVERT(DATETIME,@toDate,103)
			SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID,ITAXPAYID
			INTO #CURRENTTEMPLATEST 
			FROM ITAXPAYAUDIT
			GROUP BY ITAXPAYID
			SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID, ITAXPAYID, BRANCHID, STATUS
			INTO #CURRENTTEMPALL
			FROM ITAXPAYAUDIT
			GROUP BY ITAXPAYID, BRANCHID, STATUS
			SELECT MAX(CTA.ITAXPAYAUDITID) ITAXPAYAUDITID, CTA.ITAXPAYID, CTA.BRANCHID, CTA.STATUS
			INTO #LATESTPAYAUDITDATA
			FROM  #CURRENTTEMPALL CTA
				INNER JOIN #CURRENTTEMPLATEST CTL
					ON CTA.ITAXPAYAUDITID = CTL.ITAXPAYAUDITID
			GROUP BY CTA.ITAXPAYID,CTA.BRANCHID,CTA.STATUS
			SELECT CAP.ITAXPAYAUDITID,CAP.ITAXPAYID,CAP.BRANCHID,CAP.STATUS
			INTO #CURRLATEST
			FROM ITAXPAYAUDIT ITP WITH(NOLOCK)
				INNER JOIN #LATESTPAYAUDITDATA CAP ON CAP.ITAXPAYAUDITID = ITP.ITAXPAYAUDITID 
			WHERE ITP.STATUS IN (7,8,9,10)
			GROUP BY CAP.ITAXPAYAUDITID, CAP.ITAXPAYID, CAP.BRANCHID, CAP.STATUS
			SELECT LPA.*,ITA.AUDITDATE
			INTO #ITAXPAYAUDIT   
			FROM #CURRLATEST LPA  
				INNER JOIN ITAXPAYAUDIT ITA  
					ON ITA.ITAXPAYAUDITID = LPA.ITAXPAYAUDITID  
			SELECT CIT.*,ITA.AUDITDATE,ITA.BRANCHID AS ITAXBRANCHID,STATUS
			INTO #CUSTOMERITAXPAYMENT  
			FROM CUSTOMERITAXPAYMENT CIT WITH(NOLOCK)  
				INNER JOIN #ITAXPAYAUDIT ITA  
					ON ITA.ITAXPAYID = CIT.ITAXPAYID
			WHERE CIT.TRANSDATE >= @minDate AND  CIT.TRANSDATE <= @maxDate
			SELECT CB.BRANCHCODE,CIT.FINACLETRANSID,CIT.TRANSDATE,CI.ASSESSECODE,CI.NAME,(SUM(CIT.AMTCODE1) + SUM(CIT.AMTCODE2) + SUM(CIT.AMTCODE3) + SUM(CIT.AMTCODE4) + SUM(CIT.AMTCODE5) + SUM(CIT.AMTCODE6)) AS TOTALAMOUNT,
				CIT.ACCCODE1,CIT.ACCCODE2,CIT.ACCCODE3,CIT.ACCCODE4,CIT.ACCCODE5,CIT.ACCCODE6,  
				CI.CITY,SM.STATENAME,CI.PINCODE,CIT.AMTCODE1,CIT.AMTCODE2,CIT.AMTCODE3,CIT.AMTCODE4,CIT.AMTCODE5,CIT.AMTCODE6,
				CASE WHEN STATUS=7 THEN 'ApprovedByBranch'
					WHEN STATUS=8 THEN 'TakenForPayment'
					WHEN STATUS=9 THEN 'Completed'
					WHEN STATUS=10 THEN 'ModifiedByTaxCell'
				ELSE '' END AS STATUS
			INTO #FINAL  
			FROM CUSTOMERITAX CI WITH(NOLOCK)  
				INNER JOIN #CUSTOMERITAXPAYMENT CIT WITH(NOLOCK)  
					ON CIT.ITAXID = CI.ITAXID  
				INNER JOIN STATEMASTER SM WITH(NOLOCK)  
					ON SM.STATEID=CI.STATEID
				INNER JOIN dbo.COMPANYBRANCH CB WITH(NOLOCK)  
					ON CB.BRANCHID=CIT.ITAXBRANCHID
			GROUP BY CB.BRANCHCODE,CIT.FINACLETRANSID,CIT.TRANSDATE,CI.ASSESSECODE,CI.NAME,
			CIT.ACCCODE1,CIT.ACCCODE2,CIT.ACCCODE3,CIT.ACCCODE4,CIT.ACCCODE5,CIT.ACCCODE6,  
			CI.CITY,SM.STATENAME,CI.PINCODE,CIT.AMTCODE1,CIT.AMTCODE2,CIT.AMTCODE3,CIT.AMTCODE4,CIT.AMTCODE5,CIT.AMTCODE6,STATUS
			SELECT * FROM #FINAL  
			DROP TABLE #CURRENTTEMPLATEST
			DROP TABLE #CURRENTTEMPALL
			DROP TABLE #CURRLATEST
			DROP TABLE #ITAXPAYAUDIT
			DROP TABLE #CUSTOMERITAXPAYMENT
			DROP TABLE #FINAL
		END
   ELSE
		BEGIN
			DECLARE @minDateToBeApproved DATETIME  
			DECLARE @maxDateToBeApproved DATETIME 
			SET @minDate = CONVERT(DATETIME,@fromDate,103)
			SET @maxDate = CONVERT(DATETIME,@toDate,103)
			SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID,ITAXPAYID
			INTO #CURRENTTEMPLATESTToBeApproved 
			FROM ITAXPAYAUDIT
			GROUP BY ITAXPAYID
			SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID, ITAXPAYID, BRANCHID, STATUS
			INTO #CURRENTTEMPALLToBeApproved
			FROM ITAXPAYAUDIT
			GROUP BY ITAXPAYID, BRANCHID, STATUS
			SELECT MAX(CTA.ITAXPAYAUDITID) ITAXPAYAUDITID, CTA.ITAXPAYID, CTA.BRANCHID, CTA.STATUS
			INTO #LATESTPAYAUDITDATAToBeApproved
			FROM  #CURRENTTEMPALLToBeApproved CTA
				INNER JOIN #CURRENTTEMPLATESTToBeApproved CTL
					ON CTA.ITAXPAYAUDITID = CTL.ITAXPAYAUDITID
			GROUP BY CTA.ITAXPAYID,CTA.BRANCHID,CTA.STATUS
			SELECT CAP.ITAXPAYAUDITID,CAP.ITAXPAYID,CAP.BRANCHID,CAP.STATUS
			INTO #CURRLATESTToBeApproved
			FROM ITAXPAYAUDIT ITP WITH(NOLOCK)
				INNER JOIN #LATESTPAYAUDITDATAToBeApproved CAP ON CAP.ITAXPAYAUDITID = ITP.ITAXPAYAUDITID 
			WHERE ITP.STATUS IN (1)
			GROUP BY CAP.ITAXPAYAUDITID, CAP.ITAXPAYID, CAP.BRANCHID, CAP.STATUS
			SELECT LPA.*,ITA.AUDITDATE
			INTO #ITAXPAYAUDITToBeApproved   
			FROM #CURRLATESTToBeApproved LPA  
				INNER JOIN ITAXPAYAUDIT ITA  
					ON ITA.ITAXPAYAUDITID = LPA.ITAXPAYAUDITID  
			SELECT CIT.*,ITA.AUDITDATE,ITA.BRANCHID AS ITAXBRANCHID,STATUS
			INTO #CUSTOMERITAXPAYMENTToBeApproved  
			FROM CUSTOMERITAXPAYMENT CIT WITH(NOLOCK)  
				INNER JOIN #ITAXPAYAUDITToBeApproved ITA  
					ON ITA.ITAXPAYID = CIT.ITAXPAYID
			WHERE CIT.TRANSDATE >= @minDate AND  CIT.TRANSDATE <= @maxDate
			SELECT CB.BRANCHCODE,CIT.FINACLETRANSID,CIT.TRANSDATE,CI.ASSESSECODE,CI.NAME,(SUM(CIT.AMTCODE1) + SUM(CIT.AMTCODE2) + SUM(CIT.AMTCODE3) + SUM(CIT.AMTCODE4) + SUM(CIT.AMTCODE5) + SUM(CIT.AMTCODE6)) AS TOTALAMOUNT,
				CIT.ACCCODE1,CIT.ACCCODE2,CIT.ACCCODE3,CIT.ACCCODE4,CIT.ACCCODE5,CIT.ACCCODE6,  
				CI.CITY,SM.STATENAME,CI.PINCODE,CIT.AMTCODE1,CIT.AMTCODE2,CIT.AMTCODE3,CIT.AMTCODE4,CIT.AMTCODE5,CIT.AMTCODE6,
				CASE WHEN STATUS=1 THEN 'ToBeApproved'
				ELSE '' END AS STATUS
			INTO #FINALToBeApproved  
			FROM CUSTOMERITAX CI WITH(NOLOCK)  
				INNER JOIN #CUSTOMERITAXPAYMENTToBeApproved CIT WITH(NOLOCK)  
					ON CIT.ITAXID = CI.ITAXID  
				INNER JOIN STATEMASTER SM WITH(NOLOCK)  
					ON SM.STATEID=CI.STATEID
				INNER JOIN dbo.COMPANYBRANCH CB WITH(NOLOCK)  
					ON CB.BRANCHID=CIT.ITAXBRANCHID
			GROUP BY CB.BRANCHCODE,CIT.FINACLETRANSID,CIT.TRANSDATE,CI.ASSESSECODE,CI.NAME,
			CIT.ACCCODE1,CIT.ACCCODE2,CIT.ACCCODE3,CIT.ACCCODE4,CIT.ACCCODE5,CIT.ACCCODE6,  
			CI.CITY,SM.STATENAME,CI.PINCODE,CIT.AMTCODE1,CIT.AMTCODE2,CIT.AMTCODE3,CIT.AMTCODE4,CIT.AMTCODE5,CIT.AMTCODE6,STATUS
			SELECT * FROM #FINALToBeApproved  
			DROP TABLE #CURRENTTEMPLATESTToBeApproved
			DROP TABLE #CURRENTTEMPALLToBeApproved
			DROP TABLE #CURRLATESTToBeApproved
			DROP TABLE #ITAXPAYAUDITToBeApproved
			DROP TABLE #CUSTOMERITAXPAYMENTToBeApproved
			DROP TABLE #FINALToBeApproved
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetITaxDailyTransactionBranchWise')
DROP PROCEDURE USP_CUS_GetITaxDailyTransactionBranchWise
GO
CREATE PROCEDURE [USP_CUS_GetITaxDailyTransactionBranchWise]
    @fromDate SMALLDATETIME,  
    @toDate SMALLDATETIME,
    @BranchID INT  
AS  
BEGIN  
	SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID,ITAXPAYID
	INTO #CURRENTTEMPLATEST 
	FROM ITAXPAYAUDIT
	GROUP BY ITAXPAYID
	SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID,ITAXPAYID,BRANCHID,STATUS
	INTO #CURRENTTEMPALL
	FROM ITAXPAYAUDIT
	GROUP BY ITAXPAYID,BRANCHID,STATUS
    SELECT MAX(CTA.ITAXPAYAUDITID) ITAXPAYAUDITID,CTA.ITAXPAYID,CTA.BRANCHID,CTA.STATUS
	INTO #LATESTPAYAUDITDATA
	FROM  #CURRENTTEMPALL CTA
	INNER JOIN #CURRENTTEMPLATEST CTL
	ON CTA.ITAXPAYAUDITID = CTL.ITAXPAYAUDITID
	GROUP BY CTA.ITAXPAYID,CTA.BRANCHID,CTA.STATUS
    SELECT CAP.ITAXPAYAUDITID,CAP.ITAXPAYID,CAP.BRANCHID,CAP.STATUS
    INTO #CURRLATEST
    FROM ITAXPAYAUDIT ITP WITH(NOLOCK)
    INNER JOIN #LATESTPAYAUDITDATA CAP ON CAP.ITAXPAYAUDITID = ITP.ITAXPAYAUDITID 
    WHERE ITP.STATUS IN (1,5,7,8,9,10,11,12,13,14) AND ITP.BRANCHID = @BranchID
    GROUP BY CAP.ITAXPAYAUDITID,CAP.ITAXPAYID,CAP.BRANCHID,CAP.STATUS
    SELECT LPA.*,ITA.AUDITDATE
    INTO #ITAXPAYAUDIT   
    FROM #CURRLATEST LPA  
    INNER JOIN ITAXPAYAUDIT ITA  
    ON ITA.ITAXPAYAUDITID = LPA.ITAXPAYAUDITID  
    SELECT CIT.*,ITA.AUDITDATE,ITA.BRANCHID AS ITAXBRANCHID,STATUS
    INTO #CUSTOMERITAXPAYMENT  
    FROM CUSTOMERITAXPAYMENT CIT WITH(NOLOCK)  
    INNER JOIN #ITAXPAYAUDIT ITA  
    ON ITA.ITAXPAYID = CIT.ITAXPAYID
   WHERE CIT.TRANSDATE >= @fromDate AND  CIT.TRANSDATE <= @toDate AND ITA.BRANCHID=@BranchID
    SELECT CB.BRANCHCODE,CIT.FINACLETRANSID,CIT.TRANSDATE,CI.ASSESSECODE,CI.NAME,(SUM(CIT.AMTCODE1) + SUM(CIT.AMTCODE2) + SUM(CIT.AMTCODE3) + SUM(CIT.AMTCODE4) + SUM(CIT.AMTCODE5) + SUM(CIT.AMTCODE6)) AS TOTALAMOUNT,
    CIT.ACCCODE1,CIT.ACCCODE2,CIT.ACCCODE3,CIT.ACCCODE4,CIT.ACCCODE5,CIT.ACCCODE6,  
    CI.CITY,SM.STATENAME,CI.PINCODE,CIT.AMTCODE1,CIT.AMTCODE2,CIT.AMTCODE3,CIT.AMTCODE4,CIT.AMTCODE5,CIT.AMTCODE6,
    CASE WHEN STATUS=1 THEN 'ToBeApproved'
		 WHEN STATUS=5 THEN 'Deleted'
		 WHEN STATUS=7 THEN 'ApprovedByBranch'
		 WHEN STATUS=8 THEN 'TakenForPayment'
		 WHEN STATUS=9 THEN 'Completed'
		 WHEN STATUS=10 THEN 'ModifiedByTaxCell'
		 WHEN STATUS=11 THEN 'RejectedByBranch'
		 WHEN STATUS=12 THEN 'RejectedByTaxCell'
		 WHEN STATUS=13 THEN 'ApprovedByTaxCell'
		 WHEN STATUS=14 THEN 'EditedByAdmin'
    ELSE '' END AS STATUS
    INTO #FINAL  
    FROM CUSTOMERITAX CI WITH(NOLOCK)  
    INNER JOIN #CUSTOMERITAXPAYMENT CIT WITH(NOLOCK)  
    ON CIT.ITAXID = CI.ITAXID  
    INNER JOIN STATEMASTER SM WITH(NOLOCK)  
    ON SM.STATEID=CI.STATEID
    INNER JOIN dbo.COMPANYBRANCH CB WITH(NOLOCK)  
    ON CB.BRANCHID=CIT.ITAXBRANCHID
    GROUP BY CB.BRANCHCODE,CIT.FINACLETRANSID,CIT.TRANSDATE,CI.ASSESSECODE,CI.NAME,
    CIT.ACCCODE1,CIT.ACCCODE2,CIT.ACCCODE3,CIT.ACCCODE4,CIT.ACCCODE5,CIT.ACCCODE6,  
    CI.CITY,SM.STATENAME,CI.PINCODE,CIT.AMTCODE1,CIT.AMTCODE2,CIT.AMTCODE3,CIT.AMTCODE4,CIT.AMTCODE5,CIT.AMTCODE6,STATUS
    SELECT * FROM #FINAL  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetITaxMasterData')
DROP PROCEDURE USP_CUS_GetITaxMasterData
GO
CREATE PROCEDURE [USP_CUS_GetITaxMasterData]
  @fromDate VARCHAR(10),  
  @toDate VARCHAR(10),
  @isExcel BIT=0 
AS  
BEGIN  
	IF(@isExcel = 0)
	 BEGIN
		 DECLARE @minDate DATETIME  
		 DECLARE @maxDate DATETIME
		 SELECT MAX(ITAXAUDITID) ITAXAUDITID,ITAXID
		 INTO #CURRAUDITPOS 
		 FROM CUSTOMERITAXAUDIT WITH(NOLOCK)
		 WHERE ISDELETED = 0
		 GROUP BY ITAXID
		 SELECT CAP.ITAXAUDITID,CAP.ITAXID,STATUS
		 INTO #CUSTOMERITAXAUDIT
		 FROM CUSTOMERITAXAUDIT CDA WITH(NOLOCK)
		 INNER JOIN #CURRAUDITPOS CAP ON CDA.ITAXAUDITID = CAP.ITAXAUDITID
		 WHERE STATUS = 13 AND ISDELETED = 0
		 SELECT CIT.*   
		 INTO #LATESTDATA  
		 FROM CUSTOMERITAXAUDIT CIT WITH(NOLOCK)  
		 INNER JOIN #CUSTOMERITAXAUDIT CIA  
		 ON CIA.ITAXAUDITID = CIT.ITAXAUDITID  
		 SET @minDate = ISNULL((SELECT MIN(AUDITDATE) FROM #LATESTDATA   
		 WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@fromDate,103)),  
		 CONVERT(DATETIME,@fromDate,103))  
		 SET @maxDate = ISNULL((SELECT MAX(AUDITDATE) FROM #LATESTDATA   
		 WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@toDate,103)),  
		 CONVERT(DATETIME,@toDate,103))
		 SELECT CIT.ASSESSECODE,'' AS PAN, CIT.COMCODE,CIT.DIVCODE,CIT.RANGECODE,CIT.NAME,CIT.ADDRESS1,CIT.ADDRESS2,CIT.ADDRESS3,CIT.ADDRESS4,  
		 CIT.CITY,CIT.PINCODE,CIT.STATEID,SM.STATENAME,  
		 CIT.PHONENO,CIT.EMAILID FROM #LATESTDATA LD  
		 INNER JOIN CUSTOMERITAX CIT WITH(NOLOCK)  
		 ON CIT.ITAXID = LD.ITAXID   
		 INNER JOIN STATEMASTER SM WITH(NOLOCK)  
		 ON SM.STATEID = CIT.STATEID  
		 WHERE LD.AUDITDATE >= @minDate AND LD.AUDITDATE <= @maxDate
	 END
	ELSE
	 BEGIN
	 	DECLARE @minDateExcel DATETIME  
		DECLARE @maxDateExcel DATETIME
		 SELECT MAX(ITAXAUDITID) ITAXAUDITID,ITAXID
		 INTO #CURRAUDITPOSEXCEL 
		 FROM CUSTOMERITAXAUDIT WITH(NOLOCK)
		 WHERE ISDELETED = 0
		 GROUP BY ITAXID
		 SELECT CAP.ITAXAUDITID,CAP.ITAXID,STATUS
		 INTO #CUSTOMERITAXAUDITEXCEL
		 FROM CUSTOMERITAXAUDIT CDA WITH(NOLOCK)
		 INNER JOIN #CURRAUDITPOSEXCEL CAP ON CDA.ITAXAUDITID = CAP.ITAXAUDITID
		 WHERE STATUS = 13 AND ISDELETED = 0
		 SELECT CIT.*   
		 INTO #LATESTDATAEXCEL  
		 FROM CUSTOMERITAXAUDIT CIT WITH(NOLOCK)  
		 INNER JOIN #CUSTOMERITAXAUDITEXCEL CIA  
		 ON CIA.ITAXAUDITID = CIT.ITAXAUDITID  
		 SET @minDateExcel = ISNULL((SELECT MIN(AUDITDATE) FROM #LATESTDATAEXCEL   
		 WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@fromDate,103)),  
		 CONVERT(DATETIME,@fromDate,103))  
		 SET @maxDateExcel = ISNULL((SELECT MAX(AUDITDATE) FROM #LATESTDATAEXCEL   
		 WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@toDate,103)),  
		 CONVERT(DATETIME,@toDate,103))
		 SELECT CIT.ASSESSECODE,'' AS PAN, CIT.COMCODE,CIT.DIVCODE,CIT.RANGECODE,CIT.NAME,CIT.ADDRESS1,CIT.ADDRESS2,CIT.ADDRESS3,CIT.ADDRESS4,  
		 CIT.CITY,CIT.PINCODE,CIT.STATEID,SM.STATENAME,  
		 CIT.PHONENO,CIT.EMAILID,CIT.CUSTOMERID FROM #LATESTDATAEXCEL LD  
		 INNER JOIN CUSTOMERITAX CIT WITH(NOLOCK)  
		 ON CIT.ITAXID = LD.ITAXID   
		 INNER JOIN STATEMASTER SM WITH(NOLOCK)  
		 ON SM.STATEID = CIT.STATEID  
		 WHERE LD.AUDITDATE >= @minDateExcel AND LD.AUDITDATE <= @maxDateExcel
	 END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetItaxPay')
DROP PROCEDURE USP_CUS_GetItaxPay
GO
CREATE PROCEDURE [dbo].[USP_CUS_GetItaxPay] ---USP_CUS_GetItaxPay 20
@ITAXPAYID INT     
AS    
 BEGIN
	 DECLARE @minITaxPayAuditID INT;
	 DECLARE @itaxpaycreatedBranchID INT; 
	 DECLARE @lastEditUser VARCHAR(100);
	 SET @minITaxPayAuditID = (SELECT MIN(ITAXPAYAUDITID) FROM ITAXPAYAUDIT WITH(NOLOCK) WHERE ITAXPAYID = @ITAXPAYID)
	 SET @itaxpaycreatedBranchID = (SELECT BRANCHID FROM ITAXPAYAUDIT WITH(NOLOCK) WHERE ITAXPAYAUDITID = @minITaxPayAuditID)
	 SELECT @lastEditUser = USERNAME
		FROM ITAXPAYAUDIT WITH(NOLOCK)
		WHERE ITAXPAYAUDITID = 
		(
			SELECT MAX(ITAXPAYAUDITID) 
			FROM ITAXPAYAUDIT WITH(NOLOCK)
			WHERE ITAXPAYID = @ITAXPAYID
			AND STATUS = 1
		)
	 SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID,ITAXPAYID
		INTO #TEMPITAXPAY1  
		FROM ITAXPAYAUDIT WITH(NOLOCK) 
		WHERE ITAXPAYID = @ITAXPAYID 
		GROUP BY ITAXPAYID 
	 SELECT CIP.ITAXPAYID,CIP.BRANCHID,CIP.PAYMENTTYPE,CI.NAME,
			CI.CUSTOMERID,CI.ASSESSECODE,CI.COMNAME,CI.COMCODE,
			CI.DIVCODE,CI.RANGECODE,CIP.ITAXID,  
			(
			   SELECT CIP.ACCCODE1 + '-' + PC.PAYMENTNAME + '-' + 
					  CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE1 = PC.TAXCODE) THEN 'Tax'  
						   WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE1 = PC.IPCODE) THEN 'Interest'
						   WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE1 = PC.PCODE) THEN 'Penalty'       
						   WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE1 = PC.TAXCODE) THEN 'Tax' END
				FROM PAYMENTCODE PC WITH(NOLOCK)  
					INNER JOIN CUSTOMERITAXPAYMENT CIP WITH(NOLOCK) ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
				WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
					 (
						PC.IPCODE = CIP.ACCCODE1 OR PC.TAXCODE = CIP.ACCCODE1 
						OR PC.PCODE = CIP.ACCCODE1 AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					 ) OR   
					 (
						PC.TAXCODE = CIP.ACCCODE1 AND PC.IPCODE = NULL 
						AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					 ) OR   
					 (
						PC.TAXCODE = CIP.ACCCODE1 OR PC.IPCODE = NULL 
						OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2
					 ) AND CIP.ITAXPAYID=@ITAXPAYID
			)ACCCODE1,  
			(
				SELECT CIP.ACCCODE2 + '-' + PC.PAYMENTNAME + '-' +
					   CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE2 = PC.TAXCODE) THEN 'Tax'  
							WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE2 = PC.IPCODE) THEN 'Interest'
							WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE2 = PC.PCODE) THEN 'Penalty'    
							WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE2 = PC.TAXCODE) THEN 'Tax' END  
				FROM PAYMENTCODE PC  WITH(NOLOCK)
					 INNER JOIN CUSTOMERITAXPAYMENT CIP WITH(NOLOCK) ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
				WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
					 (
						PC.IPCODE = CIP.ACCCODE2 OR PC.TAXCODE = CIP.ACCCODE2 
						OR PC.PCODE = CIP.ACCCODE2 AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					 ) OR   
					 (
						PC.TAXCODE = CIP.ACCCODE2 AND PC.IPCODE = NULL 
						AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					 ) OR   
					 (
						PC.TAXCODE = CIP.ACCCODE2 OR PC.IPCODE = NULL 
						OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2
					 ) AND CIP.ITAXPAYID=@ITAXPAYID
			)ACCCODE2,  
					(
						SELECT CIP.ACCCODE3 + '-' + PC.PAYMENTNAME + '-' +
							   CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE3 = PC.TAXCODE) THEN 'Tax'  
									WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE3 = PC.IPCODE) THEN 'Interest'
									WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE3 = PC.PCODE) THEN 'Penalty'     
									WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE3 = PC.TAXCODE) THEN 'Tax' END  
						FROM PAYMENTCODE PC  WITH(NOLOCK) 
							INNER JOIN CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
						WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
							 (
								PC.IPCODE = CIP.ACCCODE3 OR PC.TAXCODE = CIP.ACCCODE3 
								OR PC.PCODE = CIP.ACCCODE3 AND CIP.PAYMENTTYPE=1 
								AND CIP.ITAXPAYID=@ITAXPAYID
							  ) OR   
							 (
								PC.TAXCODE = CIP.ACCCODE3 AND PC.IPCODE = NULL 
								AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 
								AND CIP.ITAXPAYID=@ITAXPAYID
							  ) OR   
							 (  
								PC.TAXCODE = CIP.ACCCODE3 OR PC.IPCODE = NULL 
								OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2
							  ) AND CIP.ITAXPAYID=@ITAXPAYID
			)ACCCODE3,  
			(
				SELECT CIP.ACCCODE4 + '-' + PC.PAYMENTNAME + '-' +
					   CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE4 = PC.TAXCODE) THEN 'Tax'  
							WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE4 = PC.IPCODE) THEN 'Interest'
							WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE4 = PC.PCODE) THEN 'Penalty'   
							WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE4 = PC.TAXCODE) THEN 'Tax' END  
				FROM PAYMENTCODE PC WITH(NOLOCK)   
					 INNER JOIN CUSTOMERITAXPAYMENT CIP WITH(NOLOCK) ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
				WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
					(
						PC.IPCODE = CIP.ACCCODE4 OR PC.TAXCODE = CIP.ACCCODE4 
						OR PC.PCODE = CIP.ACCCODE4 AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					) OR   
				   (	
						PC.TAXCODE = CIP.ACCCODE4 AND PC.IPCODE = NULL 
						AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					) OR   
					(	
						PC.TAXCODE = CIP.ACCCODE4 OR PC.IPCODE = NULL 
						OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2
					) AND CIP.ITAXPAYID=@ITAXPAYID
			)ACCCODE4,  
			(
				SELECT CIP.ACCCODE5 + '-' + PC.PAYMENTNAME + '-' +
					   CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE5 = PC.TAXCODE) THEN 'Tax'  
							WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE5 = PC.IPCODE) THEN 'Interest'
							WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE5 = PC.PCODE) THEN 'Penalty'    
							WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE5 = PC.TAXCODE) THEN 'Tax' END  
				FROM PAYMENTCODE PC WITH(NOLOCK)   
					INNER JOIN CUSTOMERITAXPAYMENT CIP WITH(NOLOCK) ON CIP.PAYMENTTYPE=PC.PAYMENTTYPE  
				WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
					(
						PC.IPCODE = CIP.ACCCODE5 OR PC.TAXCODE = CIP.ACCCODE5 
						OR PC.PCODE = CIP.ACCCODE5 AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					) OR   
					(
						PC.TAXCODE = CIP.ACCCODE5 AND PC.IPCODE = NULL 
						AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					) OR   
					(
						PC.TAXCODE = CIP.ACCCODE5 OR PC.IPCODE = NULL 
						OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2
					) AND CIP.ITAXPAYID=@ITAXPAYID
			)ACCCODE5,  
			(
				SELECT CIP.ACCCODE6 + '-' + PC.PAYMENTNAME + '-' + 
					   CASE WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE6 = PC.TAXCODE) THEN 'Tax'  
							WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE6 = PC.IPCODE) THEN 'Interest'
							WHEN CIP.PAYMENTTYPE = 1 AND (CIP.ACCCODE6 = PC.PCODE) THEN 'Penalty'     
							WHEN CIP.PAYMENTTYPE =2 AND (CIP.ACCCODE6 = PC.TAXCODE) THEN 'Tax' END  
				FROM PAYMENTCODE PC WITH(NOLOCK)  
				WHERE CIP.ITAXPAYID=@ITAXPAYID AND  
					 (
						PC.IPCODE = CIP.ACCCODE6 OR PC.TAXCODE = CIP.ACCCODE6 
						OR PC.PCODE = CIP.ACCCODE6 AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					 ) OR   
					 (
						PC.TAXCODE = CIP.ACCCODE6 AND PC.IPCODE = NULL 
						AND PC.PCODE = NULL AND CIP.PAYMENTTYPE=1 
						AND CIP.ITAXPAYID=@ITAXPAYID
					 ) OR   
					 (
						PC.TAXCODE = CIP.ACCCODE6 OR PC.IPCODE = NULL 
						OR PC.PCODE = NULL AND CIP.PAYMENTTYPE=2
					 ) AND CIP.ITAXPAYID=@ITAXPAYID
			)ACCCODE6,  
			CIP.AMTCODE1,CIP.AMTCODE2,CIP.AMTCODE3,CIP.AMTCODE4,CIP.AMTCODE5,
			CIP.AMTCODE6,CIP.FINACLETRANSID,CONVERT(DATETIME,CIP.TRANSDATE,101) TRANSDATE,
			CIP.REFERENCEDOC,CIP.FILENAME,(CB.BRANCHCODE  + '-' + CB.BRANCHNAME) AS BRANCH,
			(
				SELECT BRANCHCODE 
				FROM COMPANYBRANCH WITH(NOLOCK) 
				WHERE BRANCHID = @itaxpaycreatedBranchID
			) + '-' + 
			(
				SELECT BRANCHNAME 
				FROM COMPANYBRANCH WITH(NOLOCK) 
				WHERE BRANCHID = @itaxpaycreatedBranchID
			) CUSTBRANCHPAY,
			IPA.ITAXPAYAUDITID,IPA.REMARKS,IPA.ISDELETED,IPA.USERNAME,
			IPA.[STATUS],IPA.AUDITDATE,@lastEditUser LASTEDITUSER
	FROM CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)  
			INNER JOIN CUSTOMERITAX CI WITH(NOLOCK) ON CIP.ITAXID = CI.ITAXID
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CI.BRANCHID 
			INNER JOIN #TEMPITAXPAY1 T WITH(NOLOCK) ON T.ITAXPAYID = CIP.ITAXPAYID
			INNER JOIN ITAXPAYAUDIT IPA WITH(NOLOCK) ON IPA.ITAXPAYAUDITID = T.ITAXPAYAUDITID 
	WHERE CIP.ITAXPAYID = @ITAXPAYID  					 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetItaxPayCount')
DROP PROCEDURE USP_CUS_GetItaxPayCount
GO
CREATE PROCEDURE [USP_CUS_GetItaxPayCount]
@BRANCHID INT,  
@ISCHECKER INT,  
@NAME VARCHAR(75),  
@CUSTOMERID VARCHAR(6),  
@PAYMENTTYPE INT,  
@AMTCODE1 NUMERIC(13,2),  
@AMTCODE2 NUMERIC(13,2),  
@CHAREFNO VARCHAR(25),  
@BANKREFNO VARCHAR(25),
@USERID INT,
@TRANSDATEFROM DATETIME = NULL,                                  
@TRANSDATETO DATETIME = NULL     
AS  
 BEGIN  
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED         
  /* The number of rows affected by the different commands does not interest the application, so turn NOCOUNT ON*/        
 --SET NOCOUNT ON        
  /* Determine the first record and last record */        
 DECLARE @SQLQUERY NVARCHAR(MAX);  
 CREATE TABLE #TEMPITAXPAY(NAME VARCHAR(75),CUSTOMERID VARCHAR(9),ITAXPAYID INT,BRANCHNAME VARCHAR(500),PAYMENTTYPE INT,ITAXID INT,ACCCODE1 VARCHAR(4),ACCCODE2 VARCHAR(4),ACCCODE3 VARCHAR(4),ACCCODE4 VARCHAR(6),ACCCODE5 VARCHAR(4),ACCCODE6 VARCHAR(4),  
 AMTCODE1 NUMERIC(13,2),AMTCODE2 NUMERIC(13,2),AMTCODE3 NUMERIC(13,2),AMTCODE4 NUMERIC(13,2),AMTCODE5 NUMERIC(13,2),AMTCODE6 NUMERIC(13,2),ITAXPAYAUDITID INT,  
 REMARKS VARCHAR(200),ISDELETED BIT,USERNAME VARCHAR(75),[STATUS] INT,AUDITDATE DATETIME)  
 SET @SQLQUERY = 'SELECT CI.NAME,CI.CUSTOMERID, CIP.ITAXPAYID,CB.BRANCHNAME,CIP.PAYMENTTYPE,CIP.ITAXID,CIP.ACCCODE1,CIP.ACCCODE2,CIP.ACCCODE3,CIP.ACCCODE4,CIP.ACCCODE5,CIP.ACCCODE6,  
 CIP.AMTCODE1,CIP.AMTCODE2,CIP.AMTCODE3,CIP.AMTCODE4,CIP.AMTCODE5,CIP.AMTCODE6,ITPA.ITAXPAYAUDITID,ITPA.REMARKS,ITPA.ISDELETED,ITPA.USERNAME,ITPA.STATUS,ITPA.AUDITDATE  
 FROM CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)  
 INNER JOIN ITAXPAYAUDIT ITPA WITH(NOLOCK) ON CIP.ITAXPAYID = ITPA.ITAXPAYID  
 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CIP.BRANCHID = CB.BRANCHID  
 INNER JOIN CUSTOMERITAX CI WITH(NOLOCK) ON CI.ITAXID = CIP.ITAXID  
 WHERE ITPA.ISDELETED=0'
 IF (@USERID <> 1)
	BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND ITPA.BRANCHID =' + CAST(@BRANCHID AS VARCHAR)
		IF (@ISCHECKER = 1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND ITPA.[STATUS] = 1' + ' AND ITPA.BRANCHID =' + CAST(@BRANCHID AS VARCHAR)
			END
	END
	ELSE
	BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND ITPA.[STATUS] IN (7,10)'
	END
 IF(@ISCHECKER = 1)  
 BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND ITPA.STATUS=1 AND ITPA.BRANCHID = '''+CAST(@BRANCHID AS VARCHAR) +''''  
 END  
 IF(@NAME < >'')  
 BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND CI.NAME LIKE ''%'+ @NAME +'%'''  
 END  
 IF(@CUSTOMERID < > '' OR @CUSTOMERID <> NULL)  
 BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND CI.CUSTOMERID LIKE ''%'+ @CUSTOMERID +'%'''  
 END  
 IF(@PAYMENTTYPE < > -1)  
 BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND CIP.PAYMENTTYPE = '''+ CAST(@PAYMENTTYPE AS VARCHAR(10)) +''''  
 END  
 IF(@AMTCODE1 <> 0 OR @AMTCODE2 <> 0)                                    
 BEGIN                                    
  SET @SQLQUERY = @SQLQUERY + ' AND CIP.AMTCODE1 BETWEEN ' + CAST(@AMTCODE1 AS VARCHAR(20)) + ' AND ' + CAST(@AMTCODE2 AS VARCHAR(20)) + ' OR CIP.AMTCODE2 BETWEEN ' + CAST(@AMTCODE1 AS VARCHAR(20)) + ' AND ' + CAST(@AMTCODE2 AS VARCHAR(20)) + ' OR CIP.AMTCODE3 BETWEEN ' + CAST(@AMTCODE1 AS VARCHAR(20)) + ' AND ' + CAST(@AMTCODE2 AS VARCHAR(20)) + ' OR CIP.AMTCODE4 BETWEEN ' + CAST(@AMTCODE1 AS VARCHAR(20)) + ' AND ' + CAST(@AMTCODE2 AS VARCHAR(20)) +   
  ' OR CIP.AMTCODE5 BETWEEN ' + CAST(@AMTCODE1 AS VARCHAR(20)) +   
  ' AND ' + CAST(@AMTCODE2 AS VARCHAR(20)) + ' OR CIP.AMTCODE6 BETWEEN '   
  + CAST(@AMTCODE1 AS VARCHAR(20)) + ' AND ' + CAST(@AMTCODE2 AS VARCHAR(20));                              
 END   
 IF(@CHAREFNO < > '')  
 BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND CIP.CHAREFNO LIKE ''%'+ @CHAREFNO +'%'''  
 END  
 IF(@BANKREFNO < > '')  
 BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND CIP.BANKREFNO LIKE ''%'+ @BANKREFNO +'%'''  
 END
 IF(@TRANSDATEFROM IS NOT NULL AND @TRANSDATETO IS NOT NULL)                                  
 BEGIN                   
	SET @SQLQUERY = @SQLQUERY + ' AND CIP.TRANSDATE BETWEEN ''' + CAST(@TRANSDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TRANSDATETO AS VARCHAR) + '''';                                  
 END        
 INSERT INTO #TEMPITAXPAY  
 EXEC sp_executesql @SQLQUERY  
 SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID,ITAXPAYID  
 INTO #TEMPITAXPAY1  
 FROM ITAXPAYAUDIT WITH(NOLOCK)  
 GROUP BY ITAXPAYID  
 SELECT ROW_NUMBER() OVER  
 (  
  ORDER BY T.ITAXPAYID ASC  
 ) AS ROWNUM,  
 T.*  
 INTO #RESULT  
 FROM #TEMPITAXPAY T  
 INNER JOIN #TEMPITAXPAY1 T1  
 ON T.ITAXPAYID = T1.ITAXPAYID AND T.ITAXPAYAUDITID = T1.ITAXPAYAUDITID  
 DROP TABLE #TEMPITAXPAY  
 DROP TABLE #TEMPITAXPAY1  
    SELECT COUNT(*) FROM #RESULT  
 ----/* TURN NOCOUNT BACK OFF */       
  --SET NOCOUNT OFF       
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetITaxPayData')
DROP PROCEDURE USP_CUS_GetITaxPayData
GO
CREATE PROCEDURE [USP_CUS_GetITaxPayData] 
 @fromDate VARCHAR(10),  
 @toDate VARCHAR(10),  
 @BRANCHID INT  
AS  
BEGIN  
 DECLARE @minDate DATETIME  
 DECLARE @maxDate DATETIME  
 SET @minDate = ISNULL((SELECT MIN(AUDITDATE) FROM ITAXPAYAUDIT WITH(NOLOCK)  
 WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@fromDate,103)),  
 CONVERT(DATETIME,@fromDate,103))  
 SET @maxDate = ISNULL((SELECT MAX(AUDITDATE) FROM ITAXPAYAUDIT WITH(NOLOCK)  
 WHERE CONVERT(VARCHAR(10),AUDITDATE,103) = CONVERT(VARCHAR(10),@toDate,103)),  
 CONVERT(DATETIME,@toDate,103)) 
 SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID,ITAXPAYID   
 INTO #LATESTPAYAUDITDATA   
 FROM ITAXPAYAUDIT  
 GROUP BY ITAXPAYID  
 SELECT CAP.ITAXPAYAUDITID,CAP.ITAXPAYID
 INTO #CURRLATEST
 FROM ITAXPAYAUDIT ITP WITH(NOLOCK)
 INNER JOIN #LATESTPAYAUDITDATA CAP ON CAP.ITAXPAYAUDITID = ITP.ITAXPAYAUDITID 
 WHERE [STATUS] IN (7,10) AND ISDELETED = 0 
 AND AUDITDATE >= @minDate AND AUDITDATE <= @maxDate
 GROUP BY CAP.ITAXPAYAUDITID,CAP.ITAXPAYID
 SELECT LPA.*,ITA.AUDITDATE INTO #ITAXPAYAUDIT   
 FROM #CURRLATEST LPA  
 INNER JOIN ITAXPAYAUDIT ITA  
 ON ITA.ITAXPAYAUDITID = LPA.ITAXPAYAUDITID  
 UPDATE ITAXPAYAUDIT  
 SET [STATUS] = 8,AUDITDATE=GETDATE()  
 FROM #ITAXPAYAUDIT IT1  
 INNER JOIN ITAXPAYAUDIT IT2  
 ON IT2.ITAXPAYAUDITID = IT1.ITAXPAYAUDITID 
 SELECT CIT.*,ITA.AUDITDATE  
 INTO #CUSTOMERITAXPAYMENT  
 FROM CUSTOMERITAXPAYMENT CIT WITH(NOLOCK)  
 INNER JOIN #ITAXPAYAUDIT ITA  
 ON ITA.ITAXPAYID = CIT.ITAXPAYID  
 SELECT '' AS MAJORHEAD,CI.ASSESSECODE,(CI.COMCODE + CI.DIVCODE + CI.RANGECODE)LOCATIONCODE,CIT.ACCCODE1,CIT.ACCCODE2,CIT.ACCCODE3,CIT.ACCCODE4,CIT.ACCCODE5,CIT.ACCCODE6,  
 CIT.AMTCODE1,CIT.AMTCODE2,CIT.AMTCODE3,CIT.AMTCODE4,CIT.AMTCODE5,CIT.AMTCODE6,CI.NAME,CI.ADDRESS1,CI.ADDRESS2,CI.ADDRESS3,CI.CITY,  
 CI.PINCODE,SM.STATENAME,CIT.ITAXPAYID,CIT.PAYMENTTYPE  
 INTO #FINAL  
 FROM CUSTOMERITAX CI WITH(NOLOCK)  
 INNER JOIN #CUSTOMERITAXPAYMENT CIT WITH(NOLOCK)  
 ON CIT.ITAXID = CI.ITAXID  
 INNER JOIN STATEMASTER SM WITH(NOLOCK)  
 ON SM.STATEID=CI.STATEID
 SELECT * FROM #FINAL  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GETITAXTRANSACTIONID')
DROP PROCEDURE USP_CUS_GETITAXTRANSACTIONID
GO
CREATE PROCEDURE USP_CUS_GETITAXTRANSACTIONID
    @ITAXPAYID INT,
    @FINACLETRANSID VARCHAR(20),
    @TRANSDATE SMALLDATETIME
AS
    BEGIN
	   SELECT ITAXPAYID
	   FROM CUSTOMERITAXPAYMENT WITH(NOLOCK)
	   WHERE TRANSDATE = @TRANSDATE
		  AND UPPER(FINACLETRANSID) = UPPER(@FINACLETRANSID)
		  AND ITAXPAYID <> @ITAXPAYID
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetNumberOfPayments')
DROP PROCEDURE USP_CUS_GetNumberOfPayments
GO
CREATE PROCEDURE [USP_CUS_GetNumberOfPayments]
	@BranchID INT,
	@isChecker BIT,
	@NAME VARCHAR(75),
	@customerID VARCHAR(9),
	@PAN VARCHAR(10),
	@TAN VARCHAR(10),
	@challanType INT,
	@incomeTaxFrom NUMERIC(13,2),
	@incomeTaxTo NUMERIC(13,2),
	@interestFrom NUMERIC(13,2),
	@interestTo NUMERIC(13,2),
	@transdateFrom SMALLDATETIME = NULL,                                  
	@transdateTo SMALLDATETIME = NULL, 
	@USERID INT
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX)
	CREATE TABLE #TEMP(NAME VARCHAR(75),PAN VARCHAR(10),[TAN] VARCHAR(10),
	DTAXPAYID INT,CHALLANTYPE INT,TAXAPPLICABLE INT,
	PAYMENTTYPE INT,DTAXID INT,NATOFPAY INT,
	INCOMETAX NUMERIC(13,2),SURCHARGE NUMERIC(13,2),EDUCESS NUMERIC(13,2),
	INTEREST NUMERIC(13,2),PENALTY NUMERIC(13,2),OTHERS NUMERIC(13,2),
	LATEFEE NUMERIC(13,2),CHAREFNO VARCHAR(25),BANKREFNO VARCHAR(25),
	REFERENCEDOC VARBINARY(MAX),CONTENTTYPE INT,[FILENAME] VARCHAR(260),
	FINACLETRANSID VARCHAR(10), TRANSDATE SMALLDATETIME,
	DTAXPAYAUDITID INT,BRANCHID INT,[STATUS] INT,
	AUDITDATE DATETIME,ISDELETED BIT,USERNAME VARCHAR(75),REMARKS VARCHAR(200))
	SET @QUERY = 'SELECT 
	CDT.NAME,CDT.PAN,CDT.[TAN],
	CDP.DTAXPAYID,CDP.CHALLANTYPE,CDP.TAXAPPLICABLE,
	CDP.PAYMENTTYPE,CDP.DTAXID,CDP.NATOFPAY,
	CDP.INCOMETAX,CDP.SURCHARGE,CDP.EDUCESS,
	CDP.INTEREST,CDP.PENALTY,CDP.OTHERS,
	CDP.LATEFEE,ISNULL(CDP.CHAREFNO,'''') CHAREFNO,ISNULL(CDP.BANKREFNO,'''')BANKREFNO,
	CDP.REFERENCEDOC,ISNULL(CDP.CONTENTTYPE,'''') CONTENTTYPE,ISNULL(CDP.[FILENAME],'''') [FILENAME],
	ISNULL(CDP.FINACLETRANSID,'''') FINACLETRANSID,CDP.TRANSDATE,
	DTA.DTAXPAYAUDITID,DTA.BRANCHID,
	DTA.[STATUS],DTA.AUDITDATE,DTA.ISDELETED,
	DTA.USERNAME,DTA.REMARKS
	FROM DTAXPAYAUDIT DTA WITH(NOLOCK)
	INNER JOIN CUSTOMERDTAXPAYMENT CDP WITH(NOLOCK)
	ON CDP.DTAXPAYID = DTA.DTAXPAYID
	INNER JOIN CUSTOMERDTAX CDT WITH(NOLOCK)
	ON CDT.DTAXID = CDP.DTAXID
	WHERE DTA.ISDELETED = 0'
	IF (@USERID <> 1)
	BEGIN
		SET @QUERY = @QUERY + ' AND DTA.BRANCHID =' + CAST(@BRANCHID AS VARCHAR)
		IF (@ISCHECKER = 1)
			BEGIN
				SET @QUERY = @QUERY + ' AND DTA.[STATUS] = 1' + ' AND DTA.BRANCHID =' + CAST(@BRANCHID AS VARCHAR)
			END
	END
	ELSE
	BEGIN
		SET @QUERY = @QUERY + ' AND DTA.[STATUS] IN (7,10)'
	END
	IF(@ISCHECKER = 1)
	BEGIN
		SET @QUERY = @QUERY + ' AND DTA.[STATUS] = 1' + ' AND DTA.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
	END
	IF(@NAME < >'')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.NAME LIKE ''%'+ @NAME +'%'''
	END
	IF(@customerID < > '')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.CUSTOMERID LIKE ''%'+ @customerID +'%'''
	END
	IF(@PAN < > '')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.PAN LIKE ''%'+ @PAN +'%'''
	END
	IF(@TAN < > '')
	BEGIN
		SET @QUERY = @QUERY + ' AND CDT.[TAN] LIKE ''%'+ @TAN +'%'''
	END
	IF(@challanType < > -1)
	BEGIN
		SET @QUERY = @QUERY + ' AND CDP.CHALLANTYPE = ' + CAST(@challanType AS VARCHAR)
	END
	IF(@incomeTaxFrom < > 0)
	BEGIN
		SET @QUERY = @QUERY + ' AND CDP.INCOMETAX BETWEEN ' + CAST(@incomeTaxFrom AS VARCHAR) +' AND ' + CAST(@incomeTaxTo AS VARCHAR)
	END
	IF(@interestFrom < > 0)
	BEGIN
		SET @QUERY = @QUERY + ' AND CDP.INTEREST BETWEEN ' + CAST(@interestFrom AS VARCHAR) +' AND ' + CAST(@interestTo AS VARCHAR)
	END
	IF(@transdateFrom IS NOT NULL AND @transdateTo IS NOT NULL)                                  
	BEGIN                   
		SET @QUERY = @QUERY + ' AND CDP.TRANSDATE BETWEEN ''' + CAST(@transdateFrom AS VARCHAR) + ''' AND ''' + CAST(@transdateTo AS VARCHAR) + '''';                                  
	END   
	INSERT INTO #TEMP 
	EXEC sp_executesql @QUERY
	SELECT MAX(DTAXPAYAUDITID) DTAXPAYAUDITID,DTAXPAYID 
	INTO #TEMP1
	FROM DTAXPAYAUDIT WITH(NOLOCK)
	GROUP BY DTAXPAYID
	SELECT ROW_NUMBER() OVER
	(
		ORDER BY (SELECT 0)
	) AS ROWNUMBER,
	T.*
	INTO #RESULT
	FROM #TEMP T
	INNER JOIN #TEMP1 T1
	ON T1.DTAXPAYAUDITID = T.DTAXPAYAUDITID AND T1.DTAXPAYID = T.DTAXPAYID
	DROP TABLE #TEMP
	DROP TABLE #TEMP1
	SELECT COUNT(*) NOOFITEMS FROM #RESULT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_GetPaymentCodes')
DROP PROCEDURE USP_CUS_GetPaymentCodes
GO
CREATE PROCEDURE [USP_CUS_GetPaymentCodes]
	@PREFIXTEXT NVARCHAR(MAX),  
	@RECORDCOUNT INT,  
	@TYPE INT      
AS      
	BEGIN  
		DECLARE @QUERY NVARCHAR(MAX);      
		CREATE TABLE #TEMPPAYCODES(PAYMENTTAX VARCHAR(MAX), PAYMENTINTEREST VARCHAR(MAX),
			PAYMENTPENALTY VARCHAR(MAX), PAYCODEID INT)  
		SET @QUERY = 'SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + '   
			(PAYMENTCODE.TAXCODE + ''-'' + PAYMENTCODE.PAYMENTNAME + ''-'' + ''Tax'') AS PAYMENTTAX,
			(PAYMENTCODE.IPCODE + ''-'' + PAYMENTCODE.PAYMENTNAME + ''-'' + ''Interest'') AS PAYMENTINTEREST,
			(PAYMENTCODE.PCODE + ''-'' + PAYMENTCODE.PAYMENTNAME + ''-'' + ''Penalty'') AS PAYMENTPENALTY,
			PAYMENTCODE.PAYCODEID  
			FROM  PAYMENTCODE WITH(NOLOCK)  
			WHERE PAYMENTTYPE = ' + CAST(@TYPE AS VARCHAR)+' AND PAYMENTCODE.SORTORDER IS NOT NULL 
				AND (PAYMENTCODE.PAYMENTNAME LIKE ''%'+ @PREFIXTEXT 
					+ '%'' OR PAYMENTCODE.TAXCODE LIKE ''%'+ @PREFIXTEXT 
					+ '%'' OR PAYMENTCODE.IPCODE LIKE ''%'+ @PREFIXTEXT 
					+ '%'' OR PAYMENTCODE.PCODE LIKE ''%'+ @PREFIXTEXT 
					+ '%'') ORDER BY PAYMENTCODE.SORTORDER ';  
		INSERT INTO #TEMPPAYCODES  
        EXEC SP_EXECUTESQL @QUERY;
		SELECT PAYMENTTAX PAYMENTTAXIP, PAYCODEID FROM #TEMPPAYCODES WHERE PAYMENTTAX IS NOT NULL
		UNION ALL
		SELECT PAYMENTINTEREST PAYMENTTAXIP, PAYCODEID FROM #TEMPPAYCODES WHERE PAYMENTINTEREST IS NOT NULL
		UNION ALL
		SELECT PAYMENTPENALTY PAYMENTTAXIP, PAYCODEID FROM #TEMPPAYCODES WHERE PAYMENTPENALTY IS NOT NULL
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_IndirectTaxAudit')
DROP PROCEDURE USP_CUS_IndirectTaxAudit
GO
CREATE PROCEDURE [USP_CUS_IndirectTaxAudit]
	@pageIndex INT,
	@pageSize INT,
	@isMaster BIT,
	@auditID INT,
	@Name VARCHAR(75) = '',
	@customerID VARCHAR(9) = '',
	@paymentType INT = -1
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX);
	/* Fetching Master Data for search and show all */
	IF(@isMaster = 1 AND @auditID = 0)
	BEGIN
		CREATE TABLE #TEMP(ROWNUMBER INT,ITAXAUDITID INT,ITAXID INT,AUDITDATE DATETIME,[STATUS] INT,
		REMARKS VARCHAR(200),USERNAME VARCHAR(75),ISDELETED BIT,BRANCHID INT,ASSESSECODE VARCHAR(15),
		COMNAME VARCHAR(75),COMCODE VARCHAR(4),DIVCODE VARCHAR(4),RANGECODE VARCHAR(4),NAME VARCHAR(75),
		CITY VARCHAR(25),PINCODE INT,STATEID INT,CUSTOMERID VARCHAR(9),ADDRESS1 VARCHAR(25),ADDRESS2 VARCHAR(25),ADDRESS3 VARCHAR(25),ADDRESS4 VARCHAR(25),
		PHONENO VARCHAR(25),EMAILID VARCHAR(75),BRANCH VARCHAR(200))
		SET @QUERY ='
		SELECT  ROW_NUMBER() OVER
		(
			ORDER BY (SELECT 0)
		) AS ROWNUMBER,ITAXAUDITID,CIT.ITAXID,AUDITDATE,
		[STATUS],REMARKS,USERNAME,
		CITA.ISDELETED,CIT.BRANCHID,ASSESSECODE,COMNAME,COMCODE,DIVCODE,RANGECODE,NAME,
		CITY,PINCODE,STATEID,CIT.CUSTOMERID,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,PHONENO,EMAILID,'''' BRANCH
		FROM CUSTOMERITAX CIT WITH(NOLOCK)
		INNER JOIN CUSTOMERITAXAUDIT CITA WITH(NOLOCK)
		ON CITA.ITAXID = CIT.ITAXID'
		IF(@Name <> '')
		BEGIN
			SET @QUERY = @QUERY + ' WHERE CIT.NAME LIKE ''' + @Name +'%'''
		END
		IF(@customerID <> '')
		BEGIN
			SET @QUERY = @QUERY + ' AND CIT.CUSTOMERID LIKE ''' + @customerID + '%'''
		END
		SET @QUERY = @QUERY + ' ORDER BY CIT.ITAXID,CITA.ITAXAUDITID'
		INSERT INTO #TEMP
		EXEC SP_EXECUTESQL @QUERY
		SELECT MIN(ITAXAUDITID)ITAXAUDITID,ITAXID 
		INTO #ITMTEMP
		FROM #TEMP
		GROUP BY ITAXID
		SELECT T.BRANCHID,IT.ITAXAUDITID,IT.ITAXID 
		INTO #ITMBRANCH
		FROM #TEMP T
		INNER JOIN #ITMTEMP IT
		ON IT.ITAXAUDITID = T.ITAXAUDITID
		SELECT CB.BRANCHCODE + '-' + CB.BRANCHNAME BRANCH,ITMB.ITAXID 
		INTO #BRANCHTEMP
		FROM #ITMBRANCH ITMB
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = ITMB.BRANCHID
		UPDATE #TEMP
		SET BRANCH = BT.BRANCH
		FROM #BRANCHTEMP BT
		INNER JOIN #TEMP T
		ON T.ITAXID = BT.ITAXID
		DROP TABLE #BRANCHTEMP
		DROP TABLE #ITMTEMP
		SELECT * FROM #TEMP
		WHERE ROWNUMBER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
	/* Fetching master data for showing audit details of a particular customer */
	ELSE IF(@isMaster = 1 AND @auditID > 0)
	BEGIN 
		SELECT  ROW_NUMBER() OVER
		(
			ORDER BY (SELECT 0)
		) AS ROWNUMBER,ITAXAUDITID,CIT.ITAXID,AUDITDATE,
		[STATUS],REMARKS,USERNAME,
		CITA.ISDELETED,CIT.BRANCHID,ASSESSECODE,COMNAME,COMCODE,DIVCODE,RANGECODE,NAME,
		CITY,PINCODE,STATEID,CIT.CUSTOMERID,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,PHONENO,EMAILID
		INTO #TEMP1
		FROM CUSTOMERITAX CIT WITH(NOLOCK)
		INNER JOIN CUSTOMERITAXAUDIT CITA WITH(NOLOCK)
		ON CITA.ITAXID = CIT.ITAXID
		WHERE CIT.ITAXID = @auditID
		ORDER BY CIT.ITAXID,CITA.ITAXAUDITID
		SELECT T1.*,CB.BRANCHCODE + '-' + CB.BRANCHNAME BRANCH FROM #TEMP1 T1
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = T1.BRANCHID
		WHERE ROWNUMBER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
	/* Fetching customer payment data for show all and search */
	ELSE IF(@isMaster = 0 AND @auditID = 0)
	BEGIN
		CREATE TABLE #TEMP2(ROWNUMBER INT,NAME VARCHAR(75),CUSTOMERID VARCHAR(9),ITAXPAYID INT,  
		BRANCHNAME VARCHAR(500),PAYMENTTYPE INT,ITAXID INT,  
		ACCCODE1 VARCHAR(4),ACCCODE2 VARCHAR(4),ACCCODE3 VARCHAR(4),ACCCODE4 VARCHAR(6),ACCCODE5 VARCHAR(4),ACCCODE6 VARCHAR(4),  
		AMTCODE1 NUMERIC(13,2),AMTCODE2 NUMERIC(13,2),AMTCODE3 NUMERIC(13,2),AMTCODE4 NUMERIC(13,2),AMTCODE5 NUMERIC(13,2),AMTCODE6 NUMERIC(13,2),  
		CHAREFNO VARCHAR(25),BANKREFNO VARCHAR(25),  
		CONTENTTYPE INT,FINACLETRANSID VARCHAR(10),TRANSDATE DATETIME,
		ITAXPAYAUDITID INT, BRANCHID INT, [STATUS] INT, AUDITDATE DATETIME, ISDELETED BIT, USERNAME VARCHAR(75),REMARKS VARCHAR(200)) 
		SET @QUERY ='
		SELECT  ROW_NUMBER() OVER
		(
		ORDER BY (SELECT 0)
		) AS ROWNUMBER,CI.NAME,CI.CUSTOMERID,CIP.ITAXPAYID,CB.BRANCHNAME,CIP.PAYMENTTYPE,CIP.ITAXID,CIP.ACCCODE1,CIP.ACCCODE2,CIP.ACCCODE3,CIP.ACCCODE4,CIP.ACCCODE5,CIP.ACCCODE6,  
		CIP.AMTCODE1,CIP.AMTCODE2,CIP.AMTCODE3,CIP.AMTCODE4,CIP.AMTCODE5,CIP.AMTCODE6,
		CIP.CHAREFNO,CIP.BANKREFNO,CIP.CONTENTTYPE,CIP.FINACLETRANSID,CIP.TRANSDATE,
		ITPA.ITAXPAYAUDITID,ITPA.BRANCHID,ITPA.STATUS,ITPA.AUDITDATE,ITPA.ISDELETED,ITPA.USERNAME,ITPA.REMARKS
		FROM CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)  
		INNER JOIN ITAXPAYAUDIT ITPA WITH(NOLOCK) ON CIP.ITAXPAYID = ITPA.ITAXPAYID  
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CIP.BRANCHID = CB.BRANCHID  
		INNER JOIN CUSTOMERITAX CI WITH(NOLOCK) ON CI.ITAXID = CIP.ITAXID'
		IF(@Name <> '')
		BEGIN
			SET @QUERY = @QUERY + ' WHERE CI.NAME LIKE ''' + @Name +'%'''
		END
		IF(@customerID <> '')
		BEGIN
			SET @QUERY = @QUERY + ' AND CI.CUSTOMERID LIKE ''' + @customerID + '%'''
		END
		IF(@paymentType <> -1)
		BEGIN
			SET @QUERY = @QUERY + ' AND CIP.PAYMENTTYPE = ' + CAST(@paymentType AS VARCHAR)
		END
		SET @QUERY = @QUERY + ' ORDER BY CIP.ITAXPAYID'
		INSERT INTO #TEMP2
		EXEC SP_EXECUTESQL @QUERY
		PRINT @QUERY
		SELECT T2.*,CB.BRANCHCODE FROM #TEMP2 T2
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = T2.BRANCHID
		WHERE ROWNUMBER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
	/* Fetching payment audit detail */
	ELSE IF(@isMaster = 0 AND @auditID > 0)
	BEGIN
		SELECT  ROW_NUMBER() OVER
		(
		ORDER BY (SELECT 0)
		) AS ROWNUMBER,CI.NAME,CI.CUSTOMERID,CIP.ITAXPAYID,CB.BRANCHNAME,CIP.PAYMENTTYPE,CIP.ITAXID,CIP.ACCCODE1,CIP.ACCCODE2,CIP.ACCCODE3,CIP.ACCCODE4,CIP.ACCCODE5,CIP.ACCCODE6,  
		CIP.AMTCODE1,CIP.AMTCODE2,CIP.AMTCODE3,CIP.AMTCODE4,CIP.AMTCODE5,CIP.AMTCODE6,
		CIP.CHAREFNO,CIP.BANKREFNO,CIP.CONTENTTYPE,CIP.FINACLETRANSID,CIP.TRANSDATE,
		ITPA.ITAXPAYAUDITID,ITPA.BRANCHID,ITPA.STATUS,ITPA.AUDITDATE,ITPA.ISDELETED,ITPA.USERNAME,ITPA.REMARKS
		INTO #TEMP3
		FROM CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)  
		INNER JOIN ITAXPAYAUDIT ITPA WITH(NOLOCK) ON CIP.ITAXPAYID = ITPA.ITAXPAYID  
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CIP.BRANCHID = CB.BRANCHID  
		INNER JOIN CUSTOMERITAX CI WITH(NOLOCK) ON CI.ITAXID = CIP.ITAXID
		WHERE ITPA.ITAXPAYID=@auditID
		SELECT T3.*,CB.BRANCHCODE FROM #TEMP3 T3
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
		ON CB.BRANCHID = T3.BRANCHID
		WHERE ROWNUMBER BETWEEN(@PageIndex -1) * @PageSize + 1 AND(((@PageIndex -1) * @PageSize + 1) + @PageSize) - 1
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_IndirectTaxAuditCount')
DROP PROCEDURE USP_CUS_IndirectTaxAuditCount
GO
CREATE PROCEDURE [USP_CUS_IndirectTaxAuditCount]
	@isMaster BIT,
	@auditID INT,
	@customerID VARCHAR(9) ='',
	@Name VARCHAR(75) ='',
	@paymentType INT = -1
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX)
	IF(@isMaster = 1 AND @auditID = 0)
	BEGIN
		CREATE TABLE #TEMP(ROWNUMBER INT,ITAXAUDITID INT,ITAXID INT,AUDITDATE DATETIME,[STATUS] INT,
		REMARKS VARCHAR(200),USERNAME VARCHAR(75),ISDELETED BIT,BRANCHID INT,ASSESSECODE VARCHAR(15),
		COMNAME VARCHAR(75),COMCODE VARCHAR(4),DIVCODE VARCHAR(4),RANGECODE VARCHAR(4),NAME VARCHAR(75),
		CITY VARCHAR(25),PINCODE INT,STATEID INT,CUSTOMERID VARCHAR(9),ADDRESS1 VARCHAR(25),ADDRESS2 VARCHAR(25),ADDRESS3 VARCHAR(25),ADDRESS4 VARCHAR(25),
		PHONENO VARCHAR(25),EMAILID VARCHAR(75),BRANCH VARCHAR(200))
		SET @QUERY ='
		SELECT  ROW_NUMBER() OVER
		(
			ORDER BY (SELECT 0)
		) AS ROWNUMBER,ITAXAUDITID,CIT.ITAXID,AUDITDATE,
		[STATUS],REMARKS,USERNAME,
		CITA.ISDELETED,CIT.BRANCHID,ASSESSECODE,COMNAME,COMCODE,DIVCODE,RANGECODE,NAME,
		CITY,PINCODE,STATEID,CIT.CUSTOMERID,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,PHONENO,EMAILID,'''' BRANCH
		FROM CUSTOMERITAX CIT WITH(NOLOCK)
		INNER JOIN CUSTOMERITAXAUDIT CITA WITH(NOLOCK)
		ON CITA.ITAXID = CIT.ITAXID'
		IF(@Name <> '')
		BEGIN
			SET @QUERY = @QUERY + ' WHERE CIT.NAME LIKE ''' + @Name +'%'''
		END
		IF(@customerID <> '')
		BEGIN
			SET @QUERY = @QUERY + ' AND CIT.CUSTOMERID LIKE ''' + @customerID + '%'''
		END
		SET @QUERY = @QUERY + ' ORDER BY CIT.ITAXID,CITA.ITAXAUDITID'
		INSERT INTO #TEMP
		EXEC SP_EXECUTESQL @QUERY
		SELECT COUNT(*) NOOFITEMS FROM #TEMP
	END
	ELSE IF(@isMaster = 1 AND @auditID > 0)
	BEGIN 
		SELECT  ROW_NUMBER() OVER
		(
			ORDER BY (SELECT 0)
		) AS ROWNUMBER,ITAXAUDITID,CIT.ITAXID,AUDITDATE,
		[STATUS],REMARKS,USERNAME,
		CITA.ISDELETED,CIT.BRANCHID,ASSESSECODE,COMNAME,COMCODE,DIVCODE,RANGECODE,NAME,
		CITY,PINCODE,STATEID,CIT.CUSTOMERID,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,PHONENO,EMAILID
		INTO #TEMP1
		FROM CUSTOMERITAX CIT WITH(NOLOCK)
		INNER JOIN CUSTOMERITAXAUDIT CITA WITH(NOLOCK)
		ON CITA.ITAXID = CIT.ITAXID
		WHERE CIT.ITAXID = @auditID
		ORDER BY CIT.ITAXID,CITA.ITAXAUDITID
		SELECT COUNT(*)NOOFITEMS FROM #TEMP1
	END
	ELSE IF(@isMaster = 0 AND @auditID = 0)
	BEGIN
		CREATE TABLE #TEMP2(ROWNUMBER INT,NAME VARCHAR(75),CUSTOMERID VARCHAR(9),ITAXPAYID INT,  
		BRANCHNAME VARCHAR(500),PAYMENTTYPE INT,ITAXID INT,  
		ACCCODE1 VARCHAR(4),ACCCODE2 VARCHAR(4),ACCCODE3 VARCHAR(4),ACCCODE4 VARCHAR(6),ACCCODE5 VARCHAR(4),ACCCODE6 VARCHAR(4),  
		AMTCODE1 NUMERIC(13,2),AMTCODE2 NUMERIC(13,2),AMTCODE3 NUMERIC(13,2),AMTCODE4 NUMERIC(13,2),AMTCODE5 NUMERIC(13,2),AMTCODE6 NUMERIC(13,2),  
		CHAREFNO VARCHAR(25),BANKREFNO VARCHAR(25),  
		CONTENTTYPE INT,FINACLETRANSID VARCHAR(10),TRANSDATE DATETIME,
		ITAXPAYAUDITID INT, BRANCHID INT, [STATUS] INT, AUDITDATE DATETIME, ISDELETED BIT, USERNAME VARCHAR(75),REMARKS VARCHAR(200)) 
		SET @QUERY ='
		SELECT  ROW_NUMBER() OVER
		(
		ORDER BY (SELECT 0)
		) AS ROWNUMBER,CI.NAME,CI.CUSTOMERID,CIP.ITAXPAYID,CB.BRANCHNAME,CIP.PAYMENTTYPE,CIP.ITAXID,CIP.ACCCODE1,CIP.ACCCODE2,CIP.ACCCODE3,CIP.ACCCODE4,CIP.ACCCODE5,CIP.ACCCODE6,  
		CIP.AMTCODE1,CIP.AMTCODE2,CIP.AMTCODE3,CIP.AMTCODE4,CIP.AMTCODE5,CIP.AMTCODE6,
		CIP.CHAREFNO,CIP.BANKREFNO,CIP.CONTENTTYPE,CIP.FINACLETRANSID,CIP.TRANSDATE,
		ITPA.ITAXPAYAUDITID,ITPA.BRANCHID,ITPA.STATUS,ITPA.AUDITDATE,ITPA.ISDELETED,ITPA.USERNAME,ITPA.REMARKS
		FROM CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)  
		INNER JOIN ITAXPAYAUDIT ITPA WITH(NOLOCK) ON CIP.ITAXPAYID = ITPA.ITAXPAYID  
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CIP.BRANCHID = CB.BRANCHID  
		INNER JOIN CUSTOMERITAX CI WITH(NOLOCK) ON CI.ITAXID = CIP.ITAXID'
		IF(@Name <> '')
		BEGIN
			SET @QUERY = @QUERY + ' WHERE CI.NAME LIKE ''' + @Name +'%'''
		END
		IF(@customerID <> '')
		BEGIN
			SET @QUERY = @QUERY + ' AND CI.CUSTOMERID LIKE ''' + @customerID + '%'''
		END
		IF(@paymentType <> -1)
		BEGIN
			SET @QUERY = @QUERY + ' AND CIP.PAYMENTTYPE = ' + CAST(@paymentType AS VARCHAR)
		END
		SET @QUERY = @QUERY + ' ORDER BY CIP.ITAXPAYID'
		INSERT INTO #TEMP2
		EXEC SP_EXECUTESQL @QUERY
		SELECT COUNT(*) NOOFITEMS FROM #TEMP2
	END
	ELSE IF(@isMaster = 0 AND @auditID > 0)
	BEGIN
		SELECT  ROW_NUMBER() OVER
			(
			ORDER BY (SELECT 0)
			) AS ROWNUMBER,CI.NAME,CI.CUSTOMERID,CIP.ITAXPAYID,CB.BRANCHNAME,CIP.PAYMENTTYPE,CIP.ITAXID,CIP.ACCCODE1,CIP.ACCCODE2,CIP.ACCCODE3,CIP.ACCCODE4,CIP.ACCCODE5,CIP.ACCCODE6,  
			CIP.AMTCODE1,CIP.AMTCODE2,CIP.AMTCODE3,CIP.AMTCODE4,CIP.AMTCODE5,CIP.AMTCODE6,
			CIP.CHAREFNO,CIP.BANKREFNO,CIP.CONTENTTYPE,CIP.FINACLETRANSID,CIP.TRANSDATE,
			ITPA.ITAXPAYAUDITID,ITPA.BRANCHID,ITPA.STATUS,ITPA.AUDITDATE,ITPA.ISDELETED,ITPA.USERNAME,ITPA.REMARKS
			INTO #TEMP3
			FROM CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)  
			INNER JOIN ITAXPAYAUDIT ITPA WITH(NOLOCK) ON CIP.ITAXPAYID = ITPA.ITAXPAYID  
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CIP.BRANCHID = CB.BRANCHID  
			INNER JOIN CUSTOMERITAX CI WITH(NOLOCK) ON CI.ITAXID = CIP.ITAXID
			WHERE ITPA.ITAXPAYID=@auditID
		SELECT COUNT(*) NOOFITEMS FROM #TEMP3
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_ITaxCheckApproval')
DROP PROCEDURE USP_CUS_ITaxCheckApproval
GO
CREATE PROCEDURE USP_CUS_ITaxCheckApproval
	@iTaxAuditID INT
AS
BEGIN
	DECLARE @ITAXID INT
	 SELECT MAX(ITAXAUDITID) ITAXAUDITID,ITAXID
	 INTO #CURRAUDITPOS 
	 FROM CUSTOMERITAXAUDIT WITH(NOLOCK)
	 WHERE ISDELETED = 0
	 GROUP BY ITAXID
	 SELECT CAP.ITAXAUDITID,CAP.ITAXID,STATUS
	 INTO #CUSTOMERITAXAUDIT
	 FROM CUSTOMERITAXAUDIT CDA WITH(NOLOCK)
	 INNER JOIN #CURRAUDITPOS CAP ON CDA.ITAXAUDITID = CAP.ITAXAUDITID
	 WHERE ISDELETED = 0
	SET @ITAXID = (SELECT ITAXID FROM #CUSTOMERITAXAUDIT WITH(NOLOCK) WHERE ITAXAUDITID = @ITAXAUDITID)
	IF(EXISTS(SELECT * FROM #CUSTOMERITAXAUDIT WHERE ITAXID = @ITAXID AND [STATUS] = 13))
	BEGIN
		SELECT 1 RETVAL
	END
	ELSE
	BEGIN
		SELECT 0 RETVAL
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_ITaxPaymentPaged')
DROP PROCEDURE USP_CUS_ITaxPaymentPaged
GO
CREATE PROCEDURE USP_CUS_ITaxPaymentPaged
 @STARTROW INT,        
 @PAGESIZE INT,  
 @BRANCHID INT,  
 @ISCHECKER BIT=0,  
 @NAME VARCHAR(75),  
 @CUSTOMERID VARCHAR(6),  
 @PAYMENTTYPE INT,  
 @AMTCODE1 NUMERIC(13,2),  
 @AMTCODE2 NUMERIC(13,2),  
 @CHAREFNO VARCHAR(25),  
 @BANKREFNO VARCHAR(25),
 @USERID INT,
 @TRANSDATEFROM DATETIME = NULL,                                  
 @TRANSDATETO DATETIME = NULL,
 @FINACLETRANSID VARCHAR(10),
 @ITAXTOTALFROM NUMERIC(13,2),  
 @ITAXTOTALTO NUMERIC(13,2)       
AS        
 BEGIN        
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED         
	/* The number of rows affected by the different commands does not interest the application, so turn NOCOUNT ON*/        
	--SET NOCOUNT ON        
	/* Determine the first record and last record */        
	DECLARE @FIRSTREC INT, @LASTREC INT, @SQLQUERY NVARCHAR(MAX);        
	SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE        
	SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);   
	CREATE TABLE #TEMPITAXPAY(NAME VARCHAR(75),CUSTOMERID VARCHAR(9),ITAXPAYID INT,  
				BRANCHNAME VARCHAR(500),PAYMENTTYPE INT,ITAXID INT,  
				ACCCODE1 VARCHAR(4),ACCCODE2 VARCHAR(4),ACCCODE3 VARCHAR(4),
				ACCCODE4 VARCHAR(6),ACCCODE5 VARCHAR(4),ACCCODE6 VARCHAR(4),  
				AMTCODE1 NUMERIC(13,2),AMTCODE2 NUMERIC(13,2),AMTCODE3 NUMERIC(13,2),
				AMTCODE4 NUMERIC(13,2),AMTCODE5 NUMERIC(13,2),AMTCODE6 NUMERIC(13,2),  
				ITAXPAYAUDITID INT,REMARKS VARCHAR(200),ISDELETED BIT,USERNAME VARCHAR(75),[STATUS] INT,  
				AUDITDATE DATETIME,CHAREFNO VARCHAR(25),BANKREFNO VARCHAR(25),REFERENCEDOC VARBINARY(MAX),  
				CONTENTTYPE INT,[FILENAME] VARCHAR(260),FINACLETRANSID VARCHAR(10),TRANSDATE DATETIME)  
	SET @SQLQUERY = 'SELECT CI.NAME,CI.CUSTOMERID,CIP.ITAXPAYID,CB.BRANCHNAME,CIP.PAYMENTTYPE,CIP.ITAXID,
							CIP.ACCCODE1,CIP.ACCCODE2,CIP.ACCCODE3,CIP.ACCCODE4,CIP.ACCCODE5,CIP.ACCCODE6,  
							CIP.AMTCODE1,CIP.AMTCODE2,CIP.AMTCODE3,CIP.AMTCODE4,CIP.AMTCODE5,CIP.AMTCODE6,
							ITPA.ITAXPAYAUDITID,ITPA.REMARKS,ITPA.ISDELETED,ITPA.USERNAME,ITPA.STATUS,ITPA.AUDITDATE,  
							ISNULL(CIP.CHAREFNO,'''') CHAREFNO,ISNULL(CIP.BANKREFNO,'''')BANKREFNO,  
							CIP.REFERENCEDOC,ISNULL(CIP.CONTENTTYPE,'''') CONTENTTYPE,
							ISNULL(CIP.[FILENAME],'''') [FILENAME],ISNULL(CIP.FINACLETRANSID,'''') FINACLETRANSID,CIP.TRANSDATE  
					FROM CUSTOMERITAXPAYMENT CIP WITH(NOLOCK)  
					INNER JOIN ITAXPAYAUDIT ITPA WITH(NOLOCK) ON CIP.ITAXPAYID = ITPA.ITAXPAYID  
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CIP.BRANCHID = CB.BRANCHID  
					INNER JOIN CUSTOMERITAX CI WITH(NOLOCK) ON CI.ITAXID = CIP.ITAXID  
					WHERE ITPA.ISDELETED=0'
	IF (@USERID <> 1)
		BEGIN
			SET @SQLQUERY = @SQLQUERY + ' AND ITPA.BRANCHID =' + CAST(@BRANCHID AS VARCHAR)
			IF (@ISCHECKER = 1)
				BEGIN
					SET @SQLQUERY = @SQLQUERY + ' AND ITPA.[STATUS] = 1' + ' AND ITPA.BRANCHID =' + CAST(@BRANCHID AS VARCHAR)
				END
		END
	ELSE
		BEGIN
			SET @SQLQUERY = @SQLQUERY + ' AND ITPA.[STATUS] IN (7,10)'
		END
	IF(@ISCHECKER = 1)  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND ITPA.STATUS=1 AND ITPA.BRANCHID = '''+CAST(@BRANCHID AS VARCHAR) +''''  
		END  
	IF(@NAME < >'')  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND CI.NAME LIKE ''%'+ @NAME +'%'''  
		END  
	IF(@CUSTOMERID < > '' OR @CUSTOMERID <> NULL)  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND CI.CUSTOMERID LIKE ''%'+ @CUSTOMERID +'%'''  
		END  
	IF(@PAYMENTTYPE < > -1)  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND CIP.PAYMENTTYPE = '''+ CAST(@PAYMENTTYPE AS VARCHAR(10)) +''''  
		END
	IF(@FINACLETRANSID < > '' OR @FINACLETRANSID <> NULL)  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND CIP.FINACLETRANSID LIKE ''%'+ @CUSTOMERID +'%'''  
		END 
	IF(@ITAXTOTALFROM <> 0 OR @ITAXTOTALTO <> 0)                                    
		BEGIN
			SET @SQLQUERY = @SQLQUERY 
							+ ' AND CIP.AMTCODE1 + CIP.AMTCODE2 
							+ CIP.AMTCODE3 + CIP.AMTCODE4 
							+ CIP.AMTCODE5 + CIP.AMTCODE6 BETWEEN '
							+ CAST(@ITAXTOTALFROM AS VARCHAR(20)) 
							+ ' AND ' 
							+ CAST(@ITAXTOTALTO AS VARCHAR(20))    
		END 
	IF(@AMTCODE1 <> 0 OR @AMTCODE2 <> 0)                                    
		BEGIN                                    
			SET @SQLQUERY = @SQLQUERY 
			    + ' AND CIP.AMTCODE1 BETWEEN ' 
				+ CAST(@AMTCODE1 AS VARCHAR(20)) 
				+ ' AND ' 
				+ CAST(@AMTCODE2 AS VARCHAR(20)) 
				+ ' OR CIP.AMTCODE2 BETWEEN ' 
				+ CAST(@AMTCODE1 AS VARCHAR(20)) 
				+ ' AND ' 
				+ CAST(@AMTCODE2 AS VARCHAR(20)) 
				+ ' OR CIP.AMTCODE3 BETWEEN ' 
				+ CAST(@AMTCODE1 AS VARCHAR(20)) 
				+ ' AND ' 
				+ CAST(@AMTCODE2 AS VARCHAR(20)) 
				+ ' OR CIP.AMTCODE4 BETWEEN ' 
				+ CAST(@AMTCODE1 AS VARCHAR(20)) 
				+ ' AND ' 
				+ CAST(@AMTCODE2 AS VARCHAR(20)) 
				+ ' OR CIP.AMTCODE5 BETWEEN ' 
				+ CAST(@AMTCODE1 AS VARCHAR(20)) 
				+ ' AND ' 
				+ CAST(@AMTCODE2 AS VARCHAR(20)) 
				+ ' OR CIP.AMTCODE6 BETWEEN '   
				+ CAST(@AMTCODE1 AS VARCHAR(20)) 
				+ ' AND ' 
				+ CAST(@AMTCODE2 AS VARCHAR(20));                              
		END   
	IF(@CHAREFNO < > '')  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND CIP.CHAREFNO LIKE ''%'+ @CHAREFNO +'%'''  
		END  
	IF(@BANKREFNO < > '')  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND CIP.BANKREFNO LIKE ''%'+ @BANKREFNO +'%'''  
		END
	IF(@TRANSDATEFROM IS NOT NULL AND @TRANSDATETO IS NOT NULL)                                  
		BEGIN                   
			SET @SQLQUERY = @SQLQUERY + ' AND CIP.TRANSDATE BETWEEN ''' 
					+ CAST(@TRANSDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TRANSDATETO AS VARCHAR) + '''';                                  
		END    
	INSERT INTO #TEMPITAXPAY  
	EXEC sp_executesql @SQLQUERY  
	SELECT MAX(ITAXPAYAUDITID) ITAXPAYAUDITID,ITAXPAYID  
	INTO #TEMPITAXPAY1  
	FROM ITAXPAYAUDIT WITH(NOLOCK)  
	GROUP BY ITAXPAYID  
	SELECT ROW_NUMBER() OVER  
	(  
	ORDER BY T.ITAXPAYID ASC  
	) AS ROWNUM,  
	T.*  
	INTO #RESULT  
	FROM #TEMPITAXPAY T  
	INNER JOIN #TEMPITAXPAY1 T1  
	ON T.ITAXPAYID = T1.ITAXPAYID AND T.ITAXPAYAUDITID = T1.ITAXPAYAUDITID  
	DROP TABLE #TEMPITAXPAY  
	DROP TABLE #TEMPITAXPAY1  
	SELECT * FROM #RESULT WHERE ROWNUM >  CAST(@FIRSTREC AS VARCHAR) AND ROWNUM < CAST(@LASTREC AS VARCHAR)      
	----/* TURN NOCOUNT BACK OFF */       
	--PRINT @SQLQUERY  
	--SET NOCOUNT OFF         
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SaveAccountingHeads')
DROP PROCEDURE USP_CUS_SaveAccountingHeads
GO
CREATE PROCEDURE [USP_CUS_SaveAccountingHeads]
	@PAYCODEID INT = -1,  
	@PAYMENTTYPE INT,
	@PAYMENTNAME NVARCHAR(255),
	@TAXCODE VARCHAR(4),
	@INTERESTCODE VARCHAR(4),
	@PENALTYCODE VARCHAR(4)
AS
BEGIN 
    IF(@PAYCODEID = -1)  
	BEGIN  
	    DECLARE @SORTORDER INT;
	    SET @SORTORDER = (SELECT ISNULL(MAX(SORTORDER), 0) 
							FROM PAYMENTCODE WITH(NOLOCK) 
							WHERE PAYMENTTYPE = @PAYMENTTYPE)
		IF(@PAYMENTTYPE = 1)
		BEGIN
			INSERT INTO PAYMENTCODE(PAYMENTTYPE, PAYMENTNAME, TAXCODE, IPCODE, SORTORDER, PCODE)  
			VALUES (@PAYMENTTYPE, @PAYMENTNAME, @TAXCODE, @INTERESTCODE, (@SORTORDER + 1), @PENALTYCODE)
		END
		ELSE
		BEGIN
			INSERT INTO PAYMENTCODE(PAYMENTTYPE, PAYMENTNAME, TAXCODE, IPCODE, SORTORDER, PCODE)  
			VALUES (@PAYMENTTYPE, @PAYMENTNAME, @TAXCODE, NULL, (@SORTORDER + 1), NULL)
		END		
	    SELECT -1
    END 
    ELSE
    BEGIN
		IF(@PAYMENTTYPE = 1)
		BEGIN
			UPDATE PAYMENTCODE
			SET PAYMENTNAME = @PAYMENTNAME, TAXCODE = @TAXCODE, IPCODE = @INTERESTCODE,
				PCODE = @PENALTYCODE
			WHERE PAYCODEID = @PAYCODEID
		END
		ELSE
		BEGIN
			UPDATE PAYMENTCODE
			SET PAYMENTNAME = @PAYMENTNAME, TAXCODE = @TAXCODE, IPCODE = NULL,
				PCODE = NULL
			WHERE PAYCODEID = @PAYCODEID
		END
		SELECT @PAYCODEID
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SAVEASSIGNBRANCHCUS')
DROP PROCEDURE USP_CUS_SAVEASSIGNBRANCHCUS
GO
CREATE PROCEDURE [USP_CUS_SAVEASSIGNBRANCHCUS]      
	@USERNAME VARCHAR(20),      
	@BRNCHID INT,      
	@ISINSERT CHAR(1)       
AS      
BEGIN 
    DECLARE @USRID INT;          
    SET @USRID=(SELECT USERID FROM USERMASTER WHERE USERNAME=@USERNAME)          
    BEGIN            
	   IF(@ISINSERT=1)            
	   BEGIN            
		  IF(NOT EXISTS(SELECT * FROM ASSIGNBRANCHCUS WHERE BRANCHID=@BRNCHID))            
		  BEGIN            
			 INSERT INTO ASSIGNBRANCHCUS(USERID,BRANCHID) VALUES(@USRID,@BRNCHID);            
		  END     
		  ELSE    
		  BEGIN    
			 UPDATE ASSIGNBRANCHCUS SET USERID=@USRID WHERE BRANCHID=@BRNCHID;    
		  END            
	   END             
	   ELSE            
	   BEGIN            
		  DELETE FROM ASSIGNBRANCHCUS WHERE BRANCHID=@BRNCHID AND USERID=@USRID;            
	   END            
    END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SAVEASSIGNEDBRANCHCUSDETAIL')
DROP PROCEDURE USP_CUS_SAVEASSIGNEDBRANCHCUSDETAIL
GO
CREATE PROCEDURE [USP_CUS_SAVEASSIGNEDBRANCHCUSDETAIL]
    @USERINFO VARCHAR(MAX)      
AS
BEGIN
    DECLARE @ITERATOR INT;      
    DECLARE @TOTALCOUNT INT;      
    DECLARE @USERNAME VARCHAR(50);      
    DECLARE @BRANCHID INT;      
    DECLARE @ISINSERT INT;      
    SET @ITERATOR = 1;      
    SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 0)) AS ROW,DATA INTO #TEMP FROM dbo.UDF_TDS_SPLITSTRING(@USERINFO,',')      
    SET @TOTALCOUNT = (SELECT COUNT(*) FROM #TEMP);           
    WHILE(@ITERATOR<@TOTALCOUNT)      
    BEGIN      
	   SET @USERNAME=(SELECT DATA FROM #TEMP WHERE ROW=@ITERATOR);      
	   SET @ITERATOR=@ITERATOR+1;      
	   SET @BRANCHID= CAST((SELECT DATA FROM #TEMP WHERE ROW=@ITERATOR)AS INT);      
	   SET @ITERATOR=@ITERATOR+1;      
	   SET @ISINSERT=CAST((SELECT DATA FROM #TEMP WHERE ROW=@ITERATOR) AS INT);      
	   SET @ITERATOR=@ITERATOR+1;      
	   DECLARE @USRID INT;                
	   SET @USRID=(SELECT USERID FROM USERMASTER WITH(NOLOCK) WHERE USERNAME=@USERNAME)                
	   BEGIN                  
		  IF(@ISINSERT=1)                  
		  BEGIN                  
			 IF(NOT EXISTS(SELECT * FROM ASSIGNBRANCHCUS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID))                  
			 BEGIN                  
				INSERT INTO ASSIGNBRANCHCUS(USERID,BRANCHID) VALUES(@USRID,@BRANCHID);                  
			 END           
			 ELSE          
			 BEGIN          
				UPDATE ASSIGNBRANCHCUS SET USERID=@USRID WHERE BRANCHID=@BRANCHID;          
			 END                  
		  END                   
		  ELSE                  
		  BEGIN                  
			 DELETE FROM ASSIGNBRANCHCUS WHERE BRANCHID=@BRANCHID AND USERID=@USRID;                  
		  END                  
	   END         
    END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SaveDTaxCustomerAudit')
DROP PROCEDURE USP_CUS_SaveDTaxCustomerAudit
GO
CREATE PROCEDURE USP_CUS_SaveDTaxCustomerAudit
	@DTAXAUDITID INT = -1,
	@DTAXID INT,
	@STATUS INT,
	@REMARKS VARCHAR(200),
	@USERNAME VARCHAR(75),
	@ISDELETED BIT,
	@BRANCHID INT
AS
BEGIN
	IF(@DTAXAUDITID = -1)
	BEGIN
		INSERT INTO CUSTOMERDTAXAUDIT(DTAXID,AUDITDATE,[STATUS],REMARKS,USERNAME,ISDELETED,BRANCHID)
		VALUES(@DTAXID,GETDATE(),@STATUS,@REMARKS,@USERNAME,@ISDELETED,@BRANCHID)
	END
	ELSE
	BEGIN
		UPDATE CUSTOMERDTAXAUDIT
		SET ISDELETED = 1,[STATUS] = @STATUS,BRANCHID = @BRANCHID
		WHERE DTAXAUDITID = @DTAXAUDITID
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SaveDTaxCustomerMaster')
DROP PROCEDURE USP_CUS_SaveDTaxCustomerMaster
GO
CREATE PROCEDURE USP_CUS_SaveDTaxCustomerMaster
	@DTAXID INT = -1,
	@PAN VARCHAR(10),
	@TAN VARCHAR(10),
	@NAME VARCHAR(75),
	@CITY VARCHAR(25),
	@PINCODE VARCHAR(6),
	@STATEID INT,
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@CUSTOMERID VARCHAR(9),
	@EMAILID VARCHAR(75) = '',
	@PHONENUMBER VARCHAR(15) =''
AS
BEGIN
	IF(@DTAXID = -1)
	BEGIN
		INSERT INTO CUSTOMERDTAX(PAN,[TAN],
								 NAME,CITY,
								 PINCODE,STATEID,
								 ADDRESS1,ADDRESS2,
								 ADDRESS3,ADDRESS4,
								 CUSTOMERID,EMAILID,
								 PHONENUMBER)
						  VALUES(UPPER(@PAN),UPPER(@TAN),
								 UPPER(@NAME),UPPER(@CITY),
								 UPPER(@PINCODE),UPPER(@STATEID),
								 UPPER(@ADDRESS1),UPPER(@ADDRESS2),
								 UPPER(@ADDRESS3),UPPER(@ADDRESS4),
								 UPPER(@CUSTOMERID),UPPER(@EMAILID),
								 UPPER(@PHONENUMBER))
		SELECT SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		UPDATE CUSTOMERDTAX
		SET PAN=UPPER(@PAN),TAN=UPPER(@TAN),NAME=UPPER(@NAME),CITY = UPPER(@CITY), PINCODE = UPPER(@PINCODE), STATEID = UPPER(@STATEID),
			ADDRESS1 = UPPER(@ADDRESS1), ADDRESS2 = UPPER(@ADDRESS2), 
			ADDRESS3= UPPER(@ADDRESS3), ADDRESS4= UPPER(@ADDRESS4),CUSTOMERID=UPPER(@CUSTOMERID),
			EMAILID = UPPER(@EMAILID), PHONENUMBER = UPPER(@PHONENUMBER)
		WHERE DTAXID = @DTAXID
		SELECT @DTAXID
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SaveDTaxPayAudit')
DROP PROCEDURE USP_CUS_SaveDTaxPayAudit
GO
CREATE PROCEDURE [USP_CUS_SaveDTaxPayAudit]
	@DTAXPAYAUDITID INT,
	@BRANCHID INT,
	@DTAXPAYID INT,
	@STATUS INT,
	@ISDELETED BIT,
	@USERNAME VARCHAR(75),
	@REMARKS VARCHAR(200),
	@ISCHECKER BIT = 0
AS
BEGIN
	IF(@DTAXPAYAUDITID = -1)
	BEGIN
		INSERT INTO DTAXPAYAUDIT(BRANCHID,DTAXPAYID,[STATUS],AUDITDATE,ISDELETED,USERNAME,REMARKS)
		VALUES(@BRANCHID,@DTAXPAYID,@STATUS,GETDATE(),@ISDELETED,@USERNAME,@REMARKS)
		SELECT SCOPE_IDENTITY();
	END
	ELSE
	BEGIN
		IF(@ISCHECKER = 1)
		BEGIN
			UPDATE DTAXPAYAUDIT
			SET [STATUS] = @STATUS,REMARKS = @REMARKS
			WHERE DTAXPAYAUDITID = @DTAXPAYAUDITID 
		END
		ELSE
		BEGIN
			UPDATE DTAXPAYAUDIT
			SET ISDELETED = 1,[STATUS] = @STATUS,REMARKS = @REMARKS
			WHERE DTAXPAYAUDITID = @DTAXPAYAUDITID
		END
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SaveDTaxPayment')
DROP PROCEDURE USP_CUS_SaveDTaxPayment
GO
CREATE PROCEDURE USP_CUS_SaveDTaxPayment
	@DTAXPAYID INT = -1,
	@CHALLANTYPE INT,
	@TAXAPPLICABLE VARCHAR(150),
	@PAYMENTTYPE VARCHAR(150),
	@DTAXID INT,
	@NATOFPAY INT,
	@INCOMETAX NUMERIC(13,2),
	@SURCHARGE NUMERIC(13,2),
	@EDUCESS NUMERIC(13,2),
	@INTEREST NUMERIC(13,2),
	@PENALTY NUMERIC(13,2),
	@OTHERS NUMERIC(13,2),
	@LATEFEE NUMERIC(13,2),
	@FINACLETRANSID VARCHAR(20),
	@TRANSDATE DATETIME = NULL,
	@AssessmentYear VARCHAR(8)
AS
BEGIN
	IF(@DTAXPAYID = -1)
	BEGIN
		INSERT INTO CUSTOMERDTAXPAYMENT(CHALLANTYPE,TAXAPPLICABLE,PAYMENTTYPE,DTAXID,NATOFPAY,INCOMETAX,SURCHARGE,
		EDUCESS,INTEREST,PENALTY,OTHERS,LATEFEE,FINACLETRANSID,TRANSDATE,ASSESSMENTYEAR)
		VALUES(@CHALLANTYPE,@TAXAPPLICABLE,@PAYMENTTYPE,@DTAXID,@NATOFPAY,@INCOMETAX,@SURCHARGE,
		@EDUCESS,@INTEREST,@PENALTY,@OTHERS,@LATEFEE,@FINACLETRANSID,@TRANSDATE,@AssessmentYear)
		SELECT SCOPE_IDENTITY();
	END
	ELSE
	BEGIN
		UPDATE CUSTOMERDTAXPAYMENT
		SET DTAXID = @DTAXID,NATOFPAY = @NATOFPAY,CHALLANTYPE = @CHALLANTYPE,TAXAPPLICABLE = @TAXAPPLICABLE,
		PAYMENTTYPE = @PAYMENTTYPE,INCOMETAX = @INCOMETAX,SURCHARGE = @SURCHARGE,
		EDUCESS = @EDUCESS,INTEREST = @INTEREST,PENALTY = @PENALTY,
		OTHERS = @OTHERS,LATEFEE = @LATEFEE,
		FINACLETRANSID = @FINACLETRANSID, TRANSDATE = @TRANSDATE, ASSESSMENTYEAR = @AssessmentYear
		WHERE DTAXPAYID = @DTAXPAYID
		SELECT @DTAXPAYID;
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SaveITaxCustomerAudit')
DROP PROCEDURE USP_CUS_SaveITaxCustomerAudit
GO
CREATE PROCEDURE USP_CUS_SaveITaxCustomerAudit
	@ITAXAUDITID INT = -1,  
	@ITAXID INT,  
	@STATUS INT,  
	@REMARKS VARCHAR(200),  
	@USERNAME VARCHAR(75),  
	@ISDELETED BIT,  
	@CUSTOMERID VARCHAR(9),
	@BRANCHID INT
AS  
BEGIN  
	IF(@ITAXAUDITID = -1)  
	BEGIN  
		INSERT INTO CUSTOMERITAXAUDIT(ITAXID,AUDITDATE,[STATUS],REMARKS,USERNAME,ISDELETED,CUSTOMERID,BRANCHID)  
		VALUES(@ITAXID,GETDATE(),@STATUS,@REMARKS,@USERNAME,@ISDELETED,@CUSTOMERID,@BRANCHID)  
	END  
	ELSE  
	BEGIN  
		UPDATE CUSTOMERITAXAUDIT  
		SET ISDELETED = 1,[STATUS] = @STATUS  
		WHERE ITAXAUDITID = @ITAXAUDITID  
	END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SaveITaxPayAudit')
DROP PROCEDURE USP_CUS_SaveITaxPayAudit
GO
CREATE PROCEDURE USP_CUS_SaveITaxPayAudit
 @ITAXPAYAUDITID INT = -1,  
 @BRANCHID INT,  
 @ITAXPAYID INT,  
 @STATUS INT,  
 @ISDELETED BIT,  
 @USERNAME VARCHAR(75),  
 @REMARKS VARCHAR(200)  
AS  
BEGIN  
 IF(@ITAXPAYAUDITID = -1)  
 BEGIN  
  INSERT INTO ITAXPAYAUDIT(BRANCHID,ITAXPAYID,[STATUS],AUDITDATE,ISDELETED,USERNAME,REMARKS)  
  VALUES(@BRANCHID,@ITAXPAYID,@STATUS,GETDATE(),@ISDELETED,@USERNAME,@REMARKS)  
 END  
 ELSE  
 BEGIN  
  UPDATE ITAXPAYAUDIT  
  SET ISDELETED = @ISDELETED,[STATUS] = @STATUS,BRANCHID = @BRANCHID 
  WHERE ITAXPAYAUDITID = @ITAXPAYAUDITID  
 END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SaveITaxPayment')
DROP PROCEDURE USP_CUS_SaveITaxPayment
GO
CREATE PROCEDURE USP_CUS_SaveITaxPayment
 @ITAXPAYID INT = -1,  
 @BRANCHID INT,  
 @PAYMENTTYPE INT,  
 @ITAXID INT,  
 @ACCCODE1 VARCHAR(4),  
 @ACCCODE2 VARCHAR(4),  
 @ACCCODE3 VARCHAR(4),  
 @ACCCODE4 VARCHAR(4),  
 @ACCCODE5 VARCHAR(4),  
 @ACCCODE6 VARCHAR(4),  
 @AMTCODE1 NUMERIC(13,2),  
 @AMTCODE2 NUMERIC(13,2),  
 @AMTCODE3 NUMERIC(13,2),  
 @AMTCODE4 NUMERIC(13,2),  
 @AMTCODE5 NUMERIC(13,2),  
 @AMTCODE6 NUMERIC(13,2),  
 @FINACLETRANSID VARCHAR(20) ='',  
 @TRANSDATE DATETIME = NULL  
AS  
BEGIN  
 IF(@ITAXPAYID = -1)  
 BEGIN  
  INSERT INTO CUSTOMERITAXPAYMENT(BRANCHID,PAYMENTTYPE,ITAXID,ACCCODE1,ACCCODE2,ACCCODE3,ACCCODE4,ACCCODE5,ACCCODE6,AMTCODE1,AMTCODE2,AMTCODE3,AMTCODE4,AMTCODE5,AMTCODE6,FINACLETRANSID,TRANSDATE)  
  VALUES(@BRANCHID,@PAYMENTTYPE,@ITAXID,@ACCCODE1,@ACCCODE2,@ACCCODE3,@ACCCODE4,@ACCCODE5,@ACCCODE6,@AMTCODE1,@AMTCODE2,@AMTCODE3,@AMTCODE4,@AMTCODE5,@AMTCODE6,@FINACLETRANSID,@TRANSDATE)  
  SELECT SCOPE_IDENTITY();  
 END  
 ELSE  
 BEGIN  
  UPDATE CUSTOMERITAXPAYMENT  
  SET ITAXID = @ITAXID,PAYMENTTYPE = @PAYMENTTYPE,ACCCODE1 = @ACCCODE1,ACCCODE2 = @ACCCODE2,ACCCODE3 = @ACCCODE3,ACCCODE4 = @ACCCODE4,ACCCODE5 = @ACCCODE5,ACCCODE6 = @ACCCODE6,  
  AMTCODE1=@AMTCODE1,AMTCODE2=@AMTCODE2,AMTCODE3=@AMTCODE3,AMTCODE4=@AMTCODE4,AMTCODE5=@AMTCODE5,AMTCODE6=@AMTCODE6,  
  FINACLETRANSID = @FINACLETRANSID, TRANSDATE = @TRANSDATE  
  WHERE ITAXPAYID = @ITAXPAYID  
  SELECT @ITAXPAYID;  
 END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_SaveUpdateITaxCustomerMaster')
DROP PROCEDURE USP_CUS_SaveUpdateITaxCustomerMaster
GO
CREATE PROCEDURE USP_CUS_SaveUpdateITaxCustomerMaster
	@ITAXID INT,  
	@ASSESSECODE VARCHAR(15),  
	@COMNAME VARCHAR(75),  
	@COMCODE VARCHAR(4),  
	@DIVCODE VARCHAR(4),  
	@RANGECODE VARCHAR(4),  
	@NAME VARCHAR(75),   
    @CITY VARCHAR(25),       
    @PINCODE VARCHAR(6),    
    @STATEID INT,  
    @CUSTOMERID VARCHAR(9),  
    @ADDRESS1 VARCHAR(25),  
    @ADDRESS2 VARCHAR(25),  
    @ADDRESS3 VARCHAR(25),  
    @ADDRESS4 VARCHAR(25),  
    @PHONENO VARCHAR(25),  
    @EMAILID VARCHAR(75),  
    @BRANCHID INT,  
    @ISDELETED BIT=0  
AS  
	BEGIN  
		IF (@ITAXID < 0)  
			BEGIN  
				INSERT INTO CUSTOMERITAX (ASSESSECODE, COMNAME, COMCODE, DIVCODE, RANGECODE,
					NAME, CITY, PINCODE, STATEID, CUSTOMERID, ADDRESS1, ADDRESS2, ADDRESS3, 
					ADDRESS4, PHONENO, EMAILID, BRANCHID, ISDELETED)  
				VALUES (UPPER(@ASSESSECODE), UPPER(@COMNAME), UPPER(@COMCODE), UPPER(@DIVCODE), UPPER(@RANGECODE), 
						UPPER(@NAME), UPPER(@CITY), UPPER(@PINCODE), UPPER(@STATEID), UPPER(@CUSTOMERID), 
						UPPER(@ADDRESS1), UPPER(@ADDRESS2), UPPER(@ADDRESS3), 
						UPPER(@ADDRESS4),@PHONENO, UPPER(@EMAILID), @BRANCHID, @ISDELETED)  
				SELECT SCOPE_IDENTITY();  
			END  
		ELSE  
			BEGIN   
				IF (@ISDELETED = 1)  
					BEGIN  
						UPDATE CUSTOMERITAX 
						SET ISDELETED = 1 
						WHERE ITAXID = @ITAXID;  
						SELECT @ITAXID  
					END  
				ELSE  
					BEGIN  
						UPDATE CUSTOMERITAX 
						SET ASSESSECODE = UPPER(@ASSESSECODE), COMNAME = UPPER(@COMNAME), 
						COMCODE = UPPER(@COMCODE), DIVCODE = UPPER(@DIVCODE), 
						RANGECODE = UPPER(@RANGECODE), NAME = UPPER(@NAME),CITY = UPPER(@CITY), 
						PINCODE = UPPER(@PINCODE), STATEID = UPPER(@STATEID),CUSTOMERID = UPPER(@CUSTOMERID),
						ADDRESS1 = UPPER(@ADDRESS1), ADDRESS2 = UPPER(@ADDRESS2), ADDRESS3 = UPPER(@ADDRESS3),
						ADDRESS4 = UPPER(@ADDRESS4), PHONENO = @PHONENO, EMAILID = UPPER(@EMAILID)
						WHERE ITAXID=@ITAXID;  
						SELECT @ITAXID  
					END  
			END  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_CUS_UserIsAssigned')
DROP PROCEDURE USP_CUS_UserIsAssigned
GO
CREATE PROCEDURE [USP_CUS_UserIsAssigned]
	@USERID INT
AS
BEGIN
	SELECT ISNULL(COUNT(*),0) NOOFITEMS FROM ASSIGNBRANCHCUS
	WHERE USERID = @USERID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_CHECKCORRERROR')
DROP PROCEDURE USP_F15G_CHECKCORRERROR
GO
CREATE PROCEDURE USP_F15G_CHECKCORRERROR
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT
AS
	BEGIN
		IF(@FORMID = 1)
			BEGIN
				SELECT CASE WHEN LEN(UNIQUEIDNUMBER) = 0 THEN D.NAME + '-' + D.PAN 
					ELSE D.NAME + '-' + D.PAN + ' - ' + SUBSTRING(F.UNIQUEIDNUMBER, 1, 10) END ERRORID, 
					D.*, NE.MOBILENO, F.DETAILID, F.STATUS, F.RESIDENTIALSTATUS, F.TAXASSESSEDFLAG,
					F.LATESTASSTYR, F.ESTIMATEDINC,F.ESTIMATEDTOTALINCPRVYR, F.TOTALNOOFFORM15G, 
					F.AGGREGATEAMTFORM15G,F.UNIQUEIDNUMBER, F.DECLARATIONDATE, 
					F.AMTOFINCPAID, F.DATEINCPAID
				INTO #TOVALIDATE
				FROM DEDUCTEE D WITH(NOLOCK)
					INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)
					   ON D.DEDUCTEEID = NE.DEDUCTEEID
					INNER JOIN FORM15GBASIC F WITH(NOLOCK)
					   ON D.DEDUCTEEID = F.DEDUCTEEID AND D.BRANCHID = F.BRANCHID
				WHERE D.BRANCHID = @BRANCHID AND QUARTER = @QUARTER
				DECLARE @ERRORTABLE TABLE(ERRORID VARCHAR(101),ERRORDESCRIPTION VARCHAR(102))
				INSERT INTO @ERRORTABLE
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Income Details Required' + REPLICATE(' ', 100 - LEN('Income Details Required')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL((SELECT COUNT(INCOMEID) FROM FORM15GINCOME WITH(NOLOCK) WHERE DETAILID = V.DETAILID), 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid UIN' + REPLICATE(' ', 100 - LEN('Invalid UIN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) != 26 OR SUBSTRING(UNIQUEIDNUMBER, 1, 1) != 'G'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'UIN is Mandatory' + REPLICATE(' ', 100 - LEN('UIN is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Name is Mandatory' + REPLICATE(' ', 100 - LEN('Name is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(NAME) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid PAN' + REPLICATE(' ', 100 - LEN('Invalid PAN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PAN NOT LIKE '[A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z][0-9][0-9][0-9][0-9][A-Za-z]'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|'	+ 'Invalid PAN Status' + REPLICATE(' ', 100 - LEN('Invalid PAN Status')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATUS < 1 OR STATUS > 9
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Residential Status' + REPLICATE(' ', 100 - LEN('Invalid Residential Status')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					RESIDENTIALSTATUS != 'RES' AND RESIDENTIALSTATUS != 'NRI' AND RESIDENTIALSTATUS != 'NOR'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Flat/Door/Block No. is mandatory' + REPLICATE(' ', 100 - LEN('Flat/Door/Block No. is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS1, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Area is mandatory' + REPLICATE(' ', 100 - LEN('Area is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS4, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'City is mandatory' + REPLICATE(' ', 100 - LEN('City is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS5, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'State is mandatory' + REPLICATE(' ', 100 - LEN('State is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATEID = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode is mandatory' + REPLICATE(' ', 100 - LEN('Pincode is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode should be numbers only' + REPLICATE(' ', 100 - LEN('Pincode should be numbers only')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNUMERIC(PINCODE) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) != 6
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PINCODE < 110001
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG != 'Y' AND TAXASSESSEDFLAG != 'N' 
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Latest Assessment Year'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Latest Assessment Year'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG = 'Y' AND LEN(ISNULL(LATESTASSTYR, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income for which Declaration made'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income for which Declaration made'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income of the P.Y.'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income of the P.Y.'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15G, 0) > 0 AND ISNULL(AGGREGATEAMTFORM15G, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15G Filed'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''No. of Form 15G Filed'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15G, 0) = 0 AND ISNULL(AGGREGATEAMTFORM15G, 0) > 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Declaration Date'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Declaration Date'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DECLARATIONDATE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Date on which Income has been Paid/Credited'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Date on which Income has been Paid/Credited'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DATEINCPAID, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Mobile No.'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Mobile No.'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid MobileNumber.' + REPLICATE(' ', 100 - LEN('Invalid MobileNumber.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) > 0 
					AND (LEN(ISNULL(MOBILENO, '')) != 10 
						OR SUBSTRING(ISNULL(MOBILENO, ' '), 0, 1) = '0'
						OR ISNULL(MOBILENO, '') LIKE '%.%'
						OR ISNULL(MOBILENO, '') LIKE '%E%'
						OR ISNULL(MOBILENO, '') LIKE '%+%')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Email Address'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Email Address'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Email Address.' + REPLICATE(' ', 100 - LEN('Invalid Email Address.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) > 0 
					AND (PATINDEX ('%[ &'',":;!+=\/()<>]%', EMAILADDRESS) > 0 -- INVALID CHARACTERS
						   OR PATINDEX ('[@.-_]%', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE STARTING CHARACTER
						   OR PATINDEX ('%[@.-_]', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE ENDING CHARACTER
						   OR EMAILADDRESS NOT LIKE '%@%.%' -- MUST CONTAIN AT LEAST ONE @ AND ONE .
						   OR EMAILADDRESS LIKE '%..%' -- CANNOT HAVE TWO PERIODS IN A ROW
						   OR EMAILADDRESS LIKE '%@%@%' -- CANNOT HAVE TWO @ ANYWHERE
						   OR EMAILADDRESS LIKE '%.@%' 
						   OR EMAILADDRESS LIKE '%@.%'
						   OR EMAILADDRESS LIKE '%#@%' 
						   OR EMAILADDRESS LIKE '%@#%'						   
						   OR SUBSTRING(EMAILADDRESS, LEN(EMAILADDRESS), 1) NOT LIKE '[a-zA-Z0-9]')
						   OR SUBSTRING(EMAILADDRESS, LEN(EMAILADDRESS), 1) = '.' 
				SELECT ERRORID, ERRORDESCRIPTION FROM @ERRORTABLE 
				DROP TABLE #TOVALIDATE
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_CHECKCORRINCOMEID')
DROP PROCEDURE USP_F15G_CHECKCORRINCOMEID
GO
CREATE PROCEDURE USP_F15G_CHECKCORRINCOMEID
	@DETAILID INT
AS
BEGIN
	SELECT COUNT(INCOMEID) 
	FROM CORRFORM15GINCOME WITH(NOLOCK)
	WHERE DETAILID = @DETAILID AND CORSTATUS IN (1,2,4)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_CHECKERROR')
DROP PROCEDURE USP_F15G_CHECKERROR
GO
CREATE PROCEDURE USP_F15G_CHECKERROR
	@BRANCHID INT,
	@QUARTER INT,
	@EXCLUDE INT 
AS
	BEGIN
		SELECT CASE WHEN LEN(UNIQUEIDNUMBER) = 0 THEN D.NAME + '-' + D.PAN 
			ELSE D.NAME + '-' + D.PAN + ' - ' + SUBSTRING(F.UNIQUEIDNUMBER, 1, 10) END ERRORID, 
			D.*, NE.MOBILENO, F.DETAILID, F.STATUS, F.RESIDENTIALSTATUS, F.TAXASSESSEDFLAG,
			F.LATESTASSTYR, F.ESTIMATEDINC,F.ESTIMATEDTOTALINCPRVYR, F.TOTALNOOFFORM15G, 
			F.AGGREGATEAMTFORM15G,F.UNIQUEIDNUMBER, F.DECLARATIONDATE, 
			F.AMTOFINCPAID, F.DATEINCPAID, FI.AMTOFINC
		INTO #TOVALIDATE
		FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)
			   ON D.DEDUCTEEID = NE.DEDUCTEEID
			INNER JOIN FORM15GBASIC F WITH(NOLOCK)
			   ON D.DEDUCTEEID = F.DEDUCTEEID AND D.BRANCHID = F.BRANCHID
			INNER JOIN FORM15GINCOME FI WITH(NOLOCK)
			   ON F.DETAILID = FI.DETAILID
		WHERE D.BRANCHID = @BRANCHID AND QUARTER = @QUARTER
		DECLARE @ERRORTABLE TABLE(ERRORID VARCHAR(101),ERRORDESCRIPTION VARCHAR(102))
		IF(@EXCLUDE = 0)
			BEGIN
				INSERT INTO @ERRORTABLE
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Income Details Required' + REPLICATE(' ', 100 - LEN('Income Details Required')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL((SELECT COUNT(INCOMEID) FROM FORM15GINCOME WITH(NOLOCK) WHERE DETAILID = V.DETAILID), 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid UIN' + REPLICATE(' ', 100 - LEN('Invalid UIN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) != 26 OR SUBSTRING(UNIQUEIDNUMBER, 1, 1) != 'G'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'UIN is Mandatory' + REPLICATE(' ', 100 - LEN('UIN is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Name is Mandatory' + REPLICATE(' ', 100 - LEN('Name is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(NAME) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid PAN' + REPLICATE(' ', 100 - LEN('Invalid PAN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PAN NOT LIKE '[A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z][0-9][0-9][0-9][0-9][A-Za-z]'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|'	+ 'Invalid PAN Status' + REPLICATE(' ', 100 - LEN('Invalid PAN Status')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATUS < 1 OR STATUS > 9
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Residential Status' + REPLICATE(' ', 100 - LEN('Invalid Residential Status')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					RESIDENTIALSTATUS != 'RES' AND RESIDENTIALSTATUS != 'NRI' AND RESIDENTIALSTATUS != 'NOR'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Flat/Door/Block No. is mandatory' + REPLICATE(' ', 100 - LEN('Flat/Door/Block No. is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS1, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Area is mandatory' + REPLICATE(' ', 100 - LEN('Area is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS4, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'City is mandatory' + REPLICATE(' ', 100 - LEN('City is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS5, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'State is mandatory' + REPLICATE(' ', 100 - LEN('State is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATEID = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode is mandatory' + REPLICATE(' ', 100 - LEN('Pincode is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode should be numbers only' + REPLICATE(' ', 100 - LEN('Pincode should be numbers only')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNUMERIC(PINCODE) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) != 6
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PINCODE < 110001
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG != 'Y' AND TAXASSESSEDFLAG != 'N' 
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Latest Assessment Year'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Latest Assessment Year'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG = 'Y' AND LEN(ISNULL(LATESTASSTYR, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income for which Declaration made'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income for which Declaration made'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Total Income of the P.Y.'' is Mandatory.(Should be same or greater than Estimated Income)' + REPLICATE(' ', 100 - LEN('''Estimated Total Income of the P.Y.'' is Mandatory.(Should be same or greater than Estimated Income)')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) > 0 AND ISNULL(ESTIMATEDTOTALINCPRVYR, 0) < ISNULL(ESTIMATEDINC, 0)
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15G Filed'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''No. of Form 15G Filed'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15G, 0) = 0 AND ISNULL(AGGREGATEAMTFORM15G, 0) > 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15G Filed'' is present. ''Aggregate Amount of Income'' should be greater than zero.' + REPLICATE(' ', 100 - LEN('''No. of Form 15G Filed'' is present. ''Aggregate Amount of Income'' should be greater than zero.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15G, 0) > 0 AND ISNULL(AGGREGATEAMTFORM15G, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Declaration Date'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Declaration Date'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DECLARATIONDATE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Date on which Income has been Paid/Credited'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Date on which Income has been Paid/Credited'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DATEINCPAID, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Mobile No.'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Mobile No.'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid MobileNumber.' + REPLICATE(' ', 100 - LEN('Invalid MobileNumber.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) > 0 
					AND (LEN(ISNULL(MOBILENO, '')) != 10 
						OR SUBSTRING(ISNULL(MOBILENO, ' '), 0, 1) = '0'
						OR ISNULL(MOBILENO, '') LIKE '%.%'
						OR ISNULL(MOBILENO, '') LIKE '%E%'
						OR ISNULL(MOBILENO, '') LIKE '%+%'
						OR ISNULL(MOBILENO, '') LIKE '%-%')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Email Address.' + REPLICATE(' ', 100 - LEN('Invalid Email Address.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) > 0 
					AND (PATINDEX ('%[ &'',":;!+=\/()<>]%', EMAILADDRESS) > 0 -- INVALID CHARACTERS
						   OR PATINDEX ('[@.-_]%', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE STARTING CHARACTER
						   OR PATINDEX ('%[@.-_]', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE ENDING CHARACTER
						   OR EMAILADDRESS NOT LIKE '%@%.%' -- MUST CONTAIN AT LEAST ONE @ AND ONE .
						   OR EMAILADDRESS LIKE '%..%' -- CANNOT HAVE TWO PERIODS IN A ROW
						   OR EMAILADDRESS LIKE '%@%@%' -- CANNOT HAVE TWO @ ANYWHERE
						   OR EMAILADDRESS LIKE '%.@%' 
						   OR EMAILADDRESS LIKE '%@.%'
						   OR EMAILADDRESS LIKE '%#@%' 
						   OR EMAILADDRESS LIKE '%@#%'						   
						   OR SUBSTRING(EMAILADDRESS, LEN(EMAILADDRESS), 1) NOT LIKE '[a-zA-Z0-9]')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Amount of Income Should not be Negative in Income Details.' + REPLICATE(' ', 100 - LEN('Amount of Income Should not be Negative in Income Details.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(AMTOFINC, '') LIKE '%-%'		
			END
		ELSE
			BEGIN
				INSERT INTO @ERRORTABLE
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Income Details Required' + REPLICATE(' ', 100 - LEN('Income Details Required')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL((SELECT COUNT(INCOMEID) FROM FORM15GINCOME WITH(NOLOCK) WHERE DETAILID = V.DETAILID), 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid UIN' + REPLICATE(' ', 100 - LEN('Invalid UIN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) != 26 OR SUBSTRING(UNIQUEIDNUMBER, 1, 1) != 'G'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'UIN is Mandatory' + REPLICATE(' ', 100 - LEN('UIN is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Name is Mandatory' + REPLICATE(' ', 100 - LEN('Name is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(NAME) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid PAN' + REPLICATE(' ', 100 - LEN('Invalid PAN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PAN NOT LIKE '[A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z][0-9][0-9][0-9][0-9][A-Za-z]'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|'	+ 'Invalid PAN Status' + REPLICATE(' ', 100 - LEN('Invalid PAN Status')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATUS < 1 OR STATUS > 9
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Residential Status' + REPLICATE(' ', 100 - LEN('Invalid Residential Status')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					RESIDENTIALSTATUS != 'RES' AND RESIDENTIALSTATUS != 'NRI' AND RESIDENTIALSTATUS != 'NOR'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Flat/Door/Block No. is mandatory' + REPLICATE(' ', 100 - LEN('Flat/Door/Block No. is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS1, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Area is mandatory' + REPLICATE(' ', 100 - LEN('Area is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS4, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'City is mandatory' + REPLICATE(' ', 100 - LEN('City is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS5, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'State is mandatory' + REPLICATE(' ', 100 - LEN('State is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATEID = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode is mandatory' + REPLICATE(' ', 100 - LEN('Pincode is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode should be numbers only' + REPLICATE(' ', 100 - LEN('Pincode should be numbers only')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNUMERIC(PINCODE) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) != 6
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PINCODE < 110001
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG != 'Y' AND TAXASSESSEDFLAG != 'N' 
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Latest Assessment Year'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Latest Assessment Year'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG = 'Y' AND LEN(ISNULL(LATESTASSTYR, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income for which Declaration made'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income for which Declaration made'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Total Income of the P.Y.'' is Mandatory.(Should be same or greater than Estimated Income)' + REPLICATE(' ', 100 - LEN('''Estimated Total Income of the P.Y.'' is Mandatory.(Should be same or greater than Estimated Income)')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) > 0 AND ISNULL(ESTIMATEDTOTALINCPRVYR, 0) < ISNULL(ESTIMATEDINC, 0)
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15G Filed'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''No. of Form 15G Filed'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15G, 0) = 0 AND ISNULL(AGGREGATEAMTFORM15G, 0) > 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15G Filed'' is present. ''Aggregate Amount of Income'' should be greater than zero.' + REPLICATE(' ', 100 - LEN('''No. of Form 15G Filed'' is present. ''Aggregate Amount of Income'' should be greater than zero.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15G, 0) > 0 AND ISNULL(AGGREGATEAMTFORM15G, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Declaration Date'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Declaration Date'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DECLARATIONDATE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Date on which Income has been Paid/Credited'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Date on which Income has been Paid/Credited'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DATEINCPAID, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid MobileNumber.' + REPLICATE(' ', 100 - LEN('Invalid MobileNumber.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) > 0 
					AND (LEN(ISNULL(MOBILENO, '')) != 10 
						OR SUBSTRING(ISNULL(MOBILENO, ' '), 0, 1) = '0'
						OR ISNULL(MOBILENO, '') LIKE '%.%'
						OR ISNULL(MOBILENO, '') LIKE '%E%'
						OR ISNULL(MOBILENO, '') LIKE '%+%'
						OR ISNULL(MOBILENO, '') LIKE '%-%')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Email Address.' + REPLICATE(' ', 100 - LEN('Invalid Email Address.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) > 0 
					AND (PATINDEX ('%[ &'',":;!+=\/()<>]%', EMAILADDRESS) > 0 -- INVALID CHARACTERS
						   OR PATINDEX ('[@.-_]%', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE STARTING CHARACTER
						   OR PATINDEX ('%[@.-_]', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE ENDING CHARACTER
						   OR EMAILADDRESS NOT LIKE '%@%.%' -- MUST CONTAIN AT LEAST ONE @ AND ONE .
						   OR EMAILADDRESS LIKE '%..%' -- CANNOT HAVE TWO PERIODS IN A ROW
						   OR EMAILADDRESS LIKE '%@%@%' -- CANNOT HAVE TWO @ ANYWHERE
						   OR EMAILADDRESS LIKE '%.@%' 
						   OR EMAILADDRESS LIKE '%@.%'
						   OR EMAILADDRESS LIKE '%#@%' 
						   OR EMAILADDRESS LIKE '%@#%'						   
						   OR SUBSTRING(EMAILADDRESS, LEN(EMAILADDRESS), 1) NOT LIKE '[a-zA-Z0-9]')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Amount of Income Should not be Negative in Income Details.' + REPLICATE(' ', 100 - LEN('Amount of Income Should not be Negative in Income Details.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(AMTOFINC, '') LIKE '%-%'		
			END
		SELECT ERRORID, ERRORDESCRIPTION FROM @ERRORTABLE 
		DROP TABLE #TOVALIDATE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_CHECKINCOMEID')
DROP PROCEDURE USP_F15G_CHECKINCOMEID
GO
CREATE PROCEDURE [USP_F15G_CHECKINCOMEID]
	@DETAILID INT
AS
BEGIN
	SELECT COUNT(INCOMEID) 
	FROM FORM15GINCOME WITH(NOLOCK)
	WHERE DETAILID = @DETAILID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_CHECKSECTION')
DROP PROCEDURE USP_F15G_CHECKSECTION
GO
CREATE PROCEDURE [USP_F15G_CHECKSECTION]
	@DETAILID INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT COUNT(INCOMEID) 
		FROM FORM15GBASIC B WITH(NOLOCK)
				INNER JOIN FORM15GINCOME I WITH(NOLOCK) ON I.DETAILID = B.DETAILID
				INNER JOIN TAXSECTIONS T WITH(NOLOCK) ON I.SECTIONID = T.SECTIONID
		WHERE I.DETAILID = @DETAILID AND 
		      B.BRANCHID = @BRANCHID AND 
		      T.SECTIONNAME IN ('194', '194EE')
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_CHECKSECTIONFORCORR')
DROP PROCEDURE USP_F15G_CHECKSECTIONFORCORR
GO
CREATE PROCEDURE [dbo].[USP_F15G_CHECKSECTIONFORCORR]
	@DETAILID INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT COUNT(INCOMEID) 
		FROM CORRFORM15GBASIC B WITH(NOLOCK)
				INNER JOIN CORRFORM15GINCOME I WITH(NOLOCK) ON I.DETAILID = B.DETAILID
				INNER JOIN TAXSECTIONS T WITH(NOLOCK) ON I.SECTIONID = T.SECTIONID
		WHERE I.DETAILID = @DETAILID AND 
		      B.BRANCHID = @BRANCHID AND 
		      T.SECTIONNAME IN ('194', '194EE')
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_CHECKUIN')
DROP PROCEDURE USP_F15G_CHECKUIN
GO
CREATE PROCEDURE [USP_F15G_CHECKUIN]
	@DEDUCTEEID INT,
	@BRANCHID INT,
	@UID VARCHAR(26)
AS
	BEGIN
		SELECT DEDUCTEEID 
		FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE DEDUCTEEID=@DEDUCTEEID 
			AND BRANCHID=@BRANCHID 
			AND CERTNO = @UID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_CHECKUINEXIST')
DROP PROCEDURE USP_F15G_CHECKUINEXIST
GO
CREATE PROCEDURE USP_F15G_CHECKUINEXIST
	@DETAILID INT = -1,
	@BRANCHID INT,
	@UID VARCHAR(10)
AS
	BEGIN
		IF EXISTS(SELECT UNIQUEIDNUMBER
			      FROM FORM15GBASIC WITH(NOLOCK) 
			      WHERE BRANCHID = @BRANCHID AND SUBSTRING(UNIQUEIDNUMBER, 1,10)= @UID AND DETAILID <> @DETAILID)
		BEGIN
			SELECT 1
		END	
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_DELETEBASICDETAILS')
DROP PROCEDURE USP_F15G_DELETEBASICDETAILS
GO
CREATE PROCEDURE USP_F15G_DELETEBASICDETAILS
	@DETAILID INT
AS
BEGIN
    DELETE FROM FORM15GINCOME WHERE DETAILID = @DETAILID
	DELETE FROM FORM15GBASIC WHERE DETAILID = @DETAILID
	SELECT 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_DELETECORRBASICDETAILS')
DROP PROCEDURE USP_F15G_DELETECORRBASICDETAILS
GO
CREATE PROCEDURE USP_F15G_DELETECORRBASICDETAILS 
	@DETAILID INT,
	@ACTION INT 
AS
BEGIN
	IF(@ACTION = 1)
		BEGIN
			DELETE FROM CORRFORM15GBASIC WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3)
			DELETE FROM CORRFORM15GINCOME WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3,4)
			INSERT INTO CORRFORM15GBASIC(DETAILID, DEDUCTEEID, BRANCHID, QUARTER, STATUS, RESIDENTIALSTATUS, TAXASSESSEDFLAG, 
				LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G, AGGREGATEAMTFORM15G, 
				UNIQUEIDNUMBER, DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID, CREATEDDATE, ENTRYTYPE, CORSTATUS) 
			SELECT DETAILID, DEDUCTEEID, BRANCHID, QUARTER, STATUS, RESIDENTIALSTATUS, TAXASSESSEDFLAG, 
				LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G, AGGREGATEAMTFORM15G, 
				UNIQUEIDNUMBER, DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID, CREATEDDATE, ENTRYTYPE, 3 AS CORSTATUS 
			FROM CORRFORM15GBASIC WITH(NOLOCK)
			WHERE DETAILID =@DETAILID AND CORSTATUS  IN(1,4)
			INSERT INTO CORRFORM15GINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)		
			SELECT INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, 3 AS CORSTATUS
				FROM CORRFORM15GINCOME WITH(NOLOCK)
				WHERE DETAILID = @DETAILID AND CORSTATUS IN(1,4)
			SELECT 1
		END
	ELSE
		BEGIN
			DELETE FROM CORRFORM15GBASIC WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3)
			DELETE FROM CORRFORM15GINCOME WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3)
			SELECT 2
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_DELETECORRINCOMEDETAILS')
DROP PROCEDURE USP_F15G_DELETECORRINCOMEDETAILS
GO
CREATE PROCEDURE USP_F15G_DELETECORRINCOMEDETAILS
	@INCOMEID INT,
	@ACTION INT 
AS
BEGIN
	IF(@ACTION = 1)
		BEGIN
			DELETE FROM CORRFORM15GINCOME WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(2,3)
			INSERT INTO CORRFORM15GINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)		
			SELECT INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, 3 AS CORSTATUS
				FROM CORRFORM15GINCOME WITH(NOLOCK)
				WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(1,4)
			SELECT 1
		END
	ELSE
		BEGIN
			DELETE FROM CORRFORM15GINCOME WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(2,3)
			INSERT INTO CORRFORM15GINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)		
			SELECT INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, 2 AS CORSTATUS
				FROM CORRFORM15GINCOME WITH(NOLOCK)
				WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(1,4)
			SELECT 2
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_DELETEINCOMEDETAILS')
DROP PROCEDURE USP_F15G_DELETEINCOMEDETAILS
GO
CREATE PROCEDURE [USP_F15G_DELETEINCOMEDETAILS]
	@INCOMEID INT
AS
BEGIN
	DELETE FROM FORM15GINCOME WHERE INCOMEID=@INCOMEID
	SELECT 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_FINALUPDATE')
DROP PROCEDURE USP_F15G_FINALUPDATE
GO
CREATE PROCEDURE USP_F15G_FINALUPDATE
	@BRANCHID INT,
	@QUARTER INT
AS 
BEGIN
	DECLARE @ERROR INT;
	SET @ERROR =0;
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
			BEGIN TRANSACTION  
				BEGIN TRY
					--DELETE FORM15GINCOME	STATUS 3
					DELETE FI FROM FORM15GINCOME FI
						INNER JOIN CORRFORM15GBASIC CB
							ON FI.DETAILID = CB.DETAILID
							AND CB.CORSTATUS = 3
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER	
					DELETE FI FROM CORRFORM15GINCOME FI
						INNER JOIN CORRFORM15GBASIC CB
							ON FI.DETAILID = CB.DETAILID
							AND CB.CORSTATUS = 3
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER	
					--DELETE FORM15GBASIC STATUS 3
					DELETE FB FROM FORM15GBASIC FB
						INNER JOIN CORRFORM15GBASIC CB
							ON FB.DETAILID = CB.DETAILID
							AND FB.BRANCHID = CB.BRANCHID
							AND FB.QUARTER = CB.QUARTER
							AND CB.CORSTATUS = 3
						WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
					DELETE FB FROM CORRFORM15GBASIC FB
						INNER JOIN CORRFORM15GBASIC CB
							ON FB.DETAILID = CB.DETAILID
							AND FB.BRANCHID = CB.BRANCHID
							AND FB.QUARTER = CB.QUARTER
							AND CB.CORSTATUS = 3
						WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
							AND FB.CORSTATUS = 1			
					--INSERT FORM15GBASIC STATUS 4
					INSERT INTO FORM15GBASIC (DEDUCTEEID, BRANCHID, QUARTER, STATUS, RESIDENTIALSTATUS, TAXASSESSEDFLAG, LATESTASSTYR, ESTIMATEDINC,
								ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G, AGGREGATEAMTFORM15G, UNIQUEIDNUMBER, DECLARATIONDATE,
								AMTOFINCPAID, DATEINCPAID,CREATEDDATE, ENTRYTYPE)
					SELECT DEDUCTEEID, BRANCHID, QUARTER, STATUS, RESIDENTIALSTATUS, TAXASSESSEDFLAG, LATESTASSTYR, ESTIMATEDINC,
							ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G, AGGREGATEAMTFORM15G, UNIQUEIDNUMBER, DECLARATIONDATE,
							AMTOFINCPAID, DATEINCPAID,CREATEDDATE, 3
						FROM CORRFORM15GBASIC WITH(NOLOCK)
						WHERE BRANCHID = @BRANCHID
							AND QUARTER = @QUARTER
							AND CORSTATUS = 4
					--INSERT FORM15GINCOME STATUS 4
					INSERT INTO FORM15GINCOME (SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC)			
					SELECT CI.SRLNO, FB.DETAILID, CI.IDENFICATIONNUM, CI.NATUREOFINC, CI.SECTIONID, CI.AMTOFINC 
						FROM CORRFORM15GINCOME CI WITH(NOLOCK)
							INNER JOIN CORRFORM15GBASIC CB
								ON CB.DETAILID = CI.DETAILID
								AND CB.CORSTATUS = 4
							INNER JOIN FORM15GBASIC FB
								ON CB.UNIQUEIDNUMBER = FB.UNIQUEIDNUMBER
								AND FB.BRANCHID = CB.BRANCHID
								AND FB.QUARTER = CB.QUARTER
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND CI.CORSTATUS = 4
					--INSERT CORRFORM15GBASIC STATUS 4
					INSERT INTO CORRFORM15GBASIC (DETAILID, DEDUCTEEID, BRANCHID, QUARTER, STATUS, RESIDENTIALSTATUS, TAXASSESSEDFLAG, LATESTASSTYR, ESTIMATEDINC,
								ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G, AGGREGATEAMTFORM15G, UNIQUEIDNUMBER, DECLARATIONDATE,
								AMTOFINCPAID, DATEINCPAID,CREATEDDATE, ENTRYTYPE , CORSTATUS)
					SELECT FB.DETAILID, FB.DEDUCTEEID, FB.BRANCHID, FB.QUARTER, FB.STATUS, FB.RESIDENTIALSTATUS, FB.TAXASSESSEDFLAG, FB.LATESTASSTYR, FB.ESTIMATEDINC,
							FB.ESTIMATEDTOTALINCPRVYR, FB.TOTALNOOFFORM15G, FB.AGGREGATEAMTFORM15G, FB.UNIQUEIDNUMBER, FB.DECLARATIONDATE,
							FB.AMTOFINCPAID, FB.DATEINCPAID, FB.CREATEDDATE, 3 ,1
						FROM FORM15GBASIC FB WITH(NOLOCK)
							INNER JOIN CORRFORM15GBASIC CB
							ON FB.UNIQUEIDNUMBER = CB.UNIQUEIDNUMBER
							AND FB.BRANCHID = CB.BRANCHID
							AND FB.QUARTER = CB.QUARTER
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND CB.CORSTATUS = 4
					--INSERT CORRFORM15GINCOME STATUS 4
					INSERT INTO CORRFORM15GINCOME (SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)			
					SELECT CI.SRLNO, FB.DETAILID, CI.IDENFICATIONNUM, CI.NATUREOFINC, CI.SECTIONID, CI.AMTOFINC , 1
						FROM CORRFORM15GINCOME CI WITH(NOLOCK)
							INNER JOIN CORRFORM15GBASIC CB
								ON CB.DETAILID = CI.DETAILID
							INNER JOIN FORM15GBASIC FB
								ON CB.UNIQUEIDNUMBER = FB.UNIQUEIDNUMBER
								AND FB.BRANCHID = CB.BRANCHID
								AND FB.QUARTER = CB.QUARTER
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND CB.CORSTATUS = 4
							AND CI.CORSTATUS = 4 							
					--UPDATE FORM15GBASIC STATUS 2
					UPDATE FB 
						SET FB.DEDUCTEEID = CB.DEDUCTEEID, 
						  FB.STATUS = CB.STATUS, 
						  FB.RESIDENTIALSTATUS = CB.RESIDENTIALSTATUS,
						  FB.TAXASSESSEDFLAG = CB.TAXASSESSEDFLAG, 
						  FB.LATESTASSTYR = CB.LATESTASSTYR, 
						  FB.ESTIMATEDINC = CB.ESTIMATEDINC,
						  FB.ESTIMATEDTOTALINCPRVYR = CB.ESTIMATEDTOTALINCPRVYR, 
						  FB.TOTALNOOFFORM15G = CB.TOTALNOOFFORM15G,
						  FB.AGGREGATEAMTFORM15G = CB.AGGREGATEAMTFORM15G, 
						  FB.UNIQUEIDNUMBER = CB.UNIQUEIDNUMBER, 
						  FB.DECLARATIONDATE = CB.DECLARATIONDATE,
						  FB.AMTOFINCPAID = CB.AMTOFINCPAID,
						  FB.DATEINCPAID = CB.DATEINCPAID,
						  FB.CREATEDDATE = CB.CREATEDDATE,
						  FB.ENTRYTYPE = 3
					FROM FORM15GBASIC FB
					INNER JOIN CORRFORM15GBASIC CB
						ON FB.DETAILID = CB.DETAILID
						AND FB.BRANCHID = CB.BRANCHID
						AND FB.QUARTER = CB.QUARTER
						AND CB.CORSTATUS = 2
					WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
					--UPDATE CORRFORM15GBASIC STATUS 2
					UPDATE FB 
						SET FB.DEDUCTEEID = CB.DEDUCTEEID, 
						  FB.STATUS = CB.STATUS, 
						  FB.RESIDENTIALSTATUS = CB.RESIDENTIALSTATUS,
						  FB.TAXASSESSEDFLAG = CB.TAXASSESSEDFLAG, 
						  FB.LATESTASSTYR = CB.LATESTASSTYR, 
						  FB.ESTIMATEDINC = CB.ESTIMATEDINC,
						  FB.ESTIMATEDTOTALINCPRVYR = CB.ESTIMATEDTOTALINCPRVYR, 
						  FB.TOTALNOOFFORM15G = CB.TOTALNOOFFORM15G,
						  FB.AGGREGATEAMTFORM15G = CB.AGGREGATEAMTFORM15G, 
						  FB.UNIQUEIDNUMBER = CB.UNIQUEIDNUMBER, 
						  FB.DECLARATIONDATE = CB.DECLARATIONDATE,
						  FB.AMTOFINCPAID = CB.AMTOFINCPAID,
						  FB.DATEINCPAID = CB.DATEINCPAID,
						  FB.CREATEDDATE = CB.CREATEDDATE,
						  FB.ENTRYTYPE = 3,
						  FB.CORSTATUS = 1
					FROM CORRFORM15GBASIC FB
						INNER JOIN CORRFORM15GBASIC CB
							ON FB.DETAILID = CB.DETAILID
							AND FB.BRANCHID = CB.BRANCHID
							AND FB.QUARTER = CB.QUARTER
							AND CB.CORSTATUS = 2
					WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
							AND FB.CORSTATUS = 1
					--DELETE FORM15GINCOME STATUS 2
					DELETE FI FROM FORM15GINCOME FI
						INNER JOIN CORRFORM15GBASIC CB
							ON FI.DETAILID = CB.DETAILID
							AND CB.CORSTATUS = 2
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
					--INSERT FORM15GINCOME STATUS 2
					INSERT INTO FORM15GINCOME (SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC) 
					SELECT CI.SRLNO, FB.DETAILID, CI.IDENFICATIONNUM, CI.NATUREOFINC, CI.SECTIONID, CI.AMTOFINC 
						FROM CORRFORM15GINCOME CI WITH(NOLOCK)
							INNER JOIN FORM15GBASIC FB
							ON CI.DETAILID = FB.DETAILID
						WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
							AND CI.CORSTATUS = 2 
					--DELETE CORRFORM15GINCOME STATUS 1
					DELETE CI FROM CORRFORM15GINCOME CI
						INNER JOIN CORRFORM15GBASIC CB
							ON CI.DETAILID = CB.DETAILID
							AND CB.CORSTATUS = 1
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND CI.CORSTATUS = 1
					--INSERT CORRFORM15GINCOME STATUS 2
					INSERT INTO CORRFORM15GINCOME (INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS) 
					SELECT CI.INCOMEID, CI.SRLNO, CB.DETAILID, CI.IDENFICATIONNUM, CI.NATUREOFINC, CI.SECTIONID, CI.AMTOFINC, 1
						FROM FORM15GINCOME CI WITH(NOLOCK)
							INNER JOIN CORRFORM15GBASIC CB
							ON CI.DETAILID = CB.DETAILID
								AND CB.CORSTATUS = 1
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
					--DELETE CORRFORM15GBASIC,CORRFORM15GINCOME STATUS 2,3,4
					DELETE FROM CORRFORM15GBASIC 
						WHERE BRANCHID = @BRANCHID 
							AND QUARTER = @QUARTER
							AND CORSTATUS IN(2,3,4)
					DELETE CI FROM CORRFORM15GINCOME CI
						INNER JOIN CORRFORM15GBASIC CB
							ON CI.DETAILID = CB.DETAILID
						WHERE CB.BRANCHID = @BRANCHID 
							AND CB.QUARTER = @QUARTER
							AND CI.CORSTATUS IN(2,3,4)
					SET @ERROR=1 
					COMMIT 
				END TRY	
			BEGIN CATCH
				SET @ERROR=-1
				ROLLBACK
			END CATCH
		SELECT @ERROR
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETALLNONEMPLOYEEAUTOCOMPLETE')
DROP PROCEDURE USP_F15G_GETALLNONEMPLOYEEAUTOCOMPLETE
GO
CREATE PROCEDURE [dbo].[USP_F15G_GETALLNONEMPLOYEEAUTOCOMPLETE]
  @BRANCHID INT,    
  @PREFIXTEXT NVARCHAR(MAX),    
  @RECORDCOUNT INT    
AS    
  BEGIN 
   DECLARE @QUERY NVARCHAR(MAX);    
	 SET @QUERY = 'SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + '(CAST(D.DEDUCTEEID AS VARCHAR) + ''-'' + D.PAN+''-''+ D.REFERENCENO) AS DEDUCTEEID, 
	                      (D.NAME + ''('' + (CAST(NE.SERIALNO AS VARCHAR)) +'')'' +''-'' + D.PAN) AS NAME
		FROM  DEDUCTEE D WITH(NOLOCK) 
							INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
							ON D.DEDUCTEEID = NE.DEDUCTEEID    
		WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)  + ' AND	D.NAME LIKE ''' + @PREFIXTEXT + '%'''+
						'AND D.PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')' +
						'AND SUBSTRING(D.PAN,4,1) NOT IN(''C'')';  
	 EXEC SP_EXECUTESQL @QUERY;  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETBASICDETAILSBYDETAILID')
DROP PROCEDURE USP_F15G_GETBASICDETAILSBYDETAILID
GO
CREATE PROCEDURE [dbo].[USP_F15G_GETBASICDETAILSBYDETAILID]
	@BRANCHID INT,
	@DETAILID INT
AS
BEGIN
	SELECT B.DETAILID, B.DEDUCTEEID, (D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')-' + D.PAN) AS NAME, 
		D.PAN, D.REFERENCENO, B.STATUS, B.RESIDENTIALSTATUS, B.TAXASSESSEDFLAG, B.LATESTASSTYR, B.ESTIMATEDINC, 
		B.ESTIMATEDTOTALINCPRVYR, B.TOTALNOOFFORM15G, B.AGGREGATEAMTFORM15G, B.UNIQUEIDNUMBER, 
		B.DECLARATIONDATE, B.AMTOFINCPAID, B.DATEINCPAID
		FROM FORM15GBASIC B WITH(NOLOCK) 
			INNER JOIN DEDUCTEE D WITH(NOLOCK) 
				ON B.DEDUCTEEID = D.DEDUCTEEID AND B.BRANCHID = D.BRANCHID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
				ON D.DEDUCTEEID = NE.DEDUCTEEID    
		WHERE B.BRANCHID = @BRANCHID
			AND DETAILID = @DETAILID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETBASICDETAILSCOUNTS')
DROP PROCEDURE USP_F15G_GETBASICDETAILSCOUNTS
GO
CREATE PROCEDURE [dbo].[USP_F15G_GETBASICDETAILSCOUNTS]
    @BRANCHID INT,
    @QUARTER INT,
	@NAME NVARCHAR(75),
    @PAN VARCHAR(10),
	@ESTIMATEDINCFROM INT,
	@ESTIMATEDINCTO INT,
	@DECLARATIONDATEFROM SMALLDATETIME= NULL,
	@DECLARATIONDATETO SMALLDATETIME= NULL,
	@CUSTOMERID VARCHAR(10)
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
	SELECT COUNT(B.DETAILID) 
	FROM FORM15GBASIC B WITH(NOLOCK)
			INNER JOIN DEDUCTEE DD WITH(NOLOCK)
			ON B.DEDUCTEEID = DD.DEDUCTEEID 
	WHERE B.BRANCHID ='  + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER = ' + CAST(@QUARTER AS VARCHAR)
		IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
			END
		IF(@PAN <> '')                                  
		   BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.PAN ='''+ @PAN +'''';                                  
		   END                     
		IF(@ESTIMATEDINCFROM <> 0 OR @ESTIMATEDINCTO <> 0) 
		   BEGIN                                  
			   SET @QUERY = @QUERY + ' AND B.ESTIMATEDINC BETWEEN ' + CAST(@ESTIMATEDINCFROM AS VARCHAR) 
			                + ' AND ' + CAST(@ESTIMATEDINCTO AS VARCHAR);      
		   END
		IF(@DECLARATIONDATEFROM IS NOT NULL AND @DECLARATIONDATETO IS NOT NULL)
		   BEGIN                   
			   SET @QUERY = @QUERY + ' AND B.DECLARATIONDATE BETWEEN ''' + CAST(@DECLARATIONDATEFROM AS VARCHAR) 
			                + ''' AND ''' + CAST(@DECLARATIONDATETO AS VARCHAR) + '''';                                  
		   END 
		IF(@CUSTOMERID <> '')
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.REFERENCENO='''+ CAST(@CUSTOMERID AS VARCHAR)+'''';                                  
			END
		EXECUTE SP_EXECUTESQL @QUERY; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETBASICDETAILSFORERETURN')
DROP PROCEDURE USP_F15G_GETBASICDETAILSFORERETURN
GO
CREATE PROCEDURE [dbo].[USP_F15G_GETBASICDETAILSFORERETURN]          
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT * 
		INTO #MASTERB
		FROM DEDUCTEE WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
		SELECT DEDUCTEEID, MOBILENO
		INTO #MASTERNE
		FROM NONEMPLOYEE WITH(NOLOCK)
		WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #MASTERB)
		SELECT *
		INTO #BASICDET
		FROM FORM15GBASIC WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
			AND DETAILID IN (SELECT DETAILID FROM FORM15GINCOME WITH(NOLOCK)) 
		SELECT DD.DEDUCTEEID, DD.NAME, DD.PAN,
		   DD.ADDRESS1, DD.ADDRESS2, DD.ADDRESS3,
		   DD.ADDRESS4, DD.ADDRESS5,
		   CAST(DD.STATEID AS INT) AS STATEID, DD.PINCODE,
		   DD.EMAILADDRESS, ISNULL(NE.MOBILENO ,'') MOBILE,
		   DD.REFERENCENO, B.DETAILID, B.STATUS, B.RESIDENTIALSTATUS, 
		   B.TAXASSESSEDFLAG, B.LATESTASSTYR, B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR, 
		   B.TOTALNOOFFORM15G, B.AGGREGATEAMTFORM15G, B.UNIQUEIDNUMBER,B.DECLARATIONDATE, 
		   B.AMTOFINCPAID,B.DATEINCPAID
		INTO #TEMP
		FROM #BASICDET B WITH(NOLOCK)
				INNER JOIN #MASTERB DD WITH(NOLOCK)
						ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
				INNER JOIN #MASTERNE NE WITH(NOLOCK)  
						ON DD.DEDUCTEEID = NE.DEDUCTEEID
				INNER JOIN STATEMASTER SM WITH(NOLOCK)  
						ON DD.STATEID = SM.STATEID
		SELECT * FROM #TEMP	
		DROP TABLE #TEMP
		DROP TABLE #MASTERB
		DROP TABLE #MASTERNE
		DROP TABLE #BASICDET
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETBASICDETAILSPAGED')
DROP PROCEDURE USP_F15G_GETBASICDETAILSPAGED
GO
CREATE PROCEDURE [dbo].[USP_F15G_GETBASICDETAILSPAGED] 
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@QUARTER INT,
	@NAME NVARCHAR(75),
	@PAN VARCHAR(10),
	@ESTIMATEDINCFROM INT,
	@ESTIMATEDINCTO INT,
	@DECLARATIONDATEFROM SMALLDATETIME= NULL,
	@DECLARATIONDATETO SMALLDATETIME= NULL,
	@CUSTOMERID VARCHAR(10)
AS
	BEGIN
		DECLARE @BASICDETAILS TABLE(ID INT IDENTITY(1,1),NAME NVARCHAR(75),PAN VARCHAR(10), REFERENCENO VARCHAR(20),
		DETAILID INT,DEDUCTEEID INT, STATUS INT, RESIDENTIALSTATUS VARCHAR(3),TAXASSESSEDFLAG VARCHAR(1),LATESTASSTYR INT,
		ESTIMATEDINC INT,ESTIMATEDTOTALINCPRVYR INT,TOTALNOOFFORM15G INT,AGGREGATEAMTFORM15G INT,UNIQUEIDNUMBER VARCHAR(26),
		DECLARATIONDATE SMALLDATETIME, AMTOFINCPAID INT,DATEINCPAID SMALLDATETIME)
		DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
			SELECT DD.NAME, DD.PAN, DD.REFERENCENO, B.DETAILID, B.DEDUCTEEID,  B.STATUS, B.RESIDENTIALSTATUS, 
			       B.TAXASSESSEDFLAG, B.LATESTASSTYR, B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR, 
			       B.TOTALNOOFFORM15G, B.AGGREGATEAMTFORM15G, B.UNIQUEIDNUMBER,B.DECLARATIONDATE, 
			       B.AMTOFINCPAID,B.DATEINCPAID
			FROM FORM15GBASIC B WITH(NOLOCK)
					INNER JOIN DEDUCTEE DD WITH(NOLOCK)
					ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
			WHERE B.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER = ' + CAST(@QUARTER AS VARCHAR)
			IF(@NAME <> '')                                  
				BEGIN                  
					SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
				END 
			IF(@PAN <> '')                                  
			    BEGIN                  
				    SET @QUERY = @QUERY + ' AND DD.PAN ='''+ @PAN +'''';                                  
			    END                     
			IF(@ESTIMATEDINCFROM <> 0 OR @ESTIMATEDINCTO <> 0) 
			    BEGIN                                  
				    SET @QUERY = @QUERY + ' AND B.ESTIMATEDINC BETWEEN ' + CAST(@ESTIMATEDINCFROM AS VARCHAR) 
				                 + ' AND ' + CAST(@ESTIMATEDINCTO AS VARCHAR);      
			    END
			IF(@DECLARATIONDATEFROM IS NOT NULL AND @DECLARATIONDATETO IS NOT NULL)
			    BEGIN                   
				    SET @QUERY = @QUERY + ' AND B.DECLARATIONDATE BETWEEN ''' + CAST(@DECLARATIONDATEFROM AS VARCHAR) 
				                 + ''' AND ''' + CAST(@DECLARATIONDATETO AS VARCHAR) + '''';                                  
			    END  
			IF(@CUSTOMERID <> '')
				BEGIN                  
					SET @QUERY = @QUERY + ' AND DD.REFERENCENO='''+ CAST(@CUSTOMERID AS VARCHAR)+'''';                                  
				END
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		INSERT INTO @BASICDETAILS EXECUTE SP_EXECUTESQL @QUERY;
		SELECT TOP (@LASTREC - 1) * FROM @BASICDETAILS WHERE ID > @FIRSTREC AND ID < @LASTREC
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETCORRBASICDETAILSBYDETAILID')
DROP PROCEDURE USP_F15G_GETCORRBASICDETAILSBYDETAILID
GO
CREATE PROCEDURE USP_F15G_GETCORRBASICDETAILSBYDETAILID
	@BRANCHID INT,
	@DETAILID INT
AS
BEGIN
	SELECT B.DETAILID, B.DEDUCTEEID, (D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')-' + D.PAN) AS NAME, 
		D.PAN, D.REFERENCENO, B.STATUS, B.RESIDENTIALSTATUS, B.TAXASSESSEDFLAG, B.LATESTASSTYR, B.ESTIMATEDINC, 
		B.ESTIMATEDTOTALINCPRVYR, B.TOTALNOOFFORM15G, B.AGGREGATEAMTFORM15G, B.UNIQUEIDNUMBER, 
		B.DECLARATIONDATE, B.AMTOFINCPAID, B.DATEINCPAID, B.CORSTATUS AS CORRSTATUS
		FROM CORRFORM15GBASIC B WITH(NOLOCK) 
			INNER JOIN DEDUCTEE D  WITH(NOLOCK)
				ON B.DEDUCTEEID = D.DEDUCTEEID AND B.BRANCHID = D.BRANCHID
			INNER JOIN NONEMPLOYEE NE  WITH(NOLOCK)
				ON D.DEDUCTEEID = NE.DEDUCTEEID    
		WHERE B.BRANCHID = @BRANCHID
			AND DETAILID = @DETAILID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETCORRBASICDETAILSCOUNTS')
DROP PROCEDURE USP_F15G_GETCORRBASICDETAILSCOUNTS
GO
CREATE PROCEDURE [dbo].[USP_F15G_GETCORRBASICDETAILSCOUNTS]
    @BRANCHID INT,
    @QUARTER INT,
	@NAME NVARCHAR(75),
    @PAN VARCHAR(10),
	@ESTIMATEDINCFROM INT,
	@ESTIMATEDINCTO INT,
	@DECLARATIONDATEFROM SMALLDATETIME= NULL,
	@DECLARATIONDATETO SMALLDATETIME= NULL,
	@CUSTOMERID VARCHAR(10)
AS
BEGIN
		SELECT DETAILID, CORSTATUS, BRANCHID
		INTO #PICKED
		FROM CORRFORM15GBASIC WITH(NOLOCK)
		WHERE 
			CORSTATUS <> 1
			AND CORSTATUS <> 4
			AND BRANCHID = @BRANCHID
		SELECT * INTO CORRSTATUSTABLE FROM (
		SELECT DETAILID, CORSTATUS, BRANCHID
		FROM #PICKED
		UNION 
		SELECT DETAILID, CORSTATUS, BRANCHID
		FROM CORRFORM15GBASIC WITH(NOLOCK)
		WHERE
			CORSTATUS IN (1,4)
			AND DETAILID NOT IN (SELECT DETAILID FROM #PICKED)
			AND BRANCHID = @BRANCHID) AS CORSTATUS 
		ORDER BY CORSTATUS DESC
		DROP TABLE #PICKED 
	DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
	SELECT COUNT(B.DETAILID) 
	FROM CORRFORM15GBASIC B WITH(NOLOCK)
			INNER JOIN DEDUCTEE DD WITH(NOLOCK)
			ON B.DEDUCTEEID = DD.DEDUCTEEID
			INNER JOIN CORRSTATUSTABLE CS WITH(NOLOCK)
			ON B.DETAILID = CS.DETAILID AND B.CORSTATUS = CS.CORSTATUS AND B.BRANCHID = DD.BRANCHID 
	WHERE B.BRANCHID ='  + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER = ' + CAST(@QUARTER AS VARCHAR)
		IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
			END
		IF(@PAN <> '')                                  
		   BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.PAN ='''+ @PAN +'''';                                  
		   END                     
		IF(@ESTIMATEDINCFROM <> 0 OR @ESTIMATEDINCTO <> 0) 
		   BEGIN                                  
			   SET @QUERY = @QUERY + ' AND B.ESTIMATEDINC BETWEEN ' + CAST(@ESTIMATEDINCFROM AS VARCHAR) 
			                + ' AND ' + CAST(@ESTIMATEDINCTO AS VARCHAR);      
		   END
		IF(@DECLARATIONDATEFROM IS NOT NULL AND @DECLARATIONDATETO IS NOT NULL)
		   BEGIN                   
			   SET @QUERY = @QUERY + ' AND B.DECLARATIONDATE BETWEEN ''' + CAST(@DECLARATIONDATEFROM AS VARCHAR) 
			                + ''' AND ''' + CAST(@DECLARATIONDATETO AS VARCHAR) + '''';                                  
		   END 
		IF(@CUSTOMERID <> '')
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.REFERENCENO='''+ CAST(@CUSTOMERID AS VARCHAR)+'''';                                  
			END
		EXECUTE SP_EXECUTESQL @QUERY; 
		DROP TABLE CORRSTATUSTABLE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETCORRBASICDETAILSFORERETURN')
DROP PROCEDURE USP_F15G_GETCORRBASICDETAILSFORERETURN
GO
CREATE PROCEDURE USP_F15G_GETCORRBASICDETAILSFORERETURN          
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT * 
		INTO #MASTERB
		FROM DEDUCTEE WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
		SELECT DEDUCTEEID, MOBILENO
		INTO #MASTERNE
		FROM NONEMPLOYEE WITH(NOLOCK)
		WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #MASTERB)
		SELECT *
		INTO #BASICDET
		FROM CORRFORM15GBASIC WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
			AND DETAILID IN (SELECT DETAILID FROM CORRFORM15GINCOME WITH(NOLOCK) WHERE CORSTATUS IN(2,3,4)) 
			AND CORSTATUS IN(2,3,4)
		SELECT DD.DEDUCTEEID, DD.NAME, DD.PAN,
		   DD.ADDRESS1, DD.ADDRESS2, DD.ADDRESS3,
		   DD.ADDRESS4, DD.ADDRESS5,
		   CAST(DD.STATEID AS INT) AS STATEID, DD.PINCODE,
		   DD.EMAILADDRESS, ISNULL(NE.MOBILENO ,'') MOBILE,
		   DD.REFERENCENO, B.DETAILID, B.STATUS, B.RESIDENTIALSTATUS, 
		   B.TAXASSESSEDFLAG, B.LATESTASSTYR, B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR, 
		   B.TOTALNOOFFORM15G, B.AGGREGATEAMTFORM15G, B.UNIQUEIDNUMBER,B.DECLARATIONDATE, 
		   B.AMTOFINCPAID,B.DATEINCPAID,B.CORSTATUS
		INTO #TEMP
		FROM #BASICDET B WITH(NOLOCK)
				INNER JOIN #MASTERB DD WITH(NOLOCK)
						ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
				INNER JOIN #MASTERNE NE WITH(NOLOCK)  
						ON DD.DEDUCTEEID = NE.DEDUCTEEID
				INNER JOIN STATEMASTER SM WITH(NOLOCK)  
						ON DD.STATEID = SM.STATEID
		SELECT * FROM #TEMP	
		DROP TABLE #TEMP
		DROP TABLE #MASTERB
		DROP TABLE #MASTERNE
		DROP TABLE #BASICDET
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETCORRBASICDETAILSPAGED')
DROP PROCEDURE USP_F15G_GETCORRBASICDETAILSPAGED
GO
CREATE PROCEDURE [dbo].[USP_F15G_GETCORRBASICDETAILSPAGED]
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@QUARTER INT,
	@NAME NVARCHAR(75),
	@PAN VARCHAR(10),
	@ESTIMATEDINCFROM INT,
	@ESTIMATEDINCTO INT,
	@DECLARATIONDATEFROM SMALLDATETIME= NULL,
	@DECLARATIONDATETO SMALLDATETIME= NULL,
	@CUSTOMERID VARCHAR(10)
AS
	BEGIN
		SELECT DETAILID, CORSTATUS, BRANCHID
		INTO #PICKED
		FROM CORRFORM15GBASIC WITH(NOLOCK)
		WHERE 
			CORSTATUS <> 1
			AND CORSTATUS <> 4
			AND BRANCHID = @BRANCHID
		SELECT * INTO CORRSTATUSTABLE FROM (
		SELECT DETAILID, CORSTATUS, BRANCHID
		FROM #PICKED
		UNION 
		SELECT DETAILID, CORSTATUS, BRANCHID
		FROM CORRFORM15GBASIC WITH(NOLOCK)
		WHERE
			CORSTATUS IN (1,4)
			AND DETAILID NOT IN (SELECT DETAILID FROM #PICKED)
			AND BRANCHID = @BRANCHID) AS CORSTATUS 
		ORDER BY CORSTATUS DESC
		DROP TABLE #PICKED 
		DECLARE @BASICDETAILS TABLE(ID INT IDENTITY(1,1),NAME NVARCHAR(75),PAN VARCHAR(10), REFERENCENO VARCHAR(20),
		DETAILID INT,DEDUCTEEID INT, STATUS INT, RESIDENTIALSTATUS VARCHAR(3),TAXASSESSEDFLAG VARCHAR(1),LATESTASSTYR INT,
		ESTIMATEDINC INT,ESTIMATEDTOTALINCPRVYR INT,TOTALNOOFFORM15G INT,AGGREGATEAMTFORM15G INT,UNIQUEIDNUMBER VARCHAR(26),
		DECLARATIONDATE SMALLDATETIME, AMTOFINCPAID INT,DATEINCPAID SMALLDATETIME, CORRSTATUS INT)
		DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
			SELECT DD.NAME, DD.PAN, DD.REFERENCENO, B.DETAILID, B.DEDUCTEEID,  B.STATUS, B.RESIDENTIALSTATUS, 
			       B.TAXASSESSEDFLAG, B.LATESTASSTYR, B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR, 
			       B.TOTALNOOFFORM15G, B.AGGREGATEAMTFORM15G, B.UNIQUEIDNUMBER, B.DECLARATIONDATE, 
			       B.AMTOFINCPAID, B.DATEINCPAID , B.CORSTATUS AS CORRSTATUS
			FROM CORRFORM15GBASIC B WITH(NOLOCK) 
					INNER JOIN DEDUCTEE DD WITH(NOLOCK)
						ON B.DEDUCTEEID = DD.DEDUCTEEID 
						AND B.BRANCHID = DD.BRANCHID
					INNER JOIN CORRSTATUSTABLE CS WITH(NOLOCK)
						ON B.DETAILID = CS.DETAILID 
						AND B.CORSTATUS = CS.CORSTATUS 
						AND B.BRANCHID = CS.BRANCHID
			WHERE B.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER = ' + CAST(@QUARTER AS VARCHAR)
		IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
			END 
		IF(@PAN <> '')                                  
		    BEGIN                  
			    SET @QUERY = @QUERY + ' AND DD.PAN ='''+ @PAN +'''';                                  
		    END                     
		IF(@ESTIMATEDINCFROM <> 0 OR @ESTIMATEDINCTO <> 0) 
		    BEGIN                                  
			    SET @QUERY = @QUERY + ' AND B.ESTIMATEDINC BETWEEN ' + CAST(@ESTIMATEDINCFROM AS VARCHAR) 
			                 + ' AND ' + CAST(@ESTIMATEDINCTO AS VARCHAR);      
		    END
		IF(@DECLARATIONDATEFROM IS NOT NULL AND @DECLARATIONDATETO IS NOT NULL)
		    BEGIN                   
			    SET @QUERY = @QUERY + ' AND B.DECLARATIONDATE BETWEEN ''' + CAST(@DECLARATIONDATEFROM AS VARCHAR) 
			                 + ''' AND ''' + CAST(@DECLARATIONDATETO AS VARCHAR) + '''';                                  
		    END  
		IF(@CUSTOMERID <> '')
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.REFERENCENO='''+ CAST(@CUSTOMERID AS VARCHAR)+'''';                                  
			END
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		INSERT INTO @BASICDETAILS EXECUTE SP_EXECUTESQL @QUERY;	
		SELECT TOP (@LASTREC - 1) * FROM @BASICDETAILS WHERE ID > @FIRSTREC AND ID < @LASTREC
		DROP TABLE CORRSTATUSTABLE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETCORRINCOMEDETAILS')
DROP PROCEDURE USP_F15G_GETCORRINCOMEDETAILS
GO
CREATE PROCEDURE USP_F15G_GETCORRINCOMEDETAILS
  @BRANCHID INT,
  @QUARTER INT,
  @DETAILID INT,
  @CORRSTATUS INT
AS    
	BEGIN
		SELECT INCOMEID, CORSTATUS, DETAILID
		INTO #PICKED
		FROM CORRFORM15GINCOME WITH(NOLOCK)
		WHERE 
			CORSTATUS NOT IN (1,4)
			AND CORSTATUS <> 1
			AND DETAILID = @DETAILID			
		SELECT * INTO CORRSTATUSTABLEINC FROM (
		SELECT INCOMEID, CORSTATUS, DETAILID
		FROM #PICKED
		UNION 
		SELECT INCOMEID, CORSTATUS, DETAILID
		FROM CORRFORM15GINCOME WITH(NOLOCK)
		WHERE
			CORSTATUS IN (1,4)
			AND CORSTATUS <> 1
			AND INCOMEID NOT IN (SELECT INCOMEID FROM #PICKED)
			AND DETAILID = @DETAILID) AS CORSTATUSINC 
		ORDER BY CORSTATUS DESC
		DROP TABLE #PICKED  
		SELECT DISTINCT I.INCOMEID, B.DETAILID, B.DEDUCTEEID, DD.NAME, B.UNIQUEIDNUMBER, 
			   I.IDENFICATIONNUM, I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC, I.CORSTATUS
		FROM CORRFORM15GINCOME I WITH(NOLOCK)
			INNER JOIN CORRFORM15GBASIC B WITH(NOLOCK)
				ON I.DETAILID = B.DETAILID
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON I.SECTIONID = T.SECTIONID
			INNER JOIN DEDUCTEE DD WITH(NOLOCK)
				ON B.DEDUCTEEID = DD.DEDUCTEEID 
				AND B.BRANCHID = DD.BRANCHID
			INNER JOIN CORRSTATUSTABLEINC CS WITH(NOLOCK)
				ON I.INCOMEID = CS.INCOMEID 
				AND I.CORSTATUS = CS.CORSTATUS 
				AND I.DETAILID = CS.DETAILID
		WHERE B.DETAILID = @DETAILID 
			AND B.BRANCHID = @BRANCHID 
			AND B.QUARTER  = @QUARTER
		DROP TABLE CORRSTATUSTABLEINC 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETCORRINCOMEDETAILSBYINCOMEID')
DROP PROCEDURE USP_F15G_GETCORRINCOMEDETAILSBYINCOMEID
GO
CREATE PROCEDURE [dbo].[USP_F15G_GETCORRINCOMEDETAILSBYINCOMEID]
	@INCOMEID INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT I.INCOMEID, B.DETAILID, B.DEDUCTEEID, 
			(D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR)+ ')-' + D.PAN) AS NAME,
		    SUBSTRING(B.UNIQUEIDNUMBER, 1, 10) UNIQUEIDNUMBER, I.IDENFICATIONNUM, 
		    I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC, I.CORSTATUS
		FROM  CORRFORM15GINCOME I WITH(NOLOCK)
			INNER JOIN CORRFORM15GBASIC B WITH(NOLOCK)
				ON I.DETAILID = B.DETAILID
					AND B.CORSTATUS =2
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON I.SECTIONID = T.SECTIONID
			INNER JOIN DEDUCTEE D WITH(NOLOCK)
				ON B.DEDUCTEEID = D.DEDUCTEEID AND B.BRANCHID = D.BRANCHID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
				ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE B.BRANCHID = @BRANCHID 
			AND I.INCOMEID = @INCOMEID 
			AND I.CORSTATUS =2 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETCORRINCOMEDETAILSFORERETURN')
DROP PROCEDURE USP_F15G_GETCORRINCOMEDETAILSFORERETURN
GO
CREATE PROCEDURE USP_F15G_GETCORRINCOMEDETAILSFORERETURN
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT DETAILID
		INTO #BDETAIL
		FROM CORRFORM15GBASIC WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
			AND QUARTER = @QUARTER
			AND CORSTATUS IN(2,3,4)	
		SELECT I.INCOMEID, I.DETAILID, 0 DEDUCTEEID, '' NAME, '0' UNIQUEIDNUMBER, 
			   I.IDENFICATIONNUM, I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC, I.CORSTATUS
		INTO #TEMP
		FROM CORRFORM15GINCOME I WITH(NOLOCK)
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON I.SECTIONID = T.SECTIONID
		WHERE I.DETAILID IN (SELECT DETAILID FROM #BDETAIL)
			AND CORSTATUS IN(2,3,4)
		SELECT * FROM #TEMP			
		DROP TABLE #TEMP
		DROP TABLE #BDETAIL
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETEXCLUDEDRECORDS')
DROP PROCEDURE USP_F15G_GETEXCLUDEDRECORDS
GO
CREATE PROCEDURE USP_F15G_GETEXCLUDEDRECORDS 
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT E.SERIALNO, D.REFERENCENO, D.NAME, D.PAN, D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5,
			S.STATENAME, D.PINCODE, E.MOBILENO, D.EMAILADDRESS
		FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE E WITH(NOLOCK) 
			   ON D.DEDUCTEEID = E.DEDUCTEEID 
			INNER JOIN FORM15GBASIC B WITH(NOLOCK)
			   ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID 
			INNER JOIN STATEMASTER S WITH(NOLOCK)
			   ON S.STATEID = D.STATEID 
		WHERE
			D.BRANCHID = @BRANCHID AND B.QUARTER = @QUARTER AND
			(LEN(ISNULL(E.MOBILENO,'')) = 0 OR LEN(ISNULL(D.EMAILADDRESS,'')) = 0)
	    GROUP BY E.SERIALNO, D.REFERENCENO, D.NAME, D.PAN, D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5,
			S.STATENAME, D.PINCODE, E.MOBILENO, D.EMAILADDRESS 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETINCOMEDETAILS')
DROP PROCEDURE USP_F15G_GETINCOMEDETAILS
GO
CREATE PROCEDURE [USP_F15G_GETINCOMEDETAILS]
  @BRANCHID INT,
  @QUARTER INT,
  @DETAILID INT
AS    
	BEGIN 
         SELECT I.INCOMEID, B.DETAILID, B.DEDUCTEEID, DD.NAME, B.UNIQUEIDNUMBER, 
			I.IDENFICATIONNUM, I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC
		 FROM FORM15GINCOME I WITH(NOLOCK)
			INNER JOIN FORM15GBASIC B WITH(NOLOCK)
				ON I.DETAILID = B.DETAILID
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON I.SECTIONID = T.SECTIONID
			INNER JOIN DEDUCTEE DD WITH(NOLOCK)
				ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
		 WHERE B.DETAILID = @DETAILID 
			AND B.BRANCHID = @BRANCHID 
			AND B.QUARTER  = @QUARTER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETINCOMEDETAILSBYINCOMEID')
DROP PROCEDURE USP_F15G_GETINCOMEDETAILSBYINCOMEID
GO
CREATE PROCEDURE [USP_F15G_GETINCOMEDETAILSBYINCOMEID]
	@INCOMEID INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT I.INCOMEID, B.DETAILID, B.DEDUCTEEID, 
			(D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR)+ ')-' + D.PAN) AS NAME,
		    SUBSTRING(B.UNIQUEIDNUMBER, 1, 10) UNIQUEIDNUMBER, I.IDENFICATIONNUM, 
		    I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC
		FROM  FORM15GINCOME I WITH(NOLOCK)
			INNER JOIN FORM15GBASIC B WITH(NOLOCK)
				ON I.DETAILID = B.DETAILID
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON I.SECTIONID = T.SECTIONID
			INNER JOIN DEDUCTEE D WITH(NOLOCK)
				ON B.DEDUCTEEID = D.DEDUCTEEID AND B.BRANCHID = D.BRANCHID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
				ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE B.BRANCHID = @BRANCHID 
			AND I.INCOMEID = @INCOMEID  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETINCOMEDETAILSFORERETURN')
DROP PROCEDURE USP_F15G_GETINCOMEDETAILSFORERETURN
GO
CREATE PROCEDURE [dbo].[USP_F15G_GETINCOMEDETAILSFORERETURN] 
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT DETAILID
		INTO #BDETAIL
		FROM FORM15GBASIC WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
			AND QUARTER = @QUARTER	
		SELECT I.INCOMEID, I.DETAILID, 0 DEDUCTEEID, '' NAME, '0' UNIQUEIDNUMBER, 
			   I.IDENFICATIONNUM, I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC
		INTO #TEMP
		FROM FORM15GINCOME I WITH(NOLOCK)
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON I.SECTIONID = T.SECTIONID
		WHERE I.DETAILID IN (SELECT DETAILID FROM #BDETAIL)
		SELECT * FROM #TEMP			
		DROP TABLE #TEMP
		DROP TABLE #BDETAIL
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_GETINCOMEDETAILSPAGED')
DROP PROCEDURE USP_F15G_GETINCOMEDETAILSPAGED
GO
CREATE PROCEDURE USP_F15G_GETINCOMEDETAILSPAGED
	@STARTROW INT,									  
	@PAGESIZE INT,
	@BRANCHID INT,
	@QUARTER INT,
	@NAME NVARCHAR(75),
	@PAN VARCHAR(10),
	@SECTIONNAME VARCHAR(10),
	@AMOUNTFROM INT,
	@AMOUNTTO INT
AS
	BEGIN
		DECLARE @INCOMEDETAILS TABLE(ID INT IDENTITY(1,1), INCOMEID INT,DETAILID INT, DEDUCTEEID INT, NAME VARCHAR(75),UNIQUEIDNUMBER VARCHAR(26),IDENFICATIONNUM VARCHAR(125), 
		NATUREOFINC VARCHAR(125),SECTIONNAME VARCHAR(10),AMTOFINC INT)
		DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
			SELECT I.INCOMEID, B.DETAILID, B.DEDUCTEEID, DD.NAME, B.UNIQUEIDNUMBER, I.IDENFICATIONNUM, I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC
			FROM FORM15GINCOME I WITH(NOLOCK)
			INNER JOIN FORM15GBASIC B WITH(NOLOCK)
			ON I.DETAILID = B.DETAILID
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
			ON I.SECTIONID = T.SECTIONID
			INNER JOIN DEDUCTEE DD WITH(NOLOCK)
			ON B.DEDUCTEEID = DD.DEDUCTEEID 
			WHERE B.BRANCHID ='  + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER =' + CAST(@QUARTER AS VARCHAR)
			IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
			END
			IF(@PAN <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.PAN ='''+ CAST(@PAN AS VARCHAR)+'''';                                  
			END
			IF(@SECTIONNAME <> '-1')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND T.SECTIONNAME ='''+ CAST(@SECTIONNAME AS VARCHAR)+'''';                                  
			END
			IF(@AMOUNTFROM <> 0 OR @AMOUNTTO <> 0) 
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND I.AMTOFINC BETWEEN ' + CAST(@AMOUNTFROM AS VARCHAR) 
				+ ' AND ' + CAST(@AMOUNTTO AS VARCHAR);      
			END
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		INSERT INTO @INCOMEDETAILS EXECUTE SP_EXECUTESQL @QUERY;
		SELECT TOP (@LASTREC - 1) * FROM @INCOMEDETAILS WHERE ID > @FIRSTREC AND ID < @LASTREC
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_SAVEBASICDETAILS')
DROP PROCEDURE USP_F15G_SAVEBASICDETAILS
GO
CREATE PROCEDURE USP_F15G_SAVEBASICDETAILS 
	@DETAILID INT = -1,	
	@PAN VARCHAR(10),
	@DEDUCTEEID INT,
	@BRANCHID INT ,
	@QUARTER INT,
	@STATUS INT,
	@RESIDENTIALSTATUS VARCHAR(3),
	@TAXASSESSEDFLAG VARCHAR(1),
	@LATESTASSTYR INT,
	@ESTIMATEDINC INT,
	@ESTIMATEDTOTALINCPRVYR INT,
	@TOTALNOOFFORM15G INT,
	@AGGREGATEAMTFORM15G INT,
	@FINYEARTAN VARCHAR(16),
	@UNIQUEIDNUMBER VARCHAR(26),
	@DECLARATIONDATE SMALLDATETIME,
	@AMTOFINCPAID INT,
	@DATEINCPAID SMALLDATETIME,
	@ISUPDATEINC BIT,
	@ISUINMANUAL INT = 0
AS
BEGIN
	DECLARE @DEDCHECK TINYINT
	SET @DEDCHECK = 0
	IF(@ISUINMANUAL <> 1)
		BEGIN
			IF((SELECT COUNT(DEDUCTEEID) 
			   FROM DEDUCTEE 
			   WHERE DEDUCTEEID IN(
									SELECT DEDUCTEEID 
									FROM FORM15GBASIC WITH(NOLOCK) 
									WHERE DEDUCTEEID = @DEDUCTEEID
								   ) 
							AND PAN = @PAN) <> 0 AND @DETAILID = -1)
				BEGIN	
					SET @DEDCHECK = 1
				END 
		END
	IF(@DEDCHECK = 1)
		BEGIN	
			SELECT 0
		END
	ELSE
		BEGIN
			DECLARE @STRLEN TINYINT 
			SET @STRLEN = 9
			DECLARE @UNIQUEID INT
			DECLARE @FINALUIN INT
		   IF(@ISUINMANUAL = 1)
				BEGIN
					SET @UNIQUEID = SUBSTRING(@UNIQUEIDNUMBER, 2,9) 
					SET @FINALUIN = @UNIQUEID	  
				END
			ELSE
				BEGIN
					SET @UNIQUEID = ISNULL((SELECT MAX(SUBSTRING(UNIQUEIDNUMBER, 2,9)) FROM FORM15GBASIC WITH(NOLOCK) WHERE BRANCHID = @BRANCHID), 0) + 1 
					SET @FINALUIN = NULL --(SELECT TOP 1 SUBSTRING(UNIQUEIDNUMBER, 2,9) FROM FORM15GBASIC WITH(NOLOCK) 
					--							WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID ORDER BY UNIQUEIDNUMBER DESC)
					IF(@FINALUIN IS NULL OR @FINALUIN = '')
						BEGIN
							SET @FINALUIN = @UNIQUEID
						END	
				END
			IF(@DETAILID = -1)  
				BEGIN 
					INSERT INTO FORM15GBASIC(DEDUCTEEID, BRANCHID, QUARTER, STATUS, RESIDENTIALSTATUS, TAXASSESSEDFLAG, 
						LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G, AGGREGATEAMTFORM15G, 
						UNIQUEIDNUMBER, 
						DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID, CREATEDDATE, ENTRYTYPE)  
					VALUES (@DEDUCTEEID, @BRANCHID,@QUARTER, @STATUS, @RESIDENTIALSTATUS, @TAXASSESSEDFLAG, 
						@LATESTASSTYR, @ESTIMATEDINC, @ESTIMATEDTOTALINCPRVYR, @TOTALNOOFFORM15G, @AGGREGATEAMTFORM15G, 
						'G' + CAST(REPLACE(STR(@FINALUIN, @STRLEN), ' ', '0') AS VARCHAR) + @FINYEARTAN, 
						@DECLARATIONDATE, @AMTOFINCPAID, 
						@DATEINCPAID, GETDATE(), 1)
					SELECT @FINALUIN
				END
			ELSE
				BEGIN
					IF(LEN(@UNIQUEIDNUMBER) <> 10)
						BEGIN
							UPDATE FORM15GBASIC
							SET DEDUCTEEID = @DEDUCTEEID, STATUS = @STATUS, RESIDENTIALSTATUS = @RESIDENTIALSTATUS, 
								TAXASSESSEDFLAG = @TAXASSESSEDFLAG, LATESTASSTYR = @LATESTASSTYR, ESTIMATEDINC = @ESTIMATEDINC, 
								ESTIMATEDTOTALINCPRVYR = @ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G = @TOTALNOOFFORM15G, 
								AGGREGATEAMTFORM15G = @AGGREGATEAMTFORM15G, 
								UNIQUEIDNUMBER = 'G' + CAST(REPLACE(STR(@FINALUIN, @STRLEN), ' ', '0') AS VARCHAR) + @FINYEARTAN, 
								DECLARATIONDATE = @DECLARATIONDATE, AMTOFINCPAID = @AMTOFINCPAID, DATEINCPAID = @DATEINCPAID
								WHERE DETAILID = @DETAILID
							SELECT -1
						END
					ELSE
						BEGIN
							 IF(@ISUINMANUAL = 1)
								BEGIN
									UPDATE FORM15GBASIC
									SET DEDUCTEEID = @DEDUCTEEID, STATUS = @STATUS, RESIDENTIALSTATUS = @RESIDENTIALSTATUS, 
										TAXASSESSEDFLAG = @TAXASSESSEDFLAG, LATESTASSTYR = @LATESTASSTYR, ESTIMATEDINC = @ESTIMATEDINC, 
										ESTIMATEDTOTALINCPRVYR = @ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G = @TOTALNOOFFORM15G, 
										AGGREGATEAMTFORM15G = @AGGREGATEAMTFORM15G,
										UNIQUEIDNUMBER = 'G' + CAST(REPLACE(STR(@FINALUIN, @STRLEN), ' ', '0') AS VARCHAR) + @FINYEARTAN, 
										DECLARATIONDATE = @DECLARATIONDATE, AMTOFINCPAID = @AMTOFINCPAID, DATEINCPAID = @DATEINCPAID
									WHERE DETAILID = @DETAILID
									SELECT -1
								END
							 ELSE
								BEGIN
									UPDATE FORM15GBASIC
									SET DEDUCTEEID = @DEDUCTEEID, STATUS = @STATUS, RESIDENTIALSTATUS = @RESIDENTIALSTATUS, 
										TAXASSESSEDFLAG = @TAXASSESSEDFLAG, LATESTASSTYR = @LATESTASSTYR, ESTIMATEDINC = @ESTIMATEDINC, 
										ESTIMATEDTOTALINCPRVYR = @ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G = @TOTALNOOFFORM15G, 
										AGGREGATEAMTFORM15G = @AGGREGATEAMTFORM15G, 
										DECLARATIONDATE = @DECLARATIONDATE, AMTOFINCPAID = @AMTOFINCPAID, DATEINCPAID = @DATEINCPAID
									WHERE DETAILID = @DETAILID
									SELECT -1
								END
						END
					--Update the ESTIMATEDINC in FORM15GBASIC
					IF(@ISUPDATEINC=1)
						BEGIN
							SELECT B.DETAILID, SUM(I.AMTOFINC) INC
								INTO #INCSUM15G
								FROM FORM15GBASIC B WITH(NOLOCK)
									INNER JOIN FORM15GINCOME I
										ON B.DETAILID = I.DETAILID 
								WHERE B.DETAILID = @DETAILID
								GROUP BY B.DETAILID
								UPDATE FORM15GBASIC SET ESTIMATEDINC = I.INC
								FROM FORM15GBASIC B 
									INNER JOIN #INCSUM15G I
										ON B.DETAILID = I.DETAILID 
								DROP TABLE #INCSUM15G
						END
				END
			EXEC USP_F15GH_UPDATEUINANDPAYMENTMADEBASEDONDEDUCTEEID @QUARTER, @BRANCHID, @DEDUCTEEID, 1
		END
END	

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_SAVECORRBASICDETAILS')
DROP PROCEDURE USP_F15G_SAVECORRBASICDETAILS
GO
CREATE PROCEDURE [dbo].[USP_F15G_SAVECORRBASICDETAILS] 
	@DETAILID INT = -1,	
	@PAN VARCHAR(10),
	@DEDUCTEEID INT,
	@BRANCHID INT ,
	@QUARTER INT,
	@STATUS INT,
	@RESIDENTIALSTATUS VARCHAR(3),
	@TAXASSESSEDFLAG VARCHAR(1),
	@LATESTASSTYR INT,
	@ESTIMATEDINC INT,
	@ESTIMATEDTOTALINCPRVYR INT,
	@TOTALNOOFFORM15G INT,
	@AGGREGATEAMTFORM15G INT,
	@FINYEARTAN VARCHAR(16),
	@UNIQUEIDNUMBER VARCHAR(26),
	@DECLARATIONDATE SMALLDATETIME,
	@AMTOFINCPAID INT,
	@DATEINCPAID SMALLDATETIME,
	@ISUPDATEINC BIT
AS
BEGIN
	IF((SELECT COUNT(DEDUCTEEID) FROM DEDUCTEE WITH(NOLOCK) WHERE DEDUCTEEID IN(SELECT DEDUCTEEID FROM CORRFORM15GBASIC WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID) AND PAN=@PAN) <> 0 AND @DETAILID = -1)
		BEGIN
			SELECT 0
		END
	ELSE
		BEGIN
			DECLARE @STRLEN TINYINT 
			SET @STRLEN = 9
			--Set the velue of DETAILID
			DECLARE @BASICDETAILID INT
			SET @BASICDETAILID = (SELECT MAX(DETAILID) DETAILID FROM FORM15GBASIC WITH(NOLOCK))	
			DECLARE @CORRBASICDETAILID INT
			SET @CORRBASICDETAILID = (SELECT MAX(DETAILID) DETAILID FROM CORRFORM15GBASIC WITH(NOLOCK))
			DECLARE @DETAILIDMAX INT
			SET @DETAILIDMAX =  CASE WHEN @BASICDETAILID > @CORRBASICDETAILID  THEN @BASICDETAILID ELSE @CORRBASICDETAILID END
			--Set the velue of UNIQUEIDNUMBER
			DECLARE @BASICUIN INT
			SET @BASICUIN = ISNULL((SELECT MAX(SUBSTRING(UNIQUEIDNUMBER, 2,9)) UIN FROM FORM15GBASIC WITH(NOLOCK) WHERE BRANCHID = @BRANCHID), 0)	
			DECLARE @CORRBASICUIN INT
			SET @CORRBASICUIN = ISNULL((SELECT MAX(SUBSTRING(UNIQUEIDNUMBER, 2,9)) UIN FROM CORRFORM15GBASIC WITH(NOLOCK) WHERE BRANCHID = @BRANCHID), 0)
			DECLARE @UNIQUEID INT
			SET @UNIQUEID = CASE WHEN @BASICUIN > @CORRBASICUIN  THEN @BASICUIN ELSE @CORRBASICUIN END
			DECLARE @FINALUIN INT 
			SET @FINALUIN = NULL
			IF(@FINALUIN IS NULL OR @FINALUIN = '')
				BEGIN
					SET @FINALUIN = @UNIQUEID + 1
				END							
			IF(@DETAILID = -1)  
				BEGIN 
					INSERT INTO CORRFORM15GBASIC(DETAILID, DEDUCTEEID, BRANCHID, QUARTER, STATUS, RESIDENTIALSTATUS, TAXASSESSEDFLAG, 
						LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G, AGGREGATEAMTFORM15G, 
						UNIQUEIDNUMBER, 
						DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID, CREATEDDATE, ENTRYTYPE, CORSTATUS)  
					VALUES (@DETAILIDMAX +1, @DEDUCTEEID, @BRANCHID,@QUARTER, @STATUS, @RESIDENTIALSTATUS, @TAXASSESSEDFLAG, 
						@LATESTASSTYR, @ESTIMATEDINC, @ESTIMATEDTOTALINCPRVYR, @TOTALNOOFFORM15G, @AGGREGATEAMTFORM15G, 
						'G' + CAST(REPLACE(STR(@FINALUIN, @STRLEN), ' ', '0') AS VARCHAR) + @FINYEARTAN, 
						@DECLARATIONDATE, @AMTOFINCPAID, 
						@DATEINCPAID, GETDATE(), 1, 4)
					SELECT @FINALUIN
				END
			ELSE
				BEGIN
				DELETE FROM CORRFORM15GBASIC WHERE DETAILID = @DETAILID AND BRANCHID = @BRANCHID AND CORSTATUS IN(2,3)
				DELETE FROM CORRFORM15GINCOME WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3)
				INSERT INTO CORRFORM15GBASIC(DETAILID, DEDUCTEEID, BRANCHID, QUARTER, STATUS, RESIDENTIALSTATUS, TAXASSESSEDFLAG, 
						LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15G, AGGREGATEAMTFORM15G, 
						UNIQUEIDNUMBER, DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID, CREATEDDATE, ENTRYTYPE, CORSTATUS)  
					VALUES (@DETAILID, @DEDUCTEEID, @BRANCHID,@QUARTER, @STATUS, @RESIDENTIALSTATUS, @TAXASSESSEDFLAG, 
						@LATESTASSTYR, @ESTIMATEDINC, @ESTIMATEDTOTALINCPRVYR, @TOTALNOOFFORM15G, @AGGREGATEAMTFORM15G, 
						@UNIQUEIDNUMBER, @DECLARATIONDATE, @AMTOFINCPAID, @DATEINCPAID, GETDATE(), 1, 2)
				INSERT INTO CORRFORM15GINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)		
				SELECT INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, 2 AS CORSTATUS
					FROM CORRFORM15GINCOME WITH(NOLOCK)
					WHERE DETAILID = @DETAILID AND CORSTATUS IN(1,4)
				SELECT -1
				END	
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_SAVECORRINCOMEDETAILS')
DROP PROCEDURE USP_F15G_SAVECORRINCOMEDETAILS
GO
CREATE PROCEDURE [dbo].[USP_F15G_SAVECORRINCOMEDETAILS] 
	@INCOMEID INT = -1,
	@SRLNO INT = 0,
	@DETAILID INT,
	@IDENFICATIONNUM VARCHAR(125),
	@NATUREOFINC VARCHAR(125),
	@SECTIONNAME VARCHAR(5),
	@AMTOFINC INT,
	@ISUPDATEINC BIT
AS
BEGIN
    DECLARE @SECTIONID INT
    SET @SECTIONID = (SELECT SECTIONID 
                        FROM TAXSECTIONS WITH(NOLOCK)
                        WHERE FORMID = 2 
							AND SECTIONNAME = @SECTIONNAME)
	DECLARE @INCOMEIDS INT
	SET @INCOMEIDS = (SELECT MAX(INCOMEID) INCOMEID FROM FORM15GINCOME WITH(NOLOCK))	
	DECLARE @CORRINCOMEID INT
	SET @CORRINCOMEID = (SELECT MAX(INCOMEID) INCOMEID FROM CORRFORM15GINCOME WITH(NOLOCK))
	DECLARE @INCOMEIDMAX INT
	SET @INCOMEIDMAX =  CASE WHEN @INCOMEIDS > @CORRINCOMEID  THEN @INCOMEIDS ELSE @CORRINCOMEID END
	DECLARE @CORSTATUS INT
	SET @CORSTATUS = (SELECT MAX(CORSTATUS) FROM CORRFORM15GBASIC WITH(NOLOCK) WHERE DETAILID = @DETAILID)							
	IF (@INCOMEID = -1 AND @CORSTATUS = 4)  
		BEGIN 
			INSERT INTO CORRFORM15GINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)  
				   VALUES (@INCOMEIDMAX + 1, @SRLNO, @DETAILID, @IDENFICATIONNUM, @NATUREOFINC, @SECTIONID, @AMTOFINC, 4)
			SELECT -1
		END
	ELSE
		BEGIN
				DELETE FROM CORRFORM15GINCOME WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(2)				
				INSERT INTO CORRFORM15GINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)  
				SELECT INCOMEID, SRLNO, DETAILID, @IDENFICATIONNUM, @NATUREOFINC, @SECTIONID, @AMTOFINC, 2 AS CORSTATUS
					FROM CORRFORM15GINCOME WITH(NOLOCK)
					WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(1)
		SELECT -1
		END
	--UPDATE THE ESTIMATEDINC IN FORM15GBASIC
		IF(@ISUPDATEINC=1)
			BEGIN
				SELECT B.DETAILID, SUM(I.AMTOFINC) INC ,B.CORSTATUS
					INTO #INCSUM15G
					FROM CORRFORM15GBASIC B WITH(NOLOCK)
						INNER JOIN CORRFORM15GINCOME I
							ON B.DETAILID = I.DETAILID 
					WHERE B.DETAILID = @DETAILID
					GROUP BY B.DETAILID, B.CORSTATUS
					UPDATE CORRFORM15GBASIC SET ESTIMATEDINC = I.INC
					FROM CORRFORM15GBASIC B 
						INNER JOIN #INCSUM15G I
							ON B.DETAILID = I.DETAILID
							AND B.CORSTATUS = I.CORSTATUS 
					DROP TABLE #INCSUM15G
			END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15G_SAVEINCOMEDETAILS')
DROP PROCEDURE USP_F15G_SAVEINCOMEDETAILS
GO
CREATE PROCEDURE [dbo].[USP_F15G_SAVEINCOMEDETAILS] 
	@INCOMEID INT = -1,
	@SRLNO INT = 0,
	@DETAILID INT,
	@IDENFICATIONNUM VARCHAR(125),
	@NATUREOFINC VARCHAR(125),
	@SECTIONNAME VARCHAR(5),
	@AMTOFINC INT,
	@ISUPDATEINC BIT
AS
BEGIN
    DECLARE @SECTIONID INT
    SET @SECTIONID = (SELECT SECTIONID 
                        FROM TAXSECTIONS WITH(NOLOCK)
                        WHERE FORMID = 2 
							AND SECTIONNAME = @SECTIONNAME)
	IF (@INCOMEID = -1)  
	BEGIN 
		INSERT INTO FORM15GINCOME(SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC)  
		       VALUES (@SRLNO, @DETAILID, @IDENFICATIONNUM, @NATUREOFINC, @SECTIONID, @AMTOFINC)
	    SELECT -1
	END
	ELSE
	BEGIN
		UPDATE FORM15GINCOME
			SET DETAILID = @DETAILID, IDENFICATIONNUM = @IDENFICATIONNUM, NATUREOFINC = @NATUREOFINC, 
			    SECTIONID = @SECTIONID, AMTOFINC = @AMTOFINC
		WHERE INCOMEID = @INCOMEID
		SELECT @INCOMEID
	END
	--Update the ESTIMATEDINC in FORM15GBASIC
	IF(@ISUPDATEINC=1)
			BEGIN
				SELECT B.DETAILID, SUM(I.AMTOFINC) INC
					INTO #INCSUM15G
					FROM FORM15GBASIC B WITH(NOLOCK)
						INNER JOIN FORM15GINCOME I
							ON B.DETAILID = I.DETAILID 
					WHERE B.DETAILID = @DETAILID
					GROUP BY B.DETAILID
					UPDATE FORM15GBASIC SET ESTIMATEDINC = I.INC
					FROM FORM15GBASIC B 
						INNER JOIN #INCSUM15G I
							ON B.DETAILID = I.DETAILID 
					DROP TABLE #INCSUM15G
			END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_BULKERETURNF15GHBRANCHES')
DROP PROCEDURE USP_F15GH_BULKERETURNF15GHBRANCHES
GO
CREATE PROCEDURE [dbo].[USP_F15GH_BULKERETURNF15GHBRANCHES]
	@PAGEINDEX INT,  
	@PAGESIZE INT,  
	@FORMID INT,  
	@QUARTER INT,  
	@BRANCHID INT  
AS  
	BEGIN  
		DECLARE @FIRSTREC INT, @LASTREC INT  
		SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE  
		SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);  
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @TABLENAME VARCHAR(25);
IF (@FORMID = 1)
	BEGIN
		SELECT BRANCHID, QUARTER, 5 AS FORMID INTO #ERETURNVALIDBRANCHES15G FROM
		(SELECT BASICDET.BRANCHID, BASICDET.QUARTER FROM
		(SELECT COUNT(DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15GBASIC 
		GROUP BY BRANCHID, QUARTER) BASICDET 
	INNER JOIN 
		(SELECT COUNT(DISTINCT I.DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15GBASIC B INNER JOIN FORM15GINCOME I
		ON B.DETAILID = I.DETAILID 
		GROUP BY BRANCHID, QUARTER) INCOMEDET
		ON BASICDET.DETIDCOUNT = INCOMEDET.DETIDCOUNT
		WHERE BASICDET.QUARTER = 1) FINAL15G
	END
ELSE
	BEGIN
		SELECT BRANCHID, QUARTER,  6 AS FORMID INTO #ERETURNVALIDBRANCHES15H FROM
		(SELECT BASICDET.BRANCHID, BASICDET.QUARTER FROM
		(SELECT COUNT(DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15HBASIC 
		GROUP BY BRANCHID, QUARTER) BASICDET 
	INNER JOIN 
		(SELECT COUNT(DISTINCT I.DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15HBASIC B INNER JOIN FORM15HINCOME I
		ON B.DETAILID = I.DETAILID 
		GROUP BY BRANCHID, QUARTER) INCOMEDET
		ON BASICDET.DETIDCOUNT = INCOMEDET.DETIDCOUNT
		WHERE BASICDET.QUARTER = @QUARTER) FINAL15H
	END
	IF (@FORMID = 1)
		BEGIN
			SET @TABLENAME = '#ERETURNVALIDBRANCHES15G';
		END
	ELSE
		BEGIN
			SET @TABLENAME = '#ERETURNVALIDBRANCHES15H';
		END
	SET @SQLQUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #VALIDBRANCHES  
			FROM  
			(  
				SELECT BRANCHCODE,BRANCHNAME,EVD.BRANCHID,CASE WHEN EVD.FORMID = 5 THEN 1 ELSE 2 END FORMID,FORMNAME,EVD.QUARTER, ISNULL(ISREQACTIVE,0) ISREQACTIVE FROM COMPANYBRANCH CB WITH(NOLOCK) 
				INNER JOIN ' + @TABLENAME + ' EVD ON EVD.BRANCHID = CB.BRANCHID   
				INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = EVD.FORMID  
				LEFT JOIN   
				(  
					SELECT BRANCHID,FORMID,QUARTER,ISREQACTIVE FROM ACKNO15GH WITH(NOLOCK) WHERE ISNULL(ISREQACTIVE,0) <> 0 AND ISNULL(ISVALID, 0) <> 1
				)TEMP ON EVD.BRANCHID = TEMP.BRANCHID AND EVD.FORMID = TEMP.FORMID AND EVD.QUARTER = TEMP.QUARTER  
			WHERE EVD.QUARTER = '+CAST(@QUARTER AS VARCHAR)
	IF(@BRANCHID <> -1)  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND EVD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)  
		END
		SET @SQLQUERY = @SQLQUERY + 'GROUP BY BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,ISREQACTIVE)FINAL ORDER BY BRANCHCODE;SELECT * FROM #VALIDBRANCHES WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);
	EXEC SP_EXECUTESQL @SQLQUERY;  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_BULKERETURNF15GHBRANCHESCOUNT')
DROP PROCEDURE USP_F15GH_BULKERETURNF15GHBRANCHESCOUNT
GO
CREATE PROCEDURE [dbo].[USP_F15GH_BULKERETURNF15GHBRANCHESCOUNT]  
	@FORMID INT,  
	@QUARTER INT,  
	@BRANCHID INT  
AS  
	BEGIN    
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @TABLENAME VARCHAR(25);
IF (@FORMID = 1)
	BEGIN
		SELECT BRANCHID, QUARTER, 5 AS FORMID INTO #ERETURNVALIDBRANCHES15G FROM
		(SELECT BASICDET.BRANCHID, BASICDET.QUARTER FROM
		(SELECT COUNT(DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15GBASIC 
		GROUP BY BRANCHID, QUARTER) BASICDET 
	INNER JOIN 
		(SELECT COUNT(DISTINCT I.DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15GBASIC B INNER JOIN FORM15GINCOME I
		ON B.DETAILID = I.DETAILID 
		GROUP BY BRANCHID, QUARTER) INCOMEDET
		ON BASICDET.DETIDCOUNT = INCOMEDET.DETIDCOUNT
		WHERE BASICDET.QUARTER = 1) FINAL15G
	END
ELSE
	BEGIN
		SELECT BRANCHID, QUARTER,  6 AS FORMID INTO #ERETURNVALIDBRANCHES15H FROM
		(SELECT BASICDET.BRANCHID, BASICDET.QUARTER FROM
		(SELECT COUNT(DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15HBASIC 
		GROUP BY BRANCHID, QUARTER) BASICDET 
	INNER JOIN 
		(SELECT COUNT(DISTINCT I.DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15HBASIC B INNER JOIN FORM15HINCOME I
		ON B.DETAILID = I.DETAILID 
		GROUP BY BRANCHID, QUARTER) INCOMEDET
		ON BASICDET.DETIDCOUNT = INCOMEDET.DETIDCOUNT
		WHERE BASICDET.QUARTER = @QUARTER) FINAL15H
	END
	IF (@FORMID = 1)
		BEGIN
			SET @TABLENAME = '#ERETURNVALIDBRANCHES15G';
		END
	ELSE
		BEGIN
			SET @TABLENAME = '#ERETURNVALIDBRANCHES15H';
		END
	SET @SQLQUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #VALIDBRANCHES  
			FROM  
			(  
				SELECT BRANCHCODE,BRANCHNAME,EVD.BRANCHID,CASE WHEN EVD.FORMID = 5 THEN 1 ELSE 2 END FORMID,FORMNAME,EVD.QUARTER, ISNULL(ISREQACTIVE,0) ISREQACTIVE FROM COMPANYBRANCH CB WITH(NOLOCK) 
				INNER JOIN ' + @TABLENAME + ' EVD ON EVD.BRANCHID = CB.BRANCHID   
				INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = EVD.FORMID  
				LEFT JOIN   
				(  
					SELECT BRANCHID,FORMID,QUARTER,ISREQACTIVE FROM ACKNO15GH WITH(NOLOCK) WHERE ISNULL(ISREQACTIVE,0) <> 0 AND ISNULL(ISVALID, 0) <> 1
				)TEMP ON EVD.BRANCHID = TEMP.BRANCHID AND EVD.FORMID = TEMP.FORMID AND EVD.QUARTER = TEMP.QUARTER  
			WHERE EVD.QUARTER = '+CAST(@QUARTER AS VARCHAR)
	IF(@BRANCHID <> -1)  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND EVD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)  
		END
		SET @SQLQUERY = @SQLQUERY + 'GROUP BY BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,ISREQACTIVE)FINAL ORDER BY BRANCHCODE;SELECT COUNT(BRANCHID) FROM #VALIDBRANCHES' ;
	EXEC SP_EXECUTESQL @SQLQUERY;  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_BULKERETURNF15GHBRANCHESINITIATE')
DROP PROCEDURE USP_F15GH_BULKERETURNF15GHBRANCHESINITIATE
GO
CREATE PROCEDURE [dbo].[USP_F15GH_BULKERETURNF15GHBRANCHESINITIATE]
	@PAGEINDEX INT,  
	@PAGESIZE INT,  
	@FORMID INT,  
	@QUARTER INT,  
	@BRANCHID INT  
AS  
	BEGIN  
		DECLARE @FIRSTREC INT, @LASTREC INT  
		SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE  
		SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);  
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @TABLENAME VARCHAR(25);
		SELECT BRANCHID, FORMID, QUARTER
		INTO #ERETDONE
		FROM ACKNO15GH
		WHERE LEN(ISNULL(ORGNUM , '')) > 0
			AND FORMID = @FORMID
			AND QUARTER = @QUARTER 
IF (@FORMID = 1)
	BEGIN
		SELECT BRANCHID, QUARTER, 5 AS FORMID INTO #ERETURNVALIDBRANCHES15G FROM
		(SELECT BASICDET.BRANCHID, BASICDET.QUARTER FROM
		(SELECT COUNT(DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15GBASIC 
		GROUP BY BRANCHID, QUARTER) BASICDET 
	INNER JOIN 
		(SELECT COUNT(DISTINCT I.DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15GBASIC B INNER JOIN FORM15GINCOME I
		ON B.DETAILID = I.DETAILID 
		GROUP BY BRANCHID, QUARTER) INCOMEDET
		ON BASICDET.DETIDCOUNT = INCOMEDET.DETIDCOUNT
		WHERE BASICDET.QUARTER = 1) FINAL15G
		EXCEPT SELECT BRANCHID, FORMID, QUARTER FROM #ERETDONE
	END
ELSE
	BEGIN
		SELECT BRANCHID, QUARTER,  6 AS FORMID INTO #ERETURNVALIDBRANCHES15H FROM
		(SELECT BASICDET.BRANCHID, BASICDET.QUARTER FROM
		(SELECT COUNT(DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15HBASIC 
		GROUP BY BRANCHID, QUARTER) BASICDET 
	INNER JOIN 
		(SELECT COUNT(DISTINCT I.DETAILID) DETIDCOUNT, BRANCHID, QUARTER FROM FORM15HBASIC B INNER JOIN FORM15HINCOME I
		ON B.DETAILID = I.DETAILID 
		GROUP BY BRANCHID, QUARTER) INCOMEDET
		ON BASICDET.DETIDCOUNT = INCOMEDET.DETIDCOUNT
		WHERE BASICDET.QUARTER = @QUARTER) FINAL15H
		EXCEPT SELECT BRANCHID, FORMID, QUARTER FROM #ERETDONE
	END
	IF (@FORMID = 1)
		BEGIN
			SET @TABLENAME = '#ERETURNVALIDBRANCHES15G';
		END
	ELSE
		BEGIN
			SET @TABLENAME = '#ERETURNVALIDBRANCHES15H';
		END
	SET @SQLQUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #VALIDBRANCHES  
			FROM  
			(  
				SELECT BRANCHCODE,BRANCHNAME,EVD.BRANCHID,CASE WHEN EVD.FORMID = 5 THEN 1 ELSE 2 END FORMID,FORMNAME,EVD.QUARTER, ISNULL(ISREQACTIVE,0) ISREQACTIVE FROM COMPANYBRANCH CB WITH(NOLOCK) 
				INNER JOIN ' + @TABLENAME + ' EVD ON EVD.BRANCHID = CB.BRANCHID   
				INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = EVD.FORMID  
				LEFT JOIN   
				(  
					SELECT BRANCHID,FORMID,QUARTER,ISREQACTIVE FROM ACKNO15GH WITH(NOLOCK) WHERE ISNULL(ISREQACTIVE,0) <> 0 AND ISNULL(ISVALID, 0) <> 1
				)TEMP ON EVD.BRANCHID = TEMP.BRANCHID AND EVD.FORMID = TEMP.FORMID AND EVD.QUARTER = TEMP.QUARTER  
			WHERE EVD.QUARTER = '+CAST(@QUARTER AS VARCHAR)
	IF(@BRANCHID <> -1)  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY + ' AND EVD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)  
		END
		SET @SQLQUERY = @SQLQUERY + 'GROUP BY BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,ISREQACTIVE)FINAL ORDER BY BRANCHCODE;SELECT * FROM #VALIDBRANCHES WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);
	EXEC SP_EXECUTESQL @SQLQUERY;  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_CHECKBASICDETAIL')
DROP PROCEDURE USP_F15GH_CHECKBASICDETAIL
GO
CREATE PROCEDURE USP_F15GH_CHECKBASICDETAIL
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT
AS
	BEGIN
	IF @FORMID=1 
		SELECT COUNT(DETAILID) AS DETAILID FROM FORM15GBASIC
			WHERE BRANCHID=@BRANCHID 
				AND QUARTER=@QUARTER
	ELSE
		SELECT COUNT(DETAILID) AS DETAILID FROM FORM15HBASIC
			WHERE BRANCHID=@BRANCHID 
				AND QUARTER=@QUARTER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_CHECKBASICDETAILFORIMPORT')
DROP PROCEDURE USP_F15GH_CHECKBASICDETAILFORIMPORT
GO
CREATE PROCEDURE [dbo].[USP_F15GH_CHECKBASICDETAILFORIMPORT] 
@BRANCHID INT,
@QUARTER INT,
@FORMTYPE INT
AS 
BEGIN
	IF @BRANCHID <> -1
		BEGIN
			IF @FORMTYPE = 1 
				SELECT ISNULL(BRANCHID,0) AS BRANCHID 
				FROM FORM15GBASIC WITH(NOLOCK)
				WHERE BRANCHID=@BRANCHID 
					AND QUARTER=@QUARTER
					AND ENTRYTYPE=2
			ELSE
				SELECT ISNULL(BRANCHID,0) AS BRANCHID 
				FROM FORM15HBASIC WITH(NOLOCK)
				WHERE BRANCHID=@BRANCHID 
					AND QUARTER=@QUARTER
					AND ENTRYTYPE=2
		END			
	ELSE
		BEGIN
			IF @FORMTYPE = 1 
				SELECT BRANCHID
				FROM FORM15GBASIC WITH(NOLOCK)
					WHERE QUARTER = @QUARTER
						AND ENTRYTYPE=2
			ELSE
				SELECT BRANCHID 
				FROM FORM15HBASIC WITH(NOLOCK)
				WHERE QUARTER=@QUARTER
					 AND ENTRYTYPE=2
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_CHECKCORRACKNOWLEGMENTDETAIL')
DROP PROCEDURE USP_F15GH_CHECKCORRACKNOWLEGMENTDETAIL
GO
CREATE PROCEDURE USP_F15GH_CHECKCORRACKNOWLEGMENTDETAIL
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT
AS 
BEGIN
	SELECT AR.ACKNOREVID FROM ACKNO15GHREV AR WITH(NOLOCK)
		INNER JOIN ACKNO15GH AK WITH(NOLOCK)
			ON AR.ACKID = AK.ACKID
		WHERE AK.BRANCHID = @BRANCHID
			AND AK.QUARTER = @QUARTER
			AND AK.FORMID = @FORMID
			AND AR.REVNUM IS NULL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_CHECKCORRERROR')
DROP PROCEDURE USP_F15GH_CHECKCORRERROR
GO
CREATE PROCEDURE USP_F15GH_CHECKCORRERROR
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT
AS
	BEGIN
		IF(@FORMID = 1)
			BEGIN
				SELECT CASE WHEN LEN(UNIQUEIDNUMBER) = 0 THEN D.NAME + '-' + D.PAN 
					ELSE D.NAME + '-' + D.PAN + ' - ' + SUBSTRING(F.UNIQUEIDNUMBER, 1, 10) END ERRORID, 
					D.*, NE.MOBILENO, F.DETAILID, F.STATUS, F.RESIDENTIALSTATUS, F.TAXASSESSEDFLAG,
					F.LATESTASSTYR, F.ESTIMATEDINC,F.ESTIMATEDTOTALINCPRVYR, F.TOTALNOOFFORM15G, 
					F.AGGREGATEAMTFORM15G,F.UNIQUEIDNUMBER, F.DECLARATIONDATE, 
					F.AMTOFINCPAID, F.DATEINCPAID
				INTO #TOVALIDATE
				FROM DEDUCTEE D WITH(NOLOCK)
					INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)
					   ON D.DEDUCTEEID = NE.DEDUCTEEID
					INNER JOIN CORRFORM15GBASIC F WITH(NOLOCK)
					   ON D.DEDUCTEEID = F.DEDUCTEEID AND D.BRANCHID = F.BRANCHID
				WHERE D.BRANCHID = @BRANCHID AND QUARTER = @QUARTER	AND F.CORSTATUS IN(2,3,4)
				DECLARE @ERRORTABLE TABLE(ERRORID VARCHAR(101),ERRORDESCRIPTION VARCHAR(102))
				INSERT INTO @ERRORTABLE
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Income Details Required' + REPLICATE(' ', 100 - LEN('Income Details Required')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL((SELECT COUNT(INCOMEID) FROM CORRFORM15GINCOME WITH(NOLOCK) WHERE DETAILID = V.DETAILID AND CORSTATUS IN(2,3,4)), 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid UIN' + REPLICATE(' ', 100 - LEN('Invalid UIN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) != 26 OR SUBSTRING(UNIQUEIDNUMBER, 1, 1) != 'G'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'UIN is Mandatory' + REPLICATE(' ', 100 - LEN('UIN is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Name is Mandatory' + REPLICATE(' ', 100 - LEN('Name is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(NAME) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid PAN' + REPLICATE(' ', 100 - LEN('Invalid PAN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PAN NOT LIKE '[A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z][0-9][0-9][0-9][0-9][A-Za-z]'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|'	+ 'Invalid PAN Status' + REPLICATE(' ', 100 - LEN('Invalid PAN Status')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATUS < 1 OR STATUS > 9
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Residential Status' + REPLICATE(' ', 100 - LEN('Invalid Residential Status')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					RESIDENTIALSTATUS != 'RES' AND RESIDENTIALSTATUS != 'NRI' AND RESIDENTIALSTATUS != 'NOR'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Flat/Door/Block No. is mandatory' + REPLICATE(' ', 100 - LEN('Flat/Door/Block No. is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS1, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Area is mandatory' + REPLICATE(' ', 100 - LEN('Area is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS4, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'City is mandatory' + REPLICATE(' ', 100 - LEN('City is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS5, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'State is mandatory' + REPLICATE(' ', 100 - LEN('State is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATEID = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode is mandatory' + REPLICATE(' ', 100 - LEN('Pincode is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode should be numbers only' + REPLICATE(' ', 100 - LEN('Pincode should be numbers only')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNUMERIC(PINCODE) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) != 6
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PINCODE < 110001
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG != 'Y' AND TAXASSESSEDFLAG != 'N' 
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Latest Assessment Year'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Latest Assessment Year'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG = 'Y' AND LEN(ISNULL(LATESTASSTYR, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income for which Declaration made'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income for which Declaration made'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income of the P.Y.'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income of the P.Y.'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15G, 0) > 0 AND ISNULL(AGGREGATEAMTFORM15G, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15G Filed'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''No. of Form 15G Filed'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15G, 0) = 0 AND ISNULL(AGGREGATEAMTFORM15G, 0) > 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Declaration Date'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Declaration Date'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DECLARATIONDATE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Date on which Income has been Paid/Credited'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Date on which Income has been Paid/Credited'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DATEINCPAID, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Mobile No.'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Mobile No.'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid MobileNumber.' + REPLICATE(' ', 100 - LEN('Invalid MobileNumber.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) > 0 
					AND (LEN(ISNULL(MOBILENO, '')) != 10 
						OR SUBSTRING(ISNULL(MOBILENO, ' '), 0, 1) = '0'
						OR ISNULL(MOBILENO, '') LIKE '%.%'
						OR ISNULL(MOBILENO, '') LIKE '%E%'
						OR ISNULL(MOBILENO, '') LIKE '%+%')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Email Address'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Email Address'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Email Address.' + REPLICATE(' ', 100 - LEN('Invalid Email Address.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) > 0 
					AND (PATINDEX ('%[ &'',":;!+=\/()<>]%', EMAILADDRESS) > 0 -- INVALID CHARACTERS
						   OR PATINDEX ('[@.-_]%', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE STARTING CHARACTER
						   OR PATINDEX ('%[@.-_]', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE ENDING CHARACTER
						   OR EMAILADDRESS NOT LIKE '%@%.%' -- MUST CONTAIN AT LEAST ONE @ AND ONE .
						   OR EMAILADDRESS LIKE '%..%' -- CANNOT HAVE TWO PERIODS IN A ROW
						   OR EMAILADDRESS LIKE '%@%@%' -- CANNOT HAVE TWO @ ANYWHERE
						   OR EMAILADDRESS LIKE '%.@%' 
						   OR EMAILADDRESS LIKE '%@.%'
						   OR EMAILADDRESS LIKE '%#@%' 
						   OR EMAILADDRESS LIKE '%@#%'						   
						   OR SUBSTRING(EMAILADDRESS, LEN(EMAILADDRESS), 1) NOT LIKE '[a-zA-Z0-9]')
						   OR SUBSTRING(EMAILADDRESS, LEN(EMAILADDRESS), 1) = '.' 
				SELECT ERRORID, ERRORDESCRIPTION FROM @ERRORTABLE 
				DROP TABLE #TOVALIDATE
			END
		ELSE
			BEGIN
							SELECT CASE WHEN LEN(UNIQUEIDNUMBER) = 0 THEN D.NAME + '-' + D.PAN 
				ELSE D.NAME + '-' + D.PAN + ' - ' + SUBSTRING(F.UNIQUEIDNUMBER, 1, 10)  END ERRORID, 
				D.*, NE.MOBILENO, F.DETAILID, F.ASSESSEEDOB, F.TAXASSESSEDFLAG, F.LATESTASSTYR, F.ESTIMATEDINC,
				F.ESTIMATEDTOTALINCPRVYR, F.TOTALNOOFFORM15H, F.AGGREGATEAMTFORM15H,F.UNIQUEIDNUMBER,
				F.DECLARATIONDATE, F.AMTOFINCPAID, F.DATEINCPAID
			INTO #TOVALIDATES
			FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)
				   ON D.DEDUCTEEID = NE.DEDUCTEEID
				INNER JOIN CORRFORM15HBASIC F WITH(NOLOCK)
				   ON D.DEDUCTEEID = F.DEDUCTEEID AND D.BRANCHID = F.BRANCHID
			WHERE D.BRANCHID = @BRANCHID AND QUARTER = @QUARTER AND F.CORSTATUS IN(2,3,4)
			DECLARE @ERRORTABLES TABLE(ERRORID VARCHAR(101),ERRORDESCRIPTION VARCHAR(102))
				INSERT INTO @ERRORTABLES
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Income Details Required' + REPLICATE(' ', 100 - LEN('Income Details Required')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					ISNULL((SELECT COUNT(INCOMEID) FROM CORRFORM15HINCOME WITH(NOLOCK) WHERE DETAILID = V.DETAILID AND CORSTATUS IN(2,3,4)), 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid UIN' + REPLICATE(' ', 100 - LEN('Invalid UIN')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(UNIQUEIDNUMBER) != 26 OR SUBSTRING(UNIQUEIDNUMBER, 1, 1) != 'H'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'UIN is Mandatory' + REPLICATE(' ', 100 - LEN('UIN is Mandatory')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(UNIQUEIDNUMBER) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Name is Mandatory' + REPLICATE(' ', 100 - LEN('Name is Mandatory')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(NAME) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid PAN' + REPLICATE(' ', 100 - LEN('Invalid PAN')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					PAN NOT LIKE '[A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z][0-9][0-9][0-9][0-9][A-Za-z]'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid Date of Birth' + REPLICATE(' ', 100 - LEN('Invalid Date of Birth')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(ASSESSEEDOB, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Flat/Door/Block No. is mandatory' + REPLICATE(' ', 100 - LEN('Flat/Door/Block No. is mandatory')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(ADDRESS1, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Area is mandatory' + REPLICATE(' ', 100 - LEN('Area is mandatory')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(ADDRESS4, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'City is mandatory' + REPLICATE(' ', 100 - LEN('City is mandatory')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(ADDRESS5, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'State is mandatory' + REPLICATE(' ', 100 - LEN('State is mandatory')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					STATEID = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode is mandatory' + REPLICATE(' ', 100 - LEN('Pincode is mandatory')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(PINCODE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode should be numbers only' + REPLICATE(' ', 100 - LEN('Pincode should be numbers only')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					ISNUMERIC(PINCODE) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(PINCODE, '')) != 6
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					PINCODE < 110001
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					TAXASSESSEDFLAG != 'Y' AND TAXASSESSEDFLAG != 'N' 
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Latest Assessment Year'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Latest Assessment Year'' is Mandatory.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					TAXASSESSEDFLAG = 'Y' AND LEN(ISNULL(LATESTASSTYR, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income for which Declaration made'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income for which Declaration made'' is Mandatory.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income of the P.Y.'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income of the P.Y.'' is Mandatory.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					ISNULL(TOTALNOOFFORM15H, 0) > 0 AND ISNULL(AGGREGATEAMTFORM15H, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15H Filed'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''No. of Form 15H Filed'' is Mandatory.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					ISNULL(TOTALNOOFFORM15H, 0) = 0 AND ISNULL(AGGREGATEAMTFORM15H, 0) > 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Declaration Date'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Declaration Date'' is Mandatory.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(DECLARATIONDATE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Date on which Income has been Paid/Credited'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Date on which Income has been Paid/Credited'' is Mandatory.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(DATEINCPAID, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Mobile No.'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Mobile No.'' is Mandatory.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid MobileNumber.' + REPLICATE(' ', 100 - LEN('Invalid MobileNumber.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) > 0 
					AND (LEN(ISNULL(MOBILENO, '')) != 10 
						OR SUBSTRING(ISNULL(MOBILENO, ' '), 0, 1) = '0'
						OR ISNULL(MOBILENO, '') LIKE '%.%'
						OR ISNULL(MOBILENO, '') LIKE '%E%'
						OR ISNULL(MOBILENO, '') LIKE '%+%')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Email Address'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Email Address'' is Mandatory.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Email Address.' + REPLICATE(' ', 100 - LEN('Invalid Email Address.')) + '|'
				FROM #TOVALIDATES V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) > 0 
					AND (PATINDEX ('%[ &'',":;!+=\/()<>]%', EMAILADDRESS) > 0 -- INVALID CHARACTERS
						 OR PATINDEX ('[@.-_]%', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE STARTING CHARACTER
						   OR PATINDEX ('%[@.-_]', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE ENDING CHARACTER
						   OR EMAILADDRESS NOT LIKE '%@%.%' -- MUST CONTAIN AT LEAST ONE @ AND ONE .
						   OR EMAILADDRESS LIKE '%..%' -- CANNOT HAVE TWO PERIODS IN A ROW
						   OR EMAILADDRESS LIKE '%@%@%' -- CANNOT HAVE TWO @ ANYWHERE
						   OR EMAILADDRESS LIKE '%.@%' 
						   OR EMAILADDRESS LIKE '%@.%'
						   OR EMAILADDRESS LIKE '%#@%' 
						   OR EMAILADDRESS LIKE '%@#%'
						   OR SUBSTRING(EMAILADDRESS, LEN(EMAILADDRESS), 1) NOT LIKE '[a-zA-Z0-9]')
				SELECT ERRORID, ERRORDESCRIPTION FROM @ERRORTABLES 
				DROP TABLE #TOVALIDATES
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_CHECKISVALIDCORRERETURN')
DROP PROCEDURE USP_F15GH_CHECKISVALIDCORRERETURN
GO
CREATE PROCEDURE USP_F15GH_CHECKISVALIDCORRERETURN
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@REVISENUMBER INT
AS 
BEGIN	
	SELECT COUNT(BRANCHID) FROM  CORRECTIONDETAILSF15GH WITH(NOLOCK)
		WHERE ISVALIDCORRERETURN = 0
			AND BRANCHID = @BRANCHID
			AND FORMID = @FORMID
			AND QUARTER = @QUARTER 
			AND REVISENUMBER = @REVISENUMBER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_CHECKUNIQUEIDNUMBER')
DROP PROCEDURE USP_F15GH_CHECKUNIQUEIDNUMBER
GO
CREATE PROCEDURE [dbo].[USP_F15GH_CHECKUNIQUEIDNUMBER]
@UNIQUEIDNUMBER NVARCHAR(MAX),
@FORMTYPE INT
AS          
BEGIN
	DECLARE @QUERY NVARCHAR(MAX) 
	SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@UNIQUEIDNUMBER,',')
	IF @FORMTYPE=1                 
			SET @QUERY= 'SELECT  ISNULL(UNIQUEIDNUMBER,0) AS UNIQUEIDNUMBER FROM FORM15GBASIC G WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA=G.UNIQUEIDNUMBER' 
			ELSE
			SET @QUERY= 'SELECT  ISNULL(UNIQUEIDNUMBER,0) AS UNIQUEIDNUMBER FROM FORM15HBASIC H WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA=H.UNIQUEIDNUMBER'
			EXEC SP_EXECUTESQL @QUERY 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_DELETEALLCORRDETAIL')
DROP PROCEDURE USP_F15GH_DELETEALLCORRDETAIL
GO
CREATE PROCEDURE USP_F15GH_DELETEALLCORRDETAIL
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT
AS
BEGIN 
	IF(@FORMID = 1)
		BEGIN
			DELETE CI FROM CORRFORM15GINCOME CI
				INNER JOIN CORRFORM15GBASIC CB 
					ON CI.DETAILID = CB.DETAILID
				WHERE CB.BRANCHID = @BRANCHID AND CB.QUARTER = @QUARTER
			DELETE FROM CORRFORM15GBASIC WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
		END
	ELSE
		BEGIN
			DELETE CI FROM CORRFORM15HINCOME CI
				INNER JOIN CORRFORM15HBASIC CB 
					ON CI.DETAILID = CB.DETAILID
				WHERE CB.BRANCHID = @BRANCHID AND CB.QUARTER = @QUARTER
			DELETE FROM CORRFORM15HBASIC WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
		END
	DELETE FROM CORRECTIONDETAILSF15GH WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER AND FORMID =@FORMID
	DELETE AR FROM ACKNO15GHREV AR
		INNER JOIN ACKNO15GH AK 
			ON AR.ACKID = AK.ACKID
		WHERE AK.BRANCHID = @BRANCHID
			AND AK.QUARTER = @QUARTER
			AND AK.FORMID = @FORMID
	SELECT 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_DELETEBASICDETAILBASEDONUIN')
DROP PROCEDURE USP_F15GH_DELETEBASICDETAILBASEDONUIN
GO
CREATE PROCEDURE USP_F15GH_DELETEBASICDETAILBASEDONUIN
	@UNIQUEIDNUMBER NVARCHAR(MAX),
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT    
AS 
BEGIN
	SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@UNIQUEIDNUMBER,',') 
		IF @FORMID=1 
			BEGIN
				DELETE FI FROM FORM15GINCOME FI
							INNER JOIN FORM15GBASIC FB
								ON FI.DETAILID = FB.DETAILID
							INNER JOIN #TEMP T 
								ON T.DATA = FB.UNIQUEIDNUMBER
							WHERE FB.BRANCHID = @BRANCHID
								AND FB.QUARTER = @QUARTER
				DELETE FB FROM FORM15GBASIC FB
							INNER JOIN #TEMP T 
								ON T.DATA = FB.UNIQUEIDNUMBER
							WHERE FB.BRANCHID = @BRANCHID
								AND FB.QUARTER = @QUARTER	
			END		
		ELSE
			BEGIN
				DELETE FI FROM FORM15HINCOME FI
							INNER JOIN FORM15HBASIC FB
								ON FI.DETAILID = FB.DETAILID
							INNER JOIN #TEMP T 
								ON T.DATA = FB.UNIQUEIDNUMBER
							WHERE FB.BRANCHID = @BRANCHID
								AND FB.QUARTER = @QUARTER
				DELETE FB FROM FORM15HBASIC FB
							INNER JOIN #TEMP T 
								ON T.DATA = FB.UNIQUEIDNUMBER
							WHERE FB.BRANCHID = @BRANCHID
								AND FB.QUARTER = @QUARTER
			END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_DELETECORRACKNOWLEGMENTDETAIL')
DROP PROCEDURE USP_F15GH_DELETECORRACKNOWLEGMENTDETAIL
GO
CREATE PROCEDURE USP_F15GH_DELETECORRACKNOWLEGMENTDETAIL
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT
AS
BEGIN 
	DELETE FROM CORRECTIONDETAILSF15GH 
		WHERE BRANCHID = @BRANCHID 
			AND QUARTER = @QUARTER 
			AND FORMID =@FORMID
			AND ISFINALUPDATE = 0
	DELETE AR FROM ACKNO15GHREV AR
		INNER JOIN ACKNO15GH AK 
			ON AR.ACKID = AK.ACKID
		WHERE AK.BRANCHID = @BRANCHID
			AND AK.QUARTER = @QUARTER
			AND AK.FORMID = @FORMID
			AND AR.REVISENUMBER = 0
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GENERATEUININIMPORT')
DROP PROCEDURE USP_F15GH_GENERATEUININIMPORT
GO
CREATE  PROCEDURE [dbo].[USP_F15GH_GENERATEUININIMPORT]  
@CREATEDDATE VARCHAR(20),  
@FORMTYPE INT        
AS            
BEGIN          
IF @FORMTYPE = 1  
	BEGIN         
		SELECT F.BRANCHID, ISNULL(MAX(SUBSTRING(UNIQUEIDNUMBER, 2, 9)), 0) STARTNUM, DD.TAN, DD.FINANCIALYEAR  
		INTO #UINNUMF15G  
		FROM FORM15GBASIC F WITH(NOLOCK)  
		INNER JOIN BRANCHDEDUCTORS BD  
			ON F.BRANCHID = BD.BRANCHID AND F.QUARTER = BD.QUARTER  
		INNER JOIN DEDUCTOR DD  
			ON BD.DEDUCTORID = DD.DEDUCTORID  
		GROUP BY F.BRANCHID, DD.TAN, DD.FINANCIALYEAR  
		SELECT BRANCHID, DETAILID,   
		ROW_NUMBER() OVER(PARTITION BY [BRANCHID] ORDER BY [BRANCHID]) INCRNUM  
		INTO #BASICF15G  
		FROM FORM15GBASIC  
		WHERE CONVERT(VARCHAR(20),CREATEDDATE,113) = CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)  
			AND LEN(ISNULL(UNIQUEIDNUMBER,'')) = 0 
		SELECT U.BRANCHID, U.TAN, U.FINANCIALYEAR ,B.DETAILID,   
		'G' + CAST(REPLACE(STR((B.INCRNUM + U.STARTNUM), 9), ' ', '0') AS VARCHAR) UIN  
		INTO #BASICUINFNUMG  
		FROM #UINNUMF15G U  
		INNER JOIN #BASICF15G B   
			ON U.BRANCHID = B.BRANCHID   
		SELECT U.BRANCHID, U.DETAILID, CAST(UIN AS VARCHAR) + CAST(FINANCIALYEAR AS VARCHAR) + CAST(SUBSTRING(CAST(FINANCIALYEAR AS VARCHAR),3,4)+1 AS VARCHAR) + CAST(TAN AS VARCHAR) AS UIN  
		INTO #BASICUINF15G  
		FROM #BASICUINFNUMG U  
			INNER JOIN #BASICF15G B   
				ON U.BRANCHID = B.BRANCHID AND U.DETAILID = B.DETAILID  
		UPDATE FORM15GBASIC SET UNIQUEIDNUMBER =  G.UIN  
		FROM FORM15GBASIC B   
		INNER JOIN #BASICUINF15G G  
			ON B.DETAILID = G.DETAILID    
		DROP TABLE #BASICUINFNUMG  
		DROP TABLE #UINNUMF15G  
		DROP TABLE #BASICF15G  
		DROP TABLE #BASICUINF15G  
	END  
ELSE  
	BEGIN  
		SELECT F.BRANCHID, ISNULL(MAX(SUBSTRING(UNIQUEIDNUMBER, 2, 9)), 0) STARTNUM, DD.TAN, DD.FINANCIALYEAR  
		INTO #UINNUMF15H  
		FROM FORM15HBASIC F WITH(NOLOCK)  
		INNER JOIN BRANCHDEDUCTORS BD  
			ON F.BRANCHID = BD.BRANCHID AND F.QUARTER = BD.QUARTER  
		INNER JOIN DEDUCTOR DD  
			ON BD.DEDUCTORID = DD.DEDUCTORID
		GROUP BY F.BRANCHID, DD.TAN, DD.FINANCIALYEAR  
		SELECT BRANCHID, DETAILID,   
		ROW_NUMBER() OVER(PARTITION BY [BRANCHID] ORDER BY [BRANCHID]) INCRNUM  
		INTO #BASICF15H  
		FROM FORM15HBASIC   
		WHERE CONVERT(VARCHAR(20),CREATEDDATE,113) = CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)  
			AND LEN(ISNULL(UNIQUEIDNUMBER,'')) = 0  
		SELECT U.BRANCHID, U.TAN, U.FINANCIALYEAR ,B.DETAILID,   
		'H' + CAST(REPLACE(STR((B.INCRNUM + U.STARTNUM), 9), ' ', '0') AS VARCHAR) UIN  
		INTO #BASICUINFNUMH  
		FROM #UINNUMF15H U  
		INNER JOIN #BASICF15H B   
			ON U.BRANCHID = B.BRANCHID  
		SELECT U.BRANCHID, U.DETAILID, CAST(UIN AS VARCHAR) + CAST(FINANCIALYEAR AS VARCHAR) + CAST(SUBSTRING(CAST(FINANCIALYEAR AS VARCHAR),3,4)+1 AS VARCHAR)  + CAST(TAN AS VARCHAR) AS UIN  
		INTO #BASICUINF15H  
		FROM #BASICUINFNUMH U  
		INNER JOIN #BASICF15H B   
			ON U.BRANCHID = B.BRANCHID AND U.DETAILID = B.DETAILID  
		UPDATE FORM15HBASIC SET UNIQUEIDNUMBER = G.UIN  
		FROM FORM15HBASIC B   
		INNER JOIN #BASICUINF15H G  
			ON B.DETAILID = G.DETAILID  
		DROP TABLE #BASICUINFNUMH  
		DROP TABLE #UINNUMF15H  
		DROP TABLE #BASICF15H  
		DROP TABLE #BASICUINF15H  
	END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETACKNOWLEDGEMENTDETAIL')
DROP PROCEDURE USP_F15GH_GETACKNOWLEDGEMENTDETAIL
GO
CREATE PROCEDURE [dbo].[USP_F15GH_GETACKNOWLEDGEMENTDETAIL] 
@BRANCHID INT,
@QUARTER INT =-1,
@FORMID INT
AS
	BEGIN
		IF(@QUARTER = -1)
			BEGIN
				SELECT ACKID, [QUARTER], ORGNUM, ORGFILEDATE,  
					ERETURNGENDATE, ISVALID, ISNULL(ISREQACTIVE,0)ISREQACTIVE 
				FROM ACKNO15GH WITH(NOLOCK) 
				WHERE BRANCHID=@BRANCHID 
					AND FORMID=@FORMID 
			END
		ELSE IF (@BRANCHID = -1)
			BEGIN
				SELECT ACKID, [QUARTER], ORGNUM, ORGFILEDATE,  
					ERETURNGENDATE, ISVALID, ISNULL(ISREQACTIVE,0)ISREQACTIVE 
				FROM ACKNO15GH WITH(NOLOCK) 
				WHERE QUARTER=@QUARTER 
					AND FORMID=@FORMID
			END
		ELSE
			BEGIN		
				SELECT ACKID, [QUARTER], ORGNUM, ORGFILEDATE,  
				  ERETURNGENDATE, ISVALID, ISNULL(ISREQACTIVE,0)ISREQACTIVE 
				FROM ACKNO15GH WITH(NOLOCK) 
				WHERE BRANCHID=@BRANCHID 
					AND FORMID=@FORMID 
					AND QUARTER=@QUARTER
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETACKNOWLEDGEMENTNOFORCORR')
DROP PROCEDURE USP_F15GH_GETACKNOWLEDGEMENTNOFORCORR
GO
CREATE PROCEDURE USP_F15GH_GETACKNOWLEDGEMENTNOFORCORR
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@REVISENUMBER INT
AS
BEGIN
	IF(@REVISENUMBER > 0)
		BEGIN
			SELECT ACKNOREVID, REVNUM, REVFILEDDATE, AK.ACKID, REVISENUMBER 
				FROM ACKNO15GHREV AR WITH(NOLOCK)
			INNER JOIN ACKNO15GH AK WITH(NOLOCK)
				ON AR.ACKID = AK.ACKID 
			WHERE REVNUM <> '' 
				AND REVISENUMBER = @REVISENUMBER 
				AND BRANCHID=@BRANCHID 
				AND FORMID=@FORMID 
				AND QUARTER=@QUARTER
		END
	ELSE
		BEGIN
			SELECT ACKID,BRANCHID, FORMID, QUARTER, ORGNUM, ORGFILEDATE, ERETURNGENDATE ,ISVALID, 
				ISNULL(ISREQACTIVE,0) AS ISREQACTIVE ,ISNULL(QUEUEID,0) AS QUEUEID
			FROM ACKNO15GH WITH(NOLOCK)
			WHERE BRANCHID=@BRANCHID 
				AND FORMID=@FORMID 
				AND QUARTER=@QUARTER
		END		
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETALLDEDUCTEEIDS')
DROP PROCEDURE USP_F15GH_GETALLDEDUCTEEIDS
GO
CREATE PROCEDURE [dbo].[USP_F15GH_GETALLDEDUCTEEIDS]      
(      
@BRANCHCODES NVARCHAR(MAX),      
@REFERENCENOS NVARCHAR(MAX)      
)      
AS      
BEGIN 
 SELECT * INTO #REFNO FROM  [DBO].[UDF_TDS_SPLITSTRING](@REFERENCENOS,',')      
 SELECT * INTO #BRANCHCODES FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')      
 SELECT D.DEDUCTEEID, C.BRANCHID,REFERENCENO,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,D.EMAILADDRESS,NE.MOBILENO,STATEID,DEDUCTEECODE FROM DEDUCTEE D  WITH(NOLOCK)      
 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID      
 INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID=D.BRANCHID     
  WHERE ISNULL(REFERENCENO,'')<>'' AND   REFERENCENO IN      
 (      
   SELECT * FROM  #REFNO     
 )  AND C.BRANCHCODE IN    
 (    
 SELECT * FROM  #BRANCHCODES     
 )    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETALLPAN')
DROP PROCEDURE USP_F15GH_GETALLPAN
GO
CREATE PROCEDURE USP_F15GH_GETALLPAN 
AS  
	BEGIN 
		SELECT CAST(D.BRANCHID AS VARCHAR) + '-' + D.PAN AS BRANCHID, D.PAN 
		FROM FORM15GBASIC B WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK)
				ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID
		UNION 
		SELECT CAST(D.BRANCHID AS VARCHAR) + '-' + D.PAN AS BRANCHID, D.PAN 
		FROM FORM15HBASIC B WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK)
				ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETBASICDETAILS')
DROP PROCEDURE USP_F15GH_GETBASICDETAILS
GO
CREATE PROCEDURE USP_F15GH_GETBASICDETAILS 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
BEGIN
	IF(@FORMID=1)
		BEGIN
			SELECT * 
			INTO #MASTERBG
			FROM DEDUCTEE WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID
			SELECT DEDUCTEEID, MOBILENO
			INTO #MASTERNEG
			FROM NONEMPLOYEE WITH(NOLOCK)
			WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #MASTERBG)
			SELECT *
			INTO #BASICDETG
			FROM FORM15GBASIC WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
				AND DETAILID IN (SELECT DETAILID FROM FORM15GINCOME WITH(NOLOCK)) 
			SELECT ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) AS SERIALNO, DD.DEDUCTEEID, DD.NAME, 
				B.UNIQUEIDNUMBER, DD.REFERENCENO, DD.PAN,
				B.STATUS, B.RESIDENTIALSTATUS,
				DD.ADDRESS1 + ' ' + DD.ADDRESS2 + ' ' + DD.ADDRESS3 + ' ' +
				DD.ADDRESS4 + ' ' + DD.ADDRESS5 +
				+  ' - ' + DD.PINCODE + ' (' + SM.STATENAME + ')'  AS ADDRESS, 
				B.TAXASSESSEDFLAG, B.LATESTASSTYR, B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR,
				B.AMTOFINCPAID, B.TOTALNOOFFORM15G, CONVERT(VARCHAR(10),B.DECLARATIONDATE,103) AS DECLARATIONDATE
			INTO #TEMPG
			FROM #BASICDETG B WITH(NOLOCK)
					INNER JOIN #MASTERBG DD WITH(NOLOCK)
							ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
					INNER JOIN #MASTERNEG NE WITH(NOLOCK)  
							ON DD.DEDUCTEEID = NE.DEDUCTEEID
					INNER JOIN STATEMASTER SM WITH(NOLOCK)  
							ON DD.STATEID = SM.STATEID
			SELECT * FROM #TEMPG	
			DROP TABLE #TEMPG
			DROP TABLE #MASTERBG
			DROP TABLE #MASTERNEG
			DROP TABLE #BASICDETG
		END
	ELSE
		BEGIN
			SELECT *
			INTO #MASTERBH
			FROM DEDUCTEE WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID
			SELECT DEDUCTEEID, MOBILENO
			INTO #MASTERNEH
			FROM NONEMPLOYEE WITH(NOLOCK)
			WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #MASTERBH)
			SELECT *
			INTO #BASICDETH
			FROM FORM15HBASIC WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
				AND DETAILID IN (SELECT DETAILID FROM FORM15HINCOME WITH(NOLOCK)) 
			SELECT ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) AS SERIALNO, DD.DEDUCTEEID, DD.NAME, 
				B.UNIQUEIDNUMBER, DD.REFERENCENO, DD.PAN,
				CONVERT(VARCHAR(10),B.ASSESSEEDOB,103) AS ASSESSEEDOB, DD.ADDRESS1 + ' ' 
				+ DD.ADDRESS2 + ' ' + DD.ADDRESS3 + ' ' + DD.ADDRESS4 + ' ' + DD.ADDRESS5 +
				+  ' - ' + DD.PINCODE + ' (' + SM.STATENAME + ')'  AS ADDRESS, 
				B.TAXASSESSEDFLAG, B.LATESTASSTYR, B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR,
				B.AMTOFINCPAID, B.TOTALNOOFFORM15H, CONVERT(VARCHAR(10),B.DECLARATIONDATE,103) AS DECLARATIONDATE
			INTO #TEMPH
			FROM #BASICDETH B WITH(NOLOCK)
					INNER JOIN #MASTERBH DD WITH(NOLOCK)
							ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
					INNER JOIN #MASTERNEH NE WITH(NOLOCK)  
							ON DD.DEDUCTEEID = NE.DEDUCTEEID
					INNER JOIN STATEMASTER SM WITH(NOLOCK)  
							ON DD.STATEID = SM.STATEID
			SELECT * FROM #TEMPH	
			DROP TABLE #TEMPH
			DROP TABLE #MASTERBH
			DROP TABLE #MASTERNEH
			DROP TABLE #BASICDETH
		END	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETBASICINCOMEAMTCOUNTS')
DROP PROCEDURE USP_F15GH_GETBASICINCOMEAMTCOUNTS
GO
CREATE PROCEDURE [dbo].[USP_F15GH_GETBASICINCOMEAMTCOUNTS]
    @BRANCHID INT,
    @QUARTER INT,
    @FORMID INT
AS
	BEGIN
		IF(@FORMID = 1)
			BEGIN
				SELECT BRANCHID,COUNT(DETAILID) AS BASICCOUNT, ISNULL(SUM(CAST (ESTIMATEDINC AS BIGINT)),0) AS DECLAREDAMT
				INTO #BASICDATA15G
				FROM FORM15GBASIC WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID
					AND QUARTER = @QUARTER
				GROUP BY BRANCHID
				SELECT @BRANCHID AS BRANCHID ,COUNT(INCOMEID) AS INCOMECOUNT, ISNULL(SUM(CAST(AMTOFINC AS BIGINT)),0) AS INCOMEAMT
				INTO #INCOMEDATA15G
				FROM FORM15GINCOME WITH(NOLOCK)
				WHERE DETAILID IN 
				(
					SELECT DETAILID
					FROM FORM15GBASIC WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID
						AND QUARTER = @QUARTER
				)
				SELECT ISNULL(B.BASICCOUNT,0) BASICCOUNT,ISNULL(B.DECLAREDAMT,0) DECLAREDAMT,I.INCOMECOUNT,I.INCOMEAMT
				INTO #TEMP1  
				FROM #BASICDATA15G B WITH(NOLOCK)
									  FULL JOIN #INCOMEDATA15G I WITH(NOLOCK)
											ON B.BRANCHID = I.BRANCHID 
				DROP TABLE #BASICDATA15G
				DROP TABLE #INCOMEDATA15G
				SELECT * FROM #TEMP1	
			END
		ELSE
			BEGIN
				SELECT BRANCHID,COUNT(DETAILID) AS BASICCOUNT, ISNULL(SUM(CAST (ESTIMATEDINC AS BIGINT)),0) AS DECLAREDAMT
				INTO #BASICDATA15H
				FROM FORM15HBASIC WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID
					AND QUARTER = @QUARTER
				GROUP BY BRANCHID
				SELECT @BRANCHID AS BRANCHID ,COUNT(INCOMEID) AS INCOMECOUNT, ISNULL(SUM(CAST(AMTOFINC AS BIGINT)),0) AS INCOMEAMT
				INTO #INCOMEDATA15H
				FROM FORM15HINCOME WITH(NOLOCK)
				WHERE DETAILID IN 
				(
					SELECT DETAILID
					FROM FORM15HBASIC WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID
						AND QUARTER = @QUARTER
				)
				SELECT ISNULL(B.BASICCOUNT,0) BASICCOUNT,ISNULL(B.DECLAREDAMT,0) DECLAREDAMT,I.INCOMECOUNT,I.INCOMEAMT
				INTO #TEMP2 
				FROM #BASICDATA15H B WITH(NOLOCK)
									  FULL JOIN #INCOMEDATA15H I WITH(NOLOCK)
											ON B.BRANCHID = I.BRANCHID 
				DROP TABLE #BASICDATA15H
				DROP TABLE #INCOMEDATA15H
				SELECT * FROM #TEMP2	
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETCORDETAILIDBASEDONUIN')
DROP PROCEDURE USP_F15GH_GETCORDETAILIDBASEDONUIN
GO
CREATE  PROCEDURE [dbo].[USP_F15GH_GETCORDETAILIDBASEDONUIN]
@UNIQUEIDNUMBER NVARCHAR(MAX),
@QUARTER INT,
@FORMTYPE INT                   
AS          
BEGIN          
	DECLARE @QUERY NVARCHAR(MAX)          
	SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@UNIQUEIDNUMBER,',')  
		IF @FORMTYPE=1                 
			SET @QUERY= 'SELECT  DETAILID, BRANCHID, DEDUCTEEID, UNIQUEIDNUMBER FROM CORRFORM15GBASIC G WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA=G.UNIQUEIDNUMBER        
				WHERE  ENTRYTYPE IN(2,3)
					AND QUARTER=' + CAST(@QUARTER AS VARCHAR) + '
					AND G.DEDUCTEEID IN 
					(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
					INTERSECT
					SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))';
		ELSE
			SET @QUERY= 'SELECT  DETAILID, BRANCHID, DEDUCTEEID, UNIQUEIDNUMBER FROM CORRFORM15HBASIC H WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA=H.UNIQUEIDNUMBER        
				WHERE ENTRYTYPE IN(2,3)
					AND QUARTER=' + CAST(@QUARTER AS VARCHAR) + '
					AND H.DEDUCTEEID IN 
					(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
					INTERSECT
					SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))';
		EXEC SP_EXECUTESQL @QUERY          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETCORINCOMEIDBASEDONDETAILID')
DROP PROCEDURE USP_F15GH_GETCORINCOMEIDBASEDONDETAILID
GO
CREATE  PROCEDURE [dbo].[USP_F15GH_GETCORINCOMEIDBASEDONDETAILID]
@DETAILID NVARCHAR(MAX),
@QUARTER INT,
@FORMTYPE INT                   
AS          
BEGIN          
	DECLARE @QUERY NVARCHAR(MAX)          
	SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@DETAILID,',')  
		IF @FORMTYPE=1                 
			SET @QUERY= 'SELECT INCOMEID, G.BRANCHID, G.UNIQUEIDNUMBER, I.DETAILID, IDENFICATIONNUM, AMTOFINC FROM FORM15GINCOME I WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA = I.DETAILID
				INNER JOIN FORM15GBASIC G WITH(NOLOCK) ON G.DETAILID = I.DETAILID
				WHERE G.QUARTER=' + CAST(@QUARTER AS VARCHAR) +'' 
		ELSE
			SET @QUERY= 'SELECT INCOMEID, H.BRANCHID, H.UNIQUEIDNUMBER, I.DETAILID, IDENFICATIONNUM, AMTOFINC FROM FORM15HINCOME I WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA = I.DETAILID
				INNER JOIN FORM15HBASIC H WITH(NOLOCK) ON H.DETAILID = I.DETAILID        
				WHERE H.QUARTER=' + CAST(@QUARTER AS VARCHAR) +'';
		EXEC SP_EXECUTESQL @QUERY          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETCORRACKNOWLEGMENTDETAIL')
DROP PROCEDURE USP_F15GH_GETCORRACKNOWLEGMENTDETAIL
GO
CREATE PROCEDURE USP_F15GH_GETCORRACKNOWLEGMENTDETAIL
	@ACKNOREVID INT,
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT
AS 
BEGIN
		DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
			SELECT AR.ACKNOREVID, AR.REVNUM, AR.REVFILEDDATE, AR.ACKID, AR.REVISENUMBER FROM ACKNO15GHREV AR WITH(NOLOCK)
				INNER JOIN ACKNO15GH AK WITH(NOLOCK)
					ON AR.ACKID = AK.ACKID
				WHERE AK.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) 
					+ 'AND AK.QUARTER =' + CAST(@QUARTER AS VARCHAR)
					+ 'AND AK.FORMID =' + CAST(@FORMID AS VARCHAR)
					+ 'AND AR.REVNUM <> '''''
				IF(@ACKNOREVID <> 0)                                  
				BEGIN                  
					SET @QUERY = @QUERY + 'AND AR.ACKNOREVID =' + CAST(@ACKNOREVID AS VARCHAR);                                  
				END  
		EXECUTE SP_EXECUTESQL @QUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETCORRBASICINCOMEAMTCOUNTS')
DROP PROCEDURE USP_F15GH_GETCORRBASICINCOMEAMTCOUNTS
GO
CREATE PROCEDURE USP_F15GH_GETCORRBASICINCOMEAMTCOUNTS
    @BRANCHID INT,
    @QUARTER INT,
    @FORMID INT
AS
	BEGIN
		IF(@FORMID = 1)
			BEGIN
				SELECT BRANCHID,COUNT(DETAILID) AS BASICCOUNT, ISNULL(SUM(CAST (ESTIMATEDINC AS BIGINT)),0) AS DECLAREDAMT
				INTO #BASICDATA15G
				FROM CORRFORM15GBASIC WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID
					AND QUARTER = @QUARTER
					AND CORSTATUS IN (2,3,4)
				GROUP BY BRANCHID
				SELECT @BRANCHID AS BRANCHID ,COUNT(INCOMEID) AS INCOMECOUNT, ISNULL(SUM(CAST(AMTOFINC AS BIGINT)),0) AS INCOMEAMT
				INTO #INCOMEDATA15G
				FROM CORRFORM15GINCOME WITH(NOLOCK)
				WHERE DETAILID IN 
				(
					SELECT DETAILID
					FROM CORRFORM15GBASIC WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID
						AND QUARTER = @QUARTER
						AND CORSTATUS IN (2,3,4)
				)
					AND CORSTATUS IN (2,3,4)
				SELECT ISNULL(B.BASICCOUNT,0) BASICCOUNT, ISNULL(B.DECLAREDAMT,0) DECLAREDAMT, I.INCOMECOUNT, I.INCOMEAMT
				INTO #TEMP1  
				FROM #BASICDATA15G B WITH(NOLOCK)
									  FULL JOIN #INCOMEDATA15G I WITH(NOLOCK)
											ON B.BRANCHID = I.BRANCHID 
				DROP TABLE #BASICDATA15G
				DROP TABLE #INCOMEDATA15G
				SELECT * FROM #TEMP1	
			END
		ELSE
			BEGIN
				SELECT BRANCHID,COUNT(DETAILID) AS BASICCOUNT, ISNULL(SUM(CAST (ESTIMATEDINC AS BIGINT)),0) AS DECLAREDAMT
				INTO #BASICDATA15H
				FROM CORRFORM15HBASIC WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID
					AND QUARTER = @QUARTER
					AND CORSTATUS IN (2,3,4)
				GROUP BY BRANCHID
				SELECT @BRANCHID AS BRANCHID ,COUNT(INCOMEID) AS INCOMECOUNT, ISNULL(SUM(CAST(AMTOFINC AS BIGINT)),0) AS INCOMEAMT
				INTO #INCOMEDATA15H
				FROM CORRFORM15HINCOME WITH(NOLOCK)
				WHERE DETAILID IN 
				(
					SELECT DETAILID
					FROM CORRFORM15HBASIC WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID
						AND QUARTER = @QUARTER
						AND CORSTATUS IN (2,3,4)
				)
					AND CORSTATUS IN (2,3,4)
				SELECT ISNULL(B.BASICCOUNT,0) BASICCOUNT,ISNULL(B.DECLAREDAMT,0) DECLAREDAMT,I.INCOMECOUNT,I.INCOMEAMT
				INTO #TEMP2 
				FROM #BASICDATA15H B WITH(NOLOCK)
									  FULL JOIN #INCOMEDATA15H I WITH(NOLOCK)
											ON B.BRANCHID = I.BRANCHID 
				DROP TABLE #BASICDATA15H
				DROP TABLE #INCOMEDATA15H
				SELECT * FROM #TEMP2	
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETCORRBASICINFOCOUNT')
DROP PROCEDURE USP_F15GH_GETCORRBASICINFOCOUNT
GO
CREATE PROCEDURE [dbo].[USP_F15GH_GETCORRBASICINFOCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS 
BEGIN
	IF(@FORMID = 1)
		BEGIN
			SELECT TOP 1
					( 
					SELECT COUNT(DETAILID) FROM  CORRFORM15GBASIC WITH(NOLOCK)
						WHERE CORSTATUS = 1
							AND BRANCHID = @BRANCHID
							AND QUARTER = @QUARTER 
					)AS BASICCOUNT,
					(
					SELECT COUNT(DETAILID) FROM  CORRFORM15GBASIC WITH(NOLOCK)
						WHERE CORSTATUS = 2
							AND BRANCHID = @BRANCHID
							AND QUARTER = @QUARTER
					)AS UPDATECOUNT,
					(
					SELECT COUNT(DETAILID) FROM  CORRFORM15GBASIC WITH(NOLOCK)
						WHERE CORSTATUS = 3
							AND BRANCHID = @BRANCHID
							AND QUARTER = @QUARTER
					)AS DELETECOUNT,
					(
					SELECT COUNT(DETAILID) FROM  CORRFORM15GBASIC WITH(NOLOCK)
						WHERE CORSTATUS = 4
							AND BRANCHID = @BRANCHID
							AND QUARTER = @QUARTER
					)AS ADDCOUNT,
					(
					SELECT COUNT(INCOMEID) FROM  CORRFORM15GINCOME CI WITH(NOLOCK)
						INNER JOIN CORRFORM15GBASIC CB
							ON CI.DETAILID = CB.DETAILID
						WHERE CI.CORSTATUS = 1
							AND CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND CB.CORSTATUS = 1
					)AS INCOMECOUNT,
					(
					SELECT ISNULL(MAX(REVISENUMBER), 0)
						FROM ACKNO15GHREV AR WITH(NOLOCK)
							INNER JOIN ACKNO15GH AK
							ON AR.ACKID = AK. ACKID 
						WHERE AK.BRANCHID = @BRANCHID
							AND AK.FORMID = @FORMID
							AND AK.QUARTER = @QUARTER
					)AS CORRCOUNT
				FROM CORRFORM15GBASIC 	
		END
	ELSE
		BEGIN 
			SELECT TOP 1
				( 
				SELECT COUNT(DETAILID) FROM  CORRFORM15HBASIC WITH(NOLOCK)
					WHERE CORSTATUS = 1
						AND BRANCHID = @BRANCHID
						AND QUARTER = @QUARTER 
				)AS BASICCOUNT,
				(
				SELECT COUNT(DETAILID) FROM  CORRFORM15HBASIC WITH(NOLOCK)
					WHERE CORSTATUS = 2
						AND BRANCHID = @BRANCHID
						AND QUARTER = @QUARTER 
				)AS UPDATECOUNT,
				(
				SELECT COUNT(DETAILID) FROM  CORRFORM15HBASIC WITH(NOLOCK)
					WHERE CORSTATUS = 3
						AND BRANCHID = @BRANCHID
						AND QUARTER = @QUARTER 
				)AS DELETECOUNT,
				(
				SELECT COUNT(DETAILID) FROM  CORRFORM15HBASIC WITH(NOLOCK)
					WHERE CORSTATUS = 4
						AND BRANCHID = @BRANCHID
						AND QUARTER = @QUARTER 
				)AS ADDCOUNT,
				(
				SELECT COUNT(INCOMEID) FROM  CORRFORM15HINCOME CI WITH(NOLOCK)
					INNER JOIN CORRFORM15HBASIC CB
							ON CI.DETAILID = CB.DETAILID
						WHERE CI.CORSTATUS = 1
							AND CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND CB.CORSTATUS = 1
				)AS INCOMECOUNT,
				(
				SELECT ISNULL(MAX(REVISENUMBER), 0)
						FROM ACKNO15GHREV AR WITH(NOLOCK)
							INNER JOIN ACKNO15GH AK
							ON AR.ACKID = AK. ACKID 
						WHERE AK.BRANCHID = @BRANCHID
							AND AK.FORMID = @FORMID
							AND AK.QUARTER = @QUARTER
					)AS CORRCOUNT
			FROM CORRFORM15HBASIC 
		END	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETDEDUCTEEIDBASEDONBRANCHIDANDPAN')
DROP PROCEDURE USP_F15GH_GETDEDUCTEEIDBASEDONBRANCHIDANDPAN
GO
CREATE PROCEDURE [dbo].[USP_F15GH_GETDEDUCTEEIDBASEDONBRANCHIDANDPAN]
	@BRANCHID INT,
	@PANSTRING NVARCHAR(MAX),
	@ISDEDUCTEE BIT          
AS          
BEGIN          
 DECLARE @QUERY NVARCHAR(MAX)          
 DECLARE @JION VARCHAR(20); 
 SELECT DISTINCT * INTO #TEMPPAN FROM DBO.UDF_TDS_SPLITSTRING(@PANSTRING,',')        
	IF @ISDEDUCTEE=1          
			SET @JION='INNER';          
	ELSE          
			SET @JION='LEFT';          
		SET @QUERY= 'SELECT  D.DEDUCTEEID, D.REFERENCENO, D.PAN, C.BRANCHCODE, D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK) 
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON D.BRANCHID = C.BRANCHID '          
		+ @JION +' JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
		INNER JOIN #TEMPPAN TP ON TP.DATA=D.PAN            
		WHERE D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +' AND D.DEDUCTEEID IN 
		(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
		EXCEPT 
		SELECT DEDUCTEEID FROM EMPLOYEE WITH(NOLOCK))  
		ORDER BY D.DEDUCTEEID DESC'          
        EXEC SP_EXECUTESQL @QUERY 
        DROP TABLE #TEMPPAN         
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETDESCRIPTIONBASEDONSECTIONNAME')
DROP PROCEDURE USP_F15GH_GETDESCRIPTIONBASEDONSECTIONNAME
GO
CREATE PROCEDURE  USP_F15GH_GETDESCRIPTIONBASEDONSECTIONNAME
@SECTIONNAME VARCHAR(10)
AS          
BEGIN
	SELECT DESCRIPTION FROM TAXSECTIONS WITH(NOLOCK)
	WHERE SECTIONNAME=@SECTIONNAME AND FORMID = 2
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETDETAILIDBASEDONDEDUCTEEID')
DROP PROCEDURE USP_F15GH_GETDETAILIDBASEDONDEDUCTEEID
GO
CREATE  PROCEDURE [dbo].[USP_F15GH_GETDETAILIDBASEDONDEDUCTEEID]
@DEDUCTEEID NVARCHAR(MAX),
@QUARTER INT,
@FORMTYPE INT                   
AS          
BEGIN          
	DECLARE @QUERY NVARCHAR(MAX)          
	SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTEEID,',')  
		IF @FORMTYPE=1                 
			SET @QUERY= 'SELECT  DETAILID, BRANCHID, DEDUCTEEID, UNIQUEIDNUMBER FROM FORM15GBASIC G WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA=G.DEDUCTEEID        
				WHERE  ENTRYTYPE = 2 
					AND QUARTER=' + CAST(@QUARTER AS VARCHAR) + '
					AND G.DEDUCTEEID IN 
					(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
					INTERSECT
					SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))';
		ELSE
			SET @QUERY= 'SELECT  DETAILID, BRANCHID, DEDUCTEEID, UNIQUEIDNUMBER FROM FORM15HBASIC H WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA=H.DEDUCTEEID        
				WHERE ENTRYTYPE = 2 
					AND QUARTER=' + CAST(@QUARTER AS VARCHAR) + '
					AND H.DEDUCTEEID IN 
					(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
					INTERSECT
					SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))';
		EXEC SP_EXECUTESQL @QUERY          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETDETAILIDBASEDONUIN')
DROP PROCEDURE USP_F15GH_GETDETAILIDBASEDONUIN
GO
CREATE  PROCEDURE [dbo].[USP_F15GH_GETDETAILIDBASEDONUIN]
@UNIQUEIDNUMBER NVARCHAR(MAX),
@QUARTER INT,
@FORMTYPE INT                   
AS          
BEGIN          
	DECLARE @QUERY NVARCHAR(MAX)          
	SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@UNIQUEIDNUMBER,',')  
		IF @FORMTYPE=1                 
			SET @QUERY= 'SELECT  DETAILID, BRANCHID, DEDUCTEEID, UNIQUEIDNUMBER FROM FORM15GBASIC G WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA=G.UNIQUEIDNUMBER        
				WHERE  ENTRYTYPE IN(2,3)
					AND QUARTER=' + CAST(@QUARTER AS VARCHAR) + '
					AND G.DEDUCTEEID IN 
					(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
					INTERSECT
					SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))';
		ELSE
			SET @QUERY= 'SELECT  DETAILID, BRANCHID, DEDUCTEEID, UNIQUEIDNUMBER FROM FORM15HBASIC H WITH(NOLOCK) 
				INNER JOIN #TEMP T ON T.DATA=H.UNIQUEIDNUMBER        
				WHERE ENTRYTYPE IN(2,3) 
					AND QUARTER=' + CAST(@QUARTER AS VARCHAR) + '
					AND H.DEDUCTEEID IN 
					(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
					INTERSECT
					SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))';
		EXEC SP_EXECUTESQL @QUERY          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETFORM15GHSUMMARY')
DROP PROCEDURE USP_F15GH_GETFORM15GHSUMMARY
GO
CREATE PROCEDURE [dbo].[USP_F15GH_GETFORM15GHSUMMARY]
	@BRANCHID INT  
AS  
	BEGIN  
		SELECT CB.BRANCHID,TB.QUARTER  
		INTO #COMPANY             
		FROM COMPANYBRANCH CB WITH(NOLOCK)                
			FULL JOIN  
			(                
				SELECT 1 QUARTER UNION SELECT 2 QUARTER UNION SELECT 3 QUARTER UNION SELECT 4 QUARTER                                
			) AS TB ON 1=1         
			WHERE CB.BRANCHID = @BRANCHID  
		SELECT DETAILID, QUARTER, BRANCHID, SUM(ESTIMATEDINC)AS ESTIMATEDINC 
		INTO #FORM15GBASIC
		FROM FORM15GBASIC 
			WHERE BRANCHID=@BRANCHID 
			GROUP BY DETAILID,QUARTER,BRANCHID 
		SELECT DETAILID, COUNT(INCOMEID) AS INCOMEID, SUM(AMTOFINC)AS AMTOFINC
		INTO #FORM15GINCOME 
			FROM FORM15GINCOME 
			WHERE DETAILID IN(SELECT DETAILID FROM #FORM15GBASIC WHERE BRANCHID=@BRANCHID) GROUP BY DETAILID 
		SELECT DETAILID, QUARTER, BRANCHID, SUM(ESTIMATEDINC)AS ESTIMATEDINC 
		INTO #FORM15HBASIC
		FROM FORM15HBASIC 
			WHERE BRANCHID=@BRANCHID 
			GROUP BY DETAILID,QUARTER,BRANCHID 
		SELECT DETAILID, COUNT(INCOMEID) AS INCOMEID, SUM(AMTOFINC)AS AMTOFINC
		INTO #FORM15HINCOME 
			FROM FORM15HINCOME 
			WHERE DETAILID IN(SELECT DETAILID FROM #FORM15HBASIC WHERE BRANCHID=@BRANCHID) 
			GROUP BY DETAILID 		  
		SELECT TB.BRANCHID, TB.QUARTER, ISNULL(CAST(BASICCOUNT15G AS BIGINT),0) BASICCOUNT15G, 
			ISNULL(CAST(DECLAREDAMT15G AS BIGINT),0) DECLAREDAMT15G, 
			ISNULL(INCOMECOUNT15G,0) INCOMECOUNT15G, ISNULL(CAST(INCOMEAMT15G AS BIGINT),0) INCOMEAMT15G, 
			ISNULL(BASICCOUNT15H,0) BASICCOUNT15H, ISNULL(CAST(DECLAREDAMT15H AS BIGINT),0) DECLAREDAMT15H, 
			ISNULL(INCOMECOUNT15H,0) INCOMECOUNT15H, ISNULL(CAST(INCOMEAMT15H AS BIGINT),0) INCOMEAMT15H   
		FROM #COMPANY TB  
		LEFT JOIN  
			(SELECT ISNULL(G.BRANCHID,H.BRANCHID)AS BRANCHID, ISNULL(G.QUARTER,H.QUARTER)AS QUARTER, G.BASICCOUNT15G, 
				ISNULL(CAST(G.DECLAREDAMT15G AS BIGINT),0) DECLAREDAMT15G, 
				ISNULL(CAST(G.INCOMEAMT15G AS BIGINT),0) INCOMEAMT15G, G.INCOMECOUNT15G,   
				H.BASICCOUNT15H, ISNULL(CAST(H.DECLAREDAMT15H AS BIGINT),0) DECLAREDAMT15H, 
				ISNULL(CAST(H.INCOMEAMT15H AS BIGINT),0) INCOMEAMT15H , H.INCOMECOUNT15H 
			FROM  
				(SELECT GB.BRANCHID, GB.QUARTER, COUNT(DISTINCT GB.DETAILID) AS BASICCOUNT15G,  
					ISNULL(SUM(CAST(GB.ESTIMATEDINC AS BIGINT)),0) AS DECLAREDAMT15G,  
					SUM(GI.INCOMEID) AS INCOMECOUNT15G,  
					ISNULL(SUM(CAST(GI.AMTOFINC AS BIGINT)),0) AS INCOMEAMT15G    
				FROM #FORM15GBASIC GB WITH(NOLOCK)  
					LEFT JOIN #FORM15GINCOME GI WITH(NOLOCK)  
					ON GB.DETAILID = GI.DETAILID   
				WHERE GB.BRANCHID = @BRANCHID  
				GROUP BY GB.BRANCHID,GB.QUARTER) G  
			FULL JOIN   
				(SELECT BRANCHID, QUARTER, COUNT(DISTINCT HB.DETAILID) AS BASICCOUNT15H,  
					ISNULL(SUM(CAST(HB.ESTIMATEDINC AS BIGINT)),0) AS DECLAREDAMT15H,  
					SUM(HI.INCOMEID) AS INCOMECOUNT15H,  
					ISNULL(SUM(CAST(HI.AMTOFINC AS BIGINT)),0) AS INCOMEAMT15H  
				FROM #FORM15HBASIC HB WITH(NOLOCK)  
					LEFT JOIN #FORM15HINCOME HI WITH(NOLOCK)  
					ON HB.DETAILID = HI.DETAILID   
				WHERE HB.BRANCHID = @BRANCHID
				GROUP BY HB.BRANCHID,HB.QUARTER) H  
				ON G.BRANCHID = @BRANCHID  
				AND G.QUARTER = H.QUARTER) SUMMARY  
			ON TB.BRANCHID = SUMMARY.BRANCHID  
			AND TB.QUARTER = SUMMARY.QUARTER 
		IF OBJECT_ID('TEMPDB..#FORM15GBASIC') IS NOT NULL
		DROP TABLE #FORM15GBASIC  
		IF OBJECT_ID('TEMPDB..#FORM15GINCOME') IS NOT NULL
		DROP TABLE #FORM15GINCOME  
		IF OBJECT_ID('TEMPDB..#FORM15HBASIC') IS NOT NULL
		DROP TABLE #FORM15HBASIC  
		IF OBJECT_ID('TEMPDB..#FORM15HINCOME') IS NOT NULL
		DROP TABLE #FORM15HINCOME  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETINCOMEDETAILS')
DROP PROCEDURE USP_F15GH_GETINCOMEDETAILS
GO
CREATE PROCEDURE USP_F15GH_GETINCOMEDETAILS 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
	IF(@FORMID = 1)
		BEGIN
			SELECT * 
			INTO #MASTERBG
			FROM DEDUCTEE WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID
			SELECT *
			INTO #BASICDETG
			FROM FORM15GBASIC WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
				AND DETAILID IN (SELECT DETAILID FROM FORM15GINCOME WITH(NOLOCK)) 
			SELECT ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) AS SERIALNO, B.UNIQUEIDNUMBER, DD.REFERENCENO,I.IDENFICATIONNUM, T.SECTIONNAME, I.AMTOFINC
			INTO #TEMPG
			FROM FORM15GINCOME I
					INNER JOIN #BASICDETG B WITH(NOLOCK)
						ON I.DETAILID = B.DETAILID
					INNER JOIN #MASTERBG DD WITH(NOLOCK)
						ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
					INNER JOIN TAXSECTIONS T WITH(NOLOCK)
						ON I.SECTIONID = T.SECTIONID
			SELECT * FROM #TEMPG
			DROP TABLE #TEMPG
			DROP TABLE #MASTERBG
			DROP TABLE #BASICDETG
		END
	ELSE
		BEGIN
			SELECT * 
			INTO #MASTERBH
			FROM DEDUCTEE WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID
			SELECT *
			INTO #BASICDETH
			FROM FORM15HBASIC WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
				AND DETAILID IN (SELECT DETAILID FROM FORM15HINCOME WITH(NOLOCK)) 
			SELECT ROW_NUMBER() OVER(ORDER BY(SELECT NULL)) AS SERIALNO, B.UNIQUEIDNUMBER, DD.REFERENCENO,I.IDENFICATIONNUM, T.SECTIONNAME, I.AMTOFINC
			INTO #TEMPH
			FROM FORM15HINCOME I
					INNER JOIN #BASICDETH B WITH(NOLOCK)
						ON I.DETAILID = B.DETAILID
					INNER JOIN #MASTERBH DD WITH(NOLOCK)
						ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
					INNER JOIN TAXSECTIONS T WITH(NOLOCK)
						ON I.SECTIONID = T.SECTIONID
			SELECT * FROM #TEMPH
			DROP TABLE #TEMPH
			DROP TABLE #MASTERBH
			DROP TABLE #BASICDETH
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETISVALIDCORRERETURN')
DROP PROCEDURE USP_F15GH_GETISVALIDCORRERETURN
GO
CREATE PROCEDURE USP_F15GH_GETISVALIDCORRERETURN
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT,
	@REVISENUMBER INT
AS
BEGIN
	DECLARE @ERROR INT
	SET @ERROR = 2
	DECLARE @ACK INT
	SET @ACK = (
		SELECT COUNT(CD.ISVALIDCORRERETURN) AS ISVALIDCORRERETURN FROM CORRECTIONDETAILSF15GH CD WITH(NOLOCK)
		INNER JOIN ACKNO15GH AK WITH(NOLOCK)
			ON CD.BRANCHID = AK.BRANCHID
			AND CD.FORMID = AK.FORMID
			AND CD.QUARTER = AK.QUARTER
		INNER JOIN ACKNO15GHREV AR
			ON AK.ACKID = AR.ACKID
		WHERE CD.BRANCHID = @BRANCHID
			AND CD.FORMID = @FORMID
			AND CD.QUARTER = @QUARTER
			AND CD.REVISENUMBER = @REVISENUMBER
			AND CD.ISVALIDCORRERETURN <> 0
			AND AR.REVNUM IS NOT NULL 
			AND AR.REVISENUMBER = 0)	
	IF(@ACK = 0)
		BEGIN
			SET @ACK = (
				SELECT COUNT(CD.ISVALIDCORRERETURN) AS ISVALIDCORRERETURN FROM CORRECTIONDETAILSF15GH CD WITH(NOLOCK)
				INNER JOIN ACKNO15GH AK WITH(NOLOCK)
					ON CD.BRANCHID = AK.BRANCHID
					AND CD.FORMID = AK.FORMID
					AND CD.QUARTER = AK.QUARTER
				INNER JOIN ACKNO15GHREV AR
					ON AK.ACKID = AR.ACKID
				WHERE CD.BRANCHID = @BRANCHID
					AND CD.FORMID = @FORMID
					AND CD.QUARTER = @QUARTER
					AND CD.REVISENUMBER = @REVISENUMBER
					AND CD.ISVALIDCORRERETURN <> 0 
					AND AR.REVNUM IS NULL)
			IF(@ACK = 0)
				BEGIN
					SET @ERROR = 0
				END
			ELSE
				BEGIN
					SET @ERROR = 1
				END
		END	
	SELECT @ERROR
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GetMISForm15GHDetails')
DROP PROCEDURE USP_F15GH_GetMISForm15GHDetails
GO
CREATE PROCEDURE [dbo].[USP_F15GH_GetMISForm15GHDetails]
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT  
AS  
 BEGIN  
  DECLARE @SQLQUERY NVARCHAR(MAX);
  DECLARE @TABLENAME NVARCHAR(15);
    DECLARE @RTBRANCHID INT,@ISZORO INT;
	SET @RTBRANCHID = @BRANCHID
	IF((SELECT TOP 1 DEDUCTORID FROM DEDUCTOR WITH(NOLOCK) WHERE TAN = 'HYDA08387B') <> '')
		BEGIN
			SELECT @ISZORO = ISZORO FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID
			IF(@ISZORO = 0)
				BEGIN
					SET @BRANCHID = (SELECT PARENTBRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @RTBRANCHID)
				END
		END
  IF (@FORMID = 1)
	BEGIN
		SET @SQLQUERY =  'SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS SERIALNO, B.QUARTER, D.NAME, 
			SUBSTRING(B.UNIQUEIDNUMBER,0,10) AS UNIQUEIDNUMBER, D.PAN, B.ESTIMATEDINC, 
			B.ESTIMATEDTOTALINCPRVYR, CASE WHEN B.DECLARATIONDATE = ''1900-01-01'' THEN NULL ELSE B.DECLARATIONDATE END DECLARATIONDATE
		FROM FORM15GBASIC  B WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON B.DEDUCTEEID = D.DEDUCTEEID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE B.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
		IF(@QUARTER <> -1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND B.QUARTER = ' + CAST(@QUARTER AS VARCHAR)
			END
		IF(@RTBRANCHID <> @BRANCHID)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND  RTBRANCHID = ' + CAST(@RTBRANCHID AS VARCHAR); 
			END  
	END
  ELSE
	BEGIN
		SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS SERIALNO, B.QUARTER, D.NAME, 
			SUBSTRING(B.UNIQUEIDNUMBER,0,10) AS UNIQUEIDNUMBER, D.PAN, B.ASSESSEEDOB, B.ESTIMATEDINC, 
			B.ESTIMATEDTOTALINCPRVYR, CASE WHEN B.DECLARATIONDATE = ''1900-01-01'' THEN NULL ELSE B.DECLARATIONDATE END DECLARATIONDATE
		FROM FORM15HBASIC  B WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON B.DEDUCTEEID = D.DEDUCTEEID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE B.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)
		IF(@QUARTER <> -1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND B.QUARTER = ' + CAST(@QUARTER AS VARCHAR)
			END
		IF(@RTBRANCHID <> @BRANCHID)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND  RTBRANCHID = ' + CAST(@RTBRANCHID AS VARCHAR); 
			END  
	END
  EXEC SP_EXECUTESQL @SQLQUERY 
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETNONEMPLOYEE')
DROP PROCEDURE USP_F15GH_GETNONEMPLOYEE
GO
CREATE PROCEDURE [dbo].[USP_F15GH_GETNONEMPLOYEE]
 @BRANCHID INT
AS
	BEGIN
		SELECT	D.DEDUCTEEID AS DEDUCTEEID,D.NAME AS NAME,D.PAN AS PAN,
				D.ADDRESS1 AS ADDRESS1,D.ADDRESS2 AS ADDRESS2,D.ADDRESS3 AS ADDRESS3,
				D.ADDRESS4 AS ADDRESS4,D.ADDRESS5 AS ADDRESS5,
				CAST(D.STATEID AS INT) AS STATEID,D.PINCODE AS PINCODE,
				D.EMAILADDRESS AS EMAILADDRESS,ISNULL(NE.MOBILENO ,'') MOBILE	
		FROM   DEDUCTEE D WITH(NOLOCK) 
					INNER JOIN NONEMPLOYEE  NE WITH(NOLOCK)  
							ON D.DEDUCTEEID=NE.DEDUCTEEID
					LEFT JOIN STATEMASTER SM WITH(NOLOCK)  
							ON D.STATEID=  SM.STATEID
		WHERE  BRANCHID=@BRANCHID 
					AND D.PAN NOT IN('PANINVALID', 'PANAPPLIED','PANNOTAVBL')
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETNULLUINCOUNT')
DROP PROCEDURE USP_F15GH_GETNULLUINCOUNT
GO
CREATE PROCEDURE USP_F15GH_GETNULLUINCOUNT
    @BRANCHID INT,
    @QUARTER INT,
    @FORMID INT
AS
	BEGIN
		IF(@FORMID = 1)
			BEGIN
				SELECT COUNT(DETAILID) 
				FROM FORM15GBASIC WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER AND ISNULL(UNIQUEIDNUMBER, '') = ''	
			END
		ELSE
			BEGIN
				SELECT COUNT(DETAILID) 
				FROM FORM15HBASIC WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER AND ISNULL(UNIQUEIDNUMBER, '') = ''
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETPANUIN')
DROP PROCEDURE USP_F15GH_GETPANUIN
GO
CREATE PROCEDURE USP_F15GH_GETPANUIN
 @FORMTYPE INT
AS
BEGIN
	IF(@FORMTYPE=1)
	BEGIN
		SELECT DISTINCT D.PAN + '-' +SUBSTRING(F.UNIQUEIDNUMBER,0,11) AS PAN, SUBSTRING(F.UNIQUEIDNUMBER,0,11) AS UNIQUEIDNUMBER
			FROM FORM15GBASIC F WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK)
			ON F.DEDUCTEEID=D.DEDUCTEEID
		WHERE LEN(ISNULL(F.UNIQUEIDNUMBER,'')) <> 0
	END
	ELSE
	BEGIN
		SELECT DISTINCT D.PAN + '-' +SUBSTRING(F.UNIQUEIDNUMBER,0,11) AS PAN, SUBSTRING(F.UNIQUEIDNUMBER,0,11) AS UNIQUEIDNUMBER 
			FROM FORM15HBASIC F WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK)
			ON F.DEDUCTEEID=D.DEDUCTEEID
		WHERE LEN(ISNULL(F.UNIQUEIDNUMBER,'')) <> 0 
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETSECTIONIDBASEDONSECTIONNAME')
DROP PROCEDURE USP_F15GH_GETSECTIONIDBASEDONSECTIONNAME
GO
CREATE PROCEDURE [dbo].[USP_F15GH_GETSECTIONIDBASEDONSECTIONNAME]
@SECTIONNAME NVARCHAR(MAX)
AS          
BEGIN
	SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@SECTIONNAME,',')
	SELECT SECTIONID, SECTIONNAME, DESCRIPTION FROM TAXSECTIONS S WITH(NOLOCK)
	INNER JOIN #TEMP T ON T.DATA=S.SECTIONNAME
							WHERE FORMID = 2
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_GETSTATEID')
DROP PROCEDURE USP_F15GH_GETSTATEID
GO
CREATE  PROCEDURE USP_F15GH_GETSTATEID 
@BRANCHID NVARCHAR(MAX),
@QUARTER INT  
AS          
BEGIN
	SELECT DISTINCT * 
	INTO #TEMP 
	FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID,',')  
	SELECT CB.BRANCHID, ISNULL(D.STATEID,15) STATEID
	INTO #DEDAVBL
	FROM #TEMP  T
		LEFT JOIN COMPANYBRANCH CB
			ON CB.BRANCHID = T.DATA
		LEFT JOIN BRANCHDEDUCTORS  B
			ON CB.BRANCHID = B.BRANCHID
		LEFT JOIN DEDUCTOR D
			ON D.DEDUCTORID = B.DEDUCTORID
	WHERE B.QUARTER = @QUARTER
	SELECT CB.BRANCHID, 15 STATEID
	FROM #TEMP  T
		LEFT JOIN COMPANYBRANCH CB
			ON CB.BRANCHID = T.DATA
	WHERE
		CB.BRANCHID NOT IN (SELECT BRANCHID FROM #DEDAVBL)
	UNION 
	SELECT * FROM #DEDAVBL 
	DROP TABLE #TEMP
	DROP TABLE #DEDAVBL 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_ISERETURNGENERATED')
DROP PROCEDURE USP_F15GH_ISERETURNGENERATED
GO
CREATE PROCEDURE [dbo].[USP_F15GH_ISERETURNGENERATED]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
BEGIN
	SELECT COUNT(ACKID) ACKID
	FROM   ACKNO15GH WITH(NOLOCK)
	WHERE  BRANCHID = @BRANCHID AND FORMID =@FORMID AND QUARTER = @QUARTER  AND ISVALID = 1 AND LEN(ORGNUM) = 15;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_SAVEACKNOWLEDGEMENTDETAILS')
DROP PROCEDURE USP_F15GH_SAVEACKNOWLEDGEMENTDETAILS
GO
CREATE PROCEDURE USP_F15GH_SAVEACKNOWLEDGEMENTDETAILS
	@FORMID  INT,
	@BRANCHID INT,
	@QUARTER  INT,
	@ISREQACTIVE BIT = 0
AS
	BEGIN
		IF EXISTS(SELECT ACKID FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER)
			BEGIN
				UPDATE ACKNO15GH
				SET ISREQACTIVE = @ISREQACTIVE 
				WHERE BRANCHID = @BRANCHID
					AND FORMID = @FORMID
					AND QUARTER = @QUARTER
			END
		ELSE
			BEGIN
				INSERT INTO ACKNO15GH(BRANCHID, FORMID, [QUARTER], ISREQACTIVE) 
				VALUES (@BRANCHID, @FORMID, @QUARTER, @ISREQACTIVE);
				SELECT 1;
			END 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_SAVECORRACKNOWLEGMENTDETAIL')
DROP PROCEDURE USP_F15GH_SAVECORRACKNOWLEGMENTDETAIL
GO
CREATE PROCEDURE USP_F15GH_SAVECORRACKNOWLEGMENTDETAIL
	@ACKNOREVID INT,
	@BRANCHID INT,
	@QUARTER INT,
	@FORMID INT,
	@REVNUM VARCHAR(15),
	@REVFILEDDATE SMALLDATETIME
AS
BEGIN
	DECLARE @DUPREVNUM INT
	SET @DUPREVNUM =ISNULL((
				SELECT MAX(AR.ACKNOREVID) FROM ACKNO15GHREV AR WITH(NOLOCK)
					INNER JOIN ACKNO15GH AK WITH(NOLOCK)
						ON AR.ACKID = AK.ACKID
				WHERE AK.BRANCHID = @BRANCHID
					AND AK.QUARTER = @QUARTER
					AND AK.FORMID = @FORMID
					AND AR.REVNUM = @REVNUM
					AND AR.ACKNOREVID <> @ACKNOREVID), 0)
	IF(@DUPREVNUM <> 0) 
		BEGIN
			SELECT 0
		END
	ELSE
		BEGIN
			IF(@ACKNOREVID <> 0)	
				BEGIN
					UPDATE ACKNO15GHREV SET  REVNUM = @REVNUM , REVFILEDDATE = @REVFILEDDATE 
						WHERE  ACKNOREVID = @ACKNOREVID
					SELECT 2
				END
			ELSE
				BEGIN
					UPDATE AR SET  REVNUM = @REVNUM , REVFILEDDATE = @REVFILEDDATE 
						FROM  ACKNO15GHREV AR
						INNER JOIN ACKNO15GH AK WITH(NOLOCK)
								ON AR.ACKID = AK.ACKID
						WHERE AK.BRANCHID = @BRANCHID
							AND AK.QUARTER = @QUARTER
							AND AK.FORMID = @FORMID
							AND AR.REVNUM IS NULL	
					SELECT 1
				END
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_SAVECORRDETAIL')
DROP PROCEDURE USP_F15GH_SAVECORRDETAIL
GO
CREATE PROCEDURE USP_F15GH_SAVECORRDETAIL
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@REVISENUMBER INT,
	@ISVALIDCORRERETURN BIT,
	@ISFINALUPDATE BIT,
	@ISCANCELLED BIT
AS
BEGIN 
	DECLARE @MAXREVNUM INT 
	SET @MAXREVNUM = 0
	IF(@ISVALIDCORRERETURN = 0)
		BEGIN
			DECLARE @MAXREVISENUMBER INT 
			SET	@MAXREVISENUMBER = 
				ISNULL((SELECT MAX(REVISENUMBER) 
						FROM CORRECTIONDETAILSF15GH WITH(NOLOCK)
						WHERE BRANCHID = @BRANCHID
							AND FORMID = @FORMID
							AND QUARTER = @QUARTER), 0)
			IF(@MAXREVISENUMBER <> 0)
				BEGIN
					INSERT INTO CORRECTIONDETAILSF15GH 
					VALUES(@BRANCHID, @FORMID, @QUARTER, @MAXREVISENUMBER + 1, 
							@ISVALIDCORRERETURN, @ISFINALUPDATE, @ISCANCELLED)
				END
			ELSE
				BEGIN
					INSERT INTO CORRECTIONDETAILSF15GH 
					VALUES(@BRANCHID, @FORMID, @QUARTER, @REVISENUMBER, 
						@ISVALIDCORRERETURN, @ISFINALUPDATE, @ISCANCELLED)
				END
		END
	ELSE
		BEGIN 
			SET	@MAXREVNUM = 
				ISNULL((SELECT MAX(REVISENUMBER) 
						FROM ACKNO15GHREV AR WITH(NOLOCK)
						INNER JOIN ACKNO15GH AK
							ON AR.ACKID = AK. ACKID 
						WHERE AK.BRANCHID = @BRANCHID
							AND AK.FORMID = @FORMID
							AND AK.QUARTER = @QUARTER), 0) + 1
			IF(@ISFINALUPDATE = 0)
				BEGIN
					UPDATE CORRECTIONDETAILSF15GH 
					SET ISVALIDCORRERETURN = @ISVALIDCORRERETURN
					WHERE BRANCHID = @BRANCHID 
						AND FORMID = @FORMID 
						AND QUARTER = @QUARTER
						AND REVISENUMBER = @MAXREVNUM 
					INSERT INTO ACKNO15GHREV(ACKID, REVISENUMBER)
					SELECT 	AK.ACKID, 0
					FROM CORRECTIONDETAILSF15GH CR WITH(NOLOCK)
					INNER JOIN ACKNO15GH AK
						ON CR.BRANCHID = AK.BRANCHID
						AND CR.FORMID = AK.FORMID
						AND CR.QUARTER = AK.QUARTER
					WHERE CR.ISVALIDCORRERETURN = 1
						AND CR.ISFINALUPDATE = 0
						AND CR.REVISENUMBER = @MAXREVNUM
				END
			ELSE
				BEGIN
				UPDATE AR SET REVISENUMBER = CR.REVISENUMBER
					FROM ACKNO15GHREV AR
					INNER JOIN ACKNO15GH AK
					 ON AR.ACKID = AK.ACKID
					INNER JOIN CORRECTIONDETAILSF15GH CR
						ON AK.BRANCHID = CR.BRANCHID
						AND AK.FORMID = CR.FORMID
						AND AK.QUARTER = CR.QUARTER 
					WHERE CR.ISVALIDCORRERETURN = 1
						AND CR.ISFINALUPDATE = 0
						AND CR.REVISENUMBER = @MAXREVNUM
						AND AR.REVISENUMBER = 0
				UPDATE CORRECTIONDETAILSF15GH 
				SET ISFINALUPDATE = @ISFINALUPDATE
				WHERE BRANCHID = @BRANCHID 
					AND FORMID = @FORMID 
					AND QUARTER = @QUARTER
					AND REVISENUMBER = @MAXREVNUM  					
				END	
		END
	SELECT @MAXREVNUM 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_SAVEFORM15GHACKNOWLEDGEMENT')
DROP PROCEDURE USP_F15GH_SAVEFORM15GHACKNOWLEDGEMENT
GO
CREATE PROCEDURE [dbo].[USP_F15GH_SAVEFORM15GHACKNOWLEDGEMENT]
	@ACKID INT = -1,
	@FORMID  INT,
	@BRANCHID INT,
	@QUARTER  INT,
	@ORGNUM VARCHAR(15) = NULL,
	@ORGFILEDATE SMALLDATETIME = NULL,
	@ERETURNGENDATE SMALLDATETIME = NULL,
	@ISVALID BIT = NULL,
	@ISREQACTIVE BIT = 0,
    @QUEUEID VARCHAR(10) = NULL
AS
	BEGIN
		IF (@ACKID = -1)
			BEGIN
				IF EXISTS(SELECT ACKID FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER)
					BEGIN
						UPDATE ACKNO15GH
						SET ORGNUM = @ORGNUM, ORGFILEDATE = @ORGFILEDATE, ERETURNGENDATE = @ERETURNGENDATE,
							ISVALID = @ISVALID, ISREQACTIVE = @ISREQACTIVE
						WHERE BRANCHID = @BRANCHID
							AND FORMID = @FORMID
							AND QUARTER = @QUARTER
					END
				ELSE
					BEGIN
						INSERT INTO ACKNO15GH(BRANCHID, FORMID, [QUARTER], ORGNUM, ORGFILEDATE, ERETURNGENDATE, ISVALID, ISREQACTIVE, QUEUEID) 
						VALUES (@BRANCHID, @FORMID, @QUARTER, @ORGNUM, @ORGFILEDATE, @ERETURNGENDATE, @ISVALID, @ISREQACTIVE, @QUEUEID);
						SELECT @ACKID;
					END 
			END  
		ELSE
			BEGIN
				UPDATE ACKNO15GH 
				SET ORGNUM = @ORGNUM, ORGFILEDATE = @ORGFILEDATE
				WHERE ACKID = @ACKID;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_UPDATEAMTTOINCOMEAMT')
DROP PROCEDURE USP_F15GH_UPDATEAMTTOINCOMEAMT
GO
CREATE  PROCEDURE [dbo].[USP_F15GH_UPDATEAMTTOINCOMEAMT]
@CREATEDDATE VARCHAR(20),
@FORMTYPE INT      
AS          
BEGIN
	IF @FORMTYPE = 1
		BEGIN         
			SELECT B.DETAILID, SUM(I.AMTOFINC) INC
			INTO #INCSUM15G
			FROM FORM15GBASIC B WITH(NOLOCK)
				INNER JOIN FORM15GINCOME I
					ON B.DETAILID = I.DETAILID 
			WHERE CONVERT(VARCHAR(20),CREATEDDATE,113) = CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)
			GROUP BY B.DETAILID
			UPDATE FORM15GBASIC SET ESTIMATEDINC = I.INC
			FROM FORM15GBASIC B 
				INNER JOIN #INCSUM15G I
					ON B.DETAILID = I.DETAILID 
			DROP TABLE #INCSUM15G
		END
	ELSE
		BEGIN
			SELECT B.DETAILID, SUM(I.AMTOFINC) INC
			INTO #INCSUM15H
			FROM FORM15HBASIC B WITH(NOLOCK)
				INNER JOIN FORM15HINCOME I
					ON B.DETAILID = I.DETAILID 
			WHERE CONVERT(VARCHAR(20),CREATEDDATE,113) = CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)
			GROUP BY B.DETAILID
			UPDATE FORM15HBASIC SET ESTIMATEDINC = I.INC
			FROM FORM15HBASIC B 
				INNER JOIN #INCSUM15H I
					ON B.DETAILID = I.DETAILID 
			DROP TABLE #INCSUM15H
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_UPDATEEXISTINGDEDUCTEES')
DROP PROCEDURE USP_F15GH_UPDATEEXISTINGDEDUCTEES
GO
CREATE PROCEDURE USP_F15GH_UPDATEEXISTINGDEDUCTEES       
(                
@BRANCHID INT,                
@REFNO VARCHAR(20),                
@NAME VARCHAR(75),                
@PAN VARCHAR(10),              
@PANREFERENCE VARCHAR(10),              
@ADDRESS1 VARCHAR(25),                
@ADDRESS2 VARCHAR(25),                
@ADDRESS3 VARCHAR(25),                
@ADDRESS4 VARCHAR(25),                
@ADDRESS5 VARCHAR(25),                
@PINCODE VARCHAR(6),                
@STATEID INT,   
@EMAILADDRESS VARCHAR(75),
@MOBILENO VARCHAR(10),
@CODE TINYINT=1               
)                
AS              
BEGIN            
    DECLARE @DEDUCTEEID INT;          
    SELECT @DEDUCTEEID = DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID AND REFERENCENO=@REFNO ;           
    UPDATE DEDUCTEE WITH (ROWLOCK) SET NAME=@NAME,PAN=@PAN,PANREFERENCE = CASE WHEN ISNULL(PANREFERENCE,'')=''THEN @PANREFERENCE ELSE PANREFERENCE END ,
  ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,                
  ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID,EMAILADDRESS=@EMAILADDRESS,CODE=@CODE               
  WHERE DEDUCTEEID = @DEDUCTEEID       
  UPDATE NONEMPLOYEE WITH (ROWLOCK) SET DEDUCTEECODE= @CODE, MOBILENO=@MOBILENO   
   WHERE DEDUCTEEID = @DEDUCTEEID    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_UPDATETOTALNOOFFORM')
DROP PROCEDURE USP_F15GH_UPDATETOTALNOOFFORM
GO
CREATE  PROCEDURE USP_F15GH_UPDATETOTALNOOFFORM
@CREATEDDATE VARCHAR(20),
@FORMTYPE INT      
AS          
BEGIN
	IF @FORMTYPE = 1
		BEGIN         
			SELECT DEDUCTEEID, PAN, SUM(AMTOFINC) AS AMTOFINC, SUM(TOTALNOOFFORM15G) AS TOTALNOOFFORM15G
			INTO #FORM15GBASIC
			 FROM (
			SELECT D.DEDUCTEEID, D.PAN, 0 AS AMTOFINC, COUNT(GB.TOTALNOOFFORM15G) AS TOTALNOOFFORM15G
				FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN FORM15GBASIC GB WITH(NOLOCK)
					ON D.DEDUCTEEID = GB.DEDUCTEEID AND D.BRANCHID = GB.BRANCHID 
			WHERE CONVERT(VARCHAR(20),GB.CREATEDDATE,113) < CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)  
			GROUP BY  D.DEDUCTEEID, D.PAN
			UNION
			SELECT D.DEDUCTEEID, D.PAN , SUM(GI.AMTOFINC) AS AMTOFINC,0 AS TOTALNOOFFORM15G
				FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN FORM15GBASIC GB WITH(NOLOCK)
					ON D.DEDUCTEEID = GB.DEDUCTEEID AND D.BRANCHID = GB.BRANCHID 
				INNER JOIN FORM15GINCOME GI WITH(NOLOCK)
					ON GB.DETAILID = GI.DETAILID
			WHERE CONVERT(VARCHAR(20),GB.CREATEDDATE,113) < CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)  
			GROUP BY  D.DEDUCTEEID, D.PAN
			) AS  FINAL
			GROUP BY  DEDUCTEEID, PAN 
			UPDATE GB SET GB.TOTALNOOFFORM15G = TB.TOTALNOOFFORM15G , GB.AGGREGATEAMTFORM15G = TB.AMTOFINC
				FROM FORM15GBASIC GB
				INNER JOIN #FORM15GBASIC TB
					ON GB.DEDUCTEEID = TB.DEDUCTEEID
			WHERE CONVERT(VARCHAR(20),GB.CREATEDDATE,113) = CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)  
			DROP TABLE #FORM15GBASIC	
		END
	ELSE
		BEGIN
			SELECT DEDUCTEEID, PAN, SUM(AMTOFINC) AS AMTOFINC, SUM(TOTALNOOFFORM15H) AS TOTALNOOFFORM15H
			INTO #FORM15HBASIC
			FROM (
			SELECT D.DEDUCTEEID, D.PAN, 0 AS AMTOFINC, COUNT(HB.TOTALNOOFFORM15H) AS TOTALNOOFFORM15H
				FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN FORM15HBASIC HB WITH(NOLOCK)
					ON D.DEDUCTEEID = HB.DEDUCTEEID AND D.BRANCHID = HB.BRANCHID 
			WHERE CONVERT(VARCHAR(20),HB.CREATEDDATE,113) < CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)  
			GROUP BY  D.DEDUCTEEID, D.PAN
			UNION
			SELECT D.DEDUCTEEID, D.PAN , SUM(HI.AMTOFINC) AS AMTOFINC,0 AS TOTALNOOFFORM15H
				FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN FORM15HBASIC HB WITH(NOLOCK)
					ON D.DEDUCTEEID = HB.DEDUCTEEID AND D.BRANCHID = HB.BRANCHID 
				INNER JOIN FORM15HINCOME HI WITH(NOLOCK)
					ON HB.DETAILID = HI.DETAILID
			WHERE CONVERT(VARCHAR(20),HB.CREATEDDATE,113) < CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)  
			GROUP BY  D.DEDUCTEEID, D.PAN
			) AS  FINAL
			GROUP BY  DEDUCTEEID, PAN 
			UPDATE HB SET HB.TOTALNOOFFORM15H = TB.TOTALNOOFFORM15H , HB.AGGREGATEAMTFORM15H = TB.AMTOFINC
				FROM FORM15HBASIC HB
				INNER JOIN #FORM15HBASIC TB
					ON HB.DEDUCTEEID = TB.DEDUCTEEID
			WHERE CONVERT(VARCHAR(20),HB.CREATEDDATE,113) = CONVERT(VARCHAR(20),dateadd(mi, datediff(mi, 0, dateadd(s, 30, @CREATEDDATE)), 0),113)  
			DROP TABLE #FORM15HBASIC			
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_UPDATEUINANDPAYMENTMADE')
DROP PROCEDURE USP_F15GH_UPDATEUINANDPAYMENTMADE
GO
CREATE PROCEDURE USP_F15GH_UPDATEUINANDPAYMENTMADE
	@BRANCHID INT,
	@QUARTER INT
AS
BEGIN
DECLARE @SQL NVARCHAR(MAX)
	CREATE TABLE #COMPANYBRANCH(BRANCHID INT)
	DECLARE @FINAL15G TABLE (DETAILID INT, DEDUCTEEID INT, BRANCHID INT, CERTNO VARCHAR(MAX), PAYMENTTOTAL NUMERIC(13,2))
	IF (@BRANCHID = -1)
		SET @SQL='INSERT INTO #COMPANYBRANCH SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK)'
	ELSE
		SET @SQL='INSERT INTO #COMPANYBRANCH SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = ' + CAST(@BRANCHID AS NVARCHAR)
	EXEC SP_EXECUTESQL @SQL
	SELECT  F1.DETAILID,F1.DEDUCTEEID,
			SUBSTRING(F1.UNIQUEIDNUMBER,1,10) AS UIN,
			F1.DECLARATIONDATE ,F1.BRANCHID, 
			ISNULL (
						(
							SELECT TOP 1 (F2.DECLARATIONDATE - 1)
							FROM FORM15GBASIC F2 WITH(NOLOCK)
							WHERE ISNULL(F2.UNIQUEIDNUMBER,'') <> '' 
								AND F2.DEDUCTEEID = F1.DEDUCTEEID
								AND F2.DECLARATIONDATE > F1.DECLARATIONDATE
						),'31-Mar-2019'
					) AS ENDDATE 
	INTO #FORM15GBASIC
	FROM FORM15GBASIC F1  WITH(NOLOCK)
	WHERE ISNULL(F1.UNIQUEIDNUMBER,'') <> ''
			AND	F1.BRANCHID IN (SELECT BRANCHID FROM #COMPANYBRANCH)
	ORDER BY F1.DETAILID  DESC 
	SELECT  DD.DEDUCTEEID ,DD.DEDUCTIONID , DD.CERTNO ,DD.PAYMENTMADE ,DD.PAYMENTDATE,DD.BRANCHID 
		INTO #DEDUCTIONDETAIL
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #FORM15GBASIC FG 
				ON FG.BRANCHID = DD.BRANCHID 
			AND FG.DEDUCTEEID = DD.DEDUCTEEID 
		WHERE  DD.FORMID = 2 
			AND DD.NONDEDREASON = 2
			AND DD.QUARTER = @QUARTER
			AND DD.PAYMENTDATE >= FG.DECLARATIONDATE   
			AND DD.PAYMENTDATE <= FG.ENDDATE 
--SELECT * FROM #DEDUCTIONDETAIL 
	SELECT	DISTINCT AN.BRANCHID 
		INTO #EXCLUDEBRANCHID
		FROM ACKNO15GH AN WITH(NOLOCK)
			INNER JOIN #FORM15GBASIC FG 
				ON FG.BRANCHID = AN.BRANCHID 
		WHERE AN.FORMID = 1	
			AND AN.QUARTER = @QUARTER  
			AND ISNULL (AN.ERETURNGENDATE ,'') = ''
			AND ISNULL (AN.ISVALID ,'') = ''
	IF (SELECT COUNT(BRANCHID) FROM #EXCLUDEBRANCHID) > 0
			BEGIN
				INSERT INTO @FINAL15G
				SELECT  FB.DETAILID,DD.DEDUCTEEID ,DD.BRANCHID ,DD.CERTNO  ,SUM (DD.PAYMENTMADE) AS PAYMENTTOTAL 				
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
					INNER JOIN #FORM15GBASIC FB 
						ON FB.DEDUCTEEID = DD.DEDUCTEEID 
					AND FB.BRANCHID = DD.BRANCHID
					INNER JOIN #EXCLUDEBRANCHID EB 
						ON EB.BRANCHID = DD.BRANCHID  
					AND FB.BRANCHID = EB.BRANCHID
				WHERE DD.QUARTER = @QUARTER 	  
				GROUP BY FB.DETAILID ,DD.DEDUCTEEID ,DD.BRANCHID ,DD.CERTNO  
			END
	ELSE
			BEGIN
				INSERT INTO @FINAL15G
				SELECT  FB.DETAILID ,DD.DEDUCTEEID ,DD.BRANCHID ,DD.CERTNO, SUM (DD.PAYMENTMADE) AS PAYMENTTOTAL 		
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
					INNER JOIN #FORM15GBASIC FB 
						ON FB.DEDUCTEEID = DD.DEDUCTEEID 
					AND FB.BRANCHID = DD.BRANCHID
				WHERE DD.QUARTER = @QUARTER 	
				GROUP BY FB.DETAILID ,DD.DEDUCTEEID ,DD.BRANCHID ,DD.CERTNO  		
			END	
--SELECT * FROM @FINAL15G 		
		UPDATE FORM15GBASIC  SET AMTOFINCPAID = FG.PAYMENTTOTAL
			FROM @FINAL15G FG 
			INNER JOIN FORM15GBASIC FB  
				ON FG.DETAILID = FB.DETAILID   
			WHERE FB.DETAILID = FG.DETAILID 
			AND FB.QUARTER = @QUARTER   
			AND FB.BRANCHID = FG.BRANCHID 
			AND FB.DEDUCTEEID = FG.DEDUCTEEID 
		UPDATE DEDUCTIONDETAIL SET CERTNO = FB.UIN   
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #DEDUCTIONDETAIL DT WITH(NOLOCK)
				ON DD.DEDUCTEEID = DT.DEDUCTEEID  
			AND DT.DEDUCTIONID = DD.DEDUCTIONID 
			AND DT.BRANCHID = DD.BRANCHID 
			INNER JOIN #FORM15GBASIC FB 
				ON FB.DEDUCTEEID = DD.DEDUCTEEID
			AND FB.BRANCHID = DD.BRANCHID  
		WHERE DD.QUARTER = @QUARTER
			AND DD.NONDEDREASON = 2
			AND DD.BRANCHID = DT.BRANCHID 
			AND DD.DEDUCTIONID = DT.DEDUCTIONID  
			AND DD.DEDUCTEEID = FB.DEDUCTEEID 
---FORM15HBASIC			
	DECLARE @FINAL15H TABLE (DETAILID INT, DEDUCTEEID INT, BRANCHID INT, CERTNO VARCHAR(MAX), PAYMENTTOTAL NUMERIC(13,2))			
	SELECT  F1.DETAILID ,F1.DEDUCTEEID,
			SUBSTRING(F1.UNIQUEIDNUMBER,1,10) AS UIN ,
			F1.DECLARATIONDATE ,F1.BRANCHID, 
			ISNULL(
					(
						SELECT TOP 1 (F2.DECLARATIONDATE - 1 )
						FROM FORM15HBASIC F2 WITH(NOLOCK)
						WHERE ISNULL (F2.UNIQUEIDNUMBER,'') <> '' 
							AND F2.DEDUCTEEID = F1.DEDUCTEEID
							AND F2.DECLARATIONDATE > F1.DECLARATIONDATE
					),'31-Mar-2019'
				 ) AS ENDDATE 
	INTO #FORM15HBASIC
	FROM FORM15HBASIC F1  WITH(NOLOCK)
	WHERE ISNULL(F1.UNIQUEIDNUMBER,'') <> ''
		AND	F1.BRANCHID IN (SELECT BRANCHID FROM #COMPANYBRANCH)
	ORDER BY F1.DETAILID DESC
--select * from #FORM15HBASIC
	SELECT  DD.DEDUCTEEID ,DD.DEDUCTIONID , DD.CERTNO ,DD.PAYMENTMADE ,DD.PAYMENTDATE,DD.BRANCHID 
		INTO #DEDUCTIONDETAILH
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #FORM15HBASIC FH 
				ON FH.BRANCHID = DD.BRANCHID 
			AND FH.DEDUCTEEID = DD.DEDUCTEEID 
		WHERE  DD.FORMID = 2 
			AND DD.NONDEDREASON = 2
			AND DD.QUARTER = @QUARTER
			AND DD.PAYMENTDATE >= FH.DECLARATIONDATE   
			AND DD.PAYMENTDATE <= FH.ENDDATE 
--SELECT * FROM #DEDUCTIONDETAILH
	SELECT	DISTINCT AN.BRANCHID 
	INTO #EXCLUDEBRANCHIDH
	FROM ACKNO15GH AN WITH(NOLOCK)
		INNER JOIN #FORM15HBASIC FH 
			ON FH.BRANCHID = AN.BRANCHID 
	WHERE AN.FORMID = 2	
		AND AN.QUARTER = @QUARTER  
		AND ISNULL (AN.ERETURNGENDATE ,'') = ''
		AND ISNULL (AN.ISVALID ,'') = ''
	IF (SELECT COUNT(BRANCHID) FROM #EXCLUDEBRANCHIDH) > 0
		BEGIN
			INSERT INTO @FINAL15H
				SELECT  FB.DETAILID,DD.DEDUCTEEID ,DD.BRANCHID ,DD.CERTNO  ,SUM (DD.PAYMENTMADE) AS PAYMENTTOTAL 				
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
					INNER JOIN #FORM15HBASIC FB 
						ON FB.DEDUCTEEID = DD.DEDUCTEEID 
					AND FB.BRANCHID = DD.BRANCHID
					INNER JOIN #EXCLUDEBRANCHIDH EB 
						ON EB.BRANCHID = DD.BRANCHID  
					AND FB.BRANCHID = EB.BRANCHID 
					AND DD.CERTNO = FB.UIN 
				WHERE DD.QUARTER = @QUARTER 	
				GROUP BY FB.DETAILID ,DD.DEDUCTEEID ,DD.BRANCHID ,DD.CERTNO  
		END
	ELSE
		BEGIN
		INSERT INTO @FINAL15H
				SELECT  FB.DETAILID ,DD.DEDUCTEEID ,DD.BRANCHID ,DD.CERTNO, SUM (DD.PAYMENTMADE) AS PAYMENTTOTAL 		
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
					INNER JOIN #FORM15HBASIC FB 
						ON FB.DEDUCTEEID = DD.DEDUCTEEID 
					AND FB.BRANCHID = DD.BRANCHID
				WHERE DD.QUARTER = @QUARTER 	
				GROUP BY FB.DETAILID ,DD.DEDUCTEEID ,DD.BRANCHID ,DD.CERTNO  		
		END
--SELECT * FROM @FINAL15H	
		UPDATE FORM15HBASIC  SET AMTOFINCPAID = FH.PAYMENTTOTAL
			FROM @FINAL15H FH 
				INNER JOIN FORM15HBASIC FB  
					ON FH.DETAILID = FB.DETAILID   
			WHERE FB.DETAILID = FH.DETAILID  
				AND FB.BRANCHID = FH.BRANCHID 
				AND FB.DEDUCTEEID = FH.DEDUCTEEID  
				AND FB.QUARTER = @QUARTER 	
		UPDATE DEDUCTIONDETAIL SET CERTNO = FB.UIN   
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN #DEDUCTIONDETAILH DT WITH(NOLOCK)
					ON DD.DEDUCTEEID = DT.DEDUCTEEID  
				AND DT.DEDUCTIONID = DD.DEDUCTIONID 
				AND DT.BRANCHID = DD.BRANCHID 
				INNER JOIN #FORM15HBASIC FB 
					ON FB.DEDUCTEEID = DD.DEDUCTEEID
				AND FB.BRANCHID = DD.BRANCHID  
			WHERE DD.QUARTER = @QUARTER
				AND DD.NONDEDREASON = 2
				AND DD.BRANCHID = DT.BRANCHID 
				AND DD.DEDUCTIONID = DT.DEDUCTIONID  
				AND DD.DEDUCTEEID = FB.DEDUCTEEID 
		IF OBJECT_ID('TEMPDB..#COMPANYBRANCH') IS NOT NULL  
			DROP TABLE #COMPANYBRANCH
		IF OBJECT_ID('TEMPDB..#FORM15GBASIC') IS NOT NULL  
			DROP TABLE #FORM15GBASIC
		IF OBJECT_ID('TEMPDB..#EXCLUDEBRANCHID') IS NOT NULL 
			DROP TABLE #EXCLUDEBRANCHID
		IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL 
			DROP TABLE #DEDUCTIONDETAIL
        IF OBJECT_ID('TEMPDB..#FORM15HBASIC') IS NOT NULL  
			DROP TABLE #FORM15HBASIC
		IF OBJECT_ID('TEMPDB..#EXCLUDEBRANCHIDH') IS NOT NULL 
			DROP TABLE #EXCLUDEBRANCHIDH
		IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAILH') IS NOT NULL 
			DROP TABLE #DEDUCTIONDETAILH 
END        

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_UPDATEUINANDPAYMENTMADE_TEST')
DROP PROCEDURE USP_F15GH_UPDATEUINANDPAYMENTMADE_TEST
GO
CREATE PROCEDURE USP_F15GH_UPDATEUINANDPAYMENTMADE_TEST
	@QUARTER INT,
	@BRANCHID INT  
AS
BEGIN
	SELECT DEDUCTEEID, BRANCHID, QUARTER, MAX(DECLARATIONDATE) DECLARATIONDATE
	INTO #FORM15GBASIC
	FROM FORM15GBASIC WITH(NOLOCK)
		WHERE QUARTER <= @QUARTER AND ISNULL(UNIQUEIDNUMBER,'') <> ''
		GROUP BY DEDUCTEEID, BRANCHID, QUARTER
	SELECT DEDUCTEEID, BRANCHID, QUARTER, MAX(DECLARATIONDATE) DECLARATIONDATE 
    INTO #FORM15HBASIC
	FROM FORM15HBASIC WITH(NOLOCK)
		WHERE QUARTER <= @QUARTER AND ISNULL(UNIQUEIDNUMBER,'') <> ''
		GROUP BY DEDUCTEEID, BRANCHID, QUARTER
	SELECT DEDUCTEEID,BRANCHID 
	INTO #DEDUCTEE 
	FROM DEDUCTEE WITH(NOLOCK)
	WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))
	SELECT BRANCHID,FORMID,QUARTER,DEDUCTEEID,DEDUCTIONID,NONDEDREASON,PAYMENTMADE,PAYMENTDATE 
	INTO #DEDUCTION 
	FROM DEDUCTIONDETAIL WITH(NOLOCK)
	WHERE FORMID = 2 AND NONDEDREASON = 2
	SELECT DETAILID,DEDUCTEEID,BRANCHID,QUARTER,DECLARATIONDATE,CREATEDDATE,DATEINCPAID,UNIQUEIDNUMBER 
	INTO #FORM15GFULLBASIC 
	FROM FORM15GBASIC WITH(NOLOCK)
	WHERE QUARTER <= @QUARTER
	SELECT DETAILID,DEDUCTEEID,BRANCHID,QUARTER,DECLARATIONDATE,CREATEDDATE,DATEINCPAID,UNIQUEIDNUMBER 
	INTO #FORM15HFULLBASIC 
	FROM FORM15HBASIC WITH(NOLOCK)
	WHERE QUARTER <= @QUARTER
	--FOR FORM15G
	DECLARE @PAIDSUM15G TABLE(DEDUCTEEID INT, DETAILID INT, PAIDCREDITED NUMERIC(13,2))
	IF(@BRANCHID <> -1)                                  
		BEGIN
			INSERT INTO @PAIDSUM15G		
			SELECT D.DEDUCTEEID, B.DETAILID, SUM(DD.PAYMENTMADE) PAIDCREDITED 
			FROM #DEDUCTEE D WITH(NOLOCK)
				INNER JOIN #FORM15GFULLBASIC B WITH(NOLOCK)
					ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID 
				INNER JOIN #FORM15GBASIC BB 
					ON D.DEDUCTEEID = BB.DEDUCTEEID AND D.BRANCHID = BB.BRANCHID AND B.DECLARATIONDATE = BB.DECLARATIONDATE
				INNER JOIN #DEDUCTION DD WITH(NOLOCK)
					ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID --AND B.QUARTER=DD.QUARTER
			WHERE B.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2
				AND D.BRANCHID = @BRANCHID AND DD.QUARTER = @QUARTER
			GROUP BY D.DEDUCTEEID, B.DETAILID
		END
	ELSE
		BEGIN   
			INSERT INTO @PAIDSUM15G		
			SELECT D.DEDUCTEEID, B.DETAILID, SUM(DD.PAYMENTMADE) PAIDCREDITED 
			FROM #DEDUCTEE D WITH(NOLOCK)
				INNER JOIN #FORM15GFULLBASIC B WITH(NOLOCK)
					ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID 
				INNER JOIN #FORM15GBASIC BB 
					ON D.DEDUCTEEID = BB.DEDUCTEEID AND D.BRANCHID = BB.BRANCHID AND B.DECLARATIONDATE = BB.DECLARATIONDATE
				INNER JOIN #DEDUCTION DD WITH(NOLOCK)
					ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID --AND B.QUARTER=DD.QUARTER
			WHERE B.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2
				AND DD.QUARTER = @QUARTER
			GROUP BY D.DEDUCTEEID, B.DETAILID
		END 
	SELECT DD.DEDUCTEEID, DD.DEDUCTIONID ,B.QUARTER , DD.PAYMENTDATE, MAX(B.CREATEDDATE) AS CREATEDDATE, B.DETAILID
	INTO #CREATEDDATE15G	
		FROM #DEDUCTION DD WITH(NOLOCK)
			INNER JOIN @PAIDSUM15G P
				ON DD.DEDUCTEEID = P.DEDUCTEEID
			INNER JOIN #FORM15GFULLBASIC B WITH(NOLOCK)
				ON P.DEDUCTEEID = B.DEDUCTEEID AND P.DETAILID = B.DETAILID 
		WHERE 
			DD.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2 --AND CONVERT(DATE,DD.PAYMENTDATE) <= CONVERT(DATE,B.DATEINCPAID)
		GROUP BY DD.DEDUCTEEID, DD.DEDUCTIONID , B.QUARTER, DD.PAYMENTDATE, B.DETAILID
	--UPDATE AMTOFINCPAID IN BASIC DETAIL
	UPDATE FORM15GBASIC SET AMTOFINCPAID = P.PAIDCREDITED
	FROM FORM15GBASIC B WITH(NOLOCK)
		INNER JOIN @PAIDSUM15G P
			ON B.DETAILID = P.DETAILID
		INNER JOIN #CREATEDDATE15G CR
				ON CR.DETAILID = P.DETAILID 
	WHERE B.QUARTER = @QUARTER --AND B.BRANCHID NOT IN (SELECT BRANCHID FROM @ACKNO15G)	
	--UPDATE UNIQUEIDNUMBER IN DEDUCTEE DETAIL					
	UPDATE DEDUCTIONDETAIL SET CERTNO = SUBSTRING(B.UNIQUEIDNUMBER,0,11)
	--FROM DEDUCTIONDETAIL DD WITH(NOLOCK)   -- CHANGED 17-01-19
	FROM #DEDUCTION DD WITH(NOLOCK)	
		INNER JOIN #CREATEDDATE15G CR
			ON DD.DEDUCTEEID = CR.DEDUCTEEID AND DD.DEDUCTIONID = CR.DEDUCTIONID
		INNER JOIN FORM15GBASIC B WITH(NOLOCK)
			ON CR.DEDUCTEEID = B.DEDUCTEEID AND CR.CREATEDDATE = B.CREATEDDATE 
	WHERE 
		DD.QUARTER = @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2	
			--AND DD.BRANCHID NOT IN (SELECT BRANCHID FROM @ACKNO15G)
	--FOR FORM15H
	DECLARE @PAIDSUM15H TABLE(DEDUCTEEID INT, DETAILID INT, PAIDCREDITED NUMERIC(13,2))
	IF(@BRANCHID <> -1)                                  
		BEGIN	
			INSERT INTO @PAIDSUM15H		
			SELECT D.DEDUCTEEID, B.DETAILID, SUM(DD.PAYMENTMADE) PAIDCREDITED 
			FROM #DEDUCTEE D WITH(NOLOCK)
				INNER JOIN #FORM15HFULLBASIC B WITH(NOLOCK)
					ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID 
				INNER JOIN #FORM15HBASIC BB 
					ON D.DEDUCTEEID = BB.DEDUCTEEID AND D.BRANCHID = BB.BRANCHID AND B.DECLARATIONDATE = BB.DECLARATIONDATE
				INNER JOIN #DEDUCTION DD WITH(NOLOCK)
					ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID --AND B.QUARTER=DD.QUARTER
			WHERE B.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2
				AND D.BRANCHID = @BRANCHID AND DD.QUARTER = @QUARTER
			GROUP BY D.DEDUCTEEID, B.DETAILID
		END 
	ELSE
		BEGIN
			INSERT INTO @PAIDSUM15H		
			SELECT D.DEDUCTEEID, B.DETAILID, SUM(DD.PAYMENTMADE) PAIDCREDITED 
			FROM #DEDUCTEE D WITH(NOLOCK)
				INNER JOIN #FORM15HFULLBASIC B WITH(NOLOCK)
					ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID 
				INNER JOIN #FORM15HBASIC BB 
					ON D.DEDUCTEEID = BB.DEDUCTEEID AND D.BRANCHID = BB.BRANCHID AND B.DECLARATIONDATE = BB.DECLARATIONDATE
				INNER JOIN #DEDUCTION DD WITH(NOLOCK)
					ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID --AND B.QUARTER=DD.QUARTER
			WHERE B.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2
				AND DD.QUARTER = @QUARTER
			GROUP BY D.DEDUCTEEID, B.DETAILID
		END 
	SELECT DD.DEDUCTEEID, DD.DEDUCTIONID , B.QUARTER , DD.PAYMENTDATE, MAX(B.CREATEDDATE) AS CREATEDDATE, B.DETAILID
	INTO #CREATEDDATE15H	
		FROM #DEDUCTION DD WITH(NOLOCK)
			INNER JOIN @PAIDSUM15H P
				ON DD.DEDUCTEEID = P.DEDUCTEEID
			INNER JOIN #FORM15HFULLBASIC B WITH(NOLOCK)
				ON P.DEDUCTEEID = B.DEDUCTEEID AND P.DETAILID = B.DETAILID 
		WHERE 
			DD.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2 --AND CONVERT(DATE,DD.PAYMENTDATE) <= CONVERT(DATE,B.DATEINCPAID)
		GROUP BY DD.DEDUCTEEID, DD.DEDUCTIONID, B.QUARTER , DD.PAYMENTDATE, B.DETAILID
	--UPDATE AMTOFINCPAID IN BASIC DETAIL
	UPDATE FORM15HBASIC SET AMTOFINCPAID = P.PAIDCREDITED
	FROM FORM15HBASIC B WITH(NOLOCK)
		INNER JOIN @PAIDSUM15H P
			ON B.DETAILID = P.DETAILID
		INNER JOIN #CREATEDDATE15H CR
				ON CR.DETAILID = P.DETAILID 
	WHERE B.QUARTER = @QUARTER --AND B.BRANCHID NOT IN (SELECT BRANCHID FROM @ACKNO15H)
	--UPDATE UNIQUEIDNUMBER IN DEDUCTEE DETAIL					
	UPDATE DEDUCTIONDETAIL SET CERTNO = SUBSTRING(B.UNIQUEIDNUMBER,0,11)
		--FROM DEDUCTIONDETAIL DD WITH(NOLOCK)   -- CHANGED 17-01-19
			FROM #DEDUCTION DD WITH(NOLOCK)	
			INNER JOIN #CREATEDDATE15H CR
				ON DD.DEDUCTEEID = CR.DEDUCTEEID AND DD.DEDUCTIONID = CR.DEDUCTIONID
			INNER JOIN #FORM15HFULLBASIC B WITH(NOLOCK)
				ON CR.DEDUCTEEID = B.DEDUCTEEID AND CR.CREATEDDATE = B.CREATEDDATE 
		WHERE 
			DD.QUARTER = @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2
			--AND DD.BRANCHID NOT IN (SELECT BRANCHID FROM @ACKNO15H)
	IF OBJECT_ID('TEMPDB..#FORM15GBASIC') IS NOT NULL
		DROP TABLE #FORM15GBASIC
	IF OBJECT_ID('TEMPDB..#FORM15HBASIC') IS NOT NULL
		DROP TABLE #FORM15HBASIC
	IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
		DROP TABLE #DEDUCTEE		
	IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
		DROP TABLE #DEDUCTION
	IF OBJECT_ID('TEMPDB..#FORM15GFULLBASIC') IS NOT NULL
		DROP TABLE #FORM15GFULLBASIC
	IF OBJECT_ID('TEMPDB..#FORM15HFULLBASIC') IS NOT NULL
		DROP TABLE #FORM15HFULLBASIC		
	IF OBJECT_ID('TEMPDB..#CREATEDDATE15G') IS NOT NULL
		DROP TABLE #CREATEDDATE15G
	IF OBJECT_ID('TEMPDB..#CREATEDDATE15H') IS NOT NULL
		DROP TABLE #CREATEDDATE15H		
	SELECT DD.DEDUCTIONID
	INTO #DEDNOTHAVING15GH
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	WHERE
	  DD.FORMID = 2
	  AND DD.QUARTER = @QUARTER
	  AND DD.NONDEDREASON = 2
	  AND (DD.CERTNO = 'G' OR DD.CERTNO = 'H')
	UPDATE DEDUCTIONDETAIL 
		SET CERTNO = ''
	WHERE
		DEDUCTIONID IN 
		(
			 SELECT DEDUCTIONID FROM #DEDNOTHAVING15GH 
		)
	IF OBJECT_ID('TEMPDB..#DEDNOTHAVING15GH') IS NOT NULL
		DROP TABLE #DEDNOTHAVING15GH
END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15GH_UPDATEUINANDPAYMENTMADEBASEDONDEDUCTEEID')
DROP PROCEDURE USP_F15GH_UPDATEUINANDPAYMENTMADEBASEDONDEDUCTEEID
GO
CREATE PROCEDURE USP_F15GH_UPDATEUINANDPAYMENTMADEBASEDONDEDUCTEEID
	@QUARTER INT,
	@BRANCHID INT,
	@DEDUCTEEID INT,
	@FORMID INT  
AS
	BEGIN		
		SELECT DEDUCTEEID,BRANCHID 
		INTO #DEDUCTEE 
		FROM DEDUCTEE WITH(NOLOCK)
		WHERE DEDUCTEEID = @DEDUCTEEID
		SELECT BRANCHID,FORMID,QUARTER,DEDUCTEEID,DEDUCTIONID,NONDEDREASON,PAYMENTMADE,PAYMENTDATE 
		INTO #DEDUCTION 
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE FORMID = 2 AND NONDEDREASON = 2 AND DEDUCTEEID = @DEDUCTEEID
		IF(@FORMID = 1)
			--FOR FORM15G
			BEGIN
				SELECT DEDUCTEEID, BRANCHID, QUARTER, MAX(DECLARATIONDATE) DECLARATIONDATE
				INTO #FORM15GBASIC
				FROM FORM15GBASIC
				WHERE QUARTER <= @QUARTER AND DEDUCTEEID = @DEDUCTEEID
				GROUP BY DEDUCTEEID, BRANCHID, QUARTER
				SELECT DETAILID,DEDUCTEEID,BRANCHID,QUARTER,DECLARATIONDATE,CREATEDDATE,DATEINCPAID,UNIQUEIDNUMBER 
				INTO #FORM15GFULLBASIC 
				FROM FORM15GBASIC WITH(NOLOCK)
				WHERE QUARTER <= @QUARTER AND DEDUCTEEID = @DEDUCTEEID
				SELECT D.DEDUCTEEID, B.DETAILID, SUM(DD.PAYMENTMADE) PAIDCREDITED 
				INTO #PAIDSUM15G		
				FROM #DEDUCTEE D WITH(NOLOCK)
					INNER JOIN #FORM15GFULLBASIC B WITH(NOLOCK)
						ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID 
					INNER JOIN #FORM15GBASIC BB 
						ON D.DEDUCTEEID = BB.DEDUCTEEID AND D.BRANCHID = BB.BRANCHID AND B.DECLARATIONDATE = BB.DECLARATIONDATE
					INNER JOIN #DEDUCTION DD WITH(NOLOCK)
						ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID 
				WHERE B.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2
					AND D.BRANCHID = @BRANCHID AND DD.QUARTER = @QUARTER
				GROUP BY D.DEDUCTEEID, B.DETAILID
				--SET UNIQUEIDNUMBER BASED ON PAYMENTDATE		
				SELECT DD.DEDUCTEEID, DD.DEDUCTIONID ,B.QUARTER , DD.PAYMENTDATE, MAX(B.CREATEDDATE) AS CREATEDDATE, B.DETAILID
				INTO #CREATEDDATE15G	
				FROM #DEDUCTION DD WITH(NOLOCK)
					INNER JOIN #PAIDSUM15G P
						ON DD.DEDUCTEEID = P.DEDUCTEEID
					INNER JOIN #FORM15GFULLBASIC B WITH(NOLOCK)
						ON P.DEDUCTEEID = B.DEDUCTEEID AND P.DETAILID = B.DETAILID 
				WHERE 
					DD.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2 
					AND CONVERT(DATE,DD.PAYMENTDATE) <= CONVERT(DATE,B.DATEINCPAID)
				GROUP BY DD.DEDUCTEEID, DD.DEDUCTIONID , B.QUARTER, DD.PAYMENTDATE, B.DETAILID
				--UPDATE AMTOFINCPAID IN BASIC DETAIL
				UPDATE FORM15GBASIC 
				SET AMTOFINCPAID = P.PAIDCREDITED
				FROM FORM15GBASIC B 
					INNER JOIN #PAIDSUM15G P
						ON B.DETAILID = P.DETAILID
					INNER JOIN #CREATEDDATE15G CR
							ON CR.DETAILID = P.DETAILID 
				WHERE B.QUARTER = @QUARTER AND B.DEDUCTEEID = @DEDUCTEEID
				--UPDATE UNIQUEIDNUMBER IN DEDUCTIONDETAIL 					
				UPDATE DEDUCTIONDETAIL 
				SET CERTNO = SUBSTRING(B.UNIQUEIDNUMBER,0,11)
				FROM DEDUCTIONDETAIL DD 
					INNER JOIN #CREATEDDATE15G CR
						ON DD.DEDUCTEEID = CR.DEDUCTEEID AND DD.DEDUCTIONID = CR.DEDUCTIONID
					INNER JOIN FORM15GBASIC B WITH(NOLOCK)
						ON CR.DEDUCTEEID = B.DEDUCTEEID AND CR.CREATEDDATE = B.CREATEDDATE 
				WHERE 
					DD.QUARTER = @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2	AND DD.DEDUCTEEID = @DEDUCTEEID			
			END
		ELSE
			--FOR FORM15H
			BEGIN
				SELECT DEDUCTEEID, BRANCHID, QUARTER, MAX(DECLARATIONDATE) DECLARATIONDATE
				INTO #FORM15HBASIC
				FROM FORM15HBASIC
				WHERE QUARTER <= @QUARTER AND DEDUCTEEID = @DEDUCTEEID
				GROUP BY DEDUCTEEID, BRANCHID, QUARTER
				SELECT DETAILID,DEDUCTEEID,BRANCHID,QUARTER,DECLARATIONDATE,CREATEDDATE,DATEINCPAID,UNIQUEIDNUMBER 
				INTO #FORM15HFULLBASIC 
				FROM FORM15HBASIC WITH(NOLOCK)
				WHERE QUARTER <= @QUARTER AND DEDUCTEEID = @DEDUCTEEID
				--FOR FORM15H	
				SELECT D.DEDUCTEEID, B.DETAILID, SUM(DD.PAYMENTMADE) PAIDCREDITED 
				INTO #PAIDSUM15H	
				FROM #DEDUCTEE D WITH(NOLOCK)
					INNER JOIN #FORM15HFULLBASIC B WITH(NOLOCK)
						ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID 
					INNER JOIN #FORM15HBASIC BB 
						ON D.DEDUCTEEID = BB.DEDUCTEEID AND D.BRANCHID = BB.BRANCHID AND B.DECLARATIONDATE = BB.DECLARATIONDATE
					INNER JOIN #DEDUCTION DD WITH(NOLOCK)
						ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID 
				WHERE B.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2
					AND D.BRANCHID = @BRANCHID AND DD.QUARTER = @QUARTER
				GROUP BY D.DEDUCTEEID, B.DETAILID
				--SET UNIQUEIDNUMBER BASED ON PAYMENTDATE	
				SELECT DD.DEDUCTEEID, DD.DEDUCTIONID , B.QUARTER , DD.PAYMENTDATE, MAX(B.CREATEDDATE) AS CREATEDDATE, B.DETAILID
				INTO #CREATEDDATE15H	
					FROM #DEDUCTION DD WITH(NOLOCK)
						INNER JOIN #PAIDSUM15H P
							ON DD.DEDUCTEEID = P.DEDUCTEEID
						INNER JOIN #FORM15HFULLBASIC B WITH(NOLOCK)
							ON P.DEDUCTEEID = B.DEDUCTEEID AND P.DETAILID = B.DETAILID 
					WHERE 
						DD.QUARTER <= @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2 
						AND CONVERT(DATE,DD.PAYMENTDATE) <= CONVERT(DATE,B.DATEINCPAID)
					GROUP BY DD.DEDUCTEEID, DD.DEDUCTIONID, B.QUARTER , DD.PAYMENTDATE, B.DETAILID
				--UPDATE AMTOFINCPAID IN BASIC DETAIL
				UPDATE FORM15HBASIC SET AMTOFINCPAID = P.PAIDCREDITED
				FROM FORM15HBASIC B 
					INNER JOIN #PAIDSUM15H P
						ON B.DETAILID = P.DETAILID
					INNER JOIN #CREATEDDATE15H CR
							ON CR.DETAILID = P.DETAILID 
				WHERE B.QUARTER = @QUARTER AND B.DEDUCTEEID = @DEDUCTEEID
				--UPDATE UNIQUEIDNUMBER IN DEDUCTIONDETAIL					
				UPDATE DEDUCTIONDETAIL 
				SET CERTNO = SUBSTRING(B.UNIQUEIDNUMBER,0,11)
				FROM DEDUCTIONDETAIL DD 
					INNER JOIN #CREATEDDATE15H CR
						ON DD.DEDUCTEEID = CR.DEDUCTEEID AND DD.DEDUCTIONID = CR.DEDUCTIONID
					INNER JOIN #FORM15HFULLBASIC B WITH(NOLOCK)
						ON CR.DEDUCTEEID = B.DEDUCTEEID AND CR.CREATEDDATE = B.CREATEDDATE 
				WHERE 
					DD.QUARTER = @QUARTER AND DD.FORMID = 2 AND DD.NONDEDREASON = 2 AND DD.DEDUCTEEID = @DEDUCTEEID
			END	
		IF OBJECT_ID('TEMPDB..#FORM15GBASIC') IS NOT NULL
			DROP TABLE #FORM15GBASIC
		IF OBJECT_ID('TEMPDB..#FORM15HBASIC') IS NOT NULL
			DROP TABLE #FORM15HBASIC
		IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
			DROP TABLE #DEDUCTEE		
		IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
			DROP TABLE #DEDUCTION
		IF OBJECT_ID('TEMPDB..#FORM15GFULLBASIC') IS NOT NULL
			DROP TABLE #FORM15GFULLBASIC
		IF OBJECT_ID('TEMPDB..#FORM15HFULLBASIC') IS NOT NULL
			DROP TABLE #FORM15HFULLBASIC		
		IF OBJECT_ID('TEMPDB..#CREATEDDATE15G') IS NOT NULL
			DROP TABLE #CREATEDDATE15G
		IF OBJECT_ID('TEMPDB..#CREATEDDATE15H') IS NOT NULL
			DROP TABLE #CREATEDDATE15H	
		IF OBJECT_ID('TEMPDB..#PAIDSUM15G') IS NOT NULL
			DROP TABLE #PAIDSUM15G
		IF OBJECT_ID('TEMPDB..#PAIDSUM15H') IS NOT NULL
			DROP TABLE #PAIDSUM15H	
		SELECT DD.DEDUCTIONID
		INTO #DEDNOTHAVING15GH
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		WHERE
		  DD.FORMID = 2
		  AND DD.QUARTER = @QUARTER
		  AND DD.NONDEDREASON = 2
		  AND (DD.CERTNO = 'G' OR DD.CERTNO = 'H')
		UPDATE DEDUCTIONDETAIL 
			SET CERTNO = ''
		WHERE
			DEDUCTIONID IN 
			(
				 SELECT DEDUCTIONID FROM #DEDNOTHAVING15GH 
			)
		IF OBJECT_ID('TEMPDB..#DEDNOTHAVING15GH') IS NOT NULL
			DROP TABLE #DEDNOTHAVING15GH
	END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_CHECKCORRINCOMEID')
DROP PROCEDURE USP_F15H_CHECKCORRINCOMEID
GO
CREATE PROCEDURE USP_F15H_CHECKCORRINCOMEID
	@DETAILID INT
AS
BEGIN
	SELECT COUNT(INCOMEID) 
	FROM CORRFORM15HINCOME WITH(NOLOCK)
	WHERE DETAILID = @DETAILID AND CORSTATUS IN (1,2,4)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_CHECKERROR')
DROP PROCEDURE USP_F15H_CHECKERROR
GO
CREATE PROCEDURE USP_F15H_CHECKERROR							
	@BRANCHID INT,
	@QUARTER INT,
	@EXCLUDE INT 
AS
	BEGIN
		SELECT CASE WHEN LEN(UNIQUEIDNUMBER) = 0 THEN D.NAME + '-' + D.PAN 
			ELSE D.NAME + '-' + D.PAN + ' - ' + SUBSTRING(F.UNIQUEIDNUMBER, 1, 10)  END ERRORID, 
			D.*, NE.MOBILENO, F.DETAILID, F.ASSESSEEDOB, F.TAXASSESSEDFLAG, F.LATESTASSTYR, F.ESTIMATEDINC,
			F.ESTIMATEDTOTALINCPRVYR, F.TOTALNOOFFORM15H, F.AGGREGATEAMTFORM15H,F.UNIQUEIDNUMBER,
			F.DECLARATIONDATE, F.AMTOFINCPAID, F.DATEINCPAID, FI.AMTOFINC
		INTO #TOVALIDATE
		FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)
			   ON D.DEDUCTEEID = NE.DEDUCTEEID
			INNER JOIN FORM15HBASIC F WITH(NOLOCK)
			   ON D.DEDUCTEEID = F.DEDUCTEEID AND D.BRANCHID = F.BRANCHID
			INNER JOIN FORM15HINCOME FI WITH(NOLOCK)
			   ON F.DETAILID = FI.DETAILID
		WHERE D.BRANCHID = @BRANCHID AND QUARTER = @QUARTER
		DECLARE @ERRORTABLE TABLE(ERRORID VARCHAR(101),ERRORDESCRIPTION VARCHAR(102))
		IF(@EXCLUDE = 0)
			BEGIN
				INSERT INTO @ERRORTABLE
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Income Details Required' + REPLICATE(' ', 100 - LEN('Income Details Required')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL((SELECT COUNT(INCOMEID) FROM FORM15HINCOME WITH(NOLOCK) WHERE DETAILID = V.DETAILID), 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid UIN' + REPLICATE(' ', 100 - LEN('Invalid UIN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) != 26 OR SUBSTRING(UNIQUEIDNUMBER, 1, 1) != 'H'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'UIN is Mandatory' + REPLICATE(' ', 100 - LEN('UIN is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Name is Mandatory' + REPLICATE(' ', 100 - LEN('Name is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(NAME) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid PAN' + REPLICATE(' ', 100 - LEN('Invalid PAN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PAN NOT LIKE '[A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z][0-9][0-9][0-9][0-9][A-Za-z]'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid Date of Birth' + REPLICATE(' ', 100 - LEN('Invalid Date of Birth')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ASSESSEEDOB, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Flat/Door/Block No. is mandatory' + REPLICATE(' ', 100 - LEN('Flat/Door/Block No. is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS1, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Area is mandatory' + REPLICATE(' ', 100 - LEN('Area is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS4, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'City is mandatory' + REPLICATE(' ', 100 - LEN('City is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS5, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'State is mandatory' + REPLICATE(' ', 100 - LEN('State is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATEID = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode is mandatory' + REPLICATE(' ', 100 - LEN('Pincode is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode should be numbers only' + REPLICATE(' ', 100 - LEN('Pincode should be numbers only')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNUMERIC(PINCODE) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) != 6
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PINCODE < 110001
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG != 'Y' AND TAXASSESSEDFLAG != 'N' 
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Latest Assessment Year'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Latest Assessment Year'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG = 'Y' AND LEN(ISNULL(LATESTASSTYR, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income for which Declaration made'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income for which Declaration made'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Total Income of the P.Y.'' is Mandatory.(Should be same or greater than Estimated Income)' + REPLICATE(' ', 100 - LEN('''Estimated Total Income of the P.Y.'' is Mandatory.(Should be same or greater than Estimated Income)')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) > 0 AND ISNULL(ESTIMATEDTOTALINCPRVYR, 0) < ISNULL(ESTIMATEDINC, 0)
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15H Filed'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''No. of Form 15H Filed'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15H, 0) = 0 AND ISNULL(AGGREGATEAMTFORM15H, 0) > 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15H Filed'' is present. ''Aggregate Amount of Income'' should be greater than zero.' + REPLICATE(' ', 100 - LEN('''No. of Form 15H Filed'' is present. ''Aggregate Amount of Income'' should be greater than zero.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15H, 0) > 0 AND ISNULL(AGGREGATEAMTFORM15H, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Declaration Date'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Declaration Date'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DECLARATIONDATE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Date on which Income has been Paid/Credited'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Date on which Income has been Paid/Credited'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DATEINCPAID, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Mobile No.'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Mobile No.'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid MobileNumber.' + REPLICATE(' ', 100 - LEN('Invalid MobileNumber.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) > 0 
					AND (LEN(ISNULL(MOBILENO, '')) != 10 
						OR SUBSTRING(ISNULL(MOBILENO, ' '), 0, 1) = '0'
						OR ISNULL(MOBILENO, '') LIKE '%.%'
						OR ISNULL(MOBILENO, '') LIKE '%E%'
						OR ISNULL(MOBILENO, '') LIKE '%+%'
						OR ISNULL(MOBILENO, '') LIKE '%-%')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Email Address.' + REPLICATE(' ', 100 - LEN('Invalid Email Address.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) > 0 
					AND (PATINDEX ('%[ &'',":;!+=\/()<>]%', EMAILADDRESS) > 0 -- INVALID CHARACTERS
						 OR PATINDEX ('[@.-_]%', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE STARTING CHARACTER
						   OR PATINDEX ('%[@.-_]', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE ENDING CHARACTER
						   OR EMAILADDRESS NOT LIKE '%@%.%' -- MUST CONTAIN AT LEAST ONE @ AND ONE .
						   OR EMAILADDRESS LIKE '%..%' -- CANNOT HAVE TWO PERIODS IN A ROW
						   OR EMAILADDRESS LIKE '%@%@%' -- CANNOT HAVE TWO @ ANYWHERE
						   OR EMAILADDRESS LIKE '%.@%' 
						   OR EMAILADDRESS LIKE '%@.%'
						   OR EMAILADDRESS LIKE '%#@%' 
						   OR EMAILADDRESS LIKE '%@#%'
						   OR SUBSTRING(EMAILADDRESS, LEN(EMAILADDRESS), 1) NOT LIKE '[a-zA-Z0-9]')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Amount of Income Should not be Negative in Income Details.' + REPLICATE(' ', 100 - LEN('Amount of Income Should not be Negative in Income Details.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(AMTOFINC, '') LIKE '%-%'		
			END
		ELSE
			BEGIN
				INSERT INTO @ERRORTABLE
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Income Details Required' + REPLICATE(' ', 100 - LEN('Income Details Required')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL((SELECT COUNT(INCOMEID) FROM FORM15HINCOME WITH(NOLOCK) WHERE DETAILID = V.DETAILID), 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid UIN' + REPLICATE(' ', 100 - LEN('Invalid UIN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) != 26 OR SUBSTRING(UNIQUEIDNUMBER, 1, 1) != 'H'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'UIN is Mandatory' + REPLICATE(' ', 100 - LEN('UIN is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(UNIQUEIDNUMBER) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Name is Mandatory' + REPLICATE(' ', 100 - LEN('Name is Mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(NAME) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid PAN' + REPLICATE(' ', 100 - LEN('Invalid PAN')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PAN NOT LIKE '[A-Za-z][A-Za-z][A-Za-z][A-Za-z][A-Za-z][0-9][0-9][0-9][0-9][A-Za-z]'
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) , 
					'|' + 'Invalid Date of Birth' + REPLICATE(' ', 100 - LEN('Invalid Date of Birth')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ASSESSEEDOB, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Flat/Door/Block No. is mandatory' + REPLICATE(' ', 100 - LEN('Flat/Door/Block No. is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS1, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Area is mandatory' + REPLICATE(' ', 100 - LEN('Area is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS4, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'City is mandatory' + REPLICATE(' ', 100 - LEN('City is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(ADDRESS5, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'State is mandatory' + REPLICATE(' ', 100 - LEN('State is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					STATEID = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode is mandatory' + REPLICATE(' ', 100 - LEN('Pincode is mandatory')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Pincode should be numbers only' + REPLICATE(' ', 100 - LEN('Pincode should be numbers only')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNUMERIC(PINCODE) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(PINCODE, '')) != 6
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid PINCODE.  Should be 110001 or higher' + REPLICATE(' ', 100 - LEN('Invalid PINCODE.  Should be 110001 or higher')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					PINCODE < 110001
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Whether Assessed to tax under the Income-tax Act 1961'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG != 'Y' AND TAXASSESSEDFLAG != 'N' 
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Latest Assessment Year'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Latest Assessment Year'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					TAXASSESSEDFLAG = 'Y' AND LEN(ISNULL(LATESTASSTYR, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Income for which Declaration made'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Estimated Income for which Declaration made'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Estimated Total Income of the P.Y.'' is Mandatory.(Should be same or greater than Estimated Income)' + REPLICATE(' ', 100 - LEN('''Estimated Total Income of the P.Y.'' is Mandatory.(Should be same or greater than Estimated Income)')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(ESTIMATEDINC, 0) > 0 AND ISNULL(ESTIMATEDTOTALINCPRVYR, 0) < ISNULL(ESTIMATEDINC, 0)
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15H Filed'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''No. of Form 15H Filed'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15H, 0) = 0 AND ISNULL(AGGREGATEAMTFORM15H, 0) > 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''No. of Form 15H Filed'' is present. ''Aggregate Amount of Income'' should be greater than zero.' + REPLICATE(' ', 100 - LEN('''No. of Form 15H Filed'' is present. ''Aggregate Amount of Income'' should be greater than zero.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(TOTALNOOFFORM15H, 0) > 0 AND ISNULL(AGGREGATEAMTFORM15H, 0) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Declaration Date'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Declaration Date'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DECLARATIONDATE, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ '''Date on which Income has been Paid/Credited'' is Mandatory.' + REPLICATE(' ', 100 - LEN('''Date on which Income has been Paid/Credited'' is Mandatory.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(DATEINCPAID, '')) = 0
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid MobileNumber.' + REPLICATE(' ', 100 - LEN('Invalid MobileNumber.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(MOBILENO, '')) > 0 
					AND (LEN(ISNULL(MOBILENO, '')) != 10 
						OR SUBSTRING(ISNULL(MOBILENO, ' '), 0, 1) = '0'
						OR ISNULL(MOBILENO, '') LIKE '%.%'
						OR ISNULL(MOBILENO, '') LIKE '%E%'
						OR ISNULL(MOBILENO, '') LIKE '%+%'
						OR ISNULL(MOBILENO, '') LIKE '%-%')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Invalid Email Address.' + REPLICATE(' ', 100 - LEN('Invalid Email Address.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					LEN(ISNULL(EMAILADDRESS, '')) > 0 
					AND (PATINDEX ('%[ &'',":;!+=\/()<>]%', EMAILADDRESS) > 0 -- INVALID CHARACTERS
						   OR PATINDEX ('[@.-_]%', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE STARTING CHARACTER
						   OR PATINDEX ('%[@.-_]', EMAILADDRESS) > 0 -- VALID BUT CANNOT BE ENDING CHARACTER
						   OR EMAILADDRESS NOT LIKE '%@%.%' -- MUST CONTAIN AT LEAST ONE @ AND ONE .
						   OR EMAILADDRESS LIKE '%..%' -- CANNOT HAVE TWO PERIODS IN A ROW
						   OR EMAILADDRESS LIKE '%@%@%' -- CANNOT HAVE TWO @ ANYWHERE
						   OR EMAILADDRESS LIKE '%.@%' 
						   OR EMAILADDRESS LIKE '%@.%'
						   OR EMAILADDRESS LIKE '%#@%' 
						   OR EMAILADDRESS LIKE '%@#%'						   
						   OR SUBSTRING(EMAILADDRESS, LEN(EMAILADDRESS), 1) NOT LIKE '[a-zA-Z0-9]')
				UNION
				SELECT 
					'|' + ERRORID + REPLICATE(' ', 100 - LEN(ERRORID)) ,
					'|'	+ 'Amount of Income Should not be Negative in Income Details.' + REPLICATE(' ', 100 - LEN('Amount of Income Should not be Negative in Income Details.')) + '|'
				FROM #TOVALIDATE V
				WHERE 
					ISNULL(AMTOFINC, '') LIKE '%-%'		
			END
		SELECT ERRORID, ERRORDESCRIPTION FROM @ERRORTABLE 
		DROP TABLE #TOVALIDATE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_CHECKINCOMEID')
DROP PROCEDURE USP_F15H_CHECKINCOMEID
GO
CREATE PROCEDURE [USP_F15H_CHECKINCOMEID]
	@DETAILID INT
AS
BEGIN
	SELECT COUNT(INCOMEID) 
	FROM FORM15HINCOME WITH(NOLOCK) 
	WHERE DETAILID = @DETAILID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_CHECKUIN')
DROP PROCEDURE USP_F15H_CHECKUIN
GO
CREATE PROCEDURE [USP_F15H_CHECKUIN]
	@DEDUCTEEID INT,
	@BRANCHID INT ,
	@UNIQUEIDNUMBER VARCHAR(10)
AS
	BEGIN
		SELECT DEDUCTEEID 
		FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE DEDUCTEEID = @DEDUCTEEID 
			AND BRANCHID = @BRANCHID 
			AND CERTNO = @UNIQUEIDNUMBER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_CHECKUINEXIST')
DROP PROCEDURE USP_F15H_CHECKUINEXIST
GO
CREATE PROCEDURE USP_F15H_CHECKUINEXIST
	@DETAILID INT = -1,
	@BRANCHID INT,
	@UID VARCHAR(10)
AS
	BEGIN
		IF EXISTS(SELECT UNIQUEIDNUMBER
				  FROM FORM15HBASIC WITH(NOLOCK) 
				  WHERE BRANCHID = @BRANCHID AND SUBSTRING(UNIQUEIDNUMBER, 1,10)= @UID AND DETAILID <> @DETAILID)
			BEGIN
				SELECT 1
			END		
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_DELETEBASICDETAILS')
DROP PROCEDURE USP_F15H_DELETEBASICDETAILS
GO
CREATE PROCEDURE [USP_F15H_DELETEBASICDETAILS]
	@DETAILID INT
AS
BEGIN
	DELETE FROM FORM15HINCOME WHERE DETAILID = @DETAILID
	DELETE FROM FORM15HBASIC WHERE DETAILID = @DETAILID
	SELECT 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_DELETECORRBASICDETAILS')
DROP PROCEDURE USP_F15H_DELETECORRBASICDETAILS
GO
CREATE PROCEDURE USP_F15H_DELETECORRBASICDETAILS 
	@DETAILID INT,
	@ACTION INT 
AS
BEGIN
	IF(@ACTION = 1)
		BEGIN
			DELETE FROM CORRFORM15HBASIC WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3)
			DELETE FROM CORRFORM15HINCOME WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3,4) 
			INSERT INTO CORRFORM15HBASIC(DETAILID, DEDUCTEEID, BRANCHID, QUARTER, ASSESSEEDOB, TAXASSESSEDFLAG, 
				LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H, AGGREGATEAMTFORM15H, 
				UNIQUEIDNUMBER, DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID, CREATEDDATE, ENTRYTYPE, CORSTATUS)		
			SELECT DETAILID, DEDUCTEEID, BRANCHID, QUARTER, ASSESSEEDOB, TAXASSESSEDFLAG, 
				LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H, AGGREGATEAMTFORM15H, 
				UNIQUEIDNUMBER, DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID, CREATEDDATE, ENTRYTYPE,3 AS CORSTATUS 
			FROM CORRFORM15HBASIC WITH(NOLOCK)
			WHERE DETAILID =@DETAILID AND CORSTATUS  IN(1,4)
			INSERT INTO CORRFORM15HINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)		
			SELECT INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, 3 AS CORSTATUS
				FROM CORRFORM15HINCOME WITH(NOLOCK)
				WHERE DETAILID = @DETAILID AND CORSTATUS IN(1,4)
			SELECT 1
		END
	ELSE
		BEGIN
			DELETE FROM CORRFORM15HBASIC WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3)
			DELETE FROM CORRFORM15HINCOME WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3)
			SELECT 2
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_DELETECORRINCOMEDETAILS')
DROP PROCEDURE USP_F15H_DELETECORRINCOMEDETAILS
GO
CREATE PROCEDURE USP_F15H_DELETECORRINCOMEDETAILS
	@INCOMEID INT,
	@ACTION INT 
AS
BEGIN
	IF(@ACTION = 1)
		BEGIN
			DELETE FROM CORRFORM15HINCOME WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(2,3)
			INSERT INTO CORRFORM15HINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)		
			SELECT INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, 3 AS CORSTATUS
				FROM CORRFORM15HINCOME WITH(NOLOCK)
				WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(1,4)
			SELECT 1
		END
	ELSE
		BEGIN
			DELETE FROM CORRFORM15HINCOME WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(2,3)
			INSERT INTO CORRFORM15HINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)		
			SELECT INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, 2 AS CORSTATUS
				FROM CORRFORM15HINCOME WITH(NOLOCK)
				WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(1,4)
			SELECT 2
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_DELETEINCOMEDETAILS')
DROP PROCEDURE USP_F15H_DELETEINCOMEDETAILS
GO
CREATE PROCEDURE [USP_F15H_DELETEINCOMEDETAILS]
	@INCOMEID INT
AS
BEGIN
	DELETE FROM FORM15HINCOME WHERE INCOMEID = @INCOMEID
	SELECT 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_FINALUPDATE')
DROP PROCEDURE USP_F15H_FINALUPDATE
GO
CREATE PROCEDURE USP_F15H_FINALUPDATE
	@BRANCHID INT,
	@QUARTER INT
AS 
BEGIN
	DECLARE @ERROR INT;
	SET @ERROR =0;
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
			BEGIN TRANSACTION  
				BEGIN TRY
					--DELETE FORM15HINCOME	STATUS 3
					DELETE FI FROM FORM15HINCOME FI
						INNER JOIN CORRFORM15HBASIC CB
							ON FI.DETAILID = CB.DETAILID
							AND CB.CORSTATUS = 3
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER	
					DELETE FI FROM CORRFORM15HINCOME FI
						INNER JOIN CORRFORM15HBASIC CB
							ON FI.DETAILID = CB.DETAILID
							AND CB.CORSTATUS = 3
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER	
					--DELETE FORM15HBASIC STATUS 3
					DELETE FB FROM FORM15HBASIC FB
						INNER JOIN CORRFORM15HBASIC CB
							ON FB.DETAILID = CB.DETAILID
							AND FB.BRANCHID = CB.BRANCHID
							AND FB.QUARTER = CB.QUARTER
							AND CB.CORSTATUS = 3
						WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
					DELETE FB FROM CORRFORM15HBASIC FB
						INNER JOIN CORRFORM15HBASIC CB
							ON FB.DETAILID = CB.DETAILID
							AND FB.BRANCHID = CB.BRANCHID
							AND FB.QUARTER = CB.QUARTER
							AND CB.CORSTATUS = 3
						WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
							AND FB.CORSTATUS = 1			
					--INSERT FORM15HBASIC STATUS 4
					INSERT INTO FORM15HBASIC (DEDUCTEEID, BRANCHID, QUARTER, ASSESSEEDOB, TAXASSESSEDFLAG, LATESTASSTYR, ESTIMATEDINC,
								ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H, AGGREGATEAMTFORM15H, UNIQUEIDNUMBER, DECLARATIONDATE,
								AMTOFINCPAID, DATEINCPAID,CREATEDDATE, ENTRYTYPE)
					SELECT DEDUCTEEID, BRANCHID, QUARTER, ASSESSEEDOB, TAXASSESSEDFLAG, LATESTASSTYR, ESTIMATEDINC,
							ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H, AGGREGATEAMTFORM15H, UNIQUEIDNUMBER, DECLARATIONDATE,
							AMTOFINCPAID, DATEINCPAID,CREATEDDATE, 3
						FROM CORRFORM15HBASIC WITH(NOLOCK)
						WHERE BRANCHID = @BRANCHID
							AND QUARTER = @QUARTER
							AND CORSTATUS = 4
					--INSERT FORM15HINCOME STATUS 4
					INSERT INTO FORM15HINCOME (SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC)			
					SELECT CI.SRLNO, FB.DETAILID, CI.IDENFICATIONNUM, CI.NATUREOFINC, CI.SECTIONID, CI.AMTOFINC 
						FROM CORRFORM15HINCOME CI WITH(NOLOCK)
							INNER JOIN CORRFORM15HBASIC CB
								ON CB.DETAILID = CI.DETAILID
							INNER JOIN FORM15HBASIC FB
								ON CB.UNIQUEIDNUMBER = FB.UNIQUEIDNUMBER
								AND FB.BRANCHID = CB.BRANCHID
								AND FB.QUARTER = CB.QUARTER
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND CI.CORSTATUS = 4
							AND CB.CORSTATUS = 4
					--INSERT CORRFORM15HBASIC STATUS 4
					INSERT INTO CORRFORM15HBASIC (DETAILID, DEDUCTEEID, BRANCHID, QUARTER, ASSESSEEDOB, TAXASSESSEDFLAG, LATESTASSTYR, ESTIMATEDINC,
								ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H, AGGREGATEAMTFORM15H, UNIQUEIDNUMBER, DECLARATIONDATE,
								AMTOFINCPAID, DATEINCPAID,CREATEDDATE, ENTRYTYPE , CORSTATUS)
					SELECT FB.DETAILID, FB.DEDUCTEEID, FB.BRANCHID, FB.QUARTER, FB.ASSESSEEDOB, FB.TAXASSESSEDFLAG, FB.LATESTASSTYR, FB.ESTIMATEDINC,
							FB.ESTIMATEDTOTALINCPRVYR, FB.TOTALNOOFFORM15H, FB.AGGREGATEAMTFORM15H, FB.UNIQUEIDNUMBER, FB.DECLARATIONDATE,
							FB.AMTOFINCPAID, FB.DATEINCPAID, FB.CREATEDDATE, 3 ,1
						FROM FORM15HBASIC FB WITH(NOLOCK)
							INNER JOIN CORRFORM15HBASIC CB
							ON FB.UNIQUEIDNUMBER = CB.UNIQUEIDNUMBER
							AND FB.BRANCHID = CB.BRANCHID
							AND FB.QUARTER = CB.QUARTER
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND  CB.CORSTATUS = 4
					--INSERT CORRFORM15HINCOME STATUS 4
					INSERT INTO CORRFORM15HINCOME (SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)			
					SELECT CI.SRLNO, FB.DETAILID, CI.IDENFICATIONNUM, CI.NATUREOFINC, CI.SECTIONID, CI.AMTOFINC , 1
						FROM CORRFORM15HINCOME CI WITH(NOLOCK)
							INNER JOIN CORRFORM15HBASIC CB
								ON CB.DETAILID = CI.DETAILID
								AND CB.CORSTATUS = 4
							INNER JOIN FORM15HBASIC FB
								ON CB.UNIQUEIDNUMBER = FB.UNIQUEIDNUMBER
								AND FB.BRANCHID = CB.BRANCHID
								AND FB.QUARTER = CB.QUARTER
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND CI.CORSTATUS = 4 							
					--UPDATE FORM15HBASIC STATUS 2
					UPDATE FB 
						SET FB.DEDUCTEEID = CB.DEDUCTEEID, 
						  FB.ASSESSEEDOB = CB.ASSESSEEDOB,
						  FB.TAXASSESSEDFLAG = CB.TAXASSESSEDFLAG, 
						  FB.LATESTASSTYR = CB.LATESTASSTYR, 
						  FB.ESTIMATEDINC = CB.ESTIMATEDINC,
						  FB.ESTIMATEDTOTALINCPRVYR = CB.ESTIMATEDTOTALINCPRVYR, 
						  FB.TOTALNOOFFORM15H = CB.TOTALNOOFFORM15H,
						  FB.AGGREGATEAMTFORM15H = CB.AGGREGATEAMTFORM15H, 
						  FB.UNIQUEIDNUMBER = CB.UNIQUEIDNUMBER, 
						  FB.DECLARATIONDATE = CB.DECLARATIONDATE,
						  FB.AMTOFINCPAID = CB.AMTOFINCPAID,
						  FB.DATEINCPAID = CB.DATEINCPAID,
						  FB.CREATEDDATE = CB.CREATEDDATE,
						  FB.ENTRYTYPE = 3
					FROM FORM15HBASIC FB
					INNER JOIN CORRFORM15HBASIC CB
						ON FB.DETAILID = CB.DETAILID
						AND FB.BRANCHID = CB.BRANCHID
						AND FB.QUARTER = CB.QUARTER
						AND CB.CORSTATUS = 2
					WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
					--UPDATE CORRFORM15HBASIC STATUS 2
					UPDATE FB 
						SET FB.DEDUCTEEID = CB.DEDUCTEEID, 
						  FB.ASSESSEEDOB = CB.ASSESSEEDOB,
						  FB.TAXASSESSEDFLAG = CB.TAXASSESSEDFLAG, 
						  FB.LATESTASSTYR = CB.LATESTASSTYR, 
						  FB.ESTIMATEDINC = CB.ESTIMATEDINC,
						  FB.ESTIMATEDTOTALINCPRVYR = CB.ESTIMATEDTOTALINCPRVYR, 
						  FB.TOTALNOOFFORM15H = CB.TOTALNOOFFORM15H,
						  FB.AGGREGATEAMTFORM15H = CB.AGGREGATEAMTFORM15H, 
						  FB.UNIQUEIDNUMBER = CB.UNIQUEIDNUMBER, 
						  FB.DECLARATIONDATE = CB.DECLARATIONDATE,
						  FB.AMTOFINCPAID = CB.AMTOFINCPAID,
						  FB.DATEINCPAID = CB.DATEINCPAID,
						  FB.CREATEDDATE = CB.CREATEDDATE,
						  FB.ENTRYTYPE = 3,
						  FB.CORSTATUS = 1
					FROM CORRFORM15HBASIC FB
						INNER JOIN CORRFORM15HBASIC CB
							ON FB.DETAILID = CB.DETAILID
							AND FB.BRANCHID = CB.BRANCHID
							AND FB.QUARTER = CB.QUARTER
							AND CB.CORSTATUS = 2
					WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
							AND FB.CORSTATUS = 1
					--DELETE FORM15HINCOME STATUS 2
					DELETE FI FROM FORM15HINCOME FI
						INNER JOIN CORRFORM15HBASIC CB
							ON FI.DETAILID = CB.DETAILID
							AND CB.CORSTATUS = 2
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
					--INSERT FORM15HINCOME STATUS 2
					INSERT INTO FORM15HINCOME (SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC) 
					SELECT CI.SRLNO, FB.DETAILID, CI.IDENFICATIONNUM, CI.NATUREOFINC, CI.SECTIONID, CI.AMTOFINC 
						FROM CORRFORM15HINCOME CI WITH(NOLOCK)
							INNER JOIN FORM15HBASIC FB
							ON CI.DETAILID = FB.DETAILID
						WHERE FB.BRANCHID = @BRANCHID
							AND FB.QUARTER = @QUARTER
							AND CI.CORSTATUS = 2 
					--DELETE CORRFORM15HINCOME STATUS 1
					DELETE CI FROM CORRFORM15HINCOME CI
						INNER JOIN CORRFORM15HBASIC CB
							ON CI.DETAILID = CB.DETAILID
							AND CB.CORSTATUS = 1
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
							AND CI.CORSTATUS = 1
					--INSERT CORRFORM15HINCOME STATUS 2
					INSERT INTO CORRFORM15HINCOME (INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS) 
					SELECT CI.INCOMEID, CI.SRLNO, CB.DETAILID, CI.IDENFICATIONNUM, CI.NATUREOFINC, CI.SECTIONID, CI.AMTOFINC, 1
						FROM FORM15HINCOME CI WITH(NOLOCK)
							INNER JOIN CORRFORM15HBASIC CB
							ON CI.DETAILID = CB.DETAILID
								AND CB.CORSTATUS = 1
						WHERE CB.BRANCHID = @BRANCHID
							AND CB.QUARTER = @QUARTER
					--DELETE CORRFORM15HBASIC,CORRFORM15HINCOME STATUS 2,3,4
					DELETE FROM CORRFORM15HBASIC 
						WHERE BRANCHID = @BRANCHID 
							AND QUARTER = @QUARTER
							AND CORSTATUS IN(2,3,4)
					DELETE CI FROM CORRFORM15HINCOME CI
						INNER JOIN CORRFORM15HBASIC CB
							ON CI.DETAILID = CB.DETAILID
						WHERE CB.BRANCHID = @BRANCHID 
							AND CB.QUARTER = @QUARTER
							AND CI.CORSTATUS IN(2,3,4)
					SET @ERROR=1 
					COMMIT 
				END TRY	
			BEGIN CATCH
				SET @ERROR=-1
				ROLLBACK
			END CATCH
		SELECT @ERROR
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETALLNONEMPLOYEEAUTOCOMPLETE')
DROP PROCEDURE USP_F15H_GETALLNONEMPLOYEEAUTOCOMPLETE
GO
CREATE PROCEDURE [dbo].[USP_F15H_GETALLNONEMPLOYEEAUTOCOMPLETE]
	@BRANCHID INT,    
	@PREFIXTEXT NVARCHAR(MAX),    
	@RECORDCOUNT INT 
AS    
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);    	
		SET @QUERY = 'SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + '(CAST(D.DEDUCTEEID AS VARCHAR)+''-''+ D.REFERENCENO) AS DEDUCTEEID, 
					 (D.NAME + ''('' + CAST(NE.SERIALNO AS VARCHAR) + '')'' + ''-'' + D.PAN) AS NAME
					 FROM  DEDUCTEE D WITH(NOLOCK) 
						INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
						ON D.DEDUCTEEID = NE.DEDUCTEEID    
					 WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)  + ' AND	D.NAME LIKE ''' + @PREFIXTEXT + '%''' +
						'AND D.PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')' + 
						'AND SUBSTRING(D.PAN, 4, 1) NOT IN(''C'')'; 
		EXEC SP_EXECUTESQL @QUERY;   
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETBASICDETAILSBYDETAILID')
DROP PROCEDURE USP_F15H_GETBASICDETAILSBYDETAILID
GO
CREATE PROCEDURE [dbo].[USP_F15H_GETBASICDETAILSBYDETAILID]
	@BRANCHID INT,
	@DETAILID INT
AS
BEGIN
	SELECT DETAILID, B.DEDUCTEEID, (D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')-' + D.PAN) AS NAME,
		D.PAN, D.REFERENCENO, ASSESSEEDOB, TAXASSESSEDFLAG, LATESTASSTYR, ESTIMATEDINC,ESTIMATEDTOTALINCPRVYR, 
		TOTALNOOFFORM15H, AGGREGATEAMTFORM15H,UNIQUEIDNUMBER, DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID
		FROM FORM15HBASIC B WITH(NOLOCK) 
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON B.DEDUCTEEID = D.DEDUCTEEID AND B.BRANCHID = D.BRANCHID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID    
		WHERE B.BRANCHID = @BRANCHID
			AND DETAILID = @DETAILID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETBASICDETAILSCOUNTS')
DROP PROCEDURE USP_F15H_GETBASICDETAILSCOUNTS
GO
CREATE PROCEDURE [dbo].[USP_F15H_GETBASICDETAILSCOUNTS]
	@BRANCHID INT,
	@QUARTER INT,
	@NAME NVARCHAR(75),
	@PAN VARCHAR(10),
	@ESTIMATEDINCFROM INT,
	@ESTIMATEDINCTO INT,
	@DECLARATIONDATEFROM SMALLDATETIME= NULL,
	@DECLARATIONDATETO SMALLDATETIME= NULL,
	@CUSTOMERID VARCHAR(10)
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
			SELECT COUNT(B.DETAILID) 
			FROM FORM15HBASIC B WITH(NOLOCK)
				INNER JOIN DEDUCTEE DD WITH(NOLOCK)
					ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID 
			WHERE B.BRANCHID ='  + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER =' + CAST(@QUARTER AS VARCHAR)
		IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
			END   
		IF(@PAN <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.PAN ='''+ CAST(@PAN AS VARCHAR)+'''';                                  
			END                
		IF(@ESTIMATEDINCFROM <> 0 OR @ESTIMATEDINCTO <> 0) 
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND B.ESTIMATEDINC BETWEEN ' + CAST(@ESTIMATEDINCFROM AS VARCHAR) 
				+ ' AND ' + CAST(@ESTIMATEDINCTO AS VARCHAR);      
			END
		IF(@DECLARATIONDATEFROM IS NOT NULL AND @DECLARATIONDATETO IS NOT NULL)
			BEGIN                   
				SET @QUERY = @QUERY + ' AND B.DECLARATIONDATE BETWEEN ''' + CAST(@DECLARATIONDATEFROM AS VARCHAR) 
				+ ''' AND ''' + CAST(@DECLARATIONDATETO AS VARCHAR) + '''';                                  
			END
		IF(@CUSTOMERID <> '')
			BEGIN                  
					SET @QUERY = @QUERY + ' AND DD.REFERENCENO='''+ CAST(@CUSTOMERID AS VARCHAR)+'''';                                  
			END 
		EXECUTE SP_EXECUTESQL @QUERY; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETBASICDETAILSFORERETURN')
DROP PROCEDURE USP_F15H_GETBASICDETAILSFORERETURN
GO
CREATE PROCEDURE USP_F15H_GETBASICDETAILSFORERETURN 
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT * 
		INTO #MASTERB
		FROM DEDUCTEE WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
		SELECT DEDUCTEEID, MOBILENO
		INTO #MASTERNE
		FROM NONEMPLOYEE WITH(NOLOCK)
		WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #MASTERB)
		SELECT *
		INTO #BASICDET
		FROM FORM15HBASIC WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
			AND DETAILID IN (SELECT DETAILID FROM FORM15HINCOME WITH(NOLOCK)) 
		SELECT DD.DEDUCTEEID, DD.NAME, DD.PAN,
			   DD.ADDRESS1, DD.ADDRESS2, DD.ADDRESS3,
			   DD.ADDRESS4, DD.ADDRESS5,
			   CAST(DD.STATEID AS INT) AS STATEID, DD.PINCODE,
			   DD.EMAILADDRESS,ISNULL(NE.MOBILENO ,'') MOBILE, DD.REFERENCENO, B.DETAILID, B.ASSESSEEDOB,
			   B.TAXASSESSEDFLAG, B.LATESTASSTYR,B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR,
			   B.TOTALNOOFFORM15H, B.AGGREGATEAMTFORM15H, B.UNIQUEIDNUMBER, 
			   B.DECLARATIONDATE, AMTOFINCPAID,B.DATEINCPAID
			   INTO #TEMP
		FROM #BASICDET B WITH(NOLOCK)
				INNER JOIN #MASTERB DD WITH(NOLOCK)
						ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
				INNER JOIN #MASTERNE NE WITH(NOLOCK)  
						ON DD.DEDUCTEEID = NE.DEDUCTEEID
				INNER JOIN STATEMASTER SM WITH(NOLOCK)  
						ON DD.STATEID = SM.STATEID
		SELECT * FROM #TEMP	
		DROP TABLE #TEMP
		DROP TABLE #MASTERB
		DROP TABLE #MASTERNE
		DROP TABLE #BASICDET	
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETBASICDETAILSPAGED')
DROP PROCEDURE USP_F15H_GETBASICDETAILSPAGED
GO
CREATE PROCEDURE [dbo].[USP_F15H_GETBASICDETAILSPAGED] 
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@QUARTER INT,
	@NAME NVARCHAR(75),
	@PAN VARCHAR(10),
	@ESTIMATEDINCFROM INT,
	@ESTIMATEDINCTO INT,
	@DECLARATIONDATEFROM SMALLDATETIME= NULL,
	@DECLARATIONDATETO SMALLDATETIME= NULL,
	@CUSTOMERID VARCHAR(10)
AS
	BEGIN
		DECLARE @BASICDETAILS TABLE(ID INT IDENTITY(1,1), NAME NVARCHAR(75), PAN VARCHAR(10), 
			REFERENCENO VARCHAR(20), DETAILID INT,DEDUCTEEID INT, ASSESSEEDOB SMALLDATETIME, 
			TAXASSESSEDFLAG VARCHAR(1), LATESTASSTYR INT, ESTIMATEDINC INT, ESTIMATEDTOTALINCPRVYR INT, 
			TOTALNOOFFORM15H INT, AGGREGATEAMTFORM15H INT,UNIQUEIDNUMBER VARCHAR(26),
			DECLARATIONDATE SMALLDATETIME, AMTOFINCPAID INT,DATEINCPAID SMALLDATETIME)
		DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
			SELECT	DD.NAME, DD.PAN, DD.REFERENCENO, DETAILID, B.DEDUCTEEID, B.ASSESSEEDOB,
					B.TAXASSESSEDFLAG, B.LATESTASSTYR,B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR,
					B.TOTALNOOFFORM15H, B.AGGREGATEAMTFORM15H, B.UNIQUEIDNUMBER, 
					B.DECLARATIONDATE, AMTOFINCPAID,B.DATEINCPAID
			FROM FORM15HBASIC B WITH(NOLOCK)
				INNER JOIN DEDUCTEE DD WITH(NOLOCK)
					ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
			WHERE B.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER =' + CAST(@QUARTER AS VARCHAR)
		IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
			END 
		IF(@PAN <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.PAN ='''+ CAST(@PAN AS VARCHAR)+'''';                                  
			END                       
		IF(@ESTIMATEDINCFROM <> 0 OR @ESTIMATEDINCTO <> 0) 
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND B.ESTIMATEDINC BETWEEN ' + CAST(@ESTIMATEDINCFROM AS VARCHAR) 
			+ ' AND ' + CAST(@ESTIMATEDINCTO AS VARCHAR);      
		END
		IF(@DECLARATIONDATEFROM IS NOT NULL AND @DECLARATIONDATETO IS NOT NULL)
		BEGIN                   
			SET @QUERY = @QUERY + ' AND B.DECLARATIONDATE BETWEEN ''' + CAST(@DECLARATIONDATEFROM AS VARCHAR) 
			+ ''' AND ''' + CAST(@DECLARATIONDATETO AS VARCHAR) + '''';                                  
		END  
		IF(@CUSTOMERID <> '')
		BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.REFERENCENO='''+ CAST(@CUSTOMERID AS VARCHAR)+'''';                                  
		END
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		INSERT INTO @BASICDETAILS 
		EXECUTE SP_EXECUTESQL @QUERY;
		SELECT TOP (@LASTREC - 1) * FROM @BASICDETAILS WHERE ID > @FIRSTREC AND ID < @LASTREC
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETCORRBASICDETAILSBYDETAILID')
DROP PROCEDURE USP_F15H_GETCORRBASICDETAILSBYDETAILID
GO
CREATE PROCEDURE USP_F15H_GETCORRBASICDETAILSBYDETAILID
	@BRANCHID INT,
	@DETAILID INT
AS
BEGIN
	SELECT DETAILID, B.DEDUCTEEID, (D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')-' + D.PAN) AS NAME,
		D.PAN, D.REFERENCENO, ASSESSEEDOB, TAXASSESSEDFLAG, LATESTASSTYR, ESTIMATEDINC,ESTIMATEDTOTALINCPRVYR, 
		TOTALNOOFFORM15H, AGGREGATEAMTFORM15H,UNIQUEIDNUMBER, DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID,CORSTATUS AS CORRSTATUS
		FROM CORRFORM15HBASIC B WITH(NOLOCK) 
			INNER JOIN DEDUCTEE D WITH(NOLOCK) 
				ON B.DEDUCTEEID = D.DEDUCTEEID 
				AND B.BRANCHID = D.BRANCHID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
				ON D.DEDUCTEEID = NE.DEDUCTEEID    
		WHERE B.BRANCHID = @BRANCHID
			AND DETAILID = @DETAILID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETCORRBASICDETAILSCOUNTS')
DROP PROCEDURE USP_F15H_GETCORRBASICDETAILSCOUNTS
GO
CREATE PROCEDURE USP_F15H_GETCORRBASICDETAILSCOUNTS
	@BRANCHID INT,
	@QUARTER INT,
	@NAME NVARCHAR(75),
	@PAN VARCHAR(10),
	@ESTIMATEDINCFROM INT,
	@ESTIMATEDINCTO INT,
	@DECLARATIONDATEFROM SMALLDATETIME= NULL,
	@DECLARATIONDATETO SMALLDATETIME= NULL,
	@CUSTOMERID VARCHAR(10)
AS
	BEGIN
		SELECT DETAILID, CORSTATUS, BRANCHID
		INTO #PICKED
		FROM CORRFORM15HBASIC WITH(NOLOCK)
		WHERE 
			CORSTATUS <> 1
			AND CORSTATUS <> 4
			AND BRANCHID = @BRANCHID
		SELECT * INTO CORRSTATUSTABLE15H FROM (
		SELECT DETAILID, CORSTATUS, BRANCHID
		FROM #PICKED
		UNION 
		SELECT DETAILID, CORSTATUS, BRANCHID
		FROM CORRFORM15HBASIC WITH(NOLOCK)
		WHERE
			CORSTATUS IN (1,4)
			AND DETAILID NOT IN (SELECT DETAILID FROM #PICKED)
			AND BRANCHID = @BRANCHID) AS CORSTATUS 
		ORDER BY CORSTATUS DESC
		DROP TABLE #PICKED
		DECLARE @QUERY NVARCHAR(MAX)
			SET @QUERY = '
				SELECT COUNT(B.DETAILID) 
				FROM CORRFORM15HBASIC B WITH(NOLOCK)
					INNER JOIN DEDUCTEE DD WITH(NOLOCK)
						ON B.DEDUCTEEID = DD.DEDUCTEEID 
						AND B.BRANCHID = DD.BRANCHID
					INNER JOIN CORRSTATUSTABLE15H CS WITH(NOLOCK)
						ON B.DETAILID = CS.DETAILID 
						AND B.CORSTATUS = CS.CORSTATUS 
						AND B.BRANCHID = CS.BRANCHID 
				WHERE B.BRANCHID ='  + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER =' + CAST(@QUARTER AS VARCHAR)
			IF(@NAME <> '')                                  
				BEGIN                  
					SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
				END   
			IF(@PAN <> '')                                  
				BEGIN                  
					SET @QUERY = @QUERY + ' AND DD.PAN ='''+ CAST(@PAN AS VARCHAR)+'''';                                  
				END                
			IF(@ESTIMATEDINCFROM <> 0 OR @ESTIMATEDINCTO <> 0) 
				BEGIN                                  
					SET @QUERY = @QUERY + ' AND B.ESTIMATEDINC BETWEEN ' + CAST(@ESTIMATEDINCFROM AS VARCHAR) 
					+ ' AND ' + CAST(@ESTIMATEDINCTO AS VARCHAR);      
				END
			IF(@DECLARATIONDATEFROM IS NOT NULL AND @DECLARATIONDATETO IS NOT NULL)
				BEGIN                   
					SET @QUERY = @QUERY + ' AND B.DECLARATIONDATE BETWEEN ''' + CAST(@DECLARATIONDATEFROM AS VARCHAR) 
					+ ''' AND ''' + CAST(@DECLARATIONDATETO AS VARCHAR) + '''';                                  
				END
			IF(@CUSTOMERID <> '')
				BEGIN                  
						SET @QUERY = @QUERY + ' AND DD.REFERENCENO='''+ CAST(@CUSTOMERID AS VARCHAR)+'''';                                  
				END 
			EXECUTE SP_EXECUTESQL @QUERY; 
			DROP TABLE CORRSTATUSTABLE15H
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETCORRBASICDETAILSFORERETURN')
DROP PROCEDURE USP_F15H_GETCORRBASICDETAILSFORERETURN
GO
CREATE PROCEDURE USP_F15H_GETCORRBASICDETAILSFORERETURN
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT * 
		INTO #MASTERB
		FROM DEDUCTEE WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
		SELECT DEDUCTEEID, MOBILENO
		INTO #MASTERNE
		FROM NONEMPLOYEE WITH(NOLOCK)
		WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #MASTERB)
		SELECT *
		INTO #BASICDET
		FROM CORRFORM15HBASIC WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
			AND DETAILID IN (SELECT DETAILID FROM CORRFORM15HINCOME WITH(NOLOCK) WHERE CORSTATUS IN(2,3,4)) 
			AND CORSTATUS IN(2,3,4)
		SELECT DD.DEDUCTEEID, DD.NAME, DD.PAN,
			   DD.ADDRESS1, DD.ADDRESS2, DD.ADDRESS3,
			   DD.ADDRESS4, DD.ADDRESS5,
			   CAST(DD.STATEID AS INT) AS STATEID, DD.PINCODE,
			   DD.EMAILADDRESS,ISNULL(NE.MOBILENO ,'') MOBILE, DD.REFERENCENO, B.DETAILID, B.ASSESSEEDOB,
			   B.TAXASSESSEDFLAG, B.LATESTASSTYR,B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR,
			   B.TOTALNOOFFORM15H, B.AGGREGATEAMTFORM15H, B.UNIQUEIDNUMBER, 
			   B.DECLARATIONDATE, AMTOFINCPAID,B.DATEINCPAID
			   INTO #TEMP
		FROM #BASICDET B WITH(NOLOCK)
				INNER JOIN #MASTERB DD WITH(NOLOCK)
						ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
				INNER JOIN #MASTERNE NE WITH(NOLOCK)  
						ON DD.DEDUCTEEID = NE.DEDUCTEEID
				INNER JOIN STATEMASTER SM WITH(NOLOCK)  
						ON DD.STATEID = SM.STATEID
		SELECT * FROM #TEMP	
		DROP TABLE #TEMP
		DROP TABLE #MASTERB
		DROP TABLE #MASTERNE
		DROP TABLE #BASICDET	
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETCORRBASICDETAILSPAGED')
DROP PROCEDURE USP_F15H_GETCORRBASICDETAILSPAGED
GO
CREATE PROCEDURE USP_F15H_GETCORRBASICDETAILSPAGED 
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@QUARTER INT,
	@NAME NVARCHAR(75),
	@PAN VARCHAR(10),
	@ESTIMATEDINCFROM INT,
	@ESTIMATEDINCTO INT,
	@DECLARATIONDATEFROM SMALLDATETIME= NULL,
	@DECLARATIONDATETO SMALLDATETIME= NULL,
	@CUSTOMERID VARCHAR(10)
AS
	BEGIN
		SELECT DETAILID, CORSTATUS, BRANCHID
		INTO #PICKED
		FROM CORRFORM15HBASIC WITH(NOLOCK)
		WHERE 
			CORSTATUS <> 1
			AND CORSTATUS <> 4
			AND BRANCHID = @BRANCHID
		SELECT * INTO CORRSTATUSTABLE15H FROM (
		SELECT DETAILID, CORSTATUS, BRANCHID
		FROM #PICKED
		UNION 
		SELECT DETAILID, CORSTATUS, BRANCHID
		FROM CORRFORM15HBASIC WITH(NOLOCK)
		WHERE
			CORSTATUS IN (1,4)
			AND DETAILID NOT IN (SELECT DETAILID FROM #PICKED)
			AND BRANCHID = @BRANCHID) AS CORSTATUS 
		ORDER BY CORSTATUS DESC
		DROP TABLE #PICKED
		DECLARE @BASICDETAILS TABLE(ID INT IDENTITY(1,1), NAME NVARCHAR(75), PAN VARCHAR(10), 
			REFERENCENO VARCHAR(20), DETAILID INT, DEDUCTEEID INT, ASSESSEEDOB SMALLDATETIME, 
			TAXASSESSEDFLAG VARCHAR(1), LATESTASSTYR INT, ESTIMATEDINC INT, ESTIMATEDTOTALINCPRVYR INT, 
			TOTALNOOFFORM15H INT, AGGREGATEAMTFORM15H INT,UNIQUEIDNUMBER VARCHAR(26),
			DECLARATIONDATE SMALLDATETIME, AMTOFINCPAID INT,DATEINCPAID SMALLDATETIME, CORRSTATUS INT)
		DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
			SELECT	DD.NAME, DD.PAN, DD.REFERENCENO, B.DETAILID, B.DEDUCTEEID, B.ASSESSEEDOB,
					B.TAXASSESSEDFLAG, B.LATESTASSTYR,B.ESTIMATEDINC, B.ESTIMATEDTOTALINCPRVYR,
					B.TOTALNOOFFORM15H, B.AGGREGATEAMTFORM15H, B.UNIQUEIDNUMBER, 
					B.DECLARATIONDATE, AMTOFINCPAID,B.DATEINCPAID, B.CORSTATUS AS CORRSTATUS
			FROM CORRFORM15HBASIC B WITH(NOLOCK)
				INNER JOIN DEDUCTEE DD WITH(NOLOCK)
					ON B.DEDUCTEEID = DD.DEDUCTEEID 
					AND B.BRANCHID = DD.BRANCHID
				INNER JOIN CORRSTATUSTABLE15H CS WITH(NOLOCK)
						ON B.DETAILID = CS.DETAILID 
						AND B.CORSTATUS = CS.CORSTATUS 
						AND B.BRANCHID = CS.BRANCHID
			WHERE B.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER =' + CAST(@QUARTER AS VARCHAR)
		IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
			END 
		IF(@PAN <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.PAN ='''+ CAST(@PAN AS VARCHAR)+'''';                                  
			END                       
		IF(@ESTIMATEDINCFROM <> 0 OR @ESTIMATEDINCTO <> 0) 
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND B.ESTIMATEDINC BETWEEN ' + CAST(@ESTIMATEDINCFROM AS VARCHAR) 
				+ ' AND ' + CAST(@ESTIMATEDINCTO AS VARCHAR);      
			END
		IF(@DECLARATIONDATEFROM IS NOT NULL AND @DECLARATIONDATETO IS NOT NULL)
			BEGIN                   
				SET @QUERY = @QUERY + ' AND B.DECLARATIONDATE BETWEEN ''' + CAST(@DECLARATIONDATEFROM AS VARCHAR) 
				+ ''' AND ''' + CAST(@DECLARATIONDATETO AS VARCHAR) + '''';                                  
			END  
		IF(@CUSTOMERID <> '')
			BEGIN                  
					SET @QUERY = @QUERY + ' AND DD.REFERENCENO='''+ CAST(@CUSTOMERID AS VARCHAR)+'''';                                  
			END
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		INSERT INTO @BASICDETAILS EXECUTE SP_EXECUTESQL @QUERY;
		SELECT TOP (@LASTREC - 1) * FROM @BASICDETAILS WHERE ID > @FIRSTREC AND ID < @LASTREC
		DROP TABLE CORRSTATUSTABLE15H
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETCORRINCOMEDETAILS')
DROP PROCEDURE USP_F15H_GETCORRINCOMEDETAILS
GO
CREATE PROCEDURE USP_F15H_GETCORRINCOMEDETAILS
  @BRANCHID INT,
  @QUARTER INT,
  @DETAILID INT,
  @CORRSTATUS INT
AS    
	BEGIN
		SELECT INCOMEID, CORSTATUS, DETAILID
		INTO #PICKED
		FROM CORRFORM15HINCOME WITH(NOLOCK)
		WHERE 
			CORSTATUS NOT IN (1,4)
			AND CORSTATUS <> 1
			AND DETAILID = @DETAILID			
		SELECT * INTO CORRSTATUSTABLEINC FROM (
		SELECT INCOMEID, CORSTATUS, DETAILID
		FROM #PICKED
		UNION 
		SELECT INCOMEID, CORSTATUS, DETAILID
		FROM CORRFORM15HINCOME WITH(NOLOCK)
		WHERE
			CORSTATUS IN (1,4)
			AND CORSTATUS <> 1
			AND INCOMEID NOT IN (SELECT INCOMEID FROM #PICKED)
			AND DETAILID = @DETAILID) AS CORSTATUSINC 
		ORDER BY CORSTATUS DESC
		DROP TABLE #PICKED  
		SELECT  DISTINCT I.INCOMEID, B.DETAILID, B.DEDUCTEEID, DD.NAME, B.UNIQUEIDNUMBER, 
			   I.IDENFICATIONNUM, I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC, I.CORSTATUS
		FROM CORRFORM15HINCOME I WITH(NOLOCK)
			INNER JOIN CORRFORM15HBASIC B WITH(NOLOCK)
				ON I.DETAILID = B.DETAILID
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON I.SECTIONID = T.SECTIONID
			INNER JOIN DEDUCTEE DD WITH(NOLOCK)
				ON B.DEDUCTEEID = DD.DEDUCTEEID 
				AND B.BRANCHID = DD.BRANCHID
			INNER JOIN CORRSTATUSTABLEINC CS WITH(NOLOCK)
				ON I.INCOMEID = CS.INCOMEID 
				AND I.CORSTATUS = CS.CORSTATUS 
				AND I.DETAILID = CS.DETAILID
		WHERE B.DETAILID = @DETAILID 
			AND B.BRANCHID = @BRANCHID 
			AND B.QUARTER  = @QUARTER
		DROP TABLE CORRSTATUSTABLEINC 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETCORRINCOMEDETAILSBYINCOMEID')
DROP PROCEDURE USP_F15H_GETCORRINCOMEDETAILSBYINCOMEID
GO
CREATE PROCEDURE [dbo].[USP_F15H_GETCORRINCOMEDETAILSBYINCOMEID]
	@INCOMEID INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT I.INCOMEID, B.DETAILID, B.DEDUCTEEID, 
			(D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR)+ ')-' + D.PAN) AS NAME,
		    SUBSTRING(B.UNIQUEIDNUMBER, 1, 10) UNIQUEIDNUMBER, I.IDENFICATIONNUM, 
		    I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC, I.CORSTATUS
		FROM  CORRFORM15HINCOME I WITH(NOLOCK)
			INNER JOIN CORRFORM15HBASIC B WITH(NOLOCK)
				ON I.DETAILID = B.DETAILID
					AND B.CORSTATUS =2
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON I.SECTIONID = T.SECTIONID
			INNER JOIN DEDUCTEE D WITH(NOLOCK)
				ON B.DEDUCTEEID = D.DEDUCTEEID AND B.BRANCHID = D.BRANCHID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
				ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE B.BRANCHID = @BRANCHID 
			AND I.INCOMEID = @INCOMEID 
			AND I.CORSTATUS =2  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETCORRINCOMEDETAILSFORERETURN')
DROP PROCEDURE USP_F15H_GETCORRINCOMEDETAILSFORERETURN
GO
CREATE PROCEDURE USP_F15H_GETCORRINCOMEDETAILSFORERETURN
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT N.INCOMEID,B.DETAILID,B.DEDUCTEEID,DD.NAME,B.UNIQUEIDNUMBER, 
			   N.IDENFICATIONNUM, N.NATUREOFINC, T.SECTIONNAME, N.AMTOFINC,
			   N.CORSTATUS
			   INTO #TEMP
		FROM CORRFORM15HINCOME N WITH(NOLOCK)
				INNER JOIN CORRFORM15HBASIC B WITH(NOLOCK)
					ON N.DETAILID = B.DETAILID
				INNER JOIN TAXSECTIONS T WITH(NOLOCK)
					ON N.SECTIONID = T.SECTIONID
				INNER JOIN DEDUCTEE DD WITH(NOLOCK)
					ON B.DEDUCTEEID = DD.DEDUCTEEID 
		WHERE B.BRANCHID = @BRANCHID 
				AND B.QUARTER = @QUARTER
				AND N.CORSTATUS IN(2,3,4)
		SELECT * FROM #TEMP	
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETEXCLUDEDRECORDS')
DROP PROCEDURE USP_F15H_GETEXCLUDEDRECORDS
GO
CREATE PROCEDURE USP_F15H_GETEXCLUDEDRECORDS      
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT E.SERIALNO, D.REFERENCENO, D.NAME, D.PAN, CONVERT(varchar(10), B.ASSESSEEDOB,105) AS ASSESSEEDOB, 
			D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5,
			S.STATENAME, D.PINCODE, E.MOBILENO, D.EMAILADDRESS
		FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE E WITH(NOLOCK) 
				ON D.DEDUCTEEID = E.DEDUCTEEID
			INNER JOIN FORM15HBASIC B WITH(NOLOCK)
				ON D.DEDUCTEEID = B.DEDUCTEEID AND D.BRANCHID = B.BRANCHID 
			INNER JOIN STATEMASTER S WITH(NOLOCK)
				ON S.STATEID = D.STATEID 
		WHERE
			D.BRANCHID = @BRANCHID AND B.QUARTER = @QUARTER AND 
			(LEN(ISNULL(E.MOBILENO,'')) = 0 OR LEN(ISNULL(D.EMAILADDRESS,'')) = 0)
		GROUP BY E.SERIALNO, D.REFERENCENO, D.NAME, D.PAN, B.ASSESSEEDOB, 
			D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5,
			S.STATENAME, D.PINCODE, E.MOBILENO, D.EMAILADDRESS 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETINCOMEDETAILS')
DROP PROCEDURE USP_F15H_GETINCOMEDETAILS
GO
CREATE PROCEDURE [USP_F15H_GETINCOMEDETAILS]
	@BRANCHID INT,
	@QUARTER INT,
	@DETAILID INT    
AS    
	BEGIN 
		SELECT I.INCOMEID, B.DETAILID, B.DEDUCTEEID, DD.NAME, B.UNIQUEIDNUMBER, I.IDENFICATIONNUM, 
			I.NATUREOFINC, T.SECTIONNAME, I.AMTOFINC
		FROM FORM15HBASIC B WITH(NOLOCK)
			INNER JOIN FORM15HINCOME I WITH(NOLOCK)
				ON I.DETAILID = B.DETAILID
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON I.SECTIONID = T.SECTIONID
			INNER JOIN DEDUCTEE DD WITH(NOLOCK)
				ON B.DEDUCTEEID = DD.DEDUCTEEID AND B.BRANCHID = DD.BRANCHID
		WHERE B.DETAILID = @DETAILID 
			AND B.BRANCHID = @BRANCHID 
			AND B.QUARTER  = @QUARTER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETINCOMEDETAILSBYINCOMEID')
DROP PROCEDURE USP_F15H_GETINCOMEDETAILSBYINCOMEID
GO
CREATE PROCEDURE [USP_F15H_GETINCOMEDETAILSBYINCOMEID]
	@INCOMEID INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT INCOMEID, B.DETAILID, B.DEDUCTEEID, 
			(D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR)+ ')-' + D.PAN) AS NAME,
			SUBSTRING(B.UNIQUEIDNUMBER,1,10) UNIQUEIDNUMBER, N.IDENFICATIONNUM, 
			N.NATUREOFINC, T.SECTIONNAME, N.AMTOFINC
		FROM  FORM15HBASIC B WITH(NOLOCK)
			INNER JOIN FORM15HINCOME N WITH(NOLOCK)
				ON N.DETAILID = B.DETAILID
			INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON N.SECTIONID = T.SECTIONID
			INNER JOIN DEDUCTEE D WITH(NOLOCK)
				ON B.DEDUCTEEID = D.DEDUCTEEID AND B.BRANCHID = D.BRANCHID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
				ON D.DEDUCTEEID = NE.DEDUCTEEID 
		WHERE B.BRANCHID = @BRANCHID 
			AND N.INCOMEID = @INCOMEID  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETINCOMEDETAILSFORERETURN')
DROP PROCEDURE USP_F15H_GETINCOMEDETAILSFORERETURN
GO
CREATE PROCEDURE [dbo].[USP_F15H_GETINCOMEDETAILSFORERETURN]
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT N.INCOMEID,B.DETAILID,B.DEDUCTEEID,DD.NAME,B.UNIQUEIDNUMBER, 
			   N.IDENFICATIONNUM, N.NATUREOFINC, T.SECTIONNAME, N.AMTOFINC
			   INTO #TEMP
		FROM FORM15HINCOME N WITH(NOLOCK)
				INNER JOIN FORM15HBASIC B WITH(NOLOCK)
					ON N.DETAILID = B.DETAILID
				INNER JOIN TAXSECTIONS T WITH(NOLOCK)
					ON N.SECTIONID = T.SECTIONID
				INNER JOIN DEDUCTEE DD WITH(NOLOCK)
					ON B.DEDUCTEEID = DD.DEDUCTEEID 
		WHERE B.BRANCHID = @BRANCHID 
				AND B.QUARTER = @QUARTER
		SELECT * FROM #TEMP	
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_GETINCOMEDETAILSPAGED')
DROP PROCEDURE USP_F15H_GETINCOMEDETAILSPAGED
GO
CREATE PROCEDURE [dbo].[USP_F15H_GETINCOMEDETAILSPAGED] 
	@STARTROW INT,									  
	@PAGESIZE INT,
	@BRANCHID INT,
	@QUARTER INT,
	@NAME NVARCHAR(75),
	@PAN VARCHAR(10),
	@SECTIONNAME VARCHAR(10),
	@AMOUNTFROM INT,
	@AMOUNTTO INT
AS
	BEGIN
		DECLARE @INCOMEDETAILS TABLE(ID INT IDENTITY(1,1), INCOMEID INT,DETAILID INT,DEDUCTEEID INT,NAME NVARCHAR(75), UNIQUEIDNUMBER VARCHAR(26),IDENFICATIONNUM VARCHAR(125), 
		NATUREOFINC VARCHAR(125),SECTIONNAME VARCHAR(10),AMTOFINC INT)
		DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY = '
			SELECT N.INCOMEID,B.DETAILID,B.DEDUCTEEID,DD.NAME, B.UNIQUEIDNUMBER, N.IDENFICATIONNUM, N.NATUREOFINC, T.SECTIONNAME, N.AMTOFINC
			FROM FORM15HINCOME N WITH(NOLOCK)
				INNER JOIN FORM15HBASIC B WITH(NOLOCK)
				ON N.DETAILID = B.DETAILID
				INNER JOIN TAXSECTIONS T WITH(NOLOCK)
				ON N.SECTIONID = T.SECTIONID
				INNER JOIN DEDUCTEE DD WITH(NOLOCK)
				ON B.DEDUCTEEID = DD.DEDUCTEEID 
			WHERE B.BRANCHID ='  + CAST(@BRANCHID AS VARCHAR) + 'AND B.QUARTER =' + CAST(@QUARTER AS VARCHAR)
			IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.NAME LIKE ''%' + @NAME + '%''';                                  
			END
			IF(@PAN <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND DD.PAN ='''+ CAST(@PAN AS VARCHAR)+'''';                                  
			END
			IF(@SECTIONNAME <> '-1')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND T.SECTIONNAME ='''+ CAST(@SECTIONNAME AS VARCHAR)+'''';                                  
			END
			IF(@AMOUNTFROM <> 0 OR @AMOUNTTO <> 0) 
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND N.AMTOFINC BETWEEN ' + CAST(@AMOUNTFROM AS VARCHAR) 
				+ ' AND ' + CAST(@AMOUNTTO AS VARCHAR);      
			END
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		INSERT INTO @INCOMEDETAILS EXECUTE SP_EXECUTESQL @QUERY;
		SELECT TOP (@LASTREC - 1) * FROM @INCOMEDETAILS WHERE ID > @FIRSTREC AND ID < @LASTREC
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_SAVEBASICDETAILS')
DROP PROCEDURE USP_F15H_SAVEBASICDETAILS
GO
CREATE PROCEDURE USP_F15H_SAVEBASICDETAILS
	@DETAILID INT = -1,
	@PAN VARCHAR(10),
	@DEDUCTEEID INT,
	@BRANCHID INT ,
	@QUARTER INT ,
	@ASSESSEEDOB SMALLDATETIME,
	@TAXASSESSEDFLAG VARCHAR(1),
	@LATESTASSTYR INT,
	@ESTIMATEDINC INT,
	@ESTIMATEDTOTALINCPRVYR INT,
	@TOTALNOOFFORM15H INT,
	@AGGREGATEAMTFORM15H INT,
	@FINYEARTAN VARCHAR(16),
	@UNIQUEIDNUMBER VARCHAR(26),
	@DECLARATIONDATE SMALLDATETIME,
	@AMTOFINCPAID INT,
	@DATEINCPAID SMALLDATETIME,
	@ISUPDATEINC BIT,
	@ISUINMANUAL INT = 0
AS
BEGIN
	DECLARE @DEDCHECK TINYINT
	SET @DEDCHECK = 0
	IF(@ISUINMANUAL <> 1)
		BEGIN
			IF((SELECT COUNT(DEDUCTEEID) 
			   FROM DEDUCTEE 
			   WHERE DEDUCTEEID IN(
									SELECT DEDUCTEEID 
									FROM FORM15HBASIC WITH(NOLOCK) 
									WHERE DEDUCTEEID = @DEDUCTEEID
								   ) 
							AND PAN = @PAN) <> 0 AND @DETAILID = -1)
				BEGIN	
					SET @DEDCHECK = 1
				END 
		END
	IF(@DEDCHECK = 1)
		BEGIN	
			SELECT 0
		END
	ELSE
		BEGIN
			DECLARE @STRLEN TINYINT 
			SET @STRLEN = 9
			DECLARE @UNIQUEID INT
			DECLARE @FINALUIN INT
			IF(@ISUINMANUAL = 1)
				BEGIN
					SET @UNIQUEID = SUBSTRING(@UNIQUEIDNUMBER, 2,9) 
					SET @FINALUIN = @UNIQUEID	  
				END
			ELSE
				BEGIN
					SET @UNIQUEID = ISNULL((SELECT MAX(SUBSTRING(UNIQUEIDNUMBER, 2, 9)) FROM FORM15HBASIC WITH(NOLOCK) WHERE BRANCHID = @BRANCHID), 0) + 1
					SET @FINALUIN = NULL --(SELECT TOP 1 SUBSTRING(UNIQUEIDNUMBER, 2,9) FROM FORM15HBASIC WITH(NOLOCK) 
												--WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID ORDER BY UNIQUEIDNUMBER DESC)
					IF(@FINALUIN IS NULL OR @FINALUIN = '')
						BEGIN
							SET @FINALUIN = @UNIQUEID
						END
				END
			IF(@DETAILID = -1)
				BEGIN
					INSERT INTO FORM15HBASIC(DEDUCTEEID, BRANCHID, QUARTER, ASSESSEEDOB, TAXASSESSEDFLAG, 
						LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H, AGGREGATEAMTFORM15H, 
						UNIQUEIDNUMBER, 
						DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID)  
					VALUES (@DEDUCTEEID, @BRANCHID, @QUARTER, @ASSESSEEDOB, @TAXASSESSEDFLAG, 
						@LATESTASSTYR, @ESTIMATEDINC, @ESTIMATEDTOTALINCPRVYR, @TOTALNOOFFORM15H, @AGGREGATEAMTFORM15H, 
						'H' + CAST(REPLACE(STR(@FINALUIN, @STRLEN), ' ', '0') AS VARCHAR) + @FINYEARTAN, 
						@DECLARATIONDATE, @AMTOFINCPAID, @DATEINCPAID)
					SELECT @FINALUIN
				END
			ELSE
				BEGIN
					IF(LEN(@UNIQUEIDNUMBER) <> 10)	
						BEGIN 
							UPDATE FORM15HBASIC
							SET DEDUCTEEID = @DEDUCTEEID, ASSESSEEDOB = @ASSESSEEDOB, TAXASSESSEDFLAG = @TAXASSESSEDFLAG, 
								LATESTASSTYR = @LATESTASSTYR, ESTIMATEDINC = @ESTIMATEDINC, 
								ESTIMATEDTOTALINCPRVYR = @ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H = @TOTALNOOFFORM15H, 
								AGGREGATEAMTFORM15H = @AGGREGATEAMTFORM15H,
								UNIQUEIDNUMBER = 'H' + CAST(REPLACE(STR(@FINALUIN, @STRLEN), ' ', '0') AS VARCHAR) 
									+ @FINYEARTAN, 
								DECLARATIONDATE = @DECLARATIONDATE, AMTOFINCPAID = @AMTOFINCPAID, 
								DATEINCPAID = @DATEINCPAID
							WHERE DETAILID = @DETAILID
							SELECT -1
						END
					ELSE
						BEGIN
							IF(@ISUINMANUAL = 1)
								BEGIN  
									UPDATE FORM15HBASIC
									SET DEDUCTEEID = @DEDUCTEEID, ASSESSEEDOB = @ASSESSEEDOB, TAXASSESSEDFLAG = @TAXASSESSEDFLAG, 
										LATESTASSTYR = @LATESTASSTYR, ESTIMATEDINC = @ESTIMATEDINC, 
										ESTIMATEDTOTALINCPRVYR = @ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H = @TOTALNOOFFORM15H, 
										AGGREGATEAMTFORM15H = @AGGREGATEAMTFORM15H,
										UNIQUEIDNUMBER = 'H' + CAST(REPLACE(STR(@FINALUIN, @STRLEN), ' ', '0') AS VARCHAR) + @FINYEARTAN,  
										DECLARATIONDATE = @DECLARATIONDATE, AMTOFINCPAID = @AMTOFINCPAID, 
										DATEINCPAID = @DATEINCPAID
									WHERE DETAILID = @DETAILID
									SELECT -1
								END
							ELSE
								BEGIN
									UPDATE FORM15HBASIC
									SET DEDUCTEEID = @DEDUCTEEID, ASSESSEEDOB = @ASSESSEEDOB, TAXASSESSEDFLAG = @TAXASSESSEDFLAG, 
										LATESTASSTYR = @LATESTASSTYR, ESTIMATEDINC = @ESTIMATEDINC, 
										ESTIMATEDTOTALINCPRVYR = @ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H = @TOTALNOOFFORM15H, 
										AGGREGATEAMTFORM15H = @AGGREGATEAMTFORM15H, 
										DECLARATIONDATE = @DECLARATIONDATE, AMTOFINCPAID = @AMTOFINCPAID, 
										DATEINCPAID = @DATEINCPAID
									WHERE DETAILID = @DETAILID
									SELECT -1
								END	
						END
					--Update the ESTIMATEDINC in FORM15HBASIC
					IF (@ISUPDATEINC=1)
						BEGIN
							SELECT B.DETAILID, SUM(I.AMTOFINC) INC
								INTO #INCSUM15H
								FROM FORM15HBASIC B WITH(NOLOCK)
									INNER JOIN FORM15HINCOME I
										ON B.DETAILID = I.DETAILID 
								WHERE B.DETAILID = @DETAILID
								GROUP BY B.DETAILID
								UPDATE FORM15HBASIC SET ESTIMATEDINC = I.INC
								FROM FORM15HBASIC B 
									INNER JOIN #INCSUM15H I
										ON B.DETAILID = I.DETAILID 
								DROP TABLE #INCSUM15H
						END
				END
			EXEC USP_F15GH_UPDATEUINANDPAYMENTMADEBASEDONDEDUCTEEID @QUARTER, @BRANCHID, @DEDUCTEEID, 2
		END	
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_SAVECORRBASICDETAILS')
DROP PROCEDURE USP_F15H_SAVECORRBASICDETAILS
GO
CREATE PROCEDURE USP_F15H_SAVECORRBASICDETAILS 
	@DETAILID INT = -1,
	@PAN VARCHAR(10),
	@DEDUCTEEID INT,
	@BRANCHID INT ,
	@QUARTER INT ,
	@ASSESSEEDOB SMALLDATETIME,
	@TAXASSESSEDFLAG VARCHAR(1),
	@LATESTASSTYR INT,
	@ESTIMATEDINC INT,
	@ESTIMATEDTOTALINCPRVYR INT,
	@TOTALNOOFFORM15H INT,
	@AGGREGATEAMTFORM15H INT,
	@UNIQUEIDNUMBER VARCHAR(26),
	@DECLARATIONDATE SMALLDATETIME,
	@AMTOFINCPAID INT,
	@DATEINCPAID SMALLDATETIME,
	@ISUPDATEINC BIT
AS
BEGIN
	IF((SELECT COUNT(DEDUCTEEID) FROM DEDUCTEE WITH(NOLOCK) WHERE DEDUCTEEID IN(SELECT DEDUCTEEID FROM CORRFORM15HBASIC WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID) AND PAN=@PAN) <> 0 AND @DETAILID = -1)
		BEGIN
			SELECT 0
		END
	ELSE
		BEGIN
			DECLARE @STRLEN TINYINT 
			SET @STRLEN = 9
			--Set the velue of DETAILID
			DECLARE @BASICDETAILID INT
			SET @BASICDETAILID = (SELECT MAX(DETAILID) DETAILID FROM FORM15HBASIC WITH(NOLOCK))	
			DECLARE @CORRBASICDETAILID INT
			SET @CORRBASICDETAILID = (SELECT MAX(DETAILID) DETAILID FROM CORRFORM15HBASIC WITH(NOLOCK))
			DECLARE @DETAILIDMAX INT
			SET @DETAILIDMAX =  CASE WHEN @BASICDETAILID > @CORRBASICDETAILID  THEN @BASICDETAILID ELSE @CORRBASICDETAILID END
			--Set the velue of UNIQUEIDNUMBER
			DECLARE @BASICUIN INT
			SET @BASICUIN = ISNULL((SELECT MAX(SUBSTRING(UNIQUEIDNUMBER, 2,9)) UIN FROM FORM15HBASIC WITH(NOLOCK) WHERE BRANCHID = @BRANCHID), 0)	
			DECLARE @CORRBASICUIN INT
			SET @CORRBASICUIN = ISNULL((SELECT MAX(SUBSTRING(UNIQUEIDNUMBER, 2,9)) UIN FROM CORRFORM15HBASIC WITH(NOLOCK) WHERE BRANCHID = @BRANCHID), 0)
			DECLARE @UNIQUEID INT
			SET @UNIQUEID = CASE WHEN @BASICUIN > @CORRBASICUIN  THEN @BASICUIN ELSE @CORRBASICUIN END
			DECLARE @FINALUIN INT 
			SET @FINALUIN = NULL
			IF(@FINALUIN IS NULL OR @FINALUIN = '')
				BEGIN
					SET @FINALUIN = @UNIQUEID + 1
				END							
			IF(@DETAILID = -1)  
				BEGIN
					INSERT INTO CORRFORM15HBASIC(DETAILID, DEDUCTEEID, BRANCHID, QUARTER, ASSESSEEDOB, TAXASSESSEDFLAG, 
						LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H, AGGREGATEAMTFORM15H, 
						UNIQUEIDNUMBER, 
						DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID, CREATEDDATE, ENTRYTYPE, CORSTATUS)  
					VALUES (@DETAILIDMAX +1, @DEDUCTEEID, @BRANCHID, @QUARTER, @ASSESSEEDOB, @TAXASSESSEDFLAG, 
						@LATESTASSTYR, @ESTIMATEDINC, @ESTIMATEDTOTALINCPRVYR, @TOTALNOOFFORM15H, @AGGREGATEAMTFORM15H, 
						'H' + CAST(REPLACE(STR(@FINALUIN, @STRLEN), ' ', '0') AS VARCHAR) + @UNIQUEIDNUMBER, 
						@DECLARATIONDATE, @AMTOFINCPAID, @DATEINCPAID, GETDATE(), 1, 4)
					SELECT @FINALUIN
				END
			ELSE
				BEGIN
				DELETE FROM CORRFORM15HBASIC WHERE DETAILID = @DETAILID AND BRANCHID = @BRANCHID AND CORSTATUS IN(2,3)
				DELETE FROM CORRFORM15HINCOME WHERE DETAILID = @DETAILID AND CORSTATUS IN(2,3)
				INSERT INTO CORRFORM15HBASIC(DETAILID, DEDUCTEEID, BRANCHID, QUARTER, ASSESSEEDOB, TAXASSESSEDFLAG, 
						LATESTASSTYR, ESTIMATEDINC, ESTIMATEDTOTALINCPRVYR, TOTALNOOFFORM15H, AGGREGATEAMTFORM15H, 
						UNIQUEIDNUMBER, 
						DECLARATIONDATE, AMTOFINCPAID, DATEINCPAID, CREATEDDATE, ENTRYTYPE, CORSTATUS)  
					VALUES (@DETAILID, @DEDUCTEEID, @BRANCHID, @QUARTER, @ASSESSEEDOB, @TAXASSESSEDFLAG, 
						@LATESTASSTYR, @ESTIMATEDINC, @ESTIMATEDTOTALINCPRVYR, @TOTALNOOFFORM15H, @AGGREGATEAMTFORM15H,  
						@UNIQUEIDNUMBER, @DECLARATIONDATE, @AMTOFINCPAID, @DATEINCPAID, GETDATE(), 1, 2)
				INSERT INTO CORRFORM15HINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)		
				SELECT INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, 2 AS CORSTATUS
					FROM CORRFORM15HINCOME  WITH(NOLOCK)
					WHERE DETAILID = @DETAILID AND CORSTATUS IN(1,4)
				SELECT -1
				END	
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_SAVECORRINCOMEDETAILS')
DROP PROCEDURE USP_F15H_SAVECORRINCOMEDETAILS
GO
CREATE PROCEDURE [dbo].[USP_F15H_SAVECORRINCOMEDETAILS] 
	@INCOMEID INT = -1,
	@SRLNO INT = 0,
	@DETAILID INT,
	@IDENFICATIONNUM VARCHAR(125),
	@NATUREOFINC VARCHAR(125),
	@SECTIONNAME VARCHAR(5),
	@AMTOFINC INT,
	@ISUPDATEINC BIT
AS
BEGIN
    DECLARE @SECTIONID INT
    SET @SECTIONID = (SELECT SECTIONID 
                        FROM TAXSECTIONS WITH(NOLOCK)
                        WHERE FORMID = 2 
							AND SECTIONNAME = @SECTIONNAME)
	DECLARE @INCOMEIDS INT
	SET @INCOMEIDS = (SELECT MAX(INCOMEID) INCOMEID FROM FORM15HINCOME WITH(NOLOCK))	
	DECLARE @CORRINCOMEID INT
	SET @CORRINCOMEID = (SELECT MAX(INCOMEID) INCOMEID FROM CORRFORM15HINCOME WITH(NOLOCK))
	DECLARE @INCOMEIDMAX INT
	SET @INCOMEIDMAX =  CASE WHEN @INCOMEIDS > @CORRINCOMEID  THEN @INCOMEIDS ELSE @CORRINCOMEID END	
	DECLARE @CORSTATUS INT
	SET @CORSTATUS = (SELECT MAX(CORSTATUS) FROM CORRFORM15HBASIC WITH(NOLOCK) WHERE DETAILID = @DETAILID)							
	IF (@INCOMEID = -1 AND @CORSTATUS = 4)  
		BEGIN 
			INSERT INTO CORRFORM15HINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)  
				   VALUES (@INCOMEIDMAX + 1, @SRLNO, @DETAILID, @IDENFICATIONNUM, @NATUREOFINC, @SECTIONID, @AMTOFINC, 4)
			SELECT -1
		END
	ELSE
		BEGIN
				DELETE FROM CORRFORM15HINCOME WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(2)				
				INSERT INTO CORRFORM15HINCOME(INCOMEID, SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC, CORSTATUS)  
				SELECT INCOMEID, SRLNO, DETAILID, @IDENFICATIONNUM, @NATUREOFINC, @SECTIONID, @AMTOFINC, 2 AS CORSTATUS
					FROM CORRFORM15HINCOME WITH(NOLOCK)
					WHERE INCOMEID = @INCOMEID AND CORSTATUS IN(1)
		SELECT @INCOMEID
		END
	--UPDATE THE ESTIMATEDINC IN FORM15HBASIC
		IF(@ISUPDATEINC=1)
			BEGIN
				SELECT B.DETAILID, SUM(I.AMTOFINC) INC ,B.CORSTATUS
					INTO #INCSUM15H
					FROM CORRFORM15HBASIC B WITH(NOLOCK)
						INNER JOIN CORRFORM15HINCOME I WITH(NOLOCK)
							ON B.DETAILID = I.DETAILID 
					WHERE B.DETAILID = @DETAILID
					GROUP BY B.DETAILID, B.CORSTATUS
					UPDATE CORRFORM15HBASIC SET ESTIMATEDINC = I.INC
					FROM CORRFORM15HBASIC B 
						INNER JOIN #INCSUM15H I
							ON B.DETAILID = I.DETAILID
							AND B.CORSTATUS = I.CORSTATUS 
					DROP TABLE #INCSUM15H
			END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F15H_SAVEINCOMEDETAILS')
DROP PROCEDURE USP_F15H_SAVEINCOMEDETAILS
GO
CREATE PROCEDURE [dbo].[USP_F15H_SAVEINCOMEDETAILS]
	@INCOMEID INT = -1,
	@SRLNO INT = 0,
	@DETAILID INT,
	@IDENFICATIONNUM VARCHAR(125),
	@NATUREOFINC VARCHAR(125),
	@SECTIONNAME VARCHAR(10),
	@AMTOFINC INT,
	@ISUPDATEINC BIT
AS
BEGIN
	DECLARE @SECTIONID INT
	SET @SECTIONID = (SELECT SECTIONID FROM TAXSECTIONS WITH(NOLOCK)
						WHERE FORMID = 2 
							AND SECTIONNAME = @SECTIONNAME
						)
	IF(@INCOMEID = -1)
	BEGIN	
		INSERT INTO FORM15HINCOME(SRLNO, DETAILID, IDENFICATIONNUM, NATUREOFINC, SECTIONID, AMTOFINC)  
			VALUES (@SRLNO, @DETAILID, @IDENFICATIONNUM, @NATUREOFINC, @SECTIONID, @AMTOFINC)
		SELECT -1
	END
	ELSE
	BEGIN
		UPDATE FORM15HINCOME
			SET DETAILID = @DETAILID, IDENFICATIONNUM = @IDENFICATIONNUM, NATUREOFINC = @NATUREOFINC, 
				SECTIONID = @SECTIONID, AMTOFINC = @AMTOFINC
			WHERE INCOMEID = @INCOMEID
		SELECT @INCOMEID
	END
	--Update the ESTIMATEDINC in FORM15HBASIC
	IF (@ISUPDATEINC=1)
		BEGIN
			SELECT B.DETAILID, SUM(I.AMTOFINC) INC
				INTO #INCSUM15H
				FROM FORM15HBASIC B WITH(NOLOCK)
					INNER JOIN FORM15HINCOME I
						ON B.DETAILID = I.DETAILID 
				WHERE B.DETAILID = @DETAILID
				GROUP BY B.DETAILID
				UPDATE FORM15HBASIC SET ESTIMATEDINC = I.INC
				FROM FORM15HBASIC B 
					INNER JOIN #INCSUM15H I
						ON B.DETAILID = I.DETAILID 
				DROP TABLE #INCSUM15H
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_CHECKFORCORRECTIONSTATEMENTS')
DROP PROCEDURE USP_F24G_CHECKFORCORRECTIONSTATEMENTS
GO
CREATE PROCEDURE [USP_F24G_CHECKFORCORRECTIONSTATEMENTS]
	@BRANCHID INT,
	@MONTHID INT
AS
	BEGIN
		DECLARE @RETURNVALUE INT;
	IF EXISTS(
			   SELECT CD.BRANCHID FROM CORRDEDUCTORF24G CD WITH(NOLOCK)
			   LEFT JOIN  FORM24G F24G WITH(NOLOCK) ON F24G.MONTHID = CD.MONTHID
			   LEFT JOIN  DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = CD.DEDUCTORID
			   WHERE CD.BRANCHID = @BRANCHID AND CD.MONTHID = @MONTHID AND CD.CORRECTIONSTATUS > 1
			   UNION
			   SELECT CDDO.BRANCHID  FROM CORRDDODETAILSF24G CDDO WITH(NOLOCK)
			   RIGHT JOIN  FORM24G F24G WITH(NOLOCK) ON F24G.MONTHID = CDDO.MONTHID
			   RIGHT JOIN  DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = CDDO.DEDUCTORID
			   WHERE CDDO.BRANCHID = @BRANCHID AND CDDO.MONTHID = @MONTHID AND CDDO.CORRECTIONSTATUS > 1)
		BEGIN
			--SET @RETURNVALUE = 1
			--PRINT @RETURNVALUE
			SELECT 1;
		END
		ELSE
		BEGIN
			--SET @RETURNVALUE  = 0
			--PRINT @RETURNVALUE
			SELECT 0;
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_DELETEDDODEDUCTIONDETAILS')
DROP PROCEDURE USP_F24G_DELETEDDODEDUCTIONDETAILS
GO
CREATE PROCEDURE [USP_F24G_DELETEDDODEDUCTIONDETAILS]
(
  @FORM24GID INT
)
AS
BEGIN
	DELETE FROM FORM24G WHERE FORM24GID = @FORM24GID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_DELETEF24GFVUFILE')
DROP PROCEDURE USP_F24G_DELETEF24GFVUFILE
GO
CREATE PROCEDURE [USP_F24G_DELETEF24GFVUFILE] 
@BRANCHID INT,
@MONTHID  INT,
@ISDELETE BIT
AS
BEGIN
  DECLARE @REVISENUMBER INT;    
     DELETE FROM CORRDEDUCTORF24G   WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID
     DELETE FROM CORRDDODETAILSF24G	WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID
     IF(@ISDELETE = 0)
     BEGIN
		 DELETE FROM CORRECTIONDETAILSF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID
		 AND   MONTHID  = @MONTHID AND REVISENUMBER IN (SELECT MAX(REVISENUMBER) FROM CORRECTIONDETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID= @MONTHID)
		 SELECT  @REVISENUMBER = MAX(REVISENUMBER) FROM ACKNOREVF24G WITH(NOLOCK) WHERE ACKID = (SELECT ACKID FROM ACKNOF24G WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND MONTHID = @MONTHID) GROUP BY ACKID     
		 DELETE FROM ACKNOREVF24G WHERE REVISENUMBER = @REVISENUMBER AND ACKID=(SELECT ACKID FROM ACKNOF24G WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND MONTHID = @MONTHID);     
     END
     UPDATE ACKNOF24G SET ISUPLOADED = 0 WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_FINALUPDATE')
DROP PROCEDURE USP_F24G_FINALUPDATE
GO
CREATE PROCEDURE [USP_F24G_FINALUPDATE] 
@BRANCHID INT,
@MONTHID INT,
@TYPEOFCORRECTION INT
--@FORMID INT,
--@QUARTER INT
AS
BEGIN  ---UPDATE DEDUCTOR FOR CANCELLATION
   DECLARE @QUARTER INT;  
   DECLARE @ERROR INT,@RETURNTYPE INT;
   SET @RETURNTYPE = 0;  
  --IF EXISTS(SELECT CORRECTIONSTATUS FROM CORRDEDUCTORF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 6)
  IF(@TYPEOFCORRECTION = 1)
		BEGIN
		 -- BEGIN
			DELETE FROM CORRDEDUCTORF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID
			DELETE FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID
			UPDATE ACKNOF24G SET ISVALID = 0,
			                     ISUPLOADED = 0,
			                     ORGNUM = NULL
			                     WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID			
		 -- END 
		 SET @RETURNTYPE = 1
		END
 ELSE     
        BEGIN
				 /*-------------UPDATE DEDUCTOR MASTER-------------*/
				IF(@MONTHID = 4 OR @MONTHID = 5 OR @MONTHID = 6)
				  SET @QUARTER = 1;
				IF(@MONTHID = 7 OR @MONTHID = 8 OR @MONTHID = 9)
				  SET @QUARTER = 2;
				IF(@MONTHID = 10 OR @MONTHID = 11 OR @MONTHID = 12)
				  SET @QUARTER = 3;
				IF(@MONTHID = 1 OR @MONTHID = 2 OR @MONTHID = 3)
				  SET @QUARTER = 4;	 
	IF EXISTS(SELECT CORRECTIONSTATUS FROM CORRDEDUCTORF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID
					 AND CORRECTIONSTATUS = 2)
		BEGIN
						---UPDATING THE MASTER DEDUCTOR DETAILS FROM CORREDEDUCTOR TABLE
						UPDATE DEDUCTOR SET DEDUCTORNAME   =  CD.DEDUCTORNAME,
											ADDRESS1       =  CD.ADDRESS1,
											ADDRESS2	   =  CD.ADDRESS2,
											ADDRESS3	   =  CD.ADDRESS3,
											ADDRESS4	   =  CD.ADDRESS4,
											ADDRESS5	   =  CD.ADDRESS5,
											STATEID		   =  CD.STATEID,
											PINCODE		   =  CD.PINCODE,
											EMAILADDRESS   =  CD.EMAILADDRESS,
											STDCODE        =  CD.STDCODE,
											PHONENO		   =  CD.PHONENO,
											STATUSID	   =  CD.STATUSID,
											GOVTADDSTATEID =  CD.GOVTADDSTATEID				
								       FROM DEDUCTOR D
											INNER JOIN
											BRANCHDEDUCTORS BD
										 ON D.DEDUCTORID=BD.DEDUCTORID 
											INNER JOIN 
											CORRDEDUCTORF24G CD
										 ON CD.BRANCHID=BD.BRANCHID --AND @QUARTER = BD.QUARTER
									  WHERE CD.BRANCHID=@BRANCHID AND CD.MONTHID =@MONTHID 
									        AND CD.CORRECTIONSTATUS = 2 AND BD.QUARTER = @QUARTER
						--UPDATING THE RESPONSIBLE PERSON DETAILS FROM CORRDEDUCTOR TABLE			  
						UPDATE RESPONSIBLEPERSON SET PERSONNAME=CD.RPNAME,
													 ADDRESS1=CD.RPADDRESS1,
													 ADDRESS2=CD.RPADDRESS2,
													 ADDRESS3=CD.RPADDRESS3,
													 ADDRESS4=CD.RPADDRESS4,
													 ADDRESS5=CD.RPADDRESS5,
													 STATEID=CD.RPSTATEID,
													 PINCODE=CD.RPPINCODE,
													 --ISADDRCHANGED=CD.RPISADDRCHANGED,
													 DESIGNATION=CD.RPDESIGNATION,
													 EMAILADDRESS=CD.RPEMAILADDRESS,
													 STDCODE=CD.RPSTDCODE,
													 PHONENO=CD.RPPHONENO,
													 MOBILENO=CD.RPMOBILENO										 
												FROM DEDUCTOR D
													 INNER JOIN 
													 RESPONSIBLEPERSON RP
												  ON D.DEDUCTORID=RP.DEDUCTORID
													 INNER JOIN 
													 BRANCHDEDUCTORS BD
												  ON D.DEDUCTORID=BD.DEDUCTORID 
													 INNER JOIN 
													 CORRDEDUCTORF24G CD
												  ON CD.BRANCHID=BD.BRANCHID AND @QUARTER = BD.QUARTER 
											   WHERE CD.BRANCHID=@BRANCHID AND CD.MONTHID = @MONTHID 
													 AND CD.CORRECTIONSTATUS=2
						--DELETING DEDUCTOR DETAILS HAVING CORRECTIONSTATUS 1 AND 
						--UPDATING THE CORRECTIONSTATUS TO 1 OF DEDUCTOR HAVING CORRECTIONSTATUS 2 							 
		UPDATE CORRDDODETAILSF24G SET BHID = CD.BHID
		FROM DEDUCTOR D
		INNER JOIN RESPONSIBLEPERSON RP ON D.DEDUCTORID = RP.DEDUCTORID
		INNER JOIN BRANCHDEDUCTORS   BD   ON D.DEDUCTORID=BD.DEDUCTORID 
		INNER JOIN CORRDEDUCTORF24G  CD ON CD.BRANCHID = BD.BRANCHID
		INNER JOIN CORRDDODETAILSF24G CDDO ON CDDO.BRANCHID = CD.BRANCHID
		WHERE CD.CORRECTIONSTATUS = 2
        --SET @RETURNTYPE=1
        SET @ERROR=1
	    DELETE FROM CORRDEDUCTORF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
		UPDATE CORRDEDUCTORF24G  SET CORRECTIONSTATUS = 1 WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID	AND CORRECTIONSTATUS = 2				
		---UPDATE CORRDDODETAILSF24G SET CORRECTIONSTATUS = 1 WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2			
     END		
  --END		
  --IF EXISTS(SELECT CORRECTIONSTATUS FROM CORRDDODETAILSF24G WHERE CORRECTIONSTATUS = 2 AND BRANCHID = @BRANCHID AND MONTHID = @MONTHID)
  IF EXISTS( SELECT * FROM CORRDDODETAILSF24G C1 WITH(NOLOCK) LEFT JOIN CORRDDODETAILSF24G C2 WITH(NOLOCK) ON  C1.DEDUCTORID = C2.DEDUCTORID AND C1.FORMID = C2.FORMID AND C2.CORRECTIONSTATUS=C1.CORRECTIONSTATUS
   AND C1.DEDUCTORID = C2.DEDUCTORID
   WHERE C1.BRANCHID  = @BRANCHID AND C2.CORRECTIONSTATUS = 2)
  BEGIN
  UPDATE DEDUCTOR SET 
                      DEDUCTORNAME     =  CD.DEDUCTORNAME,
					  ADDRESS1         =  RTRIM(CD.ADDRESS1),
					  ADDRESS2		   =  RTRIM(CD.ADDRESS2),
					  ADDRESS3	       =  RTRIM(CD.ADDRESS3),
					  ADDRESS4		   =  RTRIM(CD.ADDRESS4),
					  ADDRESS5	       =  RTRIM(CD.ADDRESS5),
					  STATEID		   =  CD.STATEID,
					  PINCODE		   =  CD.PINCODE,
					  GOVTADDDDOCODE   = CD.GOVTADDDDOCODE,
					  GOVTADDDDOREGNNO = CD.GOVTADDDDOREGNNO,
					  TAN              = CD.TAN,
					  EMAILADDRESS     = CD.EMAILADDRESS
					  FROM DEDUCTOR D
					  INNER JOIN BRANCHDEDUCTORS BD ON D.DEDUCTORID=BD.DEDUCTORID 
					  INNER JOIN CORRDDODETAILSF24G CD ON CD.DEDUCTORID = BD.DEDUCTORID ---AND @QUARTER = BD.QUARTER
					  WHERE CD.DEDUCTORID IN (SELECT DEDUCTORID FROM CORRDDODETAILSF24G WHERE CORRECTIONSTATUS = 2) AND CD.MONTHID = @MONTHID
			      AND CD.CORRECTIONSTATUS = 2
   UPDATE FORM24G SET  TOTALDEDUCTED = CD.TOTALTDSTCSAMTDEDUCTED, 
                       TOTALREMITTED = CD.TOTALTDSTCSAMTREMITTED 
   FROM CORRDDODETAILSF24G CD
   INNER JOIN FORM24G F24G ON F24G.DEDUCTORID = CD.DEDUCTORID
   AND F24G.FORMID = CD.FORMID
   INNER JOIN BRANCHDEDUCTORS BD ON F24G.DEDUCTORID = BD.DEDUCTORID
   WHERE CD.BRANCHID = @BRANCHID AND CD.MONTHID = @MONTHID AND CD.CORRECTIONSTATUS = 2	
   SELECT F.DEDUCTORID,F.FORMID INTO #TEMP  FROM FORM24G F WITH(NOLOCK) 
   INNER JOIN  CORRDDODETAILSF24G CF WITH(NOLOCK) ON F.BRANCHID = CF.BRANCHID AND F.MONTHID = CF.MONTHID AND F.DEDUCTORID = CF.DEDUCTORID
   AND F.FORMID = CF.FORMID 
   WHERE CF.BRANCHID = @BRANCHID AND CF.MONTHID  = @MONTHID AND CF.CORRECTIONSTATUS = 2	 
   DELETE FROM CORRDDODETAILSF24G WHERE DEDUCTORID IN (SELECT DEDUCTORID FROM #TEMP) AND BRANCHID = @BRANCHID AND  FORMID IN (SELECT FORMID FROM #TEMP) AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
   UPDATE CORRDDODETAILSF24G SET CORRECTIONSTATUS = 1 WHERE DEDUCTORID IN (SELECT DEDUCTORID FROM #TEMP) AND FORMID IN (SELECT FORMID FROM #TEMP) AND BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2
  END
  IF EXISTS(SELECT * FROM CORRDDODETAILSF24G C1 WITH(NOLOCK) LEFT JOIN CORRDDODETAILSF24G C2 WITH(NOLOCK) ON  C1.DEDUCTORID = C2.DEDUCTORID AND C1.FORMID = C2.FORMID AND C2.CORRECTIONSTATUS=C1.CORRECTIONSTATUS
   AND C1.DEDUCTORID = C2.DEDUCTORID
   WHERE C1.BRANCHID  = @BRANCHID AND C2.CORRECTIONSTATUS = 4)
    BEGIN ---DELETING THE DELETED DDO TRANSACTIONS FROM FORM24G
       SELECT F.DEDUCTORID,F.FORMID INTO #TEMP2  FROM FORM24G F WITH(NOLOCK) 
	   INNER JOIN  CORRDDODETAILSF24G CF WITH(NOLOCK) ON F.BRANCHID = CF.BRANCHID AND F.MONTHID = CF.MONTHID AND F.DEDUCTORID = CF.DEDUCTORID 
	   AND F.FORMID = CF.FORMID
       WHERE CF.BRANCHID = @BRANCHID AND   CF.MONTHID  = @MONTHID AND CF.CORRECTIONSTATUS = 4	 
       DELETE FROM FORM24G WHERE DEDUCTORID IN (SELECT DEDUCTORID FROM #TEMP2) AND FORMID IN (SELECT FORMID FROM #TEMP2)
       DELETE FROM CORRDDODETAILSF24G WHERE DEDUCTORID IN (SELECT DEDUCTORID FROM #TEMP2) AND FORMID IN (SELECT FORMID FROM #TEMP2)  	
    END
   --IF EXISTS(SELECT * FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5)
   IF EXISTS(SELECT * FROM CORRDDODETAILSF24G C1 LEFT JOIN CORRDDODETAILSF24G C2 ON  C1.DEDUCTORID = C2.DEDUCTORID AND C1.FORMID = C2.FORMID AND C2.CORRECTIONSTATUS=C1.CORRECTIONSTATUS
   AND C1.DEDUCTORID = C2.DEDUCTORID
   WHERE C1.BRANCHID  = @BRANCHID AND C2.CORRECTIONSTATUS = 5)
  BEGIN
       INSERT INTO FORM24G(BRANCHID,MONTHID,FORMID,DEDUCTORID,TOTALDEDUCTED,TOTALREMITTED,CORRTYPE,CURRENTENTRY)
       SELECT BRANCHID,MONTHID,FORMID,DEDUCTORID,TOTALTDSTCSAMTDEDUCTED,TOTALTDSTCSAMTREMITTED,'A',0 FROM CORRDDODETAILSF24G   
       WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5 
       SELECT F.DEDUCTORID,F.FORMID INTO #TEMP3  FROM FORM24G F WITH(NOLOCK) 
       INNER JOIN  CORRDDODETAILSF24G CF WITH(NOLOCK) ON F.BRANCHID = CF.BRANCHID AND F.MONTHID = CF.MONTHID AND F.DEDUCTORID = CF.DEDUCTORID
       AND F.FORMID = CF.FORMID 
       WHERE CF.BRANCHID = @BRANCHID AND CF.MONTHID  = @MONTHID AND CF.CORRECTIONSTATUS = 5	 
       UPDATE CORRDDODETAILSF24G SET CORRECTIONSTATUS = 1 WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID
                                                            AND DEDUCTORID IN (SELECT DEDUCTORID FROM #TEMP3) 
                                                            AND FORMID IN (SELECT FORMID FROM #TEMP3) 
        AND CORRECTIONSTATUS = 5
  END 
	SET @RETURNTYPE = 2
	 END
END
SELECT @RETURNTYPE
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETACKNOWLEDGEMENTDETAILSF24G')
DROP PROCEDURE USP_F24G_GETACKNOWLEDGEMENTDETAILSF24G
GO
CREATE  PROCEDURE [DBO].[USP_F24G_GETACKNOWLEDGEMENTDETAILSF24G]
	@MONTHID INT,
	@BRANCHID INT
AS
BEGIN
	SELECT ACKID,ORGNUM,ORGFILEDDATE,MONTHID,ERETURNGENDATE,ISVALID,ISNILLRETURN,RECEIPTNO,ISUPLOADED FROM ACKNOF24G WITH(NOLOCK) WHERE MONTHID=@MONTHID AND BRANCHID=@BRANCHID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETALLDEDUCTORSAUTOCOMPLETE')
DROP PROCEDURE USP_F24G_GETALLDEDUCTORSAUTOCOMPLETE
GO
CREATE PROCEDURE [USP_F24G_GETALLDEDUCTORSAUTOCOMPLETE]
@BRANCHID INT,
@PREFIXTEXT NVARCHAR(MAX),
@RECORDCOUNT INT,
@MONTHID INT
AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
DECLARE @QUARTER_MONTH INT;
SET @QUARTER_MONTH = 0;
			 IF (@MONTHID = 4 OR @MONTHID = 5 OR @MONTHID = 6)
				 SET @QUARTER_MONTH = 1
		ELSE IF (@MONTHID = 7 OR @MONTHID = 8 OR @MONTHID = 9)
				 SET @QUARTER_MONTH = 2
		ELSE IF (@MONTHID = 10 OR @MONTHID = 11 OR @MONTHID = 12)
				 SET @QUARTER_MONTH = 3
		ELSE 
				SET @QUARTER_MONTH = 4
	SET @QUERY = 'SELECT D.DEDUCTORNAME + ''-'' + D.TAN AS DEDUCTORNAME, D.DEDUCTORID,CB.BRANCHID
                  FROM 	DEDUCTOR D WITH(NOLOCK)  
				  INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)   ON D.DEDUCTORID = BD.DEDUCTORID                                                                                                                                            
				  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)    ON CB.BRANCHID  = BD.BRANCHID
			WHERE
				(CB.BRANCHID IN 
				          (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK)  
				           WHERE PARENTBRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ') OR CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ')
				           AND BD.QUARTER = '+ CAST(@QUARTER_MONTH AS VARCHAR) + '
				           AND D.DEDUCTORNAME LIKE '''+ @PREFIXTEXT+'%''';
				EXEC SP_EXECUTESQL @QUERY;
			--	PRINT @QUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETCORRBATCHHEADRDEDUCTORANDRESPONSIBLEPERSON')
DROP PROCEDURE USP_F24G_GETCORRBATCHHEADRDEDUCTORANDRESPONSIBLEPERSON
GO
CREATE PROCEDURE [USP_F24G_GETCORRBATCHHEADRDEDUCTORANDRESPONSIBLEPERSON]  
	@BRANCHID INT,
	---@QUARTER INT,
	@MONTHID INT
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
DECLARE @QUARTER INT;
     IF(@MONTHID = 4 OR @MONTHID = 5 OR @MONTHID = 6)
     SET @QUARTER = 1;
     ELSE IF (@MONTHID = 7 OR @MONTHID = 8 OR @MONTHID = 9)
     SET @QUARTER = 2;
     ELSE IF (@MONTHID = 10 OR @MONTHID = 11 OR @MONTHID = 12)
     SET @QUARTER = 3;
     ELSE IF (@MONTHID = 1 OR @MONTHID = 2 OR @MONTHID = 3)
     SET @QUARTER = 4     
	BEGIN  
	 IF EXISTS (SELECT * FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID)
        BEGIN
		SELECT 
			D.DEDUCTORID AS DEDUCTORID,D.DEDUCTORNAME AS DEDUCTORNAME,
			D.ADDRESS1 AS DADDRESS1,D.ADDRESS2 AS DADDRESS2,D.ADDRESS3 AS DADDRESS3,D.ADDRESS4 AS DADDRESS4,D.ADDRESS5 AS DADDRESS5,
			D.STATEID AS DSTATEID,D.PINCODE AS DPINCODE,D.EMAILADDRESS AS DEMAILADDRESS,D.STDCODE AS DSTDCODE,D.PHONENO AS DPHONENUMBER,
			--D.ISADDRCHANGED AS DISADDRESSCHANGED,
			D.FINANCIALYEAR,
			--D.[TAN] AS DTAN,D.PAN AS DPAN,
			--D.ISRESIDENT AS DISRESIDENT,D.ISTDSEXISTING AS DISTDSEXISTING,D.FAXNO AS DFAXNUMBER,D.RETURNTYPE AS RETURNTYPE,D.ISAOAPPROVED AS DISAOAPPROVED,
			--D.AOAPPROVALNUM AS DAOAPPROVALNUMBER,D.AODESIGNATION AS DAODESIGNATION,
			--D.DEDUCTORTYPEID AS DEDUTORTYPEID,D.GOVTADDSTATEID AS GOVTADDSTATEID,D.GOVTADDPAOCODE AS GOVTADDPAOCODE,D.GOVTADDPAOREGNNO AS GOVTADDPAOREGNNO,
			--D.GOVTADDDDOCODE AS GOVTADDDDOCODE,D.GOVTADDAIN,D.GOVTADDDDOREGNNO AS GOVTADDDDOREGNNO,
			--1 AS DEPARTMENTNAME,D.GOVTADDMINISTRY AS GOVTADDSUBMINISTRY,D.GOVTADDOTHERNAME AS GOVTADDOTHERNAME,
			--D.TANREGISTRATION,D.PERSONID AS RPID,
			D.GOVTADDSTATEID AS GOVTADDSTATEID,
			D.GOVTADDMAINMINISTRY,
			D.GOVTADDMINISTRY,
			D.GOVTADDOTHERNAME,
			D.RPNAME AS RPNAME,
			D.AIN AS GOVTADDAIN,
			D.STATUSID AS STATUSID,
			D.RPADDRESS1 AS RPADDRESS1,D.RPADDRESS2 AS RPADDRESS2,D.RPADDRESS3 AS RPADDRESS3,
			D.RPADDRESS4 AS RPADDRESS4,D.RPADDRESS5 AS RPADDRESS5, D.RPPINCODE AS RPPINCODE,
			D.RPSTATEID AS RPSTATEID,D.RPDESIGNATION AS RPDESIGNATION,D.RPEMAILADDRESS AS RPEMAILADDRESS,
			D.RPSTDCODE AS RPSTDCODE,D.RPPHONENO AS RPPHONENUMBER, D.RPMOBILENO AS RPMOBILENUMBER,
			--D.FAXNO AS RPFAXNUMBER,D.GENDER AS RPGENDER,
			--D.FATHERNAME AS RPFATHERNAME,
			BD.[QUARTER] AS [QUARTER],BD.BRANCHID AS BRANCHID,
			(SELECT COUNT(DEDUCTORID) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND ( CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4 OR CORRECTIONSTATUS = 5)) F24QCOUNT,
	--		(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) F24QTOTDED,
			(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5)
				-- - 
				--(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				--WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4)
				 +
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				) AS F24QTOTDED,
 --((SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND (CORRECTIONSTATUS = 5)) -
	    --		(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4)) F24QTOTREM,
	    (SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) - 
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4) +
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND FORMTYPE = '24Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				) AS F24QTOTREM,
			(SELECT COUNT(DEDUCTORID) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND ( CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4 OR CORRECTIONSTATUS = 5)) F26QCOUNT,
			--(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) F26QTOTDED,
			(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5)
				-- - 
				--(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				--WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4) 
				+
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				) AS F26QTOTDED,
   --  ((SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) -
			--(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4)) F26QTOTREM,
			(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) - 
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4) +
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND FORMTYPE = '26Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				) AS F26QTOTREM,
			(SELECT COUNT(DEDUCTORID) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q'AND MONTHID = @MONTHID AND ( CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4  OR CORRECTIONSTATUS = 5)) F27QCOUNT,
			--(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) F27QTOTDED,
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) 
				--- 
				--(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				--WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4)
				 +
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				) AS F27QTOTDED,		
	 --((SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5)-
	 --(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4)) F27QTOTREM,
	 (SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) - 
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4) +
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27Q' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				) AS F27QTOTREM,
			(SELECT COUNT(DEDUCTORID) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ'AND MONTHID = @MONTHID AND ( CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4  OR CORRECTIONSTATUS = 5)) F27EQCOUNT,
			--(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND (CORRECTIONSTATUS = 5)) F27EQTOTDED,
			(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) 
				--- 
				--(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				--WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4) 
				+
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				) AS F27EQTOTDED,	
			--((SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND (CORRECTIONSTATUS = 5))-
			--(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND (CORRECTIONSTATUS = 4))) F27EQTOTREM,
			(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) - 
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4) +
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND FORMTYPE = '27EQ' AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)
				) AS F27EQTOTREM,
			(SELECT COUNT(DISTINCT(G.DEDUCTORID)) FROM CORRDDODETAILSF24G G WITH(NOLOCK) 
				INNER JOIN DEDUCTOR DR ON G.DEDUCTORID = DR.DEDUCTORID 
				WHERE  G.BRANCHID = @BRANCHID AND MONTHID = @MONTHID
				AND (G.CORRECTIONSTATUS = 2 OR G.CORRECTIONSTATUS = 4 OR CORRECTIONSTATUS = 5)
				AND  DR.TAN NOT IN ('TANAPPLIED', 'TANINVALID', 'TANNOTAVBL')) DDOCOUNT,
			--((SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0)  FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) -	
			--(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0)  FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4))TOTREM,
			--0 AS TOTREM, 
			(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID  AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5) -   --AND FORMTYPE = '24Q'
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID  AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4) +  -- AND FORMTYPE = '24Q'
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID  AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2)  --AND FORMTYPE = '24Q'
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1   --AND FORMTYPE = '24Q' 
				--AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID +'-'+ TDSERIALNO IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID +'-'+ TDSERIALNO FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID  AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2) --AND FORMTYPE = '24Q'
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID  IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID  AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2) --AND FORMTYPE = '24Q'
				) AS TOTREM,		
			0 AS DDOADD, 
			0 AS DDOUPDATE, 
			0 AS DDODELETE,
			(SELECT COUNT(DDODETID) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND ( CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4 OR CORRECTIONSTATUS = 5))  TRANSACTIONSCOUNT,
			---(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND   CORRECTIONSTATUS = 5) TOTDEDUCTED,
			--500 AS TOTDEDUCTED,
			(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID  AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 5)  --AND FORMTYPE = '24Q'
				---  
				--(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				--WHERE BRANCHID = @BRANCHID  AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 4) 
				+ --AND FORMTYPE = '24Q'
				(
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID  AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2) --AND FORMTYPE = '24Q'
				)
				-
				(SELECT ISNULL(SUM(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID  AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1 -- AND FORMTYPE = '24Q'
				--AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID +'-'+ TDSERIALNO IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID +'-'+ TDSERIALNO FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2) --AND FORMTYPE = '24Q' 
				AND BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID IN (SELECT BHID + '-' + BRANCHID + '-' + MONTHID + '-' + DEDUCTORID  FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2) --AND FORMTYPE = '24Q' 
				) AS TOTDEDUCTED,
			(SELECT ISNULL(COUNT(TOTALTDSTCSAMTDEDUCTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTDEDUCTEDCOUNT,
			(SELECT ISNULL(COUNT(TOTALTDSTCSAMTREMITTED), 0) FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTREMTDAMTCOUNT
		FROM CORRDEDUCTORF24G D
			    INNER JOIN RESPONSIBLEPERSON RP ON RP.DEDUCTORID=D.DEDUCTORID 
				INNER JOIN BRANCHDEDUCTORS BD ON D.DEDUCTORID = BD.DEDUCTORID 
		WHERE BD.BRANCHID = @BRANCHID AND BD.QUARTER = @QUARTER AND D.MONTHID = @MONTHID
		--AND D.CORRECTIONSTATUS = 2
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETCORRDDODEDUCTORDETAILS')
DROP PROCEDURE USP_F24G_GETCORRDDODEDUCTORDETAILS
GO
CREATE PROCEDURE [USP_F24G_GETCORRDDODEDUCTORDETAILS]
 @STARTROW INT,
 @PAGESIZE INT,
 @BRANCHID INT,
 @MONTHID  INT
 AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
DECLARE @CORRECTIONSTATUS INT;
SET @CORRECTIONSTATUS = 1;
SET @QUERY = 
'SELECT ROWNUM = IDENTITY(INT,1,1), D.DEDUCTORNAME,D.TDSERIALNO,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,
                 D.PINCODE,D.GOVTADDDDOREGNNO,D.GOVTADDDDOCODE,D.EMAILADDRESS,D.TAN,D.FORMTYPE,D.TOTALTDSTCSAMTDEDUCTED,
                 D.TOTALTDSTCSAMTREMITTED               
                 INTO #TEMP  FROM 	CORRDDODETAILSF24G D WITH(NOLOCK)
	 LEFT JOIN CORRDEDUCTORF24G FG WITH(NOLOCK) ON D.BHID = FG.BHID
	 WHERE  D.CORRECTIONSTATUS = '+ CAST(@CORRECTIONSTATUS AS VARCHAR)+ ' AND D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND D.MONTHID  = '+ CAST(@MONTHID AS VARCHAR)  
	/* DETERMINE THE FIRST RECORD AND LAST RECORD */
	DECLARE @FIRSTREC INT, @LASTREC INT
    SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
	SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
    --PRINT @QUERY
	SET @QUERY = @QUERY + ';SELECT TOP  '+  CAST((@LASTREC-1) AS VARCHAR(10))+' * FROM #TEMP WHERE  ROWNUM >' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10));
END
	EXEC SP_EXECUTESQL @QUERY;
    -- PRINT @QUERY
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETCORRDDOTRANSACTIONDETAIL')
DROP PROCEDURE USP_F24G_GETCORRDDOTRANSACTIONDETAIL
GO
CREATE PROCEDURE [USP_F24G_GETCORRDDOTRANSACTIONDETAIL] 
 @STARTROW INT,
 @PAGESIZE INT,
 @BRANCHID INT,
 @MONTHID  INT,
 @UPDATEDITEMS VARCHAR(MAX),
 @DELETEDITEMS VARCHAR(MAX)
 AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
SET @QUERY = 'SELECT ROWNUM = IDENTITY(INT,1,1),* INTO #TEMP FROM 
            (SELECT CDDO.TDSERIALNO,CDDO.DEDUCTORID,CDDO.DEDUCTORNAME,CDDO.FORMTYPE,CDDO.ADDRESS1,CDDO.ADDRESS2,CDDO.ADDRESS3,CDDO.ADDRESS4,CDDO.ADDRESS5,CDDO.STATEID,CDDO.PINCODE,CDDO.GOVTADDDDOREGNNO,D.GOVTADDDDOCODE,CDDO.EMAILADDRESS,CDDO.TAN,CDDO.MONTHID,CDDO.TOTALTDSTCSAMTDEDUCTED,CDDO.TOTALTDSTCSAMTREMITTED,CDDO.CORRECTIONSTATUS
               FROM 	DEDUCTOR D  WITH(NOLOCK) 
               RIGHT JOIN CORRDEDUCTORF24G CD  WITH(NOLOCK) ON D.DEDUCTORID = CD.DEDUCTORID                                                                                                                                            
	           RIGHT JOIN CORRDDODETAILSF24G CDDO WITH(NOLOCK)  ON CDDO.BHID = CD.BHID
			   RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK)ON CB.BRANCHID = CD.BRANCHID
 WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND CD.MONTHID  = '+ CAST(@MONTHID AS VARCHAR)+ ' 
 AND (CDDO.CORRECTIONSTATUS = 2 OR CDDO.CORRECTIONSTATUS = 4 OR CDDO.CORRECTIONSTATUS = 5)';
   IF(@UPDATEDITEMS <> '')  
   BEGIN  
    SET @QUERY = @QUERY + ' UNION SELECT CDDO.TDSERIALNO,CDDO.DEDUCTORID,CDDO.DEDUCTORNAME,CDDO.FORMTYPE,CDDO.ADDRESS1,CDDO.ADDRESS2,CDDO.ADDRESS3,CDDO.ADDRESS4,CDDO.ADDRESS5,CDDO.STATEID,CDDO.PINCODE,CDDO.GOVTADDDDOREGNNO,D.GOVTADDDDOCODE,CDDO.EMAILADDRESS,CDDO.TAN,CDDO.MONTHID,CDDO.TOTALTDSTCSAMTDEDUCTED,CDDO.TOTALTDSTCSAMTREMITTED,2 AS CORRECTIONSTATUS
               FROM 	DEDUCTOR D WITH(NOLOCK)
               RIGHT JOIN CORRDEDUCTORF24G CD WITH(NOLOCK) ON D.DEDUCTORID = CD.DEDUCTORID                                                                                                                                            
	           RIGHT JOIN CORRDDODETAILSF24G CDDO WITH(NOLOCK) ON CDDO.BHID = CD.BHID
			   RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID
 WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND CD.MONTHID  = '+ CAST(@MONTHID AS VARCHAR)+ ' 
 AND CDDO.TDSERIALNO IN ('+CAST(@UPDATEDITEMS AS VARCHAR(MAX))+')'+'
 AND (CDDO.CORRECTIONSTATUS = 1)';   
    END				
   IF(@DELETEDITEMS <> '')  
   BEGIN  
    SET @QUERY = @QUERY + ' UNION SELECT CDDO.TDSERIALNO,CDDO.DEDUCTORID,CDDO.DEDUCTORNAME,CDDO.FORMTYPE,CDDO.ADDRESS1,CDDO.ADDRESS2,CDDO.ADDRESS3,CDDO.ADDRESS4,CDDO.ADDRESS5,CDDO.STATEID,CDDO.PINCODE,CDDO.GOVTADDDDOREGNNO,D.GOVTADDDDOCODE,CDDO.EMAILADDRESS,CDDO.TAN,CDDO.MONTHID,CDDO.TOTALTDSTCSAMTDEDUCTED,CDDO.TOTALTDSTCSAMTREMITTED,4 AS CORRECTIONSTATUS
               FROM 	DEDUCTOR D WITH(NOLOCK) 
               RIGHT JOIN CORRDEDUCTORF24G CD WITH(NOLOCK) ON D.DEDUCTORID = CD.DEDUCTORID                                                                                                                                            
	           RIGHT JOIN CORRDDODETAILSF24G CDDO WITH(NOLOCK) ON CDDO.BHID = CD.BHID
			   RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = CD.BRANCHID
 WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND CD.MONTHID  = '+ CAST(@MONTHID AS VARCHAR)+ ' 
 AND CDDO.TDSERIALNO IN ('+CAST(@DELETEDITEMS AS VARCHAR(MAX))+')'+'
 AND (CDDO.CORRECTIONSTATUS = 1)';   
    END		 
			/* DETERMINE THE FIRST RECORD AND LAST RECORD */
			DECLARE @FIRSTREC INT, @LASTREC INT
            SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
			SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
			--PRINT @QUERY
			SET @QUERY = @QUERY + ') A;SELECT TOP  '+  CAST((@LASTREC-1) AS VARCHAR(10))+' * FROM #TEMP WHERE  ROWNUM >' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10));
			--ROWNUM > @FIRSTREC AND ROWNUM < @LASTREC'	
END
	EXEC SP_EXECUTESQL @QUERY;
    --PRINT @QUERY
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETCORRDDOTRANSACTIONDETAILCOUNT')
DROP PROCEDURE USP_F24G_GETCORRDDOTRANSACTIONDETAILCOUNT
GO
CREATE PROCEDURE [USP_F24G_GETCORRDDOTRANSACTIONDETAILCOUNT] 
 --@STARTROW INT,
-- @PAGESIZE INT,
 @BRANCHID INT,
 @MONTHID  INT,
 @UPDATEDITEMS VARCHAR(MAX),
 @DELETEDITEMS VARCHAR(MAX)
 AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
   SET @QUERY = 'SELECT ROWNUM = IDENTITY(INT,1,1),* INTO #TEMP FROM 
            (SELECT CDDO.TDSERIALNO,CDDO.DEDUCTORID,CDDO.DEDUCTORNAME,CDDO.FORMTYPE,CDDO.ADDRESS1,CDDO.ADDRESS2,CDDO.ADDRESS3,CDDO.ADDRESS4,CDDO.ADDRESS5,CDDO.STATEID,CDDO.PINCODE,CDDO.GOVTADDDDOREGNNO,D.GOVTADDDDOCODE,CDDO.EMAILADDRESS,CDDO.TAN,CDDO.MONTHID,CDDO.TOTALTDSTCSAMTDEDUCTED,CDDO.TOTALTDSTCSAMTREMITTED,CDDO.CORRECTIONSTATUS
               FROM 	DEDUCTOR D  WITH(NOLOCK) 
               RIGHT JOIN CORRDEDUCTORF24G CD  WITH(NOLOCK) ON D.DEDUCTORID = CD.DEDUCTORID                                                                                                                                            
	           RIGHT JOIN CORRDDODETAILSF24G CDDO WITH(NOLOCK)  ON CDDO.BHID = CD.BHID
			   RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK)ON CB.BRANCHID = CD.BRANCHID
 WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND CD.MONTHID  = '+ CAST(@MONTHID AS VARCHAR)+ ' 
 AND (CDDO.CORRECTIONSTATUS = 2 OR CDDO.CORRECTIONSTATUS = 4 OR CDDO.CORRECTIONSTATUS = 5)';
   IF(@UPDATEDITEMS <> '')  
   BEGIN  
    SET @QUERY = @QUERY + ' UNION SELECT CDDO.TDSERIALNO,CDDO.DEDUCTORID,CDDO.DEDUCTORNAME,CDDO.FORMTYPE,CDDO.ADDRESS1,CDDO.ADDRESS2,CDDO.ADDRESS3,CDDO.ADDRESS4,CDDO.ADDRESS5,CDDO.STATEID,CDDO.PINCODE,CDDO.GOVTADDDDOREGNNO,D.GOVTADDDDOCODE,CDDO.EMAILADDRESS,CDDO.TAN,CDDO.MONTHID,CDDO.TOTALTDSTCSAMTDEDUCTED,CDDO.TOTALTDSTCSAMTREMITTED,2 AS CORRECTIONSTATUS
               FROM 	DEDUCTOR D WITH(NOLOCK) 
               RIGHT JOIN CORRDEDUCTORF24G CD WITH(NOLOCK) ON D.DEDUCTORID = CD.DEDUCTORID                                                                                                                                            
	           RIGHT JOIN CORRDDODETAILSF24G CDDO WITH(NOLOCK) ON CDDO.BHID = CD.BHID
			   RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID
 WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND CD.MONTHID  = '+ CAST(@MONTHID AS VARCHAR)+ ' 
 AND CDDO.TDSERIALNO IN ('+CAST(@UPDATEDITEMS AS VARCHAR(MAX))+')'+'
 AND (CDDO.CORRECTIONSTATUS = 1)';   
    END				
   IF(@DELETEDITEMS <> '')  
   BEGIN  
    SET @QUERY = @QUERY + ' UNION SELECT CDDO.TDSERIALNO,CDDO.DEDUCTORID,CDDO.DEDUCTORNAME,CDDO.FORMTYPE,CDDO.ADDRESS1,CDDO.ADDRESS2,CDDO.ADDRESS3,CDDO.ADDRESS4,CDDO.ADDRESS5,CDDO.STATEID,CDDO.PINCODE,CDDO.GOVTADDDDOREGNNO,D.GOVTADDDDOCODE,CDDO.EMAILADDRESS,CDDO.TAN,CDDO.MONTHID,CDDO.TOTALTDSTCSAMTDEDUCTED,CDDO.TOTALTDSTCSAMTREMITTED,4 AS CORRECTIONSTATUS
               FROM 	DEDUCTOR D WITH(NOLOCK)
               RIGHT JOIN CORRDEDUCTORF24G CD WITH(NOLOCK) ON D.DEDUCTORID = CD.DEDUCTORID                                                                                                                                            
	           RIGHT JOIN CORRDDODETAILSF24G CDDO WITH(NOLOCK) ON CDDO.BHID = CD.BHID
			   RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = CD.BRANCHID
 WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND CD.MONTHID  = '+ CAST(@MONTHID AS VARCHAR)+ ' 
 AND CDDO.TDSERIALNO IN ('+CAST(@DELETEDITEMS AS VARCHAR(MAX))+')'+'
 AND (CDDO.CORRECTIONSTATUS = 1)';   
    END		 
			/* DETERMINE THE FIRST RECORD AND LAST RECORD */
			DECLARE @FIRSTREC INT, @LASTREC INT
          --  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		--	SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
			--PRINT @QUERY
			SET @QUERY = @QUERY + ') A;SELECT COUNT (*) FROM #TEMP'-- WHERE  ROWNUM >' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10));
			--PRINT @QUERY
			--ROWNUM > @FIRSTREC AND ROWNUM < @LASTREC'	
    EXEC SP_EXECUTESQL @QUERY;  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETCORRDDOTRANSACTIONDETAILS')
DROP PROCEDURE USP_F24G_GETCORRDDOTRANSACTIONDETAILS
GO
CREATE PROCEDURE [USP_F24G_GETCORRDDOTRANSACTIONDETAILS] 
 --@STARTROW INT,
 --@PAGESIZE INT
 @BRANCHID INT,
 @MONTHID  INT
 AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
--SET @QUERY = 'SELECT D.DEDUCTORID,D.DEDUCTORNAME,D.TAN,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,D.PINCODE,
--              D.GOVTADDDDOCODE,D.GOVTADDDDOREGNNO,D.EMAILADDRESS,CD24G.BRANCHID,CD24G.MONTHID,CD24G.CORRECTIONSTATUS,
--              CD24G.TOTALTDSTCSAMTDEDUCTED,CD24G.TOTALTDSTCSAMTREMITTED,CD24G.FORMTYPE
--			  FROM DEDUCTOR D WITH(NOLOCK)
--         LEFT JOIN CORRDDODETAILSF24G CD24G WITH(NOLOCK) ON D.DEDUCTORID = CD24G.DEDUCTORID     
--		 LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = CD24G.BRANCHID
--		 WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND CD24G.MONTHID  = '+ CAST(@MONTHID AS VARCHAR) +' 
--    AND (CD24G.CORRECTIONSTATUS = 2 OR CD24G.CORRECTIONSTATUS = 4 OR CD24G.CORRECTIONSTATUS = 5 OR CD24G.CORRECTIONSTATUS = 6)'
--			EXEC SP_EXECUTESQL @QUERY;
	---PRINT @QUERY	
	SELECT D.DEDUCTORID,D.DEDUCTORNAME,D.TAN,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,D.PINCODE,
              D.GOVTADDDDOCODE,D.GOVTADDDDOREGNNO,D.EMAILADDRESS,CD24G.BRANCHID,CD24G.MONTHID,CD24G.CORRECTIONSTATUS,
              CD24G.TOTALTDSTCSAMTDEDUCTED,CD24G.TOTALTDSTCSAMTREMITTED,CD24G.FORMTYPE
              ,BHID, CD24G.BRANCHID, MONTHID, D.DEDUCTORID, CD24G.TDSERIALNO
              , ( SELECT TOTALTDSTCSAMTREMITTED FROM CORRDDODETAILSF24G WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID AND MONTHID  = @MONTHID
					AND BHID = CD24G.BHID AND BRANCHID = CD24G.BRANCHID 
					AND MONTHID = CD24G.MONTHID AND DEDUCTORID = D.DEDUCTORID --AND TDSERIALNO = CD24G.TDSERIALNO
					AND CORRECTIONSTATUS = 1
              ) FILLER8,
              ( SELECT TOTALTDSTCSAMTDEDUCTED FROM CORRDDODETAILSF24G WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND MONTHID  = @MONTHID
					AND BHID = CD24G.BHID AND BRANCHID = CD24G.BRANCHID 
					AND MONTHID = CD24G.MONTHID AND DEDUCTORID = D.DEDUCTORID --AND TDSERIALNO = CD24G.TDSERIALNO
					AND CORRECTIONSTATUS = 1
              ) FILLER11
			  FROM DEDUCTOR D WITH(NOLOCK)
         LEFT JOIN CORRDDODETAILSF24G CD24G WITH(NOLOCK) ON D.DEDUCTORID = CD24G.DEDUCTORID     
		 LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = CD24G.BRANCHID
		 WHERE CB.BRANCHID = @BRANCHID  AND CD24G.MONTHID  = @MONTHID 
    AND   (CD24G.CORRECTIONSTATUS = 2 OR CD24G.CORRECTIONSTATUS = 4 OR CD24G.CORRECTIONSTATUS = 5 OR CD24G.CORRECTIONSTATUS = 6)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETCORRTRANSACTIONDET')
DROP PROCEDURE USP_F24G_GETCORRTRANSACTIONDET
GO
CREATE PROCEDURE [USP_F24G_GETCORRTRANSACTIONDET]
 @BRANCHID INT,
 @MONTHID  INT,
 @DEDUCTORID INT,
 @TDSERIALNO SMALLINT,
 @FORMID INT
 --@CORRECTIONSTATUS INT
 AS
BEGIN
SELECT CDDO.TDSERIALNO,CDDO.DEDUCTORID,CDDO.DEDUCTORNAME,CDDO.FORMTYPE,CDDO.ADDRESS1,CDDO.ADDRESS2,CDDO.ADDRESS3,CDDO.ADDRESS4,CDDO.ADDRESS5,CDDO.STATEID,CDDO.PINCODE,CDDO.GOVTADDDDOREGNNO,D.GOVTADDDDOCODE,CDDO.EMAILADDRESS,CDDO.TAN,CDDO.MONTHID,CDDO.TOTALTDSTCSAMTDEDUCTED,CDDO.TOTALTDSTCSAMTREMITTED, CDDO.CORRECTIONSTATUS
  FROM 	DEDUCTOR D WITH(NOLOCK)
     RIGHT JOIN CORRDEDUCTORF24G CD WITH(NOLOCK) ON D.DEDUCTORID = CD.DEDUCTORID                                                                                                                                            
	 RIGHT JOIN CORRDDODETAILSF24G CDDO WITH(NOLOCK) ON CDDO.BHID = CD.BHID
	 ---RIGHT JOIN FORM24G F24G ON F24G.FORMID = CDDO.FORMID 
	 RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = CD.BRANCHID
 WHERE CB.BRANCHID   = @BRANCHID AND CD.MONTHID  = @MONTHID
   AND CDDO.DEDUCTORID = @DEDUCTORID AND CDDO.CORRECTIONSTATUS IN (SELECT MAX(CORRECTIONSTATUS) FROM CORRDDODETAILSF24G WITH(NOLOCK)
                                                                   WHERE BRANCHID   = @BRANCHID AND MONTHID = @MONTHID
																   AND DEDUCTORID = @DEDUCTORID AND  FORMID = @FORMID AND TDSERIALNO = @TDSERIALNO)  
  AND CDDO.TDSERIALNO = @TDSERIALNO;		
END
	--EXEC SP_EXECUTESQL @QUERY;
    --- PRINT @QUERY
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETDDODEDUCTEDREMITTEDDETAIL')
DROP PROCEDURE USP_F24G_GETDDODEDUCTEDREMITTEDDETAIL
GO
CREATE PROCEDURE [USP_F24G_GETDDODEDUCTEDREMITTEDDETAIL] 
 @STARTROW INT,
 @PAGESIZE INT,
 @BRANCHID INT,
 @MONTHID  INT
 AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
SET @QUERY = 'SELECT ROWNUM = IDENTITY(INT,1,1), D.DEDUCTORNAME,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,D.PINCODE,D.GOVTADDDDOREGNNO,D.GOVTADDDDOCODE,D.EMAILADDRESS,D.TAN,FG.FORMID,FG.MONTHID,FG.TOTALDEDUCTED,FG.TOTALREMITTED,FG.FORM24GID,FG.TDDATA,
CASE  WHEN CURRENTENTRY =0 THEN ''FALSE''
                         ELSE ''TRUE''
                 END AS  CURRENTENTRY        
     INTO #TEMP
              FROM 	DEDUCTOR D WITH(NOLOCK)
	          LEFT JOIN FORM24G FG WITH(NOLOCK) ON D.DEDUCTORID = FG.DEDUCTORID                                                                                                                                            
	          LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = FG.BRANCHID
			  WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND FG.MONTHID  = '+ CAST(@MONTHID AS VARCHAR) 
			---	AND FG.MONTHID = 5';
			/* DETERMINE THE FIRST RECORD AND LAST RECORD */
			DECLARE @FIRSTREC INT, @LASTREC INT
			SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
			SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
			--PRINT @QUERY
			SET @QUERY = @QUERY + ';SELECT TOP  '+  CAST((@LASTREC-1) AS VARCHAR(10))+' * FROM #TEMP WHERE  ROWNUM >' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10));
			--ROWNUM > @FIRSTREC AND ROWNUM < @LASTREC'		
END
	EXEC SP_EXECUTESQL @QUERY;
    -- PRINT @QUERY
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETDDODEDUCTEDREMITTEDDETAILCOUNT')
DROP PROCEDURE USP_F24G_GETDDODEDUCTEDREMITTEDDETAILCOUNT
GO
CREATE PROCEDURE [USP_F24G_GETDDODEDUCTEDREMITTEDDETAILCOUNT] 
(
 @BRANCHID INT,
 @MONTHID  INT
 )
AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
SET @QUERY = 'SELECT COUNT(FG.FORM24GID)
              FROM 	DEDUCTOR D  WITH(NOLOCK) 
	          LEFT JOIN FORM24G FG  WITH(NOLOCK) ON D.DEDUCTORID = FG.DEDUCTORID                                                                                                                                            
	          LEFT JOIN COMPANYBRANCH CB  WITH(NOLOCK)  ON CB.BRANCHID = FG.BRANCHID
			  WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND FG.MONTHID  = '+ CAST(@MONTHID AS VARCHAR) 
			---	AND FG.MONTHID = 5';
END
	EXEC SP_EXECUTESQL @QUERY;
--	PRINT @QUERY
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GetDDODeductionChallan')
DROP PROCEDURE USP_F24G_GetDDODeductionChallan
GO
CREATE PROCEDURE [USP_F24G_GetDDODeductionChallan]
	@MONTHID INT,
	@QUARTER INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT @MONTHID MONTHID, @BRANCHID BRANCHID, DD.FORMID, BD.DEDUCTORID, SUM(DD.TOTALDEDUCTED) DEDUCTED
		INTO #DEDLIST
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID
			INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID
		WHERE DD.BRANCHID IN 
		(
			SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID OR PARENTBRANCHID = @BRANCHID
		)
		AND MONTH(DEDUCTEDDATE) = @MONTHID
		AND BD.QUARTER = @QUARTER
		GROUP BY DD.BRANCHID, DD.FORMID, BD.DEDUCTORID
		SELECT @MONTHID MONTHID, @BRANCHID BRANCHID, CD.FORMID, BD.DEDUCTORID, SUM(CD.CHALLANTOTAL) REMITTED
		INTO #CHALIST
		FROM CHALLANDETAIL CD WITH(NOLOCK)
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CD.BRANCHID = BD.BRANCHID
			INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID
		WHERE CD.BRANCHID IN 
		(
			SELECT BRANCHID FROM COMPANYBRANCH  WITH(NOLOCK) WHERE BRANCHID = @BRANCHID OR PARENTBRANCHID = @BRANCHID
		)
		AND MONTH(CHALLANPAIDDATE) = @MONTHID
		AND BD.QUARTER = @QUARTER
		GROUP BY CD.BRANCHID, CD.FORMID, BD.DEDUCTORID
		SELECT ROW_NUMBER() OVER (ORDER BY MONTHID, BRANCHID, FORMID, DEDUCTORID) ROWID,
			MONTHID, BRANCHID, FORMID, DEDUCTORID, DEDUCTED, REMITTED 
		INTO #F24G
		FROM 
		(
			SELECT D.MONTHID, D.BRANCHID, D.FORMID, D.DEDUCTORID, D.DEDUCTED, C.REMITTED 
			FROM 
				#DEDLIST D INNER JOIN #CHALIST C
				ON D.MONTHID = C.MONTHID AND D.BRANCHID = C.BRANCHID
				AND D.FORMID = C.FORMID AND D.DEDUCTORID = C.DEDUCTORID
			UNION 
			SELECT MONTHID, BRANCHID, FORMID, DEDUCTORID, DEDUCTED, 0 
			FROM 
				#DEDLIST WHERE
				MONTHID + '-' + BRANCHID + '-' + FORMID + '-' + DEDUCTORID
				NOT IN (SELECT MONTHID + '-' + BRANCHID + '-' + FORMID + '-' + DEDUCTORID FROM #CHALIST)
			UNION
			SELECT MONTHID, BRANCHID, FORMID, DEDUCTORID, 0, REMITTED
			FROM 
				#CHALIST WHERE
				MONTHID + '-' + BRANCHID + '-' + FORMID + '-' + DEDUCTORID
				NOT IN (SELECT MONTHID + '-' + BRANCHID + '-' + FORMID + '-' + DEDUCTORID FROM #DEDLIST)
		) Q
		DECLARE @MYCOUNT INT
		DECLARE @HMONTHID INT
		DECLARE @HBRANCHID INT
		DECLARE @HFORMID INT
		DECLARE @HDEDUCTORID INT
		DECLARE @HTOTALDEDUCTED NUMERIC(13,2)
		DECLARE @HTOTALREMITTED NUMERIC(13,2)		
		SET @MYCOUNT = 0
		WHILE EXISTS (SELECT * FROM #F24G G WHERE G.ROWID > @MYCOUNT)
		BEGIN
			SET @MYCOUNT = @MYCOUNT + 1
			SELECT @HMONTHID = MONTHID, @HBRANCHID = BRANCHID,
				@HFORMID = FORMID, @HDEDUCTORID = DEDUCTORID, 
				@HTOTALDEDUCTED = DEDUCTED,	@HTOTALREMITTED = REMITTED
			FROM #F24G WHERE ROWID = @MYCOUNT
			IF EXISTS(SELECT * FROM FORM24G ORG INNER JOIN #F24G A 
				ON ORG.MONTHID = A.MONTHID AND ORG.BRANCHID = A.BRANCHID
					AND ORG.FORMID = A.FORMID AND ORG.DEDUCTORID = A.DEDUCTORID
				WHERE A.ROWID = @MYCOUNT) 
				BEGIN
					UPDATE Form24G SET TOTALDEDUCTED =  @HTOTALDEDUCTED,
									   TOTALREMITTED =  @HTOTALREMITTED
			             	WHERE  MONTHID  = @HMONTHID 
			             	AND    FORMID   = @HFORMID
			             	AND    BRANCHID = @HBRANCHID
 				END
			ELSE
				BEGIN
					INSERT INTO Form24G(MONTHID,BRANCHID,FORMID,DEDUCTORID,TOTALDEDUCTED,TOTALREMITTED)
                                VALUES (@HMONTHID,@HBRANCHID,@HFORMID,@HDEDUCTORID,@HTOTALDEDUCTED,@HTOTALREMITTED);
				END
		END
		IF OBJECT_ID('TEMPDB..#DEDLIST') IS NOT NULL
			DROP TABLE #DEDLIST
		IF OBJECT_ID('TEMPDB..#CHALIST') IS NOT NULL
			DROP TABLE #CHALIST
		IF OBJECT_ID('TEMPDB..#F24G') IS NOT NULL
			DROP TABLE #F24G
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETDDOTRANSACTIONDETAILS')
DROP PROCEDURE USP_F24G_GETDDOTRANSACTIONDETAILS
GO
CREATE PROCEDURE [USP_F24G_GETDDOTRANSACTIONDETAILS] 
 --@STARTROW INT,
 --@PAGESIZE INT
 @BRANCHID INT,
 @MONTHID  INT
 AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
SET @QUERY = 'SELECT D.DEDUCTORID,FG.BRANCHID,FG.MONTHID,D.DEDUCTORNAME,D.TAN, D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,D.PINCODE,
              D.GOVTADDDDOCODE,D.GOVTADDDDOREGNNO,D.EMAILADDRESS,FG.FORMID,FG.MONTHID,FG.TOTALDEDUCTED,FG.TOTALREMITTED,FG.FORM24GID  
              FROM 	DEDUCTOR D  WITH(NOLOCK) 
	          LEFT JOIN FORM24G FG  WITH(NOLOCK) ON D.DEDUCTORID = FG.DEDUCTORID                                                                                                                                            
	          LEFT JOIN COMPANYBRANCH CB  WITH(NOLOCK) ON CB.BRANCHID = FG.BRANCHID
			  WHERE CB.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' AND FG.MONTHID  = '+ CAST(@MONTHID AS VARCHAR) +''
			EXEC SP_EXECUTESQL @QUERY;
	---PRINT @QUERY	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETDEDCHALLANMONTHSUMMARY')
DROP PROCEDURE USP_F24G_GETDEDCHALLANMONTHSUMMARY
GO
CREATE PROCEDURE [USP_F24G_GETDEDCHALLANMONTHSUMMARY] 
@BRANCHID INT,
@ISSUPERADMIN BIT = 1
AS
BEGIN
	DECLARE @MONTH INT;
	DECLARE @DEDCOUNT INT;
	DECLARE @REMCOUNT INT;
	DECLARE @DEDUCTIONAMOUNT NUMERIC(13,2);
	DECLARE @REMITTEDAMOUNT NUMERIC(13,2);
	SET @MONTH = 1;
	WHILE(@MONTH<=12)
		BEGIN
		   DECLARE @DEDUCTION TABLE(MONTH INT,DEDCOUNT INT,DEDUCTIONAMOUNT NUMERIC(13,2),REMCOUNT INT,REMITTEDAMOUNT NUMERIC(13,2));
			SELECT @DEDCOUNT = COUNT(MONTHID),@DEDUCTIONAMOUNT = ISNULL(SUM(TOTALDEDUCTED),0),
				   @REMCOUNT = COUNT(MONTHID), @REMITTEDAMOUNT = ISNULL(SUM(TOTALREMITTED),0) 
				   FROM FORM24G WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID AND FORMID IN (1,2,3,4) AND MONTHID = @MONTH
				INSERT INTO @DEDUCTION
				SELECT @MONTH,@DEDCOUNT,@DEDUCTIONAMOUNT,
				CASE WHEN(@REMITTEDAMOUNT<=0)
				THEN
				0
				ELSE
				@REMCOUNT
				END ,
				 --@REMCOUNT,
				 @REMITTEDAMOUNT
				SET @MONTH = @MONTH+ 1;
		END
SELECT * FROM @DEDUCTION WHERE MONTH >= 4
UNION ALL
SELECT * FROM @DEDUCTION WHERE MONTH < 4 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETDEDUCTORANDRESPONSIBLEPERSON')
DROP PROCEDURE USP_F24G_GETDEDUCTORANDRESPONSIBLEPERSON
GO
CREATE PROCEDURE [USP_F24G_GETDEDUCTORANDRESPONSIBLEPERSON]
	@BRANCHID INT,
	@MONTHID INT
AS
DECLARE @QUARTER INT;
     IF(@MONTHID = 4 OR @MONTHID = 5 OR @MONTHID = 6)
     SET @QUARTER = 1;
     ELSE IF (@MONTHID = 7 OR @MONTHID = 8 OR @MONTHID = 9)
     SET @QUARTER = 2;
     ELSE IF (@MONTHID = 10 OR @MONTHID = 11 OR @MONTHID = 12)
     SET @QUARTER = 3;
     ELSE IF (@MONTHID = 1 OR @MONTHID = 2 OR @MONTHID = 3)
     SET @QUARTER = 4     
	BEGIN  
	 IF EXISTS (SELECT * FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID)
        BEGIN
		SELECT 
			D.DEDUCTORID AS DEDUCTORID,D.DEDUCTORNAME AS DEDUCTORNAME,D.ADDRESS1 AS DADDRESS1,D.ADDRESS2 AS DADDRESS2,
			D.ADDRESS3 AS DADDRESS3,D.ADDRESS4 AS DADDRESS4,D.ADDRESS5 AS DADDRESS5,
			D.STATEID AS DSTATEID,
			ISNULL(D.ISADDRCHANGED,0) AS DISADDRESSCHANGED,D.FINANCIALYEAR,D.[TAN] AS DTAN,D.PAN AS DPAN,
			D.PINCODE AS DPINCODE,D.EMAILADDRESS AS DEMAILADDRESS,D.STDCODE AS DSTDCODE,D.PHONENO AS DPHONENUMBER,
			D.ISRESIDENT AS DISRESIDENT,D.ISTDSEXISTING AS DISTDSEXISTING,D.FAXNO AS DFAXNUMBER,D.RETURNTYPE AS RETURNTYPE,D.ISAOAPPROVED AS DISAOAPPROVED,
			D.AOAPPROVALNUM AS DAOAPPROVALNUMBER,D.AODESIGNATION AS DAODESIGNATION,D.STATUSID AS STATUSID,
			D.DEDUCTORTYPEID AS DEDUTORTYPEID,D.GOVTADDSTATEID AS GOVTADDSTATEID,D.GOVTADDPAOCODE AS GOVTADDPAOCODE,D.GOVTADDPAOREGNNO AS GOVTADDPAOREGNNO,
			D.GOVTADDDDOCODE AS GOVTADDDDOCODE,D.GOVTADDAIN,D.GOVTADDDDOREGNNO AS GOVTADDDDOREGNNO,
			1 AS DEPARTMENTNAME,D.GOVTADDMAINMINISTRY AS GOVTADDMAINMINISTRY,D.GOVTADDMINISTRY AS GOVTADDSUBMINISTRY,D.GOVTADDOTHERNAME AS GOVTADDOTHERNAME,
			D.TANREGISTRATION,RP.PERSONID AS RPID,RP.PERSONNAME AS RPNAME,
			RP.ADDRESS1 AS RPADDRESS1,RP.ADDRESS2 AS RPADDRESS2,RP.ADDRESS3 AS RPADDRESS3,
			RP.ADDRESS4 AS RPADDRESS4,RP.ADDRESS5 AS RPADDRESS5,RP.PINCODE AS RPPINCODE,
			RP.STATEID AS RPSTATEID,
			ISNULL(RP.ISADDRCHANGED,0) AS RPISADDRESSCHANGED,
			RP.DESIGNATION AS RPDESIGNATION,RP.EMAILADDRESS AS RPEMAILADDRESS,
			RP.STDCODE AS RPSTDCODE,RP.PHONENO AS RPPHONENUMBER, RP.MOBILENO AS RPMOBILENUMBER,RP.FAXNO AS RPFAXNUMBER,RP.GENDER AS RPGENDER,
			RP.FATHERNAME AS RPFATHERNAME,BD.[QUARTER] AS [QUARTER],BD.BRANCHID AS BRANCHID,
			(SELECT COUNT(DEDUCTORID) FROM FORM24G  WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND MONTHID = @MONTHID) F24QCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G  WITH(NOLOCK)WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND MONTHID = @MONTHID) F24QTOTDED,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G  WITH(NOLOCK)WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND MONTHID = @MONTHID) F24QTOTREM,
			(SELECT COUNT(DEDUCTORID) FROM FORM24G  WITH(NOLOCK)WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND MONTHID = @MONTHID) F26QCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G  WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND MONTHID = @MONTHID) F26QTOTDED,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G  WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND MONTHID = @MONTHID) F26QTOTREM,
			(SELECT COUNT(DEDUCTORID) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 3 AND MONTHID = @MONTHID) F27QCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 3 AND MONTHID = @MONTHID) F27QTOTDED,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 3 AND MONTHID = @MONTHID) F27QTOTREM,
			(SELECT COUNT(DEDUCTORID) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 4 AND MONTHID = @MONTHID) F27EQCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 4 AND MONTHID = @MONTHID) F27EQTOTDED,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 4 AND MONTHID = @MONTHID) F27EQTOTREM,
			(SELECT COUNT(DISTINCT(G.DEDUCTORID)) FROM FORM24G G  WITH(NOLOCK) 
				INNER JOIN DEDUCTOR DR ON G.DEDUCTORID = DR.DEDUCTORID 
				WHERE  G.BRANCHID = @BRANCHID AND G.MONTHID = @MONTHID
				AND  DR.TAN NOT IN ('TANAPPLIED', 'TANINVALID', 'TANNOTAVBL')) DDOCOUNT,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTREM,
			0 AS DDOADD, 0 AS DDOUPDATE, 0 AS DDODELETE,
			(SELECT COUNT(FORM24GID) FROM FORM24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID)  TRANSACTIONSCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTDEDUCTED,
			(SELECT ISNULL(COUNT(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTDEDUCTEDCOUNT,
			(SELECT ISNULL(COUNT(TOTALREMITTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTREMTDAMTCOUNT
		FROM DEDUCTOR D WITH(NOLOCK)
				INNER JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON D.DEDUCTORID=RP.DEDUCTORID 
				INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID 
		WHERE BD.BRANCHID = @BRANCHID AND BD.QUARTER = @QUARTER
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETDEDUCTORANDRESPONSIBLEPERSON_REFERENCE')
DROP PROCEDURE USP_F24G_GETDEDUCTORANDRESPONSIBLEPERSON_REFERENCE
GO
CREATE PROCEDURE [USP_F24G_GETDEDUCTORANDRESPONSIBLEPERSON_REFERENCE]  
	@BRANCHID INT,
	@MONTHID INT
AS
    DECLARE @QUARTER INT;
     IF(@MONTHID = 4 OR @MONTHID = 5 OR @MONTHID = 6)
     SET @QUARTER = 1;
     ELSE IF (@MONTHID = 7 OR @MONTHID = 8 OR @MONTHID = 9)
     SET @QUARTER = 2;
     ELSE IF (@MONTHID = 10 OR @MONTHID = 11 OR @MONTHID = 12)
     SET @QUARTER = 3;
     ELSE IF (@MONTHID = 1 OR @MONTHID = 2 OR @MONTHID = 3)
     SET @QUARTER = 4     
	BEGIN  
	 IF EXISTS (SELECT * FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID)
        BEGIN
		SELECT 
			D.DEDUCTORID AS DEDUCTORID,D.DEDUCTORNAME AS DEDUCTORNAME,D.ADDRESS1 AS DADDRESS1,D.ADDRESS2 AS DADDRESS2,
			D.ADDRESS3 AS DADDRESS3,D.ADDRESS4 AS DADDRESS4,D.ADDRESS5 AS DADDRESS5,
			D.STATEID AS DSTATEID,D.ISADDRCHANGED AS DISADDRESSCHANGED,D.FINANCIALYEAR,D.[TAN] AS DTAN,D.PAN AS DPAN,
			D.PINCODE AS DPINCODE,D.EMAILADDRESS AS DEMAILADDRESS,D.STDCODE AS DSTDCODE,D.PHONENO AS DPHONENUMBER,
			D.ISRESIDENT AS DISRESIDENT,D.ISTDSEXISTING AS DISTDSEXISTING,D.FAXNO AS DFAXNUMBER,D.RETURNTYPE AS RETURNTYPE,D.ISAOAPPROVED AS DISAOAPPROVED,
			D.AOAPPROVALNUM AS DAOAPPROVALNUMBER,D.AODESIGNATION AS DAODESIGNATION,D.STATUSID AS STATUSID,
			D.DEDUCTORTYPEID AS DEDUTORTYPEID,D.GOVTADDSTATEID AS GOVTADDSTATEID,D.GOVTADDPAOCODE AS GOVTADDPAOCODE,D.GOVTADDPAOREGNNO AS GOVTADDPAOREGNNO,
			D.GOVTADDDDOCODE AS GOVTADDDDOCODE,D.GOVTADDAIN,D.GOVTADDDDOREGNNO AS GOVTADDDDOREGNNO,
			1 AS DEPARTMENTNAME,D.GOVTADDMINISTRY AS GOVTADDSUBMINISTRY,D.GOVTADDOTHERNAME AS GOVTADDOTHERNAME,
			D.TANREGISTRATION,RP.PERSONID AS RPID,RP.PERSONNAME AS RPNAME,
			RP.ADDRESS1 AS RPADDRESS1,RP.ADDRESS2 AS RPADDRESS2,RP.ADDRESS3 AS RPADDRESS3,
			RP.ADDRESS4 AS RPADDRESS4,RP.ADDRESS5 AS RPADDRESS5,RP.PINCODE AS RPPINCODE,
			RP.STATEID AS RPSTATEID,RP.ISADDRCHANGED AS RPISADDRESSCHANGED,RP.DESIGNATION AS RPDESIGNATION,RP.EMAILADDRESS AS RPEMAILADDRESS,
			RP.STDCODE AS RPSTDCODE,RP.PHONENO AS RPPHONENUMBER, RP.MOBILENO AS RPMOBILENUMBER,RP.FAXNO AS RPFAXNUMBER,RP.GENDER AS RPGENDER,
			RP.FATHERNAME AS RPFATHERNAME,BD.[QUARTER] AS [QUARTER],BD.BRANCHID AS BRANCHID,
			(SELECT COUNT(DEDUCTORID) FROM FORM24G WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND MONTHID = @MONTHID) F24QCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND MONTHID = @MONTHID) F24QTOTDED,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND MONTHID = @MONTHID) F24QTOTREM,
			(SELECT COUNT(DEDUCTORID) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND MONTHID = @MONTHID) F26QCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND MONTHID = @MONTHID) F26QTOTDED,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND MONTHID = @MONTHID) F26QTOTREM,
			(SELECT COUNT(DEDUCTORID) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 3 AND MONTHID = @MONTHID) F27QCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 3 AND MONTHID = @MONTHID) F27QTOTDED,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 3 AND MONTHID = @MONTHID) F27QTOTREM,
			(SELECT COUNT(DEDUCTORID) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 4 AND MONTHID = @MONTHID) F27EQCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 4 AND MONTHID = @MONTHID) F27EQTOTDED,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 4 AND MONTHID = @MONTHID) F27EQTOTREM,
			(SELECT COUNT(G.DEDUCTORID) FROM FORM24G G WITH(NOLOCK) 
				INNER JOIN DEDUCTOR DR WITH(NOLOCK) ON G.DEDUCTORID = DR.DEDUCTORID 
				WHERE  G.BRANCHID = @BRANCHID
				AND  DR.TAN NOT IN ('TANAPPLIED', 'TANINVALID', 'TANNOTAVBL')) DDOCOUNT,
			(SELECT ISNULL(SUM(TOTALREMITTED), 0) FROM FORM24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTREM,
			0 AS DDOADD, 0 AS DDOUPDATE, 0 AS DDODELETE,
			(SELECT COUNT(FORM24GID) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID)  TRANSACTIONSCOUNT,
			(SELECT ISNULL(SUM(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTDEDUCTED,
			(SELECT ISNULL(COUNT(TOTALDEDUCTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTDEDUCTEDCOUNT,
			(SELECT ISNULL(COUNT(TOTALREMITTED), 0) FROM FORM24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID) TOTREMTDAMTCOUNT
		FROM DEDUCTOR D WITH(NOLOCK)
				INNER JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON D.DEDUCTORID=RP.DEDUCTORID 
				INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID 
		WHERE BD.BRANCHID = @BRANCHID AND BD.QUARTER = @QUARTER
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETDEDUCTORDETAILFOR24G')
DROP PROCEDURE USP_F24G_GETDEDUCTORDETAILFOR24G
GO
CREATE PROCEDURE [USP_F24G_GETDEDUCTORDETAILFOR24G] 
@QUARTER INT,        
@BRANCHID INT               
AS                                        
 BEGIN             
SELECT D.TAN,D.DEDUCTORNAME,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,D.DEDUCTORID,CB.BRANCHID      
FROM DEDUCTOR D WITH(NOLOCK)         
INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID          
INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON BD.BRANCHID = CB. BRANCHID        
WHERE BD.QUARTER = @QUARTER AND (CB.PARENTBRANCHID = @BRANCHID OR CB.BRANCHID = @BRANCHID)                                 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETEXISTINGBRANCHID24G')
DROP PROCEDURE USP_F24G_GETEXISTINGBRANCHID24G
GO
CREATE PROCEDURE [USP_F24G_GETEXISTINGBRANCHID24G]       
  @FINANCIALYEAR INT,  
  @GOVTADDAIN VARCHAR(10) = NULL,  
  @QUARTER INT  
  AS  
  BEGIN  
   DECLARE @BRANCHID INT;  
   SET @BRANCHID = -1;  
   IF EXISTS(SELECT BD.BRANCHID FROM DEDUCTOR D WITH(NOLOCK) INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)
   ON D.DEDUCTORID = BD.DEDUCTORID  
      WHERE GOVTADDAIN = @GOVTADDAIN AND BD.QUARTER=@QUARTER AND FINANCIALYEAR = @FINANCIALYEAR)  
    BEGIN  
       SELECT @BRANCHID = BD.BRANCHID FROM DEDUCTOR D WITH(NOLOCK) 
       INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID  
       WHERE GOVTADDAIN = @GOVTADDAIN AND BD.QUARTER=@QUARTER AND FINANCIALYEAR = @FINANCIALYEAR  
    END  
   SELECT @BRANCHID  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETF24GACKNOWLEDGEMENTNOFORCORR')
DROP PROCEDURE USP_F24G_GETF24GACKNOWLEDGEMENTNOFORCORR
GO
CREATE PROCEDURE [USP_F24G_GETF24GACKNOWLEDGEMENTNOFORCORR]
				@BRANCHID INT,
				@MONTHID SMALLINT
AS
BEGIN
 SELECT ACKID,BRANCHID,MONTHID,ORGNUM,ORGFILEDDATE,ISVALID,ISNULL(ISUPLOADED,0) AS ISUPLOADED
   FROM ACKNOF24G WITH(NOLOCK) 
  WHERE BRANCHID=@BRANCHID AND MONTHID = @MONTHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETF24GC1YSTATEMENT')
DROP PROCEDURE USP_F24G_GETF24GC1YSTATEMENT
GO
CREATE PROCEDURE [USP_F24G_GETF24GC1YSTATEMENT]
				@BRANCHID INT,
				@MONTHID SMALLINT
AS
BEGIN
		SELECT DEDUCTORID AS SERIALNO,'DEDUTOR' AS TRANSACTIONTYPE,CORRECTIONSTATUS AS STATUS FROM CORRDEDUCTORF24G  WITH(NOLOCK)
		WHERE BRANCHID=@BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS <> 1		
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETF24GCORRDEDUCTORDETAILS')
DROP PROCEDURE USP_F24G_GETF24GCORRDEDUCTORDETAILS
GO
CREATE PROCEDURE [USP_F24G_GETF24GCORRDEDUCTORDETAILS]
	@BRANCHID INT,
	@MONTHID INT
AS
	BEGIN
		SELECT  CD.BRANCHID,CD.MONTHID,CD.DEDUCTORID,CD.DEDUCTORNAME,CD.RECORDTYPE,CD.TRANSACTIONTYPE,CD.AIN,CD.LASTAIN,CD.ADDRESS1,CD.ADDRESS2
           ,CD.ADDRESS3,CD.ADDRESS4,CD.ADDRESS5,CD.STATEID,CD.STDCODE,CD.PHONENO,CD.EMAILADDRESS,CD.RPNAME,CD.RPDESIGNATION,CD.FINANCIALYEAR
           ,CD.LASTFINANCIALYEAR,CD.STATUSID,CD.LASTAOCATEGORY,CD.FILLER1,CD.FILLER2,CD.FILLER3,CD.FILLER4,CD.NUMBEROFTRANSACTIONSCOUNT
           ,CD.TOTALAMOUNTOFTAXDEDUCTED,CD.ORIGINALRRRNO,CD.PREVIOUSRRRNO,RRRNO,CD.RRRDATE,CD.MONTHOFTRANSFERVOUCHER,CD.RPADDRESS1
           ,CD.RPADDRESS2,CD.RPADDRESS3,CD.RPADDRESS4,RPADDRESS5,CD.RPSTATEID,RPPINCODE,CD.RPSTDCODE
           ,CD.RPPHONENO,CD.RPEMAILADDRESS,CD.RPMOBILENO,CD.FILLER5,CD.FORM24QDDOTRANSACTIONSCOUNT,CD.TOTTAXDEDUCTDORCOLLECTDAMTFORM24Q
           ,CD.TOTTAXREMITTEDAMTFORM24Q,CD.FORM26QDDOTRANSACTIONSCOUNT,CD.TOTTAXDEDUCTDORCOLLECTDAMTFORM26Q,CD.TOTTAXREMITTEDAMTFORM26Q
           ,CD.FORM27QDDOTRANSACTIONSCOUNT,CD.TOTTAXDEDUCTDORCOLLECTDAMTFORM27Q,CD.TOTTAXREMITTEDAMTFORM27Q,CD.FORM27EQDDOTRANSACTIONSCOUNT
           ,CD.TOTTAXDEDUCTDORCOLLECTDAMTFORM27EQ,CD.TOTTAXREMITTEDAMTFORM27EQ,CD.PAOREGISTRATIONNUMBER
           ,CD.COUNTOFDISTINCTDDOTAN,CD.TOTALAMOUNTOFTAXREMITTED,CD.COUNTOFDDORECORDSADDED,CD.COUNTOFDDORECORDSUPDATED
           ,CD.COUNTOFDDORECOREDDELETED,CD.RECEIPTNO,CD.CORRECTIONSTATUS,CD.PINCODE,CD.GOVTADDSTATEID,CD.RPNAME,
            CD.RPDESIGNATION,CD.RPADDRESS1,CD.RPADDRESS2,CD.RPADDRESS3,CD.RPADDRESS4,CD.RPADDRESS5,CD.RPSTATEID,CD.RPPINCODE,
            CD.RPSTDCODE,CD.RPPHONENO,CD.RPEMAILADDRESS,CD.RPMOBILENO,CD.GOVTADDMAINMINISTRY,CD.GOVTADDMINISTRY,CD.GOVTADDOTHERNAME
		   FROM	CORRDEDUCTORF24G CD WITH(NOLOCK) 
	    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CD.BRANCHID = CB.BRANCHID
		   WHERE CD.BRANCHID = @BRANCHID
		     AND CD.MONTHID  = @MONTHID 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETF24GCORRECTIONDETAIL')
DROP PROCEDURE USP_F24G_GETF24GCORRECTIONDETAIL
GO
CREATE PROCEDURE [USP_F24G_GETF24GCORRECTIONDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS                  
	BEGIN                  
		DELETE FROM ACKNOREV WHERE ACKID =(SELECT ACKID FROM ACKNO WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER) AND REVISENUMBER IS NULL
		SELECT TOP 1 A.ERETURNGENDATE AS FILECREATIONDATE,
			A.ORGNUM AS ORIGINALRRNO,
            ISNULL(AR.REVNUM,A.ORGNUM) AS REVISERRNO, D.TAN,
            ISNULL(CD.FILEDDATE,0) AS FILEDDATE                   
		FROM ACKNO A  WITH(NOLOCK)                   
		LEFT JOIN ACKNOREV AR WITH(NOLOCK) ON AR.ACKID = A.ACKID
		INNER JOIN CORRDEDUCTOR D WITH(NOLOCK) ON  D.BRANCHID = A.BRANCHID AND D.FORMID = A.FORMID AND D.QUARTER = A.QUARTER 
		INNER JOIN CORRECTIONDETAILS CD WITH(NOLOCK) ON CD.BRANCHID = D.BRANCHID AND CD.FORMID = D.FORMID AND CD.QUARTER = D.QUARTER
		WHERE A.BRANCHID = @BRANCHID
			AND A.FORMID = @FORMID
			AND A.QUARTER = @QUARTER
		ORDER BY ACKNOREVID DESC    
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETF24GCORRECTIONDETAILS')
DROP PROCEDURE USP_F24G_GETF24GCORRECTIONDETAILS
GO
-------------------END OF USP_F24G_GETF24GCORRECTIONDETAIL
-------------------START OF USP_F24G_GETF24GCORRECTIONDETAILS
CREATE PROCEDURE [USP_F24G_GETF24GCORRECTIONDETAILS]
				@BRANCHID INT,
				@MONTHID SMALLINT
AS
BEGIN
	SELECT TOP 1 BRANCHID,MONTHID,ISNULL(REVISENUMBER,0) AS REVISENUMBER,
				 ISVALIDCORRERETURN,ISFINALUPDATE,ISNULL(ISCANCELLED,0) AS ISCANCELLED,FILEDDATE
	  FROM CORRECTIONDETAILSF24G WITH(NOLOCK) 
	 WHERE BRANCHID = @BRANCHID
	   AND MONTHID  = @MONTHID	   
	  -- AND CORRDETID IN (SELECT MIN(CORRDETID) FROM CORRECTIONDETAILSF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID)
  ORDER BY REVISENUMBER DESC	 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETF24GDEDUCTORCHANGESCOUNT')
DROP PROCEDURE USP_F24G_GETF24GDEDUCTORCHANGESCOUNT
GO
CREATE PROCEDURE [USP_F24G_GETF24GDEDUCTORCHANGESCOUNT]
	@BRANCHID INT,
	@MONTHID INT
AS
	BEGIN
		SELECT COUNT(DEDUCTORID) 
		FROM CORRDEDUCTORF24G WITH(NOLOCK)   
		WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETF24GPREVIOUSACKNOWLEGEMENTNUMBER')
DROP PROCEDURE USP_F24G_GETF24GPREVIOUSACKNOWLEGEMENTNUMBER
GO
CREATE PROCEDURE [USP_F24G_GETF24GPREVIOUSACKNOWLEGEMENTNUMBER]
					@BRANCHID INT,
					@MONTHID SMALLINT,
					@REVISENUMBER INT
AS
BEGIN
DECLARE @ACKID INT
SELECT @ACKID=ACKID FROM ACKNOF24G WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND MONTHID = @MONTHID
SELECT ACKNOREVID,REVNUM,REVFILEDDATE,ACKID,REVISENUMBER FROM ACKNOREVF24G WITH(NOLOCK) WHERE ACKID=@ACKID AND REVISENUMBER=@REVISENUMBER-1 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETFORM24GDDODEDUCTIONDETAILS')
DROP PROCEDURE USP_F24G_GETFORM24GDDODEDUCTIONDETAILS
GO
CREATE PROCEDURE [USP_F24G_GETFORM24GDDODEDUCTIONDETAILS]
(
 @FORM24GID NUMERIC(13,2)
)	
AS
BEGIN
SELECT D.DEDUCTORID,D.DEDUCTORNAME,D.TAN,D.DEDUCTORNAME,FG.BRANCHID,FG.FORMID,FG.MONTHID,FG.TOTALDEDUCTED,FG.TOTALREMITTED,FG.FORM24GID
FROM   DEDUCTOR D WITH(NOLOCK) 
       LEFT JOIN FORM24G FG WITH(NOLOCK) ON D.DEDUCTORID = FG.DEDUCTORID                                                                                                                                            
       LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = FG.BRANCHID
WHERE  FG.FORM24GID  =  @FORM24GID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETFORM24GDETAILS')
DROP PROCEDURE USP_F24G_GETFORM24GDETAILS
GO
CREATE PROCEDURE [USP_F24G_GETFORM24GDETAILS]
	@MONTHID INT,
	@BRANCHID INT
AS                                    
	BEGIN         
		SELECT G.MONTHID, G.BRANCHID, G.FORMID, G.DEDUCTORID, TAN, PARENTBRANCHID,
			DEDUCTORNAME, FORM24GID 
		FROM FORM24G G WITH(NOLOCK)    
		INNER JOIN DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = G.DEDUCTORID    
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = G.BRANCHID    
		WHERE MONTHID = @MONTHID AND G.BRANCHID = @BRANCHID  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETTRANSACTIONDETAILSSTATEMENT')
DROP PROCEDURE USP_F24G_GETTRANSACTIONDETAILSSTATEMENT
GO
CREATE PROCEDURE [USP_F24G_GETTRANSACTIONDETAILSSTATEMENT]
				@BRANCHID INT,
				@MONTHID INT
AS
BEGIN
	SELECT CD.DEDUCTORID AS SERIALNO,'DEDUCTOR' AS TRANSACTIONTYPE,CD.CORRECTIONSTATUS AS STATUS
	  FROM CORRDEDUCTORF24G CD WITH(NOLOCK) LEFT JOIN  FORM24G F24G ON F24G.MONTHID = CD.MONTHID
			   LEFT JOIN  DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = CD.DEDUCTORID
			   WHERE CD.BRANCHID = @BRANCHID AND CD.MONTHID = @MONTHID AND CD.CORRECTIONSTATUS IN(2)
UNION 
	SELECT DISTINCT CDDO.TDSERIALNO AS SERIALNO,'TRANSACTIONDETAIL' AS TRANSACTIONTYPE,CDDO.CORRECTIONSTATUS AS STATUS
	  FROM CORRDDODETAILSF24G CDDO WITH(NOLOCK)
			   RIGHT JOIN  FORM24G F24G WITH(NOLOCK) ON F24G.MONTHID = CDDO.MONTHID
			   RIGHT JOIN  DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = CDDO.DEDUCTORID
			   WHERE CDDO.BRANCHID = @BRANCHID AND CDDO.MONTHID = @MONTHID AND CDDO.CORRECTIONSTATUS IN (2,4,5)
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_GETUPDATEDDDODETAILSSLNOS')
DROP PROCEDURE USP_F24G_GETUPDATEDDDODETAILSSLNOS
GO
CREATE PROCEDURE [USP_F24G_GETUPDATEDDDODETAILSSLNOS]
	@BRANCHID INT,
	@MONTHID INT
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @DEDUCTIONSERIALNOTABLE TABLE(ID INT IDENTITY(1,1),TDSERIALNO INT)
		SET @SQLQUERY = 'SELECT TDSERIALNO FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND MONTHID = ' + CAST(@MONTHID AS VARCHAR) + ' AND (CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4 OR CORRECTIONSTATUS = 5)'
		INSERT INTO @DEDUCTIONSERIALNOTABLE EXECUTE SP_EXECUTESQL @SQLQUERY
		DECLARE @DEDSLNOS VARCHAR(MAX);
		SET @DEDSLNOS = '';
		SELECT @DEDSLNOS = @DEDSLNOS + CAST(TDSERIALNO AS VARCHAR) + ',' FROM @DEDUCTIONSERIALNOTABLE ORDER BY TDSERIALNO;
		IF LEN(@DEDSLNOS )>0
			SELECT @DEDSLNOS = LEFT(@DEDSLNOS, LEN(@DEDSLNOS) - 1);
		ELSE
			SELECT @DEDSLNOS = '';
		SELECT @DEDSLNOS AS DEDUCTIONSLNOS;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_ISERETURNGENERATED')
DROP PROCEDURE USP_F24G_ISERETURNGENERATED
GO
CREATE PROCEDURE [USP_F24G_ISERETURNGENERATED] 
	@BRANCHID INT,
	@MONTHID INT
AS
	BEGIN
		SELECT COUNT(ACKID) ACKID 
		FROM   ACKNOF24G WITH(NOLOCK) 
	--	WHERE  BRANCHID = @BRANCHID AND MONTHID = @MONTHID  AND ISVALID = 1 AND LEN(ORGNUM) = 15 AND LEN(RECEIPTNO) = 8;
	WHERE  BRANCHID = @BRANCHID AND MONTHID = @MONTHID  AND (ISUPLOADED = 1 OR LEN(ORGNUM) = 15);
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_REMOVECORRTRANSACTIONDETAIL')
DROP PROCEDURE USP_F24G_REMOVECORRTRANSACTIONDETAIL
GO
CREATE PROCEDURE [USP_F24G_REMOVECORRTRANSACTIONDETAIL] 
	@BRANCHID INT,
	@MONTHID INT,
	@TDSERIALNO INT,
	@DEDUCTORID INT,
	@CORRECTIONSTATUS SMALLINT,
	@FORMID INT
AS
	BEGIN
		IF(@CORRECTIONSTATUS = 4)
			BEGIN
				IF NOT EXISTS(SELECT * FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND DEDUCTORID = @DEDUCTORID AND CORRECTIONSTATUS = 5 AND FORMID = @FORMID)
					BEGIN
						IF  EXISTS(SELECT * FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND DEDUCTORID = @DEDUCTORID AND CORRECTIONSTATUS = @CORRECTIONSTATUS AND FORMID = @FORMID)	
							BEGIN
								DELETE FROM CORRDDODETAILSF24G 
								WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND TDSERIALNO = @TDSERIALNO AND DEDUCTORID = @DEDUCTORID AND CORRECTIONSTATUS = @CORRECTIONSTATUS AND FORMID = @FORMID;
								SELECT 1;   
							END
						ELSE
							BEGIN				
								SELECT -1;
							END				
					END
				ELSE
					BEGIN
						SELECT 2
					END	   
			END	 
		IF(@CORRECTIONSTATUS = 2 OR @CORRECTIONSTATUS = 5)
			BEGIN	  
			IF EXISTS(SELECT * FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND DEDUCTORID = @DEDUCTORID AND CORRECTIONSTATUS = @CORRECTIONSTATUS AND FORMID = @FORMID)
				BEGIN
					DELETE FROM CORRDDODETAILSF24G 
					WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND TDSERIALNO = @TDSERIALNO AND DEDUCTORID = @DEDUCTORID AND CORRECTIONSTATUS = @CORRECTIONSTATUS AND FORMID = @FORMID;
					SELECT 1;
				END	
			ELSE
				BEGIN
					SELECT -1;
	 			END	
		END	    	 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEACKNOWLEDGEMENTDETAILF24G')
DROP PROCEDURE USP_F24G_SAVEACKNOWLEDGEMENTDETAILF24G
GO
CREATE PROCEDURE [USP_F24G_SAVEACKNOWLEDGEMENTDETAILF24G]
	@ACKID INT,
	@BRANCHID INT,
	@MONTHID  INT,
	@RECEIPTNO VARCHAR(8) = NULL,
	@ORGNUM VARCHAR(15) = NULL,
	@ORGFILEDDATE SMALLDATETIME = NULL,
	@ERETURNGENDATE SMALLDATETIME = NULL,
	@ISVALID BIT = NULL,
	@ISNILLRETURN BIT = NULL
AS
	BEGIN	   
		IF (@ACKID = -1)
			BEGIN
				IF EXISTS(SELECT ACKID FROM ACKNOF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID)
					BEGIN
						UPDATE ACKNOF24G
						SET    ORGNUM = @ORGNUM,ORGFILEDDATE = @ORGFILEDDATE,ERETURNGENDATE = @ERETURNGENDATE,ISVALID = @ISVALID,
							   ISNILLRETURN = @ISNILLRETURN,RECEIPTNO = @RECEIPTNO
						WHERE  BRANCHID = @BRANCHID AND MONTHID = @MONTHID;
					END
				ELSE
					BEGIN
						INSERT INTO ACKNOF24G(BRANCHID,[MONTHID],ORGNUM,ORGFILEDDATE,ERETURNGENDATE,ISVALID,ISNILLRETURN,RECEIPTNO) 
						VALUES (@BRANCHID,@MONTHID,@ORGNUM,@ORGFILEDDATE,@ERETURNGENDATE,@ISVALID,@ISNILLRETURN,@RECEIPTNO);
						SET @ACKID = SCOPE_IDENTITY();
					END
			END
		ELSE
			BEGIN
				UPDATE ACKNOF24G 
				SET    ORGNUM = @ORGNUM,ORGFILEDDATE = @ORGFILEDDATE,RECEIPTNO = @RECEIPTNO
				WHERE  BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND ACKID = @ACKID;
			END
		SELECT @ACKID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVECOMPANYBRANCH24G')
DROP PROCEDURE USP_F24G_SAVECOMPANYBRANCH24G
GO
CREATE PROCEDURE [USP_F24G_SAVECOMPANYBRANCH24G]      
 @BRANCHID INT,      
 @PARENTBRANCHID INT,      
 @BRANCHNAME NVARCHAR(100),      
 @BRANCHCODE NVARCHAR(10),  
 @ISZORO BIT=NULL,  
 @EXCLUDECHALLANPAY BIT=NULL ,
 @EMAILADDRESS VARCHAR(100) = NULL    
AS      
BEGIN      
 IF(@PARENTBRANCHID = -1)      
  BEGIN      
   SET @PARENTBRANCHID = 0;      
  END      
 DECLARE @BASEID INT;      
 DECLARE @PARENTBASEID VARCHAR(50);      
 IF(@BRANCHNAME = 'ADMIN' AND (SELECT COUNT(BRANCHID) FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHNAME = @BRANCHNAME AND BRANCHID <> @BRANCHID)>0)      
  BEGIN      
   SET @BRANCHID = -4;      
  END      
 ELSE IF((SELECT COUNT(BRANCHCODE) FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE=@BRANCHCODE AND BRANCHID <> @BRANCHID) > 0)      
  BEGIN      
   SET @BRANCHID = -1;      
  END      
 ELSE      
  BEGIN      
   IF @BRANCHID = -1      
    BEGIN      
     SELECT @BASEID = ISNULL(MAX(BASEID),0) + 1 FROM COMPANYBRANCH;      
     SET  @PARENTBASEID = DBO.UDF_TDS_GETFORMATEDPARENTBASEID(@BASEID);      
     IF(@PARENTBRANCHID <> 0)      
      BEGIN      
       SELECT  @PARENTBASEID = PARENTBASEID + @PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @PARENTBRANCHID;      
      END      
     INSERT INTO COMPANYBRANCH(PARENTBRANCHID,BRANCHNAME,BRANCHCODE,BASEID,PARENTBASEID,ISZORO,NOCHALLANPAY,EMAILADDRESS)      
     VALUES (@PARENTBRANCHID,@BRANCHNAME,@BRANCHCODE,@BASEID,@PARENTBASEID,@ISZORO,@EXCLUDECHALLANPAY,@EMAILADDRESS)      
     SET  @BRANCHID = SCOPE_IDENTITY();      
    END      
    ELSE      
    BEGIN      
     IF EXISTS (SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @PARENTBRANCHID AND PARENTBASEID LIKE      
                (SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID)+'%')      
      BEGIN      
       SET @BRANCHID = -2;      
      END      
     ELSE      
      BEGIN                
       IF EXISTS(SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBRANCHID=@BRANCHID)      
       BEGIN -- SELECTED BRANCH IS A PARENT BRANCH      
       IF EXISTS(SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND PARENTBRANCHID = @PARENTBRANCHID)      
        BEGIN -- PARENT BRANCH IS NOT UPDATED      
         UPDATE COMPANYBRANCH       
         SET  PARENTBRANCHID=@PARENTBRANCHID,      
           BRANCHNAME=@BRANCHNAME,      
           BRANCHCODE=@BRANCHCODE,  
           ISZORO=@ISZORO,  
           NOCHALLANPAY=@EXCLUDECHALLANPAY ,
           EMAILADDRESS=@EMAILADDRESS 
         WHERE BRANCHID=@BRANCHID                    
        END      
       ELSE      
        BEGIN -- PARENT BRANCH IS CHANGED BY USER      
         SELECT @PARENTBASEID = PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID      
         DECLARE @PBLENGTH INT;      
         SET @PBLENGTH = LEN(@PARENTBASEID);              
         DECLARE @NEWPBID VARCHAR(50);          
         SELECT @NEWPBID = ISNULL(PARENTBASEID,'') FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @PARENTBRANCHID;      
         SELECT @BASEID = BASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID;      
         IF(@NEWPBID IS NULL)             
          SET  @NEWPBID = DBO.UDF_TDS_GETFORMATEDPARENTBASEID(@BASEID);             
         ELSE              
          SET  @NEWPBID = @NEWPBID + DBO.UDF_TDS_GETFORMATEDPARENTBASEID(@BASEID);      
         UPDATE COMPANYBRANCH       
         SET  PARENTBRANCHID=@PARENTBRANCHID,      
           BRANCHNAME=@BRANCHNAME,      
           BRANCHCODE=@BRANCHCODE,       
           PARENTBASEID=@NEWPBID,  
           ISZORO=@ISZORO,  
           NOCHALLANPAY=@EXCLUDECHALLANPAY,
           EMAILADDRESS=@EMAILADDRESS      
         WHERE BRANCHID=@BRANCHID       
         UPDATE COMPANYBRANCH       
         SET  PARENTBASEID=@NEWPBID+SUBSTRING(PARENTBASEID,@PBLENGTH+1,50)     
        WHERE PARENTBASEID LIKE @PARENTBASEID+'%';              
        END      
       END      
ELSE      
       BEGIN -- SELECTED BRANCH IS A LAST BRANCH (HAVING NO CHILD BRANCHE)      
        SELECT @PARENTBASEID = PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @PARENTBRANCHID;      
        SELECT @BASEID = BASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID;      
        IF(@PARENTBASEID IS NULL)             
         SET  @PARENTBASEID = DBO.UDF_TDS_GETFORMATEDPARENTBASEID(@BASEID);             
        ELSE              
         SET  @PARENTBASEID = @PARENTBASEID + DBO.UDF_TDS_GETFORMATEDPARENTBASEID(@BASEID);      
        UPDATE COMPANYBRANCH       
        SET  PARENTBRANCHID=@PARENTBRANCHID,      
          BRANCHNAME=@BRANCHNAME,      
          BRANCHCODE=@BRANCHCODE,       
          PARENTBASEID=@PARENTBASEID,  
          ISZORO=@ISZORO,  
          NOCHALLANPAY=@EXCLUDECHALLANPAY,
          EMAILADDRESS=@EMAILADDRESS      
        WHERE BRANCHID=@BRANCHID      
       END      
      END       
    END      
    END      
  SELECT @BRANCHID      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVECORRECTIONDETAILS')
DROP PROCEDURE USP_F24G_SAVECORRECTIONDETAILS
GO
CREATE PROCEDURE [USP_F24G_SAVECORRECTIONDETAILS]    
    @BRANCHID INT,    
    @MONTHID SMALLINT,    
    @ACKNO VARCHAR(15),    
    @PREACKNO VARCHAR(15),     
    @ACKFILEDDATE SMALLDATETIME,    
    @REVISENUMBER INT,    
    @ISVALIDCORRERETURN BIT,    
    @ISFINALUPDATE BIT,    
    @ISCANCELLED BIT,
    @FILEDDATE SMALLDATETIME    
AS    
BEGIN    
 DECLARE @ACKID INT;    
 SET @ACKID = -1;    
 SELECT @ACKID = ACKID FROM ACKNOF24G WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND MONTHID = @MONTHID
 SELECT @PREACKNO = ORGNUM FROM ACKNOF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
                                       AND MONTHID  = @MONTHID  
 --IF REVISE NUMBER IS 1 THEN INSERT OR UPDATE ACKNO TABLE    
 IF(@REVISENUMBER=1)    
		 BEGIN    
		  IF(@ACKID<>-1)    
				  BEGIN    
				      UPDATE ACKNOF24G  SET ORGNUM = @ACKNO,ORGFILEDDATE = @ACKFILEDDATE WHERE ACKID=@ACKID    
				  END    
				  ELSE    
				  BEGIN    
					  INSERT INTO ACKNOF24G(BRANCHID,MONTHID,ORGNUM,ORGFILEDDATE,ERETURNGENDATE,ISVALID,ISNILLRETURN,RECEIPTNO,ISUPLOADED)    
					  VALUES(@BRANCHID,@MONTHID,@ACKNO,@ACKFILEDDATE,GETDATE(),0,0,NULL,0)          
				  END    
		 END    
 --IF REVISE NUMBER IS GREATER THAN ONE THEN INSERTING OR UPDATING INTO ACKREVNO TABLE I.E REVISION TABLE     
 ELSE    
		 BEGIN    
		  DECLARE @RREVISENUMBER INT    
		  --SETTING REVISE NUMBER BY SETTING REVISENUMBER-1     
		  --I.E IN ACKNOREV TABLE IT WILL START FROM 1    
		  SET @RREVISENUMBER=@REVISENUMBER-1    
		  IF EXISTS(SELECT REVISENUMBER FROM ACKNOREVF24G WITH(NOLOCK) WHERE ACKID=@ACKID AND REVISENUMBER=@RREVISENUMBER)    
				  BEGIN    
				      UPDATE ACKNOREVF24G SET REVNUM=@PREACKNO,REVFILEDDATE=@ACKFILEDDATE WHERE ACKID=@ACKID AND REVISENUMBER=@RREVISENUMBER     
				  END    
				  ELSE    
				  BEGIN    
				      INSERT INTO ACKNOREVF24G(ACKID,REVNUM,REVFILEDDATE,REVISENUMBER) VALUES(@ACKID,@PREACKNO,@ACKFILEDDATE,@RREVISENUMBER)    
				  END     
		 END       
 ----------INSERTING OR UPDATIONG IN CORRECTIONDETAIL TABLE------------------    
 IF EXISTS(SELECT REVISENUMBER FROM CORRECTIONDETAILSF24G WITH(NOLOCK)    
           WHERE BRANCHID=@BRANCHID     
             AND MONTHID = @MONTHID
             AND REVISENUMBER=@REVISENUMBER)    
 BEGIN    
  UPDATE CORRECTIONDETAILSF24G SET ISVALIDCORRERETURN=@ISVALIDCORRERETURN,ISFINALUPDATE=@ISFINALUPDATE,ISCANCELLED=@ISCANCELLED,FILEDDATE=@FILEDDATE    
  WHERE BRANCHID=@BRANCHID AND MONTHID = @MONTHID AND REVISENUMBER=@REVISENUMBER     
 END    
 ELSE    
 BEGIN     
  INSERT INTO CORRECTIONDETAILSF24G(BRANCHID,MONTHID,REVISENUMBER,ISVALIDCORRERETURN,ISFINALUPDATE,ISCANCELLED,FILEDDATE)    
    VALUES (@BRANCHID,@MONTHID,@REVISENUMBER,@ISVALIDCORRERETURN,@ISFINALUPDATE,@ISCANCELLED,@FILEDDATE)    
 END     
 SELECT @REVISENUMBER    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEF24GACKNOWLEDGEMENTNOFORCORR')
DROP PROCEDURE USP_F24G_SAVEF24GACKNOWLEDGEMENTNOFORCORR
GO
CREATE PROCEDURE [USP_F24G_SAVEF24GACKNOWLEDGEMENTNOFORCORR]
			@BRANCHID INT,
			@MONTHID SMALLINT,
			@ORGNUM VARCHAR(15),
			@ORGFILEDDATE SMALLDATETIME,
			@ISUPLOADED BIT=NULL,
			@ISCORRCANCELLED BIT
AS
BEGIN
	DECLARE @ACKID INT;
	SET @ACKID =-1;
	IF(@ISUPLOADED IS NOT NULL)
			BEGIN
				SELECT @ACKID=ACKID FROM ACKNOF24G WITH(NOLOCK) 
				 WHERE BRANCHID = @BRANCHID 
			 	   AND MONTHID  = @MONTHID 		   
						IF(@ACKID <> -1)
						BEGIN
						  IF(@ISCORRCANCELLED <> 1)
						    BEGIN
							UPDATE ACKNOF24G 
							   SET ORGNUM       = @ORGNUM,
							       ORGFILEDDATE = @ORGFILEDDATE,
							       ISUPLOADED   = @ISUPLOADED 
							 WHERE ACKID        = @ACKID
							 END
							 ELSE
							 BEGIN
							 UPDATE ACKNOF24G 
							   SET ORGNUM       = NULL,
							       ORGFILEDDATE = NULL,
							       ISUPLOADED   = NULL,
							       RECEIPTNO = NULL 
							 WHERE ACKID        = @ACKID
							 END
						END	
			END	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEF24GCORRDEDUCTORDETAIL')
DROP PROCEDURE USP_F24G_SAVEF24GCORRDEDUCTORDETAIL
GO
CREATE PROCEDURE [USP_F24G_SAVEF24GCORRDEDUCTORDETAIL]
--@BHID INT,
@BRANCHID INT,
@MONTHID INT,
@DEDUCTORID INT,
@DEDUCTORNAME VARCHAR(75),
@PINCODE VARCHAR(6),
--@RECORDTYPE VARCHAR(25),
--@TRANSACTIONTYPE VARCHAR(25),
--@AIN VARCHAR(25),
--@LASTAIN VARCHAR(25),
@ADDRESS1 VARCHAR(25),
@ADDRESS2 VARCHAR(25),
@ADDRESS3 VARCHAR(25),
@ADDRESS4 VARCHAR(25),
@ADDRESS5 VARCHAR(25),
@STATEID INT,
@STDCODE VARCHAR(5),
@PHONENO VARCHAR(10),
@EMAILADDRESS VARCHAR(75),
@RPNAME VARCHAR(75),
@RPDESIGNATION VARCHAR(20),
--@FINANCIALYEAR INT,
--@LASTFINANCIALYEAR INT,
@STATUSID INT,
--@LASTAOCATEGORY VARCHAR(1),
--@FILLER1 VARCHAR(1),
--@FILLER2 VARCHAR(1),
--@FILLER3 VARCHAR(1),
--@FILLER4 VARCHAR(1),
--@NUMBEROFTRANSACTIONSCOUNT INT,
--@TOTALAMOUNTOFTAXDEDUCTED INT,
--@ORIGINALRRRNO VARCHAR(75),
--@PREVIOUSRRRNO VARCHAR(75),
--@RRRNO VARCHAR(75),
--@RRRDATE VARCHAR(10),
--@MONTHOFTRANSFERVOUCHER VARCHAR(10),
@RPADDRESS1 VARCHAR(25),
@RPADDRESS2 VARCHAR(25),
@RPADDRESS3 VARCHAR(25),
@RPADDRESS4 VARCHAR(25),
@RPADDRESS5 VARCHAR(25),
@RPSTATEID INT,
@RPPINCODE VARCHAR(6),
----@RPISADDRCHANGED BIT,                                 --VERIFY
@RPSTDCODE VARCHAR(5),
@RPPHONENO VARCHAR(10),
@RPEMAILADDRESS VARCHAR(75),
@RPMOBILENO VARCHAR(10),
--@FILLER5 VARCHAR(1),
--@FORM24QDDOTRANSACTIONSCOUNT INT,
--@TOTTAXDEDUCTDORCOLLECTDAMTFORM24Q INT,
--@TOTTAXREMITTEDAMTFORM24Q INT,
--@FORM26QDDOTRANSACTIONSCOUNT INT,
--@TOTTAXDEDUCTDORCOLLECTDAMTFORM26Q INT,
--@TOTTAXREMITTEDAMTFORM26Q INT,
--@FORM27QDDOTRANSACTIONSCOUNT INT,
--@TOTTAXDEDUCTDORCOLLECTDAMTFORM27Q INT,
--@TOTTAXREMITTEDAMTFORM27Q INT,
--@FORM27EQDDOTRANSACTIONSCOUNT INT,
--@TOTTAXDEDUCTDORCOLLECTDAMTFORM27EQ INT,
--@TOTTAXREMITTEDAMTFORM27EQ INT,
--@PAOREGISTRATIONNUMBER VARCHAR(20),
--@COUNTOFDISTINCTDDOTAN VARCHAR(10),
--@TOTALAMOUNTOFTAXREMITTED INT,
--@COUNTOFDDORECORDSADDED INT,
--@COUNTOFDDORECORDSUPDATED INT,
--@COUNTOFDDORECOREDDELETED INT,
--@RECEIPTNO VARCHAR(20),
@CORRECTIONSTATUS SMALLINT,
@GOVTADDMAINMINISTRY INT,
@GOVTADDMINISTRY INT,
@GOVTADDOTHERNAME VARCHAR(20)
AS
BEGIN
--SET @MONTHID=@MONTHOFTRANSFERVOUCHER
   DECLARE @BHID INT 
    --IF(@BHID=-1)
    --  BEGIN
         IF EXISTS(SELECT BHID FROM CORRDEDUCTORF24G WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND CORRECTIONSTATUS = 2)
            BEGIN
			   UPDATE    CORRDEDUCTORF24G
				  SET  DEDUCTORNAME =@DEDUCTORNAME,ADDRESS1 =@ADDRESS1,ADDRESS2 =@ADDRESS2,
					   ADDRESS3 =@ADDRESS3,ADDRESS4= @ADDRESS4,ADDRESS5 =@ADDRESS5,STATEID =@STATEID,STDCODE =@STDCODE,PHONENO =@PHONENO,
					   EMAILADDRESS =@EMAILADDRESS,STATUSID =@STATUSID,
					   RPNAME = @RPNAME,RPDESIGNATION = @RPDESIGNATION,RPADDRESS1 = @RPADDRESS1 ,RPADDRESS2= @RPADDRESS2 ,
					   RPADDRESS3 = @RPADDRESS3,RPADDRESS4 = @RPADDRESS4 ,RPADDRESS5 = @RPADDRESS5,RPSTATEID = @RPSTATEID ,
					   RPPINCODE = @RPPINCODE,RPSTDCODE = @RPSTDCODE , RPPHONENO = @RPPHONENO , @RPEMAILADDRESS = @RPEMAILADDRESS, 
					   RPMOBILENO = @RPMOBILENO,PINCODE = @PINCODE,
					   GOVTADDMAINMINISTRY =@GOVTADDMAINMINISTRY,GOVTADDMINISTRY = @GOVTADDMINISTRY,GOVTADDOTHERNAME = @GOVTADDOTHERNAME
	          WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2;	  
		    END
		ELSE
           	BEGIN
           		DECLARE @QUARTER INT
				IF (@MONTHID = 4 OR @MONTHID = 5 OR @MONTHID = 6)
				SET @QUARTER = 1				 
				ELSE IF (@MONTHID = 7 OR @MONTHID = 8 OR @MONTHID = 9)
				SET @QUARTER = 2
				ELSE IF (@MONTHID = 10 OR @MONTHID = 11 OR @MONTHID = 12)
				SET @QUARTER = 3
				ELSE 
				SET @QUARTER = 4
				SELECT @DEDUCTORID = DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND [QUARTER] = @QUARTER;
		INSERT INTO CORRDEDUCTORF24G(BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,TRANSACTIONTYPE,AIN,LASTAIN,RPNAME,RPDESIGNATION,FINANCIALYEAR,LASTFINANCIALYEAR,LASTAOCATEGORY,FILLER1,FILLER2,
		FILLER3,FILLER4,NUMBEROFTRANSACTIONSCOUNT,TOTALAMOUNTOFTAXDEDUCTED,ORIGINALRRRNO,PREVIOUSRRRNO,RRRNO,RRRDATE,MONTHOFTRANSFERVOUCHER,RPADDRESS1,RPADDRESS2,RPADDRESS3,RPADDRESS4,RPADDRESS5,RPSTATEID,RPPINCODE,RPSTDCODE,RPPHONENO,
		RPEMAILADDRESS,RPMOBILENO,FILLER5,FORM24QDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM24Q,TOTTAXREMITTEDAMTFORM24Q,FORM26QDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM26Q,TOTTAXREMITTEDAMTFORM26Q,FORM27QDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM27Q,TOTTAXREMITTEDAMTFORM27Q,FORM27EQDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM27EQ,TOTTAXREMITTEDAMTFORM27EQ,PAOREGISTRATIONNUMBER,GOVTADDSTATEID,
		COUNTOFDISTINCTDDOTAN,TOTALAMOUNTOFTAXREMITTED,COUNTOFDDORECORDSADDED,COUNTOFDDORECORDSUPDATED,COUNTOFDDORECOREDDELETED,RECEIPTNO,CORRECTIONSTATUS,GOVTADDMAINMINISTRY,GOVTADDMINISTRY,GOVTADDOTHERNAME) 
		SELECT BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,TRANSACTIONTYPE,AIN,LASTAIN,RPNAME,RPDESIGNATION,FINANCIALYEAR,LASTFINANCIALYEAR,LASTAOCATEGORY,FILLER1,FILLER2,
		FILLER3,FILLER4,NUMBEROFTRANSACTIONSCOUNT,TOTALAMOUNTOFTAXDEDUCTED,ORIGINALRRRNO,PREVIOUSRRRNO,RRRNO,RRRDATE,MONTHOFTRANSFERVOUCHER,RPADDRESS1,RPADDRESS2,RPADDRESS3,RPADDRESS4,RPADDRESS5,RPSTATEID,RPPINCODE,RPSTDCODE,RPPHONENO,
		RPEMAILADDRESS,RPMOBILENO,FILLER5,FORM24QDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM24Q,TOTTAXREMITTEDAMTFORM24Q,FORM26QDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM26Q,TOTTAXREMITTEDAMTFORM26Q,FORM27QDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM27Q,TOTTAXREMITTEDAMTFORM27Q,FORM27EQDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM27EQ,TOTTAXREMITTEDAMTFORM27EQ,PAOREGISTRATIONNUMBER,GOVTADDSTATEID,
		COUNTOFDISTINCTDDOTAN,TOTALAMOUNTOFTAXREMITTED,COUNTOFDDORECORDSADDED,COUNTOFDDORECORDSUPDATED,COUNTOFDDORECOREDDELETED,RECEIPTNO, 2 ,GOVTADDMAINMINISTRY,GOVTADDMINISTRY,GOVTADDOTHERNAME FROM CORRDEDUCTORF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1
		--SET @BHID = SCOPE_IDENTITY();				
		UPDATE CORRDEDUCTORF24G
		  SET  DEDUCTORNAME =@DEDUCTORNAME,ADDRESS1 =@ADDRESS1,ADDRESS2 =@ADDRESS2,
			   ADDRESS3 =@ADDRESS3,ADDRESS4=@ADDRESS4,ADDRESS5 =@ADDRESS5,STATEID =@STATEID,STDCODE =@STDCODE,
			   PHONENO =@PHONENO,EMAILADDRESS =@EMAILADDRESS,STATUSID =@STATUSID,
			   RPNAME = @RPNAME,RPDESIGNATION = @RPDESIGNATION,RPADDRESS1 = @RPADDRESS1 ,RPADDRESS2= @RPADDRESS2 ,
					   RPADDRESS3 = @RPADDRESS3,RPADDRESS4 = @RPADDRESS4 ,RPADDRESS5 = @RPADDRESS5,RPSTATEID = @RPSTATEID ,
					   RPPINCODE = @RPPINCODE,RPSTDCODE = @RPSTDCODE , RPPHONENO = @RPPHONENO , @RPEMAILADDRESS = @RPEMAILADDRESS, 
					   RPMOBILENO = @RPMOBILENO,PINCODE=@PINCODE,GOVTADDMAINMINISTRY =@GOVTADDMAINMINISTRY,GOVTADDMINISTRY = @GOVTADDMINISTRY,GOVTADDOTHERNAME = @GOVTADDOTHERNAME
	    WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2;	 
        END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEF24GCORRECTIONDETAILS')
DROP PROCEDURE USP_F24G_SAVEF24GCORRECTIONDETAILS
GO
CREATE PROCEDURE [USP_F24G_SAVEF24GCORRECTIONDETAILS]    
    @BRANCHID INT,    
    @MONTHID SMALLINT,
    @ACKNO VARCHAR(15),    
    @PREACKNO VARCHAR(15),     
    @ACKFILEDDATE SMALLDATETIME,    
    @REVISENUMBER INT,    
    @ISVALIDCORRERETURN BIT,    
    @ISFINALUPDATE BIT,    
    @ISCANCELLED BIT,
    @FILEDDATE SMALLDATETIME    
AS    
BEGIN    
 DECLARE @ACKID INT,
       --  @REVNUM VARCHAR(15),
         @ORGNUM VARCHAR(15);    
 SET @ACKID = -1;   
 ---SET @REVNUM = -1;
 SET @ORGNUM  = -1; 
 SELECT @ACKID = ACKID FROM ACKNOF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
                                    AND MONTHID  = @MONTHID    
SELECT @PREACKNO = ORGNUM FROM ACKNOF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
                                       AND MONTHID  = @MONTHID                                   
  --IF REVISE NUMBER IS 1 THEN INSERT OR UPDATE ACKNOF24G TABLE    
 IF(@REVISENUMBER = 1)    
		 BEGIN    
		  IF(@ACKID<>-1)    
		    BEGIN    
		        UPDATE ACKNOF24G 
		        SET ORGNUM       = @ACKNO,
		            ORGFILEDDATE = @ACKFILEDDATE 
		        WHERE ACKID      = @ACKID    
		    END    
		  ELSE    
		    BEGIN    
		        INSERT INTO ACKNOF24G(BRANCHID,MONTHID,ORGNUM,ORGFILEDDATE,ERETURNGENDATE,ISVALID,ISNILLRETURN,RECEIPTNO,ISUPLOADED)    
			    VALUES(@BRANCHID,@MONTHID,@ACKNO,@ACKFILEDDATE,GETDATE(),0,0,NULL,0)          
		    END    
		  END    
 --IF REVISE NUMBER IS GREATER THAN ONE THEN INSERTING OR UPDATING INTO ACKREVNO TABLE I.E REVISION TABLE     
	 ELSE    
		 BEGIN    
			   DECLARE @RREVISENUMBER INT    
			  --SETTING REVISE NUMBER BY SETTING REVISENUMBER-1     
			  --I.E IN ACKNOREV TABLE IT WILL START FROM 1    
			   SET @RREVISENUMBER = @REVISENUMBER - 1    
			   IF EXISTS(SELECT REVISENUMBER FROM ACKNOREVF24G WITH(NOLOCK) WHERE ACKID = @ACKID AND REVISENUMBER = @RREVISENUMBER)    
					BEGIN    
					   UPDATE ACKNOREVF24G SET REVNUM = @PREACKNO,REVFILEDDATE = @ACKFILEDDATE WHERE ACKID = @ACKID AND REVISENUMBER = @RREVISENUMBER     
					END    
				ELSE    
					BEGIN    
					--IF(@ISCANCELLED=0)
					   INSERT INTO ACKNOREVF24G(ACKID,REVNUM,REVFILEDDATE,REVISENUMBER) VALUES(@ACKID,@PREACKNO,@ACKFILEDDATE,@RREVISENUMBER)    
					END     
		 END       
 ----------INSERTING OR UPDATIONG IN CORRECTIONDETAIL TABLE------------------    
 IF EXISTS( SELECT REVISENUMBER FROM CORRECTIONDETAILSF24G WITH(NOLOCK)     
            WHERE BRANCHID     = @BRANCHID     
              AND MONTHID      = @MONTHID    
              AND REVISENUMBER = @REVISENUMBER )    
	 BEGIN    
		  UPDATE CORRECTIONDETAILSF24G 
		  SET ISVALIDCORRERETURN = @ISVALIDCORRERETURN,
		      ISFINALUPDATE = @ISFINALUPDATE,
		      ISCANCELLED = @ISCANCELLED,
		      FILEDDATE = @FILEDDATE    
		  WHERE BRANCHID = @BRANCHID
		    AND MONTHID  = @MONTHID 
		    AND REVISENUMBER=@REVISENUMBER     
	 END    
	 ELSE    
	 BEGIN     
		  IF(@ISCANCELLED=0)
	 BEGIN
		  INSERT INTO CORRECTIONDETAILSF24G(BRANCHID,MONTHID,REVISENUMBER,ISVALIDCORRERETURN,ISFINALUPDATE,ISCANCELLED,FILEDDATE)    
		  VALUES (@BRANCHID,@MONTHID,@REVISENUMBER,@ISVALIDCORRERETURN,@ISFINALUPDATE,@ISCANCELLED,@FILEDDATE)    
		  END
		  --ELSE
		  --BEGIN
		  --SET @ISCANCELLED = 1
		  --END 
	 END     
 SELECT @REVISENUMBER    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEFORM24GDDODEDUCTOR')
DROP PROCEDURE USP_F24G_SAVEFORM24GDDODEDUCTOR
GO
CREATE PROCEDURE [USP_F24G_SAVEFORM24GDDODEDUCTOR] 
(
@FORM24GID		INT,
@MONTHID		INT,
@BRANCHID		INT,
@FORMID			INT,
@DEDUCTORID		INT,
@TOTALDEDUCTED  NUMERIC(13,2),
@TOTALREMITTED  NUMERIC(13,2),
@CORRTYPE       CHAR(1),
@CURRENTENTRY   BIT
)	
AS
BEGIN
    IF @FORM24GID= -1
    BEGIN
    IF NOT EXISTS (SELECT * FROM FORM24G WITH(NOLOCK) WHERE  MONTHID = @MONTHID AND FORMID = @FORMID AND BRANCHID = @BRANCHID AND DEDUCTORID=@DEDUCTORID) --DEDUCTORID=@DEDUCTORID  AND
			BEGIN
				INSERT INTO FORM24G(MONTHID,BRANCHID,FORMID,DEDUCTORID,TOTALDEDUCTED,TOTALREMITTED,CORRTYPE,CURRENTENTRY)
                            VALUES (@MONTHID,@BRANCHID,@FORMID,@DEDUCTORID,@TOTALDEDUCTED,@TOTALREMITTED,@CORRTYPE,@CURRENTENTRY)
                SET @FORM24GID = SCOPE_IDENTITY();
			END
	END		
	ELSE
			BEGIN
			IF NOT EXISTS (SELECT * FROM FORM24G WITH(NOLOCK) WHERE  MONTHID = @MONTHID AND FORMID = @FORMID AND BRANCHID = @BRANCHID AND DEDUCTORID = @DEDUCTORID AND FORM24GID <> @FORM24GID)
			BEGIN
				UPDATE FORM24G SET --MONTHID       =  @MONTHID,
				                   --BRANCHID      =  @BRANCHID,
				                   FORMID        =  @FORMID,
				                   DEDUCTORID    =  @DEDUCTORID,
				                   TOTALDEDUCTED =  @TOTALDEDUCTED,
				                   TOTALREMITTED =  @TOTALREMITTED,
				                   CORRTYPE      =  @CORRTYPE,
				                   CURRENTENTRY  =  @CURRENTENTRY
			             	WHERE  FORM24GID     =  @FORM24GID;
			END
			ELSE
			BEGIN
			SET @FORM24GID = -1;
			END
			END
		SELECT @FORM24GID;				
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEFVUBATCHHEADERF24G')
DROP PROCEDURE USP_F24G_SAVEFVUBATCHHEADERF24G
GO
-------------------END OF USP_F24G_SAVEFORM24GDDODEDUCTOR
-------------------START OF USP_F24G_SAVEFVUBATCHHEADERF24G
CREATE PROCEDURE [USP_F24G_SAVEFVUBATCHHEADERF24G]
@BHID INT,
@BRANCHID INT,
@MONTHID INT,
@DEDUCTORID INT,
@DEDUCTORNAME VARCHAR(75),
@RECORDTYPE VARCHAR(25),
@TRANSACTIONTYPE VARCHAR(25),
@AIN VARCHAR(25),
@LASTAIN VARCHAR(25),
@ADDRESS1 VARCHAR(25),
@ADDRESS2 VARCHAR(25),
@ADDRESS3 VARCHAR(25),
@ADDRESS4 VARCHAR(25),
@ADDRESS5 VARCHAR(25),
@STATEID INT,
@STDCODE VARCHAR(5),
@PHONENO VARCHAR(10),
@EMAILADDRESS VARCHAR(75),
@RPNAME VARCHAR(75),
@RPDESIGNATION VARCHAR(20),
@FINANCIALYEAR INT,
@LASTFINANCIALYEAR INT,
@STATUSID INT,
@LASTAOCATEGORY VARCHAR(1),
@FILLER1 VARCHAR(1),
@FILLER2 VARCHAR(1),
@FILLER3 VARCHAR(1),
@FILLER4 VARCHAR(1),
@NUMBEROFTRANSACTIONSCOUNT INT,
@TOTALAMOUNTOFTAXDEDUCTED INT,
@ORIGINALRRRNO VARCHAR(75),
@PREVIOUSRRRNO VARCHAR(75),
@RRRNO VARCHAR(75),
@RRRDATE VARCHAR(10),
@MONTHOFTRANSFERVOUCHER VARCHAR(10),
@RPADDRESS1 VARCHAR(25),
@RPADDRESS2 VARCHAR(25),
@RPADDRESS3 VARCHAR(25),
@RPADDRESS4 VARCHAR(25),
@RPADDRESS5 VARCHAR(25),
@RPSTATEID INT,
@RPPINCODE VARCHAR(6),
--@RPISADDRCHANGED BIT,                                 --VERIFY
@RPSTDCODE VARCHAR(5),
@RPPHONENO VARCHAR(10),
@RPEMAILADDRESS VARCHAR(75),
@RPMOBILENO VARCHAR(10),
@FILLER5 VARCHAR(1),
@FORM24QDDOTRANSACTIONSCOUNT INT,
@TOTTAXDEDUCTDORCOLLECTDAMTFORM24Q INT,
@TOTTAXREMITTEDAMTFORM24Q INT,
@FORM26QDDOTRANSACTIONSCOUNT INT,
@TOTTAXDEDUCTDORCOLLECTDAMTFORM26Q INT,
@TOTTAXREMITTEDAMTFORM26Q INT,
@FORM27QDDOTRANSACTIONSCOUNT INT,
@TOTTAXDEDUCTDORCOLLECTDAMTFORM27Q INT,
@TOTTAXREMITTEDAMTFORM27Q INT,
@FORM27EQDDOTRANSACTIONSCOUNT INT,
@TOTTAXDEDUCTDORCOLLECTDAMTFORM27EQ INT,
@TOTTAXREMITTEDAMTFORM27EQ INT,
@PAOREGISTRATIONNUMBER VARCHAR(20),
@COUNTOFDISTINCTDDOTAN VARCHAR(10),
@TOTALAMOUNTOFTAXREMITTED INT,
@COUNTOFDDORECORDSADDED INT,
@COUNTOFDDORECORDSUPDATED INT,
@COUNTOFDDORECOREDDELETED INT,
@RECEIPTNO VARCHAR(20),
@PINCODE VARCHAR(6),
@GOVTADDSTATEID INT,
@CORRECTIONSTATUS SMALLINT,
@GOVTADDMAINMINISTRY INT,
@GOVTADDMINISTRY INT,
@GOVTADDOTHERNAME VARCHAR(20) 
AS
BEGIN
--DECLARE @QUARTER INT
SET @MONTHID=@MONTHOFTRANSFERVOUCHER
--     IF (@MONTHOFTRANSFERVOUCHER = 4 OR @MONTHOFTRANSFERVOUCHER = 5 OR @MONTHOFTRANSFERVOUCHER = 6)
--				 SET @QUARTER = 1				 
--		ELSE IF (@MONTHOFTRANSFERVOUCHER = 7 OR @MONTHOFTRANSFERVOUCHER = 8 OR @MONTHOFTRANSFERVOUCHER = 9)
--				 SET @QUARTER = 2
--		ELSE IF (@MONTHOFTRANSFERVOUCHER = 10 OR @MONTHOFTRANSFERVOUCHER = 11 OR @MONTHOFTRANSFERVOUCHER = 12)
--				 SET @QUARTER = 3
--		ELSE 
--				SET @QUARTER = 4
--    SELECT @DEDUCTORID = DEDUCTORID FROM BRANCHDEDUCTORS WHERE BRANCHID=@BRANCHID AND [QUARTER] = @QUARTER;
    IF(@BHID=-1)
      BEGIN
         IF((SELECT COUNT(BHID) FROM CORRDEDUCTORF24G WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID)=0)
           	BEGIN
           		DECLARE @QUARTER INT
				--SET @MONTHID=@MONTHOFTRANSFERVOUCHER
				IF (@MONTHOFTRANSFERVOUCHER = 4 OR @MONTHOFTRANSFERVOUCHER = 5 OR @MONTHOFTRANSFERVOUCHER = 6)
				SET @QUARTER = 1				 
				ELSE IF (@MONTHOFTRANSFERVOUCHER = 7 OR @MONTHOFTRANSFERVOUCHER = 8 OR @MONTHOFTRANSFERVOUCHER = 9)
				SET @QUARTER = 2
				ELSE IF (@MONTHOFTRANSFERVOUCHER = 10 OR @MONTHOFTRANSFERVOUCHER = 11 OR @MONTHOFTRANSFERVOUCHER = 12)
				SET @QUARTER = 3
				ELSE 
				SET @QUARTER = 4
				SELECT @DEDUCTORID = DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND [QUARTER] = @QUARTER;
           		INSERT INTO CORRDEDUCTORF24G (BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,TRANSACTIONTYPE,AIN,LASTAIN,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,STDCODE,PHONENO,EMAILADDRESS,RPNAME,
											  RPDESIGNATION,FINANCIALYEAR,LASTFINANCIALYEAR,STATUSID,LASTAOCATEGORY,FILLER1,FILLER2,FILLER3,FILLER4,NUMBEROFTRANSACTIONSCOUNT,TOTALAMOUNTOFTAXDEDUCTED,ORIGINALRRRNO,PREVIOUSRRRNO, 
											  RRRNO,RRRDATE,MONTHOFTRANSFERVOUCHER,RPADDRESS1,RPADDRESS2,RPADDRESS3,RPADDRESS4,RPADDRESS5,RPSTATEID,RPPINCODE,RPSTDCODE,RPPHONENO,RPEMAILADDRESS,RPMOBILENO, 
											  FILLER5,FORM24QDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM24Q,TOTTAXREMITTEDAMTFORM24Q,FORM26QDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM26Q,TOTTAXREMITTEDAMTFORM26Q, 
											  FORM27QDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM27Q,TOTTAXREMITTEDAMTFORM27Q,FORM27EQDDOTRANSACTIONSCOUNT,TOTTAXDEDUCTDORCOLLECTDAMTFORM27EQ,TOTTAXREMITTEDAMTFORM27EQ, 
											  PAOREGISTRATIONNUMBER,COUNTOFDISTINCTDDOTAN,TOTALAMOUNTOFTAXREMITTED,COUNTOFDDORECORDSADDED,COUNTOFDDORECORDSUPDATED,COUNTOFDDORECOREDDELETED,RECEIPTNO,PINCODE,GOVTADDSTATEID,CORRECTIONSTATUS,
											  GOVTADDMAINMINISTRY,GOVTADDMINISTRY,GOVTADDOTHERNAME 
											  )
				VALUES  
						  					 (@BRANCHID,@MONTHID,@DEDUCTORID,@DEDUCTORNAME,@RECORDTYPE,@TRANSACTIONTYPE,@AIN,@LASTAIN,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@STDCODE,@PHONENO,@EMAILADDRESS,@RPNAME, 
											  @RPDESIGNATION,@FINANCIALYEAR,@LASTFINANCIALYEAR,@STATUSID,@LASTAOCATEGORY,@FILLER1,@FILLER2,@FILLER3,@FILLER4,@NUMBEROFTRANSACTIONSCOUNT,@TOTALAMOUNTOFTAXDEDUCTED,@ORIGINALRRRNO,@PREVIOUSRRRNO, 
											  @RRRNO,@RRRDATE,@MONTHOFTRANSFERVOUCHER,@RPADDRESS1,@RPADDRESS2,@RPADDRESS3,@RPADDRESS4,@RPADDRESS5,@RPSTATEID,@RPPINCODE,@RPSTDCODE,@RPPHONENO,@RPEMAILADDRESS,@RPMOBILENO, 
											  @FILLER5,@FORM24QDDOTRANSACTIONSCOUNT,@TOTTAXDEDUCTDORCOLLECTDAMTFORM24Q,@TOTTAXREMITTEDAMTFORM24Q,@FORM26QDDOTRANSACTIONSCOUNT,@TOTTAXDEDUCTDORCOLLECTDAMTFORM26Q,@TOTTAXREMITTEDAMTFORM26Q, 
											  @FORM27QDDOTRANSACTIONSCOUNT,@TOTTAXDEDUCTDORCOLLECTDAMTFORM27Q,@TOTTAXREMITTEDAMTFORM27Q,@FORM27EQDDOTRANSACTIONSCOUNT,@TOTTAXDEDUCTDORCOLLECTDAMTFORM27EQ,@TOTTAXREMITTEDAMTFORM27EQ, 
											  @PAOREGISTRATIONNUMBER,@COUNTOFDISTINCTDDOTAN,@TOTALAMOUNTOFTAXREMITTED,@COUNTOFDDORECORDSADDED,@COUNTOFDDORECORDSUPDATED,@COUNTOFDDORECOREDDELETED,@RECEIPTNO,@PINCODE,@GOVTADDSTATEID,@CORRECTIONSTATUS,
											  @GOVTADDMAINMINISTRY,@GOVTADDMINISTRY,@GOVTADDOTHERNAME 
											  )
											  SET @BHID = SCOPE_IDENTITY();
            END  
       END
  --ELSE
  --     BEGIN
  --         DELETE FROM CORRDEDUCTORF24G
  --     END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEFVUCHILDREGULARDEDUCTOR24G')
DROP PROCEDURE USP_F24G_SAVEFVUCHILDREGULARDEDUCTOR24G
GO
CREATE PROCEDURE [USP_F24G_SAVEFVUCHILDREGULARDEDUCTOR24G]          
  @BRANCHID INT,          
  @QUARTER INT,          
  @DEDUCTORNAME VARCHAR(75),             
  @ADDRESS1 VARCHAR(25),          
  @ADDRESS2 VARCHAR(25),          
  @ADDRESS3 VARCHAR(25),          
  @ADDRESS4 VARCHAR(25),          
  @ADDRESS5 VARCHAR(25),          
  @STATEID INT,          
  @FINANCIALYEAR INT,          
  @TAN VARCHAR(10),    
  @PAN VARCHAR(10),        
  @PINCODE VARCHAR(6),          
  @EMAILADDRESS VARCHAR(75),  
  @ISRESIDENT BIT,          
  @RETURNTYPE TINYINT,                  
  @STATUSID INT,          
  @DEDUCTORTYPEID INT,                   
  @GOVTADDDDOCODE VARCHAR(20)= NULL,          
  @GOVTADDDDOREGNNO VARCHAR(20)= NULL      
AS          
BEGIN           
   DECLARE @DEDUCTORID INT,@PREVIOUSTATUSID INT,@SECTIONID INT;          
   SET @DEDUCTORID =-1;SET @PREVIOUSTATUSID =-1;SET @SECTIONID =-1;          
   SELECT @DEDUCTORID=D.DEDUCTORID,@PREVIOUSTATUSID=D.STATUSID          
     FROM DEDUCTOR D WITH(NOLOCK)          
    INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID=BD.DEDUCTORID           
    WHERE BD.BRANCHID=@BRANCHID AND BD.QUARTER=@QUARTER          
   IF (@DEDUCTORID <> -1)  
     BEGIN     
      UPDATE DEDUCTOR SET DEDUCTORNAME=@DEDUCTORNAME,  
          ADDRESS1=@ADDRESS1,  
          ADDRESS2=@ADDRESS2,  
          ADDRESS3=@ADDRESS3,  
          ADDRESS4=@ADDRESS4,  
          ADDRESS5=@ADDRESS5,  
          STATEID=@STATEID,   
          FINANCIALYEAR=@FINANCIALYEAR,   
          PINCODE=@PINCODE,  
          EMAILADDRESS=@EMAILADDRESS,      
          GOVTADDDDOCODE=@GOVTADDDDOCODE,  
          GOVTADDDDOREGNNO=@GOVTADDDDOREGNNO
           FROM DEDUCTOR D  
          INNER JOIN  
          BRANCHDEDUCTORS BD  
          ON D.DEDUCTORID=BD.DEDUCTORID   
          WHERE BD.BRANCHID=@BRANCHID AND BD.QUARTER=@QUARTER  
	 END           
   ELSE        
     BEGIN              
      INSERT INTO DEDUCTOR(DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,FINANCIALYEAR,          
            [TAN],PAN, PINCODE,EMAILADDRESS,ISRESIDENT,RETURNTYPE,STATUSID,DEDUCTORTYPEID,GOVTADDDDOCODE,GOVTADDDDOREGNNO)          
          VALUES(@DEDUCTORNAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@FINANCIALYEAR,          
              @TAN,@PAN,@PINCODE,@EMAILADDRESS,@ISRESIDENT,@RETURNTYPE,@STATUSID,@DEDUCTORTYPEID,@GOVTADDDDOCODE,@GOVTADDDDOREGNNO)     
      SET @DEDUCTORID=SCOPE_IDENTITY();             
      INSERT INTO BRANCHDEDUCTORS(BRANCHID,[QUARTER],DEDUCTORID)           
           VALUES(@BRANCHID,@QUARTER,@DEDUCTORID);          
     END             
   SELECT @DEDUCTORID          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEFVUREGULARDEDUCTOR24G')
DROP PROCEDURE USP_F24G_SAVEFVUREGULARDEDUCTOR24G
GO
CREATE PROCEDURE [USP_F24G_SAVEFVUREGULARDEDUCTOR24G]          
  @BRANCHID INT,          
  @QUARTER INT,          
  @DEDUCTORNAME VARCHAR(75),             
  @ADDRESS1 VARCHAR(25),          
  @ADDRESS2 VARCHAR(25),          
  @ADDRESS3 VARCHAR(25),          
  @ADDRESS4 VARCHAR(25),          
  @ADDRESS5 VARCHAR(25),          
  @STATEID INT,          
  @FINANCIALYEAR INT,          
  @TAN VARCHAR(10),          
  @PAN VARCHAR(10),          
  @PINCODE VARCHAR(6),          
  @EMAILADDRESS VARCHAR(75),          
  @STDCODE VARCHAR(5),          
  @PHONENO VARCHAR(10),    
  @ISRESIDENT BIT,          
  @RETURNTYPE TINYINT,          
  @AODESIGNATION VARCHAR(30),             
  @STATUSID INT,          
  @DEDUCTORTYPEID INT,          
  @GOVTADDSTATEID INT,          
  @GOVTADDPAOCODE VARCHAR(20)= NULL,          
  @GOVTADDPAOREGNNO VARCHAR(20)= NULL,          
  @GOVTADDDDOCODE VARCHAR(20)= NULL,          
  @GOVTADDDDOREGNNO VARCHAR(20)= NULL,          
  @GOVTADDMINISTRY INT,          
  @GOVTADDOTHERNAME VARCHAR(20),          
  @GOVTADDAIN VARCHAR(10) = NULL          
AS          
BEGIN           
   DECLARE @DEDUCTORID INT,@PREVIOUSTATUSID INT,@SECTIONID INT;          
   SET @DEDUCTORID =-1;SET @PREVIOUSTATUSID =-1;SET @SECTIONID =-1;          
   SELECT @DEDUCTORID=D.DEDUCTORID,@PREVIOUSTATUSID=D.STATUSID          
     FROM DEDUCTOR D WITH(NOLOCK)          
    INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID=BD.DEDUCTORID           
    WHERE BD.BRANCHID=@BRANCHID AND BD.QUARTER=@QUARTER          
    IF (@DEDUCTORID <> -1)    
     BEGIN       
      UPDATE DEDUCTOR SET DEDUCTORNAME=@DEDUCTORNAME,    
          ADDRESS1=@ADDRESS1,    
          ADDRESS2=@ADDRESS2,    
          ADDRESS3=@ADDRESS3,    
          ADDRESS4=@ADDRESS4,    
          ADDRESS5=@ADDRESS5,    
          STATEID=@STATEID,     
          FINANCIALYEAR=@FINANCIALYEAR,     
          PINCODE=@PINCODE,    
          EMAILADDRESS=@EMAILADDRESS,    
          STDCODE=@STDCODE,    
          PHONENO=@PHONENO,    
          ISRESIDENT=@ISRESIDENT,    
          RETURNTYPE=@RETURNTYPE,      
          AODESIGNATION=@AODESIGNATION,    
          STATUSID=@STATUSID,    
          DEDUCTORTYPEID=@DEDUCTORTYPEID,    
          GOVTADDSTATEID=@GOVTADDSTATEID,    
          GOVTADDPAOCODE=@GOVTADDPAOCODE,    
          GOVTADDPAOREGNNO=@GOVTADDPAOREGNNO,    
          GOVTADDDDOCODE=@GOVTADDDDOCODE,    
          GOVTADDDDOREGNNO=@GOVTADDDDOREGNNO,    
          GOVTADDMINISTRY=@GOVTADDMINISTRY,    
          GOVTADDOTHERNAME=@GOVTADDOTHERNAME,     
          GOVTADDAIN=@GOVTADDAIN    
           FROM DEDUCTOR D    
          INNER JOIN    
          BRANCHDEDUCTORS BD    
          ON D.DEDUCTORID=BD.DEDUCTORID     
          WHERE BD.BRANCHID=@BRANCHID AND BD.QUARTER=@QUARTER    
  END  
 ELSE          
     BEGIN              
      INSERT INTO DEDUCTOR(DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,FINANCIALYEAR,          
           [TAN],PAN,PINCODE,EMAILADDRESS,STDCODE,PHONENO,ISRESIDENT,RETURNTYPE,           
           AODESIGNATION,STATUSID,DEDUCTORTYPEID,GOVTADDSTATEID,GOVTADDPAOCODE,GOVTADDPAOREGNNO,          
           GOVTADDDDOCODE,GOVTADDDDOREGNNO,GOVTADDMINISTRY,GOVTADDOTHERNAME,GOVTADDAIN)          
         VALUES(@DEDUCTORNAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@FINANCIALYEAR,          
             @TAN,@PAN,@PINCODE,@EMAILADDRESS,@STDCODE,@PHONENO,@ISRESIDENT,@RETURNTYPE,          
          @AODESIGNATION,@STATUSID,@DEDUCTORTYPEID,@GOVTADDSTATEID,@GOVTADDPAOCODE,@GOVTADDPAOREGNNO,          
          @GOVTADDDDOCODE,@GOVTADDDDOREGNNO,@GOVTADDMINISTRY,@GOVTADDOTHERNAME,@GOVTADDAIN)          
      SET @DEDUCTORID=SCOPE_IDENTITY();             
      INSERT INTO BRANCHDEDUCTORS(BRANCHID,[QUARTER],DEDUCTORID)           
          VALUES(@BRANCHID,@QUARTER,@DEDUCTORID);          
     END 
 SELECT @DEDUCTORID          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEFVUREGULARRESPONSIBLEPERSON24G')
DROP PROCEDURE USP_F24G_SAVEFVUREGULARRESPONSIBLEPERSON24G
GO
CREATE PROCEDURE [USP_F24G_SAVEFVUREGULARRESPONSIBLEPERSON24G]  
 @DEDUCTORID INT,  
 @PERSONNAME VARCHAR(75),  
 @ADDRESS1 VARCHAR(75),  
 @ADDRESS2 VARCHAR(75),  
 @ADDRESS3 VARCHAR(75),  
 @ADDRESS4 VARCHAR(75),  
 @ADDRESS5 VARCHAR(75),  
 @STATEID INT,  
 @PINCODE VARCHAR(6),  
 @STDCODE VARCHAR(5),  
 @PHONENUMBER VARCHAR(10),  
 @DESIGNATION VARCHAR(20),  
 @EMAILADDRESS VARCHAR(75),  
 @MOBILENO VARCHAR(12)  
AS  
 BEGIN  
  DECLARE @PERSONID INT;  
  SET @PERSONID =-1;  
  SELECT @PERSONID=PERSONID FROM RESPONSIBLEPERSON WITH(NOLOCK) WHERE DEDUCTORID=@DEDUCTORID  
  IF(@PERSONID=-1)  
   BEGIN  
    INSERT INTO RESPONSIBLEPERSON(DEDUCTORID,PERSONNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,  
             DESIGNATION,EMAILADDRESS,STDCODE,PHONENO,MOBILENO)   
    VALUES(@DEDUCTORID,@PERSONNAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@PINCODE,@STATEID,@DESIGNATION,  
        @EMAILADDRESS,@STDCODE,@PHONENUMBER,@MOBILENO)  
    SET @PERSONID=SCOPE_IDENTITY();                                         
   END
   ELSE  
   BEGIN  
    UPDATE RESPONSIBLEPERSON SET PERSONNAME=@PERSONNAME,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,  
            ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID,DESIGNATION=@DESIGNATION,EMAILADDRESS=@EMAILADDRESS,STDCODE=@STDCODE,PHONENO=@PHONENUMBER,MOBILENO=@MOBILENO
    WHERE DEDUCTORID=@DEDUCTORID AND PERSONID=@PERSONID                              
   END    
  SELECT @PERSONID;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEFVUTRANSACTIONDETAILSF24G')
DROP PROCEDURE USP_F24G_SAVEFVUTRANSACTIONDETAILSF24G
GO
CREATE PROCEDURE [USP_F24G_SAVEFVUTRANSACTIONDETAILSF24G]
	@DDODETID INT,
	@BRANCHID INT,
	@MONTHID INT,
	@DEDUCTORID INT,
	@DEDUCTORNAME VARCHAR(75),
	@RECORDTYPE VARCHAR(25),
	@BATCHNUMBER INT,
	@REVISIONMODE INT,
	@TDSERIALNO INT,
	@FILLER6 VARCHAR(1),
	@TAN VARCHAR(10),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@STATEID INT,
	@PINCODE VARCHAR(6),
	@TOTALTDSTCSAMTDEDUCTED INT,
	@FILLER7 VARCHAR(1),
	@GOVTADDDDOREGNNO VARCHAR(20),
	@GOVTADDDDOCODE VARCHAR(20),
	@EMAILADDRESS VARCHAR(75),
	@TOTALTDSTCSAMTREMITTED INT,
	@FORMTYPE VARCHAR(10),
	@DDOMAPPINGUPDATE VARCHAR(20),
	@DDOSERIALNO INT,
	@FILLER8 VARCHAR(1),
	@FILLER9 VARCHAR(1),
	@FILLER10 VARCHAR(1),
	@FILLER11 VARCHAR(1),
	@FILLER12 VARCHAR(1),
	@FILLER13 VARCHAR(1),
	@FILLER14 VARCHAR(1),
	@FILLER15 VARCHAR(1),
	@TRANSACTIONDETAILRECHASH VARCHAR(20),
	@CORRECTIONSTATUS SMALLINT,
	@FORMID INT
AS
	BEGIN
		IF(@DDODETID=-1)
			BEGIN
				IF((SELECT COUNT(BHID) FROM CORRDEDUCTORF24G WITH(NOLOCK) WHERE BRANCHID=@BRANCHID)!=0)
					BEGIN
						SELECT @MONTHID = MONTHID FROM CORRDEDUCTORF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID;
							BEGIN
								DECLARE @BHID INT
								SELECT @BHID = BHID FROM CORRDEDUCTORF24G WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID;
								DECLARE @QUARTER INT
								IF (@MONTHID = 4 OR @MONTHID = 5 OR @MONTHID = 6)
									SET @QUARTER = 1				 
								ELSE IF (@MONTHID  = 7 OR @MONTHID = 8 OR @MONTHID = 9)
									SET @QUARTER = 2
								ELSE IF (@MONTHID = 10 OR @MONTHID = 11 OR @MONTHID = 12)
									SET @QUARTER = 3
								ELSE 
									SET @QUARTER = 4
								SELECT @DEDUCTORID =  D.DEDUCTORID FROM 	DEDUCTOR D WITH(NOLOCK) 
								INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID                                                                                                                                            
								INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)   ON CB.BRANCHID  = BD.BRANCHID
								WHERE
									(CB.BRANCHID IN 
										(SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) 
											WHERE PARENTBRANCHID =@BRANCHID
										)
										OR CB.BRANCHID = @BRANCHID
									)
								AND BD.QUARTER = @QUARTER AND TAN = @TAN 
								INSERT INTO CORRDDODETAILSF24G
								(BHID,BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,BATCHNUMBER,REVISIONMODE,TDSERIALNO,FILLER6,TAN
								,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,TOTALTDSTCSAMTDEDUCTED,FILLER7,GOVTADDDDOREGNNO
								,GOVTADDDDOCODE,EMAILADDRESS,TOTALTDSTCSAMTREMITTED,FORMTYPE,DDOMAPPINGUPDATE,DDOSERIALNO,FILLER8,FILLER9,FILLER10
								,FILLER11,FILLER12,FILLER13,FILLER14,FILLER15,TRANSACTIONDETAILRECHASH,CORRECTIONSTATUS,FORMID)
								VALUES
								(@BHID,@BRANCHID,@MONTHID,@DEDUCTORID,@DEDUCTORNAME,@RECORDTYPE,@BATCHNUMBER,@REVISIONMODE,@TDSERIALNO
								,@FILLER6,@TAN,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@TOTALTDSTCSAMTDEDUCTED
								,@FILLER7,@GOVTADDDDOREGNNO,@GOVTADDDDOCODE,@EMAILADDRESS,@TOTALTDSTCSAMTREMITTED,@FORMTYPE,@DDOMAPPINGUPDATE
								,@DDOSERIALNO,@FILLER8,@FILLER9,@FILLER10,@FILLER11,@FILLER12,@FILLER13,@FILLER14,@FILLER15,@TRANSACTIONDETAILRECHASH,@CORRECTIONSTATUS,@FORMID)
								SET @DDODETID = SCOPE_IDENTITY();
							END  
					END		
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_SAVEUPDATEDCORRTRANSACTIONDETAILS')
DROP PROCEDURE USP_F24G_SAVEUPDATEDCORRTRANSACTIONDETAILS
GO
CREATE PROCEDURE [USP_F24G_SAVEUPDATEDCORRTRANSACTIONDETAILS]
@FORMTYPE VARCHAR(10),
@BRANCHID INT,
@MONTHID INT,
@DEDUCTORID INT,
@DEDUCTORNAME VARCHAR(75),
@TAN VARCHAR(10),
@ADDRESS1 VARCHAR(25),
@ADDRESS2 VARCHAR(25),
@ADDRESS3 VARCHAR(25),
@ADDRESS4 VARCHAR(25),
@ADDRESS5 VARCHAR(25),
@STATEID INT,
@PINCODE VARCHAR(6),
@TOTALTDSTCSAMTDEDUCTED INT,
@GOVTADDDDOREGNNO VARCHAR(20),
@GOVTADDDDOCODE VARCHAR(20),
@EMAILADDRESS VARCHAR(75),
@TOTALTDSTCSAMTREMITTED INT,
@CORRECTIONSTATUS SMALLINT,
@FORMID INT
AS
BEGIN
IF(@CORRECTIONSTATUS = 2)
BEGIN
    IF EXISTS(SELECT * FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND DEDUCTORID = @DEDUCTORID AND CORRECTIONSTATUS = 2 AND FORMID = @FORMID)
     BEGIN
            UPDATE CORRDDODETAILSF24G
				SET BRANCHID = @BRANCHID,DEDUCTORID = @DEDUCTORID,DEDUCTORNAME = @DEDUCTORNAME,TAN = @TAN,
					ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,ADDRESS5 = @ADDRESS5,
					STATEID  = @STATEID,PINCODE = @PINCODE,TOTALTDSTCSAMTDEDUCTED = @TOTALTDSTCSAMTDEDUCTED,
					GOVTADDDDOREGNNO = @GOVTADDDDOREGNNO,GOVTADDDDOCODE = @GOVTADDDDOCODE,EMAILADDRESS = @EMAILADDRESS,
					TOTALTDSTCSAMTREMITTED = @TOTALTDSTCSAMTREMITTED,FORMTYPE = @FORMTYPE,FORMID = @FORMID
	         WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = @CORRECTIONSTATUS AND DEDUCTORID = @DEDUCTORID AND FORMID = @FORMID           
	  END	
       ELSE
       BEGIN
           INSERT INTO CORRDDODETAILSF24G(BHID,BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,BATCHNUMBER,REVISIONMODE,TDSERIALNO,FILLER6,TAN
					,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,TOTALTDSTCSAMTDEDUCTED,FILLER7,GOVTADDDDOREGNNO
					,GOVTADDDDOCODE,EMAILADDRESS,TOTALTDSTCSAMTREMITTED,FORMTYPE,DDOMAPPINGUPDATE,DDOSERIALNO,FILLER8,FILLER9,FILLER10
					,FILLER11,FILLER12,FILLER13,FILLER14,FILLER15,TRANSACTIONDETAILRECHASH,CORRECTIONSTATUS,FORMID) 
		     SELECT BHID,BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,BATCHNUMBER,REVISIONMODE,TDSERIALNO,FILLER6,TAN
					,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,TOTALTDSTCSAMTDEDUCTED,FILLER7,GOVTADDDDOREGNNO
					,GOVTADDDDOCODE,EMAILADDRESS,TOTALTDSTCSAMTREMITTED,FORMTYPE,DDOMAPPINGUPDATE,DDOSERIALNO,FILLER8,FILLER9,FILLER10
					,FILLER11,FILLER12,FILLER13,FILLER14,FILLER15,TRANSACTIONDETAILRECHASH,@CORRECTIONSTATUS,@FORMID FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1 AND DEDUCTORID = @DEDUCTORID AND FORMID = @FORMID
			 UPDATE CORRDDODETAILSF24G
				SET BRANCHID = @BRANCHID,DEDUCTORID = @DEDUCTORID,DEDUCTORNAME = @DEDUCTORNAME,TAN = @TAN,
					ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,ADDRESS5 = @ADDRESS5,
					STATEID  = @STATEID,PINCODE = @PINCODE,TOTALTDSTCSAMTDEDUCTED = @TOTALTDSTCSAMTDEDUCTED,
					GOVTADDDDOREGNNO = @GOVTADDDDOREGNNO,GOVTADDDDOCODE = @GOVTADDDDOCODE,EMAILADDRESS = @EMAILADDRESS,
					TOTALTDSTCSAMTREMITTED = @TOTALTDSTCSAMTREMITTED,FORMTYPE = @FORMTYPE,CORRECTIONSTATUS = @CORRECTIONSTATUS,FORMID = @FORMID
	         WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2 AND DEDUCTORID = @DEDUCTORID AND FORMID = @FORMID
       END
      END
      ELSE IF(@CORRECTIONSTATUS = 5)
      BEGIN       
              DECLARE @BHID INT;     
              DECLARE @QUERY NVARCHAR(MAX);
              DECLARE @TDSERIALNO INT;
     IF EXISTS(SELECT * FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND DEDUCTORID = @DEDUCTORID AND CORRECTIONSTATUS = 5 AND FORMID = @FORMID)
     BEGIN
      UPDATE CORRDDODETAILSF24G
				SET BRANCHID = @BRANCHID,DEDUCTORID = @DEDUCTORID,DEDUCTORNAME = @DEDUCTORNAME,TAN = @TAN,
					ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,ADDRESS5 = @ADDRESS5,
					STATEID  = @STATEID,PINCODE = @PINCODE,TOTALTDSTCSAMTDEDUCTED = @TOTALTDSTCSAMTDEDUCTED,
					GOVTADDDDOREGNNO = @GOVTADDDDOREGNNO,GOVTADDDDOCODE = @GOVTADDDDOCODE,EMAILADDRESS = @EMAILADDRESS,
					TOTALTDSTCSAMTREMITTED = @TOTALTDSTCSAMTREMITTED,FORMTYPE = @FORMTYPE,FORMID = @FORMID
	         WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = @CORRECTIONSTATUS AND DEDUCTORID = @DEDUCTORID AND FORMID = @FORMID
     END
     ELSE
     BEGIN
              SELECT @BHID = BHID FROM CORRDEDUCTORF24G  WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID --AND FORMID = @FORMID;
              SELECT @TDSERIALNO = MAX(TDSERIALNO) + 1 FROM CORRDDODETAILSF24G WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID -- AND FORMID = @FORMID;
SELECT DISTINCT @BHID AS BHID,@TDSERIALNO AS TDSERIALNO,CDDOD.RECORDTYPE,CDDOD.BATCHNUMBER,
               CDDOD.REVISIONMODE,CDDOD.DDOSERIALNO,@BRANCHID AS BRANCHID,@MONTHID AS MONTHID,@DEDUCTORID AS DEDUCTORID,
               @DEDUCTORNAME AS DEDUCTORNAME,@TAN AS TAN,@ADDRESS1 AS ADDRESS1,@ADDRESS2 AS ADDRESS2,@ADDRESS3 AS ADDRESS3,
               @ADDRESS4 AS ADDRESS4,@ADDRESS5 AS ADDRESS5,@STATEID AS STATEID,@PINCODE AS PINCODE,
               @TOTALTDSTCSAMTDEDUCTED AS TOTALTDSTCSAMTDEDUCTED,@GOVTADDDDOREGNNO AS GOVTADDDDOREGNNO,@GOVTADDDDOCODE AS GOVTADDDDOCODE,
               @EMAILADDRESS AS EMAILADDRESS,@TOTALTDSTCSAMTREMITTED AS TOTALTDSTCSAMTREMITTED,@FORMTYPE AS FORMTYPE,@CORRECTIONSTATUS AS CORRECTIONSTATUS,@FORMID AS FORMID                                   
               INTO #TEMP FROM CORRDDODETAILSF24G CDDOD WITH(NOLOCK) 
               WHERE CDDOD.BRANCHID = @BRANCHID
               AND   CDDOD.BHID     = @BHID
               AND   CDDOD.FORMID   = @FORMID
	  INSERT INTO CORRDDODETAILSF24G
	  (BHID,BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,BATCHNUMBER,REVISIONMODE,TDSERIALNO,TAN,
		ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,TOTALTDSTCSAMTDEDUCTED,
		GOVTADDDDOREGNNO,GOVTADDDDOCODE,EMAILADDRESS,TOTALTDSTCSAMTREMITTED,FORMTYPE,DDOSERIALNO,
		CORRECTIONSTATUS,FORMID
	  ) 
	  SELECT 
	  	BHID,BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,BATCHNUMBER,REVISIONMODE,TDSERIALNO,TAN,
		ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,TOTALTDSTCSAMTDEDUCTED,
		GOVTADDDDOREGNNO,GOVTADDDDOCODE,EMAILADDRESS,TOTALTDSTCSAMTREMITTED,FORMTYPE,DDOSERIALNO,
		CORRECTIONSTATUS,FORMID   FROM #TEMP	        
      END
    END       
    ----------------------------------------------------------------
    IF(@CORRECTIONSTATUS = 4)
BEGIN
    IF EXISTS(SELECT * FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND DEDUCTORID = @DEDUCTORID AND CORRECTIONSTATUS = 4 AND FORMID = @FORMID)
     BEGIN
            UPDATE CORRDDODETAILSF24G
				SET BRANCHID = @BRANCHID,DEDUCTORID = @DEDUCTORID,DEDUCTORNAME = @DEDUCTORNAME,TAN = @TAN,
					ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,ADDRESS5 = @ADDRESS5,
					STATEID  = @STATEID,PINCODE = @PINCODE,TOTALTDSTCSAMTDEDUCTED = @TOTALTDSTCSAMTDEDUCTED,
					GOVTADDDDOREGNNO = @GOVTADDDDOREGNNO,GOVTADDDDOCODE = @GOVTADDDDOCODE,EMAILADDRESS = @EMAILADDRESS,
					TOTALTDSTCSAMTREMITTED = @TOTALTDSTCSAMTREMITTED,FORMTYPE = @FORMTYPE,FORMID = @FORMID
	         WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = CORRECTIONSTATUS AND DEDUCTORID = @DEDUCTORID AND FORMID = @FORMID            
	  END	
       ELSE
       BEGIN
           INSERT INTO CORRDDODETAILSF24G(BHID,BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,BATCHNUMBER,REVISIONMODE,TDSERIALNO,FILLER6,TAN
					,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,TOTALTDSTCSAMTDEDUCTED,FILLER7,GOVTADDDDOREGNNO
					,GOVTADDDDOCODE,EMAILADDRESS,TOTALTDSTCSAMTREMITTED,FORMTYPE,DDOMAPPINGUPDATE,DDOSERIALNO,FILLER8,FILLER9,FILLER10
					,FILLER11,FILLER12,FILLER13,FILLER14,FILLER15,TRANSACTIONDETAILRECHASH,CORRECTIONSTATUS,FORMID) 
		     SELECT BHID,BRANCHID,MONTHID,DEDUCTORID,DEDUCTORNAME,RECORDTYPE,BATCHNUMBER,REVISIONMODE,TDSERIALNO,FILLER6,TAN
					,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,TOTALTDSTCSAMTDEDUCTED,FILLER7,GOVTADDDDOREGNNO
					,GOVTADDDDOCODE,EMAILADDRESS,TOTALTDSTCSAMTREMITTED,FORMTYPE,DDOMAPPINGUPDATE,DDOSERIALNO,FILLER8,FILLER9,FILLER10
					,FILLER11,FILLER12,FILLER13,FILLER14,FILLER15,TRANSACTIONDETAILRECHASH,@CORRECTIONSTATUS,@FORMID FROM CORRDDODETAILSF24G WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 1 AND DEDUCTORID = @DEDUCTORID AND FORMID = @FORMID
			 UPDATE CORRDDODETAILSF24G
				SET BRANCHID = @BRANCHID,DEDUCTORID = @DEDUCTORID,DEDUCTORNAME = @DEDUCTORNAME,TAN = @TAN,
					ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,ADDRESS5 = @ADDRESS5,
					STATEID  = @STATEID,PINCODE = @PINCODE,TOTALTDSTCSAMTDEDUCTED = @TOTALTDSTCSAMTDEDUCTED,
					GOVTADDDDOREGNNO = @GOVTADDDDOREGNNO,GOVTADDDDOCODE = @GOVTADDDDOCODE,EMAILADDRESS = @EMAILADDRESS,
					TOTALTDSTCSAMTREMITTED = @TOTALTDSTCSAMTREMITTED,FORMTYPE = @FORMTYPE,CORRECTIONSTATUS = @CORRECTIONSTATUS
	         WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS = 2 AND DEDUCTORID = @DEDUCTORID-- AND FORMID = @FORMID
       END
      END
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_UNDOF24GCORRDEDUCTORCHANGES')
DROP PROCEDURE USP_F24G_UNDOF24GCORRDEDUCTORCHANGES
GO
CREATE PROCEDURE [USP_F24G_UNDOF24GCORRDEDUCTORCHANGES]
	@BRANCHID INT,
	@MONTHID INT
AS
	BEGIN
		DELETE FROM CORRDEDUCTORF24G 
		WHERE  BRANCHID = @BRANCHID AND MONTHID = @MONTHID AND CORRECTIONSTATUS <> 1;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_UPDATECORRECTIONCANCEL')
DROP PROCEDURE USP_F24G_UPDATECORRECTIONCANCEL
GO
-------------------END OF USP_F24G_UNDOF24GCORRDEDUCTORCHANGES
-------------------START OF USP_F24G_UPDATECORRECTIONCANCEL
CREATE PROCEDURE [USP_F24G_UPDATECORRECTIONCANCEL]
@BRANCHID INT,
@MONTHID INT
AS
BEGIN
       UPDATE CORRDDODETAILSF24G 
       SET CORRECTIONSTATUS = 6
       WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID
       UPDATE CORRDEDUCTORF24G
       SET CORRECTIONSTATUS = 6
       WHERE BRANCHID  = @BRANCHID AND MONTHID = @MONTHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_UPDATECORRECTIONDETAILS')
DROP PROCEDURE USP_F24G_UPDATECORRECTIONDETAILS
GO
-------------------END OF USP_F24G_UPDATECORRECTIONCANCEL
-------------------START OF USP_F24G_UPDATECORRECTIONDETAILS
CREATE PROCEDURE [USP_F24G_UPDATECORRECTIONDETAILS]
				@BRANCHID INT,
				@MONTHID SMALLINT,
				@REVISENUMBER INT,
				@ISVALIDCORRERETURN BIT,
				@ISFINALUPDATE BIT,
				@ISCANCELLED BIT
				--@FILEDDATE SMALLINT
AS
BEGIN
UPDATE CORRECTIONDETAILSF24G SET ISVALIDCORRERETURN=@ISVALIDCORRERETURN,
							     ISFINALUPDATE =@ISFINALUPDATE,
								 ISCANCELLED=@ISCANCELLED
							 --FILEDDATE=@FILEDDATE
						   WHERE BRANCHID     = @BRANCHID 
						   AND   MONTHID      = @MONTHID
						   AND   REVISENUMBER = @REVISENUMBER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_UPDATEF24GTDDATA')
DROP PROCEDURE USP_F24G_UPDATEF24GTDDATA
GO
CREATE PROCEDURE [USP_F24G_UPDATEF24GTDDATA]
	@TDDATA NVARCHAR(MAX),
	@BRANCHID INT,
	@FORMID INT,
	@MONTHID INT,
	@DEDUCTORID INT
AS
	BEGIN
		UPDATE FORM24G SET TDDATA = @TDDATA
		WHERE 
			BRANCHID = @BRANCHID
			AND FORMID = @FORMID
			AND MONTHID	= @MONTHID
			AND DEDUCTORID = @DEDUCTORID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_F24G_UPDATEFORM24GDDODEDUCTORFORFVUIMPORT')
DROP PROCEDURE USP_F24G_UPDATEFORM24GDDODEDUCTORFORFVUIMPORT
GO
CREATE PROCEDURE [USP_F24G_UPDATEFORM24GDDODEDUCTORFORFVUIMPORT]  
@FORM24GID  INT,     
@TOTALDEDUCTED  NUMERIC(13,2),    
@TOTALREMITTED  NUMERIC(13,2)  
AS    
BEGIN    
    IF @FORM24GID != -1    
    UPDATE FORM24G SET TOTALDEDUCTED =  @TOTALDEDUCTED,    
                       TOTALREMITTED =  @TOTALREMITTED  
                 WHERE  FORM24GID     =  @FORM24GID;        
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_FI5GH_UPDATEUINFYTAN')
DROP PROCEDURE USP_FI5GH_UPDATEUINFYTAN
GO
CREATE PROCEDURE [dbo].[USP_FI5GH_UPDATEUINFYTAN]
@BRANCHID INT,
@QUARTER INT
AS
BEGIN
	SELECT BRANCHID, CAST(FINANCIALYEAR AS VARCHAR) + SUBSTRING(CAST(FINANCIALYEAR+1 AS VARCHAR),3,2) + TAN FYTAN
		INTO #BRFYTAN
			FROM BRANCHDEDUCTORS B
			INNER JOIN DEDUCTOR D
				ON D.DEDUCTORID = B.DEDUCTORID
		WHERE QUARTER = 1
	IF(@BRANCHID = -1)
	BEGIN
		UPDATE FORM15GBASIC SET UNIQUEIDNUMBER = UNIQUEIDNUMBER + C.FYTAN
			FROM FORM15GBASIC B
			INNER JOIN #BRFYTAN C ON B.BRANCHID= C.BRANCHID
		WHERE LEN(B.UNIQUEIDNUMBER) = 10
		UPDATE FORM15HBASIC SET UNIQUEIDNUMBER = UNIQUEIDNUMBER + C.FYTAN
			FROM FORM15HBASIC B
			INNER JOIN #BRFYTAN C ON B.BRANCHID= C.BRANCHID
		WHERE LEN(B.UNIQUEIDNUMBER) = 10
	END
	ELSE
	BEGIN
		UPDATE FORM15GBASIC SET UNIQUEIDNUMBER = UNIQUEIDNUMBER + C.FYTAN
			FROM FORM15GBASIC B
			INNER JOIN #BRFYTAN C ON B.BRANCHID= C.BRANCHID
		WHERE LEN(B.UNIQUEIDNUMBER) = 10 AND BRANCHID = @BRANCHID
		UPDATE FORM15HBASIC SET UNIQUEIDNUMBER = UNIQUEIDNUMBER + C.FYTAN
			FROM FORM15HBASIC B
			INNER JOIN #BRFYTAN C ON B.BRANCHID= C.BRANCHID
		WHERE LEN(B.UNIQUEIDNUMBER) = 10 AND BRANCHID = @BRANCHID
	END
DROP TABLE #BRFYTAN
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_FORM24G_GETALLDEDUCTORSAUTOCOMPLETE')
DROP PROCEDURE USP_FORM24G_GETALLDEDUCTORSAUTOCOMPLETE
GO
CREATE PROCEDURE [USP_FORM24G_GETALLDEDUCTORSAUTOCOMPLETE]
@BRANCHID INT,
@PREFIXTEXT NVARCHAR(MAX),
@RECORDCOUNT INT
AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
	SET @QUERY = 'SELECT D.DEDUCTORNAME + ''-'' + D.TAN, D.DEDUCTORID
FROM 
	DEDUCTOR D WITH(NOLOCK)
	INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID                                                                                                                                            
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID
WHERE
	(CB.BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WHERE PARENTBRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ' OR CB.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+ ' 
	))AND BD.QUARTER = 1
	AND D.DEDUCTORNAME LIKE '''+ @PREFIXTEXT+'''';
	--EXEC SP_EXECUTESQL @QUERY;
	PRINT @QUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_GNK_Sample_Procedure_4')
DROP PROCEDURE USP_GNK_Sample_Procedure_4
GO
CREATE PROCEDURE USP_GNK_Sample_Procedure_4
AS
BEGIN
	SELECT * FROM DEDUCTIONDETAIL	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ALTERDATABASE')
DROP PROCEDURE USP_TDS_ALTERDATABASE
GO
CREATE PROCEDURE [USP_TDS_ALTERDATABASE]      
@ISSTARTED BIT,      
@DATABASE VARCHAR(MAX)      
AS      
 BEGIN      
   DECLARE @QUERY NVARCHAR(MAX);      
  IF(@ISSTARTED = 0)      
   BEGIN      
     SET @QUERY='USE MASTER;      
             ALTER DATABASE '+ CAST(@DATABASE AS VARCHAR) + ' SET RECOVERY FULL'      
   END      
  ELSE      
   BEGIN      
    SET @QUERY='USE MASTER;      
            ALTER DATABASE '+ CAST(@DATABASE AS VARCHAR) + ' SET RECOVERY BULK_LOGGED';      
   END      
   EXEC SP_EXECUTESQL @QUERY;      
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_AUTOUPDATEDCITTDSADDRESS')
DROP PROCEDURE USP_TDS_AUTOUPDATEDCITTDSADDRESS
GO
CREATE PROCEDURE [USP_TDS_AUTOUPDATEDCITTDSADDRESS]
	@BRANCHID INT
AS
	BEGIN
		IF((SELECT COUNT([TAN]) FROM DEDUCTOR D WITH(NOLOCK) INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID WHERE BD.BRANCHID = @BRANCHID) > 0)
			BEGIN
				DECLARE @TAN VARCHAR(3);
				SELECT TOP 1 @TAN = SUBSTRING([TAN],1,3) FROM DEDUCTOR D WITH(NOLOCK) INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID WHERE BD.BRANCHID = @BRANCHID
				IF((SELECT COUNT(ID) FROM CITTDS WHERE RCCNAME = @TAN) > 0)
					BEGIN 
						IF((SELECT COUNT(ID) FROM CITTDSBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID) = 0)
							BEGIN /*INSERT NEW RECORD IN CITTDSBRANCH*/
								INSERT INTO CITTDSBRANCH(BRANCHID,ADDRESS1,ADDRESS2,ADDRESS3,CITY,PINCODE)
							    SELECT TOP 1 @BRANCHID,ADDRESS1,ADDRESS2,ADDRESS3,CITY,PINCODE FROM CITTDS WITH(NOLOCK) WHERE RCCNAME = @TAN 
							END
						ELSE
							BEGIN/*UPDATE EXISTING RECORD SINCE RECORD IS ALREADY AVAILABLE*/
								DECLARE @ADDRESS1 VARCHAR(25),@ADDRESS2 VARCHAR(25),@ADDRESS3 VARCHAR(25),@CITY VARCHAR(25),@PINCODE VARCHAR(6);
								SELECT @ADDRESS1=ADDRESS1,@ADDRESS2=ADDRESS2,@ADDRESS3=ADDRESS3,@CITY=CITY,@PINCODE=PINCODE FROM CITTDS WITH(NOLOCK) WHERE RCCNAME = @TAN
								UPDATE CITTDSBRANCH SET ADDRESS1=@ADDRESS1 ,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,CITY=@CITY,PINCODE=@PINCODE WHERE BRANCHID = @BRANCHID
							END
						SELECT BRANCHID,ADDRESS1,ADDRESS2,ADDRESS3,CITY,PINCODE FROM CITTDSBRANCH WHERE BRANCHID = @BRANCHID
					END
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BRANCHESNOTLOGGEDIN')
DROP PROCEDURE USP_TDS_BRANCHESNOTLOGGEDIN
GO
CREATE PROCEDURE USP_TDS_BRANCHESNOTLOGGEDIN    
AS    
BEGIN    
 SELECT (SELECT BRANCHNAME + ' (' + BRANCHCODE + ')' FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = CB.PARENTBRANCHID) PARENT,     
 BRANCHNAME, BRANCHCODE, EMAILADDRESS    
FROM COMPANYBRANCH CB WITH(NOLOCK)     
WHERE CB.BRANCHID IN     
 (    
  SELECT BRANCHID FROM USERMASTER WITH(NOLOCK)    
  WHERE LASTLOGINTIME IS NULL    
   AND BRANCHID NOT IN     
   (    
    SELECT BRANCHID FROM USERMASTER WITH(NOLOCK)     
    WHERE LASTLOGINTIME IS NOT NULL    
   )    
 )    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BRANCHESWITHNOVENDORPAYMENT')
DROP PROCEDURE USP_TDS_BRANCHESWITHNOVENDORPAYMENT
GO
CREATE PROCEDURE [dbo].[USP_TDS_BRANCHESWITHNOVENDORPAYMENT]
@MONTH INT
AS 
BEGIN
	SELECT BRANCHCODE, BRANCHNAME
	FROM COMPANYBRANCH WITH(NOLOCK)
		WHERE BRANCHID NOT IN
		(
		SELECT BRANCHID
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE FORMID = 2
		  AND SECTIONID <> 5
		  AND MONTH(PAYMENTDATE) = @MONTH
		)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BRANCHESWITHVENDORPAYMENT')
DROP PROCEDURE USP_TDS_BRANCHESWITHVENDORPAYMENT
GO
CREATE PROCEDURE [dbo].[USP_TDS_BRANCHESWITHVENDORPAYMENT]
@MONTH INT
AS 
BEGIN
	SELECT BRANCHCODE, BRANCHNAME
	FROM COMPANYBRANCH WITH(NOLOCK)
		WHERE BRANCHID IN
		(
		SELECT BRANCHID
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE FORMID = 2
		  AND SECTIONID <> 5
		  AND MONTH(PAYMENTDATE) = @MONTH
		)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BULKDELETEAUTOBLOCK')
DROP PROCEDURE USP_TDS_BULKDELETEAUTOBLOCK
GO
CREATE PROCEDURE [USP_TDS_BULKDELETEAUTOBLOCK]
@BRANCHID INT
AS
BEGIN
SELECT COUNT(*) FROM CHALLANDETAIL CD WITH(NOLOCK)
LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID=DCL.CHALLANID
LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID= DCL.DEDUCTIONID
LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON DD.DEDUCTEEID=NE.DEDUCTEEID
LEFT JOIN EMPLOYEE E WITH(NOLOCK) ON DD.DEDUCTEEID= E.DEDUCTEEID
WHERE CD.BRANCHID=@BRANCHID AND CD.ISAUTOGENERATED=1 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BULKDELETEBLOCK')
DROP PROCEDURE USP_TDS_BULKDELETEBLOCK
GO
CREATE PROCEDURE [USP_TDS_BULKDELETEBLOCK] 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT COUNT(DISTINCT CD.CHALLANID) FROM CHALLANDETAIL CD WITH(NOLOCK)
		INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
		INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID
		WHERE CD.BRANCHID = @BRANCHID AND CD.ISAUTOGENERATED = 1
			AND CD.FORMID = @FORMID AND CD.QUARTER = @QUARTER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BULKERETURNBRANCHES')
DROP PROCEDURE USP_TDS_BULKERETURNBRANCHES
GO
CREATE PROCEDURE [dbo].[USP_TDS_BULKERETURNBRANCHES]
	@PAGEINDEX INT,  
	@PAGESIZE INT,  
	@FORMID INT,  
	@QUARTER INT,  
	@BRANCHID INT,
	@ISSB BIT = 0,
	@CURRENTBRANCHID INT = 0
AS  
	BEGIN  
		DECLARE @FIRSTREC INT, @LASTREC INT  
		SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE  
		SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);  
		DECLARE @SQLQUERY NVARCHAR(MAX);
		CREATE TABLE #ERETURNVALIDBRANCHES (BRANCHID INT, FORMID INT, QUARTER INT)
		IF(@ISSB = 1)
		BEGIN
			INSERT INTO #ERETURNVALIDBRANCHES SELECT BRANCHID,FORMID,QUARTER FROM   
			(  
				SELECT DD.BRANCHID,FORMID,QUARTER FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
				ON DD.BRANCHID = CB.BRANCHID
				WHERE CB.PARENTBRANCHID = @CURRENTBRANCHID OR CB.BRANCHID = @CURRENTBRANCHID
				GROUP BY DD.BRANCHID,FORMID,QUARTER  
				UNION  
				(  
					SELECT CD.BRANCHID,FORMID,QUARTER FROM CHALLANDETAIL CD WITH(NOLOCK) 
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
					ON CD.BRANCHID = CB.BRANCHID
					WHERE CB.PARENTBRANCHID = @CURRENTBRANCHID OR CB.BRANCHID = @CURRENTBRANCHID
					--WHERE NOT EXISTS (SELECT BRANCHID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE CD.BRANCHID = DD.BRANCHID GROUP BY BRANCHID)  
					GROUP BY CD.BRANCHID,FORMID,QUARTER  
				)  
			)ED GROUP BY BRANCHID,FORMID,QUARTER   
		END
		ELSE
		BEGIN
			INSERT INTO #ERETURNVALIDBRANCHES SELECT BRANCHID,FORMID,QUARTER FROM   
			(  
				SELECT BRANCHID,FORMID,QUARTER FROM DEDUCTIONDETAIL WITH(NOLOCK) GROUP BY BRANCHID,FORMID,QUARTER  
				UNION  
				(  
					SELECT BRANCHID,FORMID,QUARTER FROM CHALLANDETAIL CD WITH(NOLOCK) 
					--WHERE NOT EXISTS (SELECT BRANCHID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE CD.BRANCHID = DD.BRANCHID GROUP BY BRANCHID)  
					GROUP BY BRANCHID,FORMID,QUARTER  
				)  
			)ED GROUP BY BRANCHID,FORMID,QUARTER   
		END
		SET @SQLQUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #VALIDBRANCHES  
			FROM  
			(  
				SELECT BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,ISNULL(TEMP.TOKENNO,'''')TOKENNO FROM COMPANYBRANCH CB WITH(NOLOCK) 
				INNER JOIN #ERETURNVALIDBRANCHES EVD ON EVD.BRANCHID = CB.BRANCHID   
				INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = EVD.FORMID  
				LEFT JOIN   
				(  
					SELECT BRANCHID,FORMID,QUARTER,ISNULL(TOKENNO,'''')TOKENNO FROM ACKNO WITH(NOLOCK) WHERE ISNULL(TOKENNO,'''') <> ''''  
					UNION  
					SELECT BRANCHID,FORMID,(QUARTER+1)QUARTER,ISNULL(ORGNUM,'''')TOKENNO FROM ACKNO A WITH(NOLOCK) WHERE ISNULL(TOKENNO,'''') = '''' AND QUARTER <> 4 AND
					NOT EXISTS 
					(
						SELECT BRANCHID,FORMID,QUARTER,ISNULL(TOKENNO,'''')TOKENNO FROM ACKNO AA WITH(NOLOCK) WHERE ISNULL(TOKENNO,'''') <> '''' AND AA.BRANCHID = A.BRANCHID AND AA.FORMID = A.FORMID AND AA.QUARTER = (A.QUARTER+1)
					) 
				)TEMP ON EVD.BRANCHID = TEMP.BRANCHID AND EVD.FORMID = TEMP.FORMID AND EVD.QUARTER = TEMP.QUARTER  
			WHERE EVD.QUARTER = '+CAST(@QUARTER AS VARCHAR)  
		IF(@FORMID != -1)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND EVD.FORMID = '+CAST(@FORMID AS VARCHAR)  
			END  
		IF(@BRANCHID != -1)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND EVD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)  
			END  
		SET @SQLQUERY = @SQLQUERY + 'GROUP BY BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,ISNULL(TEMP.TOKENNO,'''') )FINAL ORDER BY BRANCHCODE;SELECT * FROM #VALIDBRANCHES WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);  
		EXEC SP_EXECUTESQL @SQLQUERY;  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BULKERETURNBRANCHESCOUNT')
DROP PROCEDURE USP_TDS_BULKERETURNBRANCHESCOUNT
GO
CREATE PROCEDURE [dbo].[USP_TDS_BULKERETURNBRANCHESCOUNT]
@FORMID INT,
@QUARTER INT,
@BRANCHID INT,
@ISSB BIT = 0,
@CURRENTBRANCHID INT = 0
AS
BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX);
	CREATE TABLE #ERETURNVALIDBRANCHES (BRANCHID INT, FORMID INT, QUARTER INT)
		IF(@ISSB = 1)
		BEGIN
			INSERT INTO #ERETURNVALIDBRANCHES SELECT BRANCHID,FORMID,QUARTER FROM   
			(  
				SELECT DD.BRANCHID,FORMID,QUARTER FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
				ON DD.BRANCHID = CB.BRANCHID
				WHERE CB.PARENTBRANCHID = @CURRENTBRANCHID OR CB.BRANCHID = @CURRENTBRANCHID
				GROUP BY DD.BRANCHID,FORMID,QUARTER  
				UNION  
				(  
					SELECT CD.BRANCHID,FORMID,QUARTER FROM CHALLANDETAIL CD WITH(NOLOCK) 
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
					ON CD.BRANCHID = CB.BRANCHID
					WHERE CB.PARENTBRANCHID = @CURRENTBRANCHID OR CB.BRANCHID = @CURRENTBRANCHID
					--WHERE NOT EXISTS (SELECT BRANCHID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE CD.BRANCHID = DD.BRANCHID GROUP BY BRANCHID)  
					GROUP BY CD.BRANCHID,FORMID,QUARTER  
				)  
			)ED GROUP BY BRANCHID,FORMID,QUARTER   
		END
		ELSE
		BEGIN
			INSERT INTO #ERETURNVALIDBRANCHES SELECT BRANCHID,FORMID,QUARTER FROM   
			(
				SELECT BRANCHID,FORMID,QUARTER FROM DEDUCTIONDETAIL WITH(NOLOCK) GROUP BY BRANCHID,FORMID,QUARTER
				UNION
				(
					SELECT BRANCHID,FORMID,QUARTER FROM CHALLANDETAIL CD WITH(NOLOCK) 
					--WHERE NOT EXISTS (SELECT BRANCHID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE CD.BRANCHID = DD.BRANCHID GROUP BY BRANCHID)
					GROUP BY BRANCHID,FORMID,QUARTER
				)
			)ED GROUP BY BRANCHID,FORMID,QUARTER 
		END 
	SET @SQLQUERY =	'SELECT ID = IDENTITY(INT,1,1),* INTO #VALIDBRANCHES
							  FROM
							  (
								SELECT BRANCHCODE,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,ISNULL(TEMP.TOKENNO,'''')TOKENNO FROM COMPANYBRANCH CB
								INNER JOIN #ERETURNVALIDBRANCHES EVD ON EVD.BRANCHID = CB.BRANCHID 
								INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = EVD.FORMID
								LEFT JOIN 
								(
									SELECT BRANCHID,FORMID,QUARTER,ISNULL(TOKENNO,'''')TOKENNO FROM ACKNO WITH(NOLOCK) WHERE ISNULL(TOKENNO,'''') <> ''''
									UNION
									SELECT BRANCHID,FORMID,(QUARTER+1)QUARTER,ISNULL(ORGNUM,'''')TOKENNO FROM ACKNO A WITH(NOLOCK) WHERE ISNULL(TOKENNO,'''') = '''' AND QUARTER <> 4 AND
									NOT EXISTS 
									(
										SELECT BRANCHID,FORMID,QUARTER,ISNULL(TOKENNO,'''')TOKENNO FROM ACKNO AA WITH(NOLOCK) WHERE ISNULL(TOKENNO,'''') <> '''' AND AA.BRANCHID = A.BRANCHID AND AA.FORMID = A.FORMID AND AA.QUARTER = (A.QUARTER+1)
									) 
							    )TEMP ON EVD.BRANCHID = TEMP.BRANCHID AND EVD.FORMID = TEMP.FORMID AND EVD.QUARTER = TEMP.QUARTER
					WHERE EVD.QUARTER = '+CAST(@QUARTER AS VARCHAR)
	IF(@FORMID != -1)
	BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND EVD.FORMID = '+CAST(@FORMID AS VARCHAR)
	END
	--IF(@QUARTER != -1)
	--BEGIN
	--	SET @SQLQUERY = @SQLQUERY + ' AND EVD.QUARTER = '+CAST(@QUARTER AS VARCHAR)
	--END
	IF(@BRANCHID != -1)
	BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND EVD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)
	END
SET @SQLQUERY = @SQLQUERY + 'GROUP BY BRANCHCODE,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,ISNULL(TEMP.TOKENNO,'''') )FINAL ORDER BY BRANCHCODE;SELECT COUNT(*) FROM #VALIDBRANCHES;'
EXEC SP_EXECUTESQL @SQLQUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BULKERETURNBRANCHESInitiate')
DROP PROCEDURE USP_TDS_BULKERETURNBRANCHESInitiate
GO
CREATE PROCEDURE [dbo].[USP_TDS_BULKERETURNBRANCHESInitiate]
	@PAGEINDEX INT,  
	@PAGESIZE INT,  
	@FORMID INT,  
	@QUARTER INT,  
	@BRANCHID INT,
	@ISVALIDATED BIT,
	@ISSB BIT = 0,
	@CURRENTBRANCHID INT = 0  
AS  
	BEGIN  
		DECLARE @FIRSTREC INT, @LASTREC INT;
		DECLARE @VALIDATED VARCHAR(50);  
		SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE  
		SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);  
		DECLARE @SQLQUERY NVARCHAR(MAX); 
		CREATE TABLE #ERETURNVALIDBRANCHES (BRANCHID INT, FORMID INT, QUARTER INT)
		SELECT BRANCHID, FORMID, QUARTER
		INTO #ERETDONE
		FROM ACKNO
		WHERE LEN(ISNULL(ORGNUM , '')) > 0
			AND FORMID = @FORMID
			AND QUARTER = @QUARTER
		IF(@ISSB = 1)
		BEGIN
			INSERT INTO #ERETURNVALIDBRANCHES SELECT BRANCHID,FORMID,QUARTER FROM   
			(  
				SELECT DD.BRANCHID,FORMID,QUARTER FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
				ON DD.BRANCHID = CB.BRANCHID
				WHERE CB.PARENTBRANCHID = @CURRENTBRANCHID OR CB.BRANCHID = @CURRENTBRANCHID
				GROUP BY DD.BRANCHID,FORMID,QUARTER  
				UNION  
				(  
					SELECT CD.BRANCHID,FORMID,QUARTER FROM CHALLANDETAIL CD WITH(NOLOCK) 
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
					ON CD.BRANCHID = CB.BRANCHID
					WHERE CB.PARENTBRANCHID = @CURRENTBRANCHID OR CB.BRANCHID = @CURRENTBRANCHID
					--WHERE NOT EXISTS (SELECT BRANCHID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE CD.BRANCHID = DD.BRANCHID GROUP BY BRANCHID)  
					GROUP BY CD.BRANCHID,FORMID,QUARTER  
				)  
			)ED GROUP BY BRANCHID,FORMID,QUARTER
			EXCEPT SELECT BRANCHID, FORMID, QUARTER FROM #ERETDONE   
		END
		ELSE
		BEGIN 
			INSERT INTO #ERETURNVALIDBRANCHES SELECT BRANCHID,FORMID,QUARTER FROM   
			(  
				SELECT BRANCHID,FORMID,QUARTER FROM DEDUCTIONDETAIL WITH(NOLOCK) GROUP BY BRANCHID,FORMID,QUARTER  
				UNION  
				(  
					SELECT BRANCHID,FORMID,QUARTER FROM CHALLANDETAIL CD WITH(NOLOCK) 
					GROUP BY BRANCHID,FORMID,QUARTER  
				)  
			)ED 
			GROUP BY BRANCHID, FORMID, QUARTER  
			EXCEPT SELECT BRANCHID, FORMID, QUARTER FROM #ERETDONE
		END
		SET @SQLQUERY = 'SELECT BRANCHID, FORMID, QUARTER, ISVALID,TOKENNO
		INTO #ISVALIDATED
		FROM ACKNO
		WHERE FORMID = '+CAST(@FORMID AS VARCHAR)+'
			AND QUARTER = '+CAST(@QUARTER AS VARCHAR)+' 
		SELECT ID = IDENTITY(INT,1,1),* INTO #VALIDBRANCHES  
			FROM  
			(  
				SELECT BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,IV.ISVALID,ISNULL(IV.TOKENNO,'''') TOKENNO FROM COMPANYBRANCH CB WITH(NOLOCK) 
				INNER JOIN #ERETURNVALIDBRANCHES EVD ON EVD.BRANCHID = CB.BRANCHID   
				INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = EVD.FORMID  
				LEFT JOIN #ISVALIDATED IV ON EVD.BRANCHID = IV.BRANCHID AND EVD.FORMID = IV.FORMID AND EVD.QUARTER = IV.QUARTER  
			WHERE EVD.QUARTER = '+CAST(@QUARTER AS VARCHAR)  
		IF(@FORMID != -1)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND EVD.FORMID = '+CAST(@FORMID AS VARCHAR)  
			END  
		IF(@BRANCHID != -1)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND EVD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)  
			END
		IF (@ISVALIDATED != 1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND IV.ISVALID = 0'
			END   
		SET @SQLQUERY = @SQLQUERY + 'GROUP BY BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,IV.ISVALID,ISNULL(IV.TOKENNO,''''))FINAL ORDER BY BRANCHCODE;SELECT * FROM #VALIDBRANCHES WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);  
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BULKERETURNBRANCHESTest')
DROP PROCEDURE USP_TDS_BULKERETURNBRANCHESTest
GO
CREATE PROCEDURE USP_TDS_BULKERETURNBRANCHESTest			---USP_TDS_BULKERETURNBRANCHESTest 1,20000,-1,1,-1,0
	@PAGEINDEX INT,  
	@PAGESIZE INT,  
	@FORMID INT,  
	@QUARTER INT,  
	@BRANCHID INT,
	@CURRENTBRANCHID INT = 0
AS  
	BEGIN  
		DECLARE @FIRSTREC INT, @LASTREC INT  
		SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE  
		SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);  
		DECLARE @SQLQUERY NVARCHAR(MAX);
		CREATE TABLE #ERETURNVALIDBRANCHES (BRANCHID INT, FORMID INT, QUARTER INT)
		INSERT INTO #ERETURNVALIDBRANCHES 
		SELECT BRANCHID,FORMID,QUARTER 
		FROM   
			(  
				SELECT BRANCHID,FORMID,QUARTER 
				FROM DEDUCTIONDETAIL WITH(NOLOCK) 
				GROUP BY BRANCHID,FORMID,QUARTER  
				UNION  
					(  
						SELECT BRANCHID,FORMID,QUARTER 
						FROM CHALLANDETAIL CD WITH(NOLOCK)  
						GROUP BY BRANCHID,FORMID,QUARTER  
					)  
			)ED 
		GROUP BY BRANCHID,FORMID,QUARTER   
		SET @SQLQUERY = 'SELECT ID = IDENTITY(INT,1,1),* 
						INTO #VALIDBRANCHES  
						FROM  
						(  
							SELECT BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,
								FORMNAME,EVD.QUARTER,ISNULL(TEMP.TOKENNO,'''')TOKENNO 
							FROM COMPANYBRANCH CB WITH(NOLOCK) 
								INNER JOIN #ERETURNVALIDBRANCHES EVD ON EVD.BRANCHID = CB.BRANCHID   
								INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = EVD.FORMID  
								LEFT JOIN   
								(  
									SELECT BRANCHID,FORMID,QUARTER,ISNULL(TOKENNO,'''')TOKENNO 
									FROM ACKNO WITH(NOLOCK) 
									WHERE ISNULL(TOKENNO,'''') <> ''''  
									UNION  
									SELECT BRANCHID,FORMID,(QUARTER+1)QUARTER,ISNULL(ORGNUM,'''')TOKENNO 
									FROM ACKNO A WITH(NOLOCK) 
									WHERE ISNULL(TOKENNO,'''') = '''' AND QUARTER <> 4 AND
									NOT EXISTS 
									(
										SELECT BRANCHID,FORMID,QUARTER,ISNULL(TOKENNO,'''')TOKENNO 
										FROM ACKNO AA WITH(NOLOCK) 
										WHERE ISNULL(TOKENNO,'''') <> '''' AND AA.BRANCHID = A.BRANCHID 
											AND AA.FORMID = A.FORMID AND AA.QUARTER = (A.QUARTER+1)
									) 
								)TEMP ON EVD.BRANCHID = TEMP.BRANCHID AND EVD.FORMID = TEMP.FORMID AND EVD.QUARTER = TEMP.QUARTER' 
		IF(@FORMID != -1)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND EVD.FORMID = '+CAST(@FORMID AS VARCHAR)  
			END  
		IF(@QUARTER != -1)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND EVD.QUARTER = '+CAST(@QUARTER AS VARCHAR)  
			END
		IF(@BRANCHID != -1)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND EVD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)  
			END  
		SET @SQLQUERY = @SQLQUERY + ' GROUP BY BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,ISNULL(TEMP.TOKENNO,'''') )FINAL 
					ORDER BY BRANCHCODE;
					SELECT * FROM #VALIDBRANCHES 
					WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);  
		EXEC SP_EXECUTESQL @SQLQUERY; 
		--PRINT  @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_BulkEreturnISREQCheck')
DROP PROCEDURE USP_TDS_BulkEreturnISREQCheck
GO
CREATE PROCEDURE [dbo].[USP_TDS_BulkEreturnISREQCheck]
@ISSB BIT,
@BRANCHID INT
AS
BEGIN
	CREATE TABLE #REQCHECK(FORM VARCHAR(4),QUARTER VARCHAR(2))
	IF(@ISSB=1)
		BEGIN
			INSERT INTO #REQCHECK
			SELECT 
				CASE WHEN FORMID = 1 THEN '24Q'
					 WHEN FORMID = 2 THEN '26Q'
					WHEN FORMID = 3 THEN '27Q'
				ELSE '27EQ' END FORM,
				'Q' + CAST(QUARTER AS VARCHAR) QUARTER  
			FROM ACKNO AK WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CH WITH(NOLOCK)
				ON AK.BRANCHID=CH.BRANCHID
			WHERE ISREQACTIVE = 1 AND (CH.PARENTBRANCHID = @BRANCHID OR CH.BRANCHID = @BRANCHID)
		END
	ELSE
		BEGIN
			INSERT INTO #REQCHECK
			SELECT 
				CASE WHEN FORMID = 1 THEN '24Q'
					 WHEN FORMID = 2 THEN '26Q'
					WHEN FORMID = 3 THEN '27Q'
				ELSE '27EQ' END FORM,
				'Q' + CAST(QUARTER AS VARCHAR) QUARTER  
			FROM ACKNO WITH(NOLOCK)
			WHERE ISREQACTIVE = 1
		END
	SELECT CAST(FORM AS VARCHAR(20)) + ':' + CAST(QUARTER AS VARCHAR(20))  AS FORMQUARTER, COUNT(FORM) BRCOUNT
	INTO #REQCHECKCOUNT
	FROM #REQCHECK
	GROUP BY FORM,QUARTER
	SELECT FORMQUARTER + ' (' + CAST(BRCOUNT AS VARCHAR(20)) + ')'  AS FORMQUARTER
	FROM #REQCHECKCOUNT
	DROP TABLE #REQCHECKCOUNT
	DROP TABLE #REQCHECK
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CalculateDTFAmount')
DROP PROCEDURE USP_TDS_CalculateDTFAmount
GO
CREATE PROCEDURE USP_TDS_CalculateDTFAmount   
@COMIDS NVARCHAR(MAX)= NULL,  
@MONTHID INT = NULL  
AS  
BEGIN  
 SELECT * INTO #COMID FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')
 SELECT CEILING((S.AMOUNT * 0.25)/100)DTF, SD.NETAMT, SD.NETAMT - CEILING((S.AMOUNT * 0.25)/100)DTQ, EM.COMID, EM.MONTHID, 1 AS PERKID  
 INTO #DTF
 FROM EMPWORKMONTH EM WITH(NOLOCK) 
 INNER JOIN #COMID C ON EM.COMID = C.DATA  
 INNER JOIN SCALE S WITH(NOLOCK) ON S.SCALE = EM.SCALE 
 INNER JOIN SALDETAIL SD WITH(NOLOCK) ON SD.COMID = EM.COMID AND SD.MONTHID = EM.MONTHID 
 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID AND SH.ABBREVATION = 'QTR-RENT'  
 WHERE EM.MONTHID = @MONTHID AND EM.HRAINDI IN (2,5,7) 
  IF OBJECT_ID('TEMPDB..#COMID') IS NOT NULL
	DROP TABLE #COMID
 UPDATE TAXABLEPERQUISITE SET GROSSAMT = D.NETAMT, EXEMPTAMT = D.DTQ, TAXABLEAMT = D.NETAMT - D.DTQ
 FROM TAXABLEPERQUISITE T
 INNER JOIN #DTF D ON T.COMID = D.COMID AND T.MONTHID = D.MONTHID AND D.PERKID = T.PERKID
 INSERT INTO TAXABLEPERQUISITE (MONTHID, COMID, PERKID, GROSSAMT, EXEMPTAMT, TAXABLEAMT) 
 SELECT D.MONTHID, D.COMID, D.PERKID, D.NETAMT, D.DTQ AS EXEMPTAMT, D.NETAMT - D.DTQ AS TAXABLEAMT
 FROM  #DTF D
 LEFT JOIN TAXABLEPERQUISITE T WITH(NOLOCK) ON T.COMID = D.COMID AND T.MONTHID = D.MONTHID AND T.PERKID  = D.PERKID
 WHERE T.TAXABLEPERKID IS NULL 
  IF OBJECT_ID('TEMPDB..#DTF') IS NOT NULL
	DROP TABLE #DTF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHALLANBULKDELETE')
DROP PROCEDURE USP_TDS_CHALLANBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_CHALLANBULKDELETE]
	@BRANCHID INT,    
	@FORMID INT,    
	@QUARTER INT,    
	@CHALLANID INT = NULL,  
	@ISAUDITTRIAL BIT = 0,  
	@AUDITDATE DATETIME = NULL,  
	@USERID INT = NULL,
	@SECTION INT = -1    
AS
	BEGIN   
		SET NOCOUNT ON    
		DECLARE @ISERETURNDONE INT,@SQLQUERY NVARCHAR(MAX);
		DECLARE @TEMPTABLE TABLE(DEDUCTIONID INT, DEDUCTEEID INT, PARTPAYMENTID INT, CHALLANID INT);
		SELECT @ISERETURNDONE = DBO.UDF_TDS_CHECKFORERETURN(@BRANCHID,@FORMID,@QUARTER,@CHALLANID);  
		IF(@ISERETURNDONE = 1)
			BEGIN 
				SELECT -2; 
			END 
		ELSE 
			BEGIN
				SET @SQLQUERY = 'SELECT DD.DEDUCTIONID, DD.DEDUCTEEID, DD.PARTPAYMENTID, CD.CHALLANID FROM CHALLANDETAIL CD WITH(NOLOCK)
							LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID AND CD.BRANCHID = DL.BRANCHID
							LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DL.BRANCHID = DD.BRANCHID
							WHERE CD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND
									  CD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)
				IF(@CHALLANID IS NOT NULL)
					BEGIN	
						SET @SQLQUERY = @SQLQUERY + ' AND CD.CHALLANID = ' +  CAST(@CHALLANID AS VARCHAR)
					END 
				IF(@SECTION <> -1) 
					BEGIN	
						SET @SQLQUERY = @SQLQUERY + ' AND CD.SECTIONID  = ' +  CAST(@SECTION AS VARCHAR)
					END 
				INSERT INTO @TEMPTABLE
				EXEC SP_EXECUTESQL @SQLQUERY
				IF(@FORMID = 1)
					BEGIN 
						DELETE FROM FORM16 
						FROM FORM16 F16
						INNER JOIN @TEMPTABLE T ON F16.DEDUCTEEID = T.DEDUCTEEID
					END
				ELSE
					BEGIN 
						DELETE FROM FORM16A 
						FROM FORM16A F16A
						INNER JOIN @TEMPTABLE T ON F16A.DEDUCTIONID = T.DEDUCTIONID 
					END
				DELETE FROM DEDCHALINK 
				FROM DEDCHALINK DL
				INNER JOIN @TEMPTABLE T ON T.DEDUCTIONID = DL.DEDUCTIONID
				DELETE FROM PARTPAYMENTDETAILS 
				FROM PARTPAYMENTDETAILS PP
				INNER JOIN @TEMPTABLE T ON T.PARTPAYMENTID = PP.PARTPAYMENTID
				WHERE PP.BRANCHID = @BRANCHID AND PP.FORMID = @FORMID AND PP.QUARTER = @QUARTER
				UPDATE DEDUCTIONDETAIL  SET PAYMENTMADE = ORGPAYMENTMADE,INCOMETAX = ORGINCOMETAX,SURCHARGE = ORGSURCHARGE,EDUCATIONCESS = ORGEDUCATIONCESS,TOTALDEDUCTED = ORGTOTALDEDUCTED  
				FROM DEDUCTIONDETAIL DD		
				INNER JOIN @TEMPTABLE T ON T.DEDUCTIONID = DD.DEDUCTIONID
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
				IF(@ISAUDITTRIAL = 1)
					BEGIN
						EXEC USP_TDS_SAVECHALLANAUDITTRAIL @USERID,NULL,3,@AUDITDATE,'', @BRANCHID,@FORMID,@QUARTER   
					END 
				DELETE FROM CHALLANDETAIL 
				FROM CHALLANDETAIL CD
				INNER JOIN @TEMPTABLE T ON CD.CHALLANID = T.CHALLANID
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER;
				SELECT 1
	   END 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ChallanGetInfoAcrossDB')
DROP PROCEDURE USP_TDS_ChallanGetInfoAcrossDB
GO
CREATE PROCEDURE USP_TDS_ChallanGetInfoAcrossDB  
 @BRANCHCODE VARCHAR(10),  
 @FROMDATE VARCHAR(11),  
 @TODATE VARCHAR(11)  
AS  
 BEGIN  
  DECLARE @DBSELECTED VARCHAR(MAX);  
  DECLARE @DBPREV VARCHAR(MAX);  
  DECLARE @FYCURR VARCHAR(7);  
  DECLARE @FYPREV VARCHAR(7);  
  DECLARE @SQLQUERY NVARCHAR(MAX);  
  SELECT @DBSELECTED = DB_NAME();  
  SET @DBPREV = SUBSTRING(@DBSELECTED, 1, LEN(@DBSELECTED) - 4) +   
      CAST(RIGHT(@DBSELECTED, 4) - 1 AS VARCHAR(MAX));  
  SET @FYCURR = CAST(RIGHT(@DBSELECTED, 4) AS VARCHAR(MAX)) + '-' + RIGHT(CAST(RIGHT(@DBSELECTED, 4) + 1 AS VARCHAR(MAX)), 2); -- '2018-19';  
  SET @FYPREV = CAST(RIGHT(@DBPREV, 4) AS VARCHAR(MAX)) + '-' + RIGHT(CAST(RIGHT(@DBPREV, 4) + 1 AS VARCHAR(MAX)), 2); -- '2017-18';  
  SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER (ORDER BY C.CHALLANPAIDDATE) RowNo, *  
   FROM  
   (  
    SELECT   
     ''Quarter '' + CAST(C.QUARTER AS VARCHAR(1)) QTR, ''' + @FYPREV + ''' FY, TS.SECTIONNAME,  
     C.INCOMETAX, C.BANKCHALLANNO BankChallanNumber, C.CHALLANPAIDDATE, C.BRANCHID, CB.BRANCHCODE  
    FROM   
     ' + @DBPREV + '.DBO.CHALLANDETAIL C WITH(NOLOCK)  
      INNER JOIN ' + @DBPREV + '.DBO.TAXSECTIONS TS WITH(NOLOCK)  
       ON C.SECTIONID = TS.SECTIONID  
      INNER JOIN ' + @DBPREV + '.DBO.COMPANYBRANCH CB WITH(NOLOCK)  
       ON C.BRANCHID = CB.BRANCHID  
    WHERE CB.BRANCHCODE = ''' + @BRANCHCODE + '''  
     AND C.CHALLANPAIDDATE BETWEEN ''' + @FROMDATE + ''' AND ''' + @TODATE + '''  
    UNION  
    SELECT   
     ''Quarter '' + CAST(C.QUARTER AS VARCHAR(1)) QTR, ''' + @FYCURR + ''' FY, TS.SECTIONNAME,  
     C.INCOMETAX, C.BANKCHALLANNO BankChallanNumber, C.CHALLANPAIDDATE, C.BRANCHID, CB.BRANCHCODE  
    FROM   
     ' + @DBSELECTED + '.DBO.CHALLANDETAIL C WITH(NOLOCK)  
      INNER JOIN ' + @DBSELECTED + '.DBO.TAXSECTIONS TS WITH(NOLOCK)  
       ON C.SECTIONID = TS.SECTIONID  
      INNER JOIN ' + @DBSELECTED + '.DBO.COMPANYBRANCH CB WITH(NOLOCK)  
       ON C.BRANCHID = CB.BRANCHID  
    WHERE CB.BRANCHCODE = ''' + @BRANCHCODE + '''  
     AND C.CHALLANPAIDDATE BETWEEN ''' + @FROMDATE + ''' AND ''' + @TODATE + '''  
   ) C  
   ORDER BY C.FY, C.QTR';  
  PRINT @SQLQUERY;  
  EXECUTE SP_EXECUTESQL @SQLQUERY;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHALLANNOTCREATEDFORBRANCH')
DROP PROCEDURE USP_TDS_CHALLANNOTCREATEDFORBRANCH
GO
CREATE PROCEDURE USP_TDS_CHALLANNOTCREATEDFORBRANCH
@MONTH INT
AS
BEGIN
      SELECT BRANCHCODE, BRANCHNAME
      FROM 
           COMPANYBRANCH WITH(NOLOCK)
      WHERE
          BRANCHID IN
         (
	      SELECT DD.BRANCHID
	      FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		       INNER JOIN DEDUCTEE D WITH(NOLOCK) 
			       ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID
		       INNER JOIN TAXSECTIONS TS WITH(NOLOCK) 
			       ON TS.SECTIONID = DD.SECTIONID
	      WHERE
		      MONTH(PAYMENTDATE) = @MONTH
		      AND DD.TOTALDEDUCTED > 0
		      AND DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK))
         )
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHALLANNOTCREATEDFORDEDUCTION')
DROP PROCEDURE USP_TDS_CHALLANNOTCREATEDFORDEDUCTION
GO
CREATE PROCEDURE USP_TDS_CHALLANNOTCREATEDFORDEDUCTION
@MONTH INT
AS
BEGIN
       SELECT CB.BRANCHCODE, CB.BRANCHNAME, D.NAME, D.PAN, TS.SECTIONNAME,
              DD.SERIALNO, DD.PAYMENTMADE, DD.PAYMENTDATE, DD.TOTALDEDUCTED, DD.DEDUCTEDDATE, DD.TAXRATE
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
            INNER JOIN DEDUCTEE D WITH(NOLOCK) 
	           ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID
            INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
	           ON CB.BRANCHID = D.BRANCHID
            INNER JOIN TAXSECTIONS TS WITH(NOLOCK) 
	           ON TS.SECTIONID = DD.SECTIONID
       WHERE
          MONTH(PAYMENTDATE) = @MONTH
          AND DD.TOTALDEDUCTED > 0
          AND DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK))
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHALLANPAYMENTCANCELPROCESS')
DROP PROCEDURE USP_TDS_CHALLANPAYMENTCANCELPROCESS
GO
CREATE PROCEDURE [USP_TDS_CHALLANPAYMENTCANCELPROCESS]
AS
	BEGIN
		DELETE FROM DEDCHALINK 
			WHERE CHALLANID IN 
			(SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) 
				WHERE ISAUTOGENERATED = 1 AND CHALLANPAIDDATE IS NULL)
		DELETE FROM CHALLANDETAIL
			WHERE CHALLANID IN 
			(SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) 
				WHERE ISAUTOGENERATED = 1 AND CHALLANPAIDDATE IS NULL)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ChallanSQL_PA')
DROP PROCEDURE USP_TDS_ChallanSQL_PA
GO
CREATE PROCEDURE [dbo].[USP_TDS_ChallanSQL_PA]
@MONTHYEAR INT 
AS
BEGIN
	INSERT INTO PARKEDAMOUNT 
	SELECT @MONTHYEAR AS MONTHYEAR, BRANCHID, '26QI', '' AS ACCOUNTNO, 0 AS AMOUNT FROM
	(
		SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID <> 1
		EXCEPT
		SELECT BRANCHID FROM PARKEDAMOUNT WITH(NOLOCK) WHERE FORMTYPE='26QI' AND MONTHYEAR=@MONTHYEAR
	)P
	INSERT INTO PARKEDAMOUNT 
	SELECT @MONTHYEAR AS MONTHYEAR, BRANCHID, '26QV', '' AS ACCOUNTNO, 0 AS AMOUNT FROM
	(
		SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID <> 1
		EXCEPT
		SELECT BRANCHID FROM PARKEDAMOUNT WITH(NOLOCK) WHERE FORMTYPE='26QV' AND MONTHYEAR=@MONTHYEAR
	)P
	INSERT INTO PARKEDAMOUNT 
	SELECT @MONTHYEAR AS MONTHYEAR, BRANCHID, '27Q', '' AS ACCOUNTNO, 0 AS AMOUNT FROM
	(
		SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID <> 1
		EXCEPT
		SELECT BRANCHID FROM PARKEDAMOUNT WITH(NOLOCK) WHERE FORMTYPE='27Q' AND MONTHYEAR=@MONTHYEAR
	)P
	INSERT INTO PARKEDAMOUNT 
	SELECT @MONTHYEAR AS MONTHYEAR, BRANCHID, '24Q', '' AS ACCOUNTNO, 0 AS AMOUNT FROM
	(
		SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID <> 1
		EXCEPT
		SELECT BRANCHID FROM PARKEDAMOUNT WITH(NOLOCK) WHERE FORMTYPE='24Q' AND MONTHYEAR=@MONTHYEAR
	)P
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHALLANSQL_PA_AB')
DROP PROCEDURE USP_TDS_CHALLANSQL_PA_AB
GO
CREATE PROCEDURE USP_TDS_CHALLANSQL_PA_AB --102014,10
@MONTHYEAR INT,
@MONTH INT
AS
BEGIN
	IF NOT EXISTS(SELECT ID FROM PARKEDAMOUNT WHERE MONTHYEAR = @MONTHYEAR AND FORMTYPE = '')
		BEGIN
			UPDATE PARKEDAMOUNT SET FORMTYPE = '' WHERE FORMTYPE = '26QI' AND MONTHYEAR = @MONTHYEAR
			DELETE FROM PARKEDAMOUNT WHERE FORMTYPE <> '' AND MONTHYEAR = @MONTHYEAR
		END
	SELECT * INTO #UNLINKED FROM    
		 (    
			 SELECT DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)        
			 WHERE MONTH(DEDUCTEDDATE) = @MONTH AND FORMID IN (2,3)   
			 EXCEPT    
			  SELECT DL.DEDUCTIONID FROM DEDCHALINK DL WITH(NOLOCK)    
			 INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID        
			 WHERE MONTH(DEDUCTEDDATE) = @MONTH AND FORMID IN (2,3)  
		 )U
	SELECT D.BRANCHID,PA.ACCOUNTNO INTO #PARKBRANCHES FROM
		   (
			   SELECT BRANCHID, SUM(TOTALDEDUCTED)TDS FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			   INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID     
			   WHERE MONTH(DEDUCTEDDATE) = @MONTH
			   GROUP BY BRANCHID
		   )D 
		   INNER JOIN PARKEDAMOUNT PA ON D.BRANCHID = PA.BRANCHID WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS >= 0 AND ISNULL(FORMTYPE,'') = '' AND MONTHYEAR = @MONTHYEAR
DELETE FROM PARKEDAMOUNT FROM PARKEDAMOUNT PA INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = PA.BRANCHID WHERE ISNULL(FORMTYPE,'') <> '' AND MONTHYEAR = @MONTHYEAR 
INSERT INTO PARKEDAMOUNT            
SELECT @MONTHYEAR MONTHYEAR, DD.BRANCHID, '26QV' FORMTYPE, PB.ACCOUNTNO ACCOUNTNO, SUM(TOTALDEDUCTED) AMOUNT             
FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID
INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = DD.BRANCHID            
WHERE FORMID = 2 AND NOT(SECTIONID = 5 AND ENTRYTYPE = 4) AND MONTH(DEDUCTEDDATE) = @MONTH            
GROUP BY DD.BRANCHID,PB.ACCOUNTNO          
INSERT INTO PARKEDAMOUNT            
SELECT @MONTHYEAR MONTHYEAR, DD.BRANCHID, '26QI' FORMTYPE, PB.ACCOUNTNO ACCOUNTNO, SUM(TOTALDEDUCTED) AMOUNT             
FROM DEDUCTIONDETAIL DD WITH(NOLOCK)   
INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID              
INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = DD.BRANCHID 
WHERE FORMID = 2 AND ENTRYTYPE = 4 AND MONTH(DEDUCTEDDATE) = @MONTH  AND SECTIONID = 5          
GROUP BY DD.BRANCHID,PB.ACCOUNTNO          
INSERT INTO PARKEDAMOUNT            
SELECT @MONTHYEAR MONTHYEAR, DD.BRANCHID, '27Q' FORMTYPE, PB.ACCOUNTNO ACCOUNTNO, SUM(TOTALDEDUCTED) AMOUNT             
FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID                 
INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = DD.BRANCHID 
WHERE FORMID = 3 AND MONTH(DEDUCTEDDATE) = @MONTH    
GROUP BY DD.BRANCHID,PB.ACCOUNTNO      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHALLANSQL_PA_CBI')
DROP PROCEDURE USP_TDS_CHALLANSQL_PA_CBI
GO
CREATE PROCEDURE USP_TDS_CHALLANSQL_PA_CBI 
@MONTHYEAR INT,
@MONTH INT
AS
BEGIN
	DELETE FROM PARKEDAMOUNT WHERE FORMTYPE IN('24Q','26QI','26QV','27Q')  
	INSERT INTO PARKEDAMOUNT  
	SELECT @MONTHYEAR MONTHYEAR, BRANCHID, '24Q' FORMTYPE, '' ACCOUNTNO, CEILING(SUM(TOTALDEDUCTED)) AMOUNT   
	FROM DEDUCTIONDETAIL WITH(NOLOCK)  
	WHERE FORMID = 1 AND MONTH(DEDUCTEDDATE) = @MONTH     
	GROUP BY BRANCHID
	INSERT INTO PARKEDAMOUNT  
	SELECT @MONTHYEAR MONTHYEAR, BRANCHID, '26QI' FORMTYPE, '' ACCOUNTNO, CEILING(SUM(TOTALDEDUCTED)) AMOUNT   
	FROM DEDUCTIONDETAIL WITH(NOLOCK)  
	WHERE FORMID = 2 AND SECTIONID = 5 AND ENTRYTYPE = 4 AND MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID
	INSERT INTO PARKEDAMOUNT  
	SELECT @MONTHYEAR MONTHYEAR, BRANCHID, '26QV' FORMTYPE, '' ACCOUNTNO, CEILING(SUM(TOTALDEDUCTED)) AMOUNT   
	FROM DEDUCTIONDETAIL WITH(NOLOCK)  
	WHERE FORMID = 2 AND NOT(SECTIONID = 5 AND ENTRYTYPE = 4) AND MONTH(DEDUCTEDDATE) = @MONTH 
	GROUP BY BRANCHID
	INSERT INTO PARKEDAMOUNT  
	SELECT @MONTHYEAR MONTHYEAR, BRANCHID, '27Q' FORMTYPE, '' ACCOUNTNO, CEILING(SUM(TOTALDEDUCTED)) AMOUNT   
	FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE FORMID = 3 AND MONTH(DEDUCTEDDATE) = @MONTH     
	GROUP BY BRANCHID   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ChallanSQL_PA_IB')
DROP PROCEDURE USP_TDS_ChallanSQL_PA_IB
GO
CREATE PROCEDURE [USP_TDS_ChallanSQL_PA_IB] 
@MONTHYEAR varchar(6),  
@MONTH INT  
AS  
BEGIN  
	DELETE FROM PARKEDAMOUNT WHERE FORMTYPE IN('26QV','27QV')  
	INSERT INTO PARKEDAMOUNT  
	SELECT @MONTHYEAR MONTHYEAR, BRANCHID, '26QV' FORMTYPE, '' ACCOUNTNO, SUM(TOTALDEDUCTED) AMOUNT   
	FROM DEDUCTIONDETAIL WITH(NOLOCK)  
	WHERE FORMID IN (2) AND SECTIONID NOT IN (5) AND MONTH(DEDUCTEDDATE) = @MONTH     
	GROUP BY BRANCHID
	INSERT INTO PARKEDAMOUNT  
	SELECT @MONTHYEAR MONTHYEAR, BRANCHID, '27QV' FORMTYPE, '' ACCOUNTNO, SUM(TOTALDEDUCTED) AMOUNT   
	FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE (SECTIONID IN (17) AND ENTRYTYPE = 1) AND MONTH(DEDUCTEDDATE) = @MONTH     
	GROUP BY BRANCHID   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHALLANSQL_PA_JK')
DROP PROCEDURE USP_TDS_CHALLANSQL_PA_JK
GO
CREATE PROCEDURE USP_TDS_CHALLANSQL_PA_JK 
@MONTHYEAR INT,
@MONTH INT
AS
	BEGIN
			SELECT * 
			INTO #UNLINKED 
			FROM    
				(    
					SELECT DEDUCTIONID 
					FROM DEDUCTIONDETAIL DD WITH(NOLOCK)        
					WHERE MONTH(DD.DEDUCTEDDATE) = @MONTH AND FORMID IN (2,3)   
					EXCEPT    
					SELECT DL.DEDUCTIONID 
					FROM DEDCHALINK DL WITH(NOLOCK)    
					 INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID        
					WHERE MONTH(DD.DEDUCTEDDATE) = @MONTH AND FORMID IN (2,3)  
				)U
			SELECT D.BRANCHID,PA.ACCOUNTNO 
			INTO #PARKBRANCHES 
			FROM
			   (
				   SELECT DD.BRANCHID, SUM(DD.TOTALDEDUCTED)TDS 
				   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
						INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID     
				      WHERE MONTH(DD.DEDUCTEDDATE) = @MONTH AND ((FORMID = 2 AND SECTIONID = 5) OR FORMID = 3)
				   GROUP BY DD.BRANCHID
			   )D 
			   INNER JOIN PARKEDAMOUNT PA ON D.BRANCHID = PA.BRANCHID 
			WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS >= 0 AND ISNULL(FORMTYPE,'') = 'QI' AND MONTHYEAR = @MONTHYEAR
		DELETE FROM PARKEDAMOUNT 
		FROM ParkedAmount PA 
			INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = PA.BRANCHID 
		WHERE ISNULL(FORMTYPE,'') NOT IN ('QI','24Q','26QV') AND MONTHYEAR = @MONTHYEAR 
		INSERT INTO PARKEDAMOUNT            
		SELECT @MONTHYEAR MONTHYEAR, DD.BRANCHID, '26QI' FORMTYPE, 
			PB.ACCOUNTNO ACCOUNTNO, CEILING(SUM(DD.TOTALDEDUCTED)) AMOUNT             
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)   
			INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID              
			INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = DD.BRANCHID 
		WHERE FORMID = 2 AND SECTIONID = 5 AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
		GROUP BY DD.BRANCHID,PB.ACCOUNTNO 
		INSERT INTO PARKEDAMOUNT            
		SELECT @MONTHYEAR MONTHYEAR, DD.BRANCHID, '27Q' FORMTYPE, 
			PB.ACCOUNTNO ACCOUNTNO, CEILING(SUM(DD.TOTALDEDUCTED)) AMOUNT             
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID                 
			INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = DD.BRANCHID 
		WHERE FORMID = 3 AND MONTH(DD.DEDUCTEDDATE) = @MONTH    
		GROUP BY DD.BRANCHID,PB.ACCOUNTNO     
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHALLANSQL_PA_KB')
DROP PROCEDURE USP_TDS_CHALLANSQL_PA_KB
GO
CREATE PROCEDURE [dbo].[USP_TDS_CHALLANSQL_PA_KB] ---USP_TDS_CHALLANSQL_PA_KB 42017,4
@MONTHYEAR INT,
@MONTH INT
AS
	BEGIN
			SELECT * 
			INTO #UNLINKED 
			FROM    
				(    
					SELECT DEDUCTIONID 
					FROM DEDUCTIONDETAIL DD WITH(NOLOCK)        
					WHERE MONTH(DD.DEDUCTEDDATE) = @MONTH AND FORMID IN (1,2,3)   
					EXCEPT    
					SELECT DL.DEDUCTIONID 
					FROM DEDCHALINK DL WITH(NOLOCK)    
					 INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID        
					WHERE MONTH(DD.DEDUCTEDDATE) = @MONTH AND FORMID IN (1,2,3)  
				)U
			SELECT D.BRANCHID,PA.ACCOUNTNO 
			INTO #PARKBRANCHES 
			FROM
			   (
				   SELECT DD.BRANCHID, SUM(DD.TOTALDEDUCTED)TDS 
				   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
						INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID     
				   WHERE MONTH(DD.DEDUCTEDDATE) = @MONTH
				   GROUP BY DD.BRANCHID
			   )D 
			   INNER JOIN PARKEDAMOUNT PA ON D.BRANCHID = PA.BRANCHID 
			WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS >= 0 AND ISNULL(FORMTYPE,'') = '' AND MONTHYEAR = @MONTHYEAR
		DELETE FROM PARKEDAMOUNT 
		FROM ParkedAmount PA 
			INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = PA.BRANCHID 
		WHERE ISNULL(FORMTYPE,'') <> '' AND MONTHYEAR = @MONTHYEAR 
		INSERT INTO PARKEDAMOUNT            
		SELECT @MONTHYEAR MONTHYEAR, DD.BRANCHID, '26QV' FORMTYPE, 
			PB.ACCOUNTNO ACCOUNTNO, CEILING(SUM(DD.TOTALDEDUCTED)) AMOUNT             
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID
			INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = DD.BRANCHID            
		WHERE FORMID = 2 AND SECTIONID <> 5 AND MONTH(DD.DEDUCTEDDATE) = @MONTH            
		GROUP BY DD.BRANCHID,PB.ACCOUNTNO 
		INSERT INTO PARKEDAMOUNT            
		SELECT @MONTHYEAR MONTHYEAR, DD.BRANCHID, '26QI' FORMTYPE, 
			PB.ACCOUNTNO ACCOUNTNO, CEILING(SUM(DD.TOTALDEDUCTED)) AMOUNT             
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)   
			INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID              
			INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = DD.BRANCHID 
		WHERE FORMID = 2 AND SECTIONID = 5 AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
		GROUP BY DD.BRANCHID,PB.ACCOUNTNO   
		INSERT INTO PARKEDAMOUNT            
		SELECT @MONTHYEAR MONTHYEAR, DD.BRANCHID, '27Q' FORMTYPE, 
			PB.ACCOUNTNO ACCOUNTNO, CEILING(SUM(DD.TOTALDEDUCTED)) AMOUNT             
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID                 
			INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = DD.BRANCHID 
		WHERE FORMID = 3 AND MONTH(DD.DEDUCTEDDATE) = @MONTH    
		GROUP BY DD.BRANCHID,PB.ACCOUNTNO 
		INSERT INTO PARKEDAMOUNT            
		SELECT @MONTHYEAR MONTHYEAR, DD.BRANCHID, '24Q' FORMTYPE, 
			PB.ACCOUNTNO ACCOUNTNO, CEILING(SUM(DD.TOTALDEDUCTED)) AMOUNT             
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #UNLINKED UD ON DD.DEDUCTIONID = UD.DEDUCTIONID                 
			INNER JOIN #PARKBRANCHES PB ON PB.BRANCHID = DD.BRANCHID 
		WHERE FORMID = 1 AND MONTH(DD.DEDUCTEDDATE) = @MONTH    
		GROUP BY DD.BRANCHID,PB.ACCOUNTNO       
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ChallanSQL_PA_UCO')
DROP PROCEDURE USP_TDS_ChallanSQL_PA_UCO
GO
CREATE PROCEDURE [USP_TDS_ChallanSQL_PA_UCO]      
@MONTHYEAR varchar(6),        
@MONTH INT        
AS        
BEGIN        
DELETE FROM PARKEDAMOUNT      
INSERT INTO ParkedAmount        
SELECT @MONTHYEAR MONTHYEAR, BRANCHID, '26QV' FORMTYPE, '' ACCOUNTNO, SUM(TOTALDEDUCTED) AMOUNT         
FROM DEDUCTIONDETAIL WITH(NOLOCK)        
WHERE FORMID = 2 AND ENTRYTYPE = 1 AND MONTH(DEDUCTEDDATE) = @MONTH        
GROUP BY BRANCHID      
INSERT INTO ParkedAmount        
SELECT @MONTHYEAR MONTHYEAR, BRANCHID, '26QI' FORMTYPE, '' ACCOUNTNO, SUM(TOTALDEDUCTED) AMOUNT         
FROM DEDUCTIONDETAIL WITH(NOLOCK)             
WHERE FORMID = 2 AND ENTRYTYPE = 4 AND MONTH(DEDUCTEDDATE) = @MONTH  AND SECTIONID = 5      
GROUP BY BRANCHID      
INSERT INTO ParkedAmount        
SELECT @MONTHYEAR MONTHYEAR, BRANCHID, '27Q' FORMTYPE, '' ACCOUNTNO, SUM(TOTALDEDUCTED) AMOUNT         
FROM DEDUCTIONDETAIL WITH(NOLOCK)             
WHERE FORMID = 3 AND MONTH(DEDUCTEDDATE) = @MONTH   
GROUP BY BRANCHID        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ChangePassword')
DROP PROCEDURE USP_TDS_ChangePassword
GO
CREATE PROCEDURE USP_TDS_ChangePassword     
 @USERID INT,    
 @PASSWORD VARCHAR(50)    
AS  
	BEGIN    
		DECLARE @EXISTINGPWDID INT
		SELECT @EXISTINGPWDID = PWDHISTORYID 
		FROM PASSWORDHISTORY WITH(NOLOCK) 
		WHERE USERID = @USERID AND PASSWORD = @PASSWORD    
		IF (@EXISTINGPWDID IS NULL)  
			BEGIN
				SELECT 1
			END    	   
		ELSE
			BEGIN
				SELECT -2
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_Check_ReferenceAndPan')
DROP PROCEDURE USP_TDS_Check_ReferenceAndPan
GO
CREATE PROC USP_TDS_Check_ReferenceAndPan ---USP_TDS_Check_ReferenceAndPan '1_51691515_BVZPS2859G,2_22222_AAQPW0018E,3_22222_AAQPW0018E' 
@REFERENCEANDPAN NVARCHAR(MAX)
AS    
	BEGIN   
		SELECT * INTO #REFPAN FROM  dbo.UDF_TDS_SplitString(@REFERENCEANDPAN,',')
		SELECT LEFT(DATA, CHARINDEX('_',DATA)-1) AS ROWNO,
			   RIGHT(DATA, LEN(DATA) - CHARINDEX('_',DATA)) AS REF_PAN
		INTO #TEMP
		FROM #REFPAN
		SELECT ROWNO,REF_PAN,
			   LEFT(REF_PAN, CHARINDEX('_',REF_PAN)-1) AS REFERENCENO,
			   RIGHT(REF_PAN, LEN(REF_PAN) - CHARINDEX('_',REF_PAN)) AS FILEPAN 
		INTO #FILEDATA
		FROM #TEMP
		SELECT REFERENCENO, (CAST(BRANCHID AS VARCHAR)+REFERENCENO) AS BRA_REF,
			PAN AS MASTERPAN,(CAST(BRANCHID AS VARCHAR)+REFERENCENO+'_'+PAN) AS REF_PAN 
		INTO #MASTERFULLDATA 
		FROM DEDUCTEE 
		SELECT REFERENCENO,BRA_REF,MASTERPAN,REF_PAN 
		INTO #MASTERDATA
		FROM #MASTERFULLDATA WITH(NOLOCK) 
		WHERE  BRA_REF IN (SELECT REFERENCENO FROM #FILEDATA)
		SELECT DISTINCT FD.ROWNO AS RowNo,'PAN' AS ColName,MD.REFERENCENO,FD.FILEPAN,MD.MASTERPAN 
		into #RESULT
		FROM #MASTERDATA MD
			INNER JOIN #FILEDATA FD ON FD.REFERENCENO = MD.BRA_REF
		WHERE FD.REF_PAN <> MD.REF_PAN	
		--For given Reference No., the PAN given in file is BAXPA0580A. PAN present in master is AAXPA0580A
		SELECT ROWNO,COLNAME,
			'For Reference No.' + REFERENCENO + ', the PAN given in file is ' + FILEPAN + '. PAN present in master is ' + MASTERPAN + '.' AS DESCRIPTION
		FROM #RESULT
		DROP TABLE #REFPAN
		DROP TABLE #FILEDATA
		DROP TABLE #MASTERDATA
		DROP TABLE #RESULT
	END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKACKEXIST')
DROP PROCEDURE USP_TDS_CHECKACKEXIST
GO
CREATE PROCEDURE [USP_TDS_CHECKACKEXIST]
	@BRANCHID INT,
	@ORGNUM VARCHAR(20)
AS
	BEGIN
		SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND ORGNUM = @ORGNUM
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKBGLCODEINZEROTDS')
DROP PROCEDURE USP_TDS_CHECKBGLCODEINZEROTDS
GO
CREATE PROCEDURE [dbo].[USP_TDS_CHECKBGLCODEINZEROTDS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN  
	DECLARE @COUNT INT;
	SELECT @COUNT = COUNT(DEDUCTIONID) 
	FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID 
		AND FORMID = @FORMID 
		AND QUARTER = @QUARTER 
		AND TOTALDEDUCTED = 0 
		AND ISNULL(BGLCODEID, 0) = 0
	IF (@COUNT > 0)
	BEGIN
		EXEC USP_TDS_LINKINGBGLCODETOZEROTDS @QUARTER, @BRANCHID
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKBRANCHISZORO')
DROP PROCEDURE USP_TDS_CHECKBRANCHISZORO
GO
CREATE PROCEDURE [USP_TDS_CHECKBRANCHISZORO]    
@BRANCHID INT    
AS    
 BEGIN    
 DECLARE @ISZORO INT, @PARENTBRANCHID INT, @ISEXCLUDECHALLAN INT;  
    SELECT @ISZORO = ISNULL(ISZORO,0), @ISEXCLUDECHALLAN = ISNULL(NOCHALLANPAY,0) FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID  
   -- IF(@ISZORO = 0 AND @ISEXCLUDECHALLAN = 0)  
	  --BEGIN  
	  -- SELECT @PARENTBRANCHID = PARENTBRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID  
	  -- SELECT @ISZORO = ISNULL(ISZORO,0) FROM COMPANYBRANCH WHERE BRANCHID = @PARENTBRANCHID    
	  --END  
    SELECT @ISZORO;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKCHALLANAMOUNT')
DROP PROCEDURE USP_TDS_CHECKCHALLANAMOUNT
GO
CREATE PROCEDURE [USP_TDS_CHECKCHALLANAMOUNT]    
	@BRANCHID INT,    
	@FORMID INT,    
	@QUARTER INT    
AS    
	BEGIN    
		DECLARE @TEMP TABLE( EXTRANAMOUNT INT , ID INT);    
		INSERT INTO @TEMP (EXTRANAMOUNT, ID)    
		(    
			SELECT (SUM(CDD.TOTALDEDUCTED) - F.CHALLANTOTAL) EXTRA, CDD.CHALLANERETURNID    
			FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)          
			INNER JOIN    
			(    
				SELECT MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS, DEDUCTIONSERIALNO 
				FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID 
					AND FORMID = @FORMID 
					AND QUARTER = @QUARTER 
				GROUP BY DEDUCTIONSERIALNO    
			)CD     
			ON CD.DEDUCTIONSERIALNO=CDD.DEDUCTIONSERIALNO AND    
			CD.CORRECTIONSTATUS = CDD.CORRECTIONSTATUS AND CDD.CORRECTIONSTATUS <> 4
			INNER JOIN    
			(    
				SELECT SUM(CCD.CHALLANTOTAL) AS CHALLANTOTAL, CHALLANERETURNID 
				FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)
				INNER JOIN    
				(    
					SELECT MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS, CHALLANSERIALNO 
					FROM CORRCHALLANDETAIL WITH(NOLOCK) 
					WHERE BRANCHID = @BRANCHID 
						AND FORMID = @FORMID 
						AND QUARTER = @QUARTER 
					GROUP BY CHALLANSERIALNO     
				)CD     
				ON CD.CHALLANSERIALNO = CCD.CHALLANSERIALNO AND    
				CD.CORRECTIONSTATUS = CCD.CORRECTIONSTATUS    
				WHERE CCD.BRANCHID = @BRANCHID 
					AND CCD.FORMID = @FORMID 
					AND CCD.QUARTER = @QUARTER 
				GROUP BY CHALLANERETURNID    
			) F ON     
			F.CHALLANERETURNID = CDD.CHALLANERETURNID    
			WHERE CDD.BRANCHID = @BRANCHID 
				AND CDD.FORMID = @FORMID 
				AND CDD.QUARTER = @QUARTER  
			GROUP BY CDD.CHALLANERETURNID, F.CHALLANTOTAL    
		)    
		SELECT * FROM @TEMP WHERE EXTRANAMOUNT > 0    
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CheckCorrChallanAmount')
DROP PROCEDURE USP_TDS_CheckCorrChallanAmount
GO
CREATE PROCEDURE [dbo].[USP_TDS_CheckCorrChallanAmount] 
 @BRANCHID INT,          
 @FORMID INT,          
 @QUARTER INT,          
 @DEDUCTIONSERIALNO INT,          
 @CHALLANERETURNID INT,          
 @CHALLANSERIALNO INT,           
 @TAXDEDUCTED NUMERIC(17,3),      
 @CHALLANAMOUNT NUMERIC(17,3),         
 @CORRECTIONSTATUS INT          
AS          
BEGIN          
	 DECLARE @TOTAL_TAX NUMERIC(17,3);          
	 DECLARE @CHALLAN_TOTAL NUMERIC(17,3);          
	 DECLARE @QUERY INT;  
	  IF(@CHALLANERETURNID = 0)      
		BEGIN  
		   IF EXISTS(SELECT CHALLANERETURNID 
					 FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
					 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
						AND QUARTER = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSERIALNO)          
			 BEGIN          
				 SELECT @QUERY= CHALLANERETURNID 
				 FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
				 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
					AND QUARTER = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSERIALNO
				 IF (EXISTS(SELECT CHALLANSERIALNO 
							FROM CORRCHALLANDETAIL WITH(NOLOCK) 
							WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID 
								AND QUARTER=@QUARTER AND CHALLANERETURNID=@QUERY 
								AND ISNILCHALLAN='Y' AND CORRECTIONSTATUS <> 1) AND   
					 NOT EXISTS(SELECT DEDUCTIONSERIALNO 
								FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
								WHERE BRANCHID =@BRANCHID AND FORMID=@FORMID 
								AND QUARTER=@QUARTER 
								AND ((DEDUCTIONSERIALNO=@DEDUCTIONSERIALNO AND @TAXDEDUCTED = 0) 
								OR (DEDUCTIONSERIALNO<>@DEDUCTIONSERIALNO AND @TAXDEDUCTED = 0)) 
								AND CHALLANERETURNID=@QUERY))    
				 BEGIN    
						 DELETE FROM CORRCHALLANDETAIL 
						 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID 
							AND QUARTER=@QUARTER AND CHALLANERETURNID=@QUERY AND CORRECTIONSTATUS <> 1;      
				 END      
					SELECT @CHALLANERETURNID = ISNULL(CHALLANERETURNID,0) 
					FROM CORRCHALLANDETAIL WITH(NOLOCK) 
					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
						AND QUARTER = @QUARTER AND CHALLANSERIALNO = @CHALLANSERIALNO              
			 END
	   END     
	 IF(@CHALLANERETURNID = 0)         
	   BEGIN
			 SELECT @CHALLANERETURNID = CHALLANERETURNID 
			 FROM CORRCHALLANDETAIL WITH(NOLOCK) 
			 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
				AND QUARTER = @QUARTER AND CHALLANSERIALNO = @CHALLANSERIALNO          
	   END 
	 IF(@CORRECTIONSTATUS = 4)          
	 BEGIN          
		  SELECT @TAXDEDUCTED = TOTALDEDUCTED 
		  FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)           
		  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
			AND QUARTER = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSERIALNO AND CORRECTIONSTATUS = 4          
	 END          
	 IF(@CORRECTIONSTATUS = 2)          
	 BEGIN          
		  SELECT @TAXDEDUCTED = @TAXDEDUCTED--TOTALDEDUCTED FROM CORRDEDUCTIONDETAIL           
		  --WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSERIALNO AND CORRECTIONSTATUS = 1
	 END               
	 /*Updation*/
	 IF(@DEDUCTIONSERIALNO <> -1)
	 BEGIN          
		  SELECT @TOTAL_TAX = ISNULL(SUM(CDD.TOTALDEDUCTED),0) +  @TAXDEDUCTED           
		  FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)          
			  INNER JOIN           
			  (          
				   SELECT BRANCHID,FORMID,QUARTER,DEDUCTIONSERIALNO,
						MAX(CORRECTIONSTATUS) CORRECTIONSTATUS,CHALLANERETURNID          
				   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)          
				   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND           
						 DEDUCTIONSERIALNO <> @DEDUCTIONSERIALNO AND           
						 CHALLANERETURNID = @CHALLANERETURNID --@CHALLANERETURNID          
				   GROUP BY BRANCHID,FORMID,QUARTER,DEDUCTIONSERIALNO,CHALLANERETURNID          
			  ) GP           
			  ON CDD.BRANCHID = GP.BRANCHID AND CDD.FORMID = GP.FORMID 
				  AND CDD.QUARTER = GP.QUARTER AND CDD.CHALLANERETURNID = GP.CHALLANERETURNID       
				  AND CDD.DEDUCTIONSERIALNO = GP.DEDUCTIONSERIALNO AND CDD.CORRECTIONSTATUS = GP.CORRECTIONSTATUS           
				  AND CDD.CORRECTIONSTATUS <> 4          
	 END          
	 ELSE /*New deduction*/          
	 BEGIN          
		  SELECT @TOTAL_TAX = ISNULL(SUM(CDD.TOTALDEDUCTED),0) +  @TAXDEDUCTED           
		  FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)          
			  INNER JOIN           
			  (          
			   SELECT BRANCHID,FORMID,QUARTER,DEDUCTIONSERIALNO,MAX(CORRECTIONSTATUS) CORRECTIONSTATUS, CHALLANERETURNID         
			   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)          
			   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND                
				 CHALLANERETURNID = @CHALLANERETURNID          
			   GROUP BY BRANCHID,FORMID,QUARTER,DEDUCTIONSERIALNO,CHALLANERETURNID          
			  ) GP           
			  ON CDD.BRANCHID = GP.BRANCHID AND CDD.FORMID = GP.FORMID 
				  AND CDD.QUARTER = GP.QUARTER AND CDD.CHALLANERETURNID = GP.CHALLANERETURNID          
				  AND CDD.DEDUCTIONSERIALNO = GP.DEDUCTIONSERIALNO AND CDD.CORRECTIONSTATUS = GP.CORRECTIONSTATUS           
				  AND CDD.CORRECTIONSTATUS <> 4             
	 END           
	 IF(@TOTAL_TAX IS NULL)          
	 BEGIN          
			SET @TOTAL_TAX = @TAXDEDUCTED;          
	 END           
	IF(@CHALLANAMOUNT= 0)    
	 BEGIN    
		 SELECT @CHALLAN_TOTAL = ISNULL(INCOMETAX,0) + ISNULL(SURCHARGE,0) +ISNULL(EDUCATIONCESS,0) FROM CORRCHALLANDETAIL CD WITH(NOLOCK)          
			 INNER JOIN           
			 (          
			  SELECT BRANCHID,FORMID,QUARTER,CHALLANSERIALNO,MAX(CORRECTIONSTATUS) CORRECTIONSTATUS FROM           
			  CORRCHALLANDETAIL CCD WITH(NOLOCK)         
			  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CCD.CHALLANERETURNID = @CHALLANERETURNID          
			  GROUP BY BRANCHID,FORMID,QUARTER,CHALLANSERIALNO          
			 ) RD          
			 ON CD.BRANCHID = RD.BRANCHID AND CD.FORMID = RD.FORMID AND CD.QUARTER = RD.QUARTER AND           
				CD.CHALLANSERIALNO = RD.CHALLANSERIALNO AND CD.CORRECTIONSTATUS = RD.CORRECTIONSTATUS          
	  END    
	ELSE    
	 BEGIN    
		 SELECT @CHALLAN_TOTAL=@CHALLANAMOUNT;    
	 END          
	 IF(@CHALLAN_TOTAL IS NULL)          
	 BEGIN          
		SET @CHALLAN_TOTAL = 0;          
	 END           
	 SELECT @CHALLAN_TOTAL - @TOTAL_TAX;          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKDATABASEEXISTS')
DROP PROCEDURE USP_TDS_CHECKDATABASEEXISTS
GO
CREATE PROCEDURE [USP_TDS_CHECKDATABASEEXISTS]      
@DATABASE VARCHAR(MAX)      
AS      
 BEGIN      
  DECLARE @COUNT INT;        
  SELECT @COUNT = COUNT(DATABASE_ID) FROM SYS.DATABASES WHERE NAME = @DATABASE      
  SELECT @COUNT;       
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CheckDeducteeIDInSalDetail')
DROP PROCEDURE USP_TDS_CheckDeducteeIDInSalDetail
GO
CREATE PROCEDURE USP_TDS_CheckDeducteeIDInSalDetail  
 @DeducteeIDs VARCHAR(MAX)  
AS  
BEGIN  
 SELECT * INTO #TEMP FROM UDF_TDS_SPLITSTRING(@DeducteeIDs,',')  
 SELECT SD.DEDUCTEEID FROM SALARYDETAIL SD WITH(NOLOCK)  
 INNER JOIN #TEMP T  
 ON T.DATA=SD.DEDUCTEEID  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKDEDUCTIONAGAINSTPARKEDAMOUNTFORCBI')
DROP PROCEDURE USP_TDS_CHECKDEDUCTIONAGAINSTPARKEDAMOUNTFORCBI
GO
CREATE PROCEDURE [dbo].[USP_TDS_CHECKDEDUCTIONAGAINSTPARKEDAMOUNTFORCBI]
@MONTH INT,
@MONTHYEAR INT
AS
BEGIN
	DECLARE @QUARTER INT;
	IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)
		SET @QUARTER = 1
	ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)
		SET @QUARTER = 2
	ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)
		SET @QUARTER = 3
	ELSE 
		SET @QUARTER = 4
	SELECT * INTO #TDSRATE FROM TDSRATE WITH(NOLOCK)
	SELECT * INTO #UNLINKED FROM
	(
		SELECT DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
		WHERE MONTH(DEDUCTEDDATE) = @MONTH AND D.PAN LIKE CASE WHEN ((D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END AND
		NOT EXISTS
		(
			SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
		) AND QUARTER = @QUARTER AND FORMID IN (2,3)
	)U
	UPDATE DEDUCTIONDETAIL SET BGLCODEID = (SELECT ISNULL(MAX(BGLCODEID),-1) FROM #TDSRATE WITH(NOLOCK) WHERE BGLCODE = 55801) 
	FROM DEDUCTIONDETAIL DD INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID
	WHERE MONTH(DEDUCTEDDATE) = @MONTH AND ((SECTIONID = 5 AND ENTRYTYPE = 4) OR (SECTIONID = 17 AND ENTRYTYPE = 4))
	SELECT BRANCHID, BGLCODE, SUM(TOTALDEDUCTED) TOTALDEDUCTED
	INTO #DEDDETAIL
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN #UNLINKED U ON DD.DEDUCTIONID = U.DEDUCTIONID
		INNER JOIN TDSRATE TR WITH(NOLOCK)
		ON TR.BGLCODEID = DD.BGLCODEID
	WHERE TR.BGLCODE = '55801' AND MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID, BGLCODE
	SELECT ID ,BRANCHID, FORMTYPE, SUM(AMOUNT) AMOUNT
	INTO #PARKEDAMOUNT
	FROM PARKEDAMOUNT
	WHERE FORMTYPE = '55801' AND MONTHYEAR = @MONTHYEAR
	GROUP BY ID ,BRANCHID, FORMTYPE
	UPDATE PARKEDAMOUNT SET AMOUNT = 0
	WHERE ID IN
	(SELECT ID 
	FROM #DEDDETAIL D
	INNER JOIN #PARKEDAMOUNT P
	ON D.BRANCHID = P.BRANCHID AND D.BGLCODE = P.FORMTYPE
	WHERE TOTALDEDUCTED > AMOUNT)
	DROP TABLE #PARKEDAMOUNT
	DROP TABLE #DEDDETAIL
	DROP TABLE #TDSRATE
	DROP TABLE #UNLINKED
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKDUPLICATEFROM26QAADETAILS')
DROP PROCEDURE USP_TDS_CHECKDUPLICATEFROM26QAADETAILS
GO
CREATE PROCEDURE USP_TDS_CHECKDUPLICATEFROM26QAADETAILS
	@TDACCNO VARCHAR(50)
AS  
	BEGIN 
		SELECT * FROM TERMDEPOSIT26QAA WITH (NOLOCK)
		WHERE TDACCNO = @TDACCNO	
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CheckDuplicateOfTAN')
DROP PROCEDURE USP_TDS_CheckDuplicateOfTAN
GO
CREATE PROCEDURE [USP_TDS_CheckDuplicateOfTAN]
@TAN VARCHAR(10),
@BRANCHID INT
AS
BEGIN
	SELECT DISTINCT BRANCHNAME + ' ('+ BRANCHCODE + ')'  FROM BRANCHDEDUCTORS BD WITH(NOLOCK)
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID
	INNER JOIN DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID=BD.DEDUCTORID WHERE D.TAN = @TAN AND BD.BRANCHID <> @BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKDUPLICATEPAN')
DROP PROCEDURE USP_TDS_CHECKDUPLICATEPAN
GO
CREATE PROCEDURE [USP_TDS_CHECKDUPLICATEPAN] 
@BRANCHID INT, 
@DEDUCTEEID INT, 
@NAME VARCHAR(75),                  
@PAN VARCHAR(10) 
AS 
BEGIN 
	IF EXISTS (SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID WHERE D.NAME = @NAME AND D.PAN = @PAN  AND D.DEDUCTEEID <> @DEDUCTEEID AND D.BRANCHID = @BRANCHID)                  
	BEGIN                  
		SET @DEDUCTEEID = 1;                  
	END 
	ELSE 
	  SET @DEDUCTEEID = 0; 
	 SELECT @DEDUCTEEID; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKDUPLICATERECEIPTNO')
DROP PROCEDURE USP_TDS_CHECKDUPLICATERECEIPTNO
GO
CREATE PROCEDURE [dbo].[USP_TDS_CHECKDUPLICATERECEIPTNO] 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@RECEIPTNO VARCHAR(8)
AS
BEGIN
	SELECT CB.BRANCHCODE, AK.FORMID, AK.QUARTER
	FROM ACKNO AK WITH(NOLOCK)
	INNER JOIN COMPANYBRANCH CB
	ON AK.BRANCHID = CB.BRANCHID
	WHERE RECEIPTNO = @RECEIPTNO AND RECEIPTNO <> '' AND RECEIPTNO IS NOT NULL
	GROUP BY  CB.BRANCHCODE, FORMID, QUARTER
	EXCEPT
	SELECT CB.BRANCHCODE, AK.FORMID, AK.QUARTER
	FROM ACKNO AK WITH(NOLOCK)
	INNER JOIN COMPANYBRANCH CB
	ON AK.BRANCHID = CB.BRANCHID
	WHERE AK.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND RECEIPTNO = @RECEIPTNO AND RECEIPTNO <> '' AND RECEIPTNO IS NOT NULL
	GROUP BY  CB.BRANCHCODE, FORMID, QUARTER, ACKID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CheckDuplicateRevRRNo')
DROP PROCEDURE USP_TDS_CheckDuplicateRevRRNo
GO
CREATE PROCEDURE USP_TDS_CheckDuplicateRevRRNo
 @ACKNOREVID INT,   
 @REVNUM VARCHAR(15)
AS  
 BEGIN  
  IF (@ACKNOREVID=-1)  
	   BEGIN
			SELECT DISTINCT CB.BRANCHCODE, A.FORMID, A.QUARTER 
			FROM ACKNOREV AR
				INNER JOIN ACKNO A 
					ON A.ACKID = AR.ACKID
				INNER JOIN COMPANYBRANCH CB
					ON A.BRANCHID = CB.BRANCHID
			WHERE REVNUM = @REVNUM
	   END  
  ELSE  
	   BEGIN  
			SELECT DISTINCT CB.BRANCHCODE, A.FORMID, A.QUARTER 
			FROM ACKNOREV AR
				INNER JOIN ACKNO A 
					ON A.ACKID = AR.ACKID
				INNER JOIN COMPANYBRANCH CB
					ON A.BRANCHID = CB.BRANCHID
			WHERE REVNUM = @REVNUM AND ACKNOREVID <> @ACKNOREVID
	   END  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKDUPLICATETAN')
DROP PROCEDURE USP_TDS_CHECKDUPLICATETAN
GO
CREATE PROCEDURE [USP_TDS_CHECKDUPLICATETAN]
	@BRANCHID INT,
	@TAN VARCHAR(10),
	@FINANCIALYEAR INT
AS
	BEGIN
		SELECT DISTINCT CB.BRANCHNAME, CB.BRANCHCODE 
		FROM COMPANYBRANCH CB WITH(NOLOCK)
		INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID
		INNER JOIN DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID
		WHERE D.TAN = @TAN AND D.FINANCIALYEAR = @FINANCIALYEAR AND CB.BRANCHID <> @BRANCHID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKENTRYTYPE')
DROP PROCEDURE USP_TDS_CHECKENTRYTYPE
GO
CREATE PROCEDURE USP_TDS_CHECKENTRYTYPE --1573,2,3,10
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@PARTPAYMENTID INT
AS
BEGIN
	SELECT ISNULL(ENTRYTYPE,1) FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID
	WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = QUARTER AND PARTPAYMENTID = @PARTPAYMENTID AND CB.NOCHALLANPAY = 0
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKEXISTINGF013RECORDS')
DROP PROCEDURE USP_TDS_CHECKEXISTINGF013RECORDS
GO
CREATE PROCEDURE [dbo].[USP_TDS_CHECKEXISTINGF013RECORDS]      
@BRANCHCODES NVARCHAR(MAX),      
@MONTH INT      
AS      
	BEGIN
		DECLARE @COUNT INT = 0     
		SELECT * INTO #BRANCHES FROM dbo.UDF_TDS_SPLITSTRING(@BRANCHCODES, ',')  
		SET @COUNT = (SELECT COUNT(DEDUCTIONID)
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID      
			INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE      
			WHERE MONTH(PAYMENTDATE) = @MONTH AND FORMID = 1 AND ENTRYTYPE = 4 )
		SELECT @COUNT
		IF OBJECT_ID('TEMPDB..#BRANCHES') IS NOT NULL
		DROP TABLE #BRANCHES  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFOR15GOR15HUNIQUE')
DROP PROCEDURE USP_TDS_CHECKFOR15GOR15HUNIQUE
GO
CREATE PROCEDURE USP_TDS_CHECKFOR15GOR15HUNIQUE
@BRANCHID INT,
@CERTNO VARCHAR(10),
@PAN VARCHAR(10),
@SERIALNO INT,
@QUARTER INT
AS
BEGIN
	DECLARE @CERTIFICATENO VARCHAR(10);
	DECLARE @RETURNVALUE INT;
	SET @RETURNVALUE = 1
	SELECT TOP 1 CERTNO 
	INTO #TEMP 
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID 
	WHERE DD.BRANCHID = @BRANCHID AND FORMID = 2 
		AND PAN = @PAN AND ISNULL(CERTNO,'') <> '' 
		AND NONDEDREASON = 2 AND SERIALNO <> @SERIALNO AND QUARTER >= @QUARTER
	SELECT @CERTIFICATENO = CERTNO FROM #TEMP
	IF(@CERTIFICATENO IS NOT NULL)
		BEGIN
			IF(@CERTIFICATENO <> @CERTNO)
				BEGIN
					SET @RETURNVALUE = -1;
				END
		END
	ELSE
		BEGIN
			IF EXISTS(SELECT DD.DEDUCTEEID 
					  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
						INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID 
					  WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = 2 
							AND DD.CERTNO  = @CERTNO AND DD.SERIALNO <> @SERIALNO 
							AND DD.NONDEDREASON = 2 AND D.PAN NOT IN ('PANAPPLIED','PANINVALID','PANNOTAVBL') )
				BEGIN
					SET @RETURNVALUE = -2;
				END
		END
	DROP TABLE #TEMP
	SELECT @RETURNVALUE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFORAUTOGENERATED')
DROP PROCEDURE USP_TDS_CHECKFORAUTOGENERATED
GO
CREATE PROCEDURE [USP_TDS_CHECKFORAUTOGENERATED]
	@MONTH INT
AS
	BEGIN
		SELECT COUNT(CD.CHALLANID) 
		FROM CHALLANDETAIL CD WITH(NOLOCK)   
			INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID  
			INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID  
		WHERE CD.ISAUTOGENERATED = 1 
			AND CD.ISOLTASINCLUDED = 0 
			AND ISTTUMINCLUDED = 0 
			AND CD.BANKCHALLANNO IS NOT NULL 
			AND MONTH(DD.DEDUCTEDDATE) = @MONTH
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFORCHALLANNUMBER')
DROP PROCEDURE USP_TDS_CHECKFORCHALLANNUMBER
GO
CREATE PROCEDURE [USP_TDS_CHECKFORCHALLANNUMBER]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
   BEGIN
	SET NOCOUNT ON
		SELECT CASE WHEN (MODEOFPAYMENT = 1 AND CHALLANPAIDDATE IS NULL) THEN 1
						   WHEN (CHALLANPAIDDATE IS NULL OR ( MODEOFPAYMENT <> 3 AND ISNULL(BANKCHALLANNO,'') = ''))  THEN 1
						   ELSE 0 
				  END AS ISEMPTYCHALLAN 
				  INTO #CHALLAN
		FROM CHALLANDETAIL WITH(NOLOCK) WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		SELECT COUNT(ISEMPTYCHALLAN)  FROM #CHALLAN WHERE ISEMPTYCHALLAN = 1
		IF OBJECT_ID('TEMPDB..#CHALLAN') IS NOT NULL
			DROP TABLE #CHALLAN
	SET NOCOUNT OFF
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFORCORRECTIONSTATEMENTS')
DROP PROCEDURE USP_TDS_CHECKFORCORRECTIONSTATEMENTS
GO
CREATE PROCEDURE [USP_TDS_CHECKFORCORRECTIONSTATEMENTS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		DECLARE @RETURNVALUE INT;
		/* C2,C3,C4,C9 STATEMENTS */
		SELECT @RETURNVALUE = DBO.UDF_TDS_CHECKFORCORRECTIONSTATEMENTS(@BRANCHID,@FORMID,@QUARTER);
		IF @RETURNVALUE = 1
			BEGIN
				SELECT 1;
			END
		ELSE
			BEGIN
				/* C5 STATEMENT */
				CREATE TABLE #TEMP1(ID INT IDENTITY(1,1) PRIMARY KEY,SERIALNO INT,TRANSACTIONTYPE VARCHAR(25),CORRECTIONSTATUS TINYINT); 
				INSERT INTO #TEMP1 
				EXEC USP_TDS_GETC5STATEMENT @BRANCHID,@FORMID,@QUARTER;
				IF EXISTS(SELECT ID FROM #TEMP1)
					BEGIN
						SELECT 1;
					END
				ELSE
					BEGIN
						SELECT 0;
					END					
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFORDELETINGDEDUCTIONS')
DROP PROCEDURE USP_TDS_CHECKFORDELETINGDEDUCTIONS
GO
CREATE PROCEDURE [USP_TDS_CHECKFORDELETINGDEDUCTIONS]
	@DEDUCTIONID INT
AS
	BEGIN
		DECLARE @RETURNVALUE INT,@COUNT INT;
		SET @COUNT=(SELECT COUNT(DEDUCTIONID) FROM FORM16A WITH(NOLOCK) WHERE DEDUCTIONID=@DEDUCTIONID);
		IF(@COUNT>0)
			BEGIN
				SET @RETURNVALUE= @COUNT;				
			END
		ELSE
			BEGIN
				SET @RETURNVALUE=-1;				
			END
	SELECT @RETURNVALUE;			
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFORMODEOFPAYMENT')
DROP PROCEDURE USP_TDS_CHECKFORMODEOFPAYMENT
GO
CREATE PROCEDURE [USP_TDS_CHECKFORMODEOFPAYMENT]
	@QUARTER INT,
	@FORMID INT,
	@BRANCHID INT,
	@ISREGULAR BIT
AS
	BEGIN
		IF(@ISREGULAR = 1)
			BEGIN
				SELECT COUNT(*) 
				FROM CHALLANDETAIL WITH(NOLOCK) 
				WHERE QUARTER = @QUARTER 
					AND FORMID = @FORMID 
					AND BRANCHID = @BRANCHID 
					AND MODEOFPAYMENT IN (1, 2)
			END
		ELSE
			BEGIN
				SELECT COUNT(*) 
				FROM CORRCHALLANDETAIL WITH(NOLOCK) 
				WHERE QUARTER = @QUARTER 
					AND FORMID = @FORMID 
					AND BRANCHID = @BRANCHID 
					AND MODEOFPAYMENT IN (1, 2) 
					AND CORRECTIONSTATUS IN (2, 5, 7)
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFORNILRETURN')
DROP PROCEDURE USP_TDS_CHECKFORNILRETURN
GO
CREATE PROCEDURE USP_TDS_CHECKFORNILRETURN  
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT  
AS  
  BEGIN  
	IF ((SELECT COUNT(CHALLANSERIALNO) FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CHALLANID IS NULL AND (CORRECTIONSTATUS = 1 OR CORRECTIONSTATUS = 7)) = 1 AND
		(SELECT COUNT(DEDUCTIONSERIALNO) FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 1) = 0)
	 BEGIN	
		SELECT 1 
	 END 
   ELSE
     BEGIN
		SELECT 0  
     END  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFORPANUPDATE')
DROP PROCEDURE USP_TDS_CHECKFORPANUPDATE
GO
CREATE PROCEDURE [USP_TDS_CHECKFORPANUPDATE]  
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,  
@DEDUCTEESNO INT,  
@PAN VARCHAR(10)  
AS  
 BEGIN  
   DECLARE @ISUPDATED INT;  
   DECLARE @PANCOUNTER INT;  
  IF(@FORMID=1)  
    BEGIN  
     IF EXISTS(SELECT DISTINCT DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID =@FORMID AND QUARTER=@QUARTER AND DEDUCTEESERIALNO =@DEDUCTEESNO AND PAN=@PAN)  
         BEGIN  
      SET @ISUPDATED=1;  
         END   
       ELSE   
         BEGIN  
             SELECT TOP 1  @PANCOUNTER= PANCOUNTER FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID =@FORMID AND QUARTER=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESNO;  
             IF(@PANCOUNTER = 2)  
              SET @ISUPDATED= 0;  
             ELSE  
              SET @ISUPDATED=1;   
         END          
    END    
 ELSE  
   BEGIN  
   IF EXISTS(SELECT DISTINCT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID =@FORMID AND QUARTER=@QUARTER AND DEDUCTEESERIALNO =@DEDUCTEESNO AND PAN=@PAN)  
         BEGIN  
      SET @ISUPDATED=1;  
         END   
       ELSE   
         BEGIN  
       SELECT TOP 1  @PANCOUNTER=PANCOUNTER FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID =@FORMID AND QUARTER=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESNO;  
             IF(@PANCOUNTER = 2)  
              SET @ISUPDATED= 0;  
             ELSE  
              SET @ISUPDATED=1;   
         END          
   END   
   SELECT @ISUPDATED;   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFORTRANSFER')
DROP PROCEDURE USP_TDS_CHECKFORTRANSFER
GO
CREATE PROCEDURE [dbo].[USP_TDS_CHECKFORTRANSFER] 
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,  
@PARTPAYMENTID INT  
AS  
 BEGIN  
 DECLARE @RESULT INT  
 DECLARE @ISZORO INT  
 --SELECT @ISZORO = ISZORO FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID;  
  IF((SELECT ISNULL(DD.REPORTPAYMENTID,0) FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID) > 0)  
   BEGIN   
   SELECT @ISZORO = CASE WHEN RP.BRANCHID = DD.BRANCHID THEN 1 ELSE 0 END FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN REPORTPAYMENT RP ON DD.REPORTPAYMENTID = RP.ID WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.PARTPAYMENTID = @PARTPAYMENTID  
    IF EXISTS  
    (SELECT RP.BRANCHID,RP.PARENTBRANCHID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
    INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON DD.REPORTPAYMENTID = RP.ID  
    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID AND RP.PARENTBRANCHID = CASE WHEN @ISZORO = 1 THEN CB.BRANCHID ELSE CB.PARENTBRANCHID END  
    WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)  
    BEGIN  
     SET @RESULT = 1  
    END  
    ELSE  
    BEGIN  
     SET @RESULT = -1  
    END  
   END  
   ELSE  
   BEGIN  
    SET @RESULT = 1  
   END  
  SELECT @RESULT  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKFORUNLINKEDZEROTDSRECORDS')
DROP PROCEDURE USP_TDS_CHECKFORUNLINKEDZEROTDSRECORDS
GO
CREATE PROCEDURE USP_TDS_CHECKFORUNLINKEDZEROTDSRECORDS --1,2,2
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN  
DECLARE @RESULT INT
SET @RESULT = 0;
SELECT DEDUCTIONID,BRANCHID INTO #DEDCHA FROM DEDCHALINK DCL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
DECLARE @COUNT INT;
SELECT @COUNT = COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE TOTALDEDUCTED = 0 AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND
		NOT EXISTS 
		(
			SELECT DEDUCTIONID FROM #DEDCHA DCL WITH(NOLOCK) WHERE DD.DEDUCTIONID = DCL.DEDUCTIONID
		)
	IF  (@COUNT>0)
		BEGIN 
			SET @RESULT = 1
		END
	ELSE
		BEGIN
			SET @RESULT = 0
		END
	DROP TABLE #DEDCHA
	SELECT @RESULT	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKLICENCE')
DROP PROCEDURE USP_TDS_CHECKLICENCE
GO
CREATE PROCEDURE [USP_TDS_CHECKLICENCE]    
	@USERID INT     
AS    
	BEGIN    
		SELECT F.FEATURENAME, CASE WHEN FEATURE.FEATUREID IS NULL THEN 0 ELSE 1 END HASLICENCE 
		FROM FEATURE F WITH(NOLOCK) 
		LEFT JOIN (    
			SELECT RF.FEATUREID 
			FROM USERMASTER U    
			LEFT JOIN ROLEUSER R WITH(NOLOCK)   
				ON U.USERID = R.USERID    
			LEFT JOIN ROLEFEATURE RF WITH(NOLOCK)    
				ON RF.ROLEID = R.ROLEID    
			WHERE U.USERID = @USERID    
		) FEATURE    
		ON  FEATURE.FEATUREID = F.FEATUREID    
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKREPORTPAYMENTIDINDEDUCTION')
DROP PROCEDURE USP_TDS_CHECKREPORTPAYMENTIDINDEDUCTION
GO
CREATE PROCEDURE [USP_TDS_CHECKREPORTPAYMENTIDINDEDUCTION]
	@REPORTPAYMENTID INT,
	@BGLCODEID INT
AS
	BEGIN
		IF(@BGLCODEID <> -1)
			BEGIN
				SELECT COUNT(DEDUCTIONID) 
				FROM DEDUCTIONDETAIL WITH(NOLOCK)
				WHERE REPORTPAYMENTID = @REPORTPAYMENTID 
					AND BGLCODEID = @BGLCODEID
			END 
		ELSE
			BEGIN
				SELECT COUNT(DEDUCTIONID) 
				FROM DEDUCTIONDETAIL WITH(NOLOCK) 
				WHERE REPORTPAYMENTID = @REPORTPAYMENTID
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKTAXPAYABLE')
DROP PROCEDURE USP_TDS_CHECKTAXPAYABLE
GO
CREATE PROCEDURE USP_TDS_CHECKTAXPAYABLE
@BRANCHID INT
AS
	BEGIN
		SELECT COUNT(DEDUCTEEID) FROM SALARYDETAIL SD 
		WHERE BRANCHID = 1 AND TAXPAYABLE > 0
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKTEXT')
DROP PROCEDURE USP_TDS_CHECKTEXT
GO
CREATE PROCEDURE [USP_TDS_CHECKTEXT]  
@BRANCHID INT,  
@MONTHID INT  
AS  
  BEGIN  
  SELECT COUNT(*) FROM TEXTRECORDS WITH(NOLOCK) WHERE ISCORRECT=0  AND MONTHID=@MONTHID  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CHECKWORKMONTHTOSAVE')
DROP PROCEDURE USP_TDS_CHECKWORKMONTHTOSAVE
GO
CREATE PROCEDURE USP_TDS_CHECKWORKMONTHTOSAVE 
    @REFERENCENO VARCHAR(50),
    @BRANCHID INT,
    @DEDUCTEDDATE DATETIME
AS
    BEGIN
	   DECLARE @RESULT INT
	   IF((SELECT ISNULL(EMPTYPE,0) FROM DEDUCTEE D INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID WHERE REFERENCENO = @REFERENCENO AND BRANCHID = @BRANCHID) = 0)
		  BEGIN
			 SELECT * 
			 INTO #EMPWM 
			 FROM EMPWORKMONTH WITH(NOLOCK)
			 WHERE BRANCHID = @BRANCHID 
				AND MONTHID = MONTH(@DEDUCTEDDATE)
			 SELECT *
			 INTO #LNKTC
			 FROM LINKTOTC WITH(NOLOCK)
			 WHERE BRANCHID = @BRANCHID
			 SELECT D.*, E.EMPLOYEEID
			 INTO #EMST
			 FROM DEDUCTEE D WITH(NOLOCK) 
				INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
			 WHERE D.BRANCHID = @BRANCHID AND D.REFERENCENO = @REFERENCENO
			    --IF EXISTS(SELECT MONTHID FROM DEDUCTEE D WITH(NOLOCK) 
			    --INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
			    --INNER JOIN LINKTOTC LTC WITH(NOLOCK) ON LTC.EMPLOYEEID = E.EMPLOYEEID 
			    --INNER JOIN EMPWORKMONTH EWM WITH(NOLOCK) ON EWM.COMID = LTC.COMID AND LTC.BRANCHID = EWM.BRANCHID
			    --WHERE D.REFERENCENO = @REFERENCENO AND D.BRANCHID = @BRANCHID AND MONTHID = MONTH(@DEDUCTEDDATE))
			 IF EXISTS(SELECT MONTHID FROM #EMST D
					   INNER JOIN #LNKTC LTC ON D.EMPLOYEEID = LTC.EMPLOYEEID 
					   INNER JOIN #EMPWM EWM ON EWM.COMID = LTC.COMID AND EWM.BRANCHID = LTC.BRANCHID)
				BEGIN
					SET @RESULT = 1
				END
			 ELSE 
				BEGIN
					SET @RESULT = -1
				END
			 DROP TABLE #EMST
			 DROP TABLE #LNKTC
			 DROP TABLE #EMPWM
		  END
	   ELSE
		  BEGIN
			 SET @RESULT = 1	
		  END
	   SELECT @RESULT
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CLEARCERTIFICATENOS')
DROP PROCEDURE USP_TDS_CLEARCERTIFICATENOS
GO
CREATE PROCEDURE [USP_TDS_CLEARCERTIFICATENOS]
	@BRANCHID INT,	
	@FORMID INT,
	@SECTIONID INT,
	@DEDUCTEESLNO INT
AS
	BEGIN
		IF @DEDUCTEESLNO = -1
			BEGIN
				IF @SECTIONID <> -1
					BEGIN
						UPDATE FORM16A SET TDSCERTIFICATENO = 0,PRINTCERTIFICATENO = NULL,CERTIFICATEDATE = NULL,ISCERTIFICATEGIVEN = NULL
					    WHERE  BRANCHID = @BRANCHID AND SECTIONID = @SECTIONID;
					END
				ELSE
					BEGIN
						UPDATE FORM16A SET TDSCERTIFICATENO = 0,PRINTCERTIFICATENO = NULL,CERTIFICATEDATE = NULL,ISCERTIFICATEGIVEN = NULL
					    WHERE  BRANCHID = @BRANCHID;
					END					
			END
		ELSE
			BEGIN
				IF @SECTIONID <> -1
					BEGIN
						UPDATE FORM16A SET TDSCERTIFICATENO = 0,PRINTCERTIFICATENO=NULL,CERTIFICATEDATE=NULL,ISCERTIFICATEGIVEN=NULL 
						WHERE  BRANCHID = @BRANCHID AND DEDUCTIONID IN (SELECT DEDUCTIONID 
															    FROM   DEDUCTIONDETAIL WITH(NOLOCK) 
								                                WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND SECTIONID = @SECTIONID 
								                                                            AND DEDUCTEEID = (SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
																										      WHERE  D.BRANCHID = @BRANCHID AND NE.SERIALNO = @DEDUCTEESLNO));
					END
				ELSE
					BEGIN
						UPDATE FORM16A SET TDSCERTIFICATENO = 0,PRINTCERTIFICATENO = NULL,CERTIFICATEDATE = NULL,ISCERTIFICATEGIVEN = NULL 
						WHERE BRANCHID = @BRANCHID AND DEDUCTIONID IN (SELECT DEDUCTIONID 
																	   FROM   DEDUCTIONDETAIL WITH(NOLOCK) 
																       WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND DEDUCTEEID =(SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
																																 WHERE D.BRANCHID = @BRANCHID AND NE.SERIALNO = @DEDUCTEESLNO));
					END										
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CLEARFORM16CERTIFICATENOS')
DROP PROCEDURE USP_TDS_CLEARFORM16CERTIFICATENOS
GO
CREATE PROCEDURE [USP_TDS_CLEARFORM16CERTIFICATENOS]    
	@BRANCHID INT,    
	@FORMID INT,    
	@DEDUCTEESLNO INT    
AS    
	BEGIN    
		DECLARE @QUERY NVARCHAR(MAX);    
		SET @QUERY = 'UPDATE FORM16     
			SET TDSCERTIFICATENO = '''', PRINTCERTIFICATENO = NULL, CERTIFICATEDATE = NULL, 
			ISCERTIFICATEGIVEN = NULL    
			WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR);    
		IF @DEDUCTEESLNO <> -1    
			BEGIN    
				SET @QUERY = @QUERY + ' AND DEDUCTEEID IN ('+ CAST(@DEDUCTEESLNO AS VARCHAR) + ')'
			END    
		EXEC SP_EXECUTESQL @QUERY;    
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ClearForm16CertificateNosSB')
DROP PROCEDURE USP_TDS_ClearForm16CertificateNosSB
GO
CREATE PROCEDURE  USP_TDS_ClearForm16CertificateNosSB    
@BRANCHID INT,    
@DEDUCTEESLNO NVARCHAR(MAX)    
AS   
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SELECT * INTO #DEDUCTEESLNOS FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTEESLNO,',')
SELECT BRANCHID,D.DEDUCTEEID INTO #TEMP FROM DEDUCTEE D    
INNER JOIN EMPLOYEE E ON E.DEDUCTEEID=D.DEDUCTEEID
INNER JOIN #DEDUCTEESLNOS DSN ON DSN.DATA = E.SERIALNO    
WHERE D.BRANCHID=@BRANCHID    
UPDATE FORM16 SET TDSCERTIFICATENO=0,PRINTCERTIFICATENO = NULL,CERTIFICATEDATE = NULL,ISCERTIFICATEGIVEN = NULL    
FROM  #TEMP  WHERE #TEMP.BRANCHID=FORM16.BRANCHID AND #TEMP.DEDUCTEEID=FORM16.DEDUCTEEID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CLEARTTUM')
DROP PROCEDURE USP_TDS_CLEARTTUM
GO
CREATE PROCEDURE [USP_TDS_CLEARTTUM]  
@MONTH INT
AS
BEGIN
UPDATE CHALLANDETAIL SET ISTTUMINCLUDED=0,BANKCHALLANNO=NULL,LASTBANKCHALLANNO=NULL,CHALLANPAIDDATE=NULL,LASTCHALLANPAIDDATE=NULL FROM CHALLANDETAIL CD
 WHERE CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0 AND CD.ISTTUMINCLUDED=1 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CORRBULKEXPORT')
DROP PROCEDURE USP_TDS_CORRBULKEXPORT
GO
CREATE PROCEDURE [USP_TDS_CORRBULKEXPORT] 
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @UPDATEITEMS VARCHAR(MAX),
 @CORRECTIONSTATUS INT = -1 
AS
BEGIN     
	SET NOCOUNT ON
	  DECLARE @QUERY NVARCHAR(MAX), @SQLQUERY NVARCHAR(MAX); 
      CREATE TABLE #DEDUCTIONS(DEDUCTIONSERIALNO INT, CORRECTIONSTATUS INT);
	  CREATE TABLE #CORRMASTER (NAME VARCHAR(75),DEDUCTEEID INT, DEDUCTEESERIALNO INT,PAN VARCHAR(10)); 
	  SELECT * INTO #UPDATEITEMS FROM DBO.UDF_TDS_SPLITSTRING(@UPDATEITEMS, ',')	  
	  IF(@FORMID = 1)
		BEGIN  
			SET @SQLQUERY = ' SELECT CNE.NAME,DEDUCTEEID,CNE.DEDUCTEESERIALNO,CNE.PAN
							 FROM CORREMPLOYEE CNE WITH(NOLOCK)   
							INNER JOIN    
							(    
								SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
								FROM CORREMPLOYEE WITH(NOLOCK)  
							    WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
							    GROUP BY DEDUCTEESERIALNO    
							) UNE   
							ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS   
							WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) 
		END
	  ELSE
		BEGIN
			SET @SQLQUERY = ' SELECT CNE.NAME,DEDUCTEEID ,CNE.DEDUCTEESERIALNO,CNE.PAN
							 FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)   
							INNER JOIN    
							(    
								SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
								FROM CORRNONEMPLOYEE WITH(NOLOCK)  
							    WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
							    GROUP BY DEDUCTEESERIALNO    
							) UNE   
							ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS   
							WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) 
		END
	   INSERT INTO #CORRMASTER
	   EXEC SP_EXECUTESQL @SQLQUERY	   
		IF(@CORRECTIONSTATUS = 2)
			BEGIN
				INSERT INTO #DEDUCTIONS
				SELECT DEDUCTIONSERIALNO, CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = @CORRECTIONSTATUS
				UNION
				SELECT CDD.DEDUCTIONSERIALNO, CDD.CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
				INNER JOIN 
				(
					SELECT DEDUCTIONSERIALNO, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
					GROUP BY DEDUCTIONSERIALNO
				)C ON C.CORRECTIONSTATUS = CDD.CORRECTIONSTATUS AND C.DEDUCTIONSERIALNO = CDD.DEDUCTIONSERIALNO
				INNER JOIN #UPDATEITEMS U ON U.DATA  = CDD.DEDUCTIONSERIALNO
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 				
			END
		ELSE IF(@CORRECTIONSTATUS = 5)
			BEGIN
				INSERT INTO #DEDUCTIONS
				SELECT DEDUCTIONSERIALNO, CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = @CORRECTIONSTATUS
			END
		ELSE
			BEGIN	
				INSERT INTO #DEDUCTIONS
				SELECT DEDUCTIONSERIALNO, CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			END
	  SELECT CCD.CHALLANSERIALNO, CCD.CHALLANERETURNID INTO #CORRCHALLANS FROM CORRCHALLANDETAIL CCD WITH(NOLOCK) 
	  INNER JOIN
	  (
				SELECT CHALLANERETURNID, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRCHALLANDETAIL WITH(NOLOCK) 
					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER
					GROUP BY CHALLANERETURNID										
	   ) C
	   ON CCD.CHALLANERETURNID = C.CHALLANERETURNID AND CCD.CORRECTIONSTATUS = C.CORRECTIONSTATUS
	   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER
	   SET @QUERY =  'SELECT *, -1 AS CHALLANSECTION 
							 FROM 
							 (    
								 SELECT CDD.DEDUCTIONSERIALNO,CN.DEDUCTEEID,CDD.DEDUCTEESERIALNO,CN.NAME,CN.PAN,CDD.SECTIONID,TS.SECTIONNAME,CDD.PAYMENTMADE,
											CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.TAXRATE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,
											CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,
											CCD.CHALLANSERIALNO, CDD.CERTNO, CM.COUNTRYNAME,R.PARTICULARS, CDD.ACKNO, ISNULL(CDD.TDSRATEASPER,'''') TDSRATEASPER,CCD.CHALLANERETURNID,
											CDD.DEDUCTIONID, CDD.DEDUCTIONERETURNID
								 FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)  
								INNER JOIN #DEDUCTIONS D ON CDD.DEDUCTIONSERIALNO = D.DEDUCTIONSERIALNO AND CDD.CORRECTIONSTATUS = D.CORRECTIONSTATUS  
								INNER JOIN #CORRMASTER CN ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO
								INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID  
								INNER JOIN #CORRCHALLANS CCD WITH(NOLOCK) ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID 
								LEFT JOIN COUNTRYMASTER CM WITH(NOLOCK) ON CDD.COUNTRYID = CM.COUNTRYCODE
								LEFT JOIN REMITTANCES R WITH(NOLOCK) ON R.ID = CDD.REMITTANCEID
						    WHERE CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + '  AND
													  CDD.[QUARTER] ='+CAST(@QUARTER AS VARCHAR)    
	  SET @QUERY = @QUERY + ') TEMP ORDER BY DEDUCTIONSERIALNO'
	 EXEC SP_EXECUTESQL @QUERY;    
	-- PRINT @QUERY 
	 SET NOCOUNT OFF 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CORRBULKEXPORT_01')
DROP PROCEDURE USP_TDS_CORRBULKEXPORT_01
GO
CREATE PROCEDURE [USP_TDS_CORRBULKEXPORT_01]  --[USP_TDS_CORRBULKEXPORT_01] 19,2,1,'',2        
 @BRANCHID INT,            
 @FORMID INT,            
 @QUARTER INT,            
 @UPDATEITEMS VARCHAR(MAX),            
 @CORRECTIONSTATUS INT = -1             
AS            
BEGIN                 
 SET NOCOUNT ON            
 DECLARE @QUERY NVARCHAR(MAX), @SQLQUERY NVARCHAR(MAX);             
 CREATE TABLE #DEDUCTIONS(DEDUCTIONSERIALNO INT, CORRECTIONSTATUS INT);            
 CREATE TABLE #CORRMASTER (CORRECTIONTYPE VARCHAR(30), NAME VARCHAR(75),DEDUCTEEID INT,DEDUCTEESERIALNO INT,          
        PAN VARCHAR(10),SALUTATION TINYINT,ADDRESS1 VARCHAR(25),          
        ADDRESS2 VARCHAR(25),ADDRESS3 VARCHAR(25),          
        ADDRESS4 VARCHAR(25),ADDRESS5 VARCHAR(25),          
        STATEID TINYINT,PINCODE VARCHAR(6),PHONENO VARCHAR(15),EMAILADDRESS  VARCHAR(75),STATENAME VARCHAR(100));             
 SELECT * INTO #UPDATEITEMS FROM DBO.UDF_TDS_SPLITSTRING(@UPDATEITEMS, ',')   
 SELECT DEDUCTIONSERIALNO   
 INTO #DEDSERNO  
 FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)   
 WHERE BRANCHID = @BRANCHID  
  AND FORMID = @FORMID  
  AND QUARTER = @QUARTER  
  AND (CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4 OR CORRECTIONSTATUS = 5 OR CORRECTIONSTATUS = 7)              
 IF(@CORRECTIONSTATUS = 2)          
  SET @SQLQUERY = ' SELECT ''UPDATE'' AS CORRECTIONTYPE,'          
 IF(@CORRECTIONSTATUS = 5)          
  SET @SQLQUERY = ' SELECT ''ADD'' AS CORRECTIONTYPE,'          
 IF(@FORMID = 1)            
  BEGIN              
   SET @SQLQUERY = @SQLQUERY + ' CNE.NAME,DEDUCTEEID,CNE.DEDUCTEESERIALNO,CNE.PAN,           
       CNE.SALUTATION,CNE.ADDRESS1,CNE.ADDRESS2,CNE.ADDRESS3,          
       CNE.ADDRESS4,CNE.ADDRESS5,CNE.STATEID,          
       CNE.PINCODE,CNE.PHONENO,CNE.EMAILADDRESS,SM.STATENAME            
       FROM CORREMPLOYEE CNE WITH(NOLOCK)               
       INNER JOIN                
       (                
       SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS                
       FROM CORREMPLOYEE WITH(NOLOCK)              
       WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '             
       GROUP BY DEDUCTEESERIALNO                
       ) UNE               
       ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS               
       INNER JOIN STATEMASTER SM ON SM.STATEID=CNE.STATEID           
       WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR)             
  END            
 ELSE            
  BEGIN            
   SET @SQLQUERY = @SQLQUERY + ' CNE.NAME,DEDUCTEEID ,CNE.DEDUCTEESERIALNO,CNE.PAN,          
       CNE.SALUTATION,CNE.ADDRESS1,CNE.ADDRESS2,CNE.ADDRESS3,CNE.ADDRESS4,CNE.ADDRESS5,CNE.STATEID,CNE.PINCODE,CNE.PHONENO,CNE.EMAILADDRESS,SM.STATENAME                
       FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)               
       INNER JOIN                
       (                
       SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS                
       FROM CORRNONEMPLOYEE WITH(NOLOCK)              
       WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '             
       GROUP BY DEDUCTEESERIALNO                
       ) UNE               
       ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS               
       INNER JOIN STATEMASTER SM ON SM.STATEID=CNE.STATEID           
       WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR)             
  END            
 INSERT INTO #CORRMASTER            
 EXEC SP_EXECUTESQL @SQLQUERY           
 --PRINT @SQLQUERY          
 IF(@CORRECTIONSTATUS = 2)            
  BEGIN            
   INSERT INTO #DEDUCTIONS            
   SELECT DISTINCT(DEDUCTIONSERIALNO), CORRECTIONSTATUS   
   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)             
   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID   
    AND QUARTER = @QUARTER AND CORRECTIONSTATUS = @CORRECTIONSTATUS   
    AND DEDUCTIONSERIALNO NOT IN (SELECT DEDUCTIONSERIALNO FROM #DEDSERNO)              
   UNION            
   SELECT CDD.DEDUCTIONSERIALNO, CDD.CORRECTIONSTATUS   
   FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)            
    INNER JOIN             
     (            
      SELECT DEDUCTIONSERIALNO, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS   
      FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)            
      WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER             
      GROUP BY DEDUCTIONSERIALNO            
     )C   
     ON C.CORRECTIONSTATUS = CDD.CORRECTIONSTATUS AND C.DEDUCTIONSERIALNO = CDD.DEDUCTIONSERIALNO            
    INNER JOIN #UPDATEITEMS U ON U.DATA  = CDD.DEDUCTIONSERIALNO            
   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER            
  END            
 ELSE IF(@CORRECTIONSTATUS = 5)            
  BEGIN            
   INSERT INTO #DEDUCTIONS            
   SELECT DEDUCTIONSERIALNO, CORRECTIONSTATUS   
   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)            
   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID   
    AND QUARTER = @QUARTER AND CORRECTIONSTATUS = @CORRECTIONSTATUS            
  END            
 ELSE            
  BEGIN             
   INSERT INTO #DEDUCTIONS            
   SELECT DEDUCTIONSERIALNO, CORRECTIONSTATUS   
   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)             
   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER            
  END           
 SELECT CCD.CHALLANSERIALNO, CCD.CHALLANERETURNID INTO #CORRCHALLANS FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)             
 INNER JOIN            
 (            
  SELECT CHALLANERETURNID, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRCHALLANDETAIL WITH(NOLOCK)             
  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER            
  GROUP BY CHALLANERETURNID                      
 ) C            
 ON CCD.CHALLANERETURNID = C.CHALLANERETURNID AND CCD.CORRECTIONSTATUS = C.CORRECTIONSTATUS            
 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER            
 SET @QUERY =  'SELECT *, -1 AS CHALLANSECTION             
 FROM             
 (            
  SELECT CN.CORRECTIONTYPE, CDD.DEDUCTIONSERIALNO,(CN.NAME + ''(''+ CAST(CDD.DEDUCTEESERIALNO AS VARCHAR) +'')'')NAME,CN.DEDUCTEEID,CDD.DEDUCTEESERIALNO,CN.PAN,CDD.SECTIONID,TS.TAXNAME,TS.SECTIONNAME,CDD.PAYMENTMADE,            
  CN.SALUTATION,CN.ADDRESS1,CN.ADDRESS2,CN.ADDRESS3,CN.ADDRESS4,CN.ADDRESS5,CN.STATEID,CN.PINCODE,CN.PHONENO,CN.EMAILADDRESS,CN.STATENAME,            
  CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.TAXRATE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,            
  CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,            
  CCD.CHALLANSERIALNO, CDD.CERTNO, CM.COUNTRYNAME,R.PARTICULARS, CDD.ACKNO, ISNULL(CDD.TDSRATEASPER,'''') TDSRATEASPER,CCD.CHALLANERETURNID,            
  CDD.DEDUCTIONID, CDD.DEDUCTIONERETURNID,           
  CDD.UPDATEINDICATOR, CDD.EMAILDED, CDD.CONTACTNODED, CDD.ADDRESSDED, CDD.IDENTNUMDED           
  FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)              
  INNER JOIN #DEDUCTIONS D ON CDD.DEDUCTIONSERIALNO = D.DEDUCTIONSERIALNO AND CDD.CORRECTIONSTATUS = D.CORRECTIONSTATUS              
  INNER JOIN #CORRMASTER CN ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO       
  INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID              
  INNER JOIN #CORRCHALLANS CCD WITH(NOLOCK) ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID             
  LEFT JOIN COUNTRYMASTER CM WITH(NOLOCK) ON CDD.COUNTRYID = CM.COUNTRYCODE            
  LEFT JOIN REMITTANCES R WITH(NOLOCK) ON R.ID = CDD.REMITTANCEID            
  WHERE CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + '  AND            
  CDD.[QUARTER] ='+CAST(@QUARTER AS VARCHAR)            
 SET @QUERY = @QUERY + ') TEMP ORDER BY DEDUCTIONSERIALNO'            
 EXEC SP_EXECUTESQL @QUERY;                
 --PRINT @QUERY             
 SET NOCOUNT OFF             
END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CorrectionDedRemarkUpdate')
DROP PROCEDURE USP_TDS_CorrectionDedRemarkUpdate
GO
CREATE PROCEDURE USP_TDS_CorrectionDedRemarkUpdate --999114, 'AADTS5679J,AABPV9840J,AABPS2323R'
    @BRANCHCODE VARCHAR(30),
    @PANLIST VARCHAR(MAX)
AS
    BEGIN
	   DECLARE @BRANCHID INT;
	   SELECT @BRANCHID = BRANCHID FROM COMPANYBRANCH WHERE BRANCHCODE = @BRANCHCODE
	   SELECT * INTO #PANLST FROM dbo.UDF_TDS_SPLITSTRING(@PANLIST, ',')  
	   -- Identifying data which is to be added for UPDATE.
	   -- Excluding records which are already picked for correction.
	   SELECT BRANCHID, FORMID, QUARTER, DEDUCTIONSERIALNO, DEDUCTEESERIALNO, CHALLANERETURNID, DEDUCTIONERETURNID, SECTIONID
	   INTO #FORDED
	   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
	   WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND QUARTER = 3
		  AND NONDEDREASON = 5 
		  AND CORRECTIONSTATUS = 1
		  AND TOTALDEDUCTED = 0
		  AND SECTIONID = 5
		  AND DEDUCTEESERIALNO IN 
			 (
				SELECT DEDUCTEESERIALNO 
				FROM CORRNONEMPLOYEE 
				WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND QUARTER = 3
				    AND PAN IN (SELECT DATA FROM #PANLST)
			 )
	   EXCEPT
		  SELECT BRANCHID, FORMID, QUARTER, DEDUCTIONSERIALNO, DEDUCTEESERIALNO, CHALLANERETURNID, DEDUCTIONERETURNID, SECTIONID
		  FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
		  WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND QUARTER = 3
		  AND CORRECTIONSTATUS = 2
	   -- Creating the Deduction records with correction status as 'UPDATE' and non deduction reason as 'No Deduction us/197A'
	   INSERT INTO CORRDEDUCTIONDETAIL
	   SELECT D.BRANCHID, D.FORMID, D.QUARTER, D.DEDUCTIONSERIALNO, D.DEDUCTIONID, D.DEDUCTEESERIALNO, D.CHALLANERETURNID, D.DEDUCTIONERETURNID, D.SECTIONID, D.MODE, 
		  D.PAYMENTMADE, D.PAYMENTDATE, D.INCOMETAXRATE, D.INCOMETAX, D.LASTINCOMETAX, D.SURCHARGERATE, D.SURCHARGE, D.LASTSURCHARGE, D.EDUCATIONCESSRATE, 
		  D.EDUCATIONCESS, D.LASTEDUCATIONCESS, D.ISTAXINFOEDITABLE, D.TAXRATE, D.TOTALDEDUCTED, D.LASTTOTALDEDUCTED, D.DEDUCTEDDATE, 
		  D.ISBOOKENTRY, 2 NONDEDREASON, D.ISGROSSINGUP, D.UTN, D.ISPANVALIDBYITD, 2 CORRECTIONSTATUS, D.UPDATEINDICATOR, D.MATCHEDID, 
		  D.CERTNO, D.TDSRATEASPER, D.ACKNO, D.REMITTANCEID, D.COUNTRYID
	   FROM CORRDEDUCTIONDETAIL D WITH(NOLOCK)
		  INNER JOIN #FORDED U
		  ON D.BRANCHID = U.BRANCHID AND D.FORMID = U.FORMID AND D.QUARTER = U.QUARTER 
			 AND D.DEDUCTIONSERIALNO = U.DEDUCTIONSERIALNO AND D.DEDUCTEESERIALNO = U.DEDUCTEESERIALNO
			 AND D.CHALLANERETURNID = U.CHALLANERETURNID AND D.DEDUCTIONERETURNID = U.DEDUCTIONERETURNID
			 AND D.SECTIONID = U.SECTIONID
	   SELECT DISTINCT C.BRANCHID, C.FORMID, C.QUARTER, C.CHALLANERETURNID, C.SECTIONID
	   INTO #FORCHA
	   FROM CORRCHALLANDETAIL C WITH(NOLOCK)
		  INNER JOIN #FORDED D
			 ON C.BRANCHID = D.BRANCHID AND C.FORMID = D.FORMID AND C.QUARTER = D.QUARTER 
				AND C.CHALLANERETURNID = D.CHALLANERETURNID AND C.SECTIONID = D.SECTIONID 
	   EXCEPT SELECT BRANCHID, FORMID, QUARTER, CHALLANERETURNID, SECTIONID
		  FROM CORRCHALLANDETAIL WITH(NOLOCK)
		  WHERE BRANCHID = @BRANCHID AND FORMID = 2 AND QUARTER = 3
			 AND CORRECTIONSTATUS = 2
	   INSERT INTO CORRCHALLANDETAIL
	   SELECT C.BRANCHID, C.FORMID, C.QUARTER, C.CHALLANSERIALNO, C.CHALLANID, C.SECTIONID, C.INCOMETAX, C.SURCHARGE, C.EDUCATIONCESS, 
		  C.INTEREST, C.PENALTY, C.OTHERS, C.CHALLANTOTAL, C.LASTCHALLANTOTAL, C.CHALLANERETURNID, C.LINKDEDCOUNT, C.ISNILCHALLAN, 
		  0 ISUPDATECHALLAN, C.MODEOFPAYMENT, C.BANKCHALLANNO, C.LASTBANKCHALLANNO, C.TRNVOUCHERNO, C.LASTTRNVOUCHERNO, C.BANKID, C.LASTBANKID, 
		  C.CHALLANPAIDDATE, C.LASTCHALLANPAIDDATE, C.DATEOFDEBIT, NULL ISCOMPANY, C.CHEQUENO, C.CHEQUEDATE, C.CHEQUEDRAWNON, C.TRANREFNO, 
		  C.TVRECEIPTNUMBER, 2 CORRECTIONSTATUS, C.MATCHEDID, NULL EXPECTEDDID, C.CHALLANEDITMODE, C.PENDINGAMOUNT, C.FEE, C.MINORHEAD, C.UPDATEINDICATOR, C.ISONLINECHALLAN
	   FROM CORRCHALLANDETAIL C WITH(NOLOCK)
		  INNER JOIN #FORCHA U
		  ON C.BRANCHID = U.BRANCHID AND C.FORMID = U.FORMID AND C.QUARTER = U.QUARTER 
			 AND C.CHALLANERETURNID = U.CHALLANERETURNID AND C.SECTIONID = U.SECTIONID
	   IF OBJECT_ID('tempdb..#FORDED') is not null
		  DROP TABLE #FORDED
	   IF OBJECT_ID('tempdb..#FORCHA') is not null
		  DROP TABLE #FORCHA
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CorrUpdateTOTALTDS')
DROP PROCEDURE USP_TDS_CorrUpdateTOTALTDS
GO
Create PROCEDURE [dbo].[USP_TDS_CorrUpdateTOTALTDS]
@BRANCHID INT,
@PANLIST VARCHAR(MAX)
AS
BEGIN
	DECLARE @MAXSERIALNO INT;
	SELECT @MAXSERIALNO = MAX(CORRDEDUCTEESERIALNO) FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
	SELECT * INTO #PANLIST FROM UDF_TDS_SPLITSTRING(@PANLIST,','); 
	SELECT DEDUCTEESERIALNO
	INTO #UPDATEDRECORDS
	FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND CORRECTIONSTATUS = 2 
	SELECT DEDUCTEEID, SUM(ISNULL(INCOMETAX,0)) TOTALINCOMETAX, SUM(ISNULL(SURCHARGE,0)) TOTALSURCHARGE, SUM(ISNULL(EDUCATIONCESS,0)) TOTALEDUCATIONCESS
	INTO #DEDUCTIONDETAIL
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	WHERE FORMID = 1 AND BRANCHID = @BRANCHID
	GROUP BY DEDUCTEEID
	HAVING (SUM(ISNULL(INCOMETAX,0)) + SUM(ISNULL(SURCHARGE,0)) + SUM(ISNULL(EDUCATIONCESS,0))) > 0
	INSERT INTO CORRSALARYDETAIL(DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,DEDUCTEEID,BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,
				 OTHERINCOME,GROSSTOTALINCOME,LASTGROSSTOTALINCOME,VIA80CCE,VIA80CCF,VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,
				 TOTALTAXABLEINCOME,TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,RELIEFUS89,NETTAXPAYABLE,TOTALTDS,TAXPAYABLE,
				 CORRECTIONSTATUS,RECORDSTATUS, CURRENTTAXABLEINCOME, PREVTAXABLEINCOME, CURRENTTDS, PREVTDS, ISTDSATHIGHERRATE, PANLL1, NAMELL1, PANLL2, NAMELL2,
				 PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, 
				 SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED)
	SELECT CSD.DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,CSD.DEDUCTEEID,CSD.BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,OTHERINCOME,GROSSTOTALINCOME,GROSSTOTALINCOME,VIA80CCE,VIA80CCF,VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,
				 TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,RELIEFUS89,NETTAXPAYABLE,TOTALTDS,TAXPAYABLE,4,0, CURRENTTAXABLEINCOME, PREVTAXABLEINCOME, CURRENTTDS, PREVTDS, ISTDSATHIGHERRATE, PANLL1, NAMELL1, PANLL2, NAMELL2,
				 PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, 
				 SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED
	FROM   CORRSALARYDETAIL CSD WITH(NOLOCK)
	INNER JOIN CORREMPLOYEE CE WITH(NOLOCK)
	ON CSD.DEDUCTEESERIALNO = CE.DEDUCTEESERIALNO AND CSD.BRANCHID = CE.BRANCHID
	INNER JOIN DEDUCTEE D WITH(NOLOCK)
	ON CE.PAN = D.PAN AND CSD.BRANCHID = D.BRANCHID
	INNER JOIN EMPLOYEE E WITH(NOLOCK)
	ON E.DEDUCTEEID = D.DEDUCTEEID
	INNER JOIN #DEDUCTIONDETAIL DD WITH(NOLOCK)
	ON D.DEDUCTEEID = DD.DEDUCTEEID
	INNER JOIN #PANLIST P ON P.DATA = CE.PAN
	WHERE CSD.BRANCHID = @BRANCHID AND CSD.DEDUCTEESERIALNO NOT IN (SELECT DEDUCTEESERIALNO FROM #UPDATEDRECORDS)
	INSERT INTO CORREMPLOYEE(BRANCHID,FORMID,[QUARTER],DEDUCTEESERIALNO,DEDUCTEEID,SALUTATION,NAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,          
			   STATEID,PINCODE,GENDER,ISSENIORCITIZEN,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,PHONENO,EMAILADDRESS,PAN,LASTPAN,          
			   UPDATEINDICATOR,CORRECTIONSTATUS)
	SELECT CE.BRANCHID,FORMID,[QUARTER],DEDUCTEESERIALNO,CE.DEDUCTEEID,CE.SALUTATION,CE.NAME,CE.ADDRESS1,CE.ADDRESS2,CE.ADDRESS3,CE.ADDRESS4,CE.ADDRESS5,          
			   CE.STATEID,CE.PINCODE,CE.GENDER,CE.ISSENIORCITIZEN,CE.DESIGNATION,CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO,CE.PHONENO,CE.EMAILADDRESS,CE.PAN,LASTPAN,          
			   UPDATEINDICATOR, 2
	FROM CORREMPLOYEE CE WITH(NOLOCK)
	INNER JOIN DEDUCTEE D WITH(NOLOCK)
	ON CE.PAN = D.PAN AND CE.BRANCHID = D.BRANCHID
	INNER JOIN EMPLOYEE E WITH(NOLOCK)
	ON E.DEDUCTEEID = D.DEDUCTEEID
	INNER JOIN #DEDUCTIONDETAIL DD WITH(NOLOCK)
	ON D.DEDUCTEEID = DD.DEDUCTEEID
	INNER JOIN #PANLIST P ON P.DATA = CE.PAN
	WHERE CE.BRANCHID = @BRANCHID AND CE.DEDUCTEESERIALNO NOT IN (SELECT DEDUCTEESERIALNO FROM #UPDATEDRECORDS)
	INSERT INTO CORRSALARYDETAIL(DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,
			 OTHERINCOME,GROSSTOTALINCOME,LASTGROSSTOTALINCOME,VIA80CCE,VIA80CCF,VIA80CCG, VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,
			 TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,RELIEFUS89,NETTAXPAYABLE,TOTALTDS,TAXPAYABLE,
			 CORRECTIONSTATUS,RECORDSTATUS, CURRENTTAXABLEINCOME, PREVTAXABLEINCOME, CURRENTTDS, PREVTDS, ISTDSATHIGHERRATE, PANLL1, NAMELL1, PANLL2, NAMELL2,
			 PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, 
			 SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED)
	SELECT CSD.DEDUCTEESERIALNO,(@MAXSERIALNO + ROW_NUMBER() OVER (ORDER BY (SELECT NULL))) CORRDEDUCTEESERIALNO,CSD.BRANCHID,CSD.GROSSSALARY,ET,PT,CSD.DEDUCTIONUS16,CSD.INCOMEFROMSALARIES,CSD.OTHERINCOME,CSD.GROSSTOTALINCOME,CSD.GROSSTOTALINCOME,VIA80CCE,VIA80CCF,VIA80CCG,VIAOTHERS,CSD.TOTALDEDUNDERCHAPTERVIA,CSD.TOTALTAXABLEINCOME,
			 CSD.TAXONTOTALINCOME,CSD.SURCHARGE, CSD.EDUCATIONCESS, CSD.RELIEFUS89, CSD.NETTAXPAYABLE, 
			 FLOOR(DD.TOTALINCOMETAX + DD.TOTALSURCHARGE + DD.TOTALEDUCATIONCESS + ISNULL(SD.PREVEMPINCOMETAX,0) + ISNULL(SD.PREVEMPSURCHARGE,0) + ISNULL(SD.PREVEMPCESS,0) + ISNULL(SD.MANUALINCOMETAX,0) + ISNULL(SD.MANUALSURCHARGE,0) + ISNULL(SD.MANUALCESS,0)) AS TOTALTDS,
			 CSD.NETTAXPAYABLE	- FLOOR(DD.TOTALINCOMETAX + DD.TOTALSURCHARGE + DD.TOTALEDUCATIONCESS + ISNULL(SD.PREVEMPINCOMETAX,0) + ISNULL(SD.PREVEMPSURCHARGE,0) + ISNULL(SD.PREVEMPCESS,0) + ISNULL(SD.MANUALINCOMETAX,0) + ISNULL(SD.MANUALSURCHARGE,0) + ISNULL(SD.MANUALCESS,0)) AS TAXPAYABLE,
				2 AS CORRECTIONSTATUS, 1 AS RECORDSTATUS, CSD.GROSSSALARY, CSD.PREVTAXABLEINCOME, FLOOR(DD.TOTALINCOMETAX + DD.TOTALSURCHARGE + DD.TOTALEDUCATIONCESS + ISNULL(SD.MANUALINCOMETAX,0) + ISNULL(SD.MANUALSURCHARGE,0) + ISNULL(SD.MANUALCESS,0)), 
				CSD.PREVTDS, CSD.ISTDSATHIGHERRATE, 
			 CSD.PANLL1, CSD.NAMELL1, CSD.PANLL2, CSD.NAMELL2, CSD.PANLL3, CSD.NAMELL3, CSD.PANLL4, CSD.NAMELL4, 
			 CSD.PANLEND1, CSD.NAMELEND1, CSD.PANLEND2, CSD.NAMELEND2, CSD.PANLEND3, CSD.NAMELEND3, CSD.PANLEND4, CSD.NAMELEND4, 
			 CSD.SAFNAME, CSD.SAFFROMDATE, CSD.SAFTODATE, CSD.AMTREPAID, CSD.SAFTAXRATE, CSD.SAFTAXDEDUCTED
				FROM   CORRSALARYDETAIL CSD WITH(NOLOCK)
				INNER JOIN CORREMPLOYEE CE WITH(NOLOCK)
				ON CSD.DEDUCTEESERIALNO = CE.DEDUCTEESERIALNO AND CSD.BRANCHID = CE.BRANCHID AND CE.CORRECTIONSTATUS = 1 AND CSD.CORRECTIONSTATUS = 1
				INNER JOIN DEDUCTEE D WITH(NOLOCK)
				ON CE.PAN = D.PAN AND CSD.BRANCHID = D.BRANCHID
				INNER JOIN EMPLOYEE E WITH(NOLOCK)
				ON E.DEDUCTEEID = D.DEDUCTEEID
				INNER JOIN #DEDUCTIONDETAIL DD WITH(NOLOCK)
				ON D.DEDUCTEEID = DD.DEDUCTEEID 
				INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
				ON D.DEDUCTEEID = SD.DEDUCTEEID
				INNER JOIN #PANLIST P ON P.DATA = CE.PAN
				WHERE CE.CORRECTIONSTATUS = 1 AND CSD.BRANCHID = @BRANCHID AND CSD.DEDUCTEESERIALNO NOT IN (SELECT DEDUCTEESERIALNO FROM #UPDATEDRECORDS)
	/*Updating Current TDS in Salary Detail*/
	UPDATE SALARYDETAIL 
	SET TDSITDEDUCTED = D.TOTALINCOMETAX, 
		TDSSURCHARGEDEDUCTED = D.TOTALSURCHARGE, 
		EDUCESSDEDUCTED = D.TOTALEDUCATIONCESS,
		TOTALTDS = ( D.TOTALINCOMETAX
					 + D.TOTALSURCHARGE
					 + D.TOTALEDUCATIONCESS
					 + ISNULL(SD.PREVEMPINCOMETAX,0)
					 + ISNULL(SD.PREVEMPSURCHARGE,0)
					 + ISNULL(SD.PREVEMPCESS,0) 
					 + ISNULL(SD.MANUALINCOMETAX,0)
					 + ISNULL(SD.MANUALSURCHARGE,0)
					 + ISNULL(SD.MANUALCESS,0)
				   ),
		TAXPAYABLE = ( SD.NETTAXPAYABLE 
					 - ( D.TOTALINCOMETAX
					 + D.TOTALSURCHARGE
					 + D.TOTALEDUCATIONCESS
					 + ISNULL(SD.PREVEMPINCOMETAX,0)
					 + ISNULL(SD.PREVEMPSURCHARGE,0)
					 + ISNULL(SD.PREVEMPCESS,0) 
					 + ISNULL(SD.MANUALINCOMETAX,0)
					 + ISNULL(SD.MANUALSURCHARGE,0)
					 + ISNULL(SD.MANUALCESS,0)
				   ))
	FROM 
		(
			SELECT DEDUCTEEID, BRANCHID, 
				   SUM(DD.INCOMETAX) TOTALINCOMETAX, 
				   SUM(DD.SURCHARGE) TOTALSURCHARGE, 
				   SUM(DD.EDUCATIONCESS) TOTALEDUCATIONCESS 
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			WHERE FORMID = 1
			GROUP BY DEDUCTEEID, BRANCHID
		) D
	INNER JOIN SALARYDETAIL SD
		ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
	INNER JOIN DEDUCTEE DE
		ON DE.DEDUCTEEID = SD.DEDUCTEEID
	INNER JOIN #PANLIST P ON P.DATA = DE.PAN
	WHERE SD.BRANCHID = @BRANCHID
	IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
				DROP TABLE #DEDUCTIONDETAIL
	IF OBJECT_ID('TEMPDB..#UPDATEDRECORDS') IS NOT NULL
				DROP TABLE #UPDATEDRECORDS
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CREATEALLEXISTINGCHALLANS')
DROP PROCEDURE USP_TDS_CREATEALLEXISTINGCHALLANS
GO
CREATE PROCEDURE [USP_TDS_CREATEALLEXISTINGCHALLANS]  
	@BRANCHID INT,  
	@FORMID INT,  
	@QUARTER INT  
AS  
	BEGIN  
		DECLARE @DEDUCTEE TABLE(DEDUCTEEID INT, SERIALNO INT);  
        DECLARE @MAXCHALLANERETURNID INT;   
        SET @MAXCHALLANERETURNID = 0;  
		SELECT @MAXCHALLANERETURNID = MAX(CHALLANERETURNID) 
		FROM CORRCHALLANDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND QUARTER = @FORMID  
		SELECT * INTO #CHA FROM  
		(  
			SELECT SERIALNO 
			FROM CHALLANDETAIL WITH(NOLOCK) 
			WHERE BRANCHID = @BRANCHID 
				AND FORMID = @FORMID 
				AND QUARTER = @QUARTER  
			EXCEPT  
			SELECT CHALLANSERIALNO 
			FROM CORRCHALLANDETAIL WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID 
					AND FORMID = @FORMID 
					AND QUARTER = @QUARTER  
		)DE  
		SELECT @MAXCHALLANERETURNID + ROW_NUMBER() OVER(ORDER BY CHALLANID) AS CHALLANERETURNID, CHALLANID   
		INTO #CHALLANERETURNID   
		FROM CHALLANDETAIL CD WITH(NOLOCK)   
		INNER JOIN #CHA CA ON CD.SERIALNO = CA.SERIALNO  
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND QUARTER = @QUARTER  
		SELECT CE.CHALLANERETURNID, CD.CHALLANID  
		INTO #ERETURNID  
		FROM CHALLANDETAIL CD WITH(NOLOCK)  
		INNER JOIN #CHALLANERETURNID CE ON CE.CHALLANID = CD.CHALLANID  
		WHERE CD.BRANCHID = @BRANCHID 
			AND CD.FORMID = @FORMID 
			AND CD.QUARTER = @QUARTER  
		INSERT INTO CORRCHALLANDETAIL(CHALLANERETURNID, BRANCHID, FORMID, QUARTER, CHALLANSERIALNO, CHALLANID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST,   
			PENALTY, OTHERS, CHALLANTOTAL, LASTCHALLANTOTAL,LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT, BANKCHALLANNO,   
			LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, ISCOMPANY,   
			CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, CORRECTIONSTATUS, MATCHEDID, EXPECTEDDID,   
			CHALLANEDITMODE,PENDINGAMOUNT, FEE, MINORHEAD)  
		SELECT CHALLANERETURNID, BRANCHID, FORMID, QUARTER, SERIALNO AS CHALLANSERIALNO, CD.CHALLANID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, PENALTY, OTHERS,   
			CHALLANTOTAL, LASTCHALLANTOTAL,LINKDEDCOUNT, ISNILCHALLAN,1 AS ISUPDATECHALLAN, MODEOFPAYMENT, BANKCHALLANNO,   
			LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, ISCOMPANY,   
			CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, 7 AS CORRECTIONSTATUS, -1 AS MATCHEDID, NULL AS EXPECTEDDID,   
			'' AS CHALLANEDITMODE, 0 AS PENDINGAMOUNT, FEE, MINORHEAD 
		FROM CHALLANDETAIL CD WITH(NOLOCK)  
        INNER JOIN #ERETURNID ER ON ER.CHALLANID = CD.CHALLANID  
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND QUARTER = @QUARTER  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CreateAllExistingDeductions')
DROP PROCEDURE USP_TDS_CreateAllExistingDeductions
GO
CREATE PROCEDURE USP_TDS_CreateAllExistingDeductions
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@FINYEAR INT
AS
  BEGIN
        DECLARE @DEDUCTEE TABLE(DEDUCTEEID INT, SERIALNO INT);
        DECLARE @REMDEDUCTEE TABLE(SERIALNO INT);
       DECLARE @MONTHID INT, @LASTDATE SMALLDATETIME, @MAXCHALLANERETURNID INT; 
       DELETE FROM CORRDEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  AND CORRECTIONSTATUS = 7
       DELETE FROM CORRCHALLANDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  AND CORRECTIONSTATUS = 7
        IF(@QUARTER = 1)
           SET @MONTHID = 3;
        ELSE IF(@QUARTER = 2)
           SET @MONTHID = 6;
        ELSE IF(@QUARTER = 3)
           SET @MONTHID = 9;
        ELSE 
           SET @MONTHID = 12; 
        SELECT @LASTDATE = DATEADD(DAY,-1,DATEADD(MONTH,@MONTHID,DATEADD(YEAR,@FINYEAR-1900,0)))  
        SET @MAXCHALLANERETURNID = 0;
        IF(@FORMID = 1)
           BEGIN
			 INSERT INTO @DEDUCTEE
			 SELECT D.DEDUCTEEID, E.SERIALNO FROM DEDUCTEE D WITH(NOLOCK)
			 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
			 WHERE BRANCHID = @BRANCHID
			 INSERT INTO @REMDEDUCTEE
			 SELECT SERIALNO FROM @DEDUCTEE
			 EXCEPT
			 SELECT DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			  INSERT INTO CORREMPLOYEE( BRANCHID, FORMID, QUARTER, DEDUCTEESERIALNO, DEDUCTEEID, SALUTATION, NAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, 
               PINCODE, GENDER, ISSENIORCITIZEN, DESIGNATION, EMPLOYMENTFROM, EMPLOYMENTTO, PHONENO, EMAILADDRESS, PAN, PANREFERENCE, LASTPAN, 
               LASTPANREFERENCE, CORRECTIONSTATUS, UPDATEINDICATOR, MATCHEDID, PANFLAG, PANCOUNTER)
                SELECT  BRANCHID, @FORMID AS FORMID, @QUARTER AS QUARTER, E.SERIALNO AS DEDUCTEESERIALNO, D.DEDUCTEEID, SALUTATION, NAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, 
                      PINCODE, GENDER, ISSENIORCITIZEN, DESIGNATION, EMPLOYMENTFROM, EMPLOYMENTTO, PHONENO, EMAILADDRESS, PAN, PANREFERENCE, PAN AS LASTPAN, 
                      PANREFERENCE AS LASTPANREFERENCE, 1 AS CORRECTIONSTATUS, 1 AS UPDATEINDICATOR, NULL AS MATCHEDID, 0 AS PANFLAG, 0 AS PANCOUNTER
                     FROM DEDUCTEE D WITH(NOLOCK)
                     INNER JOIN  EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
                     INNER JOIN @REMDEDUCTEE R ON R.SERIALNO = E.SERIALNO
                     INNER JOIN 
                     (
						SELECT DISTINCT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
                     )DD ON D.DEDUCTEEID = DD.DEDUCTEEID 
                      WHERE BRANCHID = @BRANCHID  
           END    
         ELSE
           BEGIN
			 INSERT INTO @DEDUCTEE
			 SELECT D.DEDUCTEEID, NE.SERIALNO FROM DEDUCTEE D WITH(NOLOCK)
			 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
			 WHERE BRANCHID = @BRANCHID
			 INSERT INTO @REMDEDUCTEE
			 SELECT SERIALNO FROM @DEDUCTEE
			 EXCEPT
			 SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			 INSERT INTO CORRNONEMPLOYEE(BRANCHID, FORMID, QUARTER, DEDUCTEESERIALNO, DEDUCTEEID, SALUTATION, NAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, 
                      PINCODE, ISAPPLICABLE26, ISAPPLICABLE27, PHONENO, EMAILADDRESS, PAN, PANREFERENCE, LASTPAN, LASTPANREFERENCE, CODE, ISTRANSPORTER, 
                      CORRECTIONSTATUS, UPDATEINDICATOR, MATCHEDID, PANFLAG, PANCOUNTER)
             SELECT BRANCHID, @FORMID AS FORMID, @QUARTER AS QUARTER, NE.SERIALNO AS DEDUCTEESERIALNO, D.DEDUCTEEID, SALUTATION, NAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, 
                      PINCODE, ISAPPLICABLE26, ISAPPLICABLE27, PHONENO, EMAILADDRESS, PAN, PANREFERENCE, PAN AS LASTPAN, PANREFERENCE AS LASTPANREFERENCE, CODE, ISTRANSPORTER, 
                      1 AS CORRECTIONSTATUS, 1 AS UPDATEINDICATOR, NULL AS MATCHEDID, 0 AS PANFLAG, 0 AS PANCOUNTER
                     FROM DEDUCTEE D WITH(NOLOCK)
                     INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
                     INNER JOIN @REMDEDUCTEE R ON R.SERIALNO = NE.SERIALNO
                     INNER JOIN 
                     (
						SELECT DISTINCT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
                     )DD ON D.DEDUCTEEID = DD.DEDUCTEEID
                      WHERE BRANCHID = @BRANCHID 
           END   
		--SELECT @MAXCHALLANERETURNID = MAX(CHALLANERETURNID) FROM CORRCHALLANDETAIL WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @FORMID
		SELECT * INTO #DED FROM
		(
			SELECT SERIALNO FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			EXCEPT
			SELECT DEDUCTIONSERIALNO FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		)DE
		SELECT * INTO #CHA FROM
		(
			SELECT SERIALNO FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			EXCEPT
			SELECT CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		)DE
		IF EXISTS(SELECT CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 7 AND CHALLANTOTAL > 0)
		   BEGIN
			 SELECT @MAXCHALLANERETURNID = MAX(CHALLANERETURNID) FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 7 AND CHALLANTOTAL > 0
		   END
		ELSE
		   BEGIN	
			 SELECT @MAXCHALLANERETURNID = MAX(CHALLANERETURNID) FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS IN(1,7) AND CHALLANTOTAL = 0
		   END
		SELECT ROW_NUMBER() OVER(ORDER BY CHALLANID) + ISNULL(@MAXCHALLANERETURNID,0) AS CHALLANERETURNID , 
				   CHALLANID INTO #CHALLANERETURNID FROM CHALLANDETAIL WITH(NOLOCK) 
		WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		SELECT DD.DEDUCTIONID,CE.CHALLANERETURNID, CD.CHALLANID, ROW_NUMBER() OVER(PARTITION BY CD.CHALLANID ORDER BY DD.DEDUCTIONID)DEDUCTIONERETURNID 
		INTO #DEDERETURNID
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN #DED DE ON DD.SERIALNO = DE.SERIALNO
		INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
		INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
		INNER JOIN #CHALLANERETURNID  CE ON CE.CHALLANID = CD.CHALLANID
		WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER
		INSERT INTO CORRDEDUCTIONDETAIL(BRANCHID, FORMID, QUARTER, DEDUCTIONSERIALNO, DEDUCTIONID, DEDUCTEESERIALNO, CHALLANERETURNID,
				   DEDUCTIONERETURNID,SECTIONID, MODE, PAYMENTMADE, PAYMENTDATE, INCOMETAXRATE, INCOMETAX, LASTINCOMETAX, SURCHARGERATE, 
				   SURCHARGE, LASTSURCHARGE, EDUCATIONCESSRATE, EDUCATIONCESS, LASTEDUCATIONCESS, ISTAXINFOEDITABLE, TAXRATE, 
				   TOTALDEDUCTED, LASTTOTALDEDUCTED, DEDUCTEDDATE, ISBOOKENTRY,NONDEDREASON, ISGROSSINGUP, UTN, ISPANVALIDBYITD, 
				   CORRECTIONSTATUS, UPDATEINDICATOR, MATCHEDID, CERTNO, TDSRATEASPER, ACKNO, 
				   REMITTANCEID, COUNTRYID)
		SELECT BRANCHID, FORMID, QUARTER, DD.SERIALNO AS DEDUCTIONSERIALNO, DD.DEDUCTIONID, D.SERIALNO AS DEDUCTEESERIALNO, DE.CHALLANERETURNID,
				   DEDUCTIONERETURNID,SECTIONID, MODE, PAYMENTMADE, PAYMENTDATE, INCOMETAXRATE, INCOMETAX, INCOMETAX AS LASTINCOMETAX, SURCHARGERATE, 
				   SURCHARGE, SURCHARGE AS LASTSURCHARGE, EDUCATIONCESSRATE, EDUCATIONCESS, EDUCATIONCESS AS LASTEDUCATIONCESS, ISTAXINFOEDITABLE, TAXRATE, 
				   TOTALDEDUCTED, TOTALDEDUCTED AS LASTTOTALDEDUCTED, DEDUCTEDDATE, ISBOOKENTRY,NONDEDREASON, ISGROSSINGUP, UTN, ISPANVALIDBYITD, 
				   7 AS CORRECTIONSTATUS, 0 AS UPDATEINDICATOR, -1 AS MATCHEDID, CERTNO, TDSRATEASPER, ACKNO, 
				   REMITTANCEID, COUNTRYID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				   INNER JOIN  @DEDUCTEE  D ON DD.DEDUCTEEID = D.DEDUCTEEID
				   INNER JOIN #DEDERETURNID  DE ON DD.DEDUCTIONID = DE.DEDUCTIONID 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ISNULL(TOTALDEDUCTED,0) > 0
		ORDER BY DD.DEDUCTIONID
		INSERT INTO CORRCHALLANDETAIL(CHALLANERETURNID, BRANCHID, FORMID, QUARTER, CHALLANSERIALNO, CHALLANID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, 
							  PENALTY, OTHERS, CHALLANTOTAL, LASTCHALLANTOTAL,LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT, BANKCHALLANNO, 
							  LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, ISCOMPANY, 
							  CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, CORRECTIONSTATUS, MATCHEDID, EXPECTEDDID, 
							  CHALLANEDITMODE,PENDINGAMOUNT, FEE, MINORHEAD)
		SELECT CHALLANERETURNID, BRANCHID, FORMID, QUARTER, CD.SERIALNO AS CHALLANSERIALNO, CD.CHALLANID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, PENALTY, OTHERS, 
							  CHALLANTOTAL, LASTCHALLANTOTAL,LINKDEDCOUNT, ISNILCHALLAN,1 AS ISUPDATECHALLAN, MODEOFPAYMENT, BANKCHALLANNO, 
							  LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, ISCOMPANY, 
							  CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, 7 AS CORRECTIONSTATUS, -1 AS MATCHEDID, NULL AS EXPECTEDDID, 
							  '' AS CHALLANEDITMODE, 
							  0 AS PENDINGAMOUNT, FEE, MINORHEAD FROM CHALLANDETAIL CD WITH(NOLOCK)
							  INNER JOIN #CHALLANERETURNID C ON C.CHALLANID = CD.CHALLANID 
							  INNER JOIN #CHA CA ON CA.SERIALNO = CD.SERIALNO 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		--SELECT SECTIONID, COUNT(DEDUCTIONID)DEDUCTIONCOUNT ,ROW_NUMBER() OVER(ORDER BY SECTIONID) + (SELECT ISNULL(MAX(CHALLANERETURNID),0)  FROM CORRCHALLANDETAIL 
		--					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER)CHALLANERETURNID,
		--					ROW_NUMBER() OVER(ORDER BY SECTIONID) + (SELECT MAX(CHALLANSERIALNO) FROM CORRCHALLANDETAIL 
		--					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER)SERIALNO			
		--	INTO #NONTDS		 
		--	FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ISNULL(TOTALDEDUCTED,0) = 0
		--	GROUP BY SECTIONID	
		SELECT DD.SECTIONID, COUNT(DEDUCTIONID)DEDUCTIONCOUNT ,ROW_NUMBER() OVER(ORDER BY DD.SECTIONID) + (SELECT ISNULL(MAX(CHALLANERETURNID),0)  FROM CORRCHALLANDETAIL WITH(NOLOCK)
							WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER)CHALLANERETURNID,
							ROW_NUMBER() OVER(ORDER BY DD.SECTIONID) + (SELECT MAX(CHALLANSERIALNO) FROM CORRCHALLANDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER) SERIALNO 
							INTO #REMAINCHALLAN 
		FROM 
		(
			SELECT DISTINCT SECTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ISNULL(TOTALDEDUCTED,0) = 0
			EXCEPT
			SELECT SECTIONID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ISNULL(CHALLANID,0) = 0 AND ISNULL(CHALLANTOTAL,0) = 0
		)R
		INNER JOIN DEDUCTIONDETAIL DD ON DD.SECTIONID = R.SECTIONID 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ISNULL(TOTALDEDUCTED,0) = 0
		GROUP BY DD.SECTIONID	
		INSERT INTO CORRCHALLANDETAIL(CHALLANERETURNID, BRANCHID, FORMID, QUARTER, CHALLANSERIALNO, CHALLANID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, 
							  PENALTY, OTHERS, CHALLANTOTAL, LASTCHALLANTOTAL,LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT, BANKCHALLANNO, 
							  LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, ISCOMPANY, 
							  CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, CORRECTIONSTATUS, MATCHEDID, EXPECTEDDID, 
							  CHALLANEDITMODE,PENDINGAMOUNT, FEE, MINORHEAD)
		SELECT CHALLANERETURNID, @BRANCHID AS BRANCHID, @FORMID AS FORMID,@QUARTER AS QUARTER, SERIALNO AS CHALLANSERIALNO, NULL AS CHALLANID, SECTIONID, 
					0 AS INCOMETAX, 0 AS SURCHARGE, 0 AS EDUCATIONCESS, 0 AS INTEREST, 0 AS PENALTY, 0 AS OTHERS, 
					0 AS CHALLANTOTAL, 0 AS LASTCHALLANTOTAL,DEDUCTIONCOUNT, 'Y' AS ISNILCHALLAN, 1 AS ISUPDATECHALLAN, 3 AS MODEOFPAYMENT, '' AS BANKCHALLANNO, 
					'' AS LASTBANKCHALLANNO, '' AS  TRNVOUCHERNO, '' AS LASTTRNVOUCHERNO, -1 AS BANKID, -1 AS LASTBANKID, GETDATE() AS CHALLANPAIDDATE, GETDATE() AS LASTCHALLANPAIDDATE, 
				   NULL AS  DATEOFDEBIT, 0 AS ISCOMPANY,'' AS CHEQUENO, NULL AS CHEQUEDATE, '' AS CHEQUEDRAWNON, '' AS TRANREFNO, '' AS TVRECEIPTNUMBER,
					7 AS CORRECTIONSTATUS, 1 AS MATCHEDID, 0 AS EXPECTEDDID, '' AS CHALLANEDITMODE, 0 AS PENDINGAMOUNT, 0 AS FEE, 0 AS MINORHEAD 
		FROM #REMAINCHALLAN
		INSERT INTO CORRDEDUCTIONDETAIL(BRANCHID, FORMID, QUARTER, DEDUCTIONSERIALNO, DEDUCTIONID, DEDUCTEESERIALNO, CHALLANERETURNID,
				   DEDUCTIONERETURNID,SECTIONID, MODE, PAYMENTMADE, PAYMENTDATE, INCOMETAXRATE, INCOMETAX, LASTINCOMETAX, SURCHARGERATE, 
				   SURCHARGE, LASTSURCHARGE, EDUCATIONCESSRATE, EDUCATIONCESS, LASTEDUCATIONCESS, ISTAXINFOEDITABLE, TAXRATE, 
				   TOTALDEDUCTED, LASTTOTALDEDUCTED, DEDUCTEDDATE, ISBOOKENTRY,NONDEDREASON, ISGROSSINGUP, UTN, ISPANVALIDBYITD, 
				   CORRECTIONSTATUS, UPDATEINDICATOR, MATCHEDID, CERTNO, TDSRATEASPER, ACKNO, 
				   REMITTANCEID, COUNTRYID)	
		SELECT BRANCHID, FORMID, QUARTER, DD.SERIALNO AS DEDUCTIONSERIALNO, DD.DEDUCTIONID, D.SERIALNO AS DEDUCTEESERIALNO, -1 AS CHALLANERETURNID,
		ROW_NUMBER() OVER(ORDER BY DD.SECTIONID)DEDUCTIONERETURNID,
		DD.SECTIONID, MODE, PAYMENTMADE, PAYMENTDATE, INCOMETAXRATE, INCOMETAX, INCOMETAX AS LASTINCOMETAX, SURCHARGERATE, 
				   SURCHARGE, SURCHARGE AS LASTSURCHARGE, EDUCATIONCESSRATE, EDUCATIONCESS, EDUCATIONCESS AS LASTEDUCATIONCESS, ISTAXINFOEDITABLE, TAXRATE, 
				   TOTALDEDUCTED, TOTALDEDUCTED AS LASTTOTALDEDUCTED, DEDUCTEDDATE, ISBOOKENTRY,NONDEDREASON, ISGROSSINGUP, UTN, ISPANVALIDBYITD, 
				   7 AS CORRECTIONSTATUS, 0 AS UPDATEINDICATOR, -1 AS MATCHEDID, CERTNO, TDSRATEASPER, ACKNO, 
				   REMITTANCEID, COUNTRYID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				   INNER JOIN @DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID 
				   INNER JOIN #DED DE ON DD.SERIALNO = DE.SERIALNO 
				 --INNER JOIN 
				 -- (
					--SELECT SECTIONID, CHALLANERETURNID FROM #REMAINCHALLAN 
				 --   UNION
				 --   SELECT SECTIONID, CHALLANERETURNID FROM CORRCHALLANDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
				 -- ) N ON N.SECTIONID = DD.SECTIONID
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ISNULL(TOTALDEDUCTED,0) = 0
		IF OBJECT_ID('TEMPDB..#DED') IS NOT NULL
			DROP TABLE #DED
		IF OBJECT_ID('TEMPDB..#CHA') IS NOT NULL
			DROP TABLE #CHA
		IF OBJECT_ID('TEMPDB..#CHALLANERETURNID') IS NOT NULL
			DROP TABLE #CHALLANERETURNID
		IF OBJECT_ID('TEMPDB..#DEDERETURNID') IS NOT NULL
			DROP TABLE #DEDERETURNID
		IF OBJECT_ID('TEMPDB..#REMAINCHALLAN') IS NOT NULL
			DROP TABLE #REMAINCHALLAN
		UPDATE CORRDEDUCTIONDETAIL SET CHALLANERETURNID = CCD.CHALLANERETURNID
		FROM CORRDEDUCTIONDETAIL CDD
		INNER JOIN CORRCHALLANDETAIL CCD ON CCD.BRANCHID = CDD.BRANCHID AND CCD.FORMID = CDD.FORMID AND CCD.QUARTER = CDD.QUARTER AND CCD.SECTIONID = CDD.SECTIONID
		WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER AND ISNULL(TOTALDEDUCTED,0) = 0 AND ISNULL(CCD.CHALLANTOTAL,0) = 0
		UPDATE CORRCHALLANDETAIL SET CORRECTIONSTATUS = 7
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ISNULL(CHALLANID,0) = 0 AND ISNULL(CHALLANTOTAL,0) = 0		
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CreateAllExistingSalary')
DROP PROCEDURE USP_TDS_CreateAllExistingSalary
GO
CREATE PROCEDURE USP_TDS_CreateAllExistingSalary
@FINYEAR INT,
@BRANCHID INT
AS
   BEGIN
		SELECT * INTO #DEDUCTEE FROM
		(
				SELECT E.SERIALNO FROM SALARYDETAIL SD WITH(NOLOCK)
				INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID
				INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
				WHERE SD.BRANCHID = @BRANCHID
				EXCEPT
				SELECT DISTINCT DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4
		)SD
		INSERT INTO CORREMPLOYEE(BRANCHID, FORMID, QUARTER, DEDUCTEESERIALNO, DEDUCTEEID, SALUTATION, NAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, 
                      PINCODE, GENDER, ISSENIORCITIZEN, DESIGNATION, EMPLOYMENTFROM, EMPLOYMENTTO, PHONENO, EMAILADDRESS, PAN, PANREFERENCE, LASTPAN, 
                      LASTPANREFERENCE, CORRECTIONSTATUS, UPDATEINDICATOR, MATCHEDID, PANFLAG, PANCOUNTER)
        SELECT BRANCHID, 1 AS FORMID, 4 AS QUARTER, E.SERIALNO AS DEDUCTEESERIALNO, D.DEDUCTEEID, SALUTATION, NAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, 
                      PINCODE, GENDER, ISSENIORCITIZEN, DESIGNATION, EMPLOYMENTFROM, EMPLOYMENTTO, PHONENO, EMAILADDRESS, PAN, PANREFERENCE,PAN AS LASTPAN, 
                      PANREFERENCE AS LASTPANREFERENCE, 1 AS CORRECTIONSTATUS, 0 AS UPDATEINDICATOR, 0 AS MATCHEDID, ' ' AS PANFLAG, 0 AS PANCOUNTER
        FROM DEDUCTEE D WITH(NOLOCK)
        INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
        INNER JOIN #DEDUCTEE DE ON DE.SERIALNO = E.SERIALNO
        WHERE D.BRANCHID = @BRANCHID                      
	    SELECT SALARYDETAILID, SUM(ISNULL([80C],0)) [80C], SUM(ISNULL([80CCC],0))[80CCC] ,SUM(ISNULL([80CCD],0))[80CCD], SUM(ISNULL([80D],0))[80D],
			SUM(ISNULL([80DD],0))[80DD] ,SUM(ISNULL([80DDB],0))[80DDB], SUM(ISNULL([80E],0))[80E], SUM(ISNULL([80G],0))[80G], SUM(ISNULL([80GG],0))[80GG],
			SUM(ISNULL([80QQB],0))[80QQB], SUM(ISNULL([80RRB],0))[80RRB], SUM(ISNULL([80U],0))[80U], SUM(ISNULL([80CCF],0))[80CCF], SUM(ISNULL([80GGA],0))[80GGA],
			SUM(ISNULL([80GGC],0))[80GGC] ,SUM(ISNULL([80TTA],0))[80TTA] , SUM(ISNULL([80CCG],0))[80CCG], SUM(ISNULL([80CCD(1)],0))[80CCD(1)],SUM(ISNULL([80CCD(2)],0))[80CCD(2)],
		    SUM(ISNULL([80EE],0))[80EE] 
		INTO #CHAPTERVIA 
					FROM
		(
			SELECT SALARYDETAILID, [3] AS [80C], [4] AS [80CCC],[5] AS [80CCD],[6] AS [80D],[7] AS [80DD], [8] AS [80DDB],
				[9] AS [80E], [10] AS [80G],[11] AS [80GG],[12] AS [80QQB],[13] AS [80RRB], [14] AS [80U],[15] AS [80CCF],
				[16] AS [80GGA],[17] AS [80GGC], [18] AS [80TTA],[19] AS [80CCG],[20] AS [80CCD(1)], [21] AS [80CCD(2)],[22] AS [80EE]
			FROM 
			(
				SELECT SALARYDETAILID, GROSSAMOUNT, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT,SALARYSECTIONID
				FROM CHAPTERVIADETAIL WITH(NOLOCK)) UP
				PIVOT (SUM(DEDUCTIBLEAMOUNT) FOR SALARYSECTIONID IN ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22])
			) AS PVT
		)tt
		GROUP BY SALARYDETAILID
		SELECT SALARYDETAILID, [1] AS ET, [2] AS PT
		INTO #SECTION16
		FROM 
			(
				SELECT SALARYDETAILID, AMOUNT,SALARYSECTIONID
				FROM SECTION16DETAIL WITH(NOLOCK)) UP
				PIVOT (SUM(AMOUNT) FOR SALARYSECTIONID IN ([1],[2])
			) AS pvt
			ORDER BY SALARYDETAILID
		SELECT * INTO #SALDEDUCTEE FROM
		(
				SELECT E.SERIALNO FROM SALARYDETAIL SD WITH(NOLOCK)
				INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID
				INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
				WHERE SD.BRANCHID = @BRANCHID
				EXCEPT
				SELECT DISTINCT DEDUCTEESERIALNO FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
		)SD
	INSERT INTO CORRSALARYDETAIL (BRANCHID,CORRDEDUCTEESERIALNO,DEDUCTEESERIALNO,DEDUCTEEID,GROSSSALARY,ET, PT, DEDUCTIONUS16,INCOMEFROMSALARIES, OTHERINCOME,
										GROSSTOTALINCOME, LASTGROSSTOTALINCOME, VIA80CCE, VIAOTHERS, TOTALDEDUNDERCHAPTERVIA, TOTALTAXABLEINCOME, TAXONTOTALINCOME, SURCHARGE, 
										EDUCATIONCESS, RELIEFUS89, NETTAXPAYABLE, TOTALTDS, TAXPAYABLE, CORRECTIONSTATUS, RECORDSTATUS, VIA80CCF, VIA80CCG)
    SELECT SD.BRANCHID,ROW_NUMBER() OVER(ORDER BY SD.DEDUCTEEID) AS CORRDEDUCTEESERIALNO,E.SERIALNO AS DEDUCTEESERIALNO, D.DEDUCTEEID, SD.GROSSSALARY,
		  ISNULL(S16.ET,0) ET, ISNULL(S16.PT,0)PT, ISNULL(S16.ET,0) + ISNULL(S16.PT,0) AS DEDUCTIONUS16, INCOMEFROMSALARIES, OTHERINCOME, GROSSTOTALINCOME,
		  GROSSTOTALINCOME AS LASTGROSSTOTALINCOME,CASE WHEN @FINYEAR < 2011 THEN (ISNULL([80C],0) + ISNULL([80CCC],0) + ISNULL([80CCD],0)) 
		  ELSE (ISNULL([80C],0) + ISNULL([80CCC],0) + ISNULL([80CCD(1)],0)) END AS VIA80CCE,
		  CASE WHEN @FINYEAR < 2010 THEN ISNULL([80D],0) + ISNULL([80DD],0) +  ISNULL([80DDB],0) + ISNULL([80E],0) + ISNULL([80GG],0) + ISNULL([80QQB],0) + ISNULL([80RRB],0) +
																	ISNULL([80G],0) + ISNULL([80U],0) + ISNULL([80GGA],0) + ISNULL([80GGC],0) + ISNULL([80TTA],0) + ISNULL([80CCG],0)
				  WHEN @FINYEAR >= 2011 THEN  ISNULL([80D],0) + ISNULL([80DD],0) +  ISNULL([80DDB],0) + ISNULL([80E],0) + ISNULL([80GG],0) + ISNULL([80QQB],0) + ISNULL([80RRB],0) +
																	ISNULL([80G],0) + ISNULL([80U],0) + ISNULL([80GGA],0) + ISNULL([80GGC],0) + ISNULL([80TTA],0) + ISNULL([80CCD(2)],0)
				  ELSE 0 END AS VIAOTHERS,
		  CASE WHEN @FINYEAR < 2010 THEN ISNULL([80C],0) + ISNULL([80CCC],0) + ISNULL([80CCD],0) + ISNULL([80D],0) + ISNULL([80DD],0) +  ISNULL([80DDB],0) + ISNULL([80E],0) + ISNULL([80GG],0) + ISNULL([80QQB],0) + ISNULL([80RRB],0) +
																	ISNULL([80G],0) + ISNULL([80U],0) + ISNULL([80GGA],0) + ISNULL([80GGC],0) + ISNULL([80TTA],0) + ISNULL([80CCG],0)
				  WHEN @FINYEAR >= 2011 THEN ISNULL([80C],0) + ISNULL([80CCC],0) + ISNULL([80CCD(1)],0) + ISNULL([80D],0) + ISNULL([80DD],0) +  ISNULL([80DDB],0) + ISNULL([80E],0) + 
															  ISNULL([80GG],0) + ISNULL([80QQB],0) + ISNULL([80RRB],0) + ISNULL([80G],0) + ISNULL([80U],0) + ISNULL([80GGA],0) + ISNULL([80GGC],0) + 
															  ISNULL([80TTA],0) + ISNULL([80CCG],0)	+ ISNULL([80CCD(2)],0) + ISNULL([80CCF],0)
				  ELSE 0 END AS TOTALDEDUNDERCHAPTERVIA,
				  SD.TOTALTAXABLEINCOME,SD.TAXONTOTALINCOME, SD.SURCHARGE, SD.EDUCATIONCESS, SD.RELIEFUS89,SD.NETTAXPAYABLE,SD.TOTALTDS,SD.TAXPAYABLE, 5 AS CORRECTIONSTATUS,
				  1 AS RECORDSTATUS, 
			 CASE WHEN @FINYEAR < 2010 THEN 0
				  WHEN @FINYEAR <= 2011 THEN ISNULL([80CCF],0)
				  ELSE 0 
		  END AS VIA80CCF,
		  CASE WHEN @FINYEAR >= 2012 THEN ISNULL([80CCG],0)
				  ELSE  0 END AS VIA80CCG
					FROM SALARYDETAIL SD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
		INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		INNER JOIN #SALDEDUCTEE SE ON SE.SERIALNO = E.SERIALNO
		LEFT JOIN #SECTION16 S16 ON S16.SALARYDETAILID = SD.SALARYDETAILID
		LEFT JOIN #CHAPTERVIA CVIA ON SD.SALARYDETAILID = CVIA.SALARYDETAILID
		WHERE SD.BRANCHID = @BRANCHID 
		IF OBJECT_ID('TEMPDB..#SALDEDUCTEE') IS NOT NULL
		DROP TABLE #SALDEDUCTEE
		IF OBJECT_ID('TEMPDB..#SECTION16') IS NOT NULL
		DROP TABLE #SECTION16
		IF OBJECT_ID('TEMPDB..#CHAPTERVIA') IS NOT NULL
		DROP TABLE #CHAPTERVIA
		IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
		DROP TABLE #DEDUCTEE	   
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CreateChallanForNull')
DROP PROCEDURE USP_TDS_CreateChallanForNull
GO
CREATE PROCEDURE [USP_TDS_CreateChallanForNull]
@CLIENTID INT  
AS  
BEGIN  
   SELECT ISNULL(MAX(BANKCHALLANNO+1),CASE WHEN @CLIENTID = 3 THEN 50001 WHEN @CLIENTID = 12 THEN 80001 ELSE CASE WHEN @CLIENTID = 9 THEN 80000 ELSE 60000 END END)FROM CHALLANDETAIL WITH(NOLOCK)  
   WHERE CONVERT(VARCHAR,CHALLANPAIDDATE,112)=CONVERT(VARCHAR,GETDATE(),112) AND ISAUTOGENERATED=1   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CREATECHALLANFORNULL02')
DROP PROCEDURE USP_TDS_CREATECHALLANFORNULL02
GO
CREATE PROCEDURE [USP_TDS_CREATECHALLANFORNULL02]  
AS  
BEGIN  
SELECT ISNULL(MAX(BANKCHALLANNO+1),60001)FROM CHALLANDETAIL WITH(NOLOCK) WHERE CONVERT(VARCHAR,CHALLANPAIDDATE,112)=CONVERT(VARCHAR,GETDATE(),112) AND ISAUTOGENERATED=1   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CreateChallanForPayment')
DROP PROCEDURE USP_TDS_CreateChallanForPayment
GO
CREATE PROCEDURE USP_TDS_CreateChallanForPayment 
	@MONTH INT,
	@FINANCIALYEAR INT,
	@ACCOUNTTYPE1 INT,
	@ACCOUNTTYPE2 INT,
	@ACCOUNTTYPE3 INT,
	@CLIENTID INT = 0
AS
BEGIN
	DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
	DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);	
	DECLARE @FORMS TABLE(FORMID INT);
	DECLARE @RESULT INT,@DBNAME VARCHAR(MAX), @FORMID INT,@VAR INT, @QUARTER INT,@MONTHYEAR VARCHAR(6) ;
	CREATE TABLE #TEMPPARKEDAMOUNT(MONTHYEAR INT,BRANCHID INT,FORMTYPE VARCHAR(10),
			ACCOUNTNO VARCHAR(20),AMOUNT NUMERIC(17,2))
	CREATE TABLE #UNLINKED (DEDUCTIONID INT,DEDUCTEEID INT,BRANCHID INT,FORMID INT,
				QUARTER INT,ENTRYTYPE INT,DEDUCTEDDATE SMALLDATETIME,EXCLUDEINAC BIT,
				SECTIONID INT,TOTALDEDUCTED NUMERIC(13,2),INCOMETAX NUMERIC(13,2),
				SURCHARGE NUMERIC(13,2),EDUCATIONCESS NUMERIC(13,2))
	SET @RESULT = 0;
	SELECT @DBNAME = DB_NAME()
	SET NOCOUNT OFF
	IF(@CLIENTID = 1)
		BEGIN
			SET @ACCOUNTTYPE1=101
			SET @ACCOUNTTYPE2=102
			SET @ACCOUNTTYPE3=103
		END    
	IF @MONTH >9   
		SET @VAR = 2
	ELSE  
		SET @VAR = 1
	IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)
		SET @QUARTER = 1
	ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)
		SET @QUARTER = 2
	ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)
		SET @QUARTER = 3
	ELSE 
		SET @QUARTER = 4
		IF(@MONTH < 4)
			SET @FINANCIALYEAR = @FINANCIALYEAR + 1
		SET @MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR)
	BEGIN TRANSACTION 
		BEGIN TRY	
				DELETE FROM CHALLANMAKEPAYMENT
				DELETE FROM DEDCHALLANMAKEPAYMENT	
				EXEC USP_TDS_CHALLANSQL_PA @MONTHYEAR
				IF(@CLIENTID=6 OR @CLIENTID = 14)
					BEGIN
						EXEC USP_TDS_CHALLANSQL_PA_KB @MONTHYEAR,@MONTH
					END
				IF(@CLIENTID = 15)
					BEGIN	
						EXEC USP_TDS_CHALLANSQL_PA_JK @MONTHYEAR,@MONTH
					END
				IF(@CLIENTID = 7)
					BEGIN
						EXEC USP_TDS_CHALLANSQL_PA_CBI @MONTHYEAR,@MONTH
					END  
				--ELSE IF(@CLIENTID = 8)
				--	BEGIN
				--		EXEC USP_TDS_CHALLANSQL_PA_AB @MONTHYEAR,@MONTH
				--	END 
				IF(@CLIENTID = -1)
					BEGIN
						INSERT INTO #TEMPPARKEDAMOUNT 
						EXEC USP_TDS_GETREMAININGPARKEDAMOUNT @MONTH,@MONTHYEAR
					END
				ELSE
					BEGIN
						INSERT INTO #TEMPPARKEDAMOUNT
						SELECT MONTHYEAR,BRANCHID,FORMTYPE,ACCOUNTNO,AMOUNT 
						FROM ParkedAmount WITH(NOLOCK) 
						WHERE MONTHYEAR = @MONTHYEAR AND ISNULL(FORMTYPE,'') <> ''
					END
				IF(@ACCOUNTTYPE1 = 101 OR @ACCOUNTTYPE2 = 102) 
					BEGIN 
						INSERT INTO @NONEMPLOYEE
						SELECT D.DEDUCTEEID, NE.DEDUCTEECODE 
						FROM DEDUCTEE D WITH(NOLOCK)
							INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
							INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
						WHERE FORMID IN (2,3)
						GROUP BY D.DEDUCTEEID, NE.DEDUCTEECODE
						INSERT INTO @FORMS 
						SELECT 2 AS FORMID
						UNION 
						SELECT 3 AS FORMID
					END
				IF(@ACCOUNTTYPE3 = 103) 
					BEGIN 
						INSERT INTO @EMPLOYEE
						SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE 
						FROM DEDUCTEE D WITH(NOLOCK)
							INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
							INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
						WHERE FORMID = 1
						GROUP BY D.DEDUCTEEID 
						INSERT INTO @FORMS 
						SELECT 1 AS FORMID				
					END
				SELECT DEDUCTIONID,DD.DEDUCTEEID,DD.BRANCHID,DD.FORMID,QUARTER,
					ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
					INCOMETAX,SURCHARGE,EDUCATIONCESS,TRANSSTATUS
				INTO #DEDTEMP
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
					INNER JOIN @FORMS F ON DD.FORMID = F.FORMID
					INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
				WHERE MONTH(DEDUCTEDDATE) = @MONTH AND D.PAN 
					LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED'))  
							  THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END 
					AND NOT EXISTS
						(
							SELECT DEDUCTIONID 
							FROM DEDCHALINK WITH(NOLOCK) 
							WHERE DEDUCTIONID = DD.DEDUCTIONID
						) 
				IF(@CLIENTID = 11)
					BEGIN    
						INSERT INTO #UNLINKED 
						SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,
								ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
								INCOMETAX,SURCHARGE,EDUCATIONCESS
						FROM #DEDTEMP
						WHERE ISNULL(TRANSSTATUS,2) = 2
						EXCEPT
						SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,
								ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
								INCOMETAX,SURCHARGE,EDUCATIONCESS
						FROM #DEDTEMP
						WHERE ISNULL(TRANSSTATUS,2) = 2 AND FORMID = 2 AND ENTRYTYPE = 1 AND SECTIONID <> 5 
					END
				ELSE IF(@CLIENTID = 5)
					BEGIN
						INSERT INTO #UNLINKED 
						SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,
							ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
							INCOMETAX,SURCHARGE,EDUCATIONCESS
						FROM #DEDTEMP
						WHERE FORMID IN (1, 3)
							OR (FORMID = 2 AND SECTIONID = 5 AND ENTRYTYPE = 4)
							OR (FORMID = 2 AND SECTIONID <> 5 AND ENTRYTYPE <> 1)
					END	
				ELSE
					BEGIN    
						INSERT INTO #UNLINKED 
						SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,
							ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
							INCOMETAX,SURCHARGE,EDUCATIONCESS
						FROM #DEDTEMP
					END
				IF OBJECT_ID('TEMPDB..#DEDTEMP') IS NOT NULL
					DROP TABLE #DEDTEMP
				SELECT * 
				INTO #DEDUCTEE 
				FROM
					(
						SELECT * FROM @EMPLOYEE
						UNION 
						SELECT * FROM @NONEMPLOYEE  
					)DE
			  	SELECT CB.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,CB.NOCHALLANPAY 
				INTO #BRANCHES
				FROM BRANCHDEDUCTORS BD1 WITH(NOLOCK)
					INNER JOIN DEDUCTOR D1 WITH(NOLOCK) ON BD1.DEDUCTORID = D1.DEDUCTORID 
					INNER JOIN COMPANYBRANCH CB ON BD1.BRANCHID = CB.BRANCHID 
				WHERE BD1.QUARTER = @QUARTER AND UPPER(D1.TAN) <> 'TANAPPLIED'
				GROUP BY CB.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,CB.NOCHALLANPAY  
				SELECT CB.BRANCHID, SUPERFINAL.FORMTYPE, 
					CASE WHEN SUPERFINAL.FORMTYPE = '26QI' OR SUPERFINAL.FORMTYPE = '26QV' OR SUPERFINAL.FORMTYPE = '26QVS' THEN 2 
						 WHEN SUPERFINAL.FORMTYPE = '24Q' THEN 1 
						 ELSE 3 
					END AS [FORMID] 
				INTO #DIFFERCMP 
				FROM
					(  
						SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.FORMTYPE, 
							ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT 
						FROM    
							(  
							  SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, 
									RESULT.FORMTYPE, SUM(RESULT.TDS) AS TDS 
							  FROM   
								(  
									SELECT CB.BRANCHID, CB.PARENTBRANCHID, 
									   CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
											WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) 
													OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
											WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN '26QVS'
											ELSE '26QV' END AS FORMTYPE,
										SUM(DD.TOTALDEDUCTED) AS TDS 
									FROM COMPANYBRANCH CB WITH (NOLOCK)
										INNER JOIN #UNLINKED DD WITH (NOLOCK) ON CB.BRANCHID = DD.BRANCHID  
										INNER JOIN @FORMS F ON DD.FORMID = F.FORMID
										INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON TS.SECTIONID = DD.SECTIONID 
										--INNER JOIN #UNLINKED DCL WITH (NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID  
									WHERE MONTH(DEDUCTEDDATE) = @MONTH AND (DD.EXCLUDEINAC IS NULL OR DD.EXCLUDEINAC = 0) 	
									GROUP BY CB.BRANCHID, TS.SECTIONID, DD.FORMID, CB.PARENTBRANCHID, DD.ENTRYTYPE  
								) AS RESULT 
							  GROUP BY RESULT.BRANCHID, RESULT.FORMTYPE, RESULT.PARENTBRANCHID
							) FINAL
							LEFT JOIN #TEMPPARKEDAMOUNT PA WITH (NOLOCK) ON PA.BRANCHID = FINAL.BRANCHID AND PA.FORMTYPE = FINAL.FORMTYPE   
						WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 
								AND (MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL) 
					) SUPERFINAL
							INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON SUPERFINAL.BRANCHID = CB.BRANCHID
							INNER JOIN COMPANYBRANCH CB1 WITH (NOLOCK) ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID 
				ORDER BY CB1.BRANCHID 
				SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, BRANCHID, SECTIONID, INCOMETAX,SURCHARGE, 
					EDUCATIONCESS, TOTALDEDUCTED, DEDUCTEDDATE, FORMID,QUARTER,EXCLUDEINAC,DEDUCTEECODE,
					CASE WHEN FORMID = 1 THEN '24Q' 
						 WHEN FORMID = 3 THEN '27Q' 
						 WHEN (@CLIENTID <> 11 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID = 5) 
								OR (@CLIENTID = 11 AND FORMID = 2 AND SECTIONID = 5) THEN '26QI' 
						 WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID <> 5) THEN '26QVS'
						 ELSE '26QV' END AS FORMTYPE,
					CASE WHEN FORMID = 1 THEN 103 WHEN FORMID = 3 THEN 101 
						 WHEN (@CLIENTID <> 11 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID = 5) 
								OR (@CLIENTID = 11 AND FORMID = 2 AND SECTIONID = 5) THEN 101 
						 ELSE 102 END AS ACCOUNTTYPE, 
					CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 1 
						 WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE <> 4 AND SECTIONID NOT IN (5, 17)) THEN 0
						 WHEN (@CLIENTID <> 1 AND (ENTRYTYPE=4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5,17)))) THEN 1 
						 ELSE 0 END ISFINACLE 
				INTO #REQDATA
				FROM #UNLINKED DD WITH (NOLOCK)
					--INNER JOIN #UNLINKED DL ON DD.DEDUCTIONID = DL.DEDUCTIONID 
					INNER JOIN #DEDUCTEE DE ON DD.DEDUCTEEID = DE.DEDUCTEEID
				WHERE (EXCLUDEINAC IS NULL OR EXCLUDEINAC = 0) 
					AND FORMID IN (1,2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH				
				SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, ISNULL(DEDUCTEECODE, 2) AS DEDUCTEECODE,
					SUM(INCOMETAX)INCOMETAX, SUM(SURCHARGE)SURCHARGE, SUM(EDUCATIONCESS)EDUCATIONCESS, 
					SUM(TOTALDEDUCTED)TOTALDEDUCTED, MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE 
				INTO #TEMPCMP
				FROM 
				(
					SELECT BRANCHNAME, BRANCHID, SECTIONID,
						--CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID, 
						SECTIONNAME,
						--CASE WHEN SECTIONID IN (23,24) THEN '194I' ELSE SECTIONNAME END AS SECTIONNAME, 
						DEDUCTEECODE,
						ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,
						ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, 
						(ISNULL(CEILING(SUM(INCOMETAX)), 0)+ISNULL(CEILING(SUM(SURCHARGE)), 0)+ISNULL(CEILING(SUM(EDUCATIONCESS)),0)) TOTALDEDUCTED, 
						--ISNULL(CEILING(SUM(TOTALDEDUCTED)), 0)
						MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE
					FROM 
					(
						SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,
							TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,
							SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(TOTALDEDUCTED) TOTALDEDUCTED,
							0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID, ISFINACLE
						FROM #REQDATA DD
							INNER JOIN #BRANCHES CB ON CB.BRANCHID = DD.BRANCHID
							INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON DD.SECTIONID = TS.SECTIONID --AND TS.FORMID = DD.FORMID	
							--INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON CB.BRANCHID = DD.BRANCHID 
							LEFT JOIN #DIFFERCMP DFL ON DD.BRANCHID = DFL.BRANCHID AND DD.FORMTYPE = DFL.FORMTYPE
						WHERE DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
							AND (ISNULL(CB.NOCHALLANPAY,0)=0) AND DFL.BRANCHID IS NULL 
							AND (DD.ACCOUNTTYPE = @ACCOUNTTYPE1 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE2 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE3)
						GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, 
							CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID, ISFINACLE
					) RESULT --WHERE FORMID <> 1 
					GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE
				) Q
				GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE		
				EXEC('ALTER TABLE #TEMPCMP ADD ID INT IDENTITY(1, 1)')  
				/* INSERT INTO CHALLANMAKEPAYMENT */
				INSERT INTO CHALLANMAKEPAYMENT (ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE,TOTALDEDUCTED)
				SELECT ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE, TOTALDEDUCTED
				FROM
				(
					SELECT T.ID,T.BRANCHID,SECTIONID, DEDUCTEECODE, INCOMETAX, 
						SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, T.FORMID, T.QUARTER
					FROM #TEMPCMP T 
				) DATA			
				INSERT INTO DEDCHALLANMAKEPAYMENT(ID,DEDUCTIONID) 
				SELECT DISTINCT CHALL.ID,DD.DEDUCTIONID
				FROM 
					(
						SELECT DEDUCTIONID,FORMID,TOTALDEDUCTED,DEDUCTEEID,SECTIONID,BRANCHID,DEDUCTEDDATE,
							CASE WHEN ENTRYTYPE=4 THEN 1 
								 ELSE 0 END ISFINACLE 
						FROM  #UNLINKED WITH (NOLOCK) 
						WHERE MONTH(DEDUCTEDDATE)=@MONTH
					 ) DD 
					INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID=DD.DEDUCTEEID 
					LEFT JOIN DEDCHALLANMAKEPAYMENT CD WITH (NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID 
					INNER JOIN #TEMPCMP T ON DD.BRANCHID=T.BRANCHID 
						AND (CASE WHEN DD.SECTIONID IN(23,24) THEN 15 ELSE DD.SECTIONID END) = T.SECTIONID 
						AND D.DEDUCTEECODE=T.DEDUCTEECODE
					LEFT JOIN #DIFFERCMP DL ON DD.BRANCHID=DL.BRANCHID AND DD.FORMID=DL.FORMID
					INNER JOIN 
						(
							SELECT ID 
							FROM CHALLANMAKEPAYMENT WITH(NOLOCK)
						) CHALL ON CHALL.ID = T.ID		
				WHERE  DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH --AND CD.ID IS NULL 	
				SET @RESULT=1
				IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNT') IS NOT NULL
					DROP TABLE #TEMPPARKEDAMOUNT
				IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
					DROP TABLE #UNLINKED
				IF OBJECT_ID('TEMPDB..#REQDATA') IS NOT NULL
					DROP TABLE #REQDATA
				IF OBJECT_ID('TEMPDB..#BRANCHES') IS NOT NULL
					DROP TABLE #BRANCHES
				IF OBJECT_ID('TEMPDB..#DIFFERCMP') IS NOT NULL
					DROP TABLE #DIFFERCMP
				IF OBJECT_ID('TEMPDB..#TEMPCMP') IS NOT NULL
					DROP TABLE #TEMPCMP
				SELECT @RESULT
				COMMIT 
		 END TRY	
		BEGIN CATCH
			SET @RESULT=-1
			SELECT @RESULT
			ROLLBACK
		END CATCH
	SET NOCOUNT ON
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CreateChallanForPayment02')
DROP PROCEDURE USP_TDS_CreateChallanForPayment02
GO
CREATE PROCEDURE [USP_TDS_CreateChallanForPayment02] 
	@MONTH INT,    
	@FINANCIALYEAR INT,    
	@ACCOUNTTYPE1 INT,    
	@ACCOUNTTYPE2 INT,    
	@ACCOUNTTYPE3 INT,    
	@CLIENTID INT = 0    
AS    
	BEGIN    
		DECLARE @RESULT INT, @QUARTER INT, @MONTHYEAR VARCHAR(6) ;    
		DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT, BRANCHID INT);    
		DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT, BRANCHID INT);     
		DECLARE @FORMS TABLE(FORMID INT);    
		BEGIN TRANSACTION     
			BEGIN TRY    
			DELETE FROM DEDCHALLANMAKEPAYMENT    
			DELETE FROM CHALLANMAKEPAYMENT   
			IF(@MONTH < 4)    
				SET @FINANCIALYEAR = @FINANCIALYEAR + 1    
			IF(@CLIENTID = 1)    
				SET @ACCOUNTTYPE3 = 0   
			SET @RESULT = 0    
			SET @MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR)    		
			IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)    
				SET @QUARTER = 1    
			ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)    
				SET @QUARTER = 2    
			ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)    
				SET @QUARTER = 3    
			ELSE     
				SET @QUARTER = 4        
			IF(@ACCOUNTTYPE1 = 101 OR @ACCOUNTTYPE2 = 102)     
			BEGIN     
				INSERT INTO @NONEMPLOYEE    
				SELECT D.DEDUCTEEID, NE.DEDUCTEECODE, D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK)    
				INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID      
				INNER JOIN     
				(    
					SELECT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK)    
					WHERE FORMID IN (2,3) AND MONTH(DEDUCTEDDATE) = @MONTH    
					GROUP BY DEDUCTEEID    
				)DD ON D.DEDUCTEEID = DD.DEDUCTEEID    
				INSERT INTO @FORMS     
				SELECT 2 AS FORMID    
				UNION     
				SELECT 3 AS FORMID    
			END    
			IF(@ACCOUNTTYPE3 = 103)     
			BEGIN     
				INSERT INTO @EMPLOYEE    
				SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE,D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK)    
				INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
				INNER JOIN     
				(    
					SELECT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK)    
					WHERE FORMID = 1 AND MONTH(DEDUCTEDDATE) = @MONTH    
					GROUP BY DEDUCTEEID    
				)DD ON D.DEDUCTEEID = DD.DEDUCTEEID      
				 INSERT INTO @FORMS     
				 SELECT 1 AS FORMID        
			END        
			 IF (@CLIENTID = 2)
			 BEGIN
				UPDATE DEDUCTIONDETAIL SET EXCLUDEINAC = 1
				WHERE DEDUCTIONID IN
				(
				    SELECT DEDUCTIONID 
				    FROM DEDUCTIONDETAIL WITH(NOLOCK)
				    WHERE MONTH(DEDUCTEDDATE) = @MONTH
					   AND ENTRYTYPE <> 4
					   AND SECTIONID IN (3, 5, 17)
					   AND BRANCHID IN 
						  (
							 SELECT BRANCHID 
							 FROM COMPANYBRANCH WITH(NOLOCK) 
							 WHERE ISNULL(ISZORO, 0) = 0
						  )
				)
				IF EXISTS(SELECT DEDUCTIONID 
							FROM DEDUCTIONDETAIL 
							WHERE INCOMETAX <> 0 AND SURCHARGE = 0 AND EDUCATIONCESS <> 0
							AND (INCOMETAX + EDUCATIONCESS <> TOTALDEDUCTED) 
							AND MONTH(DEDUCTEDDATE) = @MONTH)
				BEGIN
					UPDATE DEDUCTIONDETAIL
					SET EDUCATIONCESS = TOTALDEDUCTED - INCOMETAX, 
						ORGEDUCATIONCESS = ORGTOTALDEDUCTED - ORGINCOMETAX
					WHERE INCOMETAX <> 0 AND SURCHARGE = 0 AND EDUCATIONCESS <> 0
					AND (INCOMETAX + EDUCATIONCESS <> TOTALDEDUCTED) AND MONTH(DEDUCTEDDATE) = @MONTH
				END
			 END
			SELECT * INTO #UNLINKED FROM    
			(    
				SELECT DEDUCTEEID, DD.DEDUCTIONID, DD.BRANCHID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, DEDUCTEDDATE, DD.FORMID, QUARTER,EXCLUDEINAC,ENTRYTYPE
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)    
				INNER JOIN @FORMS F ON DD.FORMID = F.FORMID    
				WHERE MONTH(DEDUCTEDDATE) = @MONTH    
				EXCEPT    
				SELECT DEDUCTEEID, DD.DEDUCTIONID, DD.BRANCHID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, DEDUCTEDDATE, DD.FORMID, QUARTER,EXCLUDEINAC,ENTRYTYPE
				FROM DEDCHALINK DL WITH(NOLOCK)    
				INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID    
				INNER JOIN @FORMS F ON DD.FORMID = F.FORMID    
				WHERE MONTH(DEDUCTEDDATE) = @MONTH    
			)U     
			SELECT * INTO #DEDUCTEE FROM    
			(    
				SELECT * FROM @EMPLOYEE    
				UNION     
				SELECT * FROM @NONEMPLOYEE      
			)DE    
			SELECT BRANCHID     
			INTO #BRANCHES    
			FROM BRANCHDEDUCTORS BD WITH(NOLOCK)    
				INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID     
			WHERE BD.QUARTER = @QUARTER AND UPPER(D.TAN) <> 'TANAPPLIED'    
			GROUP BY BRANCHID       
			IF(@CLIENTID = 2) 
			BEGIN   
				IF(@ACCOUNTTYPE2 = 102 OR @ACCOUNTTYPE1 = 101)     
					EXEC USP_TDS_CHALLANSQL_PA_IB @MONTHYEAR,@MONTH    
			END    
			ELSE IF(@CLIENTID=6)
			BEGIN
				EXEC USP_TDS_CHALLANSQL_PA_KB @MONTHYEAR,@MONTH
			END 
			ELSE  
			BEGIN    
				EXEC USP_TDS_ChallanSQL_PA_UCO @MONTHYEAR,@MONTH
			END    
			SELECT CB.BRANCHID, CB.PARENTBRANCHID, SUM(DD.TOTALDEDUCTED) AS TDS ,    
				CASE WHEN DD.FORMID = 1 THEN '24Q'               
					WHEN (DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID = 5) THEN '26QI'     
					WHEN (DD.FORMID = 2 AND DD.SECTIONID <> 5 AND ((@CLIENTID=1 AND CB.ISZORO = 1) OR @CLIENTID <> 0)) THEN '26QV'     
					WHEN (DD.SECTIONID = 17 AND DD.ENTRYTYPE = 1 AND ((@CLIENTID=1 AND CB.ISZORO = 1) OR @CLIENTID <> 0)) THEN '27QV'     
					WHEN (DD.FORMID = 3 AND DD.ENTRYTYPE = 4) THEN '27Q'    
				END AS SECTIONID INTO #RESULT   
			FROM COMPANYBRANCH CB WITH(NOLOCK)    
			INNER JOIN #UNLINKED DD WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID      
			INNER JOIN @FORMS F ON DD.FORMID = F.FORMID            
			INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID --AND D.BRANCHID = DD.BRANCHID            
			WHERE MONTH(DEDUCTEDDATE) = @MONTH AND (ISNULL(DD.EXCLUDEINAC,0) = 0) AND D.BRANCHID = DD.BRANCHID    
			GROUP BY CB.BRANCHID, DD.SECTIONID, DD.FORMID, CB.PARENTBRANCHID, DD.ENTRYTYPE, CB.ISZORO   
			SELECT CB.BRANCHID, SUPERFINAL.FORMTYPE,     
				CASE WHEN SUPERFINAL.FORMTYPE = '26QI' OR SUPERFINAL.FORMTYPE = '26QV' THEN 2     
					WHEN SUPERFINAL.FORMTYPE = '24Q' THEN 1     
					ELSE 3     
					END AS FORMID    
			INTO #DIFFERCMP    
			FROM    
			(      
				SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.FORMTYPE, ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT FROM        
				(      
					SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.SECTIONID AS FORMTYPE, SUM(RESULT.TDS) AS TDS FROM #RESULT RESULT     
					WHERE RESULT.SECTIONID IS NOT NULL    
					GROUP BY RESULT.BRANCHID, RESULT.SECTIONID, RESULT.PARENTBRANCHID    
				) FINAL    
				LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK) ON PA.BRANCHID = FINAL.BRANCHID AND PA.FORMTYPE = FINAL.FORMTYPE       
				WHERE (MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL) AND FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0     
			) SUPERFINAL      
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON SUPERFINAL.BRANCHID = CB.BRANCHID    
			INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID     
			ORDER BY CB1.BRANCHID      
			SELECT DD.DEDUCTEEID, DEDUCTIONID, DD.BRANCHID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, DEDUCTEDDATE, DD.FORMID, QUARTER,EXCLUDEINAC,    
				CASE WHEN DD.FORMID = 1 THEN '24Q'     
					WHEN (DD.FORMID=2 AND SECTIONID=5 AND ENTRYTYPE=4)  THEN '26QI'     
					WHEN (DD.FORMID = 2 AND DD.SECTIONID <> 5 AND ((@CLIENTID=1 AND CB.ISZORO = 1) OR @CLIENTID <> 1)) THEN '26QV'      
					WHEN (DD.SECTIONID = 17 AND DD.ENTRYTYPE = 1 AND ((@CLIENTID=1 AND CB.ISZORO = 1) OR @CLIENTID <> 1)) THEN '27QV' -----ADDED                
					WHEN (DD.FORMID = 3 AND DD.ENTRYTYPE = 4) THEN '27Q' 
				END AS FORMTYPE,    
				CASE WHEN DD.FORMID = 1 THEN 103     
					WHEN DD.FORMID = 3 AND NOT(SECTIONID IN (17) AND ENTRYTYPE = 1) THEN 101     
					WHEN (DD.FORMID=2 AND SECTIONID=5 AND ENTRYTYPE=4) THEN 101     
					ELSE 102     
				END AS ACCOUNTTYPE,     
				CASE WHEN ENTRYTYPE = 4 THEN 1 ELSE 0 END ISFINACLE,DEDUCTEECODE
			INTO #TEMP     
			FROM #UNLINKED DD WITH(NOLOCK)
			INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID --AND D.BRANCHID = DD.BRANCHID    
			INNER JOIN #BRANCHES B ON B.BRANCHID = DD.BRANCHID    
			INNER JOIN @FORMS F ON DD.FORMID = F.FORMID     
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID    
			WHERE (EXCLUDEINAC IS NULL OR EXCLUDEINAC = 0) AND ((@CLIENTID=1 AND ((ENTRYTYPE=4 AND SECTIONID IN(5,17)) OR (ENTRYTYPE= 1 AND SECTIONID IN(17)) OR (ENTRYTYPE<>4 AND SECTIONID NOT IN (5)))) OR @CLIENTID <> 1)  AND D.BRANCHID = DD.BRANCHID    
			SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, ISNULL(DEDUCTEECODE, 1) AS DEDUCTEECODE,    
				INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE     
			INTO #TEMPCMP    
			FROM	     
			(    
				SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, DEDUCTEECODE,    
					ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,    
					ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, ISNULL(CEILING(SUM(TOTALDEDUCTED)), 0) TOTALDEDUCTED,     
					MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE    
			FROM     
			(    
				SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,    
					TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, DD.DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,    
					SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(TOTALDEDUCTED) TOTALDEDUCTED,    
					0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID, ISFINACLE    
				FROM #TEMP DD         
					INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID AND TS.FORMID = DD.FORMID     
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID     
					LEFT JOIN #DIFFERCMP DFL ON DD.BRANCHID = DFL.BRANCHID AND DD.FORMTYPE = DFL.FORMTYPE    
				WHERE DD.FORMTYPE IS NOT NULL AND DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND (ISNULL(CB.NOCHALLANPAY,0)=0)    
					AND DFL.BRANCHID IS NULL AND (DD.ACCOUNTTYPE = @ACCOUNTTYPE1 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE2 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE3)          
				GROUP BY DD.SECTIONID, SECTIONNAME, DD.DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID, ISFINACLE    
			) RESULT     
			GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE    
			) Q     
			EXEC('ALTER TABLE #TEMPCMP ADD ID INT IDENTITY(1, 1)')       
			/* INSERT INTO CHALLANMAKEPAYMENT */    
			INSERT INTO CHALLANMAKEPAYMENT (ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE,TOTALDEDUCTED)    
			SELECT ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE, TOTALDEDUCTED    
			FROM    
				(    
					SELECT T.ID,    
						T.BRANCHID, SECTIONID, DEDUCTEECODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED,    
						T.FORMID, T.QUARTER    
					FROM #TEMPCMP T     
				) DATA      
			INSERT INTO DEDCHALLANMAKEPAYMENT(ID,DEDUCTIONID)     
			SELECT DISTINCT      
				CHALL.ID,DD.DEDUCTIONID    
			FROM 
			(    
				SELECT DEDUCTIONID,FORMID,TOTALDEDUCTED,DEDUCTEEID,SECTIONID,BRANCHID,DEDUCTEDDATE,    
					CASE WHEN ENTRYTYPE=4 THEN 1 ELSE 0 END ISFINACLE     
				FROM  #UNLINKED WITH(NOLOCK) WHERE MONTH(DEDUCTEDDATE)=@MONTH    
			) DD     
			INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID=DD.DEDUCTEEID --AND D.BRANCHID = DD.BRANCHID         
			LEFT JOIN DEDCHALLANMAKEPAYMENT CD WITH(NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID     
			INNER JOIN #TEMPCMP T ON DD.BRANCHID=T.BRANCHID AND DD.SECTIONID=T.SECTIONID AND (D.DEDUCTEECODE=T.DEDUCTEECODE)    
			LEFT JOIN #DIFFERCMP DL ON DD.BRANCHID=DL.BRANCHID AND DD.FORMID=DL.FORMID    
			INNER JOIN     
			(    
				SELECT ID FROM CHALLANMAKEPAYMENT WITH(NOLOCK)     
			) CHALL ON CHALL.ID = T.ID      
			WHERE  DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND D.BRANCHID = DD.BRANCHID    
			SET @RESULT=1    
			COMMIT     
		END TRY     
		BEGIN CATCH    
			SET @RESULT=-1    
			ROLLBACK    
		END CATCH       
		SELECT @RESULT     
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CreateChallanForPayment03')
DROP PROCEDURE USP_TDS_CreateChallanForPayment03
GO
CREATE PROCEDURE USP_TDS_CreateChallanForPayment03
	@MONTH INT,
	@FINANCIALYEAR INT,
	@ACCOUNTTYPE1 INT,
	@ACCOUNTTYPE2 INT,
	@ACCOUNTTYPE3 INT,
	@CLIENTID INT = 0
AS
BEGIN
	DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
	DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);	
	DECLARE @FORMS TABLE(FORMID INT);
	DECLARE @RESULT INT,@DBNAME VARCHAR(MAX), @FORMID INT,@VAR INT, @QUARTER INT,@MONTHYEAR VARCHAR(6) ;
	CREATE TABLE #TEMPPARKEDAMOUNT(MONTHYEAR INT,BRANCHID INT,FORMTYPE VARCHAR(10),ACCOUNTNO VARCHAR(20),AMOUNT NUMERIC(17,2))
	SET @RESULT = 0;
	SELECT @DBNAME = DB_NAME()
	SET NOCOUNT OFF
	IF(@CLIENTID = 1)
		BEGIN
			SET @ACCOUNTTYPE1=101
			SET @ACCOUNTTYPE2=102
			SET @ACCOUNTTYPE3 = 0
		END    
	IF @MONTH >9   
		SET @VAR = 2
	ELSE  
		SET @VAR = 1
	IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)
		SET @QUARTER = 1
	ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)
		SET @QUARTER = 2
	ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)
		SET @QUARTER = 3
	ELSE 
		SET @QUARTER = 4
		IF(@MONTH < 4)
			SET @FINANCIALYEAR = @FINANCIALYEAR + 1
		SET @MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR)
	BEGIN TRANSACTION 
		BEGIN TRY	
				DELETE FROM CHALLANMAKEPAYMENT
				DELETE FROM DEDCHALLANMAKEPAYMENT	
				EXEC USP_TDS_CHALLANSQL_PA @MONTHYEAR
			IF(@CLIENTID=6 OR @CLIENTID = 14)
				BEGIN
					EXEC USP_TDS_CHALLANSQL_PA_KB @MONTHYEAR,@MONTH
				END
			IF(@CLIENTID = 15)
				BEGIN	
					EXEC USP_TDS_CHALLANSQL_PA_JK @MONTHYEAR,@MONTH
				END
			IF(@CLIENTID = 7)
				BEGIN
					EXEC USP_TDS_CHALLANSQL_PA_CBI @MONTHYEAR,@MONTH
				END  
			IF(@CLIENTID = -1)
				BEGIN
					INSERT INTO #TEMPPARKEDAMOUNT 
					EXEC USP_TDS_GETREMAININGPARKEDAMOUNT @MONTH,@MONTHYEAR
				END
			ELSE
				BEGIN
					INSERT INTO #TEMPPARKEDAMOUNT
					SELECT MONTHYEAR,BRANCHID,FORMTYPE,ACCOUNTNO,AMOUNT 
					FROM PARKEDAMOUNT 
					WHERE MONTHYEAR = @MONTHYEAR AND ISNULL(FORMTYPE,'') <> ''
				END
			IF(@ACCOUNTTYPE1 = 101 OR @ACCOUNTTYPE2 = 102) 
				BEGIN 
					INSERT INTO @NONEMPLOYEE
					SELECT D.DEDUCTEEID, NE.DEDUCTEECODE FROM DEDUCTEE D WITH(NOLOCK)
						INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
						INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
					WHERE FORMID IN (2,3)
					GROUP BY D.DEDUCTEEID, NE.DEDUCTEECODE
					INSERT INTO @FORMS 
					SELECT 2 AS FORMID
					UNION 
					SELECT 3 AS FORMID
				END
			IF(@ACCOUNTTYPE3 = 103) 
				BEGIN 
					INSERT INTO @EMPLOYEE
					SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE FROM DEDUCTEE D WITH(NOLOCK)
						INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
						INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
					WHERE FORMID = 1
					GROUP BY D.DEDUCTEEID 
					INSERT INTO @FORMS 
					SELECT 1 AS FORMID				
				END    
			SELECT * INTO #UNLINKED FROM
			(
				SELECT DEDUCTIONID 
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
					INNER JOIN @FORMS F ON DD.FORMID = F.FORMID
					INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
				WHERE MONTH(DEDUCTEDDATE) = @MONTH 
					AND D.PAN LIKE 
								CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) 
								THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') 
								END 
					AND NOT EXISTS
					(
						SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
					)
			)U
			SELECT * INTO #DEDUCTEE FROM
			(
				SELECT * FROM @EMPLOYEE
				UNION 
				SELECT * FROM @NONEMPLOYEE  
			)DE
			SELECT BRANCHID 
			INTO #BRANCHES
			FROM BRANCHDEDUCTORS BD1 WITH(NOLOCK)
				INNER JOIN DEDUCTOR D1 WITH(NOLOCK) ON BD1.DEDUCTORID = D1.DEDUCTORID 
			WHERE BD1.QUARTER = @QUARTER AND UPPER(D1.TAN) <> 'TANAPPLIED'
			GROUP BY BRANCHID 
			SELECT CB.BRANCHID, SUPERFINAL.FORMTYPE, 
				 CASE WHEN SUPERFINAL.FORMTYPE = '26QI' OR SUPERFINAL.FORMTYPE = '26QV' THEN 2 
				 WHEN SUPERFINAL.FORMTYPE = '24Q' THEN 1 
			ELSE 3 
			END AS [FORMID] 
			INTO #DIFFERCMP 
			FROM
				(  
					SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.FORMTYPE, ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT 
					FROM    
						(  
							SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.FORMTYPE, SUM(RESULT.TDS) AS TDS 
							FROM   
								(  
									SELECT CB.BRANCHID, CB.PARENTBRANCHID, 
										 CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
										 WHEN (DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
										 ELSE '26QV' END AS FORMTYPE,
									SUM(DD.TOTALDEDUCTED) AS TDS 
									FROM COMPANYBRANCH CB WITH (NOLOCK)
										INNER JOIN DEDUCTIONDETAIL DD WITH (NOLOCK) ON CB.BRANCHID = DD.BRANCHID  
										INNER JOIN @FORMS F ON DD.FORMID = F.FORMID
										INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID 
										INNER JOIN #UNLINKED DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID  
									WHERE MONTH(DEDUCTEDDATE) = @MONTH AND (DD.EXCLUDEINAC IS NULL OR DD.EXCLUDEINAC = 0) 	
									GROUP BY CB.BRANCHID, TS.SECTIONID, DD.FORMID, CB.PARENTBRANCHID, 
											CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
												 WHEN (DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
												 ELSE '26QV' END  
								) AS RESULT 
							GROUP BY RESULT.BRANCHID, RESULT.FORMTYPE, RESULT.PARENTBRANCHID
						) FINAL
							LEFT JOIN #TEMPPARKEDAMOUNT PA WITH (NOLOCK) ON PA.BRANCHID = FINAL.BRANCHID AND PA.FORMTYPE = FINAL.FORMTYPE   
						WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 
							AND (MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL) 
				) SUPERFINAL
					INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON SUPERFINAL.BRANCHID = CB.BRANCHID
					INNER JOIN COMPANYBRANCH CB1 WITH (NOLOCK) ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID 
			ORDER BY CB1.BRANCHID
			SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, BRANCHID, SECTIONID, INCOMETAX, 
				SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, DEDUCTEDDATE, FORMID, 
				QUARTER,EXCLUDEINAC,DEDUCTEECODE,
				CASE WHEN FORMID = 1 THEN '24Q' 
					 WHEN FORMID = 3 THEN '27Q' 
					 WHEN (FORMID=2 AND SECTIONID=5) THEN '26QI' 
				ELSE '26QV' END AS FORMTYPE,
				CASE WHEN FORMID = 1 THEN 103 
					 WHEN FORMID = 3 THEN 101 
					 WHEN (FORMID=2 AND SECTIONID=5) THEN 101 
				ELSE 102 END AS ACCOUNTTYPE, 
				CASE WHEN ENTRYTYPE=4 THEN 1 ELSE 0 END ISFINACLE 
			INTO #REQDATA
			FROM DEDUCTIONDETAIL DD WITH (NOLOCK)
				INNER JOIN #UNLINKED DL ON DD.DEDUCTIONID = DL.DEDUCTIONID 
				INNER JOIN #DEDUCTEE DE ON DD.DEDUCTEEID = DE.DEDUCTEEID
			WHERE (EXCLUDEINAC IS NULL OR EXCLUDEINAC = 0) AND FORMID IN (1,2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH
		SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, ISNULL(DEDUCTEECODE, 2) AS DEDUCTEECODE,
			SUM(INCOMETAX)INCOMETAX, SUM(SURCHARGE)SURCHARGE, SUM(EDUCATIONCESS)EDUCATIONCESS, 
			SUM(TOTALDEDUCTED)TOTALDEDUCTED, MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID--, ISFINACLE 
			INTO #TEMPCMP
		FROM 
			(
				SELECT BRANCHNAME, BRANCHID, SECTIONID,	SECTIONNAME, DEDUCTEECODE,
					ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,
					ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, 
					(ISNULL(CEILING(SUM(INCOMETAX)), 0)+ISNULL(CEILING(SUM(SURCHARGE)), 0)+ISNULL(CEILING(SUM(EDUCATIONCESS)),0)) TOTALDEDUCTED, 
					--ISNULL(CEILING(SUM(TOTALDEDUCTED)), 0)
					MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID--, ISFINACLE
				FROM 
					(
						SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,
							TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,
							SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(TOTALDEDUCTED) TOTALDEDUCTED,
							0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID, ISFINACLE
						FROM #REQDATA DD
							INNER JOIN #BRANCHES B ON B.BRANCHID = DD.BRANCHID
							INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON DD.SECTIONID = TS.SECTIONID --AND TS.FORMID = DD.FORMID	
							INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON CB.BRANCHID = DD.BRANCHID 
							LEFT JOIN #DIFFERCMP DFL ON DD.BRANCHID = DFL.BRANCHID AND DD.FORMTYPE = DFL.FORMTYPE
						WHERE DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND (ISNULL(CB.NOCHALLANPAY,0)=0) AND					
							DFL.BRANCHID IS NULL AND 
							(DD.ACCOUNTTYPE = @ACCOUNTTYPE1 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE2 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE3)
						GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, 
							CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID, ISFINACLE
					) RESULT --WHERE FORMID <> 1 
				GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID--, ISFINACLE
			) Q
		GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID--, ISFINACLE
		EXEC('ALTER TABLE #TEMPCMP ADD ID INT IDENTITY(1, 1)')  
		/* INSERT INTO CHALLANMAKEPAYMENT */
		INSERT INTO CHALLANMAKEPAYMENT (ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE,TOTALDEDUCTED)
		SELECT ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE, TOTALDEDUCTED
		FROM
			(
				SELECT T.ID,T.BRANCHID,SECTIONID, DEDUCTEECODE, 
					INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED,
					T.FORMID, T.QUARTER
				FROM #TEMPCMP T 
			) DATA				
		INSERT INTO DEDCHALLANMAKEPAYMENT(ID,DEDUCTIONID) 
		SELECT DISTINCT CHALL.ID,DD.DEDUCTIONID
		FROM 
			(
				SELECT DEDUCTIONID,FORMID,TOTALDEDUCTED,DEDUCTEEID,SECTIONID,BRANCHID,DEDUCTEDDATE--,
				--CASE WHEN ENTRYTYPE=4 THEN 1 ELSE 0 END ISFINACLE 
				FROM  DEDUCTIONDETAIL WITH (NOLOCK) 
				WHERE MONTH(DEDUCTEDDATE)=@MONTH
			) DD 
			INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID=DD.DEDUCTEEID 
			LEFT JOIN DEDCHALLANMAKEPAYMENT CD WITH (NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID 
			INNER JOIN #TEMPCMP T ON DD.BRANCHID=T.BRANCHID AND 
					(CASE WHEN DD.SECTIONID IN(23,24) THEN 15 ELSE DD.SECTIONID END) = T.SECTIONID AND D.DEDUCTEECODE=T.DEDUCTEECODE
			LEFT JOIN #DIFFERCMP DL ON DD.BRANCHID=DL.BRANCHID AND DD.FORMID=DL.FORMID
			INNER JOIN 
					(
						Select ID FROM CHALLANMAKEPAYMENT WITH(NOLOCK)
					) CHALL ON CHALL.ID = T.ID		
		WHERE  DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH --AND CD.ID IS NULL 		
		SET @RESULT=1
		COMMIT 
	END TRY	
	BEGIN CATCH
		SET @RESULT=-1
		ROLLBACK
	END CATCH
	IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNT') IS NOT NULL
		DROP TABLE #TEMPPARKEDAMOUNT
	SET NOCOUNT ON
	SELECT @RESULT	
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CreateChallanForPayment05')
DROP PROCEDURE USP_TDS_CreateChallanForPayment05
GO
CREATE PROCEDURE USP_TDS_CreateChallanForPayment05 
	@MONTH INT,
	@FINANCIALYEAR INT,
	@ACCOUNTTYPE1 INT,
	@ACCOUNTTYPE2 INT,
	@ACCOUNTTYPE3 INT,
	@CLIENTID INT = 0
AS
BEGIN
	DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
	DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);	
	DECLARE @FORMS TABLE(FORMID INT);
	DECLARE @RESULT INT,@DBNAME VARCHAR(MAX), @FORMID INT,@VAR INT, @QUARTER INT,@MONTHYEAR VARCHAR(6) ;
	CREATE TABLE #TEMPPARKEDAMOUNT(MONTHYEAR INT,BRANCHID INT,FORMTYPE VARCHAR(10),
			AMOUNT NUMERIC(17,2))
	CREATE TABLE #UNLINKED (DEDUCTIONID INT,DEDUCTEEID INT,BRANCHID INT,FORMID INT,
				QUARTER INT,ENTRYTYPE INT,DEDUCTEDDATE SMALLDATETIME,EXCLUDEINAC BIT,
				SECTIONID INT,TOTALDEDUCTED NUMERIC(13,2),INCOMETAX NUMERIC(13,2),
				SURCHARGE NUMERIC(13,2),EDUCATIONCESS NUMERIC(13,2),RTBRANCHID INT)
	SET @RESULT = 0;
	SELECT @DBNAME = DB_NAME()
	SET NOCOUNT OFF
	IF(@CLIENTID = 1)
		BEGIN
			SET @ACCOUNTTYPE1=101
			SET @ACCOUNTTYPE2=102
			SET @ACCOUNTTYPE3=103
		END    
	IF @MONTH >9   
		SET @VAR = 2
	ELSE  
		SET @VAR = 1
	SELECT @QUARTER = DBO.UDF_TDS_GETQUARTER(@MONTH)
	IF(@MONTH < 4)
		SET @FINANCIALYEAR = @FINANCIALYEAR + 1
	SET @MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR)
	BEGIN TRANSACTION 
			BEGIN TRY	
				DELETE FROM CHALLANMAKEPAYMENT
				DELETE FROM DEDCHALLANMAKEPAYMENT	
				EXEC USP_TDS_CHALLANSQL_PA @MONTHYEAR
				SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,
					ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
					INCOMETAX,SURCHARGE,EDUCATIONCESS,RTBRANCHID 
				INTO #DED
				FROM DEDUCTIONDETAIL WITH(NOLOCK) 
				WHERE MONTH(DEDUCTEDDATE) = @MONTH  AND QUARTER = @QUARTER 
					AND DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK))
				SELECT RTBRANCHID,
					   CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
							WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) 
									OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
							WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN '26QVS'
							ELSE '26QV' END AS FORMTYPE,
					SUM(TOTALDEDUCTED) AS AMOUNT
				INTO #AMTDET
				FROM #DED DD WITH(NOLOCK) 
					INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON TS.SECTIONID = DD.SECTIONID 
				WHERE MONTH(DEDUCTEDDATE) = @MONTH AND ISNULL(RTBRANCHID,0) <> 0
				GROUP BY DD.FORMID,RTBRANCHID,
					   CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
							WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) 
									OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
							WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN '26QVS'
							ELSE '26QV' END
				SELECT PA.*
				INTO #PARKED 
				FROM PARKEDAMOUNT PA WITH(NOLOCK)
					INNER JOIN #AMTDET AD WITH (NOLOCK) ON AD.RTBRANCHID = PA.BRANCHID AND AD.FORMTYPE = PA.FORMTYPE 
				WHERE MONTHYEAR = @MONTHYEAR AND PA.AMOUNT >= AD.AMOUNT 
				SELECT DD.DEDUCTIONID
				INTO #EXCDEDIDS
				FROM PARKEDAMOUNT PA WITH(NOLOCK)
					INNER JOIN #AMTDET AD WITH (NOLOCK) ON AD.RTBRANCHID = PA.BRANCHID AND AD.FORMTYPE = PA.FORMTYPE
					INNER JOIN #DED DD WITH(NOLOCK) ON DD.RTBRANCHID = AD.RTBRANCHID
								AND AD.FORMTYPE = (CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
										WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID = 5) 
												OR (@CLIENTID = 11 AND DD.FORMID = 2 AND DD.SECTIONID = 5) THEN '26QI' 
										WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID <> 5) THEN '26QVS'
										ELSE '26QV' END)
				WHERE MONTHYEAR = @MONTHYEAR AND PA.AMOUNT < AD.AMOUNT 
				SELECT BRANCHID, RTBRANCHID, SUM(TOTALDEDUCTED) AS TOTALDEDUCTED
				INTO #FORM24BRANCHES
				FROM #DED DD 
				WHERE FORMID = 1 
					AND ISNULL(RTBRANCHID,0) <> 0
					AND MONTH(DEDUCTEDDATE) = @MONTH
					AND DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM #EXCDEDIDS)
				GROUP BY BRANCHID, RTBRANCHID
				INSERT INTO #TEMPPARKEDAMOUNT
				SELECT MONTHYEAR, BRANCHID, FORMTYPE, SUM(AMOUNT) AMOUNT
				FROM
				(SELECT MONTHYEAR,FB.BRANCHID, FORMTYPE, AMOUNT
				 FROM #FORM24BRANCHES FB
					INNER JOIN #PARKED P ON P.BRANCHID = FB.RTBRANCHID
				 WHERE ISNULL(FORMTYPE, '') = '24Q'
				) DPA
				GROUP BY MONTHYEAR, BRANCHID, FORMTYPE
				UNION
				SELECT MONTHYEAR,
						CASE WHEN ISZORO = 0 THEN CB.PARENTBRANCHID ELSE CB.BRANCHID END AS BRANCHID,
					FORMTYPE,SUM(AMOUNT) AS AMOUNT 
				FROM #PARKED PA WITH(NOLOCK)
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = PA.BRANCHID 
				WHERE MONTHYEAR = @MONTHYEAR 
					AND ISNULL(FORMTYPE, '') <> ''
					AND ISNULL(FORMTYPE, '') <> '24Q'
				GROUP BY MONTHYEAR,
						CASE WHEN ISZORO = 0 THEN CB.PARENTBRANCHID ELSE CB.BRANCHID END,FORMTYPE
				IF(@ACCOUNTTYPE1 = 101 OR @ACCOUNTTYPE2 = 102) 
					BEGIN 	
						INSERT INTO @NONEMPLOYEE
						SELECT D.DEDUCTEEID, NE.DEDUCTEECODE 
						FROM DEDUCTEE D WITH(NOLOCK)
							INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
							INNER JOIN #DED DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
						WHERE FORMID IN (2,3)
						GROUP BY D.DEDUCTEEID, NE.DEDUCTEECODE
						INSERT INTO @FORMS 
						SELECT 2 AS FORMID
						UNION 
						SELECT 3 AS FORMID
					END
				IF(@ACCOUNTTYPE3 = 103) 
					BEGIN 
						INSERT INTO @EMPLOYEE
						SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE 
						FROM DEDUCTEE D WITH(NOLOCK)
							INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
							INNER JOIN #DED DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
						WHERE FORMID = 1
						GROUP BY D.DEDUCTEEID 
						INSERT INTO @FORMS 
						SELECT 1 AS FORMID				
					END   
				INSERT INTO #UNLINKED 
				SELECT DEDUCTIONID,DD.DEDUCTEEID,DD.BRANCHID,DD.FORMID,QUARTER,
					ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
					INCOMETAX,SURCHARGE,EDUCATIONCESS,DD.RTBRANCHID
				FROM #DED DD WITH(NOLOCK)
					INNER JOIN @FORMS F ON DD.FORMID = F.FORMID
					INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
				WHERE MONTH(DEDUCTEDDATE) = @MONTH AND D.PAN 
					LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED'))  
							  THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END 
				AND NOT EXISTS
						(
							SELECT DEDUCTIONID 
							FROM DEDCHALINK WITH(NOLOCK) 
							WHERE DEDUCTIONID = DD.DEDUCTIONID
						)
				AND DD.DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM #EXCDEDIDS)
				IF OBJECT_ID('TEMPDB..#DED') IS NOT NULL
					DROP TABLE #DED
				IF OBJECT_ID('TEMPDB..#AMTDET') IS NOT NULL
					DROP TABLE #AMTDET
				IF OBJECT_ID('TEMPDB..#PARKED') IS NOT NULL
					DROP TABLE #PARKED 
				IF OBJECT_ID('TEMPDB..#EXCDEDIDS') IS NOT NULL
					DROP TABLE #EXCDEDIDS
				SELECT * 
				INTO #DEDUCTEE 
				FROM
					(
						SELECT * FROM @EMPLOYEE
						UNION 
						SELECT * FROM @NONEMPLOYEE  
					)DE
  				SELECT CB.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,CB.NOCHALLANPAY 
				INTO #BRANCHES
				FROM BRANCHDEDUCTORS BD1 WITH(NOLOCK)
					INNER JOIN DEDUCTOR D1 WITH(NOLOCK) ON BD1.DEDUCTORID = D1.DEDUCTORID 
					INNER JOIN COMPANYBRANCH CB ON BD1.BRANCHID = CB.BRANCHID 
				WHERE BD1.QUARTER = @QUARTER AND UPPER(D1.TAN) <> 'TANAPPLIED'
				GROUP BY CB.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,CB.NOCHALLANPAY  
				SELECT CB.BRANCHID, SUPERFINAL.FORMTYPE, 
					CASE WHEN SUPERFINAL.FORMTYPE = '26QI' OR SUPERFINAL.FORMTYPE = '26QV' OR SUPERFINAL.FORMTYPE = '26QVS' THEN 2 
						 WHEN SUPERFINAL.FORMTYPE = '24Q' THEN 1 
						 ELSE 3 
					END AS [FORMID] 
				INTO #DIFFERCMP 
				FROM
					(  
						SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.FORMTYPE, 
							ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT 
						FROM    
							(  
							  SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, 
									RESULT.FORMTYPE, SUM(RESULT.TDS) AS TDS 
							  FROM   
								(  
									SELECT CB.BRANCHID, CB.PARENTBRANCHID, 
									   CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
											WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) 
													OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
											WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN '26QVS'
											ELSE '26QV' END AS FORMTYPE,
										SUM(DD.TOTALDEDUCTED) AS TDS 
									FROM COMPANYBRANCH CB WITH (NOLOCK)
										INNER JOIN #UNLINKED DD WITH (NOLOCK) ON CB.BRANCHID = DD.BRANCHID  
										INNER JOIN @FORMS F ON DD.FORMID = F.FORMID
										INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON TS.SECTIONID = DD.SECTIONID 
									WHERE MONTH(DEDUCTEDDATE) = @MONTH AND (DD.EXCLUDEINAC IS NULL OR DD.EXCLUDEINAC = 0) 	
									GROUP BY CB.BRANCHID, TS.SECTIONID, DD.FORMID, CB.PARENTBRANCHID, DD.ENTRYTYPE  
								) AS RESULT 
							  GROUP BY RESULT.BRANCHID, RESULT.FORMTYPE, RESULT.PARENTBRANCHID
							) FINAL
							LEFT JOIN #TEMPPARKEDAMOUNT PA WITH (NOLOCK) ON PA.BRANCHID = FINAL.BRANCHID AND PA.FORMTYPE = FINAL.FORMTYPE   
						WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 
								AND (MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL) 
					) SUPERFINAL
							INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON SUPERFINAL.BRANCHID = CB.BRANCHID
							INNER JOIN COMPANYBRANCH CB1 WITH (NOLOCK) ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID 
				ORDER BY CB1.BRANCHID 
				SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, BRANCHID, SECTIONID, INCOMETAX,SURCHARGE, 
					EDUCATIONCESS, TOTALDEDUCTED, DEDUCTEDDATE, FORMID,QUARTER,EXCLUDEINAC,DEDUCTEECODE,
					CASE WHEN FORMID = 1 THEN '24Q' 
						 WHEN FORMID = 3 THEN '27Q' 
						 WHEN (@CLIENTID <> 11 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID = 5) 
								OR (@CLIENTID = 11 AND FORMID = 2 AND SECTIONID = 5) THEN '26QI' 
						 WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID <> 5) THEN '26QVS'
						 ELSE '26QV' END AS FORMTYPE,
					CASE WHEN FORMID = 1 THEN 103 WHEN FORMID = 3 THEN 101 
						 WHEN (@CLIENTID <> 11 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID = 5) 
								OR (@CLIENTID = 11 AND FORMID = 2 AND SECTIONID = 5) THEN 101 
						 ELSE 102 END AS ACCOUNTTYPE, 
					CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 1 
						 WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE <> 4 AND SECTIONID NOT IN (5, 17)) THEN 0
						 WHEN (@CLIENTID <> 1 AND (ENTRYTYPE=4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5,17)))) THEN 1 
						 ELSE 0 END ISFINACLE 
				INTO #REQDATA
				FROM #UNLINKED DD WITH (NOLOCK)
					INNER JOIN #DEDUCTEE DE ON DD.DEDUCTEEID = DE.DEDUCTEEID
				WHERE (EXCLUDEINAC IS NULL OR EXCLUDEINAC = 0) 
					AND FORMID IN (1,2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH	
				SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, ISNULL(DEDUCTEECODE, 2) AS DEDUCTEECODE,
					SUM(INCOMETAX)INCOMETAX, SUM(SURCHARGE)SURCHARGE, SUM(EDUCATIONCESS)EDUCATIONCESS, 
					SUM(TOTALDEDUCTED)TOTALDEDUCTED, MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE 
				INTO #TEMPCMP
				FROM 
				(
					SELECT BRANCHNAME, BRANCHID, SECTIONID,
						SECTIONNAME,
						DEDUCTEECODE,
						ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,
						ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, 
						(ISNULL(CEILING(SUM(INCOMETAX)), 0)+ISNULL(CEILING(SUM(SURCHARGE)), 0)+ISNULL(CEILING(SUM(EDUCATIONCESS)),0)) TOTALDEDUCTED, 
						MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE
					FROM 
					(
						SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,
							TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,
							SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(TOTALDEDUCTED) TOTALDEDUCTED,
							0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID, ISFINACLE
						FROM #REQDATA DD
							INNER JOIN #BRANCHES CB ON CB.BRANCHID = DD.BRANCHID
							INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON DD.SECTIONID = TS.SECTIONID 
							LEFT JOIN #DIFFERCMP DFL ON DD.BRANCHID = DFL.BRANCHID AND DD.FORMTYPE = DFL.FORMTYPE
						WHERE DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
							AND (ISNULL(CB.NOCHALLANPAY,0)=0) AND DFL.BRANCHID IS NULL 
							AND (DD.ACCOUNTTYPE = @ACCOUNTTYPE1 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE2 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE3)
						GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, 
							CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID, ISFINACLE
					) RESULT 
					GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE
				) Q
				GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE		
				EXEC('ALTER TABLE #TEMPCMP ADD ID INT IDENTITY(1, 1)')  
				/* INSERT INTO CHALLANMAKEPAYMENT */
				INSERT INTO CHALLANMAKEPAYMENT (ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE,TOTALDEDUCTED)
				SELECT ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE, TOTALDEDUCTED
				FROM
				(
					SELECT T.ID,T.BRANCHID,SECTIONID, DEDUCTEECODE, INCOMETAX, 
						SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, T.FORMID, T.QUARTER
					FROM #TEMPCMP T 
				) DATA	
				INSERT INTO DEDCHALLANMAKEPAYMENT(ID,DEDUCTIONID) 
				SELECT DISTINCT CHALL.ID,DD.DEDUCTIONID
				FROM 
					(
						SELECT DEDUCTIONID,FORMID,TOTALDEDUCTED,DEDUCTEEID,SECTIONID,BRANCHID,DEDUCTEDDATE,
							CASE WHEN ENTRYTYPE=4 THEN 1 
								 ELSE 0 END ISFINACLE 
						FROM  #UNLINKED WITH (NOLOCK) 
						WHERE MONTH(DEDUCTEDDATE)=@MONTH
					 ) DD 
					INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID=DD.DEDUCTEEID 
					LEFT JOIN DEDCHALLANMAKEPAYMENT CD WITH (NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID 
					INNER JOIN #TEMPCMP T ON DD.BRANCHID=T.BRANCHID 
						AND (CASE WHEN DD.SECTIONID IN(23,24) THEN 15 ELSE DD.SECTIONID END) = T.SECTIONID 
						AND D.DEDUCTEECODE=T.DEDUCTEECODE
					LEFT JOIN #DIFFERCMP DL ON DD.BRANCHID=DL.BRANCHID AND DD.FORMID=DL.FORMID
					INNER JOIN 
						(
							SELECT ID 
							FROM CHALLANMAKEPAYMENT WITH(NOLOCK)
						) CHALL ON CHALL.ID = T.ID		
				WHERE  DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
				SET @RESULT=1
				IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNT') IS NOT NULL
					DROP TABLE #TEMPPARKEDAMOUNT
				IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
					DROP TABLE #UNLINKED
				IF OBJECT_ID('TEMPDB..#REQDATA') IS NOT NULL
					DROP TABLE #REQDATA
				IF OBJECT_ID('TEMPDB..#BRANCHES') IS NOT NULL
					DROP TABLE #BRANCHES
				IF OBJECT_ID('TEMPDB..#DIFFERCMP') IS NOT NULL
					DROP TABLE #DIFFERCMP
				IF OBJECT_ID('TEMPDB..#TEMPCMP') IS NOT NULL
					DROP TABLE #TEMPCMP
				IF OBJECT_ID('TEMPDB..#AMTDET') IS NOT NULL
					DROP TABLE #AMTDET
				IF OBJECT_ID('TEMPDB..#PARKED') IS NOT NULL
					DROP TABLE #PARKED 
				IF OBJECT_ID('TEMPDB..#EXCDEDIDS') IS NOT NULL
					DROP TABLE #EXCDEDIDS
				SELECT @RESULT
				COMMIT 
			END TRY	
		BEGIN CATCH
			SET @RESULT=-1
			SELECT @RESULT
			ROLLBACK
		END CATCH
	SET NOCOUNT ON
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CreateChallanForPaymentCBI')
DROP PROCEDURE USP_TDS_CreateChallanForPaymentCBI
GO
CREATE PROCEDURE [dbo].[USP_TDS_CreateChallanForPaymentCBI]
	@MONTH INT,
	@FINANCIALYEAR INT,
	@ACCOUNTTYPE1 INT,
	@ACCOUNTTYPE2 INT,
	@ACCOUNTTYPE3 INT,
	@CLIENTID INT = 0
AS
BEGIN
	DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
	DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);	
	DECLARE @FORMS TABLE(FORMID INT);
	DECLARE @RESULT INT,@DBNAME VARCHAR(MAX), @FORMID INT,@VAR INT, @QUARTER INT,@MONTHYEAR VARCHAR(6) ;
	CREATE TABLE #TEMPPARKEDAMOUNT(MONTHYEAR INT,BRANCHID INT,FORMTYPE VARCHAR(10),ACCOUNTNO VARCHAR(20),AMOUNT NUMERIC(17,2))
	SET @RESULT = 0;
	SELECT @DBNAME = DB_NAME()
     SET NOCOUNT OFF
    SELECT DEDUCTIONID, ENTRYTYPE
    INTO #MANUALDEDUCTIONTD
    FROM DEDUCTIONDETAIL WITH(NOLOCK)
    WHERE MONTH(DEDUCTEDDATE) = @MONTH
    AND ENTRYTYPE = 1 AND SECTIONID = 5
	IF(@CLIENTID = 1)
		BEGIN
			SET @ACCOUNTTYPE1=101
			SET @ACCOUNTTYPE2=102
			SET @ACCOUNTTYPE3 = 0
		END    
	IF @MONTH > 9   
		SET @VAR = 2
	ELSE  
		SET @VAR = 1
	IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)
		SET @QUARTER = 1
	ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)
		SET @QUARTER = 2
	ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)
		SET @QUARTER = 3
	ELSE 
		SET @QUARTER = 4
	IF(@MONTH < 4)
		SET @FINANCIALYEAR = @FINANCIALYEAR + 1
	SET @MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR)
	EXEC USP_TDS_CHECKDEDUCTIONAGAINSTPARKEDAMOUNTFORCBI @MONTH,@MONTHYEAR
	BEGIN TRANSACTION 
		BEGIN TRY
				UPDATE DEDUCTIONDETAIL SET ENTRYTYPE = 4 WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #MANUALDEDUCTIONTD)	
				DELETE FROM CHALLANMAKEPAYMENT
				DELETE FROM DEDCHALLANMAKEPAYMENT	
				EXEC USP_TDS_CHALLANSQL_PA @MONTHYEAR
				IF(@CLIENTID = -1)
				BEGIN
					INSERT INTO #TEMPPARKEDAMOUNT 
					EXEC USP_TDS_GETREMAININGPARKEDAMOUNT @MONTH,@MONTHYEAR
				END
				ELSE
				BEGIN
					INSERT INTO #TEMPPARKEDAMOUNT
					SELECT MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT 
					FROM PARKEDAMOUNT WITH(NOLOCK) 
					WHERE MONTHYEAR = @MONTHYEAR 
					   AND ISNULL(FORMTYPE, '') <> ''
				END
				 DECLARE @BGLID INT;
				 SELECT TOP 1 @BGLID = BGLCODEID FROM TDSRATE WHERE BGLCODE = '55800'
				 SELECT DEDUCTIONID INTO #BGUPD FROM DEDUCTIONDETAIL WITH(NOLOCK)
				 WHERE FORMID = 1 
					AND MONTH(PAYMENTDATE) = @MONTH AND QUARTER = @QUARTER
					AND ISNULL(BGLCODEID, 0) <> @BGLID
					AND SECTIONID IN (1, 2, 25)
				 UPDATE DEDUCTIONDETAIL 
				    SET BGLCODEID = @BGLID
				    WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #BGUPD)
				 DROP TABLE #BGUPD
				IF(@ACCOUNTTYPE1 = 101 OR @ACCOUNTTYPE2 = 102) 
				BEGIN 
					INSERT INTO @NONEMPLOYEE
					SELECT D.DEDUCTEEID, NE.DEDUCTEECODE FROM DEDUCTEE D WITH(NOLOCK)
					INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
					INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
					WHERE FORMID IN (2,3)
					GROUP BY D.DEDUCTEEID, NE.DEDUCTEECODE
					INSERT INTO @FORMS 
					SELECT 2 AS FORMID
					UNION 
					SELECT 3 AS FORMID
				END
			   IF(@ACCOUNTTYPE3 = 103) 
				 BEGIN 
					 INSERT INTO @EMPLOYEE
					SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE FROM DEDUCTEE D WITH(NOLOCK)
					INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
					INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
					WHERE FORMID = 1
					GROUP BY D.DEDUCTEEID 
					INSERT INTO @FORMS 
					SELECT 1 AS FORMID				
				 END    
				 SELECT * INTO #UNLINKED FROM
					(
						SELECT DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
						INNER JOIN @FORMS F ON DD.FORMID = F.FORMID
						INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
						WHERE MONTH(DEDUCTEDDATE) = @MONTH AND D.PAN LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END AND
						NOT EXISTS
						(
							SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
						) AND QUARTER = @QUARTER
					)U
				SELECT * INTO #DEDUCTEE FROM
			   (
				 SELECT * FROM @EMPLOYEE
				 UNION 
				 SELECT * FROM @NONEMPLOYEE  
			   )DE
			  	SELECT BRANCHID 
				INTO #BRANCHES
				FROM BRANCHDEDUCTORS BD1 WITH(NOLOCK)
				INNER JOIN DEDUCTOR D1 WITH(NOLOCK) ON BD1.DEDUCTORID = D1.DEDUCTORID 
				WHERE BD1.QUARTER = @QUARTER AND UPPER(D1.TAN) <> 'TANAPPLIED'
				GROUP BY BRANCHID 
				SELECT * INTO #TDSRATE FROM TDSRATE WITH(NOLOCK)
				IF(@ACCOUNTTYPE1 = 101 OR @ACCOUNTTYPE2 = 102) 
					BEGIN
						UPDATE DEDUCTIONDETAIL SET BGLCODEID = (SELECT ISNULL(MAX(BGLCODEID),-1) FROM #TDSRATE WITH(NOLOCK) WHERE BGLCODE = 55801) 
						FROM DEDUCTIONDETAIL DD INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID
						WHERE MONTH(DEDUCTEDDATE) = @MONTH AND ((SECTIONID = 5 AND ENTRYTYPE = 4) OR (SECTIONID = 17 AND ENTRYTYPE = 4))
						UPDATE DEDUCTIONDETAIL SET BGLCODEID = (SELECT ISNULL(MAX(BGLCODEID),-1) FROM #TDSRATE WITH(NOLOCK) WHERE BGLCODE = 56685) 
						FROM DEDUCTIONDETAIL DD INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID
						WHERE MONTH(DEDUCTEDDATE) = @MONTH AND (SECTIONID = 17 AND ENTRYTYPE <> 4) AND BGLCODEID IS NULL
					END
				IF(@ACCOUNTTYPE3 = 103) 
					BEGIN 
						UPDATE DEDUCTIONDETAIL SET BGLCODEID = (SELECT ISNULL(MAX(BGLCODEID),-1) FROM #TDSRATE WITH(NOLOCK) WHERE BGLCODE = 55800)
						FROM DEDUCTIONDETAIL DD INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID 
						WHERE MONTH(DEDUCTEDDATE) = @MONTH AND FORMID = 1
					END
				SELECT CB.BRANCHID, SUPERFINAL.BGLCODE,FORMID
				 INTO #DIFFERCMP 
				 FROM
					(  
						SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.BGLCODE, FINAL.FORMID, ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT FROM    
							(  
							  SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.BGLCODE, RESULT.FORMID, SUM(RESULT.TDS) AS TDS FROM   
								(  
									SELECT CB.BRANCHID, CB.PARENTBRANCHID, BGLCODE, DD.FORMID,
										SUM(DD.TOTALDEDUCTED) AS TDS 
									FROM COMPANYBRANCH CB WITH (NOLOCK)
									INNER JOIN DEDUCTIONDETAIL DD WITH (NOLOCK) ON CB.BRANCHID = DD.BRANCHID  
									INNER JOIN @FORMS F ON DD.FORMID = F.FORMID
									INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON TS.SECTIONID = DD.SECTIONID 
									INNER JOIN #TDSRATE TR WITH (NOLOCK) ON DD.BGLCODEID = TR.BGLCODEID
									INNER JOIN #UNLINKED DCL WITH (NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID  
									WHERE MONTH(DEDUCTEDDATE) = @MONTH AND (DD.EXCLUDEINAC IS NULL OR DD.EXCLUDEINAC = 0) 	
									GROUP BY CB.BRANCHID, BGLCODE, DD.FORMID, CB.PARENTBRANCHID, DD.ENTRYTYPE  
								) AS RESULT 
								GROUP BY RESULT.BRANCHID, RESULT.BGLCODE, RESULT.FORMID,RESULT.PARENTBRANCHID
							) FINAL
							LEFT JOIN #TEMPPARKEDAMOUNT PA WITH (NOLOCK) ON PA.BRANCHID = FINAL.BRANCHID AND PA.FORMTYPE COLLATE SQL_Latin1_General_CP1_CI_AS = FINAL.BGLCODE COLLATE SQL_Latin1_General_CP1_CI_AS   
							WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 AND (MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL) 
						) SUPERFINAL
						INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON SUPERFINAL.BRANCHID = CB.BRANCHID
						INNER JOIN COMPANYBRANCH CB1 WITH (NOLOCK) ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID 
						ORDER BY CB1.BRANCHID
				SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, BRANCHID, DD.SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, DEDUCTEDDATE, BGLCODE,FORMID, 
												QUARTER,EXCLUDEINAC,DEDUCTEECODE,
										CASE WHEN FORMID = 1 THEN 103 WHEN FORMID = 3 THEN 101 
												WHEN (FORMID = 2 AND DD.SECTIONID = 5 AND ENTRYTYPE = 4) THEN 101 ELSE 102 END AS ACCOUNTTYPE, 
										CASE WHEN ENTRYTYPE = 4 THEN 1 ELSE 0 END ISFINACLE 
									INTO #REQDATA
									FROM DEDUCTIONDETAIL DD WITH (NOLOCK)
									INNER JOIN #TDSRATE TR WITH (NOLOCK) ON DD.BGLCODEID = TR.BGLCODEID
									INNER JOIN #UNLINKED DL ON DD.DEDUCTIONID = DL.DEDUCTIONID 
									INNER JOIN #DEDUCTEE DE ON DD.DEDUCTEEID = DE.DEDUCTEEID
									WHERE (EXCLUDEINAC IS NULL OR EXCLUDEINAC = 0) AND FORMID IN (1,2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH
				SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, ISNULL(DEDUCTEECODE, 2) AS DEDUCTEECODE,
							SUM(INCOMETAX)INCOMETAX, SUM(SURCHARGE)SURCHARGE, SUM(EDUCATIONCESS)EDUCATIONCESS, 
							SUM(TOTALDEDUCTED)TOTALDEDUCTED, MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE 
						INTO #TEMPCMP
						FROM 
						(
							SELECT BRANCHNAME, BRANCHID, SECTIONID,
									SECTIONNAME,
									DEDUCTEECODE,
								ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,
								ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, (ISNULL(CEILING(SUM(INCOMETAX)), 0)+ISNULL(CEILING(SUM(SURCHARGE)), 0)+ISNULL(CEILING(SUM(EDUCATIONCESS)),0)) TOTALDEDUCTED, --ISNULL(CEILING(SUM(TOTALDEDUCTED)), 0)
								MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE
							FROM 
							(
								SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,
									TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,
									SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(TOTALDEDUCTED) TOTALDEDUCTED,
									0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID, ISFINACLE
								FROM #REQDATA DD
								INNER JOIN #BRANCHES B ON B.BRANCHID = DD.BRANCHID
								INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON DD.SECTIONID = TS.SECTIONID
								INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON CB.BRANCHID = DD.BRANCHID 
								LEFT JOIN #DIFFERCMP DFL ON DD.BRANCHID = DFL.BRANCHID AND DD.BGLCODE COLLATE SQL_Latin1_General_CP1_CI_AS = DFL.BGLCODE COLLATE SQL_Latin1_General_CP1_CI_AS
								WHERE DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND (ISNULL(CB.NOCHALLANPAY,0)=0) AND					
										 DFL.BRANCHID IS NULL AND 
									(DD.ACCOUNTTYPE = @ACCOUNTTYPE1 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE2 OR DD.ACCOUNTTYPE = @ACCOUNTTYPE3)
								GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID, ISFINACLE
							) RESULT
							GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE
						) Q
						GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE
				EXEC('ALTER TABLE #TEMPCMP ADD ID INT IDENTITY(1, 1)')  
				/* INSERT INTO CHALLANMAKEPAYMENT */
				INSERT INTO CHALLANMAKEPAYMENT (ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE,TOTALDEDUCTED)
				SELECT ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE, TOTALDEDUCTED
					FROM
					(
							SELECT T.ID,T.BRANCHID,SECTIONID, DEDUCTEECODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED,
									   T.FORMID, T.QUARTER
							FROM #TEMPCMP T 
					) DATA				
				INSERT INTO DEDCHALLANMAKEPAYMENT(ID,DEDUCTIONID) 
					SELECT DISTINCT CHALL.ID,DD.DEDUCTIONID
					FROM 
					(
						SELECT DEDUCTIONID,FORMID,TOTALDEDUCTED,DEDUCTEEID,SECTIONID,BRANCHID,DEDUCTEDDATE,
								  CASE WHEN ENTRYTYPE=4 THEN 1 ELSE 0 END ISFINACLE 
						FROM  DEDUCTIONDETAIL WITH (NOLOCK) 
					 WHERE MONTH(DEDUCTEDDATE)=@MONTH AND QUARTER = @QUARTER
					 ) DD 
					INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID=DD.DEDUCTEEID 
					LEFT JOIN DEDCHALLANMAKEPAYMENT CD WITH (NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID 
					INNER JOIN #TEMPCMP T ON DD.BRANCHID=T.BRANCHID AND 
							(CASE WHEN DD.SECTIONID IN(23,24) THEN 15 ELSE DD.SECTIONID END) = T.SECTIONID AND D.DEDUCTEECODE=T.DEDUCTEECODE
					LEFT JOIN #DIFFERCMP DL ON DD.BRANCHID=DL.BRANCHID AND DD.FORMID=DL.FORMID
					INNER JOIN 
					(
						Select ID FROM CHALLANMAKEPAYMENT WITH(NOLOCK)
					) CHALL ON CHALL.ID = T.ID		
					WHERE  DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH
				SET @RESULT=1
					IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNT') IS NOT NULL
						DROP TABLE #TEMPPARKEDAMOUNT
					DROP TABLE #TDSRATE
					UPDATE DEDUCTIONDETAIL SET ENTRYTYPE = 1 WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #MANUALDEDUCTIONTD)
					SELECT @RESULT
				COMMIT 
		 END TRY	
		BEGIN CATCH
			SET @RESULT=-1
			SELECT @RESULT
			ROLLBACK
		END CATCH
	SET NOCOUNT ON	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CREATEDEDUCTEEFORAB')
DROP PROCEDURE USP_TDS_CREATEDEDUCTEEFORAB
GO
CREATE PROCEDURE [dbo].[USP_TDS_CREATEDEDUCTEEFORAB] 
 @DEDUCTEEID INT ,                                                                                
 @BRANCHID INT,
 @DEDUCTIONID INT,
 @HOBRANCHID INT
AS
BEGIN  
	DECLARE @RTBRANCHID INT , @PARENTBRANCHID INT, @SERIALNO INT, @NEWDEDUCTEEID INT;
	SET @RTBRANCHID	= @BRANCHID
	IF(@HOBRANCHID <> 0)
		BEGIN
			SET @PARENTBRANCHID = @HOBRANCHID
		END
	ELSE 
		BEGIN
			SELECT BRANCHID INTO #ZORO FROM COMPANYBRANCH WITH(NOLOCK) WHERE ISZORO = 1
			SET @PARENTBRANCHID = ISNULL((SELECT CB.PARENTBRANCHID 
										FROM COMPANYBRANCH CB WITH(NOLOCK)
										LEFT JOIN COMPANYBRANCH LF WITH(NOLOCK) 
											ON CB.PARENTBRANCHID = LF.BRANCHID
										INNER JOIN #ZORO Z 
											ON Z.BRANCHID = CB.PARENTBRANCHID
										WHERE CB.BRANCHID = @BRANCHID AND CB.ISZORO <> 1),0)
		END
	IF(@PARENTBRANCHID <> 0)
		BEGIN
			SET @BRANCHID = @PARENTBRANCHID
			IF(@DEDUCTIONID <> -1)
				BEGIN
					--DELETE FROM DEDUCTIONDETAIL WHERE DEDUCTIONID = @DEDUCTIONID AND BRANCHID = @RTBRANCHID
					UPDATE DEDUCTIONDETAIL SET BRANCHID = @PARENTBRANCHID 
					WHERE DEDUCTIONID = @DEDUCTIONID --AND BRANCHID = @RTBRANCHID
					--SET @DEDUCTIONID = -1
				END
			DECLARE @CURRENTDEDUCTEE TABLE (REFERENCENO VARCHAR(20),PAN VARCHAR(10),NAME VARCHAR(75))
			IF(@DEDUCTIONID = -1)
				BEGIN
					INSERT INTO @CURRENTDEDUCTEE
					SELECT REFERENCENO, PAN, NAME 
					FROM DEDUCTEE WITH(NOLOCK) 
						WHERE BRANCHID = @RTBRANCHID AND DEDUCTEEID = @DEDUCTEEID
				END
			ELSE
				BEGIN
					INSERT INTO @CURRENTDEDUCTEE
					SELECT REFERENCENO, PAN, NAME 
					FROM DEDUCTEE WITH(NOLOCK) 
						WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID
				END
			IF NOT EXISTS(SELECT * 
							FROM DEDUCTEE DD WITH(NOLOCK) 
							INNER JOIN @CURRENTDEDUCTEE CD
								ON DD.REFERENCENO = CD.REFERENCENO 
									AND DD.PAN = CD.PAN 
									AND DD.NAME = CD.NAME 
							WHERE BRANCHID = @BRANCHID)
				BEGIN
					INSERT INTO DEDUCTEE(BRANCHID, SALUTATION, NAME, PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, 
										ADDRESS4,ADDRESS5, STATEID, PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, 
										ISEXCLUDED, PANSTATUS,ENTRYBRANCHID, ENTRYDATE, CODE, EMPTYPE, REFDEDUCTEEID)
					SELECT @BRANCHID, SALUTATION, NAME, PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4,
						ADDRESS5, STATEID, PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, ISEXCLUDED, PANSTATUS,
						ENTRYBRANCHID, ENTRYDATE, CODE, EMPTYPE, REFDEDUCTEEID 
					FROM DEDUCTEE WITH(NOLOCK)
					WHERE BRANCHID = @RTBRANCHID AND DEDUCTEEID = @DEDUCTEEID
					IF(@HOBRANCHID <> 0)
						BEGIN
							SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0) 
							FROM DEDUCTEE WITH(NOLOCK) 
								INNER JOIN EMPLOYEE WITH(NOLOCK) 
									ON DEDUCTEE.DEDUCTEEID = EMPLOYEE.DEDUCTEEID 
							WHERE BRANCHID = @BRANCHID
						END
					ELSE 
						BEGIN
							SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0) 
							FROM DEDUCTEE WITH(NOLOCK) 
								INNER JOIN NONEMPLOYEE WITH(NOLOCK) 
									ON DEDUCTEE.DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID 
							WHERE BRANCHID = @BRANCHID
						END
					SELECT @NEWDEDUCTEEID = DEDUCTEEID 
					FROM DEDUCTEE DD WITH(NOLOCK)
						INNER JOIN 	@CURRENTDEDUCTEE CD 
							ON DD.REFERENCENO = CD.REFERENCENO 
								AND DD.PAN = CD.PAN 
								AND DD.NAME = CD.NAME 
					WHERE BRANCHID = @BRANCHID
					IF(@HOBRANCHID <> 0)
						BEGIN
							INSERT INTO EMPLOYEE(DEDUCTEEID,SERIALNO, EMPLOYMENTFROM, EMPLOYMENTTO, GENDER, ISSENIORCITIZEN, WORKINGBRANCHID, ACCOUNTNO, PPONUMBER, DATEOFBIRTH, ISTRANSFERED)
							SELECT @NEWDEDUCTEEID,@SERIALNO+1, EMPLOYMENTFROM, EMPLOYMENTTO, GENDER, ISSENIORCITIZEN, WORKINGBRANCHID, ACCOUNTNO, PPONUMBER, DATEOFBIRTH, ISTRANSFERED
							FROM EMPLOYEE WITH(NOLOCK)
							WHERE DEDUCTEEID = @DEDUCTEEID
						END
					ELSE
						BEGIN
							INSERT INTO NONEMPLOYEE(DEDUCTEEID,DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,SERIALNO,ISTRANSPORTER)
							SELECT @NEWDEDUCTEEID, DEDUCTEECODE, ISAPPLICABLE26, ISAPPLICABLE27, @SERIALNO+1, ISTRANSPORTER 
							FROM NONEMPLOYEE WITH(NOLOCK)
							WHERE DEDUCTEEID = @DEDUCTEEID
						END 	
				END
			SELECT BRANCHID ,DEDUCTEEID
			INTO #TEMP
			FROM DEDUCTEE DD WITH(NOLOCK)
			INNER JOIN 	@CURRENTDEDUCTEE CD
				ON DD.REFERENCENO = CD.REFERENCENO 
					AND DD.PAN = CD.PAN 
					AND DD.NAME = CD.NAME 
			WHERE BRANCHID = @BRANCHID
			IF(@DEDUCTIONID <> -1)
			BEGIN
				UPDATE DDL  SET DEDUCTEEID = T.DEDUCTEEID
					FROM DEDUCTIONDETAIL DDL
					INNER JOIN #TEMP T
						ON T.BRANCHID = DDL.BRANCHID
				WHERE DEDUCTIONID = @DEDUCTIONID
			END	
			SELECT CAST(BRANCHID AS VARCHAR)  +'-'+  CAST(DEDUCTEEID AS VARCHAR) AS DEDUCTEEID 
			FROM #TEMP DD WITH(NOLOCK)
		END
	ELSE
		BEGIN
			SELECT CAST(@BRANCHID AS VARCHAR)  +'-'+  CAST(@DEDUCTEEID AS VARCHAR) AS DEDUCTEEID 
		END
	IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
			DROP TABLE #TEMP
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_CREATEEXCLUDEDEDUCTIONS')
DROP PROCEDURE USP_TDS_CREATEEXCLUDEDEDUCTIONS
GO
CREATE PROCEDURE USP_TDS_CREATEEXCLUDEDEDUCTIONS
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,  
@DEDUCTIONSERIALNO NVARCHAR(MAX) = NULL  
AS  
  BEGIN  
	 --DECLARE @DEDUCTION TABLE(SERIALNO INT);
	 CREATE TABLE #DEDUCTION (SERIALNO INT)   
	 --DECLARE @DEDUCTEE TABLE(SERIALNO INT, DEDUCTEEID INT);
	 CREATE TABLE #DEDUCTEE (SERIALNO INT, DEDUCTEEID INT) 
	 CREATE TABLE #DEDUCTEE2 (SERIALNO INT, DEDUCTEEID INT) 
	SELECT * 
	INTO #DEDDETAIL
	FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
	SELECT *
	INTO #DEDCHALLAN
	FROM DEDCHALINK WITH(NOLOCK)
	WHERE BRANCHID = @BRANCHID 
	SELECT * 
	INTO #CHALLAN
	FROM CHALLANDETAIL WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
	  IF(@DEDUCTIONSERIALNO IS NOT NULL)  
		   BEGIN  
			  INSERT INTO #DEDUCTION  
			  SELECT * FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTIONSERIALNO,',')  
		   END   
	  ELSE  
		   BEGIN  
			  INSERT INTO #DEDUCTION  
			  SELECT SERIALNO 
			  FROM #DEDDETAIL WITH(NOLOCK) 
			  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ERETURNID = 0  
		   END   
	 IF(@FORMID = 1)  
		   BEGIN  
			  INSERT INTO #DEDUCTEE  
			  SELECT 0 AS SERIALNO , DEDUCTEEID 
			  FROM CORREMPLOYEE WITH(NOLOCK) 
			  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  
		   END  
	 ELSE  
		   BEGIN  
			  INSERT INTO #DEDUCTEE  
			  SELECT 0 AS SERIALNO, DEDUCTEEID 
			  FROM CORRNONEMPLOYEE WITH(NOLOCK)  
			  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  
		   END  
	CREATE CLUSTERED INDEX ITX_DEDUCTEE ON #DEDUCTEE(DEDUCTEEID)
	SELECT DEDUCTEEID, DD.BRANCHID, DD.SERIALNO, DD.FORMID, DD.QUARTER
	INTO #DEDID
	FROM #DEDDETAIL DD WITH(NOLOCK)   
			   LEFT JOIN #DEDCHALLAN DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
			   LEFT JOIN #CHALLAN CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID   
			   INNER JOIN #DEDUCTION DE ON DD.SERIALNO = DE.SERIALNO  
    WHERE  DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER
    GROUP BY DEDUCTEEID, DD.BRANCHID, DD.SERIALNO, DD.FORMID, DD.QUARTER
	  SELECT * INTO #DEDUCTEE1 FROM   
		  (  
		  SELECT D.DEDUCTEEID  FROM DEDUCTEE D  
			  INNER JOIN #DEDID DD ON D.DEDUCTEEID = DD.DEDUCTEEID  
		  WHERE D.BRANCHID = @BRANCHID   
			EXCEPT
			SELECT DEDUCTEEID FROM #DEDUCTEE  
		  )DE
	 SELECT MAX(DEDUCTIONERETURNID)DEDUCTIONERETURNID,CHALLANERETURNID,BRANCHID,FORMID,QUARTER 
	 INTO #MAXERETURNIDS 
	 FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
	 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
	 GROUP BY CHALLANERETURNID,BRANCHID,FORMID,QUARTER  
	 IF(@FORMID = 1)  
		   BEGIN  
			  INSERT INTO CORREMPLOYEE (BRANCHID, FORMID, QUARTER, DEDUCTEESERIALNO, D.DEDUCTEEID, SALUTATION, NAME, 
						ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, PINCODE, GENDER, ISSENIORCITIZEN, 
						DESIGNATION, EMPLOYMENTFROM, EMPLOYMENTTO, PHONENO, EMAILADDRESS, PAN, PANREFERENCE, LASTPAN, 
						LASTPANREFERENCE, CORRECTIONSTATUS, UPDATEINDICATOR)  
			  SELECT BRANCHID, @FORMID, @QUARTER, E.SERIALNO AS DEDUCTEESERIALNO, D.DEDUCTEEID, SALUTATION, NAME, 
					ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, PINCODE, GENDER, ISSENIORCITIZEN, 
					DESIGNATION, EMPLOYMENTFROM, EMPLOYMENTTO, PHONENO, EMAILADDRESS, PAN, PANREFERENCE,PAN AS LASTPAN,   
					PANREFERENCE AS LASTPANREFERENCE, 1 AS CORRECTIONSTATUS, 0 AS UPDATEINDICATOR  
			  FROM DEDUCTEE D WITH(NOLOCK)
					INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
					INNER JOIN #DEDUCTEE1 DE ON D.DEDUCTEEID = DE.DEDUCTEEID    
		   END  
	 ELSE  
		   BEGIN    
			   IF EXISTS (SELECT BRANCHID
			      FROM DEDUCTEE D WITH(NOLOCK)  
					  INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
					  INNER JOIN #DEDUCTEE1 DE ON D.DEDUCTEEID = DE.DEDUCTEEID)
			BEGIN
			  INSERT INTO CORRNONEMPLOYEE (BRANCHID, FORMID, QUARTER, DEDUCTEESERIALNO, DEDUCTEEID, SALUTATION, NAME, 
						ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, PINCODE, ISAPPLICABLE26, ISAPPLICABLE27, 
						PHONENO, EMAILADDRESS, PAN, PANREFERENCE, LASTPAN, LASTPANREFERENCE, CODE, ISTRANSPORTER,   
						CORRECTIONSTATUS, UPDATEINDICATOR)  
			  SELECT BRANCHID, @FORMID, @QUARTER, E.SERIALNO AS DEDUCTEESERIALNO, D.DEDUCTEEID, SALUTATION, NAME, 
					ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5,STATEID, PINCODE, ISAPPLICABLE26, ISAPPLICABLE27, 
					PHONENO, EMAILADDRESS, PAN, PANREFERENCE, PAN AS LASTPAN, PANREFERENCE AS LASTPANREFERENCE, 
					E.DEDUCTEECODE, ISTRANSPORTER, 1 AS CORRECTIONSTATUS, 0 AS UPDATEINDICATOR  
			  FROM DEDUCTEE D WITH(NOLOCK)  
					INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
					INNER JOIN #DEDUCTEE1 DE ON D.DEDUCTEEID = DE.DEDUCTEEID    
		     END
		   END   
	   IF(@FORMID = 1)  
			 BEGIN  
				   INSERT INTO #DEDUCTEE2  
				   SELECT DISTINCT DEDUCTEESERIALNO AS SERIALNO, DEDUCTEEID 
				   FROM CORREMPLOYEE WITH(NOLOCK) 
				   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER   
			 END  
	   ELSE  
			 BEGIN  
				   INSERT INTO #DEDUCTEE2  
				   SELECT DISTINCT DEDUCTEESERIALNO AS SERIALNO, DEDUCTEEID 
				   FROM CORRNONEMPLOYEE WITH(NOLOCK) 
				   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER    
			 END
	  SELECT SERIALNO INTO #TEMP FROM
		  (
			SELECT SERIALNO 
			FROM #DEDDETAIL DD WITH(NOLOCK)  
			WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER  
			EXCEPT  
			SELECT DEDUCTIONSERIALNO 
			FROM CORRDEDUCTIONDETAIL DD WITH(NOLOCK)  
			WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER
		  )C   
	   SELECT DD.BRANCHID, DD.FORMID,DD.QUARTER, DD.SERIALNO AS DEDUCTIONSERIALNO, DD.DEDUCTIONID, D.SERIALNO AS DEDUCTEESERIALNO,  
		   ISNULL(CD.ERETURNID,'') AS CHALLANERETURNID,0 AS DEDUCTIONERETURNID , DD.SECTIONID, MODE,   --, ME.DEDUCTIONERETURNID
						  PAYMENTMADE, PAYMENTDATE, INCOMETAXRATE, DD.INCOMETAX, DD.INCOMETAX AS LASTINCOMETAX, SURCHARGERATE, DD.SURCHARGE,   
						  DD.SURCHARGE LASTSURCHARGE, EDUCATIONCESSRATE,DD.EDUCATIONCESS, DD.EDUCATIONCESS LASTEDUCATIONCESS, ISTAXINFOEDITABLE,   
						  TAXRATE, TOTALDEDUCTED, TOTALDEDUCTED AS LASTTOTALDEDUCTED, DEDUCTEDDATE, ISBOOKENTRY, NONDEDREASON, ISGROSSINGUP, UTN,   
						  ISPANVALIDBYITD, 5 AS CORRECTIONSTATUS, NULL AS UPDATEINDICATOR, NULL AS MATCHEDID, DD.CERTNO, DD.TDSRATEASPER,   
						 DD. ACKNO, REMITTANCEID, COUNTRYID 
	   INTO #TEMP1  
	   FROM #DEDDETAIL DD WITH(NOLOCK)
			  LEFT JOIN #DEDCHALLAN DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
			  LEFT JOIN #CHALLAN CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID   
			  INNER JOIN #DEDUCTEE2 D ON DD.DEDUCTEEID = D.DEDUCTEEID  
			  INNER JOIN #DEDUCTION DE ON DD.SERIALNO = DE.SERIALNO
			  --INNER JOIN #MAXERETURNIDS ME ON ME.BRANCHID = DD.BRANCHID AND ME.FORMID = DD.FORMID AND ME.QUARTER = DD.QUARTER AND ME.CHALLANERETURNID = CD.ERETURNID  
			  INNER JOIN #TEMP T ON DD.SERIALNO = T.SERIALNO          
	   WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER
	   IF EXISTS(SELECT BRANCHID FROM #TEMP1)
		BEGIN
			 INSERT INTO CORRDEDUCTIONDETAIL (BRANCHID, FORMID, QUARTER, DEDUCTIONSERIALNO, DEDUCTIONID, DEDUCTEESERIALNO, 
						CHALLANERETURNID, DEDUCTIONERETURNID, SECTIONID, MODE, PAYMENTMADE, PAYMENTDATE, INCOMETAXRATE, 
						INCOMETAX, LASTINCOMETAX, SURCHARGERATE, SURCHARGE, LASTSURCHARGE, EDUCATIONCESSRATE, EDUCATIONCESS, 
						LASTEDUCATIONCESS, ISTAXINFOEDITABLE, TAXRATE, TOTALDEDUCTED, LASTTOTALDEDUCTED, DEDUCTEDDATE, ISBOOKENTRY,   
						NONDEDREASON, ISGROSSINGUP, UTN, ISPANVALIDBYITD, CORRECTIONSTATUS, UPDATEINDICATOR, MATCHEDID, CERTNO, 
						TDSRATEASPER, ACKNO, REMITTANCEID, COUNTRYID)  
			 SELECT BRANCHID, FORMID,QUARTER, DEDUCTIONSERIALNO, DEDUCTIONID, DEDUCTEESERIALNO,  
				  CHALLANERETURNID,(DEDUCTIONERETURNID + ROW_NUMBER() OVER (PARTITION BY CHALLANERETURNID ORDER BY DEDUCTIONSERIALNO )) AS DEDUCTIONERETURNID, 
				  SECTIONID, MODE,PAYMENTMADE, PAYMENTDATE, INCOMETAXRATE, INCOMETAX, LASTINCOMETAX, SURCHARGERATE, SURCHARGE,   
				  LASTSURCHARGE, EDUCATIONCESSRATE,EDUCATIONCESS,LASTEDUCATIONCESS, ISTAXINFOEDITABLE, TAXRATE, TOTALDEDUCTED, 
				  LASTTOTALDEDUCTED, DEDUCTEDDATE, ISBOOKENTRY, NONDEDREASON, ISGROSSINGUP, UTN, ISPANVALIDBYITD, CORRECTIONSTATUS,
				  UPDATEINDICATOR,MATCHEDID, CERTNO, TDSRATEASPER, ACKNO, REMITTANCEID, COUNTRYID 
			 FROM #TEMP1
	    END
			  SELECT * INTO #EXIST FROM
			  (
				  SELECT CHALLANERETURNID 
				  FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
				  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 5
				  EXCEPT
				  SELECT CHALLANERETURNID 
				  FROM CORRCHALLANDETAIL WITH(NOLOCK) 
				  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS <> 1
	  		  )E
			  INSERT INTO CORRCHALLANDETAIL(BRANCHID, FORMID, QUARTER, CHALLANSERIALNO, CHALLANID, SECTIONID, INCOMETAX, SURCHARGE, 
						EDUCATIONCESS, INTEREST, PENALTY, OTHERS, CHALLANTOTAL, LASTCHALLANTOTAL, CHALLANERETURNID, LINKDEDCOUNT, 
						ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT, BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, 
						BANKID, LASTBANKID, CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, ISCOMPANY, CHEQUENO, CHEQUEDATE, 
						CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, CORRECTIONSTATUS, EXPECTEDDID, CHALLANEDITMODE,PENDINGAMOUNT, 
						FEE, MINORHEAD, UPDATEINDICATOR)		
			  SELECT BRANCHID, FORMID, QUARTER, CHALLANSERIALNO, CHALLANID, SECTIONID, INCOMETAX, SURCHARGE, 
					 EDUCATIONCESS, INTEREST, PENALTY, OTHERS, CHALLANTOTAL, LASTCHALLANTOTAL, CCD.CHALLANERETURNID, LINKDEDCOUNT, 
					 ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT, BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, 
					 BANKID, LASTBANKID, CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, ISCOMPANY, CHEQUENO, CHEQUEDATE, 
					 CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, 2 AS CORRECTIONSTATUS, EXPECTEDDID, CHALLANEDITMODE, PENDINGAMOUNT, 
					 FEE, MINORHEAD, UPDATEINDICATOR 
			  FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)
					INNER JOIN #EXIST E ON E.CHALLANERETURNID = CCD.CHALLANERETURNID
			  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 1    
	       DROP INDEX ITX_DEDUCTEE ON #DEDUCTEE
	        IF OBJECT_ID('TEMPDB..#DEDDETAIL') IS NOT NULL
				DROP TABLE #DEDDETAIL
			IF OBJECT_ID('TEMPDB..#DEDCHALLAN') IS NOT NULL
				DROP TABLE #DEDCHALLAN
			IF OBJECT_ID('TEMPDB..#CHALLAN') IS NOT NULL
				DROP TABLE #CHALLAN	
			IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
				DROP TABLE #DEDUCTION
			IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
				DROP TABLE #DEDUCTEE
			IF OBJECT_ID('TEMPDB..#DEDUCTEE1') IS NOT NULL
				DROP TABLE #DEDUCTEE1
			IF OBJECT_ID('TEMPDB..#DEDUCTEE2') IS NOT NULL
				DROP TABLE #DEDUCTEE2  
			IF OBJECT_ID('TEMPDB..#EXIST') IS NOT NULL
				DROP TABLE #EXIST 
			IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
				DROP TABLE #TEMP     
			IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL 
				DROP TABLE #TEMP1   
			IF OBJECT_ID('TEMPDB..#DEDID') IS NOT NULL 
				DROP TABLE #DEDID
			IF OBJECT_ID('TEMPDB..#MAXERETURNIDS') IS NOT NULL 
				DROP TABLE #MAXERETURNIDS        
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DailyImportReport')
DROP PROCEDURE USP_TDS_DailyImportReport
GO
CREATE PROCEDURE [USP_TDS_DailyImportReport]
	@Date DATETIME
AS
	BEGIN
		SELECT DD.SERIALNO, CB.BRANCHCODE, CB.BRANCHNAME, 
			(SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = CB.PARENTBRANCHID) [REGION NAME],
			TS.SECTIONNAME, D.NAME, D.PAN, DD.PAYMENTDATE, DD.PAYMENTMADE, DD.DEDUCTEDDATE, DD.TOTALDEDUCTED
		INTO #NONEMP
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.BRANCHID = DD.BRANCHID AND D.DEDUCTEEID = DD.DEDUCTEEID 
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID 
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID 
		WHERE DD.ENTRYTYPE = 4 AND DD.PAYMENTDATE = CONVERT(DATETIME, @Date, 103)
		SELECT DD.SERIALNO, CB.BRANCHCODE, CB.BRANCHNAME, 
			(SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = CB.PARENTBRANCHID) [REGION NAME],
			TS.SECTIONNAME, D.NAME, D.PAN, DD.PAYMENTDATE, DD.PAYMENTMADE, DD.DEDUCTEDDATE, DD.TOTALDEDUCTED
		INTO #EMP
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.BRANCHID = DD.BRANCHID AND D.DEDUCTEEID = DD.DEDUCTEEID 
			INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID 
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID 
		WHERE DD.ENTRYTYPE = 4 AND DD.PAYMENTDATE = CONVERT(DATETIME, @Date, 103)
		SELECT * FROM #NONEMP
		UNION
		SELECT * FROM #EMP
		ORDER BY [REGION NAME], BRANCHCODE, SECTIONNAME 
		DROP TABLE #NONEMP
		DROP TABLE #EMP
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DATEWISETDSDEDUCTED')
DROP PROCEDURE USP_TDS_DATEWISETDSDEDUCTED
GO
CREATE PROCEDURE [USP_TDS_DATEWISETDSDEDUCTED]
@DEDUCTEDDATE SMALLDATETIME,          
@BRANCHID INT,    
@VALUE INT    
AS        
 BEGIN      
 IF(@VALUE = 0)    
  BEGIN    
   IF(@BRANCHID <> 1)      
      BEGIN     
       SELECT @BRANCHID = CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID    
       SELECT CB.BRANCHNAME AS ZONE,R.BRANCHNAME,R.BRANCHCODE,SUM(DD.TOTALDEDUCTED)TAXDEDUCTED     
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID                  
    INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID                    
    INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID                    
    INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID                    
    INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID                    
    INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID        
    INNER JOIN               
    (        
     SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID FROM REPORTPAYMENT RP WITH(NOLOCK)               
     INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID          
     WHERE RP.PARENTBRANCHID = @BRANCHID        
    )R              
    ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID              
    WHERE DD.FORMID IN (2,3) AND DD.SECTIONID NOT IN (5,17) AND ISNULL(CB.NOCHALLANPAY,0) = 0 AND DD.DEDUCTEDDATE = @DEDUCTEDDATE          
    GROUP BY CB.BRANCHNAME,R.BRANCHNAME,R.BRANCHCODE          
      END      
   ELSE      
      BEGIN     
         SELECT CB.BRANCHNAME AS ZONE,R.BRANCHNAME,R.BRANCHCODE,SUM(DD.TOTALDEDUCTED)TAXDEDUCTED     
    FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID                  
   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID                    
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID                    
   INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID                    
   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID                    
   INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID        
   INNER JOIN               
   (        
   SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID FROM REPORTPAYMENT RP WITH(NOLOCK)              
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID          
   )R              
   ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID              
   WHERE DD.FORMID IN (2,3) AND DD.SECTIONID NOT IN (5,17) AND ISNULL(CB.NOCHALLANPAY,0) = 0 AND DD.DEDUCTEDDATE = @DEDUCTEDDATE          
   GROUP BY CB.BRANCHNAME,R.BRANCHNAME,R.BRANCHCODE          
     END      
  END    
 ELSE    
     BEGIN           
  SELECT CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')' AS ZONE, SUM(DD.TOTALDEDUCTED)TAXDEDUCTED     
   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)                 
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID                
   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID                  
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID                  
   INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID                  
   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID                  
   INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID       
   WHERE DD.FORMID IN (2,3) AND DD.SECTIONID NOT IN (5,17) AND DD.DEDUCTEDDATE = @DEDUCTEDDATE        
   GROUP BY CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')'      
     END  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DATEWISETDSDEDUCTEDFORBRANCH')
DROP PROCEDURE USP_TDS_DATEWISETDSDEDUCTEDFORBRANCH
GO
CREATE PROCEDURE [USP_TDS_DATEWISETDSDEDUCTEDFORBRANCH]      
@DEDUCTEDDATE SMALLDATETIME,      
@BRANCHID INT      
AS    
  BEGIN  
  IF(@BRANCHID <> 1)  
   BEGIN  
      SELECT @BRANCHID = CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID
      SELECT CB.BRANCHNAME AS ZONE,R.BRANCHNAME,R.BRANCHCODE,SUM(DD.TOTALDEDUCTED)TAXDEDUCTED 
      FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
     INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID              
     INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID                
     INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID                
     INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID                
     INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID                
     INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID    
     INNER JOIN           
     (    
     SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID FROM REPORTPAYMENT RP WITH(NOLOCK)          
     INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID      
     WHERE RP.PARENTBRANCHID = @BRANCHID    
     )R          
     ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID          
     WHERE DD.FORMID IN (2,3) AND DD.SECTIONID NOT IN (5,17) AND ISNULL(CB.NOCHALLANPAY,0) = 0 AND DD.DEDUCTEDDATE = @DEDUCTEDDATE      
     GROUP BY CB.BRANCHNAME,R.BRANCHNAME,R.BRANCHCODE      
     END  
     ELSE  
      BEGIN  
	  SELECT CB.BRANCHNAME AS ZONE,R.BRANCHNAME,R.BRANCHCODE,SUM(DD.TOTALDEDUCTED)TAXDEDUCTED 
      FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
     INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID              
     INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID                
     INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID                
     INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID                
     INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID                
     INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID    
     INNER JOIN           
     (    
     SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID FROM REPORTPAYMENT RP WITH(NOLOCK)          
     INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID      
     --WHERE RP.PARENTBRANCHID = @BRANCHID    
     )R          
     ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID          
     WHERE DD.FORMID IN (2,3) AND DD.SECTIONID NOT IN (5,17) AND ISNULL(CB.NOCHALLANPAY,0) = 0 AND DD.DEDUCTEDDATE = @DEDUCTEDDATE      
     GROUP BY CB.BRANCHNAME,R.BRANCHNAME,R.BRANCHCODE      
      END  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DATEWISETDSDEDUCTEDFORZONE')
DROP PROCEDURE USP_TDS_DATEWISETDSDEDUCTEDFORZONE
GO
CREATE PROCEDURE [USP_TDS_DATEWISETDSDEDUCTEDFORZONE]    
	@DEDUCTEDDATE SMALLDATETIME    
AS    
	BEGIN   
		SELECT CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')' AS ZONE, SUM(DD.TOTALDEDUCTED)TAXDEDUCTED    
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)              
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID            
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID              
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID              
		INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID              
		INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID              
		INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID   
		WHERE DD.FORMID IN (2, 3) AND DD.SECTIONID NOT IN (5, 17) AND DD.DEDUCTEDDATE = @DEDUCTEDDATE    
		GROUP BY CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')'  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DEDCHALLANLINK_F005')
DROP PROCEDURE USP_TDS_DEDCHALLANLINK_F005
GO
CREATE PROCEDURE [USP_TDS_DEDCHALLANLINK_F005]
@BRANCHID INT,
@DEDUCTIONID INT,
@CHALLANID INT
AS
BEGIN
	DECLARE @DEDCHALINKID INT;
	INSERT INTO DEDCHALINK (DEDUCTIONID, CHALLANID, BRANCHID) VALUES (@DEDUCTIONID, @CHALLANID, @BRANCHID)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DEDIDENTIFICATION194A')
DROP PROCEDURE USP_TDS_DEDIDENTIFICATION194A
GO
CREATE PROCEDURE USP_TDS_DEDIDENTIFICATION194A
 @STARTDATE DATETIME,    
 @ENDDATE DATETIME    
AS    
BEGIN    
  SELECT CB.BRANCHCODE [DP Code], CB.BRANCHNAME [Branch Name],     
    (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = CB.PARENTBRANCHID) [Parent Office],    
    D.TAN, D.DEDCOUNT [No. of Entries Punched], D.DEDSUM [Total of Entries Punched]    
  FROM    
  (    
  SELECT DD.BRANCHID,  
      DTR.TAN, COUNT(DD.DEDUCTIONID) [DEDCOUNT], SUM(DD.TOTALDEDUCTED) [DEDSUM]  
FROM   
      DEDUCTIONDETAIL DD WITH(NOLOCK)  
      INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND DD.QUARTER = BD.QUARTER  
      INNER JOIN DEDUCTOR DTR WITH(NOLOCK) ON BD.DEDUCTORID = DTR.DEDUCTORID   
WHERE  
      DD.FORMID = 2 AND DD.SECTIONID <> 5  
      AND DD.PAYMENTDATE BETWEEN @STARTDATE AND @ENDDATE  
GROUP BY   
      DD.BRANCHID, DTR.TAN    
  ) D    
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)    
     ON D.BRANCHID = CB.BRANCHID    
  ORDER BY [PARENT OFFICE], [DP CODE]    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeductedAmtOnGivenDate')
DROP PROCEDURE USP_TDS_DeductedAmtOnGivenDate
GO
CREATE PROCEDURE [dbo].[USP_TDS_DeductedAmtOnGivenDate]
	@DEDUCTEDDATE DATETIME=NULL
AS
BEGIN
	SELECT CB.BRANCHCODE,SUM(DD.TOTALDEDUCTED) TOTALDEDUCTED FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
	ON CB.BRANCHID=DD.BRANCHID
	WHERE DD.DEDUCTEDDATE=@DEDUCTEDDATE
	GROUP BY CB.BRANCHCODE
	ORDER BY CB.BRANCHCODE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DEDUCTIONBLOCKCHAPAYMENT')
DROP PROCEDURE USP_TDS_DEDUCTIONBLOCKCHAPAYMENT
GO
CREATE PROCEDURE USP_TDS_DEDUCTIONBLOCKCHAPAYMENT                            
@PAYMENTDATEMONTH INT                
AS    
 BEGIN                                              
	SELECT COUNT(DD.DEDUCTIONID) NOOFITEMS
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
    INNER JOIN DEDCHALINK L WITH(NOLOCK)
	ON DD.DEDUCTIONID = L.DEDUCTIONID
    INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)
	ON L.CHALLANID = CD.CHALLANID 
	WHERE MONTH(DD.PAYMENTDATE) = @PAYMENTDATEMONTH AND CD.ISAUTOGENERATED = 1                    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DEDUCTIONBULKDELETE')
DROP PROCEDURE USP_TDS_DEDUCTIONBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_DEDUCTIONBULKDELETE]
    @BRANCHID INT,              
    @FORMID INT,              
    @QUARTER INT,              
    @DEDUCTIONID INT = NULL,            
    @ISAUDITTRIAL BIT = 0,            
    @AUDITDATE SMALLDATETIME = NULL,            
    @ISCHECKER BIT = 0,            
    @USERID INT = NULL,  
    @SECTION INT = -1  
AS  
    BEGIN  
	   DECLARE @DED TABLE(ID INT IDENTITY(1,1),DEDUCTIONID INT, PARTPAYMENTID INT, DEDUCTEEID INT);  
	   DECLARE @SQLQUERY NVARCHAR(MAX);  
	   SELECT CHALLANID 
	   INTO #CHAAUTO
	   FROM CHALLANDETAIL WITH(NOLOCK)
	   WHERE ISAUTOGENERATED = 1 AND BRANCHID = @BRANCHID
	   IF(@ISAUDITTRIAL = 1 AND @ISCHECKER = 0)     
	   BEGIN  
		  SET @SQLQUERY = 'SELECT DEDUCTIONID, PARTPAYMENTID, DEDUCTEEID              
			 FROM DEDUCTIONDETAIL WITH(NOLOCK) 
			 WHERE BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + 
			 ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + 
			 ' AND QUARTER = '+ CAST(@QUARTER AS VARCHAR) + 
			 ' AND DEDUCTIONID NOT IN 
				(SELECT DA.RECORDID FROM DEDUCTIONDETAILAUDIT DA WITH(NOLOCK)             
				    INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID = DA.RECORDID            
				    WHERE DA.TRANSSTATUS = 2 AND DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + 
					   ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + 
				')'
	   END   
	   ELSE IF(@ISAUDITTRIAL = 1 AND @ISCHECKER = 1)     
	   BEGIN  
		  SET @SQLQUERY = 'SELECT DD.DEDUCTIONID, DD.PARTPAYMENTID, DD.DEDUCTEEID             
			 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)      
			 INNER JOIN DEDUCTIONDETAILAUDIT DA WITH(NOLOCK) ON DD.DEDUCTIONID = DA.RECORDID      
			 WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + 
			 ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + 
			 ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + 
			 ' AND DA.TRANSSTATUS = 4'  
	   END    
	   ELSE  
	   BEGIN   
		  SET @SQLQUERY = 'SELECT DEDUCTIONID, PARTPAYMENTID, DD.DEDUCTEEID             
			 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)      
			 LEFT JOIN DEDUCTIONDETAILAUDIT DA WITH(NOLOCK) ON DD.DEDUCTIONID = DA.RECORDID      
			 WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + 
			 ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + 
			 ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR)     
	   END    
	   SET @SQLQUERY = @SQLQUERY +
		  ' AND DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE CHALLANID IN (SELECT CHALLANID FROM #CHAAUTO)) '
	   IF(@SECTION <> -1)  
	   BEGIN  
		  SET @SQLQUERY = @SQLQUERY + ' AND SECTIONID = '+CAST(@SECTION AS VARCHAR)   
	   END  
	   IF(@DEDUCTIONID IS NOT NULL)  
	   BEGIN  
		  SET @SQLQUERY = @SQLQUERY + ' AND DEDUCTIONID = ' + CAST(@DEDUCTIONID AS VARCHAR)   
	   END  
	   INSERT INTO @DED(DEDUCTIONID, PARTPAYMENTID, DEDUCTEEID)            
	   EXEC SP_EXECUTESQL @SQLQUERY   
	   SELECT * FROM @DED 
	   IF(@ISAUDITTRIAL = 1)
	   BEGIN            
		  EXEC USP_TDS_SAVEDEDUCTIONAUDITTRAIL @USERID, 0, NULL, 0, @AUDITDATE, '', @ISCHECKER, @BRANCHID, @FORMID, @QUARTER
	   END
	   /* DELETE FROM DEDCHALINK BASED ON BRANCHID,FORMID AND QUARTER */              
	   DELETE FROM DEDCHALINK   
	   FROM DEDCHALINK AS DCL       
	   INNER JOIN @DED D ON D.DEDUCTIONID = DCL.DEDUCTIONID
	   /* DELETE FROM PARTPAYMENTDETAILS BASED ON BRANCHID,FORMID AND QUARTER */              
	   DELETE FROM PARTPAYMENTDETAILS FROM PARTPAYMENTDETAILS PPD  
	   INNER JOIN @DED D ON D.PARTPAYMENTID = PPD.PARTPAYMENTID  
	   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;            
	   /*UPDATING THE SALARY DETAIL BASED ON BRANCHID,FORMID AND QUARTER */              
	   IF @FORMID = 1              
	   BEGIN       
		  /* DELETE FROM FORM16 BASED ON BRANCHID,FORMID AND QUARTER */              
		  DELETE FROM FORM16 FROM FORM16 AS F16             
		  INNER JOIN @DED D ON F16.DEDUCTEEID = D.DEDUCTEEID        
		  EXECUTE USP_TDS_UPDATESALARYDETAIL_DEDUCTIONBULKDELETE @BRANCHID, @FORMID, -1;              
	   END            
	   ELSE            
	   BEGIN       
		  /* DELETE FROM FORM16A BASED ON BRANCHID,FORMID AND QUARTER */           
		  DELETE FROM FORM16A   
		  FROM FORM16A F16  
		  INNER JOIN @DED D ON D.DEDUCTIONID=F16.DEDUCTIONID   
	   END            
	   /* DELETE FROM DEDUCTIONDETAIL BASED ON BRANCHID,FORMID AND QUARTER */              
	   DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL DD  
	   INNER JOIN @DED D ON D.DEDUCTIONID=DD.DEDUCTIONID  
	   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;    
	   DROP TABLE #CHAAUTO
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DEDUCTIONSWITHDTAAFLAG')
DROP PROCEDURE USP_TDS_DEDUCTIONSWITHDTAAFLAG
GO
CREATE PROCEDURE [USP_TDS_DEDUCTIONSWITHDTAAFLAG]    
	@QUARTER INT    
AS    
	BEGIN    
		SELECT D.REFERENCENO, D.NAME, D.PAN, DD.INCOMETAX, DD.TOTALDEDUCTED, DD.PAYMENTMADE, 
			DD.PAYMENTDATE PAYMENT_DATE      
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)    
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID    
		WHERE DD.SECTIONID IN (17)     
			AND DD.TDSRATEASPER = 'B'    
			AND DD.QUARTER = @QUARTER    
		ORDER BY PAYMENTDATE    
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DEDUCTORINFORMATION')
DROP PROCEDURE USP_TDS_DEDUCTORINFORMATION
GO
CREATE PROCEDURE [USP_TDS_DEDUCTORINFORMATION]
	@SEARCHTYPE VARCHAR(MAX),
	@SEARCHTEXT VARCHAR(MAX)	
AS
	BEGIN
		DECLARE @SQLQUERY VARCHAR(MAX)
		SET @SQLQUERY = 'SELECT *
						 FROM DEDUCTOR D WITH(NOLOCK) 
						 INNER JOIN RESPONSIBLEPERSON R WITH(NOLOCK) ON D.DEDUCTORID = R.DEDUCTORID
						 INNER JOIN BRANCHDEDUCTORS B WITH(NOLOCK) ON D.DEDUCTORID = B.DEDUCTORID AND R.DEDUCTORID = B.DEDUCTORID
						 INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID = B.BRANCHID'
		IF @SEARCHTYPE IS NOT NULL AND @SEARCHTYPE <> ''
			BEGIN 
				SET @SQLQUERY = @SQLQUERY + ' WHERE ' + @SEARCHTYPE + ' = ''' + @SEARCHTEXT + ''''  
			END
		EXEC (@SQLQUERY)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_Delete194ADeductions')
DROP PROCEDURE USP_TDS_Delete194ADeductions
GO
CREATE PROCEDURE [USP_TDS_Delete194ADeductions]
@MONTH INT,  
@BRANCHID INT  
AS  
BEGIN  
 DECLARE @ERROR INT; /*Returns 1 if success else -1*/  
 BEGIN TRANSACTION   
 BEGIN TRY  
  DELETE FROM FORM16A WHERE DEDUCTIONID IN(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE SECTIONID=5  AND MONTH(PAYMENTDATE)=@MONTH)  
  DELETE FROM DEDCHALINK WHERE DEDUCTIONID IN(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE SECTIONID=5 AND MONTH(PAYMENTDATE)=@MONTH)  
  DELETE FROM PARTPAYMENTDETAILS WHERE PARTPAYMENTID IN   
   (SELECT DISTINCT PARTPAYMENTID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE SECTIONID=5 AND MONTH(PAYMENTDATE)=@MONTH )  
    AND  FORMID = 2   
  DELETE FROM DEDUCTIONDETAIL WHERE SECTIONID=5  AND MONTH(PAYMENTDATE)=@MONTH   
  SET @ERROR=1  
  COMMIT  
 END TRY   
 BEGIN CATCH  
  SET @ERROR=-1  
  ROLLBACK  
 END CATCH  
 SELECT @ERROR   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEACKNODETAILS')
DROP PROCEDURE USP_TDS_DELETEACKNODETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETEACKNODETAILS]
	@ACKID INT
AS
	BEGIN
		DELETE FROM ACKNOREV WHERE ACKNOREVID=@ACKID ;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEALL')
DROP PROCEDURE USP_TDS_DELETEALL
GO
CREATE PROCEDURE [USP_TDS_DELETEALL]
@BRANCHID INT
AS
DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN DEDUCTIONDETAIL AS DD ON DCL.DEDUCTIONID = DD.DEDUCTIONID
				WHERE  DD.BRANCHID =@BRANCHID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEALLDATA')
DROP PROCEDURE USP_TDS_DELETEALLDATA
GO
CREATE PROCEDURE [USP_TDS_DELETEALLDATA]
	@BRANCHID INT
AS
	BEGIN
		DECLARE @TEMPTABLE TABLE(ID INT IDENTITY(1,1),ACKID INT);
		INSERT INTO @TEMPTABLE SELECT ACKID FROM ACKNOREV;		 
		DELETE FROM ACKNOREV FROM ACKNOREV AS REV INNER JOIN @TEMPTABLE TEMP ON REV.ACKID=TEMP.ACKID;		 
		DELETE FROM ACKNO WHERE BRANCHID=@BRANCHID;
		DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL AS VIA INNER JOIN SALARYDETAIL AS SAL ON VIA.SALARYDETAILID=SAL.SALARYDETAILID WHERE SAL.BRANCHID=@BRANCHID;
		DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL AS SD INNER JOIN SALARYDETAIL AS SAL ON SD.SALARYDETAILID=SAL.SALARYDETAILID WHERE SAL.BRANCHID=@BRANCHID;             
		DELETE FROM SALARYDETAIL WHERE BRANCHID=@BRANCHID;
		DELETE FROM FORM16A WHERE BRANCHID=@BRANCHID; 
		DELETE FROM DEDCHALINK WHERE BRANCHID=@BRANCHID;
		DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID;
		DELETE FROM CHALLANDETAIL WHERE BRANCHID=@BRANCHID; 
		DELETE FROM FORM27A WHERE BRANCHID=@BRANCHID;
		DELETE FROM EMPLOYEE FROM EMPLOYEE AS E INNER JOIN DEDUCTEE AS D ON E.DEDUCTEEID=D.DEDUCTEEID WHERE D.BRANCHID=@BRANCHID;
		DELETE FROM NONEMPLOYEE FROM NONEMPLOYEE AS NE INNER JOIN DEDUCTEE AS D ON NE.DEDUCTEEID=D.DEDUCTEEID WHERE D.BRANCHID=@BRANCHID;
		DELETE FROM DEDUCTEE WHERE BRANCHID=@BRANCHID;
		DELETE FROM REMITTINGBANK WHERE BANKID NOT IN (SELECT BANKID FROM CHALLANDETAIL WHERE BRANCHID<>@BRANCHID);
		DECLARE @TABLE TABLE(ID INT IDENTITY(1,1),DEDUCTORID INT)
		INSERT INTO @TABLE SELECT DEDUCTORID FROM BRANCHDEDUCTORS WHERE BRANCHID=@BRANCHID;
		DELETE FROM BRANCHDEDUCTORS FROM BRANCHDEDUCTORS WHERE BRANCHID=@BRANCHID;
		DELETE FROM RESPONSIBLEPERSON FROM RESPONSIBLEPERSON AS RP INNER JOIN @TABLE AS TEM ON RP.DEDUCTORID =TEM.DEDUCTORID;
		DELETE FROM DEDUCTOR FROM DEDUCTOR AS D INNER JOIN @TABLE AS TEM ON D.DEDUCTORID =TEM.DEDUCTORID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteAllowanceBasedONID')
DROP PROCEDURE USP_TDS_DeleteAllowanceBasedONID
GO
CREATE PROCEDURE USP_TDS_DeleteAllowanceBasedONID
@MONTH INT,
@COMID INT,
@SALARYHEADID INT
AS  
  BEGIN
		DELETE FROM SALDETAIL 
		WHERE MONTHID = @MONTH AND COMID = @COMID AND SALARYHEADID = @SALARYHEADID;
		/*previous rent details will be removed*/
		IF(@SALARYHEADID = 11)
		BEGIN
			DELETE FROM TAXABLEPERQUISITE
			WHERE MONTHID =@MONTH AND COMID = @COMID AND PERKID = 1
		END
		SELECT @SALARYHEADID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEALLPARKEDAMOUNTS')
DROP PROCEDURE USP_TDS_DELETEALLPARKEDAMOUNTS
GO
CREATE PROCEDURE [USP_TDS_DELETEALLPARKEDAMOUNTS]
@INPUT VARCHAR(10)/*INPUT LL BE COMBINATION OF MONTH AND FINYEAR*/
AS
BEGIN
	DELETE PARKEDAMOUNT WHERE MONTHYEAR=@INPUT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEALLWITHDEDUCTOR')
DROP PROCEDURE USP_TDS_DELETEALLWITHDEDUCTOR
GO
CREATE PROCEDURE [USP_TDS_DELETEALLWITHDEDUCTOR] 
			@BRANCHCODE INT 
				 AS
				   BEGIN
				   DECLARE @BRANCHID INT;
				   SELECT @BRANCHID=BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE=@BRANCHCODE
						DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN DEDUCTIONDETAIL AS DD ON DCL.DEDUCTIONID = DD.DEDUCTIONID
							   WHERE  DD.BRANCHID =@BRANCHID
						DELETE FROM FORM16A FROM FORM16A AS FORM INNER JOIN DEDUCTIONDETAIL AS DD ON FORM.DEDUCTIONID = DD.DEDUCTIONID
							   WHERE  DD.BRANCHID = @BRANCHID
						 DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID
						 DELETE FROM FORM16 FROM FORM16 AS F16 INNER JOIN DEDUCTIONDETAIL AS DD ON F16.DEDUCTIONID = DD.DEDUCTIONID
							   WHERE  DD.BRANCHID = @BRANCHID
						DELETE FROM SALARYDETAIL WHERE BRANCHID = @BRANCHID;
						DELETE FROM EMPLOYEE FROM EMPLOYEE AS E INNER JOIN DEDUCTEE AS D ON E.DEDUCTEEID = D.DEDUCTEEID WHERE D.BRANCHID = @BRANCHID; 
						DELETE FROM NONEMPLOYEE FROM NONEMPLOYEE AS E INNER JOIN DEDUCTEE AS D ON E.DEDUCTEEID = D.DEDUCTEEID WHERE D.BRANCHID = @BRANCHID; 
						DELETE FROM DEDUCTEE WHERE BRANCHID = @BRANCHID AND DEDUCTEEID NOT IN (SELECT D.DEDUCTEEID     
							   FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID AND D.BRANCHID = @BRANCHID) 
						DELETE FROM CHALLANDETAIL WHERE BRANCHID=@BRANCHID      
						DELETE  FROM BRANCHDEDUCTORS WHERE BRANCHID=@BRANCHID
						DELETE FROM DEDUCTOR WHERE DEDUCTORID IN ( SELECT DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEBANKCOUNTRYCODEDETAIL')
DROP PROCEDURE USP_TDS_DELETEBANKCOUNTRYCODEDETAIL
GO
CREATE PROCEDURE USP_TDS_DELETEBANKCOUNTRYCODEDETAIL
@BANKCOUNTRYID INT,
@SHOULDDELETE  BIT
AS
   BEGIN
	 DECLARE @COUNTRYID INT;
	 SELECT @COUNTRYID  = COUNTRYID FROM BANKCOUNTRYCODE WITH(NOLOCK) WHERE BANKCOUNTRYID = @BANKCOUNTRYID
   IF EXISTS(SELECT COUNTRYID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE COUNTRYID = @COUNTRYID AND @SHOULDDELETE = 0)
	  BEGIN	/*CANNOT DELETE RECORD IF COUNTRYID IS ALREADY USED IN DEDUCTION*/
		 SELECT -2
	  END 
   ELSE
	  BEGIN 
		 DELETE FROM BANKCOUNTRYCODE WHERE BANKCOUNTRYID = @BANKCOUNTRYID
		 SELECT @BANKCOUNTRYID
	  END 
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEBGLCODE')
DROP PROCEDURE USP_TDS_DELETEBGLCODE
GO
CREATE PROCEDURE [USP_TDS_DELETEBGLCODE]
@BGLCODEID INT
AS
	BEGIN	
			DECLARE @RETURNVALUE INT;
			SET @RETURNVALUE = 1;
			IF EXISTS(SELECT BGLCODEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BGLCODEID = @BGLCODEID )
				BEGIN
					SET @RETURNVALUE = -1;
				END
			ELSE IF EXISTS(SELECT BGLCODEID FROM REPORTPAYMENT WITH(NOLOCK) WHERE BGLCODEID = @BGLCODEID)
				BEGIN
					SET @RETURNVALUE = -2;
				END
			ELSE
				BEGIN
					DELETE FROM TDSRATE WHERE BGLCODEID = @BGLCODEID;
				END
		SELECT @RETURNVALUE;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETECERTDETAILS')
DROP PROCEDURE USP_TDS_DELETECERTDETAILS
GO
CREATE PROCEDURE USP_TDS_DELETECERTDETAILS
@CERTDETAILID INT
AS
   BEGIN
		DECLARE @RETURNVALUE INT;
		SET @RETURNVALUE = 0;
		IF ((SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE FORMID IN (2,3) AND CERTDETAILID = @CERTDETAILID) > 0)
			BEGIN
				SET @RETURNVALUE = -2
			END
		ELSE
			BEGIN
				DELETE FROM CERTDETAIL WHERE CERTDETAILID = @CERTDETAILID
			END
		SELECT @RETURNVALUE		
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETECERTIFICATENOS')
DROP PROCEDURE USP_TDS_DELETECERTIFICATENOS
GO
CREATE PROCEDURE [USP_TDS_DELETECERTIFICATENOS]
	@DEDUCTIONID INT		
AS
	BEGIN
		DELETE FROM FORM16A WHERE DEDUCTIONID=@DEDUCTIONID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETECHALLAN')
DROP PROCEDURE USP_TDS_DELETECHALLAN
GO
CREATE PROCEDURE [USP_TDS_DELETECHALLAN] 
	@CHALLANID INT,
	@BRANCHID INT
AS
	BEGIN
		DECLARE @RESULTCOUNT INT;
		IF((SELECT COUNT(CHALLANID) FROM DEDCHALINK WITH(NOLOCK) WHERE CHALLANID=@CHALLANID)=0)
			BEGIN
				DELETE FROM CHALLANDETAIL WHERE CHALLANID=@CHALLANID AND BRANCHID=@BRANCHID
			END
		ELSE
			BEGIN
				SET @RESULTCOUNT=-1;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETECHALLANDETAIL')
DROP PROCEDURE USP_TDS_DELETECHALLANDETAIL
GO
CREATE PROCEDURE [USP_TDS_DELETECHALLANDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@CHALLANID INT
AS
	BEGIN
		DECLARE @DEDUCTIONID INT,@PARTPAYMENTID INT,@PPDETAILSCOUNT INT,@DBRANCHID INT,@DFORMID INT,@DQUARTER INT;
		SET @PPDETAILSCOUNT = 1;
		DECLARE @ISINVOLVEDINPP BIT,@ISERETURNDONE INT;
		SELECT @ISERETURNDONE = DBO.UDF_TDS_ISERETURNDONE(@BRANCHID,@CHALLANID);
		IF @ISERETURNDONE = 0
			BEGIN		
				/* CREATE TEMPORARY TABLE FOR STORING DEDUCTIONID'S */
				CREATE TABLE #TEMPTABLE(ID INT IDENTITY(1,1),DEDUCTIONID INT);
				INSERT INTO #TEMPTABLE SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE  BRANCHID = @BRANCHID AND CHALLANID = @CHALLANID;
				DECLARE @CURRROWCOUNT INT ,@MAXROWCOUNT INT;
				SET @CURRROWCOUNT = 1;
				SELECT @MAXROWCOUNT = COUNT(DEDUCTIONID) FROM #TEMPTABLE;
				DELETE FROM DEDCHALINK WHERE BRANCHID = @BRANCHID AND CHALLANID = @CHALLANID;
				WHILE(@CURRROWCOUNT <= @MAXROWCOUNT)
					BEGIN
						/*GET THE RECORDS FROM TEMPORARY TABLE*/
						SELECT @DEDUCTIONID = DEDUCTIONID FROM #TEMPTABLE WHERE ID = @CURRROWCOUNT;
						/* GET BRANCHID,FORMID,QUARTER BASED ON DEDUCTIONID */
						SELECT @DBRANCHID = BRANCHID,@DFORMID = FORMID,@DQUARTER = QUARTER FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID = @DEDUCTIONID;						
						IF @FORMID <> 1
							BEGIN
								/* DELETE FROM FORM16A BASED ON BRANCHID,DEDUCTIONID */
								DELETE FROM FORM16A WHERE BRANCHID = @DBRANCHID AND DEDUCTIONID = @DEDUCTIONID;
							END
						ELSE
							BEGIN
								/* DELETE FROM FORM16A BASED ON BRANCHID,DEDUCTIONID */
								DELETE FROM FORM16 WHERE BRANCHID = @DBRANCHID AND DEDUCTIONID = @DEDUCTIONID;
							END
						/* GET THE PARTPAYMENTID FROM DEDUCTIONDETAIL BASED BRANCHID,FORMID,QUARTER & DEDUCTIONID */
						SELECT @PARTPAYMENTID = PARTPAYMENTID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE  BRANCHID = @DBRANCHID AND FORMID = @DFORMID AND QUARTER = @DQUARTER AND DEDUCTIONID = @DEDUCTIONID;
						/* CHECK FOR PART PAYMENT */
						IF EXISTS(SELECT PARTDETAILID FROM PARTPAYMENTDETAILS PPD WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID AND PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER
								  WHERE PPD.BRANCHID = @DBRANCHID AND PPD.FORMID = @DFORMID AND PPD.QUARTER = @DQUARTER AND DD.DEDUCTIONID = @DEDUCTIONID)
							BEGIN
								SET @ISINVOLVEDINPP = 1;
								/* GET COUNT OF PART PAYMENT DETAILS BASED ON BRANCHID,FORMID,QUARTER & PARTPAYMENTID */
								SELECT @PPDETAILSCOUNT = COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @DBRANCHID AND FORMID = @DFORMID AND QUARTER = @DQUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
							END
						ELSE
							BEGIN
								SET @ISINVOLVEDINPP = 0;
							END
						IF(@ISINVOLVEDINPP = 1)
							BEGIN
								IF(@PPDETAILSCOUNT = 1)
									BEGIN
										/* DELETE FROM PARTPAYMENTDETAILS BASED ON BRANCHID,FORMID AND QUARTER */
										DELETE FROM PARTPAYMENTDETAILS WHERE BRANCHID = @DBRANCHID AND FORMID = @DFORMID AND [QUARTER] = @DQUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
										/* UPDATE DEDUCTION DETAIL BASED ON BRANCHID,FORMID,QUARTER & PARTPAYMENTID */
										UPDATE DEDUCTIONDETAIL
										SET    PAYMENTMADE = ORGPAYMENTMADE,INCOMETAX = ORGINCOMETAX,SURCHARGE = ORGSURCHARGE,EDUCATIONCESS = ORGEDUCATIONCESS,TOTALDEDUCTED = ORGTOTALDEDUCTED
										WHERE  BRANCHID = @DBRANCHID AND FORMID = @DFORMID AND QUARTER = @DQUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
									END
								ELSE								
									BEGIN
										DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID = @DBRANCHID AND FORMID = @DFORMID AND QUARTER = @DQUARTER AND DEDUCTIONID = @DEDUCTIONID;										
										/* UPDATE PART PAYMENT BALANCE BASED ON BRANCHID,FORMID,QUARTER & PARTPAYMENTID */
										EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @DBRANCHID,@DFORMID,@DQUARTER,@PARTPAYMENTID;
									END
							END
							/*INCREMENT THE CURRENT ROW COUNT AND MOVE TO THE NEXT ROW*/
							SET @CURRROWCOUNT = @CURRROWCOUNT + 1;
						END
						/* DELETE FROM DEDUCTIONDETAIL BASED ON BRANCHID,FORMID,QUARTER & DEDUCTIONID */
						DELETE FROM CHALLANDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CHALLANID = @CHALLANID;
						IF OBJECT_ID('TEMPDB..#TEMPTABLE') IS NOT NULL
							DROP TABLE #TEMPTABLE
						SELECT 1; /* CHALLAN DELETED SUCCESSFULLY */
				END
		ELSE
			BEGIN
				SELECT -1; /* SINCE DEDUCTION IS LINKED WITH THAT CHALLAN WHERE E-RETURN HAS BEEN DONE,WE CANNOT DELETE */
			END										
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETECHALLANLINKONCHALLANID')
DROP PROCEDURE USP_TDS_DELETECHALLANLINKONCHALLANID
GO
CREATE PROCEDURE [USP_TDS_DELETECHALLANLINKONCHALLANID]
	@CHALLANID INT
AS
	BEGIN
		DELETE FROM DEDCHALINK WHERE CHALLANID = @CHALLANID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteChallanLinkOnDeductionID')
DROP PROCEDURE USP_TDS_DeleteChallanLinkOnDeductionID
GO
CREATE PROCEDURE [USP_TDS_DeleteChallanLinkOnDeductionID]    
 @DEDUCTIONID INT,
@ISDEDUCTION BIT     
AS    
 BEGIN    
  DECLARE @BRANCHID INT;    
  DECLARE @FORMID INT;    
  DECLARE @QUARTER INT;
 DECLARE @SQLQUERY NVARCHAR(MAX);  
 DECLARE @DEDTABLE TABLE(BRANCHID INT, FORMID INT, QUARTER INT);     
  SET  @SQLQUERY = 'SELECT DD.BRANCHID,DD.FORMID,DD.QUARTER  
										FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
										INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID'
  IF(@ISDEDUCTION = 1)
	BEGIN
		SET @SQLQUERY = @SQLQUERY  + ' WHERE  DD.DEDUCTIONID = ' + CAST(@DEDUCTIONID AS VARCHAR)
	END
 ELSE
	BEGIN
		SET @SQLQUERY = @SQLQUERY  + ' WHERE  DL.DEDCHALINKID = ' + CAST(@DEDUCTIONID AS VARCHAR)
	END 
	  INSERT INTO @DEDTABLE
      EXEC SP_EXECUTESQL @SQLQUERY;
  /* IF CHALLAN IS LINKED TO A DEDUCTION & E- RETURN IS DONE IN THAT BRANCH,FORMID & QUARTER WHERE DEDUCTIONS EXISTS,THEN THE RECORD CANNOT BE UNLINKED */    
  IF EXISTS(SELECT ACKID FROM ACKNO A WITH(NOLOCK)
							INNER JOIN @DEDTABLE T ON A.BRANCHID = T.BRANCHID AND A.FORMID = T.FORMID AND A.QUARTER = T.QUARTER  
						  WHERE LEN(ISNULL(ORGNUM,'')) = 15)    
   BEGIN    
    SELECT -1;    
   END    
  ELSE    
   BEGIN    
		 IF(@ISDEDUCTION = 1)
			BEGIN
				    DELETE FROM DEDCHALINK WHERE DEDUCTIONID = @DEDUCTIONID
			END
		 ELSE
			BEGIN
				    DELETE FROM DEDCHALINK WHERE DEDCHALINKID = @DEDUCTIONID  
			END 		   
   END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteChapterVIAdetail')
DROP PROCEDURE USP_TDS_DeleteChapterVIAdetail
GO
CREATE PROCEDURE USP_TDS_DeleteChapterVIAdetail
@COMID INT,
@DELETEALL BIT
AS
 BEGIN
	DECLARE @RETURNTYPE INT, @GROSS NUMERIC(13,2),@QUALIFYING NUMERIC(13,2);  
	SET @RETURNTYPE = 1;  
	IF(@DELETEALL = 0)
	  BEGIN
		DELETE FROM CHAPTERVIADET WHERE SALARYSECTIONID <> 3 AND COMID = @COMID
	  END
	ELSE
	  BEGIN
		--SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED  
		--BEGIN TRANSACTION    
		--	BEGIN TRY  
				DELETE FROM CVIA80CDET 
				FROM CVIA80CDET CDET WITH(NOLOCK)
				INNER JOIN CHAPTERVIADET CVI WITH(NOLOCK) ON CDET.CHAPTERVIADETID = CVI.CHAPTERVIADETAILID
				WHERE CVI.COMID = @COMID AND ISORIGINAL = 1
				DELETE FROM CHAPTERVIADET WHERE COMID = @COMID AND SALARYSECTIONID <> 3
				UPDATE CHAPTERVIADET SET GROSSAMOUNT = (SELECT SUM(GROSS) FROM CVIA80CDET WITH(NOLOCK) WHERE CHAPTERVIADETID = CDET.CHAPTERVIADETAILID),
					QUALIFYINGAMOUNT =  (SELECT SUM(QUALIFYING) FROM CVIA80CDET WITH(NOLOCK) WHERE CHAPTERVIADETID = CDET.CHAPTERVIADETAILID),
					DEDUCTIBLEAMOUNT =  (SELECT SUM(QUALIFYING) FROM CVIA80CDET WITH(NOLOCK) WHERE CHAPTERVIADETID = CDET.CHAPTERVIADETAILID)
				FROM CHAPTERVIADET CDET 
				WHERE CDET.COMID = @COMID
				DELETE FROM CHAPTERVIADETAIL 
				FROM CHAPTERVIADETAIL CVI WITH(NOLOCK) 
				INNER JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.SALARYDETAILID = CVI.SALARYDETAILID
				INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID
				INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
				INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID
				WHERE LC.COMID = @COMID
				UPDATE SALARYDETAIL SET TOTALDEDUNDERCHAPTERVIA = 0 
				FROM SALARYDETAIL SD WITH(NOLOCK)
				INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID
				INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
				INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID
				WHERE LC.COMID = @COMID
				UPDATE OTHERINCOME SET INTERESTONSB = 0
				WHERE COMID = @COMID
				--COMMIT        
			--END TRY   
			--BEGIN CATCH  
			--	SET @RETURNTYPE = -1  
			--	ROLLBACK  
			--END CATCH  
	   END
	 SELECT @RETURNTYPE 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteChapterVIADetailData')
DROP PROCEDURE USP_TDS_DeleteChapterVIADetailData
GO
CREATE PROCEDURE USP_TDS_DeleteChapterVIADetailData
	@SalaryDetailID INT,
	@SalarySectionID INT
AS
BEGIN
	DELETE FROM CHAPTERVIADETAIL
	WHERE SALARYDETAILID=@SalaryDetailID AND SALARYSECTIONID=@SalarySectionID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETECHAPTERVIADETAILS')
DROP PROCEDURE USP_TDS_DELETECHAPTERVIADETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETECHAPTERVIADETAILS]
	@SALARYDETAILID INT
AS
	BEGIN
		DELETE FROM CHAPTERVIADETAIL WHERE SALARYDETAILID=@SALARYDETAILID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteCompanyBranch')
DROP PROCEDURE USP_TDS_DeleteCompanyBranch
GO
CREATE PROCEDURE [USP_TDS_DeleteCompanyBranch]
@BRANCHID INT
AS
BEGIN
    DECLARE @COUNT INT,@RETURNVALUE INT
	SELECT @COUNT=COUNT(BRANCHID) FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBRANCHID=@BRANCHID
	IF @COUNT>0
	BEGIN
		SET @RETURNVALUE=-1
	END
	ELSE
	BEGIN
         BEGIN TRAN
         DELETE FROM ACKNOREV WHERE ACKID IN (SELECT ACKID FROM ACKNO WITH(NOLOCK) WHERE BRANCHID=@BRANCHID)
		 DELETE FROM ACKNO WHERE BRANCHID=@BRANCHID 
		 DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL AS VIA 
		                  INNER JOIN 
		              SALARYDETAIL AS SAL ON VIA.SALARYDETAILID=SAL.SALARYDETAILID 
		              WHERE SAL.BRANCHID=@BRANCHID
		 DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL AS SD 
		                  INNER JOIN 
		              SALARYDETAIL AS SAL ON SD.SALARYDETAILID=SAL.SALARYDETAILID 
		              WHERE SAL.BRANCHID=@BRANCHID             
		 DELETE FROM SALARYDETAIL WHERE BRANCHID=@BRANCHID
		 DELETE FROM FORM16A WHERE BRANCHID=@BRANCHID 
		 DELETE FROM DEDCHALINK WHERE BRANCHID=@BRANCHID
		 DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID 
		 DELETE FROM CHALLANDETAIL WHERE BRANCHID=@BRANCHID 
		 DELETE FROM FORM27A WHERE BRANCHID=@BRANCHID
		 DELETE FROM EMPLOYEE FROM EMPLOYEE AS E 
								INNER JOIN 
					 DEDUCTEE AS D ON E.DEDUCTEEID=D.DEDUCTEEID 
					 WHERE D.BRANCHID=@BRANCHID 
		 DELETE FROM NONEMPLOYEE FROM NONEMPLOYEE AS NE 
								INNER JOIN 
					 DEDUCTEE AS D ON NE.DEDUCTEEID=D.DEDUCTEEID 
					 WHERE D.BRANCHID=@BRANCHID
         DELETE FROM DEDUCTEE WHERE BRANCHID=@BRANCHID  
		 DECLARE @TABLE TABLE(ID INT IDENTITY(1,1),DEDUCTORID INT)
		 INSERT INTO @TABLE SELECT DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
		 DELETE FROM BRANCHDEDUCTORS FROM BRANCHDEDUCTORS WHERE BRANCHID=@BRANCHID 
		 DELETE FROM RESPONSIBLEPERSON FROM RESPONSIBLEPERSON AS RP INNER JOIN @TABLE AS TEM ON RP.DEDUCTORID =TEM.DEDUCTORID
		 DELETE FROM DEDUCTOR FROM DEDUCTOR AS D INNER JOIN @TABLE AS TEM ON D.DEDUCTORID =TEM.DEDUCTORID
		 DELETE FROM USERMASTER WHERE BRANCHID=@BRANCHID
		 DELETE FROM COMPANYBRANCH WHERE BRANCHID=@BRANCHID 
		 COMMIT TRAN                      
		SET @RETURNVALUE=1
	END
	SELECT @RETURNVALUE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETECVIA80CDET')
DROP PROCEDURE USP_TDS_DELETECVIA80CDET
GO
CREATE PROCEDURE [USP_TDS_DELETECVIA80CDET]        
@CHAPTERVIADETID INT,        
@C80CID INT,
@COMID INT,
@BRANCHID INT     
AS        
  BEGIN        
   DECLARE @80CGROSS NUMERIC(13,2), @80CQUALIFYING NUMERIC(13,2);
   DELETE FROM CVIA80CDET
   FROM CVIA80CDET CVIA
   INNER JOIN CHAPTERVIADET CDET ON CVIA.CHAPTERVIADETID = CDET.CHAPTERVIADETAILID   
    WHERE COMID  = @COMID AND C80CID = @C80CID; 
   DECLARE @TOT TABLE (ID INT, GROSS NUMERIC(13,2), QUALIFYING NUMERIC(13,2), ISORIGINAL BIT);    
	  INSERT INTO @TOT    
	  EXEC USP_TDS_GETACTUAL80CVALUES @COMID, @BRANCHID   
   --SELECT @80CGROSS = SUM(GROSS), @80CQUALIFYING = SUM(QUALIFYING) FROM CVIA80CDET WITH (NOLOCK) 
   --WHERE CHAPTERVIADETID = @CHAPTERVIADETID        
  -- UPDATE CVIA80CDET SET GROSS  = T.GROSS, QUALIFYING = T.QUALIFYING 
	 --  FROM CVIA80CDET CVIA 
	 --  INNER JOIN CHAPTERVIADET CDET ON CDET.CHAPTERVIADETAILID = CVIA.CHAPTERVIADETID
	 --  INNER JOIN @TOT T ON T.ID = CVIA.C80CID
	 --  WHERE CDET.COMID = @COMID AND CVIA.ISORIGINAL = 0
	 --  INSERT INTO CVIA80CDET
	 --  SELECT @CHAPTERVIADETID AS CHAPTERVIADETID, T.ID, T.GROSS, T.QUALIFYING,0 AS ISORIGINAL FROM @TOT T
	 --  LEFT JOIN 
	 --  (
		--SELECT CVIA.C80CID FROM CVIA80CDET CVIA 
		-- INNER JOIN CHAPTERVIADET CDET ON CDET.CHAPTERVIADETAILID = CVIA.CHAPTERVIADETID
		-- WHERE CDET.COMID = @COMID 
		--)CVIA ON  T.ID = CVIA.C80CID
		--WHERE CVIA.C80CID  IS NULL
   UPDATE CHAPTERVIADET SET GROSSAMOUNT = (SELECT SUM(GROSS) FROM CVIA80CDET WHERE CHAPTERVIADETID = CDET.CHAPTERVIADETAILID),
								QUALIFYINGAMOUNT = (SELECT CASE WHEN SUM(QUALIFYING) > 100000 THEN 100000 ELSE SUM(QUALIFYING) END FROM CVIA80CDET WHERE CHAPTERVIADETID = CDET.CHAPTERVIADETAILID),
								DEDUCTIBLEAMOUNT = (SELECT CASE WHEN SUM(QUALIFYING) > 100000 THEN 100000 ELSE SUM(QUALIFYING) END FROM CVIA80CDET WHERE CHAPTERVIADETID = CDET.CHAPTERVIADETAILID)
		FROM CHAPTERVIADET CDET
	    WHERE CDET.CHAPTERVIADETAILID = @CHAPTERVIADETID AND SALARYSECTIONID = 3        
   --UPDATE CHAPTERVIADET SET GROSSAMOUNT = @80CGROSS, QUALIFYINGAMOUNT = @80CQUALIFYING, DEDUCTIBLEAMOUNT = @80CQUALIFYING
   --WHERE CHAPTERVIADETAILID = @CHAPTERVIADETID AND SALARYSECTIONID = 3   
   SELECT @CHAPTERVIADETID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETECVIA80CDETAILS')
DROP PROCEDURE USP_TDS_DELETECVIA80CDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETECVIA80CDETAILS] 
@CVIA80CDETID INT=-1, 
@CHAPVIADETID INT 
AS 
BEGIN 
	DECLARE @80CGROSS NUMERIC(13,2), @80CQUALIFYING NUMERIC(13,2),@80CDEDUCTIBLE NUMERIC(13,2); 
	IF @CVIA80CDETID=-1 
	BEGIN  
		DELETE FROM CVIA80CDET WHERE CHAPTERVIADETID=@CHAPVIADETID; 
		DELETE FROM CHAPTERVIADETAIL WHERE CHAPTERVIADETAILID=@CHAPVIADETID; 
	END 
	ELSE 
		DELETE FROM CVIA80CDET WHERE CVIA80CDETID=@CVIA80CDETID AND CHAPTERVIADETID=@CHAPVIADETID; 
		SELECT @80CGROSS = SUM(GROSS), @80CQUALIFYING = SUM(QUALIFYING),@80CDEDUCTIBLE=SUM(DEDUCTIBLE) FROM CVIA80CDET WITH (NOLOCK) WHERE CHAPTERVIADETID = @CHAPVIADETID 
		UPDATE CHAPTERVIADETAIL SET GROSSAMOUNT=@80CGROSS,QUALIFYINGAMOUNT=@80CQUALIFYING,DEDUCTIBLEAMOUNT=@80CDEDUCTIBLE 
		WHERE CHAPTERVIADETAILID=@CHAPVIADETID; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDEDCHALINK')
DROP PROCEDURE USP_TDS_DELETEDEDCHALINK
GO
CREATE PROCEDURE [USP_TDS_DELETEDEDCHALINK]  
@DEDUCTIONIDS NVARCHAR(MAX)  
AS  
 BEGIN
    SELECT * INTO #DEDUCTIONS FROM  DBO.UDF_TDS_SPLITSTRING(@DEDUCTIONIDS,',')
	DELETE FROM DEDCHALINK 
	FROM DEDCHALINK DCL
	INNER JOIN #DEDUCTIONS D ON D.DATA = DCL.DEDCHALINKID  
 END
IF EXISTS(SELECT * FROM SYS.OBJECTS WHERE TYPE_DESC = 'USP_TDS_DELETEDEDCHALINK' AND NAME = 'USP_TDS_DELETEDEDCHALINK')
DROP PROC USP_TDS_DELETEDEDCHALINK
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDEDUCTEEDETAIL')
DROP PROCEDURE USP_TDS_DELETEDEDUCTEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_DELETEDEDUCTEEDETAIL]
	@DEDUCTEEID INT
AS
	BEGIN
		DELETE FROM CERTDETAIL WHERE DEDUCTEEID = @DEDUCTEEID
		DELETE FROM DEDUCTEE WHERE DEDUCTEEID = @DEDUCTEEID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDEDUCTION')
DROP PROCEDURE USP_TDS_DELETEDEDUCTION
GO
CREATE PROCEDURE USP_TDS_DELETEDEDUCTION  
 @DEDUCTIONID INT  
AS  
BEGIN 
	DECLARE @DEDUCTEEID INT;
	DECLARE @PAN VARCHAR(10);
	DECLARE @PAYMENTDATE DATETIME;
	SET @DEDUCTEEID=(SELECT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID=@DEDUCTIONID);
	SET @PAN=(SELECT PAN FROM DEDUCTEE WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID);
	SET @PAYMENTDATE=(SELECT PAYMENTDATE FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID=@DEDUCTIONID);
	IF(@PAN='PANAPPLIED'OR @PAN='PANINVALID'OR @PAN='PANNOTAVBL')
	BEGIN 
		DELETE FROM DEDUCTIONDETAIL   
		WHERE DEDUCTIONID=@DEDUCTIONID  
	END
	ELSE
	BEGIN
		IF(MONTH(GETDATE())=MONTH(@PAYMENTDATE))
		BEGIN
			DELETE FROM DEDUCTIONDETAIL   
			WHERE DEDUCTIONID=@DEDUCTIONID 
		END
		ELSE
		BEGIN
			UPDATE DEDUCTIONDETAIL
			SET TOTALDEDUCTED=0,ORGTOTALDEDUCTED=0,
			EDUCATIONCESS=0,ORGEDUCATIONCESS=0,
			SURCHARGE=0,ORGSURCHARGE=0,
			INCOMETAX=0,ORGINCOMETAX=0,
			TAXRATE=0,EDUCATIONCESSRATE=0,SURCHARGERATE=0,INCOMETAXRATE=0,
			NONDEDREASON=2
			WHERE DEDUCTIONID=@DEDUCTIONID
		END
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDEDUCTIONCHALLANLINK')
DROP PROCEDURE USP_TDS_DELETEDEDUCTIONCHALLANLINK
GO
CREATE PROCEDURE [USP_TDS_DELETEDEDUCTIONCHALLANLINK]
	@DEDCHALINKID INT
AS
	BEGIN
		DELETE FROM DEDCHALINK WHERE DEDCHALINKID=@DEDCHALINKID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDEDUCTIONCHALLANLINKONCHALLANID')
DROP PROCEDURE USP_TDS_DELETEDEDUCTIONCHALLANLINKONCHALLANID
GO
CREATE PROCEDURE [USP_TDS_DELETEDEDUCTIONCHALLANLINKONCHALLANID]
	@CHALLANID INT,
	@BRANCHID INT
AS
	BEGIN
		DELETE FROM DEDCHALINK WHERE CHALLANID=@CHALLANID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDEDUCTIONCHALLANLINKONQUARTER')
DROP PROCEDURE USP_TDS_DELETEDEDUCTIONCHALLANLINKONQUARTER
GO
CREATE PROCEDURE [USP_TDS_DELETEDEDUCTIONCHALLANLINKONQUARTER]
	@QUATERID INT,
	@FORMID INT,
	@EXCLUDEPREVIOUS BIT,
	@BRANCHID INT
AS
	BEGIN	
		IF(@EXCLUDEPREVIOUS=1)
			BEGIN
				DELETE FROM	DEDCHALINK WHERE BRANCHID = @BRANCHID AND 
							CHALLANID IN (SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUATERID)	 
			END
		ELSE
			BEGIN
				DELETE FROM	DEDCHALINK WHERE BRANCHID = @BRANCHID AND
							CHALLANID IN (SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]<=@QUATERID)	 
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteDeductionDetail')
DROP PROCEDURE USP_TDS_DeleteDeductionDetail
GO
CREATE PROCEDURE [dbo].[USP_TDS_DeleteDeductionDetail]
 @DEDUCTIONID INT  
AS  
	BEGIN  
		DECLARE @TDSCERTIFICATENO INT, @BRANCHID INT, @FORMID INT, @QUARTER INT   
		IF ((SELECT COUNT(DEDUCTIONID) FROM FORM16A WHERE DEDUCTIONID=@DEDUCTIONID) > 0)
		BEGIN  
			SET @TDSCERTIFICATENO=(SELECT TDSCERTIFICATENO FROM FORM16A WHERE DEDUCTIONID=@DEDUCTIONID);  
			IF(@TDSCERTIFICATENO=0)  
			BEGIN  
				DELETE FROM FORM16A WHERE DEDUCTIONID=@DEDUCTIONID        
			END       
		END  
		ELSE  
		BEGIN
			SELECT @BRANCHID = BRANCHID,@FORMID = FORMID,@QUARTER = QUARTER FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID = @DEDUCTIONID  
			IF ((SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE REFDEDUCTIONID = @DEDUCTIONID AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER) > 0)
			BEGIN
				UPDATE DEDUCTIONDETAIL SET REFDEDUCTIONID = NULL WHERE REFDEDUCTIONID = @DEDUCTIONID AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;  
			END
			DELETE FROM DEDUCTIONDETAIL WHERE DEDUCTIONID=@DEDUCTIONID;  
		END  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDEDUCTIONDETAILS')
DROP PROCEDURE USP_TDS_DELETEDEDUCTIONDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETEDEDUCTIONDETAILS] 
   @BRANCHID VARCHAR(MAX),  
   @MONTHID INT
AS  
BEGIN
		DELETE FROM DEDCHALINK WHERE DEDUCTIONID IN (SELECT DEDUCTIONID  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			WHERE DD.BRANCHID = @BRANCHID AND MONTH(DD.PAYMENTDATE) = @MONTHID AND DD.FORMID IN (2,3) AND DD.ENTRYTYPE = 4)
		DELETE FROM DEDUCTIONDETAIL WHERE DEDUCTIONID IN (SELECT DEDUCTIONID  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			WHERE DD.BRANCHID = @BRANCHID AND MONTH(DD.PAYMENTDATE) = @MONTHID AND DD.FORMID IN (2,3) AND DD.ENTRYTYPE = 4)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDEDUCTOR')
DROP PROCEDURE USP_TDS_DELETEDEDUCTOR
GO
CREATE PROCEDURE [USP_TDS_DELETEDEDUCTOR]
	 @DEDUCTORID INT
AS
	BEGIN
		DELETE FROM DEDUCTOR WHERE DEDUCTORID=@DEDUCTORID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDTFDETAILS')
DROP PROCEDURE USP_TDS_DELETEDTFDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETEDTFDETAILS]
@SCALE INT
AS
IF(NOT EXISTS(SELECT S.SCALE FROM SCALE S WITH(NOLOCK) INNER JOIN EMPWORKMONTH EW WITH(NOLOCK)
                        ON S.SCALE=EW.SCALE WHERE S.SCALE=@SCALE))
   BEGIN   
      DELETE FROM  SCALE WHERE SCALE=@SCALE
      SELECT @SCALE 
   END             
 ELSE
      SELECT -1
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEDUMMYRECORDS')
DROP PROCEDURE USP_TDS_DELETEDUMMYRECORDS
GO
CREATE PROCEDURE [USP_TDS_DELETEDUMMYRECORDS]      
@BRANCHID INT,    
@FORMID INT    
AS      
BEGIN      
 DECLARE @VAL VARCHAR(30)      
 SET @VAL='';      
 SET NOCOUNT ON       
 BEGIN TRANSACTION       
  BEGIN TRY      
    SET @VAL='SUCCESSFULLY UPDATED.';      
   IF(@FORMID <> 1)    
 BEGIN  
  DELETE FROM NONEMPLOYEE      
  WHERE NONEMPLOYEEID NOT IN      
  (      
     SELECT MAX(NONEMPLOYEEID)NONEMPLOYEEID FROM NONEMPLOYEE WITH(NOLOCK)      
     GROUP BY DEDUCTEEID      
     HAVING COUNT(DEDUCTEEID) > 1      
     UNION ALL      
     SELECT MAX(NONEMPLOYEEID)NONEMPLOYEEID FROM NONEMPLOYEE WITH(NOLOCK)     
     GROUP BY DEDUCTEEID      
     HAVING COUNT(DEDUCTEEID) = 1    
     )      
  UPDATE NONEMPLOYEE SET SERIALNO = 0;      
  UPDATE NONEMPLOYEE SET SERIALNO = N.SERIALNO      
  FROM NONEMPLOYEE NE       
  INNER JOIN       
  (      
    SELECT ROW_NUMBER() OVER (PARTITION BY D.BRANCHID ORDER BY BRANCHID) SERIALNO, D.DEDUCTEEID, D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK)       
    INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID      
  )N      
  ON NE.DEDUCTEEID = N.DEDUCTEEID      
    END    
  ELSE    
    BEGIN    
  DELETE FROM EMPLOYEE      
  WHERE EMPLOYEEID NOT IN      
  (      
     SELECT MAX(EMPLOYEEID)EMPLOYEEID FROM EMPLOYEE WITH(NOLOCK)      
     GROUP BY DEDUCTEEID      
     HAVING COUNT(DEDUCTEEID) > 1      
     UNION ALL      
     SELECT MAX(EMPLOYEEID)EMPLOYEEID FROM EMPLOYEE WITH(NOLOCK)      
     GROUP BY DEDUCTEEID      
     HAVING COUNT(DEDUCTEEID) = 1    
    )    
  UPDATE EMPLOYEE SET SERIALNO = 0;      
  UPDATE EMPLOYEE SET SERIALNO = N.SERIALNO      
  FROM EMPLOYEE NE       
  INNER JOIN       
  (      
    SELECT ROW_NUMBER() OVER (PARTITION BY D.BRANCHID ORDER BY BRANCHID) SERIALNO, D.DEDUCTEEID, D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK)       
    INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID      
  )N      
  ON NE.DEDUCTEEID = N.DEDUCTEEID      
    END    
   COMMIT        
  END TRY   
  BEGIN CATCH        
  SET @VAL='ERROR OCCURED WHILE UPDATING.';      
  ROLLBACK  
  END CATCH      
  PRINT @VAL       
  SET NOCOUNT OFF       
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEMPLOYEE')
DROP PROCEDURE USP_TDS_DELETEEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_DELETEEMPLOYEE]
@DEDUCTEEID INT	
AS
	BEGIN
		DECLARE @BRANCHID INT;
		SELECT @BRANCHID = BRANCHID FROM DEDUCTEE WHERE DEDUCTEEID = @DEDUCTEEID
		DECLARE @RETURNVALUE INT,@EMPLOYEEID INT;
		IF EXISTS(SELECT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID AND BRANCHID = @BRANCHID)
			BEGIN
				SET @RETURNVALUE = -1; /* IF DEDUCTION DETAILS FOUND,THEN RETURN -1 */
			END
		ELSE IF EXISTS(SELECT DEDUCTEEID FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID AND BRANCHID = @BRANCHID)
			BEGIN
				SET @RETURNVALUE = -2; /* IF SALARY DETAILS FOUND,THEN RETURN -1 */
			END
		ELSE
			BEGIN
			    DELETE FROM LINKTOTC
			    FROM LINKTOTC LC
			    INNER JOIN EMPLOYEE E ON LC.EMPLOYEEID = E.EMPLOYEEID
			    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID
				WHERE D.DEDUCTEEID = @DEDUCTEEID AND D.BRANCHID = @BRANCHID
				DELETE FROM EMPLOYEE 
				FROM EMPLOYEE E
				INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID
				WHERE D.DEDUCTEEID = @DEDUCTEEID AND BRANCHID = @BRANCHID
				DELETE FROM DEDUCTEE WHERE DEDUCTEEID = @DEDUCTEEID AND BRANCHID = @BRANCHID;
				SET @RETURNVALUE = 1; /* IF DEDUCTION DETAILS ARE NOT FOUND,THEN RETURN 1 */
			END
		SELECT @RETURNVALUE;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTING80CDETAILS')
DROP PROCEDURE USP_TDS_DELETEEXISTING80CDETAILS
GO
CREATE PROCEDURE USP_TDS_DELETEEXISTING80CDETAILS
@SALARYDETAILID INT
AS
  BEGIN
	DELETE FROM CVIA80CDET 
	FROM  CVIA80CDET DET
	INNER JOIN CHAPTERVIADETAIL CVIA ON DET.CHAPTERVIADETID = CVIA.CHAPTERVIADETAILID
	WHERE CVIA.SALARYDETAILID = @SALARYDETAILID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGCHALLANF004')
DROP PROCEDURE USP_TDS_DELETEEXISTINGCHALLANF004
GO
CREATE PROCEDURE [USP_TDS_DELETEEXISTINGCHALLANF004]
@BRANCHCODE INT,
@QUARTER INT,
@SECTION INT,
@BANKCHALLANNO INT,
@BANKCHALLANDATE DATETIME,
@BANKBRANCHCODE INT
AS
	BEGIN		
		DECLARE @DELETECHALLANID INT;
		DECLARE @RETURNVALUE INT, @BANKID INT;
		SET @RETURNVALUE=0;		
		SELECT @BANKID=BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BANKBRANCHCODE;
		IF(EXISTS(SELECT C.CHALLANID FROM CHALLANDETAIL C WITH(NOLOCK) WHERE C.BRANCHID=@BRANCHCODE AND C.QUARTER=@QUARTER AND C.SECTIONID=@SECTION AND C.BANKCHALLANNO=@BANKCHALLANNO AND C.CHALLANPAIDDATE=@BANKCHALLANDATE AND C.BANKID=@BANKID))
			BEGIN
				SELECT @DELETECHALLANID=C.CHALLANID FROM CHALLANDETAIL C WITH(NOLOCK) WHERE C.QUARTER=@QUARTER AND C.SECTIONID=@SECTION AND C.BANKCHALLANNO=@BANKCHALLANNO AND C.CHALLANPAIDDATE=@BANKCHALLANDATE AND C.BANKID=@BANKID;
				DELETE FROM DEDCHALINK WHERE CHALLANID=@DELETECHALLANID;
				DELETE FROM CHALLANDETAIL WHERE CHALLANID=@DELETECHALLANID;
				SET @RETURNVALUE=1;
			END	
		SELECT @RETURNVALUE;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGDATA')
DROP PROCEDURE USP_TDS_DELETEEXISTINGDATA
GO
CREATE PROCEDURE [USP_TDS_DELETEEXISTINGDATA]      
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT    
AS      
 BEGIN      
  DECLARE @TEMPTABLE TABLE(ID INT IDENTITY(1,1),ACKID INT);     
  DECLARE @DEDUCTEE TABLE(DEDUCTEEID INT);     
  DECLARE @TABLE TABLE(ID INT IDENTITY(1,1),DEDUCTORID INT);    
  INSERT INTO @TEMPTABLE     
  SELECT AV.ACKID FROM ACKNOREV AV WITH(NOLOCK)    
  INNER JOIN ACKNO A WITH(NOLOCK) ON AV.ACKID = A.ACKID    
  WHERE A.QUARTER = @QUARTER AND A.FORMID = @FORMID;         
  DELETE FROM ACKNOREV FROM ACKNOREV AS REV     
  INNER JOIN @TEMPTABLE TEMP ON REV.ACKID=TEMP.ACKID;         
  DELETE FROM ACKNO WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER AND FORMID = @FORMID;    
  IF(@FORMID = 1 AND @QUARTER = 4)    
   BEGIN     
   DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL AS VIA     
   INNER JOIN SALARYDETAIL AS SAL ON VIA.SALARYDETAILID = SAL.SALARYDETAILID WHERE SAL.BRANCHID = @BRANCHID;      
   DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL AS SD INNER JOIN SALARYDETAIL AS SAL ON SD.SALARYDETAILID=SAL.SALARYDETAILID WHERE SAL.BRANCHID=@BRANCHID;                   
   DELETE FROM SALARYDETAIL WHERE BRANCHID = @BRANCHID;    
   END    
  IF(@FORMID = 1)    
   BEGIN     
   DELETE FROM FORM16      
   FROM FORM16 F    
      INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = F.DEDUCTEEID    
      INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID    
      INNER JOIN DEDUCTIONDETAIL DD ON DD.DEDUCTEEID = D.DEDUCTEEID    
      WHERE DD.BRANCHID = @BRANCHID  AND DD.QUARTER = @QUARTER AND DD.FORMID = @FORMID;    
   END    
  ELSE    
   BEGIN    
       DELETE FROM FORM16A     
    FROM FORM16A F    
    INNER JOIN DEDUCTIONDETAIL DD ON DD.DEDUCTIONID = F.DEDUCTIONID    
    WHERE DD.BRANCHID = @BRANCHID  AND DD.QUARTER = @QUARTER AND DD.FORMID = @FORMID;       
   END    
  DELETE FROM DEDCHALINK     
  FROM DEDCHALINK DL     
  INNER JOIN DEDUCTIONDETAIL DD ON DL.DEDUCTIONID = DD.DEDUCTIONID    
  WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER;     
  DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;      
  DELETE FROM CHALLANDETAIL WHERE BRANCHID=@BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;       
  DELETE FROM FORM27A WHERE BRANCHID=@BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;     
  --IF(@FORMID = 1)    
  -- BEGIN     
  --    INSERT INTO @DEDUCTEE    
  --    SELECT D.DEDUCTEEID          
  --    FROM DEDUCTEE D    
  -- INNER JOIN EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID WHERE D.BRANCHID = @BRANCHID AND     
  -- D.DEDUCTEEID NOT IN (SELECT DISTINCT DEDUCTEEID FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = 1);     
  -- DELETE FROM EMPLOYEE     
  -- FROM EMPLOYEE E     
  -- INNER JOIN @DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID     
  -- DELETE FROM DEDUCTEE     
  -- FROM DEDUCTEE E     
  -- INNER JOIN @DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID     
  -- END    
  --ELSE    
  -- BEGIN     
  --    INSERT INTO @DEDUCTEE    
  -- SELECT D.DEDUCTEEID           
  --    FROM DEDUCTEE D    
  -- INNER JOIN NONEMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID WHERE D.BRANCHID = @BRANCHID AND     
  -- D.DEDUCTEEID NOT IN (SELECT DISTINCT DEDUCTEEID FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID);     
  -- DELETE FROM NONEMPLOYEE     
  -- FROM NONEMPLOYEE E     
  -- INNER JOIN @DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID     
  -- DELETE FROM DEDUCTEE     
  -- FROM DEDUCTEE E     
  -- INNER JOIN @DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID     
  -- END    
  --DELETE FROM REMITTINGBANK WHERE BANKID NOT IN (SELECT BANKID FROM CHALLANDETAIL WHERE BRANCHID <> @BRANCHID);    
  INSERT INTO @TABLE     
  SELECT DEDUCTORID FROM BRANCHDEDUCTORS WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER;      
  DELETE FROM BRANCHDEDUCTORS FROM BRANCHDEDUCTORS WHERE BRANCHID=@BRANCHID AND QUARTER = @QUARTER;  
DELETE FROM RESPONSIBLEPERSON FROM RESPONSIBLEPERSON AS RP INNER JOIN @TABLE AS TEM ON RP.DEDUCTORID =TEM.DEDUCTORID;      
  DELETE FROM DEDUCTOR FROM DEDUCTOR AS D INNER JOIN @TABLE AS TEM ON D.DEDUCTORID =TEM.DEDUCTORID;      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGDETAILS')
DROP PROCEDURE USP_TDS_DELETEEXISTINGDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETEEXISTINGDETAILS] 
 @BRANCHID INT, 
 @FORMID INT, 
 @QUARTER INT, 
 @SERIALNOS VARCHAR(MAX), 
 @ISDEDUCTION BIT 
 AS 
 BEGIN 
	SELECT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@SERIALNOS,','); 
	IF(@ISDEDUCTION=1) 
	BEGIN 
		DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN DEDUCTIONDETAIL AS DD ON 
		DCL.DEDUCTIONID=DD.DEDUCTIONID AND DCL.BRANCHID=DD.BRANCHID 
		INNER JOIN #TEMP T ON T.DATA=DD.SERIALNO 
		WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER 
		DELETE FROM FORM16A FROM FORM16A AS FORM INNER JOIN DEDUCTIONDETAIL AS DD ON FORM.DEDUCTIONID=DD.DEDUCTIONID 
		INNER JOIN #TEMP T ON T.DATA=DD.SERIALNO 
		WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER 
		DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL DD 
		INNER JOIN #TEMP T ON T.DATA=DD.SERIALNO 
		WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER 
	END 
	ELSE  
	BEGIN 
		DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN CHALLANDETAIL AS CD ON 
		DCL.CHALLANID=CD.CHALLANID AND DCL.BRANCHID=CD.BRANCHID 
		INNER JOIN #TEMP T ON T.DATA=CD.SERIALNO 
		WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER 
		DELETE FROM CHALLANDETAIL FROM CHALLANDETAIL CD 
		INNER JOIN #TEMP T ON T.DATA=CD.SERIALNO 
		WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER 
	END 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGF005RECORDS')
DROP PROCEDURE USP_TDS_DELETEEXISTINGF005RECORDS
GO
CREATE PROCEDURE USP_TDS_DELETEEXISTINGF005RECORDS  
@BRANCHCODES NVARCHAR(MAX),  
@QUARTER INT  
AS  
BEGIN  
 SELECT * INTO #BRANCHES FROM dbo.UDF_TDS_SPLITSTRING(@BRANCHCODES, ',')  
 SELECT DEDUCTIONID INTO #TEMP FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID  
 INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE  
 WHERE QUARTER = @QUARTER AND FORMID = 2 AND ENTRYTYPE = 4 AND TOTALDEDUCTED = 0  
 IF OBJECT_ID('TEMPDB..#BRANCHES') IS NOT NULL
	DROP TABLE #BRANCHES 
 DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL DD  
 INNER JOIN #TEMP T ON T.DEDUCTIONID = DD.DEDUCTIONID  
  IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
	DROP TABLE #TEMP
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGF010RECORDS')
DROP PROCEDURE USP_TDS_DELETEEXISTINGF010RECORDS
GO
CREATE PROCEDURE USP_TDS_DELETEEXISTINGF010RECORDS    
@BRANCHCODES NVARCHAR(MAX),    
@MONTH INT,
@ISNONTDS BIT    
AS    
BEGIN
SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES, ',')
IF(@ISNONTDS = 0)
	BEGIN        
	 SELECT DEDUCTIONID INTO #TEMP1 FROM DEDUCTIONDETAIL DD    
	 INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = DD.BRANCHID    
	 INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE    
	 WHERE MONTH(PAYMENTDATE) = @MONTH AND FORMID IN (2,3) AND ENTRYTYPE = 4    
	 DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL DD    
	 INNER JOIN #TEMP1 T ON T.DEDUCTIONID = DD.DEDUCTIONID
	END
ELSE
	BEGIN    
	 SELECT DEDUCTIONID INTO #TEMP FROM DEDUCTIONDETAIL DD    
	 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID    
	 INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE    
	 WHERE QUARTER = @MONTH AND FORMID IN (2,3) AND ENTRYTYPE = 4 AND TOTALDEDUCTED = 0    
	 DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL DD    
	 INNER JOIN #TEMP T ON T.DEDUCTIONID = DD.DEDUCTIONID
	END    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGF013RECORDS')
DROP PROCEDURE USP_TDS_DELETEEXISTINGF013RECORDS
GO
CREATE PROCEDURE USP_TDS_DELETEEXISTINGF013RECORDS      
@BRANCHCODES NVARCHAR(MAX),      
@MONTH INT      
AS      
	BEGIN      
		 SELECT * INTO #BRANCHES FROM dbo.UDF_TDS_SPLITSTRING(@BRANCHCODES, ',')  
		 SELECT DEDUCTIONID INTO #TEMP FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
		 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID      
		 INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE      
		 WHERE MONTH(PAYMENTDATE) = @MONTH AND FORMID = 1 AND ENTRYTYPE = 4   
		 IF OBJECT_ID('TEMPDB..#BRANCHES') IS NOT NULL
			DROP TABLE #BRANCHES
		 DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL DD      
		 INNER JOIN #TEMP T ON T.DEDUCTIONID = DD.DEDUCTIONID   
		 IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL  
			DROP TABLE #TEMP 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGOLTASCHALLAN')
DROP PROCEDURE USP_TDS_DELETEEXISTINGOLTASCHALLAN
GO
CREATE PROCEDURE [USP_TDS_DELETEEXISTINGOLTASCHALLAN]      
 @BRANCHID INT     
 AS      
  BEGIN      
    DELETE FROM OLTASCHALLAN WHERE BRANCHID=@BRANCHID   
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGRECORDS')
DROP PROCEDURE USP_TDS_DELETEEXISTINGRECORDS
GO
CREATE PROCEDURE USP_TDS_DELETEEXISTINGRECORDS  
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,  
@CORRECTIONSTATUS INT,  
@DEDUCTIONSNO NVARCHAR(MAX),
@ISDEDUCTION BIT  
AS  
 BEGIN  
  SELECT * INTO #DSNO FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTIONSNO,',');  
   IF(@ISDEDUCTION = 1)
	 BEGIN 
		  DELETE FROM CORRDEDUCTIONDETAIL   
		  FROM CORRDEDUCTIONDETAIL CDD  
		  INNER JOIN #DSNO D ON D.DATA = CDD.DEDUCTIONSERIALNO  
		  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = @CORRECTIONSTATUS   
	 END
   ELSE
	 BEGIN
		  DELETE FROM CORRCHALLANDETAIL   
		  FROM CORRCHALLANDETAIL CDD  
		  INNER JOIN #DSNO D ON D.DATA = CDD.CHALLANSERIALNO  
		  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 2   
	 END  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteExistingRecords_F005')
DROP PROCEDURE USP_TDS_DeleteExistingRecords_F005
GO
CREATE PROCEDURE [USP_TDS_DeleteExistingRecords_F005]      
(      
@BRANCHID INT,       
@QUARTER INT,      
@FORMID INT,      
@SECTIONID INT      
)      
AS      
BEGIN       
 SELECT       
 D.DEDUCTEEID,      
 I.PAIDDATE,      
 I.PAYMENT,      
 I.CUSTID,      
 I.CHALLANDATE,      
 I.CHALLANNO,      
 I.BSRCODE INTO #TEMP      
 FROM IMPORT_F005 I WITH(NOLOCK) INNER JOIN      
 (      
	SELECT D.DEDUCTEEID, D.REFERENCENO, D.BRANCHID 
	FROM DEDUCTEE D WITH(NOLOCK) 
	INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID      
 )D      
 ON      
 D.REFERENCENO=I.CUSTID      
 AND      
 D.BRANCHID=@BRANCHID       
 SELECT DD.DEDUCTIONID, DD.PARTPAYMENTID INTO #TEMP2 
 FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
 INNER JOIN #TEMP T      
 ON DD.PAYMENTMADE=T.PAYMENT AND DD.PAYMENTDATE=T.PAIDDATE       
 AND DD.DEDUCTEEID=T.DEDUCTEEID      
 AND DD.BRANCHID=@BRANCHID  AND DD.ENTRYTYPE=4   
 DELETE FROM FORM16A      
 FROM FORM16A F       
 INNER JOIN #TEMP2 T      
 ON F.DEDUCTIONID=T.DEDUCTIONID AND F.BRANCHID=@BRANCHID      
 DELETE FROM DEDCHALINK      
 FROM DEDCHALINK DC       
 INNER JOIN #TEMP2 T       
 ON DC.DEDUCTIONID=T.DEDUCTIONID AND DC.BRANCHID=@BRANCHID       
 DELETE FROM PARTPAYMENTDETAILS      
 FROM PARTPAYMENTDETAILS PP       
 INNER JOIN #TEMP2 T      
 ON PP.PARTPAYMENTID=T.PARTPAYMENTID AND PP.BRANCHID=@BRANCHID AND PP.FORMID=@FORMID      
 AND PP.QUARTER=@QUARTER       
 DELETE FROM DEDUCTIONDETAIL      
 FROM DEDUCTIONDETAIL DD       
 INNER JOIN #TEMP2 T      
 ON DD.DEDUCTIONID=T.DEDUCTIONID AND DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID      
 AND DD.QUARTER=@QUARTER AND DD.SECTIONID=@SECTIONID      
 DELETE FROM IMPORT_F005;      
 IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
	DROP TABLE #TEMP
 IF OBJECT_ID('TEMPDB..#TEMP2') IS NOT NULL
	DROP TABLE #TEMP2      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGRECORDSFORIMPORT_F003')
DROP PROCEDURE USP_TDS_DELETEEXISTINGRECORDSFORIMPORT_F003
GO
CREATE PROCEDURE [USP_TDS_DELETEEXISTINGRECORDSFORIMPORT_F003]  
@FORMID INT ,
@QUARTER INT
AS  
BEGIN  
    SELECT DISTINCT
		D.DEDUCTEEID,
		I.SECTIONID,
		I.BRANCHID,
		I.PAYMENTMADE,
		I.PAYMENTDATE INTO #TEMP
   FROM IMPORT_F003 I
   INNER JOIN 
	(
		SELECT D.DEDUCTEEID,D.NAME,D.PAN,I.FORMID,I.BRANCHID
		FROM DEDUCTEE D WITH(NOLOCK) 
		INNER JOIN (SELECT DISTINCT NAME,PAN,BRANCHID,FORMID FROM IMPORT_F003 WITH(NOLOCK)) I ON D.NAME = I.NAME AND D.PAN = I.PAN AND D.BRANCHID = I.BRANCHID
	) D
  ON D.BRANCHID = I.BRANCHID AND D.NAME = I.NAME AND D.PAN = I.PAN AND I.FORMID = @FORMID
  SELECT DD.DEDUCTIONID, DD.PARTPAYMENTID, DD.BRANCHID INTO #TEMP2
  FROM #TEMP T
  INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)
  ON DD.BRANCHID = T.BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.SECTIONID = T.SECTIONID 
  AND DD.DEDUCTEEID = T.DEDUCTEEID AND DD.PAYMENTDATE = T.PAYMENTDATE AND DD.PAYMENTMADE = T.PAYMENTMADE
  DELETE  
  FROM FORM16A   
  FROM FORM16A F  
  INNER JOIN #TEMP2 T ON F.DEDUCTIONID = T.DEDUCTIONID  
  DELETE   
  FROM DEDCHALINK  
  FROM DEDCHALINK DL  
  INNER JOIN #TEMP2 T ON DL.DEDUCTIONID=T.DEDUCTIONID  
  DELETE   
  FROM PARTPAYMENTDETAILS  
  FROM PARTPAYMENTDETAILS PP  
  INNER JOIN #TEMP2 T ON PP.PARTPAYMENTID=T.PARTPAYMENTID  
  AND T.BRANCHID=PP.BRANCHID  
  DELETE FROM DEDUCTIONDETAIL
  FROM DEDUCTIONDETAIL DD
  INNER JOIN #TEMP2 T ON DD.DEDUCTIONID=T.DEDUCTIONID
  AND DD.BRANCHID=T.BRANCHID
  DELETE FROM IMPORT_F003 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteExistingRecordsForImport_F004')
DROP PROCEDURE USP_TDS_DeleteExistingRecordsForImport_F004
GO
CREATE PROCEDURE [USP_TDS_DeleteExistingRecordsForImport_F004]    
@FORMID INT ,  
@QUARTER INT  
AS    
BEGIN    
  SELECT DISTINCT DD.DEDUCTEEID, I.SECTIONID, I.BRANCHID, I.PAYMENTMADE, I.PAYMENTDATE 
  INTO #TEMP   
  FROM IMPORT_F004 I WITH(NOLOCK) 
	INNER JOIN  
	(  
		SELECT D.DEDUCTEEID, I.BRANCHID, I.CUSTOMERID FROM DEDUCTEE D WITH(NOLOCK) 
		INNER JOIN 
		(
			SELECT DISTINCT CUSTOMERID, BRANCHID FROM IMPORT_F004 WITH(NOLOCK)
		)I ON D.REFERENCENO=I.CUSTOMERID AND D.BRANCHID=I.BRANCHID  
	)DD ON DD.BRANCHID=I.BRANCHID AND DD.CUSTOMERID =I.CUSTOMERID   
  SELECT DD.DEDUCTIONID, DD.PARTPAYMENTID, DD.BRANCHID INTO #TEMP2  
  FROM #TEMP T  
  INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) 
  ON DD.BRANCHID = T.BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.SECTIONID = T.SECTIONID   
  AND DD.DEDUCTEEID = T.DEDUCTEEID AND DD.PAYMENTDATE = T.PAYMENTDATE AND DD.PAYMENTMADE = T.PAYMENTMADE  
  IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
	DROP TABLE #TEMP
  DELETE    
  FROM FORM16A     
  FROM FORM16A F    
  INNER JOIN #TEMP2 T ON F.DEDUCTIONID = T.DEDUCTIONID    
  DELETE     
  FROM DEDCHALINK    
  FROM DEDCHALINK DL    
  INNER JOIN #TEMP2 T ON DL.DEDUCTIONID=T.DEDUCTIONID    
  DELETE     
  FROM PARTPAYMENTDETAILS    
  FROM PARTPAYMENTDETAILS PP    
  INNER JOIN #TEMP2 T ON PP.PARTPAYMENTID=T.PARTPAYMENTID    
  AND T.BRANCHID=PP.BRANCHID    
  DELETE FROM DEDUCTIONDETAIL  
  FROM DEDUCTIONDETAIL DD  
  INNER JOIN #TEMP2 T ON DD.DEDUCTIONID=T.DEDUCTIONID  
  AND DD.BRANCHID=T.BRANCHID  
  IF OBJECT_ID('TEMPDB..#TEMP2') IS NOT NULL
    DROP TABLE #TEMP2
  DELETE FROM IMPORT_F004       
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGRECORDSFORSALARY')
DROP PROCEDURE USP_TDS_DELETEEXISTINGRECORDSFORSALARY
GO
CREATE PROCEDURE [USP_TDS_DELETEEXISTINGRECORDSFORSALARY]  
@DATA VARCHAR(MAX)  
AS  
BEGIN  
 DECLARE @STRING VARCHAR(MAX);  
 DECLARE @STRING1 VARCHAR(MAX);  
 DECLARE @SLICE1 INT;  
 DECLARE @SLICE2 VARCHAR(MAX);  
 DECLARE @INDEX INT;  
 DECLARE @DEDUCTEEID INT;  
 DECLARE @SALARYDETAILID INT;  
 DECLARE @RETURNVALUE INT;  
 SET @INDEX=1;  
 BEGIN   
  WHILE(@INDEX<>0)  
 BEGIN  
  SET @INDEX=CHARINDEX(',',@DATA);  
  IF (@INDEX=0)SET @DATA= @DATA +',';  
   SET @INDEX=CHARINDEX(',',@DATA);  
  IF(@INDEX<>0)  
   BEGIN   
    SET @STRING= LEFT(@DATA,@INDEX -1);  
    SET @STRING1=LEFT(@DATA,CHARINDEX(',',@DATA)-1)   
    SET @SLICE1=LEFT(@STRING1, CHARINDEX('|', @STRING1)-1)  
    SET @SLICE2= SUBSTRING(@STRING,CHARINDEX('|',@STRING)+1, 100)   
   END  
     ELSE  
   BEGIN  
    SET @SLICE1='';  
    SET @SLICE2='';  
   END  
     IF(LEN(@SLICE1)>0 AND LEN(@SLICE2)> 0 )    
     BEGIN  
             SELECT @DEDUCTEEID=DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) WHERE D.BRANCHID=@SLICE1 AND D.REFERENCENO=@SLICE2  
    DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL SDE INNER JOIN SALARYDETAIL SD   
    ON   
    SDE.SALARYDETAILID=SD.SALARYDETAILID WHERE   
    SD.BRANCHID=@SLICE1 AND   
    SD.DEDUCTEEID=@DEDUCTEEID  
    DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL CD INNER JOIN SALARYDETAIL SD   
    ON   
    CD.SALARYDETAILID=SD.SALARYDETAILID WHERE   
    SD.BRANCHID=@SLICE1 AND   
    SD.DEDUCTEEID=@DEDUCTEEID  
             DELETE FROM SALARYDETAIL WHERE BRANCHID=@SLICE1 AND DEDUCTEEID=@DEDUCTEEID               
  END  
        SET @DATA = RIGHT(@DATA,LEN(@DATA) - @INDEX)         
        IF LEN(@DATA) = 0 BREAK;  
    END  
   END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGSALARY')
DROP PROCEDURE USP_TDS_DELETEEXISTINGSALARY
GO
CREATE PROCEDURE USP_TDS_DELETEEXISTINGSALARY         
@BRANCHID INT,        
@MONTHID INT,        
@REFNO NVARCHAR(MAX)        
AS        
  BEGIN        
   SELECT * INTO #REF FROM UDF_TDS_SPLITSTRING(@REFNO,',')        
   SELECT DISTINCT LC.COMID, EM.MONTHID         
   INTO #SAL         
   FROM DEDUCTEE D WITH(NOLOCK)        
   INNER JOIN #REF R ON D.REFERENCENO = R.DATA        
   INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID        
   INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID        
   INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.BRANCHID = LC.BRANCHID AND LC.COMID = EM.COMID         
   WHERE D.BRANCHID = @BRANCHID AND EM.MONTHID = @MONTHID         
   DELETE FROM EMPWORKMONTH     
   FROM EMPWORKMONTH EM     
   INNER JOIN #SAL S ON EM.COMID = S.COMID AND EM.MONTHID = S.MONTHID        
   DELETE FROM SECTION16DET         
   FROM SECTION16DET S16        
   INNER JOIN #SAL S ON S16.COMID = S.COMID AND S16.MONTHID = S.MONTHID        
   DELETE FROM RENTDETAILS  
   FROM RENTDETAILS R  
   INNER JOIN SALDETAIL SD ON R.SALDETAILID = SD.SALDETAILID  
   INNER JOIN #SAL S ON SD.COMID = S.COMID AND SD.MONTHID = S.MONTHID      
   DELETE FROM SALDETAIL         
   FROM SALDETAIL SD         
   INNER JOIN #SAL S ON SD.COMID = S.COMID AND SD.MONTHID = S.MONTHID      
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGSALARYDETAILS')
DROP PROCEDURE USP_TDS_DELETEEXISTINGSALARYDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETEEXISTINGSALARYDETAILS]  
@BRANCHID INT,  
@DEDUCTEEIDS VARCHAR(MAX) 
AS 
BEGIN 
	SELECT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTEEIDS,','); 
	DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL VI  
	INNER JOIN SALARYDETAIL AS SD ON VI.SALARYDETAILID = SD.SALARYDETAILID 
	INNER JOIN #TEMP T ON SD.DEDUCTEEID=T.DATA 
	WHERE  SD.BRANCHID = @BRANCHID; 
	/* DELETE FROM SECTION16DETAIL BASED ON BRANCHID & DEDUCTEEID */  
	DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL SEC16  
	INNER JOIN SALARYDETAIL AS SD ON SEC16.SALARYDETAILID=SD.SALARYDETAILID  
	INNER JOIN #TEMP T ON SD.DEDUCTEEID=T.DATA 
	WHERE  SD.BRANCHID = @BRANCHID; 
	/* DELETE FROM SALARYDETAIL BASED ON BRANCHID */  
	DELETE FROM SALARYDETAIL FROM SALARYDETAIL SD 
	INNER JOIN #TEMP T ON SD.DEDUCTEEID=T.DATA 
	WHERE BRANCHID = @BRANCHID; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEEXISTINGTEXTRECORDS')
DROP PROCEDURE USP_TDS_DELETEEXISTINGTEXTRECORDS
GO
CREATE PROCEDURE [USP_TDS_DELETEEXISTINGTEXTRECORDS]  
AS  
BEGIN  
 DELETE FROM IMPORT_F003;  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEFEATURESOFROLE')
DROP PROCEDURE USP_TDS_DELETEFEATURESOFROLE
GO
CREATE PROCEDURE [USP_TDS_DELETEFEATURESOFROLE]  
(  
@ROLEID INT  
)  
AS  
DELETE FROM ROLEFEATURE WHERE ROLEID=@ROLEID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEFORM16CERTIFICATENOS')
DROP PROCEDURE USP_TDS_DELETEFORM16CERTIFICATENOS
GO
CREATE PROCEDURE [USP_TDS_DELETEFORM16CERTIFICATENOS]
	@DEDUCTIONID INT
AS
	BEGIN
		DELETE FROM FORM16 WHERE DEDUCTIONID = @DEDUCTIONID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEFORM16TINDETAILS')
DROP PROCEDURE USP_TDS_DELETEFORM16TINDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETEFORM16TINDETAILS]  
@BRANCHID INT  
AS  
BEGIN  
 DELETE FROM FORM16TINMST WHERE BRANCHID=@BRANCHID  
 DELETE FROM FORM16TINL2 WHERE BRANCHID=@BRANCHID  
 DELETE FROM FORM16TINDDR WHERE BRANCHID=@BRANCHID  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEFORM26QAA')
DROP PROCEDURE USP_TDS_DELETEFORM26QAA
GO
CREATE PROCEDURE USP_TDS_DELETEFORM26QAA
	@TRANID INT 
AS  
	BEGIN 
		DELETE FROM TERMDEPOSIT26QAA WHERE TRANID = @TRANID	
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteFVUFile')
DROP PROCEDURE USP_TDS_DeleteFVUFile
GO
CREATE PROCEDURE [dbo].[USP_TDS_DeleteFVUFile]
  @BRANCHID INT,    
  @FORMID SMALLINT,    
  @QUARTER SMALLINT,    
  @ISDELETE BIT    
	AS    
		BEGIN       
			  DELETE FROM CORRDEDUCTOR WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER    
			  DELETE FROM CORRCHALLANDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER    
			  DELETE FROM CORRDEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER    
			  IF @FORMID<>1    
				  BEGIN    
					 DELETE FROM CORRNONEMPLOYEE WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER    
				  END    
			  ELSE    
				  BEGIN    
				   DELETE FROM CORREMPLOYEE WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER    
				  IF @QUARTER=4    
					  BEGIN    
						 DELETE FROM CORRSALARYDETAIL  WHERE BRANCHID=@BRANCHID     
					  END    
				  END   
			  IF @ISDELETE = 0    
				   BEGIN    
						DELETE FROM CORRECTIONDETAILS 
						WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
							AND REVISENUMBER =
							(SELECT MAX(REVISENUMBER) 
							 FROM CORRECTIONDETAILS 
							 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND ISFINALUPDATE = 0)
						SELECT MAX(REVISENUMBER) AS REVISENUMBER , ACKID
						INTO #TEMP
						FROM ACKNOREV 
						WHERE ACKID =(SELECT ACKID 
									  FROM ACKNO WITH(NOLOCK)
									  WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER ) 
						GROUP BY ACKID   
					    DELETE AR
					    FROM ACKNOREV AR
							INNER JOIN #TEMP T ON T.REVISENUMBER = AR.REVISENUMBER AND T.ACKID = AR.ACKID
					    --WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
					    DROP TABLE #TEMP 
				   END    
			  UPDATE ACKNO SET ISUPLOADED = 0 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER=@QUARTER    
		END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEIMPORTF004TEXTRECORDS')
DROP PROCEDURE USP_TDS_DELETEIMPORTF004TEXTRECORDS
GO
CREATE PROCEDURE [USP_TDS_DELETEIMPORTF004TEXTRECORDS]    
AS    
BEGIN    
 DELETE FROM IMPORT_F004;    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETELOAN')
DROP PROCEDURE USP_TDS_DELETELOAN
GO
CREATE PROCEDURE [USP_TDS_DELETELOAN]
@ID INT
AS
 BEGIN
	DECLARE @ISUSED BIT;
	SET @ISUSED = 0;
	IF EXISTS(SELECT LOANDETAILID FROM LOAN L WITH(NOLOCK) INNER JOIN LOANDETAIL LD WITH(NOLOCK) ON L.LOANID = LD.LOANID WHERE L.LOANID = @ID)
	 BEGIN
		SET @ISUSED = 1;
	 END
	ELSE
	 BEGIN
		DELETE FROM LOAN WHERE LOANID = @ID
	 END
	SELECT @ISUSED;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteLoanDetails')
DROP PROCEDURE USP_TDS_DeleteLoanDetails
GO
CREATE PROCEDURE USP_TDS_DeleteLoanDetails        
@COMID INT,   
@MONTHID INT,     
@LOANDETAILID INT        
AS          
 BEGIN       
  DECLARE @TAXABLEPERKID  INT, @GROSSAMT NUMERIC(13,2), @EXEMPTAMT NUMERIC(13,2), @TAXABLEAMT NUMERIC(13,2);  
  SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH(NOLOCK) WHERE COMID = @COMID AND PERKID = 6 AND MONTHID = @MONTHID
  DELETE FROM LOANDETAIL WHERE LOANDETAILID = @LOANDETAILID
  SELECT @GROSSAMT = ISNULL(SUM(L.GROSSAMT),0), @EXEMPTAMT = ISNULL(SUM(L.EXEMPTAMT),0) FROM LOANDETAIL L WITH (NOLOCK) 
  INNER JOIN TAXABLEPERQUISITE T WITH(NOLOCK) ON L.TAXABLEPERKID = T.TAXABLEPERKID 
  WHERE T.TAXABLEPERKID  = @TAXABLEPERKID    
  UPDATE TAXABLEPERQUISITE SET GROSSAMT = @GROSSAMT, EXEMPTAMT = @EXEMPTAMT, TAXABLEAMT = @GROSSAMT - @EXEMPTAMT 
   WHERE TAXABLEPERKID  = @TAXABLEPERKID    
  SELECT @TAXABLEPERKID   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEMEDICALREIMBURSEMENT')
DROP PROCEDURE USP_TDS_DELETEMEDICALREIMBURSEMENT
GO
CREATE PROCEDURE [USP_TDS_DELETEMEDICALREIMBURSEMENT]
@COMID INT,
@MONTHID INT
AS  
  BEGIN  
	 DECLARE @TAXABLEPERKID INT;  
	 SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK) WHERE COMID = @COMID AND PERKID = 16 AND MONTHID = @MONTHID;     
	 DELETE FROM MEDICALREIMBURSEMENT WHERE TAXABLEPERKID = @TAXABLEPERKID;
	 DELETE FROM TAXABLEPERQUISITE WHERE TAXABLEPERKID = @TAXABLEPERKID;  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETENONEMPLOYEE')
DROP PROCEDURE USP_TDS_DELETENONEMPLOYEE
GO
CREATE PROCEDURE [dbo].[USP_TDS_DELETENONEMPLOYEE]  
     @DEDUCTEEID INT  
AS  
 BEGIN  
	DECLARE @RETURNVALUE INT,@NONEMPLOYEEID INT  
	IF  EXISTS (SELECT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID) OR 
		EXISTS(SELECT DEDUCTEEID FROM REPORTPAYMENT WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID) OR
		EXISTS(SELECT DEDUCTEEID FROM FORM15GBASIC WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID) OR
		EXISTS(SELECT DEDUCTEEID FROM FORM15HBASIC WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID)
		BEGIN  
			SET @RETURNVALUE = -1; /* IF DEDUCTION DETAILS FOUND,THEN RETURN -1 */  
		END  
	ELSE  
		BEGIN  
			SELECT @NONEMPLOYEEID = NONEMPLOYEEID FROM NONEMPLOYEE WHERE DEDUCTEEID = @DEDUCTEEID;  
			DELETE FROM NONEMPLOYEE WHERE DEDUCTEEID = @DEDUCTEEID AND NONEMPLOYEEID = @NONEMPLOYEEID;  
			SET @RETURNVALUE = 1; /* IF DEDUCTION DETAILS ARE NOT FOUND,THEN RETURN 1 */  
		END  
	SELECT @RETURNVALUE;        
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEOTHERINCOMESOURCES')
DROP PROCEDURE USP_TDS_DELETEOTHERINCOMESOURCES
GO
CREATE PROCEDURE [USP_TDS_DELETEOTHERINCOMESOURCES]
@SOURCEID INT
AS
 BEGIN
	    DELETE FROM OTHERINCOMESOURCES WHERE SOURCEID = @SOURCEID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeletePartiallyImportedData')
DROP PROCEDURE USP_TDS_DeletePartiallyImportedData
GO
CREATE PROCEDURE USP_TDS_DeletePartiallyImportedData
@ISTD BIT,
@DEDUCTIONID INT,
@MONTHID INT
AS
	BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX);
	SET @SQLQUERY = 'DELETE FROM DEDUCTIONDETAIL WHERE FORMID IN (2,3) AND ENTRYTYPE = 4 AND MONTH(DEDUCTEDDATE) = ' + CAST(@MONTHID AS VARCHAR) + ' AND DEDUCTIONID > ' + CAST(@DEDUCTIONID AS VARCHAR);
	IF(@ISTD = 1)
		BEGIN
			SET @SQLQUERY = @SQLQUERY + ' AND SECTIONID IN (5,17)'
		END
	ELSE
		BEGIN
			SET @SQLQUERY = @SQLQUERY + ' AND SECTIONID NOT IN (5,17)'
		END
	EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEPARTPAYMENTDETAIL')
DROP PROCEDURE USP_TDS_DELETEPARTPAYMENTDETAIL
GO
CREATE PROCEDURE [USP_TDS_DELETEPARTPAYMENTDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTIONID INT
AS
	BEGIN
		DECLARE @PARTPAYMENTID INT;				
		SELECT  @PARTPAYMENTID = PARTPAYMENTID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID = @DEDUCTIONID;				
		DELETE FROM PARTPAYMENTDETAILS WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEPARTPAYMENTFORFINALUPDATE')
DROP PROCEDURE USP_TDS_DELETEPARTPAYMENTFORFINALUPDATE
GO
CREATE PROCEDURE [USP_TDS_DELETEPARTPAYMENTFORFINALUPDATE]
				@BRANCHID INT,
				@FORMID INT,
				@QUARTER INT
AS
BEGIN
   		DECLARE @DEDUCTIONDETAIL TABLE(ID INT IDENTITY(1,1),PARTPAYMENTID INT,DEDUCTIONID INT,BRANCHID INT,FORMID INT,QUARTER INT)
		INSERT INTO @DEDUCTIONDETAIL
		SELECT DD.PARTPAYMENTID,DD.DEDUCTIONID,CDD.BRANCHID,CDD.FORMID,CDD.QUARTER
		   FROM CORRDEDUCTIONDETAIL CDD  
				     INNER JOIN
				DEDUCTIONDETAIL DD
			ON CDD.DEDUCTIONID=DD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID AND CDD.FORMID=DD.FORMID AND CDD.QUARTER=DD.QUARTER
			         INNER JOIN 
			    PARTPAYMENTDETAILS PDD 
			ON DD.PARTPAYMENTID=PDD.PARTPAYMENTID AND DD.BRANCHID=PDD.BRANCHID AND DD.FORMID=PDD.FORMID AND DD.QUARTER=PDD.QUARTER 						  
		WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=4
		DECLARE @ROWCOUNT INT,@MAXROWCOUNT INT
		SET @ROWCOUNT=1;
		SELECT @MAXROWCOUNT=COUNT(ID) FROM @DEDUCTIONDETAIL
		DECLARE @PREVIOUSPARTPAYMENTID INT
		SET @PREVIOUSPARTPAYMENTID=-1;
		WHILE(@ROWCOUNT<=@MAXROWCOUNT)
		BEGIN
				DECLARE @DEDUCTIONID INT,@PARTPAYMENTID INT
				DECLARE @DEDUCTIONCOUNT INT
				SELECT @DEDUCTIONID=DEDUCTIONID,@PARTPAYMENTID=PARTPAYMENTID					  
				  FROM @DEDUCTIONDETAIL 
				 WHERE ID=@ROWCOUNT
				  SELECT @DEDUCTIONCOUNT=COUNT(DD.DEDUCTIONID) 
				    FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				          INNER JOIN 
				        PARTPAYMENTDETAILS PDD WITH(NOLOCK)
				     ON DD.BRANCHID=PDD.BRANCHID AND DD.FORMID=PDD.FORMID AND DD.QUARTER=PDD.QUARTER AND DD.PARTPAYMENTID=PDD.PARTPAYMENTID
				   WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND DD.PARTPAYMENTID=@PARTPAYMENTID;
				  IF(@DEDUCTIONCOUNT =1 )
					  BEGIN
						DELETE FROM PARTPAYMENTDETAILS WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND PARTPAYMENTID=@PARTPAYMENTID
						DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND DEDUCTIONID=@DEDUCTIONID
						--UPDATE DEDUCTIONDETAIL SET PAYMENTMADE=ORGPAYMENTMADE,
						--						   INCOMETAX=ORGINCOMETAX,
						--						   SURCHARGE=ORGSURCHARGE,
						--						   EDUCATIONCESS=ORGEDUCATIONCESS,
						--						   TOTALDEDUCTED=ORGTOTALDEDUCTED
						--					 WHERE DEDUCTIONID=@DEDUCTIONID;
					  END
				  ELSE 
					  BEGIN
						DELETE FROM DEDUCTIONDETAIL WHERE DEDUCTIONID=@DEDUCTIONID;
						DECLARE @ORGPAYMENTMADE NUMERIC(13,2),@ORGINCOMETAX NUMERIC(13,2),@ORGSURCHARGE NUMERIC(13,2),
								@ORGEDUCATIONCESS NUMERIC(13,2),@ORGTOTALDEDUCTED NUMERIC(13,2)
						SELECT @ORGPAYMENTMADE=SUM(PAYMENTMADE),@ORGINCOMETAX=SUM(INCOMETAX),
							   @ORGSURCHARGE=SUM(SURCHARGE),@ORGEDUCATIONCESS=SUM(EDUCATIONCESS),
							   @ORGTOTALDEDUCTED=SUM(TOTALDEDUCTED) 
						  FROM DEDUCTIONDETAIL WITH(NOLOCK)
						 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND PARTPAYMENTID=@PARTPAYMENTID
						UPDATE DEDUCTIONDETAIL SET ORGPAYMENTMADE=@ORGPAYMENTMADE,
												   ORGINCOMETAX=@ORGINCOMETAX,
												   ORGEDUCATIONCESS=@ORGEDUCATIONCESS,
												   ORGSURCHARGE=@ORGSURCHARGE,
												   ORGTOTALDEDUCTED=@ORGTOTALDEDUCTED
											WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND PARTPAYMENTID=@PARTPAYMENTID				    
						 /*UPDATING BALANCE IN PARTPAYMENTDETAILS TABLE*/
						 EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID
					  END	
				  DECLARE @DEDUCTIONSERIALNO INT
				  /*GETTING THE DEDUCTIONSERIALNO FROM CORRDEDUCTION FOR DELETING BOTH ORIGINAL AND DELETED RECORD*/
				  SELECT @DEDUCTIONSERIALNO=DEDUCTIONSERIALNO FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
				   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND DEDUCTIONID=@DEDUCTIONID AND CORRECTIONSTATUS=4
				  DELETE FROM CORRDEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND DEDUCTIONSERIALNO=@DEDUCTIONSERIALNO
				  --/*UPDATING BALANCE IN PARTPAYMENTDETAILS TABLE*/
				  --EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID			
			SET @ROWCOUNT=@ROWCOUNT+1;
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEPPDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_DELETEPPDEDUCTIONDETAIL
GO
CREATE PROCEDURE [USP_TDS_DELETEPPDEDUCTIONDETAIL]
 @DEDUCTIONID INT
AS
 BEGIN
  DECLARE @BRANCHID INT,@FORMID INT,@QUARTER INT,@PARTPAYMENTID INT,@RECORDCOUNT INT;
  /* GET PARTPAYMENTID FROM DEDUCTIONDETAIL BASED ON DEDUCTIONID */
  SELECT  @BRANCHID = BRANCHID,@FORMID = FORMID,@QUARTER = [QUARTER],@PARTPAYMENTID = PARTPAYMENTID
  FROM    DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID = @DEDUCTIONID;
  /* CHECK FOR RECORDS IN PARTPAYMENTDETAILS BASED ON PARTPAYMENTID*/
  SELECT @RECORDCOUNT = COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE PARTPAYMENTID = @PARTPAYMENTID
  AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
  IF @RECORDCOUNT > 1
   BEGIN
    /* DELETE RECORDS FROM DEDCHALINK */
    DELETE FROM DEDCHALINK WHERE DEDUCTIONID = @DEDUCTIONID;
    UPDATE DEDUCTIONDETAIL SET REFDEDUCTIONID = NULL WHERE REFDEDUCTIONID = @DEDUCTIONID;
    /* DELETE RECORDS FROM DEDUCTIONDETAIL BASED ON DEDUCTIONID*/
    DELETE FROM DEDUCTIONDETAIL WHERE DEDUCTIONID = @DEDUCTIONID;
    /*UPDATE THE BALANCE IN PARTPAYMENTDETAILS BASED ON PARTPAYMENTID*/
    EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID;
   END
  ELSE
   BEGIN
    /* UPDATE INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED BASED ON DEDUCTIONID */
    UPDATE DEDUCTIONDETAIL
    SET    INCOMETAX = ORGINCOMETAX,SURCHARGE = ORGSURCHARGE,EDUCATIONCESS = ORGEDUCATIONCESS,TOTALDEDUCTED = ORGTOTALDEDUCTED,PAYMENTMADE = ORGPAYMENTMADE
    WHERE  DEDUCTIONID = @DEDUCTIONID;
    /* DELETE RECORDS FROM DEDCHALINK*/
    DELETE FROM DEDCHALINK WHERE DEDUCTIONID = @DEDUCTIONID;
    /* DELETE RECORD FROM DEDCHALINK BASED ON BRANCHID,FORMID,[QUARTER] & DEDUCTIONID*/
    DELETE FROM PARTPAYMENTDETAILS
    WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
   END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEPURCHASEORDER')
DROP PROCEDURE USP_TDS_DELETEPURCHASEORDER
GO
CREATE PROCEDURE [USP_TDS_DELETEPURCHASEORDER]
(
@ORDERID INT
)
AS
BEGIN
 IF(EXISTS(SELECT ORDERID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE ORDERID=@ORDERID))
 BEGIN
  SELECT 0
 END
 ELSE
 BEGIN
  DELETE FROM PURCHASEORDER WHERE ORDERID=@ORDERID
  SELECT 1
 END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETERECORDSCHALLANMAKEPAYMENT')
DROP PROCEDURE USP_TDS_DELETERECORDSCHALLANMAKEPAYMENT
GO
CREATE PROCEDURE [USP_TDS_DELETERECORDSCHALLANMAKEPAYMENT]
	@ID VARCHAR(MAX)
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY='DELETE FROM CHALLANMAKEPAYMENT WHERE ID NOT IN (' + @ID + ')'
      EXEC SP_EXECUTESQL @QUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEREGULARDETAILS')
DROP PROCEDURE USP_TDS_DELETEREGULARDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETEREGULARDETAILS]
			@BRANCHID INT,
			@FORMID SMALLINT,
			@QUARTER SMALLINT
AS
BEGIN
	/*DELETEING FROM DEDUCTION CHALLAN LINK TABLE OF CURRENT BRANCH,FORM AND QUARTER*/
	DELETE FROM DEDCHALINK FROM DEDCHALINK DCL
								 INNER JOIN
								DEDUCTIONDETAIL DD
							 ON DCL.DEDUCTIONID=DD.DEDUCTIONID AND DCL.BRANCHID=DD.BRANCHID
						  WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
	IF(@FORMID<>1)
	/*DELETEING FROM FORM16A TABLE CURRENT BRANCH,FORM AND QUARTER*/
	DELETE FROM FORM16A FROM FORM16A F16A
							 INNER JOIN
							 DEDUCTIONDETAIL DD
						  ON F16A.DEDUCTIONID=DD.DEDUCTIONID AND F16A.BRANCHID=DD.BRANCHID
					   WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND QUARTER=@QUARTER
	ELSE
	/*DELETEING FROM FORM16A TABLE CURRENT BRANCH,FORM AND QUARTER*/
	DELETE FROM FORM16 FROM FORM16 F16
							 INNER JOIN
							 DEDUCTIONDETAIL DD
						  ON F16.DEDUCTIONID=DD.DEDUCTIONID AND F16.BRANCHID=DD.BRANCHID
					   WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND QUARTER=@QUARTER
	/*DELETING DEDUCTION DETAIL OF CURRENT BRANCH,FORM AND QUARTER*/
	DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
	/*DELETING CHALLAN DETAIL OF CURRENT BRANCH,FORM AND QUARTER*/
	DELETE FROM CHALLANDETAIL FROM CHALLANDETAIL CD
									  LEFT JOIN
									DEDCHALINK DCL
								 ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID
							  WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER AND DCL.CHALLANID IS NULL
	IF(@FORMID=1 AND @QUARTER=4)
	BEGIN
		/*DELETING SECTION16DETAIL OF CURRENT BRANCH*/
		DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL S16A
											INNER JOIN
										 SALARYDETAIL SD
									  ON S16A.SALARYDETAILID=SD.SALARYDETAILID
								   WHERE SD.BRANCHID=@BRANCHID
		/*DELETING CHAPTERVIADETAILS OF CURRENT BRANCH*/
		DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL CVIA
											INNER JOIN
										 SALARYDETAIL SD
									  ON CVIA.SALARYDETAILID=SD.SALARYDETAILID
								   WHERE SD.BRANCHID=@BRANCHID
		/*DELETING SALARY DETAILS OF CURRENT BRANCH*/
		DELETE FROM SALARYDETAIL WHERE BRANCHID=@BRANCHID
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteRemittingBank')
DROP PROCEDURE USP_TDS_DeleteRemittingBank
GO
CREATE PROCEDURE [USP_TDS_DeleteRemittingBank]
	   @BANKID INT
AS
	BEGIN
		IF((SELECT COUNT(BANKID) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BANKID=@BANKID)>0)
			BEGIN
				SET @BANKID=-1;
			END
		ELSE
			BEGIN
				DELETE FROM REMITTINGBANK WHERE BANKID=@BANKID;
			END
		SELECT @BANKID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETERENTDETAILS')
DROP PROCEDURE USP_TDS_DELETERENTDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETERENTDETAILS]
@COMID INT,
@MONTHID INT
AS
 BEGIN
	DELETE FROM RENTDETAILS 
	FROM RENTDETAILS RS 
	INNER JOIN SALDETAIL SD ON RS.SALDETAILID = SD.SALDETAILID
	WHERE COMID = @COMID AND MONTHID = @MONTHID AND SALARYHEADID = 3
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteReportPaymentDetails')
DROP PROCEDURE USP_TDS_DeleteReportPaymentDetails
GO
CREATE PROCEDURE [USP_TDS_DeleteReportPaymentDetails]
@BRANCHID INT,
@ID INT
AS
BEGIN
	IF EXISTS(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE REPORTPAYMENTID = @ID)
	  BEGIN
		SELECT -1;
	  END
	ELSE
	 BEGIN
		DELETE FROM REPORTPAYMENT WHERE ID=@ID AND BRANCHID=@BRANCHID
		SELECT 1;
	 END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETERESPONSIBLEPERSON')
DROP PROCEDURE USP_TDS_DELETERESPONSIBLEPERSON
GO
CREATE PROCEDURE [USP_TDS_DELETERESPONSIBLEPERSON]
              @PERSONID INT
AS
	BEGIN
		DELETE FROM RESPONSIBLEPERSON WHERE PERSONID=@PERSONID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteRevAcknowledgementDetail')
DROP PROCEDURE USP_TDS_DeleteRevAcknowledgementDetail
GO
CREATE PROCEDURE [USP_TDS_DeleteRevAcknowledgementDetail]
	@REVACKID INT
AS
BEGIN	
	DECLARE @REVISENUMBER INT;
	DECLARE @ACKID INT;
	SELECT @REVISENUMBER= REVISENUMBER,@ACKID=ACKID FROM ACKNOREV WITH(NOLOCK) WHERE ACKNOREVID = @REVACKID;
	DECLARE @BRANCHID INT,@FORMID INT,@QUARTER INT;		
	SELECT @BRANCHID=BRANCHID, @FORMID=FORMID,@QUARTER=[QUARTER] FROM ACKNO WITH(NOLOCK) WHERE ACKID = @ACKID 
	SET @REVISENUMBER = @REVISENUMBER + 1;
	IF EXISTS(SELECT BRANCHID FROM CORRECTIONDETAILS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID = @FORMID AND [QUARTER]=@QUARTER AND REVISENUMBER = @REVISENUMBER)
	BEGIN	
		SELECT -1;
	END
	ELSE
	BEGIN
		DELETE FROM ACKNOREV WHERE ACKNOREVID=@REVACKID ;
		UPDATE ACKNOREV SET REVISENUMBER=REVISENUMBER-1 
		WHERE ACKID = @ACKID AND REVISENUMBER > @REVISENUMBER		
		SELECT 1;
	END	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEROLEBASEDONID')
DROP PROCEDURE USP_TDS_DELETEROLEBASEDONID
GO
CREATE PROCEDURE [USP_TDS_DELETEROLEBASEDONID]
(
@ROLEID INT
)
AS
IF(EXISTS(SELECT ROLEID FROM ROLES WITH(NOLOCK)
 WHERE ROLEID IN(SELECT ROLEID FROM ROLEFEATURE WITH(NOLOCK) WHERE ROLEID=@ROLEID)OR ROLEID IN (SELECT ROLEID FROM ROLEUSER WITH(NOLOCK) WHERE ROLEID=@ROLEID)))
 BEGIN
 SELECT -1;
 END
ELSE
 BEGIN
  DELETE FROM ROLEUSER WHERE ROLEID=@ROLEID;
  DELETE FROM ROLEFEATURE WHERE ROLEID=@ROLEID
  DELETE FROM ROLES WHERE ROLEID=@ROLEID
  SELECT 1;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteRoleUsers')
DROP PROCEDURE USP_TDS_DeleteRoleUsers
GO
CREATE PROCEDURE [USP_TDS_DeleteRoleUsers]
@ROLEID INT,    
@USERID INT
AS
	BEGIN
		DELETE FROM ROLEUSER WHERE  USERID=@USERID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETESALARYDETAIL')
DROP PROCEDURE USP_TDS_DELETESALARYDETAIL
GO
CREATE PROCEDURE [USP_TDS_DELETESALARYDETAIL]
	@DEDUCTEEID INT
AS
	BEGIN
		DELETE FROM SALARYDETAIL WHERE DEDUCTEEID=@DEDUCTEEID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETESALARYDETAILS')
DROP PROCEDURE USP_TDS_DELETESALARYDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETESALARYDETAILS]
@BRANCHID INT,
@SALDETID INT
AS
BEGIN
	DELETE FROM SALARYDETAIL WHERE BRANCHID=@BRANCHID AND SALARYDETAILID=@SALDETID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteSalaryHead')
DROP PROCEDURE USP_TDS_DeleteSalaryHead
GO
CREATE PROCEDURE [USP_TDS_DeleteSalaryHead]
@SALARYHEADID INT
AS
  BEGIN
	IF EXISTS(SELECT SALARYHEADID FROM SALDETAIL WITH(NOLOCK) WHERE SALARYHEADID = @SALARYHEADID)
		BEGIN
			SELECT -1;
		END
	ELSE
	  BEGIN
		DELETE FROM SALARYHEAD WHERE SALARYHEADID = @SALARYHEADID
		SELECT @SALARYHEADID;
	  END
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETESALDETAIL')
DROP PROCEDURE USP_TDS_DELETESALDETAIL
GO
CREATE PROCEDURE USP_TDS_DELETESALDETAIL  
@MONTH INT,  
@COMID INT  
AS  
  BEGIN  
	 DELETE FROM SALDETAIL WHERE MONTHID  = @MONTH AND COMID = @COMID AND SALARYHEADID <=7 AND SALARYHEADID <> 3
	 UPDATE SALDETAIL SET RECOVERYAMT = 0, GROSSAMT2 = 0, GROSSAMT3 = 0, EXEMPTAMT = 0,
			NETAMT = GROSSAMT1 WHERE MONTHID  = @MONTH AND COMID = @COMID AND SALARYHEADID = 3
	 DELETE FROM SECTION16DET WHERE MONTHID = @MONTH AND COMID = @COMID  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETESALDETAILS')
DROP PROCEDURE USP_TDS_DELETESALDETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETESALDETAILS]   
@COMID INT,    
@MONTH INT    
AS    
 BEGIN    
  DECLARE @ERROR INT;    
  SET @ERROR = 1;    
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED      
  BEGIN TRANSACTION        
    BEGIN TRY       
    DELETE FROM SECTION16DET WHERE COMID = @COMID AND MONTHID = @MONTH   
    DELETE FROM RENTDETAILS   
    FROM RENTDETAILS R  
    INNER JOIN SALDETAIL SD ON R.SALDETAILID = SD.SALDETAILID  
    WHERE COMID = @COMID AND MONTHID = @MONTH   
    DELETE FROM SALDETAIL WHERE COMID = @COMID AND MONTHID = @MONTH    
   -- UPDATE SALARYDETAIL SET BASICSALARY = NULL, TAXABLEALLOWANCE = NULL,DEDUCTIONUS16 = NULL,  
   --INCOMEFROMSALARIES = NULL, GROSSSALARY = NULL, TOTALTAXABLEINCOME = NULL,TOTALDEDUNDERCHAPTERVIA =  NULL,
   --TAXONTOTALINCOME = NULL  
   -- FROM SALARYDETAIL SD   
   -- INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID  
   -- INNER JOIN EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID  
   -- INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID  
   -- INNER JOIN EMPWORKMONTH EM ON EM.COMID = LC.COMID AND EM.BRANCHID = LC.BRANCHID  
   -- WHERE LC.COMID = @COMID AND EM.MONTHID = @MONTH   
    DELETE FROM SECTION16DETAIL   
    FROM SECTION16DETAIL S16  
    INNER JOIN SALARYDETAIL SD ON SD.SALARYDETAILID = S16.SALARYDETAILID  
    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID  
    INNER JOIN EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID  
    INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID  
    INNER JOIN EMPWORKMONTH EM ON EM.COMID = LC.COMID  
    WHERE LC.COMID = @COMID AND EM.MONTHID = @MONTH  
   COMMIT          
    END TRY       
    BEGIN CATCH      
  SET @ERROR=-1      
  ROLLBACK      
    END CATCH      
 SELECT @ERROR;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETESECTION16DETAILS')
DROP PROCEDURE USP_TDS_DELETESECTION16DETAILS
GO
CREATE PROCEDURE [USP_TDS_DELETESECTION16DETAILS]
	@SALARYDETAILID INT
AS
	BEGIN
		DELETE FROM SECTION16DETAIL WHERE SALARYDETAILID=@SALARYDETAILID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETETAXABLEINCOME')
DROP PROCEDURE USP_TDS_DELETETAXABLEINCOME
GO
CREATE PROCEDURE [USP_TDS_DELETETAXABLEINCOME]    
@COMID INT,  
@BRANCHID INT
AS  
 BEGIN  
 UPDATE SALARYDETAIL SET TAXONTOTALINCOME = 0,  
  SURCHARGE = 0, EDUCATIONCESS = 0,  
  TOTALINCOMETAXPAYABLE = 0,   
  PREVEMPINCOMETAX = 0,  
  TAXPAYABLE = 0, RELIEFUS89 = 0, NETTAXPAYABLE = 0 
  FROM SALARYDETAIL SD   
  INNER JOIN EMPLOYEE E ON SD.DEDUCTEEID = E.DEDUCTEEID  
  INNER JOIN DEDUCTEE D ON D.DEDUCTEEID  = E.DEDUCTEEID  
  INNER JOIN LINKTOTC  LC ON LC.EMPLOYEEID = E.EMPLOYEEID  
  WHERE LC.COMID = @COMID AND LC.BRANCHID = @BRANCHID  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteTaxablePerquiste')
DROP PROCEDURE USP_TDS_DeleteTaxablePerquiste
GO
CREATE PROCEDURE [USP_TDS_DeleteTaxablePerquiste]
@COMID INT,
@MONTHID INT,
@DELETEALL BIT
AS
 BEGIN
	DECLARE @TAXABLEPERKID INT;
	IF(@DELETEALL = 1)
	 BEGIN
		SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK) WHERE COMID = @COMID AND PERKID = 1	 AND MONTHID = @MONTHID	
		DELETE FROM ACCOMODATION WHERE TAXABLEPERKID = @TAXABLEPERKID;
		SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK) WHERE COMID = @COMID AND PERKID = 16 AND MONTHID = @MONTHID
		DELETE FROM MEDICALREIMBURSEMENT WHERE TAXABLEPERKID = @TAXABLEPERKID;
		SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK) WHERE COMID = @COMID AND PERKID = 6 AND MONTHID = @MONTHID
		DELETE FROM LOANDETAIL WHERE TAXABLEPERKID = @TAXABLEPERKID;
	    DELETE FROM TAXABLEPERQUISITE WHERE COMID = @COMID AND MONTHID = @MONTHID
	 END	
	ELSE
	 BEGIN
		DELETE FROM TAXABLEPERQUISITE WHERE COMID = @COMID AND PERKID NOT IN (6,16) AND MONTHID = @MONTHID
	 END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETETAXPAYABLE')
DROP PROCEDURE USP_TDS_DELETETAXPAYABLE
GO
CREATE PROCEDURE [USP_TDS_DELETETAXPAYABLE]
@COMID INT,
@BRANCHID INT
AS
 BEGIN
 UPDATE SALARYDETAIL SET TAXONTOTALINCOME = 0,
  SURCHARGE = 0, EDUCATIONCESS = 0,
  TOTALINCOMETAXPAYABLE =0,
  PREVEMPINCOMETAX = 0,
  TAXPAYABLE = 0, RELIEFUS89 = 0, NETTAXPAYABLE = 0
  FROM SALARYDETAIL SD
  INNER JOIN EMPLOYEE E ON SD.DEDUCTEEID = E.DEDUCTEEID
  INNER JOIN DEDUCTEE D ON D.DEDUCTEEID  = E.DEDUCTEEID
  INNER JOIN LINKTOTC  LC ON LC.EMPLOYEEID = E.EMPLOYEEID
  WHERE LC.COMID = @COMID AND LC.BRANCHID = @BRANCHID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DeleteTdsData')
DROP PROCEDURE USP_TDS_DeleteTdsData
GO
CREATE PROCEDURE [USP_TDS_DeleteTdsData]   
@MONTHYEAR INT,  
@BRANCHIDS NVARCHAR(MAX)  
AS
	BEGIN
		SELECT * INTO #BRANCHES FROM dbo.UDF_TDS_SplitString(@BRANCHIDS,',')
		DELETE FROM PARKEDAMOUNT 
		FROM PARKEDAMOUNT PA
		INNER JOIN #BRANCHES B ON B.DATA = PA.BRANCHID
		WHERE MONTHYEAR=@MONTHYEAR AND FORMTYPE<>'26QV'
		IF OBJECT_ID('TEMPDB..#BRANCHES') IS NOT NULL
			DROP TABLE #BRANCHES
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETETEXTRECORDS')
DROP PROCEDURE USP_TDS_DELETETEXTRECORDS
GO
CREATE PROCEDURE [USP_TDS_DELETETEXTRECORDS]
@BRANCHID INT,
@MONTHID INT
AS
  BEGIN
  DELETE FROM TEXTRECORDS WHERE  MONTHID=@MONTHID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEUNLINKEDDEDUCTIONS')
DROP PROCEDURE USP_TDS_DELETEUNLINKEDDEDUCTIONS
GO
CREATE PROCEDURE [USP_TDS_DELETEUNLINKEDDEDUCTIONS]
@BRANCHID INT,
@DEDUCTIONIDS NVARCHAR(MAX)
AS
 BEGIN
	DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTIONID IN 
	(SELECT * FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTIONIDS,','))
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELETEUSER')
DROP PROCEDURE USP_TDS_DELETEUSER
GO
CREATE PROCEDURE [dbo].[USP_TDS_DELETEUSER]
	@USERID INT
AS
BEGIN
    IF(EXISTS(SELECT USERID FROM ROLEUSER WHERE USERID = @USERID))
	BEGIN
		SELECT -1;
	END
	ELSE
	BEGIN
		IF(EXISTS(SELECT USERID FROM ASSIGNBRANCH WHERE USERID = @USERID))
		BEGIN
			SELECT -2;
		END	
		ELSE
		BEGIN
			IF(EXISTS(SELECT USERID FROM ASSIGNBRANCHCUS WHERE USERID = @USERID))
			BEGIN
				SELECT -3;
			END
			ELSE
			BEGIN
				IF(EXISTS(SELECT USERID FROM PASSWORDHISTORY WHERE USERID = @USERID))
				BEGIN
					DELETE FROM DBO.PASSWORDHISTORY WHERE USERID = @USERID
				END
				DELETE FROM DBO.USERMASTER WHERE USERID = @USERID
				SELECT 1;
			END
		END
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DELTEEXCELUSERBRANCH')
DROP PROCEDURE USP_TDS_DELTEEXCELUSERBRANCH
GO
CREATE PROCEDURE [USP_TDS_DELTEEXCELUSERBRANCH]
AS
BEGIN
	DELETE FROM USERBRANCH ;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DIRECTTAX')
DROP PROCEDURE USP_TDS_DIRECTTAX
GO
CREATE PROCEDURE USP_TDS_DIRECTTAX
AS
BEGIN
SELECT ROW_NUMBER() OVER (ORDER BY CHALLANID ASC)  SRNO, CHALLANTOTAL  AS RECIEPT,'MAJORHEADCODE'=CASE WHEN  ISCOMPANY=1 THEN '0020' ELSE '0021' END,  
'MAJORHEAD'=CASE WHEN  ISCOMPANY=1 THEN 'COMPANY DEDUCTEES' ELSE 'NON COMPANY DEDUCTEES' END,'SCROLLNO'=CASE WHEN ISNULL(RTFILENO,'')='' THEN '' ELSE    
  CASE WHEN  ISCOMPANY=1 THEN 'C'+CAST(RTFILENO AS VARCHAR)ELSE 'I'+CAST(RTFILENO AS VARCHAR) END END,CHALLANPAIDDATE ,  
  0 AS CHALLANCOUNT    
 FROM CHALLANDETAIL CD  
 INNER JOIN REMITTINGBANK RB ON CD.BANKID = RB.BANKID   
 WHERE  FORMID <> 1 AND ISAUTOGENERATED=1 AND ISOLTASINCLUDED=1 AND ISTTUMINCLUDED=1-- AND RB.BSRCODE = '0290179'
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DirectTaxes')
DROP PROCEDURE USP_TDS_DirectTaxes
GO
CREATE PROCEDURE [USP_TDS_DirectTaxes]
@FROMDATE SMALLDATETIME = NULL
	AS
	BEGIN
		SELECT ROW_NUMBER() OVER (ORDER BY CD.CHALLANPAIDDATE, CD.BANKCHALLANNO) [SR. NO.], 
		(SELECT BSRCODE FROM REMITTINGBANK WHERE BANKID = CD.BANKID) 
		+ CASE WHEN DAY(CHALLANPAIDDATE) < 10 THEN '0' ELSE '' END + CAST(DAY(CHALLANPAIDDATE) AS VARCHAR) 
		+ CASE WHEN MONTH(CHALLANPAIDDATE) < 10 THEN '0' ELSE '' END + CAST(MONTH(CHALLANPAIDDATE) AS VARCHAR) 
		+ CAST(YEAR(CHALLANPAIDDATE) AS VARCHAR) + BANKCHALLANNO AS CIN,
		D.DEDUCTORNAME AS [NAME OF ASSESSEE], D.TAN, D.PAN, 
		CONVERT(VARCHAR, CD.CHALLANPAIDDATE, 103) [PAYMENT DATE], CD.CHALLANTOTAL [PAYMENT AMOUNT]
		FROM CHALLANDETAIL CD WITH(NOLOCK)
		INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CD.BRANCHID = BD.BRANCHID AND CD.QUARTER = BD.QUARTER
		INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID
		WHERE ISAUTOGENERATED = 1 AND ISOLTASINCLUDED = 1 AND CONVERT(VARCHAR,CHALLANPAIDDATE,103) = CONVERT(VARCHAR,@FROMDATE,103) 
		ORDER BY CD.CHALLANPAIDDATE, CD.BANKCHALLANNO
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_DisplayRevRequest')
DROP PROCEDURE USP_TDS_DisplayRevRequest
GO
CREATE PROCEDURE USP_TDS_DisplayRevRequest   
 @BRANCHID INT      
AS      
BEGIN      
 SELECT ISNULL(NOCHALLANPAY,0)NOCHALLANPAY,
 ISNULL(ISOPTION1,0)ISOPTION1 FROM COMPANYBRANCH      
 WHERE BRANCHID=@BRANCHID      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_EMPLOYEEBULKDELETE')
DROP PROCEDURE USP_TDS_EMPLOYEEBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_EMPLOYEEBULKDELETE]    
@BRANCHID INT,    
@DEDUCTEEID INT = NULL,    
@ISQUARTERLOCKED BIT = 0 ,    
@LOCKEDQUARTERS VARCHAR(50)= ''    
AS    
 BEGIN    
 DECLARE @SQLQUERY NVARCHAR(MAX) ;    
 IF(@ISQUARTERLOCKED = 0)    
  BEGIN    
     IF (@DEDUCTEEID IS NULL)    
      BEGIN    
    /* DELETE FROM DEDCHALINK BASED ON BRANCHID */    
    DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN DEDUCTIONDETAIL AS DD ON DCL.DEDUCTIONID = DD.DEDUCTIONID    
        INNER JOIN DEDUCTEE AS D ON DD.DEDUCTEEID = D.DEDUCTEEID    
        INNER JOIN EMPLOYEE AS E ON D.DEDUCTEEID = E.DEDUCTEEID    
    WHERE  DCL.BRANCHID = @BRANCHID;    
    /* DELETE FROM PARTPAYMENTDETAILS BASED ON BRANCHID */    
    DELETE FROM PARTPAYMENTDETAILS FROM PARTPAYMENTDETAILS WHERE BRANCHID = @BRANCHID;    
    /* DELETE FROM DEDUCTIONDETAIL BASED ON BRANCHID */    
    DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = 1;    
    /* DELETE FROM CHAPTERVIADETAIL BASED ON BRANCHID */    
    DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL AS VIA INNER JOIN SALARYDETAIL AS SD ON VIA.SALARYDETAILID = SD.SALARYDETAILID    
    WHERE  SD.BRANCHID = @BRANCHID;    
    /* DELETE FROM SECTION16DETAIL BASED ON BRANCHID */    
    DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL AS SEC16 INNER JOIN SALARYDETAIL AS SD ON SEC16.SALARYDETAILID = SD.SALARYDETAILID    
    WHERE  SD.BRANCHID = @BRANCHID;    
    /* DELETE FROM SALARYDETAIL BASED ON BRANCHID */    
    DELETE FROM SALARYDETAIL WHERE BRANCHID = @BRANCHID;    
    DELETE FROM LINKTOTC   
    FROM LINKTOTC LC  
    INNER JOIN EMPLOYEE E ON LC.EMPLOYEEID = E.EMPLOYEEID  
    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID  
    WHERE D.BRANCHID =@BRANCHID
    /* DELETE FROM EMPLOYEE BASED ON BRANCHID */    
    DELETE FROM EMPLOYEE FROM EMPLOYEE AS E INNER JOIN DEDUCTEE AS D ON E.DEDUCTEEID = D.DEDUCTEEID WHERE D.BRANCHID = @BRANCHID;    
    /*DELETE FROM DEDUCTEE BASED ON BRANCHID */    
    DELETE FROM DEDUCTEE WHERE BRANCHID = @BRANCHID AND DEDUCTEEID NOT IN (SELECT D.DEDUCTEEID    
         FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID AND D.BRANCHID = @BRANCHID)    
      END    
    ELSE    
      BEGIN    
    /* DELETE FROM DEDCHALINK BASED ON BRANCHID & DEDUCTEEID */    
    DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN DEDUCTIONDETAIL AS DD ON DCL.DEDUCTIONID = DD.DEDUCTIONID    
    WHERE  DCL.BRANCHID = @BRANCHID AND DD.DEDUCTEEID = @DEDUCTEEID;    
    /* DELETE FROM PARTPAYMENTDETAILS BASED ON BRANCHID & DEDUCTEEID */    
    DELETE FROM PARTPAYMENTDETAILS FROM PARTPAYMENTDETAILS PPD INNER JOIN DEDUCTIONDETAIL DD ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID    
        AND PPD.BRANCHID  = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER    
    WHERE  PPD.BRANCHID = @BRANCHID AND PPD.PARTPAYMENTID IN (SELECT PARTPAYMENTID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND   
	DEDUCTIONID IN (SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND DEDUCTEEID = @DEDUCTEEID));    
    /* DELETE FROM DEDUCTIONDETAIL BASED ON BRANCHID */    
    DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID;    
    /* DELETE FROM CHAPTERVIADETAIL BASED ON BRANCHID */    
    DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL AS VI INNER JOIN SALARYDETAIL AS SD ON VI.SALARYDETAILID = SD.SALARYDETAILID    
    WHERE  SD.BRANCHID = @BRANCHID AND SD.DEDUCTEEID = @DEDUCTEEID;    
    /* DELETE FROM SECTION16DETAIL BASED ON BRANCHID */    
    DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL AS SEC16 INNER JOIN SALARYDETAIL AS SD ON SEC16.SALARYDETAILID = SD.SALARYDETAILID    
    WHERE SD.BRANCHID = @BRANCHID AND SD.DEDUCTEEID = @DEDUCTEEID;    
    /* DELETE FROM SALARYDETAIL BASED ON BRANCHID & DEDUCTEEID */    
    DELETE FROM SALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID;    
    /* DELETE FROM LINKTOTC */    
    DELETE FROM LINKTOTC   
    FROM LINKTOTC LC  
    INNER JOIN EMPLOYEE E ON LC.EMPLOYEEID = E.EMPLOYEEID  
    WHERE DEDUCTEEID IN (@DEDUCTEEID)  
    /* DELETE FROM EMPLOYEE BASED ON BRANCHID & DEDUCTEEID */    
    DELETE FROM EMPLOYEE WHERE DEDUCTEEID IN (@DEDUCTEEID)    
    /*DELETE FROM DEDUCTEE BASED ON BRANCHID & DEDUCTEEID */    
    DELETE FROM DEDUCTEE WHERE DEDUCTEEID IN (@DEDUCTEEID)    
    END    
  END    
 ELSE    
   BEGIN    
   SET @SQLQUERY = 'SELECT D.DEDUCTEEID    
         INTO #DEDUCTEE    
         FROM DEDUCTEE D WITH(NOLOCK)
         INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID    
         WHERE D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+' AND D.DEDUCTEEID NOT IN    
         (    
          SELECT DD.DEDUCTEEID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)    
          LEFT JOIN PARTPAYMENTDETAILS PDD WITH(NOLOCK)    
          ON DD.BRANCHID = PDD.BRANCHID AND DD.FORMID = PDD.FORMID AND DD.QUARTER = DD.QUARTER AND DD.PARTPAYMENTID = PDD.PARTPAYMENTID    
          WHERE DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID = 1 AND DD.QUARTER IN ('+ CAST(@LOCKEDQUARTERS AS VARCHAR) +')    
         )'    
   SET @SQLQUERY = @SQLQUERY + ';DELETE FROM EMPLOYEE WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDUCTEE);  DELETE FROM DEDUCTEE WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDUCTEE) AND BRANCHID = '+CAST(@BRANCHID AS VARCHAR)    
   EXECUTE SP_EXECUTESQL @SQLQUERY;    
   END    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_EmployeeTransferredBackToPreviousBranch')
DROP PROCEDURE USP_TDS_EmployeeTransferredBackToPreviousBranch
GO
CREATE PROCEDURE [USP_TDS_EmployeeTransferredBackToPreviousBranch]
	@comID INT,
	@finYear INT
AS
BEGIN
	DECLARE @firstWorkingBranch INT = 0;
	DECLARE @lastWorkingBranch INT = 0;
	DECLARE @MAXMONTHID INT = 0;
	DECLARE @MINMONTHID INT = 0;
	DECLARE @lastBranchDeducteeID INT = 0;
	/*EMPWORKMONTH table data*/
	SELECT BRANCHID,COMID,(CASE 
							WHEN MONTHID IN(1,2,3) THEN (MONTHID+12) 
							ELSE MONTHID
					   END
					   ) MONTHID
	INTO #EMPWORKMONTH
	FROM EMPWORKMONTH EMPWM WITH(NOLOCK)
	WHERE EMPWM.COMID=@COMID
	ORDER BY MONTHID
	/*Getting working branches serially*/
	CREATE TABLE #WORKSUMMARY(BRANCHID INT,COMID INT,MONTHID INT)
	DECLARE @BRID INT;
	DECLARE @MONTHID INT;
	DECLARE @COUNTER INT=4;
	WHILE(@COUNTER<=15)
	BEGIN
		SET @BRID=ISNULL((SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID=@COUNTER),0)
		SET @MONTHID=ISNULL((SELECT MONTHID FROM #EMPWORKMONTH WHERE MONTHID=@COUNTER),0)
			IF(NOT EXISTS(SELECT BRANCHID FROM #WORKSUMMARY WHERE BRANCHID=@BRID))
				BEGIN
					IF(@BRID<>0)
					BEGIN
						INSERT INTO #WORKSUMMARY(BRANCHID,COMID,MONTHID)
						VALUES(@BRID,@COMID,@MONTHID)
					END
				END
			ELSE
				BEGIN
				IF((SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID=@COUNTER)<>(SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID=@COUNTER-1))
					BEGIN
						INSERT INTO #WORKSUMMARY(BRANCHID,COMID,MONTHID)
						VALUES(@BRID,@COMID,@MONTHID)
					END
				END
		SET @COUNTER=@COUNTER+1;
	END
	SET @MAXMONTHID=(SELECT MAX(MONTHID) FROM #WORKSUMMARY)
	SET @MINMONTHID=(SELECT MIN(MONTHID) FROM #WORKSUMMARY)
	SET @firstWorkingBranch=(SELECT BRANCHID FROM #WORKSUMMARY WHERE MONTHID=@MINMONTHID)
	SET @lastWorkingBranch=(SELECT BRANCHID FROM #WORKSUMMARY WHERE MONTHID=@MAXMONTHID)
	/*LINKTOTC table data*/
	SELECT * 
	INTO #LINKTOTC
	FROM LINKTOTC WITH(NOLOCK)
	WHERE COMID=@comID
	/*Employee table data*/
	SELECT E.* 
	INTO #EMPLOYEE
	FROM EMPLOYEE E WITH(NOLOCK)
	INNER JOIN #LINKTOTC LTC
	ON LTC.EMPLOYEEID=E.EMPLOYEEID
	/*Deductee table data*/
	SELECT D.*
	INTO #DEDUCTEE
	FROM DEDUCTEE D WITH(NOLOCK)
	INNER JOIN #EMPLOYEE E
	ON E.DEDUCTEEID=D.DEDUCTEEID
	SET @lastBranchDeducteeID=(SELECT DEDUCTEEID FROM #DEDUCTEE WHERE BRANCHID = @lastWorkingBranch)
	/*salary detail*/
	SELECT * 
	INTO #SALDETAIL
	FROM SALDETAIL WITH(NOLOCK) WHERE COMID=@comID
	UPDATE #SALDETAIL
	SET MONTHID = MONTHID + 12
	WHERE MONTHID < 4
	/*CHAPTERVIADET table data*/
	SELECT * 
	INTO #CHAPTERVIADET
	FROM CHAPTERVIADET WITH(NOLOCK)
	WHERE COMID=@comID
	/*80TTA Section*/
	DECLARE @80TTA NUMERIC(13,2) = 0;
	SET @80TTA = CEILING(ISNULL((SELECT GROSSAMOUNT FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
					INNER JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.SALARYDETAILID = CVIA.SALARYDETAILID 
					INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
					INNER JOIN #EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID
					INNER JOIN #LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID
					WHERE SALARYSECTIONID = 18 AND SD.BRANCHID = @lastWorkingBranch),0))
	/*Chapter VIA detail*/
	/*Mannual Entry only for 80C sections */
	SELECT E.DEDUCTEEID,LC.BRANCHID, LC.COMID, CEILING(SUM(GROSS))GROSS
	,CEILING(SUM(QUALIFYING))QUALIFYING
	INTO #MANNUALENTRY80C
	FROM #LINKTOTC LC
	INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID
	INNER JOIN #CHAPTERVIADET CVIA ON LC.COMID = CVIA.COMID
	INNER JOIN CVIA80CDET C80C WITH(NOLOCK) ON C80C.CHAPTERVIADETID = CVIA.CHAPTERVIADETAILID
	WHERE ISNULL(GROSS,0) > 0
	GROUP BY E.DEDUCTEEID,LC.BRANCHID,LC.COMID
	ORDER BY LC.COMID
	/*Configured 80C data, from imported data month wise */	
	SELECT DEDUCTEEID, BRANCHID,COMID, SUM(GROSS)GROSS, SUM(QUALIFYING)QUALIFYING,
	CASE WHEN MONTHID IN(1,2,3) THEN MONTHID+12 ELSE MONTHID END MONTHID, SALARYSECTIONID
	INTO #C80CCONFIGUREDDATA
	FROM
	(
	 SELECT E.DEDUCTEEID,LC.BRANCHID, LC.COMID, CEILING(SUM(NETAMT)) GROSS,
	 CEILING(SUM(NETAMT)) QUALIFYING, ISNULL(SH.C80CID,-1)C80CID, EM.MONTHID, CHVI.SALARYSECTIONID 
	  FROM #LINKTOTC LC
	 INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID
	 INNER JOIN #EMPWORKMONTH EM ON EM.COMID = LC.COMID AND EM.BRANCHID = LC.BRANCHID
	 INNER JOIN #SALDETAIL SD ON SD.COMID = LC.COMID AND SD.MONTHID = EM.MONTHID
	 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID
	 INNER JOIN SALARYDETAIL SDT WITH(NOLOCK) ON SDT.DEDUCTEEID = E.DEDUCTEEID
	 INNER JOIN CHAPTERVIADETAIL CHVI WITH(NOLOCK) ON CHVI.SALARYDETAILID = SDT.SALARYDETAILID
	 WHERE LC.COMID=@comID AND INCLUDEINTAX = 1 AND ISNULL(SH.C80CID,-1) > 0
	 GROUP BY E.DEDUCTEEID,LC.BRANCHID, LC.COMID,ISNULL(SH.C80CID,-1),EM.MONTHID, CHVI.SALARYSECTIONID
	)R
	GROUP BY DEDUCTEEID, BRANCHID,COMID,MONTHID, SALARYSECTIONID
	ORDER BY MONTHID
	/*Configured 80C data, from imported data month wise with C80CID */	
	SELECT DEDUCTEEID, BRANCHID,COMID, SUM(GROSS)GROSS, SUM(QUALIFYING)QUALIFYING
	INTO #C80CCONFIGUREDDATA1
	FROM
	(
	 SELECT E.DEDUCTEEID,LC.BRANCHID, LC.COMID, CEILING(SUM(NETAMT)) GROSS,
	 CEILING(SUM(NETAMT)) QUALIFYING
	  FROM #LINKTOTC LC
	 INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID
	 INNER JOIN #EMPWORKMONTH EM ON EM.COMID = LC.COMID AND EM.BRANCHID = LC.BRANCHID
	 INNER JOIN #SALDETAIL SD ON SD.COMID = LC.COMID AND SD.MONTHID = EM.MONTHID
	 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID
	 WHERE LC.COMID=@comID AND INCLUDEINTAX = 1 AND ISNULL(SH.C80CID,-1) > 0
	 GROUP BY E.DEDUCTEEID,LC.BRANCHID, LC.COMID
	)R
	GROUP BY DEDUCTEEID, BRANCHID,COMID
	 /*Chapter VIA mannual entry other than 80C section */ 
	SELECT E.DEDUCTEEID,LC.COMID, LC.BRANCHID, CEILING(SUM(CVIA.GROSSAMOUNT)) GROSSAMOUNT,
	CEILING(SUM(CVIA.QUALIFYINGAMOUNT)) QUALIFYINGAMOUNT, CVIA.SALARYSECTIONID
	INTO #MANNUALENTRYEXCEPT80C
	 FROM #LINKTOTC LC
	INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID
	INNER JOIN #CHAPTERVIADET CVIA ON CVIA.COMID = LC.COMID
	WHERE LC.COMID=@comID AND SALARYSECTIONID <> 3
	GROUP BY E.DEDUCTEEID,LC.COMID, LC.BRANCHID, CVIA.SALARYSECTIONID
	DECLARE @MANUALGROSS INT;
	SELECT @MANUALGROSS = GROSS FROM #MANNUALENTRY80C WHERE BRANCHID = @lastWorkingBranch
	DECLARE @CONFIGUREDGROSS INT;
	SELECT @CONFIGUREDGROSS = GROSS FROM #C80CCONFIGUREDDATA1 WHERE BRANCHID = @lastWorkingBranch
	IF (@finYear > 2013)
	BEGIN
		IF (@CONFIGUREDGROSS + @MANUALGROSS > 150000)
		BEGIN
			IF (@CONFIGUREDGROSS > 150000)
			BEGIN
				UPDATE #C80CCONFIGUREDDATA1 SET QUALIFYING = 150000
				WHERE GROSS = @CONFIGUREDGROSS
				UPDATE #MANNUALENTRY80C SET QUALIFYING = 0
				WHERE BRANCHID = @lastWorkingBranch
			END
			ELSE
			BEGIN
				UPDATE #MANNUALENTRY80C SET QUALIFYING = 150000 - @CONFIGUREDGROSS
				WHERE BRANCHID = @lastWorkingBranch
			END
		END
	END
	ELSE
	BEGIN
		IF (@CONFIGUREDGROSS + @MANUALGROSS > 100000)
		BEGIN
			IF (@CONFIGUREDGROSS > 100000)
			BEGIN
				UPDATE #C80CCONFIGUREDDATA1 SET QUALIFYING = 100000
				WHERE GROSS = @CONFIGUREDGROSS
				UPDATE #MANNUALENTRY80C SET QUALIFYING = 0
				WHERE BRANCHID = @lastWorkingBranch
			END
			ELSE
			BEGIN
				UPDATE #MANNUALENTRY80C SET QUALIFYING = 100000 - @CONFIGUREDGROSS
				WHERE BRANCHID = @lastWorkingBranch
			END
		END
	END
	/*getting only 80C mannual entries for last branch*/
	DELETE FROM #MANNUALENTRY80C WHERE BRANCHID <> @lastWorkingBranch
	/*getting mannual entries other than 80C for last branch*/
	DELETE FROM #MANNUALENTRYEXCEPT80C WHERE BRANCHID <> @lastWorkingBranch
	/*Chapter VIA detail all including mannual entry summary */
	SELECT DEDUCTEEID, COMID, BRANCHID , SALARYSECTIONID, SUM(GROSS)GROSS, SUM(QUALIFYING)QUALIFYING
	INTO #CHAPTERVIADETAILAL
	FROM
	(
	 SELECT
	 DEDUCTEEID,COMID,BRANCHID,GROSSAMOUNT GROSS,QUALIFYINGAMOUNT QUALIFYING,SALARYSECTIONID
	 FROM #MANNUALENTRYEXCEPT80C
		 UNION
	 SELECT DEDUCTEEID, COMID,BRANCHID, SUM(GROSS), SUM(QUALIFYING), 3 AS SALARYSECTIONID
	 FROM #MANNUALENTRY80C
	 GROUP BY DEDUCTEEID, BRANCHID,COMID
	)RR
	GROUP BY DEDUCTEEID, COMID, BRANCHID,SALARYSECTIONID
	ORDER BY COMID
	/*end chapter VIA detail*/
	/*Section 16 Details month wise */
	SELECT E.DEDUCTEEID,LC.COMID, LC.BRANCHID,ISNULL(S16.SALARYSECTIONID,0) SALARYSECTIONID,
	SUM(ISNULL(S16.GROSSAMT1,0) + ISNULL(S16.GROSSAMT2,0) - ISNULL(RECOVERYAMT,0))DEDUCTIONUS16,
	CASE WHEN EM.MONTHID IN(1,2,3) THEN EM.MONTHID+12 ELSE EM.MONTHID END MONTHID
	INTO #DEDUCTIONUS16
	FROM #LINKTOTC LC
	INNER JOIN #EMPWORKMONTH EM ON LC.COMID = EM.COMID AND LC.BRANCHID = EM.BRANCHID
	LEFT JOIN SECTION16DET S16  WITH(NOLOCK) ON S16.COMID = LC.COMID AND S16.MONTHID = EM.MONTHID
	INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID
	GROUP BY E.DEDUCTEEID,LC.COMID, LC.BRANCHID, S16.SALARYSECTIONID,EM.MONTHID
	ORDER BY MONTHID
	/*End Section 16*/
	/*Taxable perquisite*/
	SELECT DEDUCTEEID, BRANCHID
	,CEILING(ISNULL(PROFITLIEU,0)) PROFITLIEU
	,CEILING(TAXABLEPERQUISITE) TAXABLEPERQUISITE
	,CEILING(ISNULL(OTHERBENEFITS,0)) OTHERBENEFITS,
	CASE WHEN MONTHID IN(1,2,3) THEN MONTHID + 12 ELSE MONTHID END MONTHID
	INTO #TAXABLEPERQUISITE
	FROM
	(
	 SELECT E.DEDUCTEEID, LC.COMID, LC.BRANCHID
		  ,CASE WHEN T.PERKID = 21 THEN T.TAXABLEAMT END AS PROFITLIEU
		  ,CASE WHEN T.PERKID = 16 THEN T.TAXABLEAMT END AS OTHERBENEFITS
		  ,CASE WHEN T.PERKID <> 21 THEN T.TAXABLEAMT END AS TAXABLEPERQUISITE, EM.MONTHID
		  FROM #LINKTOTC LC
	  INNER JOIN #EMPWORKMONTH EM ON LC.COMID = EM.COMID AND LC.BRANCHID = EM.BRANCHID
	  INNER JOIN TAXABLEPERQUISITE T ON T.COMID = LC.COMID AND T.MONTHID = EM.MONTHID
	  INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID
	  WHERE LC.COMID = @comID
	)P
	GROUP BY DEDUCTEEID,BRANCHID,PROFITLIEU,TAXABLEPERQUISITE,OTHERBENEFITS,MONTHID
	ORDER BY MONTHID
	/*For deleting data with 0 amount */
	--DELETE FROM #TAXABLEPERQUISITE WHERE PROFITLIEU=0 AND TAXABLEPERQUISITE=0 AND OTHERBENEFITS=0
	/*End of Taxable perquisite*/
	/*Other Income*/
	SELECT E.DEDUCTEEID,LC.COMID, LC.BRANCHID,
	CEILING(ISNULL(O.HOUSEPROL,0) + ISNULL(O.HOUSEPROS,0)) AS INCOMEFROMHOUSEPROPERTY,
	CEILING(ISNULL(O.LGAIN,0) + ISNULL(O.SGAIN,0)) AS CAPITALGAINS,
	CEILING(ISNULL(OS.AMOUNT,0)) AS INCOMEFROMOTHERSOURCES
	INTO #OTHERINCOME
	FROM #LINKTOTC LC  WITH(NOLOCK)
	INNER JOIN OTHERINCOME O  WITH(NOLOCK) ON O.COMID = LC.COMID
	INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID
	LEFT JOIN
	(
	 SELECT SUM(ISNULL(AMOUNT,0)-ISNULL(EXEMPTAMT,0))AMOUNT,OTHERINCOMEID FROM OTHERINCOMESOURCES
	 GROUP BY OTHERINCOMEID
	)OS ON OS.OTHERINCOMEID = O.OTHERINCOMEID
	WHERE LC.COMID=@comID
	/*End of other income */
	/*Basic Salary*/
	SELECT CEILING(SUM(ISNULL(SD.NETAMT,0))) NET,0 ALLOWANCE,0 PERK,SD.COMID,
	CASE WHEN SD.MONTHID IN(1,2,3) THEN SD.MONTHID + 12 ELSE SD.MONTHID END MONTHID
	,0 BRANCHID,0 DEDUCTEEID
	INTO #SALARY
	FROM #SALDETAIL SD
	INNER JOIN SALARYHEAD SH
	ON SH.SALARYHEADID=SD.SALARYHEADID
	WHERE SD.COMID=@comID AND SH.INCLUDEINTAX=1 AND SH.INCLUDEUS10=0 AND ISNULL(SH.C80CID,-1) <=0
	GROUP BY MONTHID,SD.COMID,MONTHID
	ORDER BY MONTHID
	/* Update Temporary Salary Table with branchID based on MONTHID */
	UPDATE #SALARY
	SET BRANCHID = EWM.BRANCHID
	FROM #SALARY S
	INNER JOIN #EMPWORKMONTH EWM
	ON EWM.MONTHID = S.MONTHID
	/* Update Temporary Salary Table with DecucteeID based on BRANCHID */
	UPDATE #SALARY 
	SET DEDUCTEEID =D.DEDUCTEEID
	FROM #SALARY S
	INNER JOIN #DEDUCTEE D
	ON D.BRANCHID = S.BRANCHID
	/* Get Basic salary of the employee DEDUCTEEID wise(for every branch) */
	SELECT SUM(NET) NET,DEDUCTEEID,BRANCHID 
	INTO #BASICSALARY
	FROM #SALARY
	GROUP BY DEDUCTEEID,BRANCHID
	/* Update basic salary in SALARYDETAIL table */
	UPDATE SALARYDETAIL
	SET BASICSALARY = BS.NET
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #BASICSALARY BS
	ON BS.DEDUCTEEID = SD.DEDUCTEEID AND BS.BRANCHID = SD.BRANCHID
	/*End of Basic Salary*/
	/*Taxable Allowance*/
	SELECT CASE WHEN SD.MONTHID < 4 THEN SD.MONTHID + 12 ELSE SD.MONTHID END MONTHID
	,CEILING(SUM(ISNULL(SD.NETAMT,0))) NET,SH.EARNING,SH.INCLUDEUS10,SD.COMID,0 DEDUCTEEID,0 BRANCHID
	INTO #TAXABLEALLOWANCE
	FROM #SALDETAIL SD
	INNER JOIN SALARYHEAD SH
	ON SH.SALARYHEADID=SD.SALARYHEADID
	WHERE SD.COMID=@comID AND SH.INCLUDEINTAX=1 AND SH.INCLUDEUS10=1 AND ISNULL(SH.C80CID,-1) <=0 
	GROUP BY MONTHID,EARNING,SH.INCLUDEUS10,SD.COMID
	/* Update temporary TAXABLEALLOWANCE table based on MONTHID and BRANCHID */
	UPDATE #TAXABLEALLOWANCE
	SET DEDUCTEEID = S.DEDUCTEEID,
	BRANCHID = S.BRANCHID
	FROM #TAXABLEALLOWANCE TA
	INNER JOIN #SALARY S
	ON S.MONTHID = TA.MONTHID
	/* Get total TAXABLEALLOWANCE DEDUCTEEID wise */
	SELECT SUM(NET) NET,DEDUCTEEID,BRANCHID 
	INTO #TEMPTAXALBEALLOWANCE
	FROM #TAXABLEALLOWANCE
	GROUP BY DEDUCTEEID,BRANCHID
	/* Update SALARYDETAIL with TAXABLEALLOWANCE */
	UPDATE SALARYDETAIL
	SET TAXABLEALLOWANCE = TTA.NET
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #TEMPTAXALBEALLOWANCE TTA
	ON TTA.DEDUCTEEID = SD.DEDUCTEEID AND TTA.BRANCHID = SD.BRANCHID
	/*Taxable Perquisite*/
	SELECT SUM(TAXABLEPERQUISITE) TAXABLEPERQUISITE,DEDUCTEEID,BRANCHID 
	INTO #TEMPTAXABLEPERQUISITE
	FROM #TAXABLEPERQUISITE
	GROUP BY DEDUCTEEID,BRANCHID
	UPDATE SALARYDETAIL
	SET TAXABLEPERQUISITES = TTP.TAXABLEPERQUISITE,
	TOTALPERQUISITE = TTP.TAXABLEPERQUISITE
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #TEMPTAXABLEPERQUISITE TTP
	ON TTP.DEDUCTEEID = SD.DEDUCTEEID AND TTP.BRANCHID = SD.BRANCHID
	/*Gross salary*/
	/* Adding Basic Salary and Taxable Perquisite Month Wise */
	UPDATE #SALARY
	SET NET = S.NET + TP.TAXABLEPERQUISITE
	FROM #SALARY S
	INNER JOIN #TAXABLEPERQUISITE TP
	ON TP.MONTHID = S.MONTHID
	/* Adding Net Salary and Taxable Allowance month wise */
	UPDATE #SALARY
	SET NET = S.NET + TA.NET
	FROM #SALARY S
	INNER JOIN #TAXABLEALLOWANCE TA
	ON TA.MONTHID = S.MONTHID
	/* Taking the gross salary into a temporary table */
	SELECT SUM(S.NET) NET,S.BRANCHID 
	INTO #GROSSSALARY
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #SALARY S
	ON S.DEDUCTEEID =SD.DEDUCTEEID AND S.BRANCHID = SD.BRANCHID
	GROUP BY S.BRANCHID
	/* Update SALARYDETAIL with Gross Salary */
	UPDATE SALARYDETAIL 
	SET GROSSSALARY = GS.NET
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #GROSSSALARY GS
	ON GS.BRANCHID = SD.BRANCHID
	/*End of Gross Salary*/
	/*Income from Salaries*/
	/* Getting Section 16 records month wise */
	SELECT S.BRANCHID,S.COMID,S.DEDUCTEEID,
	(S.NET - D16.DEDUCTIONUS16)INCOMEFROMSALARY,D16.DEDUCTIONUS16,D16.MONTHID,D16.SALARYSECTIONID 
	INTO #INCOMEFROMSALARIES
	FROM #SALARY S
	INNER JOIN #DEDUCTIONUS16 D16
	ON S.MONTHID=D16.MONTHID
	/* Getting Section 16 records DeducteeID wise */
	SELECT SUM(DEDUCTIONUS16) DEDUCTIONUS16,DEDUCTEEID,BRANCHID  
	INTO #TEMPDEDUCTIONUS16
	FROM #DEDUCTIONUS16
	GROUP BY DEDUCTEEID,BRANCHID
	/* Update SALARYDETAIL with section16 detail */
	UPDATE SALARYDETAIL
	SET DEDUCTIONUS16= TD.DEDUCTIONUS16
	,INCOMEFROMSALARIES = GROSSSALARY - TD.DEDUCTIONUS16
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #TEMPDEDUCTIONUS16 TD
	ON TD.DEDUCTEEID = SD.DEDUCTEEID AND TD.BRANCHID = SD.BRANCHID
	/* Update SECTION16DETAIL */
	UPDATE SECTION16DETAIL
	SET AMOUNT = D16.DEDUCTIONUS16
	FROM SECTION16DETAIL S16DET WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID = S16DET.SALARYDETAILID
	INNER JOIN #DEDUCTIONUS16 D16
	ON D16.DEDUCTEEID = SD.DEDUCTEEID AND D16.BRANCHID = SD.BRANCHID
	WHERE S16DET.SALARYSECTIONID = D16.SALARYSECTIONID
	/*End of Income From Salaries*/
	/*Total taxable income*/
	/*Deducting 80C detail coming from payfile,from income from salaries*/
	UPDATE #SALARY
	SET NET = S.NET - C80C.QUALIFYING
	FROM #SALARY S
	INNER JOIN #C80CCONFIGUREDDATA C80C
	ON C80C.MONTHID = S.MONTHID
	/* Getting C80C configured data DEDUCTEEID wise */
	SELECT CEILING(SUM(GROSS)) GROSS,DEDUCTEEID,BRANCHID 
	INTO #C80CCONF
	FROM #C80CCONFIGUREDDATA
	GROUP BY DEDUCTEEID,BRANCHID
	/* Update SALARYDETAIL with TOTALDEDUNDERCHAPTERVIA DEDUCTEEID wise */
	UPDATE SALARYDETAIL
	SET TOTALDEDUNDERCHAPTERVIA = C80C.GROSS
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #C80CCONF C80C
	ON C80C.DEDUCTEEID = SD.DEDUCTEEID AND C80C.BRANCHID = SD.BRANCHID
	/*Deducting 80C mannual entries from income from salaries*/
	UPDATE #SALARY
	SET NET = S.NET - C80C.QUALIFYING
	FROM #SALARY S
	INNER JOIN #MANNUALENTRY80C C80C
	ON C80C.BRANCHID = S.BRANCHID
	WHERE C80C.BRANCHID = @lastWorkingBranch
	/* Adding mannual to last branch as #MANNUALENTRY80C table contains data for last working branch */
	UPDATE SALARYDETAIL
	SET TOTALDEDUNDERCHAPTERVIA = SD.TOTALDEDUNDERCHAPTERVIA + MC80C.QUALIFYING
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #MANNUALENTRY80C MC80C
	ON MC80C.DEDUCTEEID = SD.DEDUCTEEID AND MC80C.BRANCHID = SD.BRANCHID
	/* Update CHAPTERVIADETAIL */
	UPDATE CHAPTERVIADETAIL
	SET GROSSAMOUNT =C80C.GROSS,
	QUALIFYINGAMOUNT =C80C.QUALIFYING,
	DEDUCTIBLEAMOUNT =C80C.QUALIFYING
	FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID = CVIA.SALARYDETAILID
	INNER JOIN #C80CCONFIGUREDDATA1 C80C
	ON C80C.DEDUCTEEID = SD.DEDUCTEEID 
	AND C80C.BRANCHID = SD.BRANCHID
	UPDATE CHAPTERVIADETAIL
	SET GROSSAMOUNT = CVIA.GROSSAMOUNT + MEC80C.GROSS,
	DEDUCTIBLEAMOUNT = CVIA.DEDUCTIBLEAMOUNT + MEC80C.QUALIFYING,
	QUALIFYINGAMOUNT = CVIA.QUALIFYINGAMOUNT +MEC80C.QUALIFYING
	FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID = CVIA.SALARYDETAILID
	INNER JOIN #MANNUALENTRY80C MEC80C
	ON MEC80C.DEDUCTEEID = SD.DEDUCTEEID AND MEC80C.BRANCHID = SD.BRANCHID
	/*Deducting mnnual entries except 80C from income from salaries*/
	UPDATE #SALARY
	SET NET = S.NET - MEC80C.QUALIFYINGAMOUNT
	FROM #SALARY S
	INNER JOIN #MANNUALENTRYEXCEPT80C MEC80C
	ON MEC80C.BRANCHID = S.BRANCHID
	WHERE MONTHID = @MAXMONTHID 
	UPDATE SALARYDETAIL
	SET TOTALDEDUNDERCHAPTERVIA = TOTALDEDUNDERCHAPTERVIA + (SELECT SUM(QUALIFYINGAMOUNT) FROM #MANNUALENTRYEXCEPT80C)
	--,SALARYFROMPREVEMP = SALARYFROMPREVEMP - (SELECT SUM(QUALIFYINGAMOUNT) FROM #MANNUALENTRYEXCEPT80C)
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #MANNUALENTRYEXCEPT80C MEC80C
	ON MEC80C.DEDUCTEEID = SD.DEDUCTEEID AND MEC80C.BRANCHID = SD.BRANCHID
	UPDATE CHAPTERVIADETAIL
	SET GROSSAMOUNT = MEC80C.GROSSAMOUNT,
	DEDUCTIBLEAMOUNT = MEC80C.QUALIFYINGAMOUNT,
	QUALIFYINGAMOUNT = MEC80C.QUALIFYINGAMOUNT
	FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID = CVIA.SALARYDETAILID
	INNER JOIN #MANNUALENTRYEXCEPT80C MEC80C
	ON MEC80C.DEDUCTEEID = SD.DEDUCTEEID AND MEC80C.BRANCHID = SD.BRANCHID
	WHERE CVIA.SALARYSECTIONID = MEC80C.SALARYSECTIONID
	/*End of total taxable income*/
	/*Income from previous employment*/
	/* Getting the income branch wise */
	DECLARE @I INT = 4;
	DECLARE @BRANCHID INT = 0;
	DECLARE @AMOUNT NUMERIC(13,2) = 0;
	DECLARE @DEDUCTEEID INT = 0;
	SELECT * INTO #FINAL FROM #SALARY
	DELETE FROM #FINAL
	WHILE(@I <= 15)
		BEGIN
			SET @BRANCHID = (SELECT BRANCHID FROM #SALARY WHERE MONTHID = @I);
			SET @DEDUCTEEID =(SELECT DEDUCTEEID FROM #SALARY WHERE MONTHID = @I);
			IF(@BRANCHID = (SELECT BRANCHID FROM #SALARY WHERE MONTHID = @I + 1))
				BEGIN
					SET @AMOUNT = @AMOUNT + ISNULL((SELECT NET FROM #SALARY WHERE MONTHID = @I),0);
				END
			ELSE
				BEGIN
					IF(@BRANCHID <> 0)
					BEGIN
						IF(@AMOUNT = 0)
							BEGIN
								SET @AMOUNT = ISNULL((SELECT NET FROM #SALARY WHERE MONTHID = @I),0);
							END
						ELSE
							BEGIN
								IF(@AMOUNT <> 0 AND (SELECT BRANCHID FROM #SALARY WHERE MONTHID = @I) = (SELECT BRANCHID FROM #SALARY WHERE MONTHID = @I - 1)) 
									BEGIN
										SET @AMOUNT = @AMOUNT + ISNULL((SELECT NET FROM #SALARY WHERE MONTHID = @I),0);
									END
							END
						INSERT INTO #FINAL(BRANCHID,COMID,DEDUCTEEID,MONTHID,NET,ALLOWANCE,PERK)
						VALUES(@BRANCHID,@comID,@DEDUCTEEID,@I,@AMOUNT,0,0)
						SET @AMOUNT = 0;
					END
				END				
			SET @I=@I + 1;
		END
	SELECT *,ROW_NUMBER() OVER(ORDER BY(SELECT 0)) ROWNUM INTO #PREVSAL FROM #FINAL
	DELETE FROM #FINAL
	/* Creating previous income table */
	SET @I = 1;
	DECLARE @TOTITEMS INT = 0;
	SET @TOTITEMS = (SELECT COUNT(*) FROM #PREVSAL)
	WHILE(@I <= @TOTITEMS)
		BEGIN
			SET @BRANCHID = ISNULL((SELECT BRANCHID FROM #PREVSAL WHERE ROWNUM = @I + 1),0);
			SET @DEDUCTEEID = (SELECT DEDUCTEEID FROM #PREVSAL WHERE ROWNUM = @I + 1);
			SET @AMOUNT = (SELECT NET FROM #PREVSAL WHERE ROWNUM = @I);
			SET @MONTHID = (SELECT MONTHID FROM #PREVSAL WHERE ROWNUM = @I);
			IF(@BRANCHID <> 0)
			BEGIN
				INSERT INTO #FINAL(NET,ALLOWANCE,PERK,COMID,MONTHID,BRANCHID,DEDUCTEEID)
				VALUES(@AMOUNT,0,0,@COMID,@MONTHID,@BRANCHID,@DEDUCTEEID)
			END			
			SET @I = @I + 1;
		END
	/*Deducting mannual entry except 80C */
	UPDATE #FINAL
	SET NET = F.NET - MEC80C.GROSSAMOUNT
	FROM #FINAL F
	INNER JOIN #MANNUALENTRYEXCEPT80C MEC80C
	ON MEC80C.DEDUCTEEID = F.DEDUCTEEID AND MEC80C.BRANCHID = F.BRANCHID
	CREATE TABLE #CURRENTSALARY(SERIALNO INT,BRANCHID INT,CURRENTSALARY NUMERIC(13,2),PREVIOUSSALARY NUMERIC(13,2))
	/* Creating current income table */
	SET @I = (SELECT MIN(MONTHID) FROM #SALARY)
	SET @COUNTER = 1;
	SET @AMOUNT = 0;
	WHILE(@I< = 15)
	BEGIN
		 SET @BRANCHID = ISNULL((SELECT BRANCHID FROM #SALARY WHERE MONTHID = @I),0)
		 IF(@AMOUNT = 0)
			 BEGIN
				SET @AMOUNT = ISNULL((SELECT NET FROM #SALARY WHERE MONTHID = @I),0)
			 END			
		 ELSE
			BEGIN
				IF(@BRANCHID = ISNULL((SELECT BRANCHID FROM #SALARY WHERE MONTHID = @I - 1),0))
				 BEGIN
					SET @AMOUNT = @AMOUNT + ISNULL((SELECT NET FROM #SALARY WHERE MONTHID = @I),0)
				 END
				 ELSE
				 BEGIN
					SET @AMOUNT = ISNULL((SELECT NET FROM #SALARY WHERE MONTHID = @I),0)
				 END
			END
			 IF(@BRANCHID <> ISNULL((SELECT BRANCHID FROM #SALARY WHERE MONTHID = @I + 1),0))
			 BEGIN
					INSERT INTO #CURRENTSALARY(SERIALNO,BRANCHID,CURRENTSALARY,PREVIOUSSALARY)
					VALUES(@COUNTER,@BRANCHID,@AMOUNT,0)
					SET @COUNTER = @COUNTER + 1;
					SET @AMOUNT = 0;
			 END
	 	 SET @I = @I + 1;
	END
	/* Updating previous income */
	UPDATE #CURRENTSALARY 
	SET PREVIOUSSALARY = F.NET
	FROM #CURRENTSALARY CS
	INNER JOIN #FINAL F
	ON F.BRANCHID = CS.BRANCHID
	WHERE SERIALNO <> 1
	SET @TOTITEMS = (SELECT COUNT(*) FROM #CURRENTSALARY)
	SET @I = 1;
	/* Calculating gross total income previous salary + current income */
	WHILE(@I <= @TOTITEMS)
	BEGIN
		SET @AMOUNT = (SELECT PREVIOUSSALARY + CURRENTSALARY FROM #CURRENTSALARY WHERE SERIALNO = @I);
		IF(@I <> @TOTITEMS)
			BEGIN
				UPDATE #CURRENTSALARY
				SET PREVIOUSSALARY = @AMOUNT
				WHERE SERIALNO = @I + 1;
			END
		SET @I = @I + 1;
	END
	/* 
	number of branches employee is transferred back.
	Number of times the employee is coming back to previous working branch.
	*/
	SELECT COUNT(BRANCHID) CNT,BRANCHID,ROW_NUMBER() OVER(ORDER BY(SELECT 0)) ROWNUM
	INTO #TEMP
	FROM #CURRENTSALARY
	GROUP BY BRANCHID
	HAVING COUNT(BRANCHID) > 1
	/* Calcuate transferred back branch income(previous and current) */
	SET @TOTITEMS =(SELECT COUNT(*) FROM #TEMP)
	SET @I = 1;
	DECLARE @CURRENTSALARY NUMERIC(13,2) = 0;
	DECLARE @MINSRNO INT = 0;
	DECLARE @MAXSRNO INT = 0;
	CREATE TABLE #SRNOBRID(SERIALNO INT,BRANCHID INT)
	WHILE(@I <= @TOTITEMS)
	BEGIN
		SET @BRANCHID =(SELECT BRANCHID FROM #TEMP WHERE ROWNUM = @I)
		SET @COUNTER = (SELECT CNT FROM #TEMP WHERE ROWNUM = @I)
		SET @MINSRNO = (SELECT MIN(SERIALNO) FROM #CURRENTSALARY WHERE BRANCHID = @BRANCHID)
		SET @MAXSRNO = (SELECT MAX(SERIALNO) FROM #CURRENTSALARY WHERE BRANCHID = @BRANCHID)
				IF(@COUNTER = 2)
				BEGIN
					SET @CURRENTSALARY = ISNULL((SELECT CURRENTSALARY FROM #CURRENTSALARY 
												WHERE BRANCHID =@BRANCHID AND SERIALNO = @MINSRNO),0)
					UPDATE #CURRENTSALARY
					SET CURRENTSALARY = ISNULL(CURRENTSALARY,0) + @CURRENTSALARY,
					PREVIOUSSALARY = ISNULL(PREVIOUSSALARY,0) - @CURRENTSALARY
					WHERE BRANCHID = BRANCHID AND SERIALNO = @MAXSRNO
					INSERT INTO #SRNOBRID(SERIALNO,BRANCHID)
					VALUES(@MINSRNO,@BRANCHID)
					SET @COUNTER = 0;
				END
		SET @I = @I + 1;
	END
	/*
	 Removing the income details of the branch where employee is transferred back.
	 Because the income amount will change as he comes back.
	 */
	DELETE CS FROM #CURRENTSALARY CS
	INNER JOIN #SRNOBRID SB
	ON SB.BRANCHID = CS.BRANCHID AND SB.SERIALNO = CS.SERIALNO
	UPDATE SALARYDETAIL
	SET SALARYFROMPREVEMP = ISNULL(CS.PREVIOUSSALARY,0)
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
	INNER JOIN #CURRENTSALARY CS
	ON CS.BRANCHID = D.BRANCHID
	WHERE SD.BRANCHID = @lastWorkingBranch
	/*End of Income from previous employment*/
	/*Update Other income in salary detail in the last branch*/
	UPDATE SALARYDETAIL
	SET INCOMEFROMHOUSEPROPERTY = OI.INCOMEFROMHOUSEPROPERTY,
	INCOMEFROMOTHERSOURCES = OI.INCOMEFROMOTHERSOURCES,
	CAPITALGAINS = OI.CAPITALGAINS,
	OTHERINCOME = SALARYFROMPREVEMP + OI.INCOMEFROMHOUSEPROPERTY + OI.INCOMEFROMOTHERSOURCES + OI.CAPITALGAINS
	--,SALARYFROMPREVEMP = SALARYFROMPREVEMP + @80TTA
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #OTHERINCOME OI
	ON OI.DEDUCTEEID = SD.DEDUCTEEID AND OI.BRANCHID = SD.BRANCHID
	WHERE SD.BRANCHID = @lastWorkingBranch
	UPDATE SALARYDETAIL
	SET
	OTHERINCOME = (SALARYFROMPREVEMP + INCOMEFROMHOUSEPROPERTY + INCOMEFROMOTHERSOURCES + CAPITALGAINS)
	--,SALARYFROMPREVEMP = SALARYFROMPREVEMP + @80TTA
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
	UPDATE SALARYDETAIL
	SET GROSSTOTALINCOME = OTHERINCOME + INCOMEFROMSALARIES,
	TOTALTAXABLEINCOME = OTHERINCOME + INCOMEFROMSALARIES - TOTALDEDUNDERCHAPTERVIA
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
	UPDATE SALARYDETAIL 
	SET 
	OTHERINCOME = SD.SALARYFROMPREVEMP + SD.INCOMEFROMHOUSEPROPERTY + ISNULL(SD.INCOMEFROMBUSINESS,0) + SD.INCOMEFROMOTHERSOURCES + @80TTA,
	GROSSTOTALINCOME = (SD.INCOMEFROMSALARIES + SD.SALARYFROMPREVEMP + SD.INCOMEFROMHOUSEPROPERTY + ISNULL(SD.INCOMEFROMBUSINESS,0) + SD.INCOMEFROMOTHERSOURCES + @80TTA),
	TOTALTAXABLEINCOME = (SD.INCOMEFROMSALARIES + SD.SALARYFROMPREVEMP + SD.INCOMEFROMHOUSEPROPERTY + ISNULL(SD.INCOMEFROMBUSINESS,0) + SD.INCOMEFROMOTHERSOURCES + @80TTA) -SD.TOTALDEDUNDERCHAPTERVIA
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID
	WHERE SD.BRANCHID = @lastWorkingBranch
	UPDATE SALARYDETAIL
	SET TOTALTAXABLEINCOME = 0
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID
	WHERE SD.TOTALTAXABLEINCOME < 0
	DECLARE @CNT INT=0;
	SET @I=1;
	SET @CNT=(SELECT COUNT(*) FROM #TEMP)
	DECLARE @DEDIDTOBEUPDATED INT;
	DECLARE @BRIDTOBEUPDATED INT;
	DECLARE @CURRENTTDS NUMERIC(13,2) = 0;
	WHILE(@I<@CNT)
	BEGIN
		SET @BRANCHID = (SELECT BRANCHID FROM #TEMP WHERE ROWNUM= @I)
		SET @DEDUCTEEID = (SELECT DEDUCTEEID FROM #DEDUCTEE WHERE BRANCHID = @BRANCHID)
		SET @CURRENTTDS = @CURRENTTDS + (SELECT SUM(INCOMETAX) FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID)
		SET @BRIDTOBEUPDATED = (SELECT BRANCHID FROM #TEMP WHERE ROWNUM = @I+1)
		SET @DEDIDTOBEUPDATED = (SELECT DEDUCTEEID FROM #DEDUCTEE WHERE BRANCHID = @BRIDTOBEUPDATED)
		SET @I=@I+1
	END
	UPDATE SALARYDETAIL
	SET PREVEMPINCOMETAX = @CURRENTTDS
	WHERE DEDUCTEEID=@DEDIDTOBEUPDATED AND BRANCHID=@BRIDTOBEUPDATED
	UPDATE SALARYDETAIL SET PREVEMPINCOMETAX = NULL WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDUCTEE) AND BRANCHID <> @lastWorkingBranch
	--SELECT * INTO #CHAPTERVIADETAIL FROM CHAPTERVIADETAIL WHERE SALARYDETAILID IN
	--(
	--	SELECT SALARYDETAILID FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID IN
	--	(
	--		SELECT DEDUCTEEID FROM #DEDUCTEE
	--	)
	--)
	--SELECT SUM(GROSSAMOUNT)GROSSAMOUNT,SUM(QUALIFYINGAMOUNT)QUALIFYINGAMOUNT,
	--SUM(DEDUCTIBLEAMOUNT)DEDUCTIBLEAMOUNT,SALARYSECTIONID
	--INTO #CHAPTERVIA
	--FROM #CHAPTERVIADETAIL
	--GROUP BY SALARYSECTIONID
	--UPDATE CHAPTERVIADET
	--SET DEDUCTIBLEAMOUNT = CVIA.DEDUCTIBLEAMOUNT,
	--QUALIFYINGAMOUNT = CVIA.QUALIFYINGAMOUNT,
	--GROSSAMOUNT = CVIA.GROSSAMOUNT
	--FROM #CHAPTERVIADET CVIADET
	--INNER JOIN #CHAPTERVIA CVIA
	--ON CVIA.SALARYSECTIONID = CVIADET.SALARYSECTIONID
	DROP TABLE #C80CCONFIGUREDDATA
	DROP TABLE #C80CCONFIGUREDDATA1
	DROP TABLE #CHAPTERVIADET
	DROP TABLE #CHAPTERVIADETAILAL
	DROP TABLE #CURRENTSALARY
	DROP TABLE #DEDUCTEE
	DROP TABLE #DEDUCTIONUS16
	DROP TABLE #EMPLOYEE
	DROP TABLE #EMPWORKMONTH
	DROP TABLE #FINAL
	DROP TABLE #GROSSSALARY
	DROP TABLE #INCOMEFROMSALARIES
	DROP TABLE #LINKTOTC
	DROP TABLE #MANNUALENTRY80C
	DROP TABLE #MANNUALENTRYEXCEPT80C
	DROP TABLE #OTHERINCOME
	DROP TABLE #PREVSAL
	DROP TABLE #SALARY
	DROP TABLE #SALDETAIL
	DROP TABLE #SRNOBRID
	DROP TABLE #TAXABLEPERQUISITE
	DROP TABLE #TEMP
	DROP TABLE #WORKSUMMARY
	DROP TABLE #BASICSALARY
	DROP TABLE #C80CCONF
	DROP TABLE #TAXABLEALLOWANCE
	DROP TABLE #TEMPDEDUCTIONUS16
	DROP TABLE #TEMPTAXABLEPERQUISITE
	DROP TABLE #TEMPTAXALBEALLOWANCE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_EMPLOYEETRANSFERTOPENSIONER')
DROP PROCEDURE USP_TDS_EMPLOYEETRANSFERTOPENSIONER
GO
CREATE PROCEDURE USP_TDS_EMPLOYEETRANSFERTOPENSIONER
@DEDUCTEEID INT
AS
BEGIN
	UPDATE DEDUCTEE SET EMPTYPE = 1 WHERE DEDUCTEEID = @DEDUCTEEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ERETURNGENERATEDANDFILED')
DROP PROCEDURE USP_TDS_ERETURNGENERATEDANDFILED
GO
CREATE PROCEDURE USP_TDS_ERETURNGENERATEDANDFILED
 @QUARTER INT
AS      
BEGIN      
 SELECT (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID=CB.PARENTBRANCHID) PARENTBRANCHNAME,  
 PARENTBRANCHID,
 BRANCHNAME,BRANCHCODE,D.TAN,FORMNAME,A.QUARTER FROM ACKNO A       
 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = A.BRANCHID      
 INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = A.FORMID      
 INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = A.BRANCHID AND A.QUARTER = BD.QUARTER      
 INNER JOIN DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID      
 WHERE ISVALID = 1 AND LEN(ISNULL(A.ORGNUM,'')) > 0 AND A.QUARTER = @QUARTER
 ORDER BY PARENTBRANCHNAME      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ERETURNGENERATEDBUTNOTFILED')
DROP PROCEDURE USP_TDS_ERETURNGENERATEDBUTNOTFILED
GO
CREATE PROCEDURE USP_TDS_ERETURNGENERATEDBUTNOTFILED  
 @QUARTER INT
AS      
BEGIN      
 SELECT (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID=CB.PARENTBRANCHID) PARENTBRANCHNAME,  
 PARENTBRANCHID,
 BRANCHNAME,BRANCHCODE,D.TAN,FORMNAME,A.QUARTER FROM ACKNO A       
 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = A.BRANCHID      
 INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = A.FORMID      
 INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = A.BRANCHID AND A.QUARTER = BD.QUARTER      
 INNER JOIN DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID      
 WHERE ISVALID = 1 AND LEN(ISNULL(A.ORGNUM,'')) = 0 AND A.QUARTER = @QUARTER AND CB.BRANCHID>1    
 ORDER BY PARENTBRANCHNAME      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ERETURNNOTGENERATED')
DROP PROCEDURE USP_TDS_ERETURNNOTGENERATED
GO
CREATE PROCEDURE USP_TDS_ERETURNNOTGENERATED --3
 @QUARTER INT  
 --,@PARENTBRANCHID INT  
AS        
BEGIN    
 SELECT BRANCHID,FORMID,QUARTER,DEDUCTIONID INTO #TEMP FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE QUARTER=@QUARTER      
 SELECT PARENTBRANCHID,    
 CB.BRANCHID, BRANCHNAME,BRANCHCODE,D.TAN,FORMNAME,DD.QUARTER,COUNT(DEDUCTIONID)DEDCOUNT    
 INTO #ERETNOTGENERATED    
  FROM #TEMP DD WITH(NOLOCK)        
 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID        
 INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = DD.FORMID        
 LEFT JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = DD.BRANCHID AND BD.QUARTER = DD.QUARTER        
 LEFT JOIN DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID        
 WHERE CB.BRANCHID>1 AND DD.QUARTER = @QUARTER AND (NOT EXISTS         
 (        
  SELECT BRANCHID FROM ACKNO A WITH(NOLOCK) WHERE A.QUARTER = DD.QUARTER AND A.FORMID = DD.FORMID AND A.BRANCHID = DD.BRANCHID        
 ) OR EXISTS         
 (        
  SELECT BRANCHID FROM ACKNO A WITH(NOLOCK) WHERE ISVALID = 0 AND A.QUARTER = DD.QUARTER AND A.FORMID = DD.FORMID AND A.BRANCHID = DD.BRANCHID        
 ))  
 --AND CB.PARENTBRANCHID=@PARENTBRANCHID       
 GROUP BY PARENTBRANCHID,CB.BRANCHID, BRANCHNAME,BRANCHCODE,DD.BRANCHID,DD.FORMID,D.TAN,FORMNAME,DD.QUARTER        
 HAVING COUNT(DEDUCTIONID) > 0        
 ORDER BY FORMNAME     
 SELECT     
 (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID =     
  (SELECT PARENTBRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = ENG.BRANCHID)    
 ) PARENTBRANCHNAME, ENG.*    
 FROM #ERETNOTGENERATED AS ENG    
 ORDER BY PARENTBRANCHNAME  
 DROP TABLE #TEMP
 DROP TABLE #ERETNOTGENERATED   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ExcelImportStatus')
DROP PROCEDURE USP_TDS_ExcelImportStatus
GO
CREATE PROCEDURE USP_TDS_ExcelImportStatus          
@BRANCHID INT            
AS            
	BEGIN            
		SELECT BRANCHID, QUARTER, ISVALID,     
		ISREQACTIVE, QUEUEID, CURREQ, CURSTATUS,     
		RECCOUNT, IMPORTEDDATE FROM ExcelImportStatus WITH(NOLOCK)            
		WHERE BRANCHID = @BRANCHID AND CURREQ = 1          
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_EXCLUDECHALLAN')
DROP PROCEDURE USP_TDS_EXCLUDECHALLAN
GO
CREATE PROCEDURE [USP_TDS_EXCLUDECHALLAN]
@BRANCHID INT
AS
	BEGIN
		SELECT ISNULL(NOCHALLANPAY,0) FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ExportSalary')
DROP PROCEDURE USP_TDS_ExportSalary
GO
CREATE PROCEDURE [dbo].[USP_TDS_ExportSalary]
    @BRANCHID INT  
AS  
    BEGIN  
	DECLARE @CHAPDETAIL TABLE(ROWID INT, SALARYDETAILID INT,SECTIONNAME VARCHAR(10), GROSSAMOUNT NUMERIC(13,2), DEDUCTIBLEAMOUNT NUMERIC(13,2));  
    DECLARE @COUNT INT, @I INT; DECLARE @ROWID INT;    
        SELECT ROW_NUMBER() OVER (PARTITION BY C.SALARYDETAILID ORDER BY C.SALARYDETAILID, S.SECTIONNAME) ROWID,   
            C.SALARYDETAILID, S.SECTIONNAME, C.GROSSAMOUNT, C.DEDUCTIBLEAMOUNT   
        INTO #CHAPDETAIL  
        FROM CHAPTERVIADETAIL C INNER JOIN SALARYSECTIONS S
            ON C.SALARYSECTIONID = S.SALARYSECTIONID  
        WHERE C.GROSSAMOUNT > 0  
        ORDER BY SALARYDETAILID, SECTIONNAME  
        SELECT ROW_NUMBER() OVER (ORDER BY SALARYDETAILID)SNO,COUNT(ROWID) ROWID, SALARYDETAILID   
        INTO #COUNT  
        FROM #CHAPDETAIL  
        GROUP BY SALARYDETAILID          
       SELECT @COUNT = COUNT(ROWID) FROM #COUNT           
  SET @I = 1;  
   WHILE(@COUNT >= @I)  
   BEGIN  
    SELECT @ROWID = ROWID FROM #COUNT WHERE SNO = @I;     
    IF(@ROWID <= 6)  
     BEGIN  
      INSERT INTO @CHAPDETAIL  
      SELECT C.ROWID, C.SALARYDETAILID, SECTIONNAME, GROSSAMOUNT, DEDUCTIBLEAMOUNT   
      FROM #CHAPDETAIL C  
      INNER JOIN  
      #COUNT CO ON C.SALARYDETAILID = CO.SALARYDETAILID  
       WHERE CO.SNO = @I AND C.ROWID BETWEEN 1 AND 6  
     END  
    ELSE  
     BEGIN  
       INSERT INTO @CHAPDETAIL  
       SELECT ROWID, SALARYDETAILID, SECTIONNAME, GROSSAMOUNT, DEDUCTIBLEAMOUNT    
       FROM  
       (  
         SELECT C.ROWID, C.SALARYDETAILID, SECTIONNAME, GROSSAMOUNT, DEDUCTIBLEAMOUNT   
         FROM #CHAPDETAIL C  
        INNER JOIN  
        #COUNT CO ON C.SALARYDETAILID = CO.SALARYDETAILID   
         WHERE C.ROWID BETWEEN 1 AND 5  
         UNION ALL  
         SELECT 6 AS ROWID, C.SALARYDETAILID, 'OTHERS' AS SECTIONNAME, SUM(GROSSAMOUNT)GROSSAMOUNT, SUM(DEDUCTIBLEAMOUNT)DEDUCTIBLEAMOUNT   
         FROM #CHAPDETAIL C  
        INNER JOIN  
        #COUNT CO ON C.SALARYDETAILID = CO.SALARYDETAILID   
         WHERE C.ROWID BETWEEN 6 AND CO.ROWID  AND CO.SNO = @I
         GROUP BY  C.SALARYDETAILID  
       )T  
       ORDER BY SALARYDETAILID  
     END            
     SET @I = @I+1;  
   END   
  SELECT DISTINCT *   
  INTO #CHAP  
  FROM @CHAPDETAIL ORDER BY SALARYDETAILID  
  SELECT   DISTINCT
            E.SERIALNO,   
            CASE   
                WHEN D.SALUTATION = 1 THEN  'Kum.' ELSE  
                CASE WHEN D.SALUTATION = 2 THEN  'M/s.' ELSE  
                CASE WHEN D.SALUTATION = 3 THEN  'Mr.' ELSE  
                CASE WHEN D.SALUTATION = 4 THEN  'Mrs.' ELSE  
                CASE WHEN D.SALUTATION = 5 THEN  'Shri.' ELSE  
                CASE WHEN D.SALUTATION = 6 THEN  'Smt.' ELSE  
                CASE WHEN D.SALUTATION = 7 THEN  'Sri.' ELSE ''  
             END  END  END  END  END  END END [SALUTATION],   
            D.NAME, D.PAN, E.DESIGNATION,   
            CASE WHEN E.GENDER = 0 THEN 'Male' ELSE 'Female' END [GENDER],   
            CASE WHEN E.ISSENIORCITIZEN = 1 THEN 'Senior Citizen' ELSE CASE WHEN E.ISSENIORCITIZEN = 2 THEN 'Very Senior Citizen' ELSE '' END END [SENIORCITIZEN],   
            CONVERT(VARCHAR, E.EMPLOYMENTFROM, 103) [EMPLOYMENTFROM], CONVERT(VARCHAR, E.EMPLOYMENTTO, 103) [EMPLOYMENTTO],  
            D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, ST.STATENAME,   
           CASE WHEN (D.PINCODE = 0 ) THEN ''  
				 ELSE D.PINCODE  
				 END AS PINCODE, D.PHONENO, D.EMAILADDRESS,  
            S.BASICSALARY, S.TAXABLEALLOWANCE, S.TAXABLEPERQUISITES, S.GROSSSALARY,   
            (SELECT AMOUNT FROM SECTION16DETAIL S16 WHERE S16.SALARYDETAILID = S.SALARYDETAILID AND S16.SALARYSECTIONID = 1) [ET],  
            (SELECT AMOUNT FROM SECTION16DETAIL S16 WHERE S16.SALARYDETAILID = S.SALARYDETAILID AND S16.SALARYSECTIONID = 2) [PT],  
          S.DEDUCTIONUS16, S.INCOMEFROMSALARIES, S.OTHERINCOME, S.GROSSTOTALINCOME,  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 1) [PART1],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 1) [GRS1],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 1) [QUL1],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 2) [PART2],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 2) [GRS2],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 2) [QUL2],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 3) [PART3],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 3) [GRS3],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 3) [QUL3],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 4) [PART4],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 4) [GRS4],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 4) [QUL4],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 5) [PART5],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 5) [GRS5],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 5) [QUL5],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 6) [PART6],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 6) [GRS6],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 6) [QUL6],  
            S.TOTALDEDUNDERCHAPTERVIA, S.TOTALTAXABLEINCOME, S.TAXONTOTALINCOME, S.SURCHARGE, S.EDUCATIONCESS,   
            S.TOTALINCOMETAXPAYABLE, S.RELIEFUS89, S.PREVEMPINCOMETAX, S.PREVEMPCESS, S.MANUALINCOMETAX, S.MANUALCESS,   
            S.NETTAXPAYABLE, ROUND((s.TOTALINCOMETAXPAYABLE - S.TOTALTDS), -1) TAXPAYABLE,   
            S.PERKACCUNFURNISHED, S.PERKFURNISHEDVALUE, S.COSTOFFURNITURE, S.FURNITURERENTALS, S.PERQVALUEOFFURNITURE,  
            S.PERKFURNISHEDTOTAL, S.RENTPAIDBYEMP, S.VALUEOFPERQUISITES, S.CONVEYANCE, S.REMUNERATION, S.TAXABLELTC,   
            S.OTHERBENEFITS, S.PFINEXCESSOF12PERC, S.EXCESSINTERESTCREDITED, S.PANLL1, S.NAMELL1, S.PANLL2, S.NAMELL2,
            S.PANLL3, S.NAMELL3, S.PANLL4, S.NAMELL4, S.PANLEND1, S.NAMELEND1, S.PANLEND2, S.NAMELEND2, S.PANLEND3,
            S.NAMELEND3, S.PANLEND4, S.NAMELEND4, S.SAFNAME, CONVERT(VARCHAR, S.SAFFROMDATE, 103) [SAFFROMDATE], 
            CONVERT(VARCHAR, S.SAFTODATE, 103) [SAFTODATE], 
            CASE WHEN S.AMTREPAID = 0 THEN NULL ELSE S.AMTREPAID END [AMTREPAID], 
            CASE WHEN S.SAFTAXRATE = 0 THEN NULL ELSE S.SAFTAXRATE END [SAFTAXRATE], 
            CASE WHEN S.SAFTAXDEDUCTED = 0 THEN NULL ELSE S.SAFTAXDEDUCTED END [SAFTAXDEDUCTED]   
        FROM DEDUCTEE D  
            INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID  
            INNER JOIN SALARYDETAIL S ON D.DEDUCTEEID = S.DEDUCTEEID  
           -- INNER JOIN CHAPTERVIADETAIL C6A ON S.SALARYDETAILID = C6A.SALARYDETAILID  
            INNER JOIN STATEMASTER ST ON D.STATEID = ST.STATEID  
        WHERE S.BRANCHID = @BRANCHID AND ISNULL(D.EMPTYPE,0) <> 1
    END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ExportSalary2017')
DROP PROCEDURE USP_TDS_ExportSalary2017
GO
CREATE PROCEDURE USP_TDS_ExportSalary2017 -- USP_TDS_ExportSalary2017 1672  
    @BRANCHID INT     
AS    
    BEGIN   
  SELECT D.DEDUCTEEID, D.SALUTATION, D.NAME, D.PAN, D.ADDRESS1, D.ADDRESS2, D.EMPTYPE,   
    D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.PINCODE,D.PHONENO, D.EMAILADDRESS, D.STATEID,  
    E.SERIALNO, E.DESIGNATION, E.GENDER, E.ISSENIORCITIZEN, E.EMPLOYMENTFROM, E.EMPLOYMENTTO  
  INTO #DEDUCTEE  
  FROM DEDUCTEE D WITH(NOLOCK)  
    INNER JOIN EMPLOYEE E WITH(NOLOCK)  
     ON D.DEDUCTEEID = E.DEDUCTEEID   
  WHERE BRANCHID =  @BRANCHID   
  DECLARE @CHAPDETAIL TABLE(ROWID INT, SALARYDETAILID INT,SECTIONNAME VARCHAR(10), GROSSAMOUNT NUMERIC(13,2), DEDUCTIBLEAMOUNT NUMERIC(13,2));    
  DECLARE @COUNT INT, @I INT; DECLARE @ROWID INT;      
   SELECT ROW_NUMBER() OVER (PARTITION BY C.SALARYDETAILID ORDER BY C.SALARYDETAILID, S.SECTIONNAME) ROWID,     
    C.SALARYDETAILID, S.SECTIONNAME, C.GROSSAMOUNT, C.DEDUCTIBLEAMOUNT     
   INTO #CHAPDETAIL    
   FROM CHAPTERVIADETAIL C WITH(NOLOCK)   
    INNER JOIN SALARYSECTIONS S  
     ON C.SALARYSECTIONID = S.SALARYSECTIONID    
   WHERE C.GROSSAMOUNT > 0    
   ORDER BY SALARYDETAILID, SECTIONNAME    
   SELECT ROW_NUMBER() OVER (ORDER BY SALARYDETAILID)SNO,COUNT(ROWID) ROWID, SALARYDETAILID     
   INTO #COUNT    
   FROM #CHAPDETAIL    
   GROUP BY SALARYDETAILID            
     SELECT @COUNT = COUNT(ROWID) FROM #COUNT             
  SET @I = 1;    
    WHILE(@COUNT >= @I)    
    BEGIN    
   SELECT @ROWID = ROWID FROM #COUNT WHERE SNO = @I;       
   IF(@ROWID <= 6)    
    BEGIN    
      INSERT INTO @CHAPDETAIL    
      SELECT C.ROWID, C.SALARYDETAILID, SECTIONNAME, GROSSAMOUNT, DEDUCTIBLEAMOUNT     
      FROM #CHAPDETAIL C    
      INNER JOIN    
      #COUNT CO ON C.SALARYDETAILID = CO.SALARYDETAILID    
       WHERE CO.SNO = @I AND C.ROWID BETWEEN 1 AND 6    
    END    
  ELSE    
   BEGIN    
     INSERT INTO @CHAPDETAIL    
     SELECT ROWID, SALARYDETAILID, SECTIONNAME, GROSSAMOUNT, DEDUCTIBLEAMOUNT      
     FROM    
     (    
     SELECT C.ROWID, C.SALARYDETAILID, SECTIONNAME, GROSSAMOUNT, DEDUCTIBLEAMOUNT     
     FROM #CHAPDETAIL C    
    INNER JOIN    
    #COUNT CO ON C.SALARYDETAILID = CO.SALARYDETAILID     
     WHERE C.ROWID BETWEEN 1 AND 5    
     UNION ALL    
     SELECT 6 AS ROWID, C.SALARYDETAILID, 'OTHERS' AS SECTIONNAME, SUM(GROSSAMOUNT)GROSSAMOUNT, SUM(DEDUCTIBLEAMOUNT)DEDUCTIBLEAMOUNT     
     FROM #CHAPDETAIL C    
    INNER JOIN    
    #COUNT CO ON C.SALARYDETAILID = CO.SALARYDETAILID     
     WHERE C.ROWID BETWEEN 6 AND CO.ROWID  AND CO.SNO = @I  
     GROUP BY  C.SALARYDETAILID    
     )T    
     ORDER BY SALARYDETAILID    
   END              
   SET @I = @I+1;    
    END     
  SELECT DISTINCT *     
  INTO #CHAP    
  FROM @CHAPDETAIL ORDER BY SALARYDETAILID    
  SELECT   DISTINCT  
            D.SERIALNO,     
            CASE     
                WHEN D.SALUTATION = 1 THEN  'Kum.' ELSE    
                CASE WHEN D.SALUTATION = 2 THEN  'M/s.' ELSE    
                CASE WHEN D.SALUTATION = 3 THEN  'Mr.' ELSE    
                CASE WHEN D.SALUTATION = 4 THEN  'Mrs.' ELSE    
                CASE WHEN D.SALUTATION = 5 THEN  'Shri.' ELSE    
                CASE WHEN D.SALUTATION = 6 THEN  'Smt.' ELSE    
                CASE WHEN D.SALUTATION = 7 THEN  'Sri.' ELSE ''    
             END  END  END  END  END  END END [SALUTATION],     
            D.NAME, D.PAN, D.DESIGNATION,     
            CASE WHEN D.GENDER = 0 THEN 'Male' ELSE 'Female' END [GENDER],     
            CASE WHEN D.ISSENIORCITIZEN = 1 THEN 'Senior Citizen' ELSE CASE WHEN D.ISSENIORCITIZEN = 2 THEN 'Very Senior Citizen' ELSE '' END END [SENIORCITIZEN],     
            CONVERT(VARCHAR, D.EMPLOYMENTFROM, 103) [EMPLOYMENTFROM], CONVERT(VARCHAR, D.EMPLOYMENTTO, 103) [EMPLOYMENTTO],    
            D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, ST.STATENAME,     
           CASE WHEN (D.PINCODE = 0 ) THEN ''    
     ELSE D.PINCODE    
     END AS PINCODE, D.PHONENO, D.EMAILADDRESS,    
            S.BASICSALARY, S.TAXABLEALLOWANCE, S.TAXABLEPERQUISITES, S.GROSSSALARY,     
            (SELECT AMOUNT FROM SECTION16DETAIL S16 WHERE S16.SALARYDETAILID = S.SALARYDETAILID AND S16.SALARYSECTIONID = 24)[SD],    
            (SELECT AMOUNT FROM SECTION16DETAIL S16 WHERE S16.SALARYDETAILID = S.SALARYDETAILID AND S16.SALARYSECTIONID = 1) [ET],    
            (SELECT AMOUNT FROM SECTION16DETAIL S16 WHERE S16.SALARYDETAILID = S.SALARYDETAILID AND S16.SALARYSECTIONID = 2) [PT],    
   S.DEDUCTIONUS16, S.INCOMEFROMSALARIES, S.SALARYFROMPREVEMP, S.INCOMEFROMHOUSEPROPERTY, S.INCOMEFROMBUSINESS, S.CAPITALGAINS,   
   S.INCOMEFROMOTHERSOURCES, S.GROSSTOTALINCOME,    
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 1) [PART1],    
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 1) [GRS1],    
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 1) [QUL1],    
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 2) [PART2],    
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 2) [GRS2],    
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 2) [QUL2],    
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 3) [PART3],    
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 3) [GRS3],    
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 3) [QUL3],    
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 4) [PART4],    
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 4) [GRS4],    
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 4) [QUL4],    
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 5) [PART5],    
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 5) [GRS5],    
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 5) [QUL5],    
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 6) [PART6],    
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 6) [GRS6],    
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 6) [QUL6],    
            S.TOTALDEDUNDERCHAPTERVIA, S.TOTALTAXABLEINCOME, S.TAXONTOTALINCOME, S.SURCHARGE, S.EDUCATIONCESS,     
            S.TOTALINCOMETAXPAYABLE, S.RELIEFUS89, S.PREVEMPINCOMETAX, S.PREVEMPCESS, S.MANUALINCOMETAX, S.MANUALCESS,     
            S.NETTAXPAYABLE, ROUND((s.TOTALINCOMETAXPAYABLE - S.TOTALTDS), -1) TAXPAYABLE,     
            S.PERKACCUNFURNISHED, S.PERKFURNISHEDVALUE, S.COSTOFFURNITURE, S.FURNITURERENTALS, S.PERQVALUEOFFURNITURE,    
            S.PERKFURNISHEDTOTAL, S.RENTPAIDBYEMP, S.VALUEOFPERQUISITES, S.CONVEYANCE, S.REMUNERATION, S.TAXABLELTC,     
            S.OTHERBENEFITS, S.PFINEXCESSOF12PERC, S.EXCESSINTERESTCREDITED, S.PANLL1, S.NAMELL1, S.PANLL2, S.NAMELL2,  
            S.PANLL3, S.NAMELL3, S.PANLL4, S.NAMELL4, S.PANLEND1, S.NAMELEND1, S.PANLEND2, S.NAMELEND2, S.PANLEND3,  
            S.NAMELEND3, S.PANLEND4, S.NAMELEND4, S.SAFNAME, CONVERT(VARCHAR, S.SAFFROMDATE, 103) [SAFFROMDATE],   
            CONVERT(VARCHAR, S.SAFTODATE, 103) [SAFTODATE],   
            CASE WHEN S.AMTREPAID = 0 THEN NULL ELSE S.AMTREPAID END [AMTREPAID],   
            CASE WHEN S.SAFTAXRATE = 0 THEN NULL ELSE S.SAFTAXRATE END [SAFTAXRATE],   
            CASE WHEN S.SAFTAXDEDUCTED = 0 THEN NULL ELSE S.SAFTAXDEDUCTED END [SAFTAXDEDUCTED]     
        FROM #DEDUCTEE D    
            INNER JOIN SALARYDETAIL S WITH(NOLOCK)  
    ON D.DEDUCTEEID = S.DEDUCTEEID    
           -- INNER JOIN CHAPTERVIADETAIL C6A ON S.SALARYDETAILID = C6A.SALARYDETAILID    
            INNER JOIN STATEMASTER ST   
    ON D.STATEID = ST.STATEID    
        WHERE S.BRANCHID = @BRANCHID AND ISNULL(D.EMPTYPE,0) <> 1  
    IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL  
 DROP TABLE #DEDUCTEE  
 IF OBJECT_ID('TEMPDB..#CHAPDETAIL') IS NOT NULL  
 DROP TABLE #CHAPDETAIL  
 IF OBJECT_ID('TEMPDB..#COUNT') IS NOT NULL  
 DROP TABLE #COUNT  
 IF OBJECT_ID('TEMPDB..#CHAP') IS NOT NULL  
 DROP TABLE #CHAP   
    END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_EXPORTSALARYPENSIONER')
DROP PROCEDURE USP_TDS_EXPORTSALARYPENSIONER
GO
CREATE PROCEDURE [USP_TDS_EXPORTSALARYPENSIONER]  
    @BRANCHID INT  
AS  
    BEGIN  
  DECLARE @CHAPDETAIL TABLE(ROWID INT, SALARYDETAILID INT,SECTIONNAME VARCHAR(10), GROSSAMOUNT NUMERIC(13,2), DEDUCTIBLEAMOUNT NUMERIC(13,2));  
    DECLARE @COUNT INT, @I INT; DECLARE @ROWID INT;  
        SELECT ROW_NUMBER() OVER (PARTITION BY C.SALARYDETAILID ORDER BY C.SALARYDETAILID, S.SECTIONNAME) ROWID,  
            C.SALARYDETAILID, S.SECTIONNAME, C.GROSSAMOUNT, C.DEDUCTIBLEAMOUNT  
        INTO #CHAPDETAIL  
        FROM CHAPTERVIADETAIL C WITH(NOLOCK) INNER JOIN SALARYSECTIONS S WITH(NOLOCK)  
            ON C.SALARYSECTIONID = S.SALARYSECTIONID  
        WHERE C.GROSSAMOUNT > 0  
        ORDER BY SALARYDETAILID, SECTIONNAME  
        SELECT ROW_NUMBER() OVER (ORDER BY SALARYDETAILID)SNO,COUNT(ROWID) ROWID, SALARYDETAILID  
        INTO #COUNT  
        FROM #CHAPDETAIL  
        GROUP BY SALARYDETAILID  
       SELECT @COUNT = COUNT(ROWID) FROM #COUNT  
  SET @I = 1;  
   WHILE(@COUNT >= @I)  
   BEGIN  
    SELECT @ROWID = ROWID FROM #COUNT WHERE SNO = @I;  
    IF(@ROWID <= 6)  
     BEGIN  
      INSERT INTO @CHAPDETAIL  
      SELECT C.ROWID, C.SALARYDETAILID, SECTIONNAME, GROSSAMOUNT, DEDUCTIBLEAMOUNT  
      FROM #CHAPDETAIL C  
      INNER JOIN  
      #COUNT CO ON C.SALARYDETAILID = CO.SALARYDETAILID  
       WHERE CO.SNO = @I AND C.ROWID BETWEEN 1 AND 6  
     END  
    ELSE  
     BEGIN  
       INSERT INTO @CHAPDETAIL  
       SELECT ROWID, SALARYDETAILID, SECTIONNAME, GROSSAMOUNT, DEDUCTIBLEAMOUNT  
       FROM  
       (  
         SELECT C.ROWID, C.SALARYDETAILID, SECTIONNAME, GROSSAMOUNT, DEDUCTIBLEAMOUNT  
         FROM #CHAPDETAIL C  
        INNER JOIN  
        #COUNT CO ON C.SALARYDETAILID = CO.SALARYDETAILID  
         WHERE C.ROWID BETWEEN 1 AND 5  
         UNION ALL  
         SELECT 6 AS ROWID, C.SALARYDETAILID, 'OTHERS' AS SECTIONNAME, SUM(GROSSAMOUNT)GROSSAMOUNT, SUM(DEDUCTIBLEAMOUNT)DEDUCTIBLEAMOUNT  
         FROM #CHAPDETAIL C  
        INNER JOIN  
        #COUNT CO ON C.SALARYDETAILID = CO.SALARYDETAILID  
         WHERE C.ROWID BETWEEN 6 AND CO.ROWID  AND CO.SNO = @I  
         GROUP BY  C.SALARYDETAILID  
       )T  
       ORDER BY SALARYDETAILID  
     END  
     SET @I = @I+1;  
   END  
  SELECT DISTINCT *  
  INTO #CHAP  
  FROM @CHAPDETAIL ORDER BY SALARYDETAILID  
  SELECT   DISTINCT  
            D.REFERENCENO, E.PPONUMBER, E.ACCOUNTNO, D.NAME, D.PAN, E.DESIGNATION,  
            CASE WHEN E.GENDER = 0 THEN 'MALE' ELSE 'FEMALE' END [GENDER],  
            CASE WHEN E.ISSENIORCITIZEN = 1 THEN 'SENIOR CITIZEN' ELSE CASE WHEN E.ISSENIORCITIZEN = 2 THEN 'VERY SENIOR CITIZEN' ELSE '' END END [SENIORCITIZEN],  
            CONVERT(VARCHAR, E.EMPLOYMENTFROM, 103) [EMPLOYMENTFROM], CONVERT(VARCHAR, E.EMPLOYMENTTO, 103) [EMPLOYMENTTO],  
            D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, ST.STATENAME,  
           CASE WHEN (D.PINCODE = 0 ) THEN ''  
     ELSE D.PINCODE  
     END AS PINCODE, D.PHONENO, D.EMAILADDRESS,  
            S.BASICSALARY, S.TAXABLEALLOWANCE,  
            (SELECT AMOUNT FROM SECTION16DETAIL S16 WITH(NOLOCK) WHERE S16.SALARYDETAILID = S.SALARYDETAILID AND S16.SALARYSECTIONID = 1) [ET],  
            (SELECT AMOUNT FROM SECTION16DETAIL S16 WITH(NOLOCK) WHERE S16.SALARYDETAILID = S.SALARYDETAILID AND S16.SALARYSECTIONID = 2) [PT],  
			S.OTHERINCOME,  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 1) [PART1],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 1) [GRS1],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 1) [QUL1],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 2) [PART2],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 2) [GRS2],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 2) [QUL2],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 3) [PART3],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 3) [GRS3],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 3) [QUL3],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 4) [PART4],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 4) [GRS4],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 4) [QUL4],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 5) [PART5],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 5) [GRS5],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 5) [QUL5],  
            (SELECT SECTIONNAME FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 6) [PART6],  
            (SELECT GROSSAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 6) [GRS6],  
            (SELECT DEDUCTIBLEAMOUNT FROM #CHAP CH WHERE CH.SALARYDETAILID = S.SALARYDETAILID AND CH.ROWID = 6) [QUL6],  
            S.TAXONTOTALINCOME, S.CREDITUS87A,S.SURCHARGE, S.EDUCATIONCESS,  
            S.RELIEFUS89, S.PREVEMPINCOMETAX, S.PREVEMPCESS, S.MANUALINCOMETAX, S.MANUALCESS,    
            S.PERKACCUNFURNISHED, S.PERKFURNISHEDVALUE, S.COSTOFFURNITURE, S.FURNITURERENTALS, S.PERQVALUEOFFURNITURE,  
            S.PERKFURNISHEDTOTAL, S.RENTPAIDBYEMP, S.VALUEOFPERQUISITES, S.CONVEYANCE, S.REMUNERATION, S.TAXABLELTC,  
            S.OTHERBENEFITS, S.PFINEXCESSOF12PERC, S.EXCESSINTERESTCREDITED  
        FROM DEDUCTEE D  
            INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
            INNER JOIN SALARYDETAIL S WITH(NOLOCK) ON D.DEDUCTEEID = S.DEDUCTEEID  
            INNER JOIN STATEMASTER ST WITH(NOLOCK) ON D.STATEID = ST.STATEID  
        WHERE S.BRANCHID = @BRANCHID AND ISNULL(D.EMPTYPE,0) = 1  
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_FinalUpdate')
DROP PROCEDURE USP_TDS_FinalUpdate
GO
CREATE PROCEDURE [dbo].[USP_TDS_FinalUpdate] -----[USP_TDS_FinalUpdate] 1686,3,1
	@BRANCHID INT,
	@FORMID  INT,
	@QUARTER INT
AS
BEGIN	
DECLARE @ERROR INT,@RETURNTYPE INT;
SET @ERROR =0;
SET @RETURNTYPE =0;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		BEGIN TRANSACTION  
	     BEGIN TRY
			IF EXISTS(SELECT CORRECTIONSTATUS FROM CORRDEDUCTOR WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
									AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 6)
				BEGIN /*-------------UPDATE DEDUCTOR FOR CANCELLATION-------------*/					
						UPDATE DEDUCTOR SET TAN=CD.TAN
										FROM DEDUCTOR D
											  INNER JOIN
											 BRANCHDEDUCTORS BD
										  ON D.DEDUCTORID=BD.DEDUCTORID 
											  INNER JOIN 
											 CORRDEDUCTOR CD
										  ON CD.BRANCHID=BD.BRANCHID AND CD.QUARTER=BD.QUARTER
									   WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER 
											 AND CD.CORRECTIONSTATUS=6
						DELETE FROM CORRDEDUCTOR WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
						DELETE FROM CORRDEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
						DELETE FROM CORRCHALLANDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
						DELETE FROM CORREMPLOYEE WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
						DELETE FROM CORRNONEMPLOYEE WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
						--DELETE FROM CORRECTIONDETAILS WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 				
						UPDATE ACKNO SET ISUPLOADED=0,ISVALID=0 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
						SET @RETURNTYPE=1
						SET @ERROR=1					
				END				
			ELSE
		  	    BEGIN  
				 /*-------------UPDATE DEDUCTOR MASTER-------------*/
					IF EXISTS(SELECT CORRECTIONSTATUS FROM CORRDEDUCTOR WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
										AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 2)
					BEGIN
						DECLARE @CORRSTATUSID INT,@ORIGINALSTATUSID INT,@SECTIONID INT;
						SELECT  @CORRSTATUSID = STATUSID FROM CORRDEDUCTOR WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
										QUARTER = @QUARTER AND CORRECTIONSTATUS=2
						SELECT @ORIGINALSTATUSID=STATUSID FROM DEDUCTOR D WITH(NOLOCK)
																INNER JOIN
															   BRANCHDEDUCTORS BD WITH(NOLOCK)
															  ON D.DEDUCTORID=BD.DEDUCTORID
														WHERE BD.BRANCHID=@BRANCHID AND BD.QUARTER=@QUARTER
						IF @CORRSTATUSID <> @ORIGINALSTATUSID
							BEGIN
							   IF(@CORRSTATUSID=1)
								BEGIN
								SET @SECTIONID=1
								END
								ELSE
								BEGIN
								SET @SECTIONID=2
								END
								UPDATE CHALLANDETAIL SET SECTIONID = @SECTIONID
								WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = @QUARTER;
								UPDATE DEDUCTIONDETAIL SET SECTIONID = @SECTIONID
								WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = @QUARTER;								
							END
						--UPDATING THE DEDUCTOR DETAILS FROM CORRECTION DEDUCTOR TABLE
						UPDATE DEDUCTOR SET DEDUCTORNAME=CD.DEDUCTORNAME,
											ADDRESS1=CD.ADDRESS1,
											ADDRESS2=CD.ADDRESS2,
											ADDRESS3=CD.ADDRESS3,
											ADDRESS4=CD.ADDRESS4,
											ADDRESS5=CD.ADDRESS5,
											STATEID=CD.STATEID,
											ISADDRCHANGED=CD.ISADDRCHANGED,
											TAN=CD.TAN,
											PAN=CD.PAN,
											PINCODE=CD.PINCODE,
											EMAILADDRESS=CD.EMAILADDRESS,
											STDCODE=CD.STDCODE,
											PHONENO=CD.PHONENO,
											STATUSID=CD.STATUSID,
											DEDUCTORTYPEID=CD.DEDUCTORTYPEID,
											GOVTADDSTATEID=CD.GOVTADDSTATEID,
											GOVTADDPAOCODE=CD.GOVTADDPAOCODE,
											GOVTADDPAOREGNNO=CD.GOVTADDPAOREGNNO,
											GOVTADDDDOCODE=CD.GOVTADDDDOCODE,
											GOVTADDDDOREGNNO=CD.GOVTADDDDOREGNNO,
											GOVTADDMINISTRY=CD.GOVTADDMINISTRY,
											GOVTADDOTHERNAME=CD.GOVTADDOTHERNAME,
											TANREGISTRATION = CD.TANREGISTRATION,
											GSTIN = CD.GSTIN
									   FROM DEDUCTOR D
											INNER JOIN
											BRANCHDEDUCTORS BD
										 ON D.DEDUCTORID=BD.DEDUCTORID 
											INNER JOIN 
											CORRDEDUCTOR CD
										 ON CD.BRANCHID=BD.BRANCHID AND CD.QUARTER=BD.QUARTER
									  WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER 
									        AND CD.CORRECTIONSTATUS=2
						--updating the Responsible person details from Correction deductor table			  
						UPDATE RESPONSIBLEPERSON SET PERSONNAME=CD.RPNAME,
													 ADDRESS1=CD.RPADDRESS1,
													 ADDRESS2=CD.RPADDRESS2,
													 ADDRESS3=CD.RPADDRESS3,
													 ADDRESS4=CD.RPADDRESS4,
													 ADDRESS5=CD.RPADDRESS5,
													 STATEID=CD.RPSTATEID,
													 PINCODE=CD.RPPINCODE,
													 ISADDRCHANGED=CD.RPISADDRCHANGED,
													 DESIGNATION=CD.RPDESIGNATION,
													 EMAILADDRESS=CD.RPEMAILADDRESS,
													 STDCODE=CD.RPSTDCODE,
													 PHONENO=CD.RPPHONENO,
													 MOBILENO=CD.RPMOBILENO										 
												FROM DEDUCTOR D
													 INNER JOIN 
													 RESPONSIBLEPERSON RP
												  ON D.DEDUCTORID=RP.DEDUCTORID
													 INNER JOIN 
													 BRANCHDEDUCTORS BD
												  ON D.DEDUCTORID=BD.DEDUCTORID 
													 INNER JOIN 
													 CORRDEDUCTOR CD
												  ON CD.BRANCHID=BD.BRANCHID AND CD.QUARTER=BD.QUARTER 
											   WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER
													 AND CD.CORRECTIONSTATUS=2											   
						--Deleting deductor details having CorrectionStatus 1 and 
						--Updating the CorrectionStatus to 1 of deductor having CorrectionStatus 2 							 
						DELETE FROM CORRDEDUCTOR WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 1
						UPDATE CORRDEDUCTOR SET CORRECTIONSTATUS = 1 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER						
					END	
			     /*-------------UPDATE DEDUCTEE MASTER & EMPLOYEE MASTER-------------*/	
						IF(@FORMID = 1)
							 BEGIN 
								/*INERT NEWLY ADDED RECORD IN DEDUCTEE TABLE*/
								INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,
																ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS)
								SELECT BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,
																ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS 
												FROM CORREMPLOYEE WITH(NOLOCK)
												WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
												QUARTER = @QUARTER AND CORRECTIONSTATUS = 5 AND UPDATEINDICATOR = 1 AND DEDUCTEEID IS NULL
								/*INSERT NEWLY ADDED RECORD IN EMPLOYEE TABLE*/
								INSERT INTO EMPLOYEE(SERIALNO,DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,ISSENIORCITIZEN)
								SELECT DEDUCTEESERIALNO AS SERIALNO,D.DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,ISSENIORCITIZEN
								  FROM CORREMPLOYEE C WITH(NOLOCK)
										INNER JOIN 
										DEDUCTEE D WITH(NOLOCK)
									ON C.NAME = D.NAME AND C.PAN = D.PAN AND 
									   ISNULL(C.PANREFERENCE,'') = ISNULL(D.PANREFERENCE,'') AND C.BRANCHID = D.BRANCHID
								 WHERE C.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 5 AND C.DEDUCTEEID IS NULL AND D.DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))
								/*NEWLY ADDED FOR UPDATING DEDUCTEEID IN CORREMPLOYEE TABLE*/
								/*NOTE: EMPLOYEE TABLE IS INCLUDED IN JOINS BCOZ DEDUCTEE TABLE MAY CONTAIN SAME RECORD(NAME & PAN) FOR DIFFERENT FORMID*/
								UPDATE CORREMPLOYEE SET DEDUCTEEID=D.DEDUCTEEID 
								FROM DEDUCTEE D																	
										INNER JOIN 
											EMPLOYEE E 
											ON D.DEDUCTEEID = E.DEDUCTEEID 
										INNER JOIN 
											CORREMPLOYEE CE 
											ON	D.BRANCHID=CE.BRANCHID AND D.NAME=CE.NAME AND D.PAN=CE.PAN AND ISNULL(D.PANREFERENCE,'')=ISNULL(CE.PANREFERENCE,'')
										WHERE D.BRANCHID=@BRANCHID AND CE.FORMID=@FORMID AND CE.QUARTER=@QUARTER AND CE.CORRECTIONSTATUS=5									
								/*UPDATE DEDUCTEEID AND CORRECTIONSTATUS FROM 5 TO 1 IN CORREMPLOYEE TABLE*/
								UPDATE CORREMPLOYEE
								SET CORRECTIONSTATUS = 1
								FROM CORREMPLOYEE CE 
									INNER JOIN 			
									EMPLOYEE E ON CE.DEDUCTEEID = E.DEDUCTEEID AND CE.DEDUCTEESERIALNO = E.SERIALNO 
									INNER JOIN 
									 DEDUCTEE D
								  ON E.DEDUCTEEID = D.DEDUCTEEID AND CE.BRANCHID = D.BRANCHID 
							   WHERE CE.BRANCHID = @BRANCHID AND CE.FORMID = @FORMID AND QUARTER = @QUARTER AND 
									 CORRECTIONSTATUS = 5
								/*-------------PAN UPDATE-------------*/
								/*SHIFTING MATCHID TO DEDUCTEEID*/
								UPDATE CORREMPLOYEE SET DEDUCTEEID = MATCHEDID
								WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND MATCHEDID IS NOT NULL AND ISNULL(DEDUCTEEID,0) <=0
								UPDATE DEDUCTEE SET PAN = CE.PAN, PANREFERENCE = '' FROM CORREMPLOYEE CE
								INNER JOIN DEDUCTEE D ON CE.DEDUCTEEID=D.DEDUCTEEID AND CE.BRANCHID=D.BRANCHID
								WHERE CE.BRANCHID = @BRANCHID AND CE.FORMID = @FORMID AND CE.QUARTER = @QUARTER AND CE.CORRECTIONSTATUS = 3 
								--/*DELETE ALL EMPLOYEES WHERE CORRECTIONSTATUS IS 1 AND PAN IS UPDATED*/						
								DELETE FROM CORREMPLOYEE FROM CORREMPLOYEE AS CE 
								INNER JOIN 
								(
								   SELECT DEDUCTEEID FROM CORREMPLOYEE WITH(NOLOCK)
									WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND 
											   QUARTER=@QUARTER AND CORRECTIONSTATUS=3
								) AS DEL
								ON CE.DEDUCTEEID = DEL.DEDUCTEEID
								WHERE CE.BRANCHID=@BRANCHID AND CE.FORMID=@FORMID AND QUARTER=@QUARTER AND CE.CORRECTIONSTATUS=1			
								UPDATE CORREMPLOYEE SET CORRECTIONSTATUS=1--,UPDATEINDICATOR=1 
									WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
										  QUARTER = @QUARTER AND CORRECTIONSTATUS = 3
								UPDATE CORREMPLOYEE SET UPDATEINDICATOR=1 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
										  QUARTER = @QUARTER AND UPDATEINDICATOR=0
							END					
						ELSE
							 BEGIN
							    /*SET MATHCHEDID TO DEDUCTEEID FOR PAN UPDATE*/
								UPDATE CORRNONEMPLOYEE SET DEDUCTEEID = MATCHEDID
								WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND MATCHEDID IS NOT NULL AND ISNULL(DEDUCTEEID,0) <=0
									/*INERT NEWLY ADDED RECORD IN DEDUCTEE TABLE*/
								INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,
																ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS)
								SELECT BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,
																ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS 
												FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
																		QUARTER = @QUARTER AND (ISNULL(DEDUCTEEID,0) = 0)
																		AND UPDATEINDICATOR=1
								/*INERT NEWLY ADDED RECORD IN EMPLOYEE TABLE*/
								INSERT INTO NONEMPLOYEE(SERIALNO,DEDUCTEEID,DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,ISTRANSPORTER)
								SELECT DEDUCTEESERIALNO AS SERIALNO,D.DEDUCTEEID,CNE.CODE,CNE.ISAPPLICABLE26,CNE.ISAPPLICABLE27,CNE.ISTRANSPORTER
								  FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)
										INNER JOIN 
										DEDUCTEE D WITH(NOLOCK)
									ON CNE.NAME = D.NAME AND CNE.PAN = D.PAN AND 
									   ISNULL(CNE.PANREFERENCE,'') = ISNULL(D.PANREFERENCE,'') AND CNE.BRANCHID = D.BRANCHID
								 WHERE CNE.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND (ISNULL(CNE.DEDUCTEEID,0) = 0)	AND UPDATEINDICATOR=1 AND D.DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM EMPLOYEE WITH(NOLOCK)) AND D.DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))			
								/*NEWLY ADDED FOR UPDATING DEDUCTEEID IN CORREMPLOYEE TABLE*/
								/*NOTE: NONEMPLOYEE TABLE IS INCLUDED IN JOINS BCOZ DEDUCTEE TABLE MAY CONTAIN SAME RECORD(NAME & PAN) FOR DIFFERENT FORMID*/
								UPDATE CORRNONEMPLOYEE SET DEDUCTEEID=D.DEDUCTEEID 
								FROM DEDUCTEE D 
										INNER JOIN 
											NONEMPLOYEE NE 
											ON D.DEDUCTEEID = NE.DEDUCTEEID 
										INNER JOIN 
											CORRNONEMPLOYEE CNE 
											ON D.BRANCHID=CNE.BRANCHID AND D.NAME=CNE.NAME AND 
											D.PAN=CNE.PAN AND ISNULL(D.PANREFERENCE,'')=ISNULL(CNE.PANREFERENCE,'')
								WHERE D.BRANCHID=@BRANCHID AND CNE.FORMID=@FORMID AND CNE.QUARTER=@QUARTER AND ISNULL(CNE.DEDUCTEEID,0) = 0 AND UPDATEINDICATOR=1
								/*UPDATE DEDUCTEEID AND CORRECTIONSTATUS FROM 5 TO 1 IN CORREMPLOYEE TABLE*/						
								UPDATE CORRNONEMPLOYEE SET CORRECTIONSTATUS = 1
								FROM NONEMPLOYEE 
								INNER JOIN DEDUCTEE ON NONEMPLOYEE.DEDUCTEEID = DEDUCTEE.DEDUCTEEID
							   WHERE CORRNONEMPLOYEE.BRANCHID = @BRANCHID AND CORRNONEMPLOYEE.FORMID = @FORMID AND QUARTER = @QUARTER AND 
										 CORRNONEMPLOYEE.DEDUCTEESERIALNO = NONEMPLOYEE.SERIALNO AND DEDUCTEE.BRANCHID = @BRANCHID AND 
										 (ISNULL(CORRNONEMPLOYEE.DEDUCTEEID,0) = 0) 
								/*-------------PAN UPDATE-------------*/
								UPDATE DEDUCTEE SET PAN = CNE.PAN, PANREFERENCE = '' 
								FROM CORRNONEMPLOYEE CNE
								INNER JOIN DEDUCTEE D ON CNE.DEDUCTEEID=D.DEDUCTEEID AND CNE.BRANCHID=D.BRANCHID
								WHERE CNE.BRANCHID = @BRANCHID AND CNE.FORMID = @FORMID AND  CNE.QUARTER = @QUARTER AND 
										 CNE.CORRECTIONSTATUS = 3						
								DELETE FROM CORRNONEMPLOYEE FROM CORRNONEMPLOYEE AS CNE 
								INNER JOIN 
								(
								   SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK)
									WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND CORRECTIONSTATUS=3
								) AS DEL
								ON CNE.DEDUCTEESERIALNO=DEL.DEDUCTEESERIALNO
								WHERE CNE.BRANCHID=@BRANCHID AND CNE.FORMID=@FORMID AND CNE.QUARTER=@QUARTER AND CNE.CORRECTIONSTATUS=1
								UPDATE CORRNONEMPLOYEE SET CORRECTIONSTATUS=1--,UPDATEINDICATOR=1 
									WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 3
								UPDATE CORRNONEMPLOYEE SET UPDATEINDICATOR=1 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
										  QUARTER = @QUARTER AND UPDATEINDICATOR=0					
							END										
						/*SHIFTING MATCHID TO CHALLANID*/
						UPDATE CORRCHALLANDETAIL SET CHALLANID = MATCHEDID
						 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND MATCHEDID IS NOT NULL AND ISNULL(CHALLANID,0) <=0
						IF EXISTS(Select CHALLANSERIALNO from CORRCHALLANDETAIL WITH(NOLOCK) where BRANCHID=@BRANCHID and FORMID=@FORMID and QUARTER=@QUARTER AND CORRECTIONSTATUS=2)
						BEGIN/*Update Challans SectionID to correction deduction and regular deduction(part Payment) *//* Updating Correction Deductions*/				        
								 UPDATE CORRDEDUCTIONDETAIL SET SECTIONID=CD.SECTIONID 
								 FROM CORRDEDUCTIONDETAIL DD
								 INNER JOIN CORRCHALLANDETAIL CD ON DD.BRANCHID = CD.BRANCHID AND DD.FORMID = CD.FORMID AND DD.QUARTER = CD.QUARTER AND 
																					    DD.CHALLANERETURNID = CD.CHALLANERETURNID 
								 WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND CD.CORRECTIONSTATUS = 2 AND ISUPDATECHALLAN = 1		
									/*Creating Temp Table*/
								SELECT PARTPAYMENTID, CHALLANID, BRANCHID, FORMID, QUARTER
								INTO #DISTPARTPAYMENT
								FROM
								(
										SELECT DISTINCT PARTPAYMENTID,DL.CHALLANID,DD.BRANCHID,DD.FORMID,DD.QUARTER 
										FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
										INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
										INNER JOIN CORRCHALLANDETAIL CCD WITH(NOLOCK) ON CCD.CHALLANID = DL.CHALLANID
										WHERE CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.QUARTER = @QUARTER AND CORRECTIONSTATUS = 2 
								)DISTPART
								SELECT  DDX.PARTPAYMENTID,CASE WHEN MAX(DDX.CHALLANID)-AVG(DDX.CHALLANID)>0 THEN 1 ELSE 0 END  DIFF 
									INTO #Temp
									FROM
									(	
												SELECT DD.DEDUCTIONID,DD.PARTPAYMENTID,CAST(DL.CHALLANID AS NUMERIC) CHALLANID 
												FROM DEDUCTIONDETAIL DD	WITH(NOLOCK)		
												INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
												INNER JOIN #DISTPARTPAYMENT RES ON DD.PARTPAYMENTID = RES.PARTPAYMENTID 					
												AND DD.BRANCHID = RES.BRANCHID AND DD.FORMID = RES.FORMID AND DD.QUARTER = RES.QUARTER
									)DDX GROUP BY DDX.PARTPAYMENTID
									DROP TABLE #DISTPARTPAYMENT
									/* Creating Temp table #info for tracking PartPayment*/
								SELECT  DISTINCT DD.QUARTER,DD.BRANCHID,DD.FORMID,DEDUCTEEID,ERETURNID,MODE,DEDUCTEEPAN,LASTDEDUCTEEPAN,
											DEDUCTEEPANREF,LASTDEDUCTEEPANREF,REMINCOMETAX AS INCOMETAX,REMSURCHARGE AS SURCHARGE,REMEDUCATIONCESS AS EDUCATIONCESS,REMTOTALDEDUCTED as TOTALDEDUCTED,REMPAYMENTMADE AS PAYMENTMADE,
											PAYMENTDATE,DEDUCTEDDATE,SECTIONID,
											0 AS INCOMETAXRATE,0 AS SURCHARGERATE,0 as EDUCATIONCESSRATE,0 AS TAXRATE,
											NONDEDREASON,
											ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,1 AS ISTAXINFOEDITABLE,
											REMINCOMETAX AS ORGINCOMETAX,REMSURCHARGE AS ORGSURCHARGE,REMEDUCATIONCESS AS ORGEDUCATIONCESS,REMTOTALDEDUCTED as ORGTOTALDEDUCTED,
											DD.PARTPAYMENTID,REMPAYMENTMADE AS ORGPAYMENTMADE 
											INTO #INFO 
											FROM #TEMP T 
											INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON T.PARTPAYMENTID=DD.PARTPAYMENTID 
											INNER JOIN PARTPAYMENTDETAILS PPD WITH(NOLOCK) ON PPD.PARTPAYMENTID=T.PARTPAYMENTID AND PPD.BRANCHID=DD.BRANCHID AND PPD.FORMID=DD.FORMID AND PPD.QUARTER=DD.QUARTER
											WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
											AND (PPD.REMINCOMETAX > 0 OR PPD.REMSURCHARGE > 0 OR PPD.REMEDUCATIONCESS >0 OR PPD.REMTOTALDEDUCTED >0 OR PPD.REMPAYMENTMADE >0)
											AND T.DIFF=1		 
									/* Updating all the Deductions of Diff 0(No-Partpayment or all Partpayments are  linked with same Challan)*/
								UPDATE DEDUCTIONDETAIL SET SECTIONID=CCD.SECTIONID 
									FROM DEDUCTIONDETAIL DD 
										INNER JOIN #TEMP T ON DD.PARTPAYMENTID=T.PARTPAYMENTID  
										INNER JOIN DEDCHALINK DCL ON DCL.DEDUCTIONID=DD.DEDUCTIONID
										INNER JOIN CORRCHALLANDETAIL CCD ON CCD.CHALLANID=DCL.CHALLANID AND CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER
									WHERE   DD.BRANCHID=@BRANCHID and DD.FORMID=@FORMID --AND CCD.QUARTER=@QUARTER 
											AND CCD.CORRECTIONSTATUS = 2 AND CCD.ISUPDATECHALLAN=1 									
											AND DIFF=0
									/* Updating all the Deductions of Diff 1(morethan 1 Partpayments and partpayments are linked with diff Challan)*/
								DECLARE @NEWPID	INT	
								IF EXISTS(SELECT * FROM   DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER)
									SELECT @NEWPID = MAX(ISNULL(PARTPAYMENTID,0))+1 FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER          
								ELSE 
									SET @NEWPID=0		
								UPDATE DEDUCTIONDETAIL 
									SET PARTPAYMENTID=@NEWPID,@NEWPID=@NEWPID+1,SECTIONID=CCD.SECTIONID,ORGINCOMETAX=DD.INCOMETAX,
										ORGSURCHARGE=DD.SURCHARGE,ORGEDUCATIONCESS=DD.EDUCATIONCESS,
										ORGPAYMENTMADE=DD.PAYMENTMADE,ORGTOTALDEDUCTED =DD.TOTALDEDUCTED,
										CERTNO = DD.CERTNO,TDSRATEASPER = DD.TDSRATEASPER,ACKNO = DD.ACKNO,
										REMITTANCEID = DD.REMITTANCEID,COUNTRYID = DD.COUNTRYID,EMAILDED = DD.EMAILDED,
										CONTACTNODED = DD.CONTACTNODED,ADDRESSDED = DD.ADDRESSDED,IDENTNUMDED = DD.IDENTNUMDED										
									FROM DEDUCTIONDETAIL DD 
										INNER JOIN #TEMP T ON DD.PARTPAYMENTID=T.PARTPAYMENTID  
										INNER JOIN DEDCHALINK DCL ON DCL.DEDUCTIONID=DD.DEDUCTIONID
										INNER JOIN CORRCHALLANDETAIL CCD on CCD.CHALLANID=DCL.CHALLANID AND CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER
									WHERE   DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER AND CCD.CORRECTIONSTATUS = 2
											AND CCD.ISUPDATECHALLAN=1 AND DIFF=1						
									/* UPDATING AMOUNTS IN OTHER PARTPAYMENTS*/
								UPDATE DEDUCTIONDETAIL SET 
										ORGINCOMETAX		= RES.INCOMETAX + PPD.REMINCOMETAX,
										ORGEDUCATIONCESS	= RES.EDUCATIONCESS + PPD.REMEDUCATIONCESS,
										ORGSURCHARGE		= RES.SURCHARGE + PPD.REMSURCHARGE,
										ORGTOTALDEDUCTED	= RES.TOTALDEDUCTED + PPD.REMTOTALDEDUCTED,
										ORGPAYMENTMADE		= RES.PAYMENTMADE + PPD.REMPAYMENTMADE									
									FROM
									(
										SELECT DD.PARTPAYMENTID,DD.BRANCHID,DD.FORMID,DD.QUARTER,
										SUM(DD.INCOMETAX) AS INCOMETAX,
										SUM(DD.SURCHARGE) AS SURCHARGE ,
										SUM(DD.EDUCATIONCESS) AS EDUCATIONCESS, 
										SUM(DD.PAYMENTMADE) AS PAYMENTMADE,
										SUM(DD.TOTALDEDUCTED) AS TOTALDEDUCTED
										FROM #TEMP T
										INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.BRANCHID=@BRANCHID AND FORMID =@FORMID  AND QUARTER = @QUARTER AND DD.PARTPAYMENTID=T.PARTPAYMENTID
										WHERE DIFF = 1 
										GROUP BY DD.PARTPAYMENTID,DD.BRANCHID,DD.FORMID,DD.QUARTER
									) RES
									INNER JOIN DEDUCTIONDETAIL DD ON DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.PARTPAYMENTID = RES.PARTPAYMENTID
									INNER JOIN PARTPAYMENTDETAILS PPD ON PPD.BRANCHID = @BRANCHID AND PPD.FORMID = @FORMID AND PPD.QUARTER = @QUARTER AND PPD.PARTPAYMENTID = RES.PARTPAYMENTID
									/* Inserting Remaining partPayment If all the linked challans are changed in partPayment*/
								DECLARE @SERIALNO INT 
								SELECT @SERIALNO=  MAX(ISNULL(SERIALNO,0))+1 FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
								INSERT INTO DEDUCTIONDETAIL
									(SERIALNO,QUARTER,BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,DEDUCTEEPAN,LASTDEDUCTEEPAN,DEDUCTEEPANREF,LASTDEDUCTEEPANREF, INCOMETAX,
										SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,
										TAXRATE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,ISTAXINFOEDITABLE,ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,
										ORGTOTALDEDUCTED,PARTPAYMENTID,ORGPAYMENTMADE) 		
									SELECT NUMBER+@SERIALNO AS SERIALNO,QUARTER,BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,DEDUCTEEPAN,LASTDEDUCTEEPAN,DEDUCTEEPANREF,
											   LASTDEDUCTEEPANREF,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,
											   INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,TAXRATE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,ISTAXINFOEDITABLE,
											   ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,PARTPAYMENTID,ORGPAYMENTMADE							      
										   FROM
										   (
												SELECT ROW_NUMBER() OVER (ORDER BY TT.BRANCHID) AS NUMBER,TT.* FROM
												(
												SELECT DISTINCT I.* FROM #INFO I LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.PARTPAYMENTID=I.PARTPAYMENTID  aND DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
																	  INNER JOIN PARTPAYMENTDETAILS PPD WITH(NOLOCK) ON I.PARTPAYMENTID=PPD.PARTPAYMENTID AND PPD.BRANCHID=@BRANCHID AND PPD.FORMID=@FORMID AND PPD.QUARTER=@QUARTER
												WHERE PPD.BRANCHID=@BRANCHID AND PPD.FORMID=@FORMID AND PPD.QUARTER=@QUARTER
												AND DD.DEDUCTIONID IS NULL 
												) TT
											) MAIN
											/* DELETE UNWANTED PARTPAYMENT DEDUCTIONS */			
								DELETE  FROM PARTPAYMENTDETAILS WHERE PARTPAYMENTID IN
									(
										SELECT DISTINCT PPD.PARTPAYMENTID FROM   PARTPAYMENTDETAILS PPD WITH(NOLOCK)
										 LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON PPD.PARTPAYMENTID=DD.PARTPAYMENTID AND PPD.BRANCHID=DD.BRANCHID AND PPD.FORMID=DD.FORMID 
										 LEFT JOIN DEDCHALINK DCL  WITH(NOLOCK) ON  DCL.DEDUCTIONID=DD.DEDUCTIONID	AND PPD.QUARTER=DD.QUARTER WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID
											  AND DD.QUARTER=@QUARTER AND  DCL.DEDCHALINKID IS NULL 
									) AND  BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
						END
						BEGIN/*-------------CHALLAN UPDATE-------------*/	
							UPDATE CHALLANDETAIL
							   SET ERETURNID = CCD.CHALLANERETURNID,
								   LINKDEDCOUNT= ISNULL(LNKCOUNT.LINKDEDCOUNT,0),
								   ISNILCHALLAN= CCD.ISNILCHALLAN,
								   ISUPDATECHALLAN= CCD.ISUPDATECHALLAN,
								   MODEOFPAYMENT= CCD.MODEOFPAYMENT,
								   BANKCHALLANNO= CCD.BANKCHALLANNO,
								   LASTBANKCHALLANNO= CCD.LASTBANKCHALLANNO,
								   TRNVOUCHERNO= CCD.TRNVOUCHERNO,
								   LASTTRNVOUCHERNO= CCD.LASTTRNVOUCHERNO,
								   BANKID= CCD.BANKID,
								   LASTBANKID= CCD.LASTBANKID,
								   CHALLANPAIDDATE= CCD.CHALLANPAIDDATE,
								   LASTCHALLANPAIDDATE= CCD.LASTCHALLANPAIDDATE,
								   DATEOFDEBIT= CCD.DATEOFDEBIT,
								   SECTIONID= CCD.SECTIONID,
								   INCOMETAX= CCD.INCOMETAX,
								   SURCHARGE= CCD.SURCHARGE,
								   EDUCATIONCESS= CCD.EDUCATIONCESS,
								   INTEREST= CCD.INTEREST,
								   PENALTY= CCD.PENALTY,
								   OTHERS= CCD.OTHERS,
								   CHALLANTOTAL= CCD.CHALLANTOTAL,
								   LASTCHALLANTOTAL= CCD.LASTCHALLANTOTAL,
								   CHEQUENO= CCD.CHEQUENO,
								   CHEQUEDATE= CCD.CHEQUEDATE,
								   CHEQUEDRAWNON= CCD.CHEQUEDRAWNON,
								   TRANREFNO= CCD.TRANREFNO
							 FROM  CORRCHALLANDETAIL CCD
							INNER JOIN CHALLANDETAIL CD  ON CCD.CHALLANID=CD.CHALLANID AND CCD.BRANCHID=CD.BRANCHID AND CCD.FORMID=CD.FORMID --AND CCD.QUARTER=CD.QUARTER
							LEFT JOIN
							(
									SELECT ISNULL(MAX(CHALLANERETURNID),0) AS LINKDEDCOUNT,CHALLANERETURNID
										 FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER GROUP BY CHALLANERETURNID
							 ) AS LNKCOUNT
							ON CCD.CHALLANERETURNID=LNKCOUNT.CHALLANERETURNID
							WHERE CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.CORRECTIONSTATUS = 2 AND CCD.ISUPDATECHALLAN=1	 							  
							/***DELETING CHALLANS WHICH ARE UPDATED ***/
							DELETE FROM CORRCHALLANDETAIL 
							FROM CORRCHALLANDETAIL AS CCD 
							INNER JOIN 
							(
								SELECT CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK)
									WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND CORRECTIONSTATUS=2 AND ISNULL(ISONLINECHALLAN,0) = 0
							 ) AS DEL
							ON CCD.CHALLANSERIALNO=DEL.CHALLANSERIALNO
							WHERE CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER AND CCD.CORRECTIONSTATUS=1
						/*UPDATING SERIALNO OF CORRECTIONCHALLAN FROM ORIGINAL CHALLAN */
							UPDATE CORRCHALLANDETAIL
						   SET CHALLANSERIALNO = CD.SERIALNO,MATCHEDID=NULL
						  FROM CHALLANDETAIL CD 
									INNER JOIN	
							   CORRCHALLANDETAIL CCD 
							ON CD.CHALLANID = CCD.MATCHEDID AND CD.BRANCHID = CCD.BRANCHID AND CD.FORMID = CCD.FORMID AND CD.QUARTER = CCD.QUARTER
						 WHERE CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.QUARTER = @QUARTER 
							   AND CCD.MATCHEDID IS NOT NULL 
							/*UPDATE ALL CHALLAN'S CORRECTIONSTATUS TO 1.(USED FOR THOSE RECORDS WHERE CORRECTIONSTATUS IS 2)*/
							UPDATE CORRCHALLANDETAIL
							   SET CORRECTIONSTATUS = 1
							 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 2 AND ISNULL(ISONLINECHALLAN,0) = 0
							/*INSERTING NEW RECORDS TO CHALLAN TABLE WHERE CORRECTIONSTATUS IS 5*/
							INSERT INTO CHALLANDETAIL (SERIALNO,BRANCHID,QUARTER,FORMID,ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,
														MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,
														LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,
														SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
														ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TRANREFNO,MINORHEAD)							
							SELECT CCD.CHALLANSERIALNO AS SERIALNO,BRANCHID,QUARTER,FORMID,CCD.CHALLANERETURNID,ISNULL(LNKCOUNT.LINKDEDCOUNT,0),ISNILCHALLAN,ISUPDATECHALLAN,
									   MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,
									   LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,
									   SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
									   ISNULL(ISCOMPANY,0),CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TRANREFNO,MINORHEAD
								  FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)
								  LEFT JOIN
								  (
									 SELECT ISNULL(MAX(CHALLANERETURNID),0) AS LINKDEDCOUNT,CHALLANERETURNID
										  FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  GROUP BY CHALLANERETURNID
								  ) AS LNKCOUNT
								 ON CCD.CHALLANERETURNID=LNKCOUNT.CHALLANERETURNID
								 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND (CORRECTIONSTATUS = 5 OR (CORRECTIONSTATUS = 2 AND ISONLINECHALLAN = 1 AND ISNULL(CHALLANID,-1) = -1)) AND CHALLANTOTAL>0
							DELETE FROM CORRCHALLANDETAIL 
							FROM CORRCHALLANDETAIL AS CCD 
							INNER JOIN 
							(
								SELECT CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK)
									WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND CORRECTIONSTATUS=2 AND ISNULL(ISONLINECHALLAN,0) = 1
							 ) AS DEL
							ON CCD.CHALLANSERIALNO=DEL.CHALLANSERIALNO
							WHERE CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER AND CCD.CORRECTIONSTATUS=1
							/**UPDATING CHALLANID AFTER INSERTING INTO ORIGINAL CHALLAN TABLE**/
							UPDATE CORRCHALLANDETAIL SET CHALLANID=CD.CHALLANID,CORRECTIONSTATUS=1 
							FROM CHALLANDETAIL CD 
							INNER JOIN CORRCHALLANDETAIL CCD
							ON CCD.CHALLANSERIALNO=CD.SERIALNO AND CCD.BRANCHID=CD.BRANCHID AND CCD.FORMID=CD.FORMID AND CCD.QUARTER=CD.QUARTER 
							WHERE CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER AND (CCD.CORRECTIONSTATUS = 5 OR (CCD.CORRECTIONSTATUS = 2 AND ISONLINECHALLAN = 1 AND ISNULL(CCD.CHALLANID,-1) = -1))
							/**CHALLANS WHICH ARE HAVING CHALLANTOATAL IS 0 AND CHALLANID IS NULL**/
							UPDATE CORRCHALLANDETAIL SET CORRECTIONSTATUS=1 
							WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND CORRECTIONSTATUS=5 AND CHALLANTOTAL=0
						END
						BEGIN /*-------------DEDUCTION UPDATE-------------*/	
						/*SHIFTING MANNUALLY MATCHEDID TO DEDUCTIONID*/			
						UPDATE CORRDEDUCTIONDETAIL 
						SET DEDUCTIONID = MATCHEDID--, MATCHEDID = NULL
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND MATCHEDID IS NOT NULL 				
							AND (DEDUCTIONID IS NULL OR DEDUCTIONID=0 OR DEDUCTIONID=-1 )
						IF(@FORMID=1)
						BEGIN
								/*UPDATING DEDUCTIONS FROM CORRDEDUCTIONDETAILS TO DEDUTIONDETAILS WHERE CORRECTIONSTATUS = 2*/				
								UPDATE DEDUCTIONDETAIL 
								SET
									--DEDUCTEEID=CE.DEDUCTEEID,
									ERETURNID=CDD.DEDUCTIONERETURNID,
									MODE=CDD.MODE,					
									INCOMETAX=CDD.INCOMETAX,
									SURCHARGE=CDD.SURCHARGE,
									EDUCATIONCESS=CDD.EDUCATIONCESS,
									TOTALDEDUCTED=CDD.TOTALDEDUCTED,
									PAYMENTMADE=CDD.PAYMENTMADE,
									PAYMENTDATE=CDD.PAYMENTDATE,
									DEDUCTEDDATE=CDD.DEDUCTEDDATE,
									SECTIONID=CDD.SECTIONID,
									INCOMETAXRATE=CDD.INCOMETAXRATE,
									SURCHARGERATE=CDD.SURCHARGERATE,
									EDUCATIONCESSRATE=CDD.EDUCATIONCESSRATE,
									TAXRATE=CDD.TAXRATE,
									NONDEDREASON=CDD.NONDEDREASON,
									ISBOOKENTRY=CDD.ISBOOKENTRY,
									ISGROSSINGUP=CDD.ISGROSSINGUP,
									UTN=CDD.UTN,
									ISPANVALIDBYITD=CDD.ISPANVALIDBYITD,
									ISTAXINFOEDITABLE=CDD.ISTAXINFOEDITABLE,
									CERTNO = CDD.CERTNO
									FROM CORRDEDUCTIONDETAIL CDD 
											INNER JOIN
										  DEDUCTIONDETAIL DD
									  ON  CDD.DEDUCTIONID=DD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID AND CDD.FORMID=DD.FORMID AND 
										  CDD.QUARTER=DD.QUARTER 
											 INNER JOIN 
											CORREMPLOYEE CE
									  ON  CDD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO AND CDD.BRANCHID=CE.BRANCHID AND 
										  CDD.FORMID=CE.FORMID AND CDD.QUARTER=CE.QUARTER 
									WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=2		
						END
						ELSE
						BEGIN
								UPDATE DEDUCTIONDETAIL 
								SET
									/*DEDUCTEEID=CNE.DEDUCTEEID,*/
									ERETURNID=CDD.DEDUCTIONERETURNID,
									MODE=CDD.MODE,					
									INCOMETAX=CDD.INCOMETAX,
									SURCHARGE=CDD.SURCHARGE,
									EDUCATIONCESS=CDD.EDUCATIONCESS,
									TOTALDEDUCTED=CDD.TOTALDEDUCTED,
									PAYMENTMADE=CDD.PAYMENTMADE,
									PAYMENTDATE=CDD.PAYMENTDATE,
									DEDUCTEDDATE=CDD.DEDUCTEDDATE,
									SECTIONID=CDD.SECTIONID,
									INCOMETAXRATE=CDD.INCOMETAXRATE,
									SURCHARGERATE=CDD.SURCHARGERATE,
									EDUCATIONCESSRATE=CDD.EDUCATIONCESSRATE,
									TAXRATE=CDD.TAXRATE,
									NONDEDREASON=CDD.NONDEDREASON,
									ISBOOKENTRY=CDD.ISBOOKENTRY,
									ISGROSSINGUP=CDD.ISGROSSINGUP,
									UTN=CDD.UTN,
									ISPANVALIDBYITD=CDD.ISPANVALIDBYITD,
									ISTAXINFOEDITABLE=CDD.ISTAXINFOEDITABLE,
									CERTNO = CDD.CERTNO,
									TDSRATEASPER = CDD.TDSRATEASPER,
									ACKNO = CDD.ACKNO,
									REMITTANCEID = CDD.REMITTANCEID,
									COUNTRYID = CDD.COUNTRYID,
									EMAILDED = CDD.EMAILDED,
									CONTACTNODED = CDD.CONTACTNODED,
									ADDRESSDED = CDD.ADDRESSDED,
									IDENTNUMDED = CDD.IDENTNUMDED
									FROM CORRDEDUCTIONDETAIL CDD 
											INNER JOIN
										  DEDUCTIONDETAIL DD
									  ON  CDD.DEDUCTIONID=DD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID AND CDD.FORMID=DD.FORMID AND 
										  CDD.QUARTER=DD.QUARTER 
											 INNER JOIN 
											CORRNONEMPLOYEE CNE
									  ON  CDD.DEDUCTEESERIALNO=CNE.DEDUCTEESERIALNO AND CDD.BRANCHID=CNE.BRANCHID AND 
										  CDD.FORMID=CNE.FORMID AND CDD.QUARTER=CNE.QUARTER 
									WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=2
						END
						/*UPDATING ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED FOR DEDUCTIONS WHICH DOESNOT HAVE PARTPAYMENT DETAILS */
						UPDATE DEDUCTIONDETAIL 
								SET												
									ORGINCOMETAX=CDD.INCOMETAX,
									ORGSURCHARGE=CDD.SURCHARGE,
									ORGEDUCATIONCESS=CDD.EDUCATIONCESS,
									ORGTOTALDEDUCTED=CDD.TOTALDEDUCTED,
									ORGPAYMENTMADE=CDD.PAYMENTMADE,
									CERTNO = CDD.CERTNO
									FROM CORRDEDUCTIONDETAIL CDD 
											INNER JOIN
										  DEDUCTIONDETAIL DD
									  ON  CDD.DEDUCTIONID=DD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID AND CDD.FORMID=DD.FORMID AND 
										  CDD.QUARTER=DD.QUARTER 
											--LEFT JOIN
										 -- PARTPAYMENTDETAILS PDD
									  --ON DD.PARTPAYMENTID=PDD.PARTPAYMENTID AND DD.BRANCHID=PDD.BRANCHID AND DD.FORMID=PDD.FORMID AND 
										 --DD.QUARTER=PDD.QUARTER									  
									WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID --PDD.PARTPAYMENTID IS NULL AND 
										  AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=2
						/*DELETE ORIGINAL DEDUCTIONS WHICH ARE HAVING RECORDS FOR CORRECTIONSTATUS 2*/				
						DELETE FROM CORRDEDUCTIONDETAIL FROM CORRDEDUCTIONDETAIL AS CDD
																INNER JOIN 
															 (SELECT DEDUCTIONSERIALNO,BRANCHID,FORMID,QUARTER 
																FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
															   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND 
																	 QUARTER=@QUARTER AND CORRECTIONSTATUS=2) AS DEL
														  ON CDD.DEDUCTIONSERIALNO=DEL.DEDUCTIONSERIALNO AND CDD.BRANCHID=DEL.BRANCHID AND 
															 CDD.FORMID=DEL.FORMID AND CDD.QUARTER=DEL.QUARTER
														WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER
															  AND CDD.CORRECTIONSTATUS=1
						/*UPDATING SERIALNO OF CORRECTIONDEDUCTION FROM ORIGINAL DEDUCTION */
						UPDATE CORRDEDUCTIONDETAIL
						   SET DEDUCTIONSERIALNO = DD.SERIALNO,MATCHEDID=NULL
						  FROM DEDUCTIONDETAIL DD 
									INNER JOIN	
							   CORRDEDUCTIONDETAIL CDD 
							ON DD.DEDUCTIONID = CDD.DEDUCTIONID AND DD.BRANCHID = CDD.BRANCHID AND DD.FORMID = CDD.FORMID AND DD.QUARTER = CDD.QUARTER
						 WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER AND CDD.CORRECTIONSTATUS=2 
							   AND CDD.MATCHEDID IS NOT NULL --AND (CDD.DEDUCTIONID IS NULL OR CDD.DEDUCTIONID=0)
						/*DURING UPDATING OF PARTPAYMENT DEDUCTION UPDATING PARTPAYMENTDETAILS TABLE FOR REMAINING AMOUNT */
						EXEC USP_TDS_UpdatePartPaymentForFinalUpdate @BRANCHID,@FORMID,@QUARTER
						/*UPDATE CORRECTIONSTATUS FROM 2 TO 1*/	
						UPDATE CORRDEDUCTIONDETAIL 
						   SET CORRECTIONSTATUS=1 
						  FROM CORRDEDUCTIONDETAIL CDD
								INNER JOIN
							   DEDUCTIONDETAIL DD
							ON CDD.DEDUCTIONID=DD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID AND CDD.FORMID=DD.FORMID AND 
								CDD.QUARTER=DD.QUARTER
						WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CORRECTIONSTATUS=2	
						IF(@FORMID=1)
						BEGIN
								/*INSERT NEWLY ADDED DEDUCTIONS TO DEDUCTIONDETAILS TABLE(WHERE CORRECTIONSTATUS = 5)*/
								INSERT INTO DEDUCTIONDETAIL(SERIALNO,BRANCHID,FORMID,QUARTER,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
															TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,
															EDUCATIONCESSRATE,TAXRATE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,ISTAXINFOEDITABLE,PARTPAYMENTID,
															ORGPAYMENTMADE,ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,CERTNO,ENTRYTYPE,RTBRANCHID)
								SELECT DEDUCTIONSERIALNO AS SERIALNO,DD.BRANCHID,DD.FORMID,DD.QUARTER,CE.DEDUCTEEID,DEDUCTIONERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
															TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,
															EDUCATIONCESSRATE,TAXRATE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,ISNULL(UTN,'') as UTN,
															ISNULL(ISPANVALIDBYITD,0) AS ISPANVALIDBYITD,ISTAXINFOEDITABLE,'',
															PAYMENTMADE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,CERTNO, 1 AS ENTRYTYPE, DD.BRANCHID AS RTBRANCHID
								  FROM CORRDEDUCTIONDETAIL DD WITH(NOLOCK)
										  INNER JOIN 
										CORREMPLOYEE CE WITH(NOLOCK)
									ON DD.DEDUCTEESERIALNO = CE.DEDUCTEESERIALNO AND 
									   DD.BRANCHID = CE.BRANCHID AND 
									   DD.FORMID = CE.FORMID AND 
									  DD.QUARTER = CE.QUARTER
									  INNER JOIN 
									  (
									  SELECT DEDUCTEESERIALNO, DEDUCTEEID, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORREMPLOYEE WITH(NOLOCK)
									  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
									  GROUP BY DEDUCTEESERIALNO,DEDUCTEEID
									  )A ON CE.DEDUCTEESERIALNO = A.DEDUCTEESERIALNO AND CE.DEDUCTEEID = A.DEDUCTEEID AND CE.CORRECTIONSTATUS = A.CORRECTIONSTATUS				
								 WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.CORRECTIONSTATUS = 5 AND ISNULL(DD.DEDUCTIONID,'') = ''
								 --GROUP BY DEDUCTIONSERIALNO,DD.BRANCHID,DD.FORMID,DD.QUARTER,CE.DEDUCTEEID,DEDUCTIONERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									--						TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,
									--						EDUCATIONCESSRATE,TAXRATE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP, UTN,
									--						ISPANVALIDBYITD,ISTAXINFOEDITABLE,PAYMENTMADE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED
						END
						ELSE
						BEGIN
								INSERT INTO DEDUCTIONDETAIL(SERIALNO,BRANCHID,FORMID,QUARTER,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
															TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,
															EDUCATIONCESSRATE,TAXRATE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,ISTAXINFOEDITABLE,PARTPAYMENTID,
															ORGPAYMENTMADE,ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,CERTNO,TDSRATEASPER,ACKNO,REMITTANCEID,COUNTRYID,
															EMAILDED,CONTACTNODED,ADDRESSDED,IDENTNUMDED,ENTRYTYPE, RTBRANCHID)
								SELECT DEDUCTIONSERIALNO AS SERIALNO,DD.BRANCHID,DD.FORMID,DD.QUARTER,CNE.DEDUCTEEID,DEDUCTIONERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
															TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,
															EDUCATIONCESSRATE,TAXRATE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,ISNULL(UTN,'') as UTN,
															ISNULL(ISPANVALIDBYITD,0) AS ISPANVALIDBYITD,ISTAXINFOEDITABLE,'',
															PAYMENTMADE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,CERTNO,TDSRATEASPER,ACKNO,REMITTANCEID,
															COUNTRYID,EMAILDED,CONTACTNODED,ADDRESSDED,IDENTNUMDED, 1 AS ENTRYTYPE, DD.BRANCHID AS RTBRANCHID								
								  FROM CORRDEDUCTIONDETAIL DD WITH(NOLOCK)
										  INNER JOIN 
										CORRNONEMPLOYEE CNE WITH(NOLOCK)
									ON DD.DEDUCTEESERIALNO = CNE.DEDUCTEESERIALNO AND 
									 DD.BRANCHID = CNE.BRANCHID AND 
									   DD.FORMID = CNE.FORMID AND 
									   DD.QUARTER = CNE.QUARTER				
								 WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.CORRECTIONSTATUS = 5 AND ISNULL(DD.DEDUCTIONID,'') = ''
						END	
						/*SETTING PARTPAYMENTID FOR NEWLY ADDED DEDUCTIONS*/
						DECLARE @MAXPARTPAYMENTID INT;
						SET @MAXPARTPAYMENTID=0;
						IF EXISTS(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER)
						BEGIN
							SELECT @MAXPARTPAYMENTID = ISNULL(MAX(PARTPAYMENTID),0) FROM DEDUCTIONDETAIL WITH(NOLOCK)
							 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
						END
						UPDATE DEDUCTIONDETAIL SET PARTPAYMENTID = @MAXPARTPAYMENTID , @MAXPARTPAYMENTID = @MAXPARTPAYMENTID +1
						WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND (PARTPAYMENTID = -1 OR PARTPAYMENTID IS NULL OR PARTPAYMENTID = 0)
						/*UPDATE RECORDS ADDED FROM EXCLUDED OPTION*/
						IF(@FORMID=1)
						BEGIN
						UPDATE DEDUCTIONDETAIL 
								SET
									--DEDUCTEEID=CE.DEDUCTEEID,
									ERETURNID=DD.DEDUCTIONERETURNID,
									MODE=DD.MODE,					
									INCOMETAX=DD.INCOMETAX,
									SURCHARGE=DD.SURCHARGE,
									EDUCATIONCESS=DD.EDUCATIONCESS,
									TOTALDEDUCTED=DD.TOTALDEDUCTED,
									PAYMENTMADE=DD.PAYMENTMADE,
									PAYMENTDATE=DD.PAYMENTDATE,
									DEDUCTEDDATE=DD.DEDUCTEDDATE,
									SECTIONID=DD.SECTIONID,
									INCOMETAXRATE=DD.INCOMETAXRATE,
									SURCHARGERATE=DD.SURCHARGERATE,
									EDUCATIONCESSRATE=DD.EDUCATIONCESSRATE,
									TAXRATE=DD.TAXRATE,
									NONDEDREASON=DD.NONDEDREASON,
									ISBOOKENTRY=DD.ISBOOKENTRY,
									ISGROSSINGUP=DD.ISGROSSINGUP,
									UTN=DD.UTN,
									ISPANVALIDBYITD=DD.ISPANVALIDBYITD,
									ISTAXINFOEDITABLE=DD.ISTAXINFOEDITABLE,
									CERTNO = DD.CERTNO
								FROM DEDUCTIONDETAIL DDD 
									INNER JOIN CORRDEDUCTIONDETAIL DD ON DDD.DEDUCTIONID = DD.DEDUCTIONID
									INNER JOIN CORREMPLOYEE CE ON DD.DEDUCTEESERIALNO = CE.DEDUCTEESERIALNO AND DD.BRANCHID = CE.BRANCHID 
									AND DD.FORMID = CE.FORMID AND DD.QUARTER = CE.QUARTER
									  INNER JOIN 
									  (
									  SELECT DEDUCTEESERIALNO, DEDUCTEEID, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORREMPLOYEE WITH(NOLOCK)
									  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
									  GROUP BY DEDUCTEESERIALNO,DEDUCTEEID
									  )A ON CE.DEDUCTEESERIALNO = A.DEDUCTEESERIALNO AND CE.DEDUCTEEID = A.DEDUCTEEID AND CE.CORRECTIONSTATUS = A.CORRECTIONSTATUS				
								 WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.CORRECTIONSTATUS = 5 AND ISNULL(DD.DEDUCTIONID,'') <> ''
						END
						ELSE
						BEGIN
						UPDATE DEDUCTIONDETAIL 
								SET
									/*DEDUCTEEID=CNE.DEDUCTEEID,*/
									ERETURNID=DD.DEDUCTIONERETURNID,
									MODE=DD.MODE,					
									INCOMETAX=DD.INCOMETAX,
									SURCHARGE=DD.SURCHARGE,
									EDUCATIONCESS=DD.EDUCATIONCESS,
									TOTALDEDUCTED=DD.TOTALDEDUCTED,
									PAYMENTMADE=DD.PAYMENTMADE,
									PAYMENTDATE=DD.PAYMENTDATE,
									DEDUCTEDDATE=DD.DEDUCTEDDATE,
									SECTIONID=DD.SECTIONID,
									INCOMETAXRATE=DD.INCOMETAXRATE,
									SURCHARGERATE=DD.SURCHARGERATE,
									EDUCATIONCESSRATE=DD.EDUCATIONCESSRATE,
									TAXRATE=DD.TAXRATE,
									NONDEDREASON=DD.NONDEDREASON,
									ISBOOKENTRY=DD.ISBOOKENTRY,
									ISGROSSINGUP=DD.ISGROSSINGUP,
									UTN=DD.UTN,
									ISPANVALIDBYITD=DD.ISPANVALIDBYITD,
									ISTAXINFOEDITABLE=DD.ISTAXINFOEDITABLE,
									CERTNO = DD.CERTNO,
									TDSRATEASPER = DD.TDSRATEASPER,
									ACKNO = DD.ACKNO,
									REMITTANCEID = DD.REMITTANCEID,
									COUNTRYID = DD.COUNTRYID,
									EMAILDED = DD.EMAILDED,
									CONTACTNODED = DD.CONTACTNODED,
									ADDRESSDED = DD.ADDRESSDED,
									IDENTNUMDED = DD.IDENTNUMDED									
								FROM DEDUCTIONDETAIL DDD 
									INNER JOIN CORRDEDUCTIONDETAIL DD ON DDD.DEDUCTIONID = DD.DEDUCTIONID
										  INNER JOIN 
										CORRNONEMPLOYEE CNE 
									ON DD.DEDUCTEESERIALNO = CNE.DEDUCTEESERIALNO AND 
									   DD.BRANCHID = CNE.BRANCHID AND 
									   DD.FORMID = CNE.FORMID AND 
									   DD.QUARTER = CNE.QUARTER				
								 WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.CORRECTIONSTATUS = 5 AND ISNULL(DD.DEDUCTIONID,'') <> ''
						END
						/*UPDATE DEDUCTIONID IN CORRDUCTIONDETAILS WHERE CORRECTIONSTATUS = 5*/				
						UPDATE CORRDEDUCTIONDETAIL 
						   SET DEDUCTIONID=DD.DEDUCTIONID					   
						  FROM DEDUCTIONDETAIL DD
								INNER JOIN 
							   CORRDEDUCTIONDETAIL CDD
							ON CDD.DEDUCTIONSERIALNO=DD.SERIALNO AND CDD.BRANCHID=DD.BRANCHID AND CDD.FORMID=DD.FORMID AND 
							   CDD.QUARTER=DD.QUARTER 
						 WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=5	
						 /*NEW DEDUCTION WHICH ARE ADDED AND LINKED TO ANY CHALLAN*/
						INSERT INTO DEDCHALINK(BRANCHID,CHALLANID,DEDUCTIONID)
									SELECT CDD.BRANCHID,CCD.CHALLANID,CDD.DEDUCTIONID
									  FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)			  
											INNER JOIN 
										   (
												SELECT CHALLANID,CHALLANERETURNID,BRANCHID,FORMID,QUARTER,CHALLANTOTAL,MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRCHALLANDETAIL WITH(NOLOCK)
												WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
												GROUP BY CHALLANID,CHALLANERETURNID,BRANCHID,FORMID,QUARTER,CHALLANTOTAL
											)CCD
										ON CDD.CHALLANERETURNID=CCD.CHALLANERETURNID AND CDD.BRANCHID=CCD.BRANCHID
										   AND CDD.FORMID=CCD.FORMID AND CDD.QUARTER=CCD.QUARTER
									  WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER
											AND CDD.CORRECTIONSTATUS=5 --AND CDD.TOTALDEDUCTED<>0
											AND CCD.CHALLANTOTAL<>0 AND NOT EXISTS (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = CDD.DEDUCTIONID) --AND DEDUCTIONID IS NULL
						/*UPDATING DEDCHALINK INCLUDED FROM EXCLUDED OPTION*/
						UPDATE DEDCHALINK SET CHALLANID = CCD.CHALLANID
									  FROM DEDCHALINK DCL 
									  INNER JOIN CORRDEDUCTIONDETAIL CDD ON DCL.DEDUCTIONID = CDD.DEDUCTIONID			  
											INNER JOIN 
										   (
												SELECT CHALLANID,CHALLANERETURNID,BRANCHID,FORMID,QUARTER,CHALLANTOTAL,MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRCHALLANDETAIL WITH(NOLOCK)
												WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
												GROUP BY CHALLANID,CHALLANERETURNID,BRANCHID,FORMID,QUARTER,CHALLANTOTAL
											)CCD
										ON CDD.CHALLANERETURNID=CCD.CHALLANERETURNID AND CDD.BRANCHID=CCD.BRANCHID
										   AND CDD.FORMID=CCD.FORMID AND CDD.QUARTER=CCD.QUARTER
									  WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER
											AND CDD.CORRECTIONSTATUS=5 AND CDD.DEDUCTIONID IS NOT NULL--AND CDD.TOTALDEDUCTED<>0
											AND CCD.CHALLANTOTAL<>0 AND EXISTS (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = CDD.DEDUCTIONID) AND CDD.DEDUCTIONID IS NOT NULL
						 /*UPDATE CORRECTIONSTATUS IN CORRDUCTIONDETAILS WHERE CORRECTIONSTATUS = 5*/
						UPDATE CORRDEDUCTIONDETAIL 
						   SET CORRECTIONSTATUS = 1
						  FROM DEDUCTIONDETAIL DD
								INNER JOIN 
							   CORRDEDUCTIONDETAIL CDD
							ON CDD.DEDUCTIONSERIALNO=DD.SERIALNO AND CDD.BRANCHID=DD.BRANCHID AND CDD.FORMID=DD.FORMID AND 
							   CDD.QUARTER=DD.QUARTER 
						 WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=5		 							  
						/*DELETING THE DELETED DEDUCTION CORRECTION STATUS 4*/
						/*UPDATE DEDUCTIONID IN CORRDUCTIONDETAILS WHERE CORRECTIONSTATUS = 4*/				
						--UPDATE CORRDEDUCTIONDETAIL 
						--   SET DEDUCTIONID=DD.DEDUCTIONID					   
						--  FROM DEDUCTIONDETAIL DD
						--		INNER JOIN 
						--	   CORRDEDUCTIONDETAIL CDD
						--	ON CDD.DEDUCTIONSERIALNO=DD.SERIALNO AND CDD.BRANCHID=DD.BRANCHID AND CDD.FORMID=DD.FORMID AND 
						--	   CDD.QUARTER=DD.QUARTER 
						-- WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=4
						/*UNLINK(DELETE FROM LINKING TABLE) DEDUCTIONS WHICH ARE MARKED FOR DELETION.*/				
						SELECT DCL.DEDUCTIONID INTO #DEDUCTIONID FROM DEDCHALINK AS DCL WITH(NOLOCK)
											INNER JOIN
											DEDUCTIONDETAIL DD WITH(NOLOCK)
										 ON DCL.DEDUCTIONID=DD.DEDUCTIONID AND DCL.BRANCHID=DD.BRANCHID
											INNER JOIN 							
											CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
										 ON DD.DEDUCTIONID=CDD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID 
											AND DD.FORMID=CDD.FORMID AND DD.QUARTER=CDD.QUARTER							
									  WHERE	DCL.BRANCHID=9375 AND DD.FORMID=2 AND DD.QUARTER=3 
											AND CDD.CORRECTIONSTATUS=4
						IF((SELECT COUNT(DEDUCTIONID) FROM #DEDUCTIONID) <> 0)
						BEGIN
						DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL
											INNER JOIN
											DEDUCTIONDETAIL DD
										 ON DCL.DEDUCTIONID=DD.DEDUCTIONID AND DCL.BRANCHID=DD.BRANCHID
											INNER JOIN 							
											CORRDEDUCTIONDETAIL CDD 
										 ON DD.DEDUCTIONID=CDD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID 
											AND DD.FORMID=CDD.FORMID AND DD.QUARTER=CDD.QUARTER							
									  WHERE	DCL.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER 
											AND CDD.CORRECTIONSTATUS=4
						END
						DROP TABLE	#DEDUCTIONID										
						IF(@FORMID=1)
						BEGIN
						/*DELETE RECORDS FROM FORM16A TABLE*/				
						DELETE FROM FORM16 FROM FORM16 AS F16
														 INNER JOIN	
														 DEDUCTIONDETAIL DD
													 ON F16.DEDUCTIONID=DD.DEDUCTIONID
														 INNER JOIN															
														 CORRDEDUCTIONDETAIL CDD 
													 ON  DD.DEDUCTIONID=CDD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID 
														 AND DD.FORMID=CDD.FORMID AND DD.QUARTER=CDD.QUARTER							
												  WHERE	 DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER 
														 AND CDD.CORRECTIONSTATUS=4
						END
						ELSE
						BEGIN
						/*DELETE RECORDS FROM FORM16A TABLE*/				
						DELETE FROM FORM16A FROM FORM16A AS F16A
														 INNER JOIN	
														 DEDUCTIONDETAIL DD
													 ON F16A.DEDUCTIONID=DD.DEDUCTIONID
														 INNER JOIN															
														 CORRDEDUCTIONDETAIL CDD 
													 ON  DD.DEDUCTIONID=CDD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID 
														 AND DD.FORMID=CDD.FORMID AND DD.QUARTER=CDD.QUARTER							
												  WHERE	 DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER 
														 AND CDD.CORRECTIONSTATUS=4
						END		
						/*GETTING DELETED DEDUCTIONS WHICH ARE NOT HAVING PARTPAYMENT DETAILS
						ALL DEDUCTIONS ARE TAKING INTO @DELETEDDEDUCTIONS TABLE,BY USING THAT TABLE DELETING DEDUCTIONS FROM DEDUCTIONDETAIL AND CORRDEDUCTION TABLES */				
						DECLARE @DELETEDDEDUCTIONS TABLE(DEDUCTIONID INT,BRANCHID INT,FORMID INT,QUARTER INT)
						INSERT INTO @DELETEDDEDUCTIONS
						SELECT DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.QUARTER 
						FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
								INNER JOIN 
							 DEDUCTIONDETAIL DD WITH(NOLOCK)
						   ON CDD.DEDUCTIONID=DD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID AND CDD.FORMID=DD.FORMID AND CDD.QUARTER=DD.QUARTER
								LEFT JOIN 
							 PARTPAYMENTDETAILS PPD WITH(NOLOCK)
						   ON DD.PARTPAYMENTID=PPD.PARTPAYMENTID AND DD.BRANCHID=PPD.BRANCHID AND DD.FORMID=PPD.FORMID AND DD.QUARTER=PPD.QUARTER
						WHERE PPD.PARTPAYMENTID IS NULL AND CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND
							 CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=4
						/*
						UPDATING DEDUCTIONID FOR THOSE RECORDS WHERE CORRECTIONSTATUS IS 1
						AND RECORDS 
						*/
						IF EXISTS (SELECT * FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 4)
						BEGIN
							UPDATE CDD1
							SET CDD1.DEDUCTIONID = CDD.DEDUCTIONID
							FROM CORRDEDUCTIONDETAIL CDD
							INNER JOIN  
							CORRDEDUCTIONDETAIL CDD1 ON 
							CDD.BRANCHID = CDD1.BRANCHID AND CDD.FORMID = CDD1.FORMID AND CDD.QUARTER = CDD1.QUARTER 
							AND CDD1.CORRECTIONSTATUS = 1 AND CDD.DEDUCTIONSERIALNO = CDD1.DEDUCTIONSERIALNO
							WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER AND CDD.CORRECTIONSTATUS = 4
						END
						/*DELETE DEDUCTIONS WHICH ARE NOT HAVING PARTPAYMENT FROM CORREDEDUCTION WHERE CORRECTIONSTATUS = 1 OR 4*/
						DELETE FROM CORRDEDUCTIONDETAIL FROM CORRDEDUCTIONDETAIL AS CDD
																INNER JOIN
															 @DELETEDDEDUCTIONS DDD
														  ON CDD.DEDUCTIONID=DDD.DEDUCTIONID AND CDD.BRANCHID=DDD.BRANCHID 
															 AND CDD.FORMID=DDD.FORMID AND CDD.QUARTER=DDD.QUARTER
													   WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER
						/*DELETE RECORDS FROM DEDUCTIONDETAILS TABLE WHICH DOESNOT HAVE PARTPAYMENT DETAILS*/	
						DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL AS DD
															INNER JOIN
														 @DELETEDDEDUCTIONS DDD
													  ON DD.DEDUCTIONID=DDD.DEDUCTIONID AND DD.BRANCHID=DDD.BRANCHID 
															 AND DD.FORMID=DDD.FORMID AND DD.QUARTER=DDD.QUARTER
												   WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER												 
						/*DURING DELETING OF PARTPAYMENT DEDUCTION UPDATING PARTPAYMENTDETAILS TABLE FOR REMAINING AMOUNT */
						EXEC USP_TDS_DeletePartPaymentForFinalUpdate @BRANCHID,@FORMID,@QUARTER
						/*Below Queries are moved to above stored procedure 'USP_TDS_DeletePartPaymentForFinalUpdate' due to partpayment.
						In stored procedure deductions from Deduction and CorrDeduction tables are deleting one by one through loop
						/*DELETE RECORDS FROM DEDUCTIONDETAILS TABLE*/				
						DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL AS DD
														 INNER JOIN																
														 CORRDEDUCTIONDETAIL CDD 
													 ON  DD.DEDUCTIONID=CDD.DEDUCTIONID AND CDD.BRANCHID=DD.BRANCHID 
														 AND DD.FORMID=CDD.FORMID AND DD.QUARTER=CDD.QUARTER							
												  WHERE	 DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER 
														 AND CDD.CORRECTIONSTATUS=4
						/*DELETE RECORDS FROM CORREDEDUCTION WHERE CORRECTIONSTATUS = 1 OR 4*/
						DELETE FROM CORRDEDUCTIONDETAIL FROM CORRDEDUCTIONDETAIL AS CDD
																INNER JOIN
															 (SELECT DEDUCTIONID FROM CORRDEDUCTIONDETAIL 
																WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND
																	  QUARTER=@QUARTER AND CORRECTIONSTATUS=4) AS DEL
														  ON CDD.DEDUCTIONID=DEL.DEDUCTIONID
													   WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND
															 CDD.QUARTER=@QUARTER 
						*/
						IF(@FORMID=1 AND @QUARTER=4)
						BEGIN
						/*DELETING THE DELETED SALARY DETAILS*/
						/**/
						UPDATE CORRSALARYDETAIL SET RECORDSTATUS=0
												FROM CORRSALARYDETAIL CSD
														INNER JOIN
														(SELECT DISTINCT DEDUCTEESERIALNO,
																					 BRANCHID FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND
																														   CORRECTIONSTATUS=4 AND
																														   RECORDSTATUS=1) DELSAL
													ON CSD.DEDUCTEESERIALNO=DELSAL.DEDUCTEESERIALNO AND CSD.BRANCHID=DELSAL.BRANCHID 
												 WHERE CSD.BRANCHID=@BRANCHID AND CORRECTIONSTATUS=1
						DELETE FROM CORRSALARYDETAIL FROM CORRSALARYDETAIL CSD
															INNER JOIN
															(SELECT DISTINCT DEDUCTEESERIALNO,
																					 BRANCHID FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND
																														   CORRECTIONSTATUS=4 AND
																														   RECORDSTATUS=1) DELSAL
														ON CSD.DEDUCTEESERIALNO=DELSAL.DEDUCTEESERIALNO AND CSD.BRANCHID=DELSAL.BRANCHID 
													 WHERE CSD.BRANCHID=@BRANCHID AND CORRECTIONSTATUS=4 AND RECORDSTATUS=1
						/*DELETING UPDATED SALARY DETAILS*/	
						DELETE FROM CORRSALARYDETAIL FROM CORRSALARYDETAIL CSD
															INNER JOIN
															(SELECT DISTINCT DEDUCTEESERIALNO,
																					 BRANCHID FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND
																														  RECORDSTATUS=0 AND
																														  CORRECTIONSTATUS=4) DELSAL
														 ON CSD.DEDUCTEESERIALNO=CSD.DEDUCTEESERIALNO AND CSD.BRANCHID=DELSAL.BRANCHID
													  WHERE CSD.BRANCHID=@BRANCHID AND RECORDSTATUS=0 AND CORRECTIONSTATUS=4
						DELETE FROM CORRSALARYDETAIL FROM CORRSALARYDETAIL CSD
															INNER JOIN
															(SELECT DISTINCT DEDUCTEESERIALNO,
																					 BRANCHID FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND
																														  RECORDSTATUS=1 AND 																												  
																														  CORRECTIONSTATUS=2) DELSAL
														 ON CSD.DEDUCTEESERIALNO=CSD.DEDUCTEESERIALNO AND CSD.BRANCHID=DELSAL.BRANCHID
													  WHERE CSD.BRANCHID=@BRANCHID AND CORRECTIONSTATUS=1 AND RECORDSTATUS=1
						/*RESETTING CORRECTIONSTATUS TO 1 FOR UPDATED AND ADDED SALARY DETAILS*/
						UPDATE CORRSALARYDETAIL SET CORRECTIONSTATUS=1 
											  WHERE BRANCHID=@BRANCHID AND 
													(CORRECTIONSTATUS=2 OR CORRECTIONSTATUS=5)
													 AND RECORDSTATUS=1
						END						      
					END
						IF EXISTS(SELECT DEDUCTIONSERIALNO FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID and FORMID=@FORMID and QUARTER=@QUARTER AND CORRECTIONSTATUS=7 AND UPDATEINDICATOR = 1)
						    BEGIN		
								IF(@FORMID = 1)
								  BEGIN				
									 UPDATE DEDUCTIONDETAIL 
										SET
										DEDUCTEEID=CE.DEDUCTEEID,
										ERETURNID=CDD.DEDUCTIONERETURNID,
										MODE=CDD.MODE,					
										INCOMETAX=CDD.INCOMETAX,
										ORGINCOMETAX = CDD.INCOMETAX,
										SURCHARGE=CDD.SURCHARGE,
										ORGSURCHARGE = CDD.SURCHARGE,
										EDUCATIONCESS=CDD.EDUCATIONCESS,
										ORGEDUCATIONCESS = CDD.EDUCATIONCESS,
										TOTALDEDUCTED=CDD.TOTALDEDUCTED,
										ORGTOTALDEDUCTED = CDD.TOTALDEDUCTED,
										PAYMENTMADE=CDD.PAYMENTMADE,
										ORGPAYMENTMADE = CDD.PAYMENTMADE,
										PAYMENTDATE=CDD.PAYMENTDATE,
										DEDUCTEDDATE=CDD.DEDUCTEDDATE,
										SECTIONID=CDD.SECTIONID,
										INCOMETAXRATE=CDD.INCOMETAXRATE,
										SURCHARGERATE=CDD.SURCHARGERATE,
										EDUCATIONCESSRATE=CDD.EDUCATIONCESSRATE,
										TAXRATE=CDD.TAXRATE,
										NONDEDREASON=CDD.NONDEDREASON,
										ISBOOKENTRY=CDD.ISBOOKENTRY,
										ISGROSSINGUP=CDD.ISGROSSINGUP,
										CERTNO= CDD.CERTNO,
										UTN=CDD.UTN,
										ISPANVALIDBYITD=CDD.ISPANVALIDBYITD,
										ISTAXINFOEDITABLE=CDD.ISTAXINFOEDITABLE
									FROM CORRDEDUCTIONDETAIL CDD 
										INNER JOIN DEDUCTIONDETAIL DD
										  ON CDD.DEDUCTIONID=DD.DEDUCTIONID 
										INNER JOIN CORREMPLOYEE CE
										  ON CDD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO AND CDD.BRANCHID=CE.BRANCHID AND 
											  CDD.FORMID=CE.FORMID AND CDD.QUARTER=CE.QUARTER 
										WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=7 AND CDD.UPDATEINDICATOR = 1	
									END
								 ELSE
								  BEGIN
									 UPDATE DEDUCTIONDETAIL 
										SET
										DEDUCTEEID=CE.DEDUCTEEID,
										ERETURNID=CDD.DEDUCTIONERETURNID,
										MODE=CDD.MODE,					
										INCOMETAX=CDD.INCOMETAX,
										ORGINCOMETAX = CDD.INCOMETAX,
										SURCHARGE=CDD.SURCHARGE,
										ORGSURCHARGE = CDD.SURCHARGE,
										EDUCATIONCESS=CDD.EDUCATIONCESS,
										ORGEDUCATIONCESS = CDD.EDUCATIONCESS,
										TOTALDEDUCTED=CDD.TOTALDEDUCTED,
										ORGTOTALDEDUCTED = CDD.TOTALDEDUCTED,
										PAYMENTMADE=CDD.PAYMENTMADE,
										ORGPAYMENTMADE = CDD.PAYMENTMADE,
										PAYMENTDATE=CDD.PAYMENTDATE,
										DEDUCTEDDATE=CDD.DEDUCTEDDATE,
										SECTIONID=CDD.SECTIONID,
										INCOMETAXRATE=CDD.INCOMETAXRATE,
										SURCHARGERATE=CDD.SURCHARGERATE,
										EDUCATIONCESSRATE=CDD.EDUCATIONCESSRATE,
										TAXRATE=CDD.TAXRATE,
										NONDEDREASON=CDD.NONDEDREASON,
										ISBOOKENTRY=CDD.ISBOOKENTRY,
										CERTNO= CDD.CERTNO,
										ISGROSSINGUP=CDD.ISGROSSINGUP,
										UTN=CDD.UTN,
										ISPANVALIDBYITD=CDD.ISPANVALIDBYITD,
										ISTAXINFOEDITABLE=CDD.ISTAXINFOEDITABLE,
										TDSRATEASPER = CDD.TDSRATEASPER,
										ACKNO = CDD.ACKNO,
										REMITTANCEID = CDD.REMITTANCEID,
										COUNTRYID = CDD.COUNTRYID,
										EMAILDED = CDD.EMAILDED,
										CONTACTNODED = CDD.CONTACTNODED,
										ADDRESSDED = CDD.ADDRESSDED,
										IDENTNUMDED = CDD.IDENTNUMDED
									FROM CORRDEDUCTIONDETAIL CDD 
										INNER JOIN DEDUCTIONDETAIL DD
										  ON CDD.DEDUCTIONID=DD.DEDUCTIONID 
										INNER JOIN CORRNONEMPLOYEE CE
										  ON CDD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO AND CDD.BRANCHID=CE.BRANCHID AND 
											  CDD.FORMID=CE.FORMID AND CDD.QUARTER=CE.QUARTER 
										WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=7 AND CDD.UPDATEINDICATOR = 1	
								  END 
								  SELECT DEDUCTIONID INTO #DEDS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID and FORMID=@FORMID and QUARTER=@QUARTER AND CORRECTIONSTATUS=7 AND UPDATEINDICATOR = 1
								  DELETE FROM DEDCHALINK 
								  FROM DEDCHALINK DL
								  INNER JOIN #DEDS D ON DL.DEDUCTIONID = D.DEDUCTIONID
								  INSERT INTO DEDCHALINK (DEDUCTIONID, CHALLANID, BRANCHID)
								  SELECT DEDUCTIONID, CHALLANID, CDD.BRANCHID FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
								  INNER JOIN CORRCHALLANDETAIL CCD WITH(NOLOCK)ON CDD.BRANCHID = CCD.BRANCHID AND CDD.FORMID = CCD.FORMID AND CDD.QUARTER = CCD.QUARTER AND CDD.CHALLANERETURNID = CCD.CHALLANERETURNID
								  WHERE CDD.BRANCHID=@BRANCHID and CDD.FORMID=@FORMID and CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=7 AND CDD.UPDATEINDICATOR = 1 AND (ISNULL(CDD.TOTALDEDUCTED,0) > 0 AND ISNULL(CCD.CHALLANTOTAL,0) > 0)								  
						    END
						IF EXISTS(SELECT CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND CORRECTIONSTATUS=7 AND UPDATEINDICATOR = 1)
						    BEGIN						
								UPDATE CHALLANDETAIL
									  SET 
								   ERETURNID = CCD.CHALLANERETURNID,
								   LINKDEDCOUNT= ISNULL(LNKCOUNT.LINKDEDCOUNT,0),
								   ISNILCHALLAN= CCD.ISNILCHALLAN,
								   ISUPDATECHALLAN= CCD.ISUPDATECHALLAN,
								   MODEOFPAYMENT= CCD.MODEOFPAYMENT,
								   BANKCHALLANNO= CCD.BANKCHALLANNO,
								   LASTBANKCHALLANNO= CCD.LASTBANKCHALLANNO,
								   TRNVOUCHERNO= CCD.TRNVOUCHERNO,
								   LASTTRNVOUCHERNO= CCD.LASTTRNVOUCHERNO,
								   BANKID= CCD.BANKID,
								   LASTBANKID= CCD.LASTBANKID,
								   CHALLANPAIDDATE= CCD.CHALLANPAIDDATE,
								   LASTCHALLANPAIDDATE= CCD.LASTCHALLANPAIDDATE,
								   DATEOFDEBIT= CCD.DATEOFDEBIT,
								   SECTIONID= CCD.SECTIONID,
								   INCOMETAX= CCD.INCOMETAX,
								   FEE= CCD.FEE,
								   SURCHARGE= CCD.SURCHARGE,
								   EDUCATIONCESS= CCD.EDUCATIONCESS,
								   INTEREST= CCD.INTEREST,
								   PENALTY= CCD.PENALTY,
								   OTHERS= CCD.OTHERS,
								   CHALLANTOTAL= CCD.CHALLANTOTAL,
								   LASTCHALLANTOTAL= CCD.LASTCHALLANTOTAL,
								   CHEQUENO= CCD.CHEQUENO,
								   CHEQUEDATE= CCD.CHEQUEDATE,
								   CHEQUEDRAWNON= CCD.CHEQUEDRAWNON,
								   TRANREFNO= CCD.TRANREFNO
							 FROM  CORRCHALLANDETAIL CCD
							INNER JOIN CHALLANDETAIL CD  ON CCD.CHALLANID=CD.CHALLANID AND CCD.BRANCHID=CD.BRANCHID AND CCD.FORMID=CD.FORMID --AND CCD.QUARTER=CD.QUARTER
							LEFT JOIN
							(
									SELECT ISNULL(MAX(CHALLANERETURNID),0) AS LINKDEDCOUNT,CHALLANERETURNID
									 FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
									GROUP BY CHALLANERETURNID
							 ) AS LNKCOUNT
							ON CCD.CHALLANERETURNID=LNKCOUNT.CHALLANERETURNID
							WHERE CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.CORRECTIONSTATUS = 7 AND CCD.ISUPDATECHALLAN=1	 				
						    END  
					IF EXISTS(SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL CCD WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CHALLANID IS NULL AND 
								NOT EXISTS 
								(
									SELECT CHALLANERETURNID FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) WHERE CCD.CHALLANERETURNID = CDD.CHALLANERETURNID AND  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
								))
							BEGIN
								INSERT INTO CHALLANDETAIL (SERIALNO,BRANCHID,QUARTER,FORMID,ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,
															MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,
															LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,
															SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
															ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TRANREFNO, MINORHEAD)							
								SELECT CCD.CHALLANSERIALNO AS SERIALNO,BRANCHID,QUARTER,FORMID,CCD.CHALLANERETURNID,ISNULL(LINKDEDCOUNT,0),ISNILCHALLAN,ISUPDATECHALLAN,
										   MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,
										   LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,
										   SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
										   ISNULL(ISCOMPANY,0),CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TRANREFNO,MINORHEAD
									 FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)
									 WHERE NOT EXISTS (SELECT CHALLANERETURNID FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) WHERE CCD.CHALLANERETURNID = CDD.CHALLANERETURNID AND  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER) 
									 AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND (CORRECTIONSTATUS = 1 AND CHALLANID IS NULL) AND CHALLANTOTAL>0
								UPDATE CORRCHALLANDETAIL SET CHALLANID=CD.CHALLANID
								FROM CHALLANDETAIL CD 
								INNER JOIN CORRCHALLANDETAIL CCD
								ON CCD.CHALLANSERIALNO=CD.SERIALNO AND CCD.BRANCHID=CD.BRANCHID AND CCD.FORMID=CD.FORMID AND CCD.QUARTER=CD.QUARTER 
								WHERE CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER AND ((CCD.CORRECTIONSTATUS = 1 AND CCD.CHALLANID IS NULL)) AND CD.CHALLANTOTAL>0 AND CCD.CHALLANTOTAL>0
							END
					SET @ERROR=2
					SET @RETURNTYPE=2
			END
			COMMIT 
		  END TRY	
	    BEGIN CATCH
			SET @ERROR=-1
			ROLLBACK
		END CATCH
		SELECT @RETURNTYPE
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GENERATEANDLINKCHALLAN')
DROP PROCEDURE USP_TDS_GENERATEANDLINKCHALLAN
GO
CREATE PROCEDURE [USP_TDS_GENERATEANDLINKCHALLAN]
   	@MONTH INT
AS
BEGIN
 DECLARE @FORMID INT
 DECLARE @VAR INT
    IF @MONTH >9
    SET @VAR=2
    ELSE
    SET @VAR=1
 DECLARE @ALLOW92A92B INT;
	SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS WITH(NOLOCK)
	SELECT  CB.BRANCHID,CASE WHEN SUPERFINAL.FORMTYPE='26QI' OR SUPERFINAL.FORMTYPE='26QV' THEN 2  WHEN SUPERFINAL.FORMTYPE='24Q' THEN 1 ELSE 3 END AS [FORMID] INTO #DIFFER FROM
 (
 SELECT FINAL.BRANCHID,FINAL.PARENTBRANCHID,FINAL.FORMTYPE,ABS(ISNULL(AMOUNT,0)-TDS) AS BALANCEAMOUNT  FROM
 (
  SELECT RESULT.BRANCHID,RESULT.PARENTBRANCHID,RESULT.SECTIONID AS FORMTYPE,SUM(RESULT.TDS) AS TDS FROM
  (
    SELECT CB.BRANCHID,CB.PARENTBRANCHID,CASE WHEN DD.FORMID=1 THEN '24Q' WHEN DD.FORMID=3 THEN '27Q' WHEN (DD.FORMID=2 AND TS.SECTIONID=5) THEN '26QI' ELSE '26QV' END AS SECTIONID,SUM(DD.TOTALDEDUCTED) AS TDS FROM COMPANYBRANCH CB WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID
        INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID
        LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID
        LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
    WHERE  DCL.DEDCHALINKID IS NULL AND MONTH(DEDUCTEDDATE)=@MONTH
    GROUP BY CB.BRANCHID,TS.SECTIONID,DD.FORMID,CB.PARENTBRANCHID
  ) AS RESULT GROUP BY RESULT.BRANCHID,RESULT.SECTIONID,RESULT.PARENTBRANCHID
 ) FINAL
        LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK) ON PA.BRANCHID=FINAL.BRANCHID AND PA.FORMTYPE=FINAL.FORMTYPE
        WHERE ISNULL(AMOUNT,0)-TDS < 0 AND SUBSTRING(CAST(PA.MONTHYEAR AS VARCHAR),1,@VAR)=@MONTH
  )SUPERFINAL
        INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON SUPERFINAL.BRANCHID=CB.BRANCHID
        INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON SUPERFINAL.PARENTBRANCHID=CB1.BRANCHID
        ORDER BY CB1.BRANCHID
SELECT IDENTITY(INT, 60000, 1) AS CHALLANID,BRANCHNAME,BRANCHID,SECTIONID,SECTIONNAME,ISNULL(DEDUCTEECODE,1) AS DEDUCTEECODE, INCOMETAX,SURCHARGE,EDUCATIONCESS ,TOTALDEDUCTED,HASPARTPAYMENT,QUARTER,FORMID INTO #TEMP
	FROM
	(
		SELECT BRANCHNAME,BRANCHID,SECTIONID,SECTIONNAME,DEDUCTEECODE,ISNULL(SUM(INCOMETAX),0) INCOMETAX,ISNULL(SUM(SURCHARGE),0) SURCHARGE,ISNULL(SUM(EDUCATIONCESS),0) EDUCATIONCESS,ISNULL(SUM(TOTALDEDUCTED),0) TOTALDEDUCTED, MAX(HASPARTPAYMENT) HASPARTPAYMENT,QUARTER,FORMID
		FROM
		(
			SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME,CB.BRANCHID, DD.SECTIONID,TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME ,NE.DEDUCTEECODE,SUM(DD.INCOMETAX) INCOMETAX,SUM(DD.SURCHARGE) SURCHARGE,SUM(DD.EDUCATIONCESS) EDUCATIONCESS,SUM(TOTALDEDUCTED) TOTALDEDUCTED,0 HASPARTPAYMENT,QUARTER,DD.FORMID
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID
			LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
			LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID AND TS.FORMID = DD.FORMID
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID
			WHERE DD.TOTALDEDUCTED>0 AND MONTH(DD.DEDUCTEDDATE)=@MONTH AND DL.DEDCHALINKID IS NULL
			GROUP BY DD.SECTIONID,SECTIONNAME,DEDUCTEECODE,TAXNAME,CB.BRANCHNAME,CB.BRANCHCODE,CB.BRANCHID,DD.QUARTER,DD.FORMID
			UNION
			SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME,CB.BRANCHID, DD.SECTIONID, TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, NE.DEDUCTEECODE,REMINCOMETAX INCOMETAX,REMSURCHARGE SURCHARGE,REMEDUCATIONCESS EDUCATIONCESS,REMTOTALDEDUCTED TOTALDEDUCTED,1 HASPARTPAYMENT,QUARTER,DD.FORMID
			FROM PARTPAYMENTDETAILS PPD WITH(NOLOCK)
			INNER JOIN
			(
				SELECT PARTPAYMENTID,DEDUCTEEID,MIN(SECTIONID) SECTIONID, BRANCHID,DEDUCTEDDATE,FORMID
				FROM DEDUCTIONDETAIL WITH(NOLOCK)
				GROUP BY PARTPAYMENTID,DEDUCTEEID,BRANCHID,DEDUCTEDDATE,FORMID
			) DD ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID AND PPD.FORMID = TS.FORMID
			LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND PPD.BRANCHID = D.BRANCHID
			LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= DD.BRANCHID
			WHERE MONTH(DD.DEDUCTEDDATE)=@MONTH AND (REMPAYMENTMADE <> 0 OR REMINCOMETAX <> 0 OR REMEDUCATIONCESS <> 0 OR REMSURCHARGE <> 0 OR REMTOTALDEDUCTED <> 0)
		) RESULT
		GROUP BY SECTIONID,SECTIONNAME,DEDUCTEECODE,BRANCHNAME,BRANCHID,QUARTER,FORMID
	) Q
	/* INSERT INTO CHALLAN*/
     INSERT INTO CHALLANDETAIL(SERIALNO, BRANCHID, QUARTER, FORMID, ERETURNID, LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT,
                      BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE,
                      LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, PENALTY, OTHERS, CHALLANTOTAL,
                      LASTCHALLANTOTAL, ISCOMPANY, CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, ISAUTOGENERATED,
                      ISOLTASINCLUDED)
	SELECT NUM+SERIALNO AS SERIALNO,BRANCHID,QUARTER,FORMID,0 AS ERETURNID,0 AS LINKEDCOUNT,'N' AS ISNILLCHALLAN,0 AS ISUPDATECHALLAN,
		   2 AS MODEOFPAYMENT,CHALLANID AS BANKCHALLANNO,CHALLANID AS LASTBANKCHALLANNO,'' AS TRNVOUCHERNO,'' AS LASTTRNVOUCHERNO,
		   1 AS BANKID,1 AS LASTBANKID,GETDATE() AS CHALLANPAIDDATE,GETDATE() AS CHALLANPAIDDATE,NULL AS DATEOFDEBIT,
		  SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,0 INTEREST,0 PENALTY,0 OTHERS,TOTALDEDUCTED AS CHALLANTOTAL,
		  TOTALDEDUCTED AS LASTCHALLANTOTAL,DEDUCTEECODE AS ISCOMPANY,
		  '' CHEQUENO,NULL CHEQUEDATE,'' CHEQUEDRAWNON,'' TRANREFNO,'' TVRECEIPTNUMBER,1 AS ISAUTOGENERATED,
						 0 AS ISOLTASINCLUDED  FROM
	(
	SELECT ROW_NUMBER() OVER (PARTITION BY T.BRANCHID,T.FORMID,T.QUARTER ORDER BY T.BRANCHID)  AS NUM,SERIALNO,
	CHALLANID,T.BRANCHID,SECTIONID,DEDUCTEECODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,T.FORMID,T.QUARTER FROM #TEMP T
	INNER JOIN
	(
	SELECT BRANCHID,FORMID,QUARTER,MAX(SERIALNO) AS SERIALNO FROM CHALLANDETAIL
	GROUP BY BRANCHID,FORMID,QUARTER
	) Y
	   ON T.BRANCHID= Y.BRANCHID AND T.FORMID= Y.FORMID AND T.QUARTER = Y.QUARTER
	) DATA
	/*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/
	INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID)
	SELECT DD.DEDUCTIONID,CCD.CHALLANID,DD.BRANCHID AS BRANCHID
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID
	LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID
	LEFT JOIN DEDCHALINK CD WITH(NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID
	INNER JOIN #TEMP T ON DD.BRANCHID=T.BRANCHID AND DD.SECTIONID=T.SECTIONID AND (NE.DEDUCTEECODE=T.DEDUCTEECODE)
	LEFT JOIN #DIFFER DL ON DD.BRANCHID=DL.BRANCHID AND DD.FORMID=DL.FORMID
	INNER JOIN CHALLANDETAIL CCD WITH(NOLOCK) ON CCD.BANKCHALLANNO=T.CHALLANID AND CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) =CONVERT(VARCHAR(8), GETDATE(), 112)
	WHERE  DD.TOTALDEDUCTED>0 AND MONTH(DD.DEDUCTEDDATE)=@MONTH  AND CD.DEDCHALINKID IS NULL AND DL.BRANCHID IS NULL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GenerateCertificateNosOnMonthlyBasis')
DROP PROCEDURE USP_TDS_GenerateCertificateNosOnMonthlyBasis
GO
CREATE PROCEDURE [USP_TDS_GenerateCertificateNosOnMonthlyBasis]    
 @BRANCHID INT,    
 @FORMID INT,    
 @DEDID INT,    
 @SECTIONID VARCHAR(MAX),      
 @INCLUDECERTGIVEN BIT,    
 @ORDERBYDEDUCTEEID BIT,    
 @INCLUDENONDEDREASON BIT,
 @ISAUDITTRIAL BIT = 0  
AS    
 BEGIN    
  SET NOCOUNT ON;    
  DECLARE @QUERY NVARCHAR(MAX),@SECTIONNAME VARCHAR(10),@TXTCERTNO VARCHAR(50),@CURROWCOUNT INT,@MAXROWCOUNT INT,@CERTNO INT,@PREVDEDUCTEEID INT,@PREVMONTH INT,@PREVSECTIONID INT,@CURRBRANCHID INT,@DEDUCTIONID INT,@DEDUCTEEID INT,@SERIALNO INT,@SECID INT,@MONTH INT;    
  CREATE TABLE #TEMP1(ID INT IDENTITY(1,1) PRIMARY KEY,BRANCHID INT,DEDUCTIONID INT,DEDUCTEEID INT,SERIALNO INT,SECTIONID INT,SECTIONNAME VARCHAR(10),PAYMENTDATE SMALLDATETIME,MON INT);    
  SET @QUERY = 'SELECT DD.BRANCHID,DD.DEDUCTIONID,D.DEDUCTEEID,NE.SERIALNO,DD.SECTIONID,TS.SECTIONNAME,DD.PAYMENTDATE,MONTH(DD.PAYMENTDATE) AS MON    
       FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID    
            INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID    
            INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID    
            LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID     
            LEFT JOIN FORM16A F16A WITH(NOLOCK) ON DD.DEDUCTIONID = F16A.DEDUCTIONID    
       WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR);  
	IF(@ISAUDITTRIAL = 1)
		BEGIN
			SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'
		END    
	IF(@SECTIONID <> '')    
		BEGIN    
			SET @QUERY = @QUERY + ' AND DD.SECTIONID IN (' + CAST(@SECTIONID AS VARCHAR) + ')';    
		END    
	IF(@DEDID <> -1)    
		BEGIN    
			SET @QUERY = @QUERY + ' AND NE.SERIALNO='+CAST(@DEDID AS VARCHAR);    
		END    
	IF @INCLUDENONDEDREASON = 0    
		BEGIN    
			SET @QUERY = @QUERY + ' AND (DD.TOTALDEDUCTED <> 0 AND DL.DEDCHALINKID IS NOT NULL)';    
		END    
	ELSE    
		BEGIN    
			SET @QUERY = @QUERY + ' AND ((DD.TOTALDEDUCTED <> 0 AND DL.DEDCHALINKID IS NOT NULL) OR DD.TOTALDEDUCTED = 0)';    
		END    
	IF @INCLUDECERTGIVEN = 1    
		BEGIN    
			SET @QUERY = @QUERY + ' AND (F16A.ISCERTIFICATEGIVEN = 1 OR F16A.ISCERTIFICATEGIVEN IS NULL)';    
		END    
	ELSE    
		BEGIN    
			SET @QUERY = @QUERY + ' AND (F16A.ISCERTIFICATEGIVEN = 0 OR F16A.ISCERTIFICATEGIVEN IS NULL)';    
		END     
	IF(@ORDERBYDEDUCTEEID = 1)    
		BEGIN    
			SET @QUERY = @QUERY + ' ORDER BY DD.SECTIONID,NE.SERIALNO,MONTH(DD.PAYMENTDATE)';    
		END    
	ELSE IF(@ORDERBYDEDUCTEEID = 0)    
		BEGIN    
			SET @QUERY = @QUERY + ' ORDER BY DD.SECTIONID,MONTH(DD.PAYMENTDATE),CAST(NE.SERIALNO AS VARCHAR)';    
		END      
  /*Inserts the required records into the Temporary table*/    
  INSERT INTO #TEMP1 EXEC SP_EXECUTESQL @QUERY;              
  /*Gets the maximum rowcount from the Temporary table*/    
  SELECT @MAXROWCOUNT = COUNT(DEDUCTIONID) FROM #TEMP1    
  /*Set the variables with default values*/      
  SET @PREVMONTH = 0;    
  SET @PREVDEDUCTEEID =0;    
  SET @PREVSECTIONID = 0;      
  SET @CURROWCOUNT = 1;    
  /*Loop through the records in the Temporary table*/    
WHILE(@CURROWCOUNT < = @MAXROWCOUNT)    
	BEGIN    
		SELECT @CURRBRANCHID = BRANCHID,@DEDUCTIONID = DEDUCTIONID,@SECID = SECTIONID,@SECTIONNAME = SECTIONNAME,@DEDUCTEEID = DEDUCTEEID,@SERIALNO = SERIALNO,@MONTH = MON     
		FROM   #TEMP1     
		WHERE  ID = @CURROWCOUNT    
		ORDER BY DEDUCTEEID;  
		IF(@SECID <> @PREVSECTIONID)    
			BEGIN     
				IF @INCLUDECERTGIVEN = 1    
					BEGIN    
						SET @CERTNO = 1;    
					END    
				ELSE    
					BEGIN           
						SET @CERTNO = (SELECT ISNULL(MAX(TDSCERTIFICATENO),0) + 1 FROM FORM16A WITH(NOLOCK) WHERE BRANCHID = @CURRBRANCHID AND SECTIONID = @SECID AND ISCERTIFICATEGIVEN = 1);    
					END    
			END    
		ELSE    
			BEGIN    
				IF(@DEDUCTEEID <> @PREVDEDUCTEEID OR @MONTH <> @PREVMONTH)    
					BEGIN    
						SET @CERTNO = @CERTNO + 1;    
					END           
			END    
		SET @PREVMONTH = @MONTH;     
		SET @PREVDEDUCTEEID = @DEDUCTEEID;    
		SET @PREVSECTIONID = @SECID;    
		SET @TXTCERTNO = CAST(@SERIALNO AS VARCHAR) + '/' + CAST(@SECTIONNAME AS VARCHAR) + '/' + CAST(@CERTNO AS VARCHAR);        
		IF EXISTS (SELECT DEDUCTIONID FROM FORM16A WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND DEDUCTIONID = @DEDUCTIONID)    
			BEGIN    
				UPDATE FORM16A     
				SET    SECTIONID = @SECID,TDSCERTIFICATENO = @CERTNO,PRINTCERTIFICATENO = @TXTCERTNO     
				WHERE  BRANCHID = @BRANCHID AND DEDUCTIONID = @DEDUCTIONID;    
			END             
		ELSE    
		BEGIN    
			/*Insert the required values to the Form16A table*/    
			INSERT INTO FORM16A(BRANCHID,DEDUCTIONID,SECTIONID,TDSCERTIFICATENO,PRINTCERTIFICATENO)    
			VALUES(@CURRBRANCHID,@DEDUCTIONID,@SECID,@CERTNO,@TXTCERTNO)    
		END    
		/*Increment the current row count and move to the next row*/    
		SET @CURROWCOUNT = @CURROWCOUNT + 1;    
	END
	IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL
		DROP TABLE #TEMP1    
  SET NOCOUNT OFF;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GENERATECERTIFICATENOSONYEARLYBASIS')
DROP PROCEDURE USP_TDS_GENERATECERTIFICATENOSONYEARLYBASIS
GO
CREATE PROCEDURE [USP_TDS_GENERATECERTIFICATENOSONYEARLYBASIS]
 @BRANCHID INT,
 @FORMID INT,
 @DEDID INT,
 @SECTIONID VARCHAR(MAX),
 @INCLUDECERTGIVEN BIT,
 @ORDERBYDEDUCTEEID BIT,
 @INCLUDENONDEDREASON BIT,
 @ISAUDITTRIAL BIT = 0
AS
 BEGIN
  /*DECLARE ALL THE REQUIRED VARIABLES*/
  DECLARE @CURROWCOUNT INT,@MAXROWCOUNT INT,@CERTNO INT,@VALUE INT,@CURRBRANCHID INT,@DEDUCTEEID INT,@SERIALNO INT,@DEDUCTIONID INT,@SECID INT,@SECTIONNAME VARCHAR(10),@TXTCERTNO VARCHAR(50);
  /*CREATE TEMPORARY TABLE WITH THE REQUIRED FIELDS*/
  CREATE TABLE #TEMP1(ID INT IDENTITY(1,1),BRANCHID INT,DEDUCTIONID INT,DEDUCTEEID INT,SERIALNO INT,SECTIONID INT,SECTIONNAME VARCHAR(10))
  DECLARE @QUERY NVARCHAR(MAX);
  SET @QUERY='SELECT DD.BRANCHID,DD.DEDUCTIONID,D.DEDUCTEEID,NE.SERIALNO,DD.SECTIONID,TS.SECTIONNAME
     FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
             LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID
             INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID=TS.SECTIONID
             LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
     WHERE  DD.BRANCHID ='  +CAST(@BRANCHID AS VARCHAR)+ ' AND DD.FORMID =' + CAST(@FORMID AS VARCHAR);
  IF(@ISAUDITTRIAL = 1)
   BEGIN
	 SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'
   END
  IF(@SECTIONID<>'')
    BEGIN
     SET @QUERY = @QUERY+' AND DD.SECTIONID IN ( ' + CAST(@SECTIONID AS VARCHAR) + ')';
    END
  IF(@DEDID <> -1)
   BEGIN
    SET @QUERY=@QUERY +' AND NE.SERIALNO='+CAST(@DEDID AS VARCHAR(10));
   END
  IF(@INCLUDENONDEDREASON = 1)
   BEGIN
    SET @QUERY = @QUERY + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL)';
   END
  ELSE IF(@INCLUDENONDEDREASON = 0)
   BEGIN
    SET @QUERY = @QUERY + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL) AND DD.TOTALDEDUCTED <> 0';
   END
  IF(@ORDERBYDEDUCTEEID = 1)
   BEGIN
    SET @QUERY = @QUERY + ' ORDER BY NE.SERIALNO';
   END
  ELSE IF(@ORDERBYDEDUCTEEID = 0)
   BEGIN
    SET @QUERY = @QUERY + ' ORDER BY CAST(NE.SERIALNO AS VARCHAR)';
   END
  /*INSERTS THE REQUIRED RECORDS INTO THE TEMPORARY TABLE*/
  INSERT INTO #TEMP1 EXEC SP_EXECUTESQL @QUERY;
  /*GETS THE MAXIMUM ROWCOUNT FROM THE TEMPORARY TABLE*/
  SELECT @MAXROWCOUNT=COUNT(DEDUCTIONID) FROM #TEMP1
  /*SET THE VARIABLES WITH DEFAULT VALUES*/
  SET @CERTNO=0;
  SET @VALUE=0;
  SET @CURROWCOUNT=1;
  /*LOOP THROUGH THE RECORDS IN THE TEMPORARY TABLE*/
  WHILE(@CURROWCOUNT<=@MAXROWCOUNT)
   BEGIN
    /*GET THE RECORDS FROM TEMPORARY TABLE*/
    SELECT @CURRBRANCHID=BRANCHID,@DEDUCTIONID=DEDUCTIONID,@DEDUCTEEID=DEDUCTEEID,@SERIALNO=SERIALNO,@SECID=SECTIONID,@SECTIONNAME=SECTIONNAME
    FROM   #TEMP1
    WHERE  ID=@CURROWCOUNT
       ORDER BY DEDUCTEEID
    IF(@DEDUCTEEID<>@VALUE)
     BEGIN
      SET @CERTNO=@CERTNO+1;
      SET @VALUE=@DEDUCTEEID;
      SET @TXTCERTNO=CAST(@SERIALNO AS VARCHAR)+'/' +CAST(@SECTIONNAME AS VARCHAR) +'/'+CAST(@CERTNO AS VARCHAR);
     END
    DECLARE @COUNT INT;
    SET @COUNT=(SELECT COUNT(DEDUCTIONID) FROM FORM16A WITH(NOLOCK) WHERE DEDUCTIONID=@DEDUCTIONID AND BRANCHID=@BRANCHID);
    IF(@COUNT=0)
     BEGIN
      /*INSERT THE REQUIRED VALUES TO THE FORM16A TABLE*/
      INSERT INTO FORM16A(BRANCHID,DEDUCTIONID,SECTIONID,TDSCERTIFICATENO,PRINTCERTIFICATENO)
      VALUES(@CURRBRANCHID,@DEDUCTIONID,@SECID,@CERTNO,@TXTCERTNO)
     END
    ELSE
     BEGIN
      UPDATE FORM16A
      SET    SECTIONID=@SECID,TDSCERTIFICATENO=@CERTNO,PRINTCERTIFICATENO=@TXTCERTNO
      WHERE  BRANCHID=@BRANCHID AND DEDUCTIONID=@DEDUCTIONID;
     END
    /*INCREMENT THE CURRENT ROW COUNT AND MOVE TO THE NEXT ROW*/
    SET @CURROWCOUNT=@CURROWCOUNT+1;
   END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GENERATECERTNOSONQUARTERLYBASIS')
DROP PROCEDURE USP_TDS_GENERATECERTNOSONQUARTERLYBASIS
GO
CREATE PROCEDURE [USP_TDS_GENERATECERTNOSONQUARTERLYBASIS]  
 @BRANCHID INT,  
 @FORMID INT,  
 @DEDID INT,  
 @SECTIONID VARCHAR(MAX),  
 @INCLUDECERTGIVEN BIT,  
 @ORDERBYDEDUCTEEID BIT,  
 @INCLUDENONDEDREASON BIT,  
 @ISAUDITTRIAL BIT = 0  
AS  
 BEGIN  
  SET NOCOUNT ON;  
  /*DECLARE VARIABLES AS PER THE REQUIREMENT*/  
  DECLARE @QUERY NVARCHAR(MAX),@CURROWCOUNT INT,@MAXROWCOUNT INT,@MAXCERTNO INT,@CERTNO INT,@PREVQUARTER INT,@PREVDEDUCTEEID INT,@PREVSECTIONID INT,@CURRBRANCHID INT,@DEDUCTIONID INT,  
     @DEDUCTEEID INT,@SERIALNO INT,@SECID INT,@SECTIONNAME VARCHAR(10),@QUARTER INT,@TXTCERTNO VARCHAR(50);  
  /*CREATE TEMPORARY TABLE WITH THE REQUIRED FIELDS*/  
  CREATE TABLE #TEMP1(ID INT IDENTITY(1,1) PRIMARY KEY,BRANCHID INT,DEDUCTIONID INT,SECTIONID INT,SECTIONNAME VARCHAR(10),DEDUCTEEID INT,SERIALNO INT,QUARTER INT)  
  SET @QUERY = 'SELECT DD.BRANCHID,DD.DEDUCTIONID,DD.SECTIONID,TS.SECTIONNAME,D.DEDUCTEEID,NE.SERIALNO,DD.[QUARTER]  
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID  
            INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
            INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID  
            LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID  
            LEFT JOIN FORM16A F16A WITH(NOLOCK) ON DD.DEDUCTIONID = F16A.DEDUCTIONID  
       WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR);  
   IF(@ISAUDITTRIAL = 1)  
   BEGIN  
  SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'  
   END  
  IF(@SECTIONID <> '')  
   BEGIN  
    SET @QUERY = @QUERY + ' AND DD.SECTIONID IN ( ' + CAST(@SECTIONID AS VARCHAR) + ')';  
   END  
  IF(@DEDID <> -1)  
   BEGIN  
    SET @QUERY = @QUERY + ' AND NE.SERIALNO = ' + CAST(@DEDID AS VARCHAR);  
   END  
  IF @INCLUDENONDEDREASON = 0  
   BEGIN  
    SET @QUERY = @QUERY + ' AND (DD.TOTALDEDUCTED <> 0 AND DL.DEDCHALINKID IS NOT NULL)';  
   END  
  ELSE  
   BEGIN  
    SET @QUERY = @QUERY + ' AND ((DD.TOTALDEDUCTED <> 0 AND DL.DEDCHALINKID IS NOT NULL) OR DD.TOTALDEDUCTED = 0)';  
   END  
  IF @INCLUDECERTGIVEN = 1  
   BEGIN  
    SET @QUERY = @QUERY + ' AND (F16A.ISCERTIFICATEGIVEN = 1 OR F16A.ISCERTIFICATEGIVEN IS NULL)';  
   END  
  ELSE  
   BEGIN  
    SET @QUERY = @QUERY + ' AND (F16A.ISCERTIFICATEGIVEN = 0 OR F16A.ISCERTIFICATEGIVEN IS NULL)';  
   END  
   IF(@ORDERBYDEDUCTEEID = 0)  
   BEGIN  
    SET @QUERY = @QUERY + ' ORDER BY DD.SECTIONID,DD.[QUARTER],CAST(NE.SERIALNO AS VARCHAR),D.DEDUCTEEID';  
   END  
   ELSE  
   BEGIN  
    SET @QUERY = @QUERY + ' ORDER BY DD.SECTIONID,NE.SERIALNO,DD.[QUARTER],D.DEDUCTEEID';  
   END  
  /*INSERTS THE REQUIRED RECORDS INTO THE TEMPORARY TABLE*/  
  INSERT INTO #TEMP1(BRANCHID ,DEDUCTIONID ,SECTIONID ,SECTIONNAME ,DEDUCTEEID ,SERIALNO ,QUARTER)  
  EXEC SP_EXECUTESQL @QUERY;  
  /*GETS THE MAXIMUM ROWCOUNT FROM THE TEMPORARY TABLE*/  
  SELECT @MAXROWCOUNT = COUNT(DEDUCTIONID) FROM #TEMP1;  
  /*SET THE VARIABLES WITH DEFAULT VALUES*/  
  SET @CURROWCOUNT = 1;  
  SET @PREVQUARTER = 0;  
  SET @PREVDEDUCTEEID =0;  
  SET @PREVSECTIONID = 0;  
  /*LOOP THROUGH THE RECORDS IN THE TEMPORARY TABLE*/  
  WHILE(@CURROWCOUNT <= @MAXROWCOUNT)  
   BEGIN  
    SELECT @CURRBRANCHID = BRANCHID,@DEDUCTIONID = DEDUCTIONID,@DEDUCTEEID = DEDUCTEEID,@SERIALNO = SERIALNO,@SECID = SECTIONID,@SECTIONNAME = SECTIONNAME,@QUARTER = [QUARTER]  
    FROM   #TEMP1  
    WHERE  ID = @CURROWCOUNT  
       ORDER BY DEDUCTEEID  
  IF @SECID <> @PREVSECTIONID  
     BEGIN  
      IF @INCLUDECERTGIVEN = 1  
       BEGIN  
        SET @CERTNO = 1;  
       END  
      ELSE  
       BEGIN  
        SELECT @CERTNO = ISNULL(MAX(TDSCERTIFICATENO),0) + 1 FROM FORM16A WHERE BRANCHID = @CURRBRANCHID AND SECTIONID = @SECID AND ISCERTIFICATEGIVEN = 1;  
       END  
END 
    ELSE  
     BEGIN  
      IF(@DEDUCTEEID <> @PREVDEDUCTEEID OR @QUARTER <> @PREVQUARTER)  
       BEGIN  
        SET @CERTNO = @CERTNO + 1;  
       END  
     END  
    SET @PREVDEDUCTEEID = @DEDUCTEEID;  
    SET @PREVQUARTER = @QUARTER;  
 SET @PREVSECTIONID = @SECID;  
    SET @TXTCERTNO = CAST(@SERIALNO AS VARCHAR) + '/' + CAST(@SECTIONNAME AS VARCHAR) + '/' + CAST(@CERTNO AS VARCHAR);  
    IF EXISTS(SELECT DEDUCTIONID FROM FORM16A WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND DEDUCTIONID = @DEDUCTIONID)  
     BEGIN  
       UPDATE FORM16A  
       SET    SECTIONID = @SECID,TDSCERTIFICATENO = @CERTNO,PRINTCERTIFICATENO = @TXTCERTNO, ISCERTIFICATEGIVEN = @INCLUDECERTGIVEN  
       WHERE  BRANCHID = @BRANCHID AND DEDUCTIONID = @DEDUCTIONID;  
     END  
    ELSE  
     BEGIN  
      /*INSERT THE REQUIRED VALUES TO THE FORM16A TABLE*/  
      INSERT INTO FORM16A(BRANCHID,DEDUCTIONID,SECTIONID,TDSCERTIFICATENO,PRINTCERTIFICATENO,ISCERTIFICATEGIVEN)  
      VALUES(@CURRBRANCHID,@DEDUCTIONID,@SECID,@CERTNO,@TXTCERTNO,@INCLUDECERTGIVEN)  
     END  
    /*INCREMENT THE CURRENT ROW COUNT AND MOVE TO THE NEXT ROW*/  
    SET @CURROWCOUNT = @CURROWCOUNT + 1;  
   END  
  SET NOCOUNT OFF;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GENERATEDIFFERENTCERTIFICATENOS')
DROP PROCEDURE USP_TDS_GENERATEDIFFERENTCERTIFICATENOS
GO
CREATE PROCEDURE [USP_TDS_GENERATEDIFFERENTCERTIFICATENOS]
 @BRANCHID INT,
 @FORMID INT,
 @DEDID INT,
 @SECTIONID VARCHAR(MAX),
 @INCLUDECERTGIVEN BIT,
 @ORDERBYDEDUCTEEID BIT,
 @INCLUDENONDEDREASON BIT,
 @ISAUDITTRIAL BIT = 0
AS
 BEGIN
  SET NOCOUNT ON;
  /*DECLARE VARIABLES AS PER THE REQUIREMENT*/
  DECLARE @CURROWCOUNT INT,@MAXROWCOUNT INT,@CERTNO INT,@CURRBRANCHID INT,@DEDUCTIONID INT,@PREVQUARTER INT,@QUARTER INT,@PREVDEDUCTEESLNO INT,@DEDUCTEESLNO INT,@SECID INT,@PREVSECTIONID INT,@SECTIONNAME VARCHAR(10),@SERIALNO INT,@PREVSERIALNO INT,@QUERY
NVARCHAR(MAX),@TXTCERTNO VARCHAR(50);
  /*CREATE TEMPORARY TABLE WITH THE REQUIRED FIELDS*/
  CREATE TABLE #TEMP1(ID INT IDENTITY(1,1) PRIMARY KEY,BRANCHID INT,DEDUCTIONID INT,QUARTER INT,DEDUCTEESLNO INT,SECTIONID INT,SECTIONNAME VARCHAR(10),SERIALNO INT)
  SET @QUERY = 'SELECT DD.BRANCHID,DD.DEDUCTIONID,DD.QUARTER,NE.SERIALNO AS DEDUCTEESLNO,DD.SECTIONID,TS.SECTIONNAME,DD.SERIALNO
       FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
            INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
            INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
            LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
            LEFT JOIN FORM16A F16A WITH(NOLOCK) ON DD.DEDUCTIONID = F16A.DEDUCTIONID
       WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR);
  IF(@ISAUDITTRIAL = 1)
   BEGIN
	 SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'
   END
  IF(@SECTIONID <> '')
   BEGIN
    SET @QUERY = @QUERY + ' AND DD.SECTIONID IN (' + CAST(@SECTIONID AS VARCHAR) + ')';
   END
  IF(@DEDID <> -1)
   BEGIN
    SET @QUERY = @QUERY + ' AND NE.SERIALNO = ' + CAST(@DEDID AS VARCHAR);
   END
  IF @INCLUDENONDEDREASON = 0
   BEGIN
    SET @QUERY = @QUERY + ' AND (DD.TOTALDEDUCTED <> 0 AND DL.DEDCHALINKID IS NOT NULL)';
   END
  ELSE
   BEGIN
    SET @QUERY = @QUERY + ' AND ((DD.TOTALDEDUCTED <> 0 AND DL.DEDCHALINKID IS NOT NULL) OR DD.TOTALDEDUCTED = 0)';
   END
  IF @INCLUDECERTGIVEN = 1
   BEGIN
    SET @QUERY = @QUERY + ' AND (F16A.ISCERTIFICATEGIVEN = 1 OR F16A.ISCERTIFICATEGIVEN IS NULL)';
   END
  ELSE
   BEGIN
    SET @QUERY = @QUERY + ' AND (F16A.ISCERTIFICATEGIVEN = 0 OR F16A.ISCERTIFICATEGIVEN IS NULL)';
   END
  IF(@ORDERBYDEDUCTEEID = 1)
   BEGIN
    SET @QUERY = @QUERY + ' ORDER BY DD.SECTIONID,DD.QUARTER,NE.SERIALNO,CAST(DD.SERIALNO AS VARCHAR)';
   END
  ELSE IF(@ORDERBYDEDUCTEEID = 0)
   BEGIN
    SET @QUERY = @QUERY + ' ORDER BY DD.SECTIONID,DD.QUARTER,CAST(DD.SERIALNO AS VARCHAR)';
   END
  /*INSERTS THE REQUIRED RECORDS INTO THE TEMPORARY TABLE*/
  INSERT INTO #TEMP1 EXEC SP_EXECUTESQL @QUERY;
  /*GETS THE MAXIMUM ROWCOUNT FROM THE TEMPORARY TABLE*/
  SELECT @MAXROWCOUNT = COUNT(DEDUCTIONID) FROM #TEMP1;
  /*SET THE VARIABLES WITH DEFAULT VALUES*/
  SET @CERTNO = 0;
  SET @CURROWCOUNT = 1;
  SET @PREVSECTIONID = 0;
  SET @PREVDEDUCTEESLNO = 0;
  SET @PREVSERIALNO = 0;
  /*LOOP THROUGH THE RECORDS IN THE TEMPORARY TABLE*/
  WHILE(@CURROWCOUNT <= @MAXROWCOUNT)
   BEGIN
    SELECT @CURRBRANCHID = BRANCHID,@QUARTER=[QUARTER],@DEDUCTIONID = DEDUCTIONID,@DEDUCTEESLNO = DEDUCTEESLNO,@SECID = SECTIONID,@SECTIONNAME = SECTIONNAME,@SERIALNO = SERIALNO
    FROM   #TEMP1
    WHERE  ID = @CURROWCOUNT;
    IF(@SECID <> @PREVSECTIONID)
     BEGIN
      IF @INCLUDECERTGIVEN = 1
       BEGIN
        SET @CERTNO = 1;
       END
      ELSE
       BEGIN
        SELECT @CERTNO = ISNULL(MAX(TDSCERTIFICATENO),0) + 1 FROM FORM16A WHERE BRANCHID = @CURRBRANCHID AND SECTIONID = @SECID AND ISCERTIFICATEGIVEN = 1;
       END
     END
    ELSE
     BEGIN
      IF (@DEDUCTEESLNO <> @PREVDEDUCTEESLNO OR @SERIALNO <> @PREVSERIALNO)
       BEGIN
        SET @CERTNO = @CERTNO + 1;
       END
     END
    SET @PREVSECTIONID = @SECID;
SET @PREVDEDUCTEESLNO = @DEDUCTEESLNO;
    SET @PREVSERIALNO = @SERIALNO;
    SET @TXTCERTNO = CAST(@DEDUCTEESLNO AS VARCHAR)+ '/'  + CAST(@SECTIONNAME AS VARCHAR) + '/' + CAST(@CERTNO AS VARCHAR);
    IF EXISTS (SELECT DEDUCTIONID FROM FORM16A WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND DEDUCTIONID = @DEDUCTIONID)
     BEGIN
      UPDATE FORM16A
      SET    SECTIONID = @SECID,TDSCERTIFICATENO = @CERTNO,PRINTCERTIFICATENO = @TXTCERTNO
      WHERE  BRANCHID = @BRANCHID AND DEDUCTIONID = @DEDUCTIONID;
     END
    ELSE
     BEGIN
      /*INSERT THE REQUIRED VALUES TO THE FORM16A TABLE*/
      INSERT INTO FORM16A(BRANCHID,DEDUCTIONID,SECTIONID,TDSCERTIFICATENO,PRINTCERTIFICATENO)
      VALUES(@CURRBRANCHID,@DEDUCTIONID,@SECID,@CERTNO,@TXTCERTNO);
     END
    /*INCREMENT THE CURRENT ROW COUNT AND MOVE TO THE NEXT ROW*/
    SET @CURROWCOUNT = @CURROWCOUNT + 1;
   END
  SET NOCOUNT OFF;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GenerateForm16CertificateNos')
DROP PROCEDURE USP_TDS_GenerateForm16CertificateNos
GO
CREATE PROCEDURE [USP_TDS_GenerateForm16CertificateNos]      
 @BRANCHID INT,      
 @FORMID INT,      
 @DEDUCTEESLNO VARCHAR(MAX),      
 @INCLUDECERTGIVEN BIT,      
 @ORDERBYDEDUCTEEID BIT,      
 @INCLUDENONDEDREASON BIT,
 @ISAUDITTRIAL BIT = 0      
AS      
 BEGIN        
  /*Declare all the required variables*/      
  DECLARE @CURROWCOUNT INT,@MAXROWCOUNT INT,@CERTNO INT,@VALUE INT,@CURRBRANCHID INT,@DEDUCTEEID INT,@SERIALNO INT,@DEDUCTIONID INT,@SECID INT,@SECTIONNAME VARCHAR(10),@TXTCERTNO VARCHAR(50);             
  /*Create Temporary Table with the required fields*/      
  CREATE TABLE #TEMP1(ID INT IDENTITY(1,1),BRANCHID INT,DEDUCTIONID INT,DEDUCTEEID INT,SERIALNO INT,SECTIONID INT,SECTIONNAME VARCHAR(10))      
  DECLARE @QUERY NVARCHAR(MAX);      
  SET @QUERY = 'SELECT D.BRANCHID,DD.DEDUCTIONID,D.DEDUCTEEID,E.SERIALNO,DD.SECTIONID,TS.SECTIONNAME      
            FROM  DEDUCTEE D WITH(NOLOCK)     
            INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
            LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID    
            LEFT JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.DEDUCTEEID=D.DEDUCTEEID      
            LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID      
            LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID      
            LEFT JOIN FORM16 F16 WITH(NOLOCK) ON D.DEDUCTEEID = F16.DEDUCTEEID      
       WHERE ISNULL(DD.FORMID,1) = 1 AND D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR);    
	IF(@ISAUDITTRIAL =1 )
		BEGIN
			SET @QUERY = @QUERY +' AND ISNULL(DD.TRANSSTATUS,1) = 2'
		END       
	IF(@DEDUCTEESLNO <> '')          
		BEGIN      
			SET @QUERY = @QUERY +' AND E.SERIALNO IN (' + CAST(@DEDUCTEESLNO AS VARCHAR(MAX)) + ')';      
		END      
	IF(@INCLUDENONDEDREASON = 1)      
		BEGIN      
			SET @QUERY = @QUERY + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL OR SD.SALARYDETAILID IS NOT NULL)';      
		END      
	ELSE IF(@INCLUDENONDEDREASON = 0)      
		BEGIN      
			SET @QUERY = @QUERY + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL OR SD.SALARYDETAILID IS NOT NULL)';      
		END          
	IF @INCLUDECERTGIVEN = 1      
		BEGIN      
			SET @QUERY = @QUERY + ' AND (F16.ISCERTIFICATEGIVEN = 1 OR F16.ISCERTIFICATEGIVEN IS NULL)';      
		END      
	ELSE      
		BEGIN      
			SET @QUERY = @QUERY + ' AND (F16.ISCERTIFICATEGIVEN = 0 OR F16.ISCERTIFICATEGIVEN IS NULL)';      
		END          
	IF(@ORDERBYDEDUCTEEID = 1)      
		BEGIN      
			SET @QUERY = @QUERY + ' ORDER BY E.SERIALNO';      
		END           
	ELSE IF(@ORDERBYDEDUCTEEID = 0)      
		BEGIN      
			SET @QUERY = @QUERY + ' ORDER BY CAST(E.SERIALNO AS VARCHAR)';      
		END      
  /*Inserts the required records into the Temporary table*/      
  INSERT INTO #TEMP1 EXEC SP_EXECUTESQL @QUERY;      
  /*Gets the maximum rowcount from the Temporary table*/      
  SELECT @MAXROWCOUNT = COUNT(DEDUCTEEID) FROM #TEMP1;      
  /*Set the variables with default values*/      
  SELECT @CERTNO = ISNULL(MAX(TDSCERTIFICATENO),0) FROM FORM16 WITH(NOLOCK) WHERE BRANCHID = @BRANCHID;      
  SET @VALUE = 0;      
  SET @CURROWCOUNT = 1;      
  /*Loop through the records in the Temporary table*/      
	WHILE(@CURROWCOUNT <= @MAXROWCOUNT)      
		BEGIN      
			/*Get the records from Temporary table*/      
			SELECT @CURRBRANCHID = BRANCHID,@DEDUCTIONID = DEDUCTIONID,@DEDUCTEEID = DEDUCTEEID,@SERIALNO = SERIALNO,@SECID = ISNULL(SECTIONID,2),@SECTIONNAME = ISNULL(SECTIONNAME, '192')       
			FROM   #TEMP1       
			WHERE  ID = @CURROWCOUNT;      
			IF(@DEDUCTEEID <> @VALUE)      
				BEGIN      
					SET @CERTNO = @CERTNO + 1;      
					SET @VALUE =  @DEDUCTEEID;      
					SET @TXTCERTNO = CAST(@SERIALNO AS VARCHAR) + '/' + CAST(@SECTIONNAME AS VARCHAR) + '/' + CAST(@CERTNO AS VARCHAR);      
				END              
			DECLARE @COUNT INT;   
			SELECT @COUNT = COUNT(DEDUCTEEID) FROM FORM16 WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID AND BRANCHID = @BRANCHID;      
			IF(@COUNT = 0)      
				BEGIN           
					/*Insert the required values to the Form16 table*/      
					INSERT INTO FORM16(BRANCHID,SECTIONID,TDSCERTIFICATENO,PRINTCERTIFICATENO, DEDUCTEEID)      
					VALUES(@CURRBRANCHID,@SECID,@CERTNO,@TXTCERTNO, @DEDUCTEEID)  
				END      
			ELSE      
				BEGIN            
					UPDATE FORM16       
					SET    SECTIONID=@SECID,TDSCERTIFICATENO=@CERTNO,PRINTCERTIFICATENO=@TXTCERTNO       
					WHERE  BRANCHID=@BRANCHID AND DEDUCTEEID=@DEDUCTEEID;      
				END                       
			/*Increment the current row count and move to the next row*/      
			SET @CURROWCOUNT = @CURROWCOUNT + 1;      
		END
	IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL
		DROP TABLE #TEMP1     
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GENERATEFORM16FORSB')
DROP PROCEDURE USP_TDS_GENERATEFORM16FORSB
GO
CREATE PROCEDURE  USP_TDS_GENERATEFORM16FORSB 
   @BRANCHID INT,          
   @DEDUCTEESLNO NVARCHAR(MAX)        
       AS
        BEGIN
     -- SET NOCOUNT ON       
      SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
      SELECT * INTO #DEDUCTEES FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTEESLNO,',')        
      SELECT D.BRANCHID,NULL AS DEDUCTIONID,  2 AS SECTIONID ,D.DEDUCTEEID,        
          E.SERIALNO,'192' AS  SECTIONNAME, F16.DEDUCTEEID AS F16DEDUCTEEID,LC.COMID        
         INTO #TEMP        
            FROM DEDUCTEE D          
            INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID     
            INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID                     
            LEFT JOIN FORM16 F16 ON D.DEDUCTEEID = F16.DEDUCTEEID
			INNER JOIN #DEDUCTEES DT ON DT.DATA = E.SERIALNO
       WHERE D.BRANCHID = @BRANCHID       
       ORDER BY E.SERIALNO         
        SELECT *, ROW_NUMBER() OVER(ORDER BY BRANCHID)ROWNO         
              INTO #TT           
        FROM #TEMP T WHERE F16DEDUCTEEID IS NULL        
       DECLARE @CERTNO INT;        
       SELECT @CERTNO = ISNULL(MAX(TDSCERTIFICATENO),0) FROM FORM16 WHERE BRANCHID = @BRANCHID     
       INSERT INTO FORM16        
       SELECT BRANCHID, NULL AS DEDUCTIONID, SECTIONID,ROWNO+@CERTNO AS TDSCERTIFICATENO,        
       CAST(SERIALNO AS VARCHAR) +'/'+SECTIONNAME + '/'+CAST(ROWNO+@CERTNO AS VARCHAR) AS PRINTCERTIFICATENO,        
       NULL AS CERTIFICATEDATE,0 AS ISCERTIFICATEGIVEN, DEDUCTEEID,COMID  
       FROM #TT         
       SELECT *, ROW_NUMBER() OVER(ORDER BY BRANCHID)ROWNO         
              INTO #TTT           
        FROM #TEMP T WHERE F16DEDUCTEEID IS NOT NULL        
        DECLARE @CERTNUMBER INT;        
        SELECT @CERTNUMBER = ISNULL(MAX(TDSCERTIFICATENO),0) FROM FORM16 WHERE BRANCHID = @BRANCHID        
   UPDATE FORM16 SET TDSCERTIFICATENO = ROWNO + @CERTNUMBER,        
      PRINTCERTIFICATENO = CAST(SERIALNO AS VARCHAR) +'/'+SECTIONNAME + '/'+CAST(ROWNO+@CERTNUMBER AS VARCHAR)        
         FROM FORM16 F        
         INNER JOIN #TTT T ON T.F16DEDUCTEEID = F.DEDUCTEEID 
		END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GenerateYearlyCertificateNos')
DROP PROCEDURE USP_TDS_GenerateYearlyCertificateNos
GO
CREATE PROCEDURE [USP_TDS_GenerateYearlyCertificateNos]
@BRANCHID INT,
@FORMID INT,
@DEDUCTEESLNO INT,
@INCLUDECERTGIVEN BIT,
@ORDERBYDEDUCTEEID BIT,
@INCLUDENONDEDREASON BIT	
AS
	BEGIN		
		/*Declare all the required variables*/
		DECLARE @CURROWCOUNT INT,@MAXROWCOUNT INT,@CERTNO INT,@VALUE INT,@CURRBRANCHID INT,@DEDUCTEEID INT,@SERIALNO INT,@DEDUCTIONID INT,@SECID INT,@SECTIONNAME VARCHAR(10),@TXTCERTNO VARCHAR(50);			    
		/*Create Temporary Table with the required fields*/
		CREATE TABLE #TEMP1(ID INT IDENTITY(1,1),BRANCHID INT,DEDUCTIONID INT,DEDUCTEEID INT,SERIALNO INT,SECTIONID INT,SECTIONNAME VARCHAR(10))
		DECLARE @QUERY NVARCHAR(MAX);
		SET @QUERY = 'SELECT DD.BRANCHID,DD.DEDUCTIONID,D.DEDUCTEEID,E.SERIALNO,DD.SECTIONID,TS.SECTIONNAME
					  FROM   DEDUCTIONDETAIL DD WITH(NOLOCK)
					  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
					  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
					  LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
					  LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
					  WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+ ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR);
		IF(@DEDUCTEESLNO <> -1)				
			BEGIN
				SET @QUERY = @QUERY +' AND E.SERIALNO = ' + CAST(@DEDUCTEESLNO AS VARCHAR);
			END
		IF(@INCLUDENONDEDREASON = 1)
			BEGIN
				SET @QUERY = @QUERY + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL)';
			END
		ELSE IF(@INCLUDENONDEDREASON = 0)
			BEGIN
				SET @QUERY = @QUERY + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL) AND DD.TOTALDEDUCTED <> 0';
			END 			
		IF(@ORDERBYDEDUCTEEID = 1)
			BEGIN
				SET @QUERY = @QUERY + ' ORDER BY E.SERIALNO';
			END
		ELSE IF(@ORDERBYDEDUCTEEID = 0)
			BEGIN
				SET @QUERY = @QUERY + ' ORDER BY CAST(E.SERIALNO AS VARCHAR)';
			END			
		/*Inserts the required records into the Temporary table*/
		INSERT INTO #TEMP1 EXEC SP_EXECUTESQL @QUERY;
		/*Gets the maximum rowcount from the Temporary table*/
		SELECT @MAXROWCOUNT = COUNT(DEDUCTIONID) FROM #TEMP1;
		/*Set the variables with default values*/
		SET @CERTNO = 0;
		SET @VALUE = 0;
		SET @CURROWCOUNT = 1;
		/*Loop through the records in the Temporary table*/
		WHILE(@CURROWCOUNT <= @MAXROWCOUNT)
			BEGIN
				/*Get the records from Temporary table*/
				SELECT @CURRBRANCHID=BRANCHID,@DEDUCTIONID=DEDUCTIONID,@DEDUCTEEID=DEDUCTEEID,@SERIALNO=SERIALNO,@SECID=SECTIONID,@SECTIONNAME=SECTIONNAME 
				FROM   #TEMP1 
				WHERE  ID = @CURROWCOUNT;
				IF(@DEDUCTEEID <> @VALUE)
					BEGIN
						SET @CERTNO = @CERTNO+1;
						SET @VALUE = @DEDUCTEEID;
						SET @TXTCERTNO = CAST(@SERIALNO AS VARCHAR) + '/' + CAST(@SECTIONNAME AS VARCHAR) + '/' + CAST(@CERTNO AS VARCHAR);
					END								
				DECLARE @COUNT INT;
				SELECT @COUNT = COUNT(DEDUCTIONID) FROM FORM16A WITH(NOLOCK) WHERE DEDUCTIONID = @DEDUCTIONID AND BRANCHID = @BRANCHID;
				IF(@COUNT = 0)
					BEGIN
						/*Insert the required values to the Form16A table*/
						INSERT INTO FORM16A(BRANCHID,DEDUCTIONID,SECTIONID,TDSCERTIFICATENO,PRINTCERTIFICATENO)
						VALUES(@CURRBRANCHID,@DEDUCTIONID,@SECID,@CERTNO,@TXTCERTNO)		
					END
				ELSE
					BEGIN
						UPDATE FORM16A 
						SET    SECTIONID=@SECID,TDSCERTIFICATENO=@CERTNO,PRINTCERTIFICATENO=@TXTCERTNO 
						WHERE  BRANCHID=@BRANCHID AND DEDUCTIONID=@DEDUCTIONID;
					END																	
				/*Increment the current row count and move to the next row*/
				SET @CURROWCOUNT = @CURROWCOUNT+1;
			END
		IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL
			DROP TABLE #TEMP1
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GERMAXDEDUCTIONSRNO')
DROP PROCEDURE USP_TDS_GERMAXDEDUCTIONSRNO
GO
CREATE PROCEDURE [USP_TDS_GERMAXDEDUCTIONSRNO] 
(  
@BRANCHCODES NVARCHAR(MAX),  
@FORM TINYINT,  
@QUARTER TINYINT  
)  
AS  
BEGIN
SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')
DECLARE @TEMP TABLE(BRANCHID INT,BRANCHCODE VARCHAR(MAX))  
INSERT INTO @TEMP  
SELECT BRANCHID,BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) 
INNER JOIN #BRANCHES B ON B.DATA = BRANCHCODE  
DECLARE @T TABLE(BRANCHID INT,SERIALNO INT,PARTPAYMENTID INT)  
INSERT INTO  @T  
SELECT DD.BRANCHID,MAX(DD.SERIALNO) SERIALNO,MAX(DD.PARTPAYMENTID) PARTPAYMENTID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)  
ON D.DEDUCTEEID=DD.DEDUCTEEID  
INNER JOIN @TEMP TT  
ON DD.BRANCHID=TT.BRANCHID   AND DD.QUARTER=@QUARTER AND DD.FORMID=@FORM  
GROUP BY DD.BRANCHID  
SELECT  TE.BRANCHID,TE.BRANCHCODE,ISNULL(T.SERIALNO,0) SERIALNO,ISNULL(T.PARTPAYMENTID,0) PARTPAYMENTID FROM @TEMP  TE  
LEFT JOIN  @T  T  
ON TE.BRANCHID=T.BRANCHID  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GET194ADEDUCTIONSCOUNT')
DROP PROCEDURE USP_TDS_GET194ADEDUCTIONSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GET194ADEDUCTIONSCOUNT]
@BRANCHID INT,
@MONTH INT
AS
BEGIN
  SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE FORMID=2 AND SECTIONID=5  AND MONTH(PAYMENTDATE)=@MONTH
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GET26QAAERETURNINVALIDDATA')
DROP PROCEDURE USP_TDS_GET26QAAERETURNINVALIDDATA
GO
CREATE PROCEDURE [dbo].[USP_TDS_GET26QAAERETURNINVALIDDATA]
( @QUARTER INT )    
AS    
	BEGIN    
		SELECT BRANCHID, BRANCHCODE, @QUARTER AS QUARTER, 'Branch ' + BRANCHCODE + ' does not have Deductor Details' AS ERROR 
			INTO #COMPANY FROM COMPANYBRANCH WITH(NOLOCK)
		SELECT DISTINCT CB.*
		INTO #DEDUCTORAVBL 			
		FROM #COMPANY CB WITH(NOLOCK)   
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID  
			INNER JOIN DEDUCTOR D WITH(NOLOCK) ON  BD.DEDUCTORID = D.DEDUCTORID 
		SELECT * 
			INTO #DEDUCTORNOTAVBL 
			FROM #COMPANY			
		EXCEPT 		
		SELECT * 
			FROM #DEDUCTORAVBL 
		-------------------------------------------------------------------------------------		
		SELECT BRANCHID, BRANCHCODE, @QUARTER AS QUARTER, 'Branch ' + BRANCHCODE + ' does not have valid TAN' AS ERROR 
			INTO #COMPANYTAN FROM COMPANYBRANCH WITH(NOLOCK)
		SELECT DISTINCT CB.*
			INTO #TANNOTAVBL  
		FROM #COMPANYTAN CB WITH(NOLOCK)   
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID  
			INNER JOIN DEDUCTOR D WITH(NOLOCK) ON  BD.DEDUCTORID = D.DEDUCTORID  
		WHERE D.TAN IN ('TANAPPLIED') AND BD.QUARTER = @QUARTER 			
		SELECT ERROR FROM #TANNOTAVBL 
		UNION ALL
		SELECT ERROR FROM #DEDUCTORNOTAVBL		
		DROP TABLE #COMPANY
		DROP TABLE #COMPANYTAN
		DROP TABLE #TANNOTAVBL
		DROP TABLE #DEDUCTORAVBL
		DROP TABLE #DEDUCTORNOTAVBL
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GET26QAAHEADER')
DROP PROCEDURE USP_TDS_GET26QAAHEADER
GO
CREATE PROCEDURE USP_TDS_GET26QAAHEADER     
 @QTREND SMALLDATETIME,    
 @BRANCHID INT,    
 @FINYEAR VARCHAR(4),    
 @ASSESMENTYEAR VARCHAR(4)    
AS        
 BEGIN    
  DECLARE @QTR INT    
  DECLARE @QTRTOPRINT VARCHAR(2)    
  SELECT @QTR = (CASE WHEN MONTH(@QTREND) = 6 THEN 1    
       WHEN MONTH(@QTREND) = 9 THEN 2    
       WHEN MONTH(@QTREND) = 12 THEN 3    
       ELSE 4 END)     
  SELECT @QTRTOPRINT = (CASE WHEN MONTH(@QTREND) = 6 THEN 'Q1'    
         WHEN MONTH(@QTREND) = 9 THEN 'Q2'    
         WHEN MONTH(@QTREND) = 12 THEN 'Q3'    
         ELSE 'Q4' END)     
  SELECT COUNT(TD.TRANID) TD_COUNT  
  INTO #QAASUM    
  FROM TERMDEPOSIT26QAA TD WITH(NOLOCK)    
  WHERE CLOSUREDATE >= @QTREND    
  SELECT RP.PERSONNAME, DD.TANREGISTRATION AS PAN, RP.ADDRESS1, RP.ADDRESS2, RP.ADDRESS3, RP.ADDRESS4, RP.ADDRESS5,     
   SM.STATENAME,RP.PINCODE,RP.MOBILENO,RP.EMAILADDRESS, Q.TD_COUNT,@FINYEAR AS FINYEAR,    
   @QTRTOPRINT AS QTRPRINT,@ASSESMENTYEAR AS ASSESMENTYEAR ,@BRANCHID AS HOBRANCHID  
  INTO #DEDUCTORINFO          
  FROM     
   (SELECT @BRANCHID HOBRANCHID, TD_COUNT    
    FROM #QAASUM) Q    
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = Q.HOBRANCHID     
   INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID    
   INNER JOIN DEDUCTOR DD WITH(NOLOCK) ON DD.DEDUCTORID = BD.DEDUCTORID    
   INNER JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON RP.DEDUCTORID = DD.DEDUCTORID    
   INNER JOIN STATEMASTER SM WITH(NOLOCK) ON SM.STATEID = RP.STATEID     
  WHERE BD.QUARTER = @QTR    
  SELECT   
   'FH' + '26QAA' +DR.FINYEAR   
   + DR.QTRPRINT + DR.ASSESMENTYEAR + DR.PERSONNAME   
   + REPLICATE(CHAR(32), 75 - LEN(DR.PERSONNAME))  
   + DR.PAN   
   + DR.ADDRESS1 + REPLICATE(CHAR(32), 35 - LEN(DR.ADDRESS1))  
   + DR.ADDRESS2 + REPLICATE(CHAR(32), 35 - LEN(DR.ADDRESS2))   
   + DR.ADDRESS3 + REPLICATE(CHAR(32), 35 - LEN(DR.ADDRESS3))  
   + DR.ADDRESS4 + REPLICATE(CHAR(32), 35 - LEN(DR.ADDRESS4))   
   + DR.ADDRESS5 + REPLICATE(CHAR(32),35 - LEN(DR.ADDRESS5))  
   + DR.STATENAME + REPLICATE(CHAR(32),25 - LEN(DR.STATENAME))   
   + DR.PINCODE + REPLICATE(CHAR(32),6 - LEN(DR.PINCODE))  
   + DR.MOBILENO + REPLICATE(CHAR(32),15 - LEN(DR.MOBILENO))     
   + DR.EMAILADDRESS + REPLICATE(CHAR(32),30 - LEN(DR.EMAILADDRESS))    
   + RIGHT(REPLICATE('0', 15) + CAST(DR.TD_COUNT AS VARCHAR), 15) FHDATA  
  FROM #DEDUCTORINFO DR,#QAASUM Q  
  WHERE   
   Q.TD_COUNT  > 0  
  DROP TABLE #DEDUCTORINFO   
  DROP TABLE #QAASUM  
 END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GET26QAASUMMARY')
DROP PROCEDURE USP_TDS_GET26QAASUMMARY
GO
--USP_TDS_GET26QAASUMMARY '30/jUN/2018', 1
CREATE PROCEDURE USP_TDS_GET26QAASUMMARY	
	@QTREND SMALLDATETIME,
	@BRANCHID INT
AS    
	BEGIN
		DECLARE @QTR INT
		SELECT @QTR = (CASE WHEN MONTH(@QTREND) = 6 THEN 1
							WHEN MONTH(@QTREND) = 9 THEN 2
							WHEN MONTH(@QTREND) = 12 THEN 3
							ELSE 4 END) 
		DECLARE @BRCOUNT INT
		DECLARE @TDCOUNT INT
		SELECT @BRCOUNT = COUNT(DISTINCT TD.BRANCHID)
		FROM TERMDEPOSIT26QAA TD WITH(NOLOCK)
		WHERE CLOSUREDATE >= @QTREND
		SELECT @TDCOUNT = COUNT(TD.TRANID)
		FROM TERMDEPOSIT26QAA TD WITH(NOLOCK)
		WHERE CLOSUREDATE >= @QTREND
		SELECT @BRCOUNT BRANCH_COUNT, @TDCOUNT TD_COUNT
		INTO #QAASUM
		SELECT RP.PERSONNAME, DD.TANREGISTRATION AS PAN, RP.ADDRESS1, RP.ADDRESS2, RP.ADDRESS3, RP.ADDRESS4, RP.ADDRESS5, 
			Q.BRANCH_COUNT, Q.TD_COUNT 
		FROM 
			(SELECT @BRANCHID HOBRANCHID, BRANCH_COUNT, TD_COUNT
			FROM #QAASUM) Q
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = Q.HOBRANCHID 
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID
			INNER JOIN DEDUCTOR DD WITH(NOLOCK) ON DD.DEDUCTORID = BD.DEDUCTORID
			INNER JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON RP.DEDUCTORID = DD.DEDUCTORID
		WHERE BD.QUARTER = @QTR 
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GET26QAASUMMARYPARTA')
DROP PROCEDURE USP_TDS_GET26QAASUMMARYPARTA
GO
--USP_TDS_GET26QAASUMMARYPARTA '30/Mar/2019', 1
CREATE PROCEDURE USP_TDS_GET26QAASUMMARYPARTA	
	@QTREND SMALLDATETIME,
	@BRANCHID INT
AS    
	BEGIN
		DECLARE @QTR INT
		SELECT @QTR = (CASE WHEN MONTH(@QTREND) = 6 THEN 1
							WHEN MONTH(@QTREND) = 9 THEN 2
							WHEN MONTH(@QTREND) = 12 THEN 3
							ELSE 4 END) 
		SELECT COUNT(DISTINCT TD.BRANCHID) BRANCH_COUNT, COUNT(TD.TRANID) TD_COUNT
		INTO #QAASUM
		FROM TERMDEPOSIT26QAA TD WITH(NOLOCK)
		WHERE CLOSUREDATE >= @QTREND
		SELECT RP.PERSONNAME, DD.TANREGISTRATION AS PAN, RP.ADDRESS1, RP.ADDRESS2, RP.ADDRESS3, RP.ADDRESS4, RP.ADDRESS5, 
			   SM.STATENAME,RP.PINCODE,RP.MOBILENO,RP.EMAILADDRESS,Q.BRANCH_COUNT, Q.TD_COUNT 
		FROM 
			(SELECT @BRANCHID HOBRANCHID, BRANCH_COUNT, TD_COUNT
			FROM #QAASUM) Q
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = Q.HOBRANCHID 
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID
			INNER JOIN DEDUCTOR DD WITH(NOLOCK) ON DD.DEDUCTORID = BD.DEDUCTORID
			INNER JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON RP.DEDUCTORID = DD.DEDUCTORID
			INNER JOIN STATEMASTER SM WITH(NOLOCK) ON SM.STATEID = RP.STATEID 
		WHERE BD.QUARTER = @QTR 
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GET26QAATDDETAILS')
DROP PROCEDURE USP_TDS_GET26QAATDDETAILS
GO
CREATE PROCEDURE USP_TDS_GET26QAATDDETAILS	
	@QTRSTART SMALLDATETIME,
	@QTREND SMALLDATETIME,
	@BRANCHID INT
AS    
	BEGIN	
		SELECT *,
			CASE WHEN (CLOSUREDATE <= @QTRSTART) THEN 1 ELSE 0 END CATGY1,
			CASE WHEN (OPENINGDATE >= @QTRSTART AND OPENINGDATE <= @QTREND) THEN 1 ELSE 0 END CATGY2,
			CASE WHEN (CLOSUREDATE <= @QTREND) THEN 1 ELSE 0 END CATGY3
		INTO #TOSUMMARISE
		FROM TERMDEPOSIT26QAA
		WHERE OPENINGDATE <= @QTREND
		SELECT BRANCHID, ROW_NUMBER()OVER (ORDER BY BRANCHID) SLNO, SUM(AMT1) C1A1, SUM(AMT2) C1A2, SUM(AMT3) C1A3, SUM(AMT4) C1A4, SUM(AMT5) C1A5
		INTO #CAT1
		FROM #TOSUMMARISE
		WHERE CATGY1 = 1
		GROUP BY BRANCHID
		SELECT BRANCHID, ROW_NUMBER()OVER (ORDER BY BRANCHID) SLNO, SUM(AMT1) C2A1, SUM(AMT2) C2A2, SUM(AMT3) C2A3, SUM(AMT4) C2A4, SUM(AMT5) C2A5
		INTO #CAT2
		FROM #TOSUMMARISE
		WHERE CATGY2 = 1
		GROUP BY BRANCHID
		SELECT BRANCHID, ROW_NUMBER()OVER (ORDER BY BRANCHID) SLNO, SUM(AMT1) C3A1, SUM(AMT2) C3A2, SUM(AMT3) C3A3, SUM(AMT4) C3A4, SUM(AMT5) C3A5
		INTO #CAT3
		FROM #TOSUMMARISE
		WHERE CATGY3 = 1
		GROUP BY BRANCHID
		SELECT CB.BRANCHID, 
			ISNULL(C1.SLNO, '') C1SLNO, ISNULL(C1.C1A1, 0) CAT1AMT1, ISNULL(C1.C1A2, 0) CAT1AMT2, ISNULL(C1.C1A3, 0) CAT1AMT3, ISNULL(C1.C1A4, 0) CAT1AMT4, ISNULL(C1.C1A5, 0) CAT1AMT5, 
			ISNULL(C2.SLNO, '') C2SLNO, ISNULL(C2.C2A1, 0) CAT2AMT1, ISNULL(C2.C2A2, 0) CAT2AMT2, ISNULL(C2.C2A3, 0) CAT2AMT3, ISNULL(C2.C2A4, 0) CAT2AMT4, ISNULL(C2.C2A5, 0) CAT2AMT5, 
			ISNULL(C3.SLNO, '') C3SLNO, ISNULL(C3.C3A1, 0) CAT3AMT1, ISNULL(C3.C3A2, 0) CAT3AMT2, ISNULL(C3.C3A3, 0) CAT3AMT3, ISNULL(C3.C3A4, 0) CAT3AMT4, ISNULL(C3.C3A5, 0) CAT3AMT5
		INTO #FOROUTPUT
		FROM COMPANYBRANCH CB WITH(NOLOCK) 
			LEFT JOIN #CAT1 C1 ON CB.BRANCHID = C1.BRANCHID
			LEFT JOIN #CAT2 C2 ON CB.BRANCHID = C2.BRANCHID
			LEFT JOIN #CAT3 C3 ON CB.BRANCHID = C3.BRANCHID
		SELECT ROW_NUMBER()OVER (ORDER BY CB.BRANCHID) TDRN, CB.BRANCHID, D.TAN, D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, S.STATENAME, D.PINCODE
		INTO #BRINFO
		FROM COMPANYBRANCH CB WITH(NOLOCK)
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID
			INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID
			INNER JOIN STATEMASTER S WITH(NOLOCK) ON S.STATEID = D.STATEID
		WHERE BD.QUARTER = 1
		SELECT 
			'TD' + RIGHT(REPLICATE('0', 15) + CAST(TDRN AS VARCHAR), 15)
			+ RIGHT(REPLICATE('0', 15) + CAST(TDRN AS VARCHAR), 15)
			+ BR.TAN + BR.ADDRESS1 + REPLICATE(CHAR(32), 35 - LEN(BR.ADDRESS1))
			+ BR.ADDRESS2 + REPLICATE(CHAR(32), 35 - LEN(BR.ADDRESS2)) + BR.ADDRESS3 + REPLICATE(CHAR(32), 35 - LEN(BR.ADDRESS3))
			+ BR.ADDRESS4 + REPLICATE(CHAR(32), 35 - LEN(BR.ADDRESS4)) + BR.ADDRESS5 + REPLICATE(CHAR(32), 35 - LEN(BR.ADDRESS5))
			+ BR.STATENAME + REPLICATE(CHAR(32), 35 - LEN(BR.STATENAME)) + BR.PINCODE + REPLICATE(CHAR(32), 6 - LEN(BR.PINCODE)) + REPLICATE(' ', 10) 
			+ RIGHT(REPLICATE('0', 15) + CAST(CAT1AMT1 AS VARCHAR), 15) + RIGHT(REPLICATE('0', 15) + CAST(CAT1AMT2 AS VARCHAR), 15)
			+ RIGHT(REPLICATE('0', 15) + CAST(CAT1AMT3 AS VARCHAR), 15) + RIGHT(REPLICATE('0', 15) + CAST(CAT1AMT4 AS VARCHAR), 15)
			+ RIGHT(REPLICATE('0', 15) + CAST(CAT1AMT5 AS VARCHAR), 15)
			+ RIGHT(REPLICATE('0', 15) + CAST(CAT2AMT1 AS VARCHAR), 15) + RIGHT(REPLICATE('0', 15) + CAST(CAT2AMT2 AS VARCHAR), 15)
			+ RIGHT(REPLICATE('0', 15) + CAST(CAT2AMT3 AS VARCHAR), 15) + RIGHT(REPLICATE('0', 15) + CAST(CAT2AMT4 AS VARCHAR), 15)
			+ RIGHT(REPLICATE('0', 15) + CAST(CAT2AMT5 AS VARCHAR), 15)
			+ RIGHT(REPLICATE('0', 15) + CAST(CAT3AMT1 AS VARCHAR), 15) + RIGHT(REPLICATE('0', 15) + CAST(CAT3AMT2 AS VARCHAR), 15)
			+ RIGHT(REPLICATE('0', 15) + CAST(CAT3AMT3 AS VARCHAR), 15) + RIGHT(REPLICATE('0', 15) + CAST(CAT3AMT4 AS VARCHAR), 15)
			+ RIGHT(REPLICATE('0', 15) + CAST(CAT3AMT5 AS VARCHAR), 15) TDDATA
			--, BR.*, O.*
		FROM #BRINFO BR
			INNER JOIN #FOROUTPUT O ON BR.BRANCHID = O.BRANCHID
		WHERE
			(CAT1AMT1 + CAT1AMT2 + CAT1AMT3 + CAT1AMT4 + CAT1AMT5
				+ CAT2AMT1 + CAT2AMT2 + CAT2AMT3 + CAT2AMT4 + CAT2AMT5
				+ CAT3AMT1 + CAT3AMT2 + CAT3AMT3 + CAT3AMT4 + CAT3AMT5) > 0
		DROP TABLE #BRINFO
		DROP TABLE #FOROUTPUT
		DROP TABLE #CAT1
		DROP TABLE #CAT2
		DROP TABLE #CAT3
		--DROP TABLE #PREPAREDDATA
		DROP TABLE #TOSUMMARISE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GET26QVDETAILS')
DROP PROCEDURE USP_TDS_GET26QVDETAILS
GO
CREATE PROCEDURE [USP_TDS_GET26QVDETAILS]  
@ISIB BIT = 1  
AS  
BEGIN  
  DECLARE @FINAL TABLE(DATE VARCHAR(10), AMOUNT NUMERIC(13,2), FORMTYPE VARCHAR(10), BRANCHCODE VARCHAR(10), BRANCHNAME VARCHAR(75));  
 IF(@ISIB =1)  
  BEGIN  
    INSERT INTO @FINAL(DATE, AMOUNT, BRANCHCODE, BRANCHNAME)  
    --   SELECT  CONVERT(VARCHAR(10),GETDATE() , 103)[DATE] , SUM(CHALLANTOTAL) AMOUNT,CB.BRANCHCODE,CB.BRANCHNAME      
    --FROM CHALLANDETAIL CD WITH(NOLOCK)  
    --INNER JOIN (
    --SELECT DISTINCT CHALLANID,BRANCHID FROM DEDCHALINK WITH(NOLOCK)) DCL ON DCL.BRANCHID=CD.BRANCHID AND DCL.CHALLANID=CD.CHALLANID  
    --INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=CD.BRANCHID  
    --WHERE SECTIONID NOT IN (5,17) AND ISAUTOGENERATED=1 AND ISOLTASINCLUDED=0 AND FORMID <> 1 AND   
    --MONTH(TEMPDATE)= MONTH(GETDATE()) AND DAY(TEMPDATE)=DAY(GETDATE()) AND YEAR(TEMPDATE)=YEAR(GETDATE())  
    --GROUP BY CB.BRANCHCODE,CB.BRANCHNAME  
       SELECT  CONVERT(VARCHAR(10),GETDATE() , 103)[DATE] , SUM(CHALLANTOTAL) AMOUNT,CB.BRANCHCODE,CB.BRANCHNAME      
    FROM CHALLANDETAIL CD WITH(NOLOCK)  
    INNER JOIN (
    SELECT DISTINCT CHALLANID,DCL.BRANCHID,DD.ENTRYTYPE FROM DEDCHALINK DCL WITH(NOLOCK) 
    INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID
    ) DCLL ON DCLL.BRANCHID=CD.BRANCHID AND DCLL.CHALLANID=CD.CHALLANID  
    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=CD.BRANCHID  
    WHERE (CD.SECTIONID NOT IN (5,17) OR (SECTIONID = 17 AND ENTRYTYPE = 1)) AND ISAUTOGENERATED=1 AND ISOLTASINCLUDED=0 AND CD.FORMID <> 1 AND   
    MONTH(TEMPDATE)= MONTH(GETDATE()) AND DAY(TEMPDATE)=DAY(GETDATE()) AND YEAR(TEMPDATE)=YEAR(GETDATE())  
    GROUP BY CB.BRANCHCODE,CB.BRANCHNAME
  END  
 ELSE  
  BEGIN  
    SELECT DL.DEDUCTIONID   
       INTO #DEDUCTION  
    FROM CHALLANDETAIL CD WITH(NOLOCK)  
    INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID  
    WHERE ISAUTOGENERATED = 1 AND ISOLTASINCLUDED = 0 AND FORMID <> 1 AND   
    MONTH(TEMPDATE) = MONTH(GETDATE()) AND DAY(TEMPDATE)=DAY(GETDATE()) AND YEAR(TEMPDATE)=YEAR(GETDATE())  
    INSERT INTO @FINAL   
    SELECT CONVERT(VARCHAR(10),GETDATE() , 103)[DATE], SUM(TOTALDEDUCTED) AMOUNT, FORMTYPE,  BRANCHCODE, BRANCHNAME  
     FROM  
    (             
        SELECT CASE WHEN FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID = 5 THEN '26QI'   
            WHEN FORMID = 3 THEN '27Q'   
            WHEN FORMID = 2 AND ENTRYTYPE = 1 THEN '26QV'  
           END AS FORMTYPE, TOTALDEDUCTED, BRANCHNAME, BRANCHCODE   
         FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
        INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID  
        INNER JOIN #DEDUCTION D ON DD.DEDUCTIONID = D.DEDUCTIONID  
    )DD  
     GROUP BY BRANCHNAME, BRANCHCODE, FORMTYPE    
  END   
  SELECT * FROM  
  (  
  SELECT CASE WHEN @ISIB = 1 THEN CAST(T.DATE AS VARCHAR)+'^'+CAST(T.BRANCHCODE AS VARCHAR)+'^'+CAST(T.BRANCHNAME AS VARCHAR)+'^'+CAST(T.AMOUNT AS VARCHAR)  
          ELSE FORMTYPE + '^' +CAST(T.DATE AS VARCHAR)+'^'+CAST(T.BRANCHCODE AS VARCHAR)+'^'+CAST(T.BRANCHNAME AS VARCHAR)+'^'+CAST(T.AMOUNT AS VARCHAR)   
      END AS TEXTFILE  FROM  @FINAL T  
  UNION ALL  
  SELECT 'TOTAL '+ CAST(SUM(TT.AMOUNT) AS VARCHAR) AS TEXTFILE FROM  @FINAL TT  
  ) FINAL  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_Get80CDetails')
DROP PROCEDURE USP_TDS_Get80CDetails
GO
CREATE PROCEDURE USP_TDS_Get80CDetails 
@DEDUCTEEID INT,
@CVIA80CDETID INT
AS
  BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX); 
	SET @SQLQUERY = 'SELECT C80CDET.CVIA80CDETID,C80.C80CDESC, C80CDET.C80CID, ISNULL(GROSS,0)GROSS, ISNULL(QUALIFYING,0)QUALIFYING,ISNULL(DEDUCTIBLE,0)DEDUCTIBLE
						FROM CVIA80CDET C80CDET WITH(NOLOCK)
						INNER JOIN  CVIA80C C80 WITH(NOLOCK) ON C80.C80CID = C80CDET.C80CID
						INNER JOIN CHAPTERVIADETAIL CVIA WITH(NOLOCK) ON C80CDET.CHAPTERVIADETID = CVIA.CHAPTERVIADETAILID
						INNER JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.SALARYDETAILID = CVIA.SALARYDETAILID
						WHERE SD.DEDUCTEEID = ' + CAST(@DEDUCTEEID AS VARCHAR)
	IF(@CVIA80CDETID <> -1)
		SET @SQLQUERY = @SQLQUERY + ' AND C80CDET.CVIA80CDETID = ' + CAST(@CVIA80CDETID AS VARCHAR)
	EXEC SP_EXECUTESQL @SQLQUERY 
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_Get80CPDFDetails')
DROP PROCEDURE USP_TDS_Get80CPDFDetails
GO
CREATE PROCEDURE [USP_TDS_Get80CPDFDetails] 
    @BRANCHID INT,        
    @COMIDS NVARCHAR(MAX)              
AS       
    BEGIN      
	   SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED              
	   SET NOCOUNT ON         
	   DECLARE @CVIADET TABLE(COMID INT, DESCR VARCHAR(100), GROSS NUMERIC(13,2), QUALIFYING NUMERIC(13,2));      
	   SELECT * INTO #COM FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')            
	   SELECT COMID, CVIA.C80CDESC, NETAMT GROSS, NETAMT QUALIFYING 
	   FROM 
	   ( 
		  SELECT SD.COMID, SH.C80CID, SUM(SD.NETAMT) NETAMT 
		  FROM SALDETAIL SD WITH(NOLOCK)
			 INNER JOIN #COM C ON SD.COMID = C.DATA 
			 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID 
			 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID 
			 INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID 
					   AND EM.MONTHID = SD.MONTHID 
					   AND EM.BRANCHID = LC.BRANCHID  
		  WHERE ISNULL(INCLUDEINTAX, 0) = 1 
			 AND ISNULL(SH.C80CID, -1) > 0 
		  GROUP BY SH.C80CID, SD.COMID
	   ) TT
	   INNER JOIN CVIA80C CVIA ON CVIA.C80CID = TT.C80CID 
	   UNION
	   SELECT CDET.COMID, CVIA.C80CDESC, CVIA80.GROSS, CVIA80.QUALIFYING 
	   FROM CVIA80CDET CVIA80 WITH(NOLOCK)
		  INNER JOIN CHAPTERVIADET CDET WITH(NOLOCK) ON CDET.CHAPTERVIADETAILID = CVIA80.CHAPTERVIADETID
		  INNER JOIN #COM C ON CDET.COMID = C.DATA 
		  INNER JOIN CVIA80C CVIA WITH(NOLOCK) ON CVIA.C80CID = CVIA80.C80CID 
	   WHERE ISORIGINAL = 1 
	   UNION
	   SELECT O.COMID, 'INTEREST ON NSC' AS C80CDESC, OS.AMOUNT AS GROSS, OS.AMOUNT AS QUALIFYING 
	   FROM OTHERINCOME O WITH(NOLOCK)      
		  INNER JOIN OTHERINCOMESOURCES OS WITH(NOLOCK) ON O.OTHERINCOMEID = OS.OTHERINCOMEID      
		  INNER JOIN #COM C ON C.DATA = O.COMID      
	   WHERE OS.SOURCEID = 2       
	   SET NOCOUNT OFF      
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GET80CSECTIONPARICULARS')
DROP PROCEDURE USP_TDS_GET80CSECTIONPARICULARS
GO
CREATE PROCEDURE [USP_TDS_GET80CSECTIONPARICULARS]
AS
BEGIN
	SELECT * FROM CVIA80C WITH(NOLOCK);
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETACCESSFEATURES')
DROP PROCEDURE USP_TDS_GETACCESSFEATURES
GO
CREATE PROCEDURE [USP_TDS_GETACCESSFEATURES]  
AS  
SELECT * FROM FEATURE WITH(NOLOCK)
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETACCOMODATION')
DROP PROCEDURE USP_TDS_GETACCOMODATION
GO
CREATE PROCEDURE [USP_TDS_GETACCOMODATION]
@COMID INT
AS
  BEGIN
	DECLARE @TAXABLEPERKID INT;
	SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK) WHERE COMID = @COMID AND PERKID = 1;
	SELECT PERKACCUNFURNISHED, PERKFURNISHEDVALUE, COSTOFFURNITURE, FURNITURERENTALS, PERQVALUEOFFURNITURE,
             PERKFURNISHEDTOTAL, RENTPAIDBYEMP, VALUEOFPERQUISITES FROM ACCOMODATION WITH (NOLOCK) WHERE TAXABLEPERKID = @TAXABLEPERKID;
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETACKDETAILS')
DROP PROCEDURE USP_TDS_GETACKDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETACKDETAILS]  
@BRANCHID INT  
AS  
 BEGIN  
  SELECT FORMID, QUARTER, ORGNUM, ACKID FROM ACKNO WITH(NOLOCK) WHERE BRANCHID = @BRANCHID  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETACKNO')
DROP PROCEDURE USP_TDS_GETACKNO
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETACKNO]
	@FORMID INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT ACKID,ORGNUM,ORGFILEDDATE,[QUARTER],ERETURNGENDATE,ISVALID
		FROM   ACKNO WITH(NOLOCK)
		WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETACKNOWLEDGEMENTDETAIL')
DROP PROCEDURE USP_TDS_GETACKNOWLEDGEMENTDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETACKNOWLEDGEMENTDETAIL]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
   SELECT ACKID, ORGNUM, ORGFILEDDATE, QUARTER, ERETURNGENDATE, ISVALID, RECEIPTNO, ISNULL(ISUPLOADED,0) ISUPLOADED, ISNILLRETURN, ISNULL(ISREQACTIVE,0)ISREQACTIVE FROM ACKNO WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETACKNOWLEDGEMENTDETAILS')
DROP PROCEDURE USP_TDS_GETACKNOWLEDGEMENTDETAILS
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETACKNOWLEDGEMENTDETAILS]
	@FORMID INT,
	@BRANCHID INT
AS
BEGIN
	SELECT ACKID,ORGNUM,ORGFILEDDATE,[QUARTER],ERETURNGENDATE,ISVALID,ISNILLRETURN,RECEIPTNO,ISUPLOADED, ISNULL(ISREQACTIVE,0)ISREQACTIVE FROM ACKNO WITH(NOLOCK) WHERE FORMID=@FORMID AND BRANCHID=@BRANCHID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAcknowledgementNoForCorr')
DROP PROCEDURE USP_TDS_GetAcknowledgementNoForCorr
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAcknowledgementNoForCorr]
@BRANCHID INT,
@FORMID SMALLINT,
@QUARTER SMALLINT
AS
BEGIN
	SELECT ACKID,BRANCHID,FORMID,QUARTER,ORGNUM,ORGFILEDDATE,ISVALID,
		ISNULL(ISUPLOADED,0) AS ISUPLOADED,ISNULL(ISREQACTIVE,0) AS ISREQACTIVE
	FROM ACKNO WITH(NOLOCK) 
	WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETACKNOWLEGEMENTDETAILFORPDF')
DROP PROCEDURE USP_TDS_GETACKNOWLEGEMENTDETAILFORPDF
GO
CREATE PROCEDURE [USP_TDS_GETACKNOWLEGEMENTDETAILFORPDF]
				@BRANCHID INT,
				@FORMID SMALLINT
AS
BEGIN
	DECLARE @QUARTER SMALLINT
	SET @QUARTER =1
	WHILE (@QUARTER<=4)
		BEGIN
			DECLARE @TABLE TABLE(ID INT IDENTITY(1,1),ACKID INT,BRANCHID INT,FORMID INT,QUARTER INT,ORGNUM VARCHAR(15),
													FILEDDATE SMALLDATETIME,RECEIPTNO VARCHAR(8))
			DECLARE @ACKID INT,@COUNT INT
			SET @ACKID =-1
			SET @COUNT =0
			SELECT @ACKID=ANO.ACKID,@COUNT=COUNT(ANO.ACKID) FROM ACKNO ANO WITH(NOLOCK)
																 LEFT JOIN ACKNOREV ANRN WITH(NOLOCK)
															  ON ANO.ACKID=ANRN.ACKID
														   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
														GROUP BY ANO.ACKID
			IF(@COUNT>0)
			  BEGIN
				  INSERT INTO @TABLE
				  SELECT TOP 1 ANO.ACKID,ANO.BRANCHID,ANO.FORMID,ANO.QUARTER,
										ANRN.REVISENUMBER,ANRN.REVFILEDDATE,
								   ISNULL(ANO.RECEIPTNO,'') FROM ACKNO ANO WITH(NOLOCK)
																 LEFT JOIN ACKNOREV ANRN WITH(NOLOCK)
															  ON ANO.ACKID=ANRN.ACKID
														   WHERE ANO.ACKID=@ACKID
														ORDER BY ANRN.REVFILEDDATE DESC
			  END
			ELSE
			BEGIN
				  INSERT INTO @TABLE
				  SELECT ACKID,BRANCHID,FORMID,QUARTER,ORGNUM,ORGFILEDDATE,ISNULL(RECEIPTNO,'') FROM ACKNO WITH(NOLOCK) WHERE ACKID=@ACKID
			END
			SET @QUARTER=@QUARTER+1
		END
	SELECT ACKID,BRANCHID,FORMID,QUARTER,ACKID,ORGNUM,FILEDDATE,RECEIPTNO FROM @TABLE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETACTIVEMONTHID')
DROP PROCEDURE USP_TDS_GETACTIVEMONTHID
GO
CREATE PROCEDURE USP_TDS_GETACTIVEMONTHID  
@BRANCHID INT  
AS  
BEGIN  
 SELECT MONTHID FROM IMPORTSTATUS WITH(NOLOCK)  
 WHERE ISREQACTIVE = 1 AND BRANCHID = @BRANCHID  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetActual80CValues')
DROP PROCEDURE USP_TDS_GetActual80CValues
GO
CREATE PROCEDURE USP_TDS_GetActual80CValues
@COMID INT,
@BRANCHID INT
AS
  BEGIN
	SELECT CVIA.C80CID, CVIA.GROSS,CVIA.QUALIFYING, 1 AS ISORIGINAL 
	INTO #CVIA
	FROM CVIA80CDET CVIA WITH(NOLOCK) 
	INNER JOIN CHAPTERVIADET CDET WITH(NOLOCK) ON CVIA.CHAPTERVIADETID = CDET.CHAPTERVIADETAILID
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = CDET.COMID
	WHERE  CDET.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND (CVIA.GROSS > 0 OR CVIA.QUALIFYING > 0) AND ISORIGINAL = 1
	SELECT ISNULL(C80CID, -1) AS C80CID, SUM(NETAMT)NETAMT,SUM(NETAMT)NETAMT, 0 AS ISORIGINAL  FROM SALDETAIL SD
	INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID AND LC.COMID = EM.COMID
	WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND ISNULL(C80CID, -1) > 0 AND ISNULL(SH.INCLUDEINTAX,0) = 1 
	GROUP BY ISNULL(C80CID, -1)
	UNION ALL
	SELECT 15 AS C80CID, OS.AMOUNT, OS.AMOUNT, 0 AS ISORIGINAL FROM OTHERINCOME O
	INNER JOIN OTHERINCOMESOURCES OS WITH(NOLOCK) ON O.OTHERINCOMEID = OS.OTHERINCOMEID
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = O.COMID
	WHERE O.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND OS.SOURCEID = 2
	UNION ALL
	SELECT C80CID , GROSS ,QUALIFYING,ISORIGINAL FROM #CVIA
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLACKNO')
DROP PROCEDURE USP_TDS_GETALLACKNO
GO
CREATE PROCEDURE USP_TDS_GETALLACKNO
@RECORDTYPE INT
AS 
BEGIN
	IF(@RECORDTYPE = 1)
		BEGIN
			SELECT CAST(ISNULL(BRANCHID,'') AS VARCHAR)  
				+ '^' + CAST(ISNULL(FORMID,'') AS VARCHAR) 
				+ '^' + CAST(ISNULL(QUARTER,'') AS VARCHAR) AS BRANCHID,
				CAST(ISNULL(ORGNUM,'') AS VARCHAR) AS ORGNUM  
			FROM ACKNO 
			WHERE ORGNUM <> '' 
		END
	IF(@RECORDTYPE = 2)
		BEGIN
			SELECT CAST(ISNULL(BRANCHID,'') AS VARCHAR)  
				+ '^' + CAST(ISNULL(FORMID,'') AS VARCHAR) 
				+ '^' + CAST(ISNULL(QUARTER,'') AS VARCHAR) AS BRANCHID,
				CAST(ISNULL(RECEIPTNO,'') AS VARCHAR) AS ORGNUM
			FROM ACKNO 
			WHERE RECEIPTNO <> ''
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllBankAuditPaged')
DROP PROCEDURE USP_TDS_GetAllBankAuditPaged
GO
CREATE PROCEDURE [USP_TDS_GetAllBankAuditPaged]                  
(                  
 @STARTROW INT,                                              
 @PAGESIZE INT,
 @BRANCHID INT,       
 @BRANCHNAME VARCHAR(75),                  
 @BRANCHCODE VARCHAR(7),                  
 @BANKNAME VARCHAR(75),                  
 @BSRCODE VARCHAR(7)                    
)                  
AS                  
BEGIN                  
    SET NOCOUNT ON                  
    DECLARE @FIRSTREC INT, @LASTREC INT                                  
    SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                          
    SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);                    
    DECLARE @QUERY NVARCHAR(MAX)                          
    SET @QUERY = 'SELECT  RowNum = IDENTITY(INT,1,1), C.BRANCHNAME+'' ''+C.BRANCHCODE BRANCH,1 AS TRANSSTATUS,A.AUDITTYPE,A.AUDITDATE,A.AUDITREMARKS,U.USERNAME AS EDITEDBY                   
  INTO  #TEMP                   
  FROM REMITTINGBANKAUDIT A WITH(NOLOCK)                 
  INNER  JOIN USERMASTER U   WITH(NOLOCK)                
   ON U.USERID=A.USERID                  
  INNER JOIN COMPANYBRANCH C  WITH(NOLOCK)                 
   ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS))  WHERE A.AUDITREMARKS<>'''' AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''                  
  IF(@BRANCHNAME<>'')                  
  BEGIN                  
   SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';                     
  END                  
  IF(@BRANCHCODE<>'')                  
  BEGIN                  
   SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';                     
  END     
    IF(@BANKNAME<>'')                  
  BEGIN                  
   SET @QUERY = @QUERY +' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',2)) LIKE ''%' + @BANKNAME + '%''';               
  END   
  IF(@BSRCODE<>'')                  
  BEGIN                  
   SET @QUERY = @QUERY +' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',3)) LIKE ''%' + @BSRCODE + '%''';                    
  END   
     SET @QUERY = @QUERY +  ';SELECT BRANCH,TRANSSTATUS,AUDITTYPE,AUDITDATE,AUDITREMARKS,EDITEDBY FROM #TEMP WHERE RowNum > ' + CAST(@FirstRec as varchar(10)) + ' AND RowNum < ' + CAST(@LastRec as varchar(10)) + ' ORDER BY BRANCH';                            -- PRINT @QUERY                  
     EXEC SP_EXECUTESQL @QUERY;                   
     SET NOCOUNT OFF                        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLBANKAUDITPAGEDCOUNT')
DROP PROCEDURE USP_TDS_GETALLBANKAUDITPAGEDCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETALLBANKAUDITPAGEDCOUNT]            
(
 @BRANCHID INT,                    
 @BRANCHNAME VARCHAR(75),                
 @BRANCHCODE VARCHAR(7),                
 @BANKNAME VARCHAR(75),                
 @BSRCODE VARCHAR(7)            
)            
AS            
BEGIN            
    SET NOCOUNT ON                         
    DECLARE @QUERY NVARCHAR(MAX)                    
    SET @QUERY = 'SELECT COUNT(A.AUDITID)  
  FROM REMITTINGBANKAUDIT A  WITH(NOLOCK)          
  INNER  JOIN USERMASTER U  WITH(NOLOCK)          
   ON U.USERID=A.USERID            
  INNER JOIN COMPANYBRANCH C WITH(NOLOCK)           
   ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS))  WHERE A.AUDITREMARKS<>'''' AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''            
  IF(@BRANCHNAME<>'')            
  BEGIN            
   SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';               
  END            
  IF(@BRANCHCODE<>'')            
  BEGIN            
   SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';               
  END 
     IF(@BANKNAME<>'')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',2)) LIKE ''%' + @BANKNAME + '%''';             
  END 
  IF(@BSRCODE<>'')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',3)) LIKE ''%' + @BSRCODE + '%''';                  
  END                          
    -- PRINT @QUERY            
     EXEC SP_EXECUTESQL @QUERY;             
     SET NOCOUNT OFF                  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLBANKCOUNTRYCODE')
DROP PROCEDURE USP_TDS_GETALLBANKCOUNTRYCODE
GO
CREATE PROCEDURE [USP_TDS_GETALLBANKCOUNTRYCODE]  
AS  
BEGIN  
 SELECT  BANKCOUNTRYID,COUNTRYID,BANKCOUNTRYCODE,BANKCOUNTRYNAME FROM BANKCOUNTRYCODE WITH(NOLOCK)     
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLBANKSTATECODE')
DROP PROCEDURE USP_TDS_GETALLBANKSTATECODE
GO
CREATE PROCEDURE [USP_TDS_GETALLBANKSTATECODE]  
AS  
BEGIN  
 SELECT BANKSTATEID,STATEID,BANKSTATECODE,BANKSTATENAME FROM BANKSTATECODE WITH(NOLOCK)     
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLBRANCHAUDITPAGED')
DROP PROCEDURE USP_TDS_GETALLBRANCHAUDITPAGED
GO
--[USP_TDS_GETALLBRANCHAUDITPAGED] 1,20,'',''              
CREATE PROCEDURE [USP_TDS_GETALLBRANCHAUDITPAGED]                        
(                        
 @STARTROW INT,                                                    
 @PAGESIZE INT,
 @BRANCHID INT,                         
 @BRANCHNAME VARCHAR(75),                        
 @BRANCHCODE VARCHAR(7)                           
)                        
AS                        
BEGIN                        
    SET NOCOUNT ON                        
    DECLARE @FIRSTREC INT, @LASTREC INT                                        
    SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                                
    SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);                          
    DECLARE @QUERY NVARCHAR(MAX)                                
    SET @QUERY = 'SELECT  ROWNUM = IDENTITY(INT,1,1), C.BRANCHNAME+'' ''+C.BRANCHCODE BRANCH,1 AS TRANSSTATUS,A.AUDITTYPE,A.AUDITDATE,(A.AUDITREMARKS + ''^'' +C3.BRANCHNAME +''^''+ C3.BRANCHCODE)AUDITREMARKS ,U.USERNAME AS EDITEDBY                          INTO  #TEMP                         
  FROM COMPANYBRANCHAUDIT A  WITH(NOLOCK)                      
  INNER  JOIN USERMASTER U   WITH(NOLOCK)                     
   ON U.USERID=A.USERID                        
  INNER JOIN COMPANYBRANCH C  WITH(NOLOCK)                    
   ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS))                
   LEFT JOIN              
 (SELECT C1.PARENTBRANCHID, C2.BRANCHNAME, C2.BRANCHCODE FROM COMPANYBRANCH C1 WITH(NOLOCK)               
 INNER JOIN COMPANYBRANCH C2 WITH(NOLOCK) ON C1.PARENTBRANCHID = C2.BRANCHID              
 UNION               
 SELECT 0 AS PARENTBRANCHID, BRANCHNAME, BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = 1              
 )              
 C3 ON C3.PARENTBRANCHID = (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS+''^'',''^'',4))              
   WHERE ISNULL(A.AUDITREMARKS,'''')<>'''' AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''                        
  IF(@BRANCHNAME<>'')                        
  BEGIN                        
   SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';                           
  END                        
  IF(@BRANCHCODE<>'')                        
  BEGIN                        
   SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';                           
  END                        
     SET @QUERY = @QUERY +  ';SELECT BRANCH,TRANSSTATUS,AUDITTYPE,AUDITDATE,AUDITREMARKS,EDITEDBY FROM #TEMP WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10)) + ' AND ISNULL(AUDITREMARKS,'''')<>'''' ORDER BY BRANCH';                          
     --PRINT @QUERY                        
     EXEC SP_EXECUTESQL @QUERY;                         
     SET NOCOUNT OFF                              
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllBranchAuditPagedCount')
DROP PROCEDURE USP_TDS_GetAllBranchAuditPagedCount
GO
CREATE PROCEDURE [USP_TDS_GetAllBranchAuditPagedCount]      
(
 @BRANCHID INT,          
 @BRANCHNAME VARCHAR(75),      
 @BRANCHCODE VARCHAR(7)         
)      
AS      
BEGIN      
    SET NOCOUNT ON            
    DECLARE @QUERY NVARCHAR(MAX)              
    SET @QUERY = 'SELECT  COUNT(A.AUDITID)  
  FROM COMPANYBRANCHAUDIT A   WITH(NOLOCK)   
  INNER  JOIN USERMASTER U    WITH(NOLOCK) 
   ON U.USERID=A.USERID      
  INNER JOIN COMPANYBRANCH C  WITH(NOLOCK)    
   ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS))  WHERE A.AUDITREMARKS<>'''' AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''     
  IF(@BRANCHNAME<>'')      
  BEGIN      
   SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';         
  END      
  IF(@BRANCHCODE<>'')      
  BEGIN      
   SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';         
  END      
     --PRINT @QUERY           
     EXEC SP_EXECUTESQL @QUERY;       
     SET NOCOUNT OFF            
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLBRANCHCODESHAVINGDEDUCTORS')
DROP PROCEDURE USP_TDS_GETALLBRANCHCODESHAVINGDEDUCTORS
GO
CREATE PROCEDURE USP_TDS_GETALLBRANCHCODESHAVINGDEDUCTORS
AS
BEGIN
	SELECT CB.BRANCHCODE FROM COMPANYBRANCH CB WITH(NOLOCK) 
	INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID
	INNER JOIN DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID
	INNER JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON RP.DEDUCTORID = D.DEDUCTORID
	GROUP BY CB.BRANCHCODE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLBRANCHES')
DROP PROCEDURE USP_TDS_GETALLBRANCHES
GO
CREATE PROCEDURE [USP_TDS_GETALLBRANCHES]
AS
 BEGIN
	SELECT BRANCHNAME + ' ('+ BRANCHCODE + ')' AS BRANCH, BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllChallanAuditPaged')
DROP PROCEDURE USP_TDS_GetAllChallanAuditPaged
GO
CREATE PROC [dbo].[USP_TDS_GetAllChallanAuditPaged]            
(            
 @STARTROW INT,                                        
 @PAGESIZE INT,
 @BRANCHID INT,             
 @BRANCHNAME VARCHAR(75),            
 @BRANCHCODE VARCHAR(7),            
 @FORMID  SMALLINT,            
 @QUARTER SMALLINT,            
 @CHALLANTOTALFROM NUMERIC(13,2),            
 @CHALLANTOTALTO NUMERIC(13,2),            
 @CHALLANPAIDDDATEFROM SMALLDATETIME=NULL,            
 @CHALLANPAIDDDATETO SMALLDATETIME=NULL,            
 @SECTIONID INT,
 @CHALLANNO VARCHAR(9)            
)            
AS            
BEGIN            
    SET NOCOUNT ON            
    DECLARE @FIRSTREC INT, @LASTREC INT                            
    SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                    
    SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);              
    DECLARE @QUERY NVARCHAR(MAX)                    
    SET @QUERY = 'SELECT  RowNum = IDENTITY(INT,1,1), C.BRANCHNAME+'' ''+C.BRANCHCODE BRANCH,1 AS TRANSSTATUS,
						A.AUDITTYPE,A.AUDITDATE,A.AUDITREMARKS,U.USERNAME AS EDITEDBY             
				  INTO  #TEMP             
				  FROM CHALLANDETAILAUDIT A WITH(NOLOCK)           
						INNER  JOIN USERMASTER U  WITH(NOLOCK)        
							ON U.USERID=A.USERID            
					    INNER JOIN COMPANYBRANCH C  WITH(NOLOCK)        
				            ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS))  
				  WHERE A.AUDITREMARKS<>'''' AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''                     
	IF(@BRANCHNAME<>'')            
		BEGIN            
			SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';               
		END            
		IF(@BRANCHCODE<>'')            
		BEGIN            
			SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';               
		END            
	IF(@FORMID<>-1)            
		BEGIN            
			SET @QUERY = @QUERY +' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',2))=' + CAST(@FORMID AS VARCHAR);               
		END            
	IF(@QUARTER<>-1)            
		BEGIN            
			SET @QUERY = @QUERY +' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',3))=' + CAST(@QUARTER AS VARCHAR);               
		END                  
	IF(@CHALLANTOTALFROM<> 0 OR @CHALLANTOTALTO<>0)            
		BEGIN            
			SET @QUERY = @QUERY + ' AND CONVERT(NUMERIC(15,2), (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',4)),1) BETWEEN ' + CAST(@CHALLANTOTALFROM AS VARCHAR(20)) + ' AND ' + CAST(@CHALLANTOTALTO AS VARCHAR(20))+'';               
		END            
     IF(@CHALLANPAIDDDATEFROM IS NOT NULL AND @CHALLANPAIDDDATETO IS NOT NULL)            
     BEGIN             
        SET @QUERY = @QUERY + ' AND  (CONVERT(SMALLDATETIME,SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',7)), 4,2)+''/''+SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',7)), 1,2)+''/''+  
        SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',7)), 7,4),101)) BETWEEN '''     
        + CAST(@CHALLANPAIDDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@CHALLANPAIDDDATETO AS VARCHAR) + '''';                
     END                
     IF(@SECTIONID<>-1)              
     BEGIN              
       SET @QUERY = @QUERY + ' AND  (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',5)) = '+CAST(@SECTIONID AS VARCHAR)              
     END 
     IF(@CHALLANNO<>'')
     BEGIN
        SET @QUERY = @QUERY +' AND ((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',6)) LIKE  ''%' + @CHALLANNO + '%'' OR (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',8)) LIKE ''%' + @CHALLANNO + '%'')'       
     END          
     SET @QUERY = @QUERY +  ';SELECT BRANCH,TRANSSTATUS,AUDITTYPE,AUDITDATE,AUDITREMARKS,EDITEDBY FROM #TEMP WHERE RowNum > ' + CAST(@FirstRec as varchar(10)) + ' AND RowNum < ' + CAST(@LastRec as varchar(10)) + ' ORDER BY BRANCH';                      
    --PRINT @QUERY            
    EXEC SP_EXECUTESQL @QUERY;             
    SET NOCOUNT OFF                  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLCHALLANAUDITPAGEDCOUNT')
DROP PROCEDURE USP_TDS_GETALLCHALLANAUDITPAGEDCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETALLCHALLANAUDITPAGEDCOUNT]        
(
 @BRANCHID INT,             
 @BRANCHNAME VARCHAR(75),        
 @BRANCHCODE VARCHAR(7),        
 @FORMID  SMALLINT,        
 @QUARTER SMALLINT,        
 @CHALLANTOTALFROM NUMERIC(13,2),        
 @CHALLANTOTALTO NUMERIC(13,2),        
 @CHALLANPAIDDDATEFROM SMALLDATETIME=NULL,        
 @CHALLANPAIDDDATETO SMALLDATETIME=NULL,        
 @SECTIONID INT,
 @CHALLANNO VARCHAR(9)          
)        
AS        
BEGIN        
    SET NOCOUNT ON              
    DECLARE @QUERY NVARCHAR(MAX)                
    SET @QUERY = 'SELECT  COUNT(A.AUDITID)    
  FROM CHALLANDETAILAUDIT A WITH(NOLOCK)       
  INNER  JOIN USERMASTER U  WITH(NOLOCK)     
   ON U.USERID=A.USERID        
  INNER JOIN COMPANYBRANCH C WITH(NOLOCK)     
   ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS))  WHERE A.AUDITREMARKS<>'''' AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''        
  IF(@BRANCHNAME<>'')        
  BEGIN        
   SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';           
  END        
  IF(@BRANCHCODE<>'')        
  BEGIN        
   SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';           
  END        
  IF(@FORMID<>-1)        
  BEGIN        
    SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',2))=' + CAST(@FORMID AS VARCHAR);           
  END        
  IF(@QUARTER<>-1)        
  BEGIN        
    SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',3))=' + CAST(@QUARTER AS VARCHAR);           
  END              
     IF(@CHALLANTOTALFROM<> 0 OR @CHALLANTOTALTO<>0)            
     BEGIN            
      SET @QUERY = @QUERY + ' AND CONVERT(NUMERIC(15,2), (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',4)),1) BETWEEN ' + CAST(@CHALLANTOTALFROM AS VARCHAR(20)) + ' AND ' + CAST(@CHALLANTOTALTO AS VARCHAR(20))+'';               
     END            
     IF(@CHALLANPAIDDDATEFROM IS NOT NULL AND @CHALLANPAIDDDATETO IS NOT NULL)            
     BEGIN             
        SET @QUERY = @QUERY + ' AND  (CONVERT(SMALLDATETIME,SUBSTRING((SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',7)), 4,2)+''/''+SUBSTRING((SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',7)), 1,2)+''/''+  
        SUBSTRING((SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',7)), 7,4),101)) BETWEEN '''     
        + CAST(@CHALLANPAIDDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@CHALLANPAIDDDATETO AS VARCHAR) + '''';                
     END           
     IF(@SECTIONID<>-1)          
     BEGIN          
       SET @QUERY = @QUERY + ' AND  (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',5)) = '+CAST(@SECTIONID AS VARCHAR)          
     END  
      IF(@CHALLANNO<>'')
     BEGIN
        SET @QUERY = @QUERY +' AND ((SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',6)) LIKE  ''%' + @CHALLANNO + '%'' OR (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',8)) LIKE ''%' + @CHALLANNO + '%'')'       
     END               
     --PRINT @QUERY             
     EXEC SP_EXECUTESQL @QUERY;         
     SET NOCOUNT OFF              
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLCHALLANIDS')
DROP PROCEDURE USP_TDS_GETALLCHALLANIDS
GO
CREATE PROCEDURE [USP_TDS_GETALLCHALLANIDS]
AS
SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE ISAUTOGENERATED=1 AND ISOLTASINCLUDED=1
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLCHALLANS')
DROP PROCEDURE USP_TDS_GETALLCHALLANS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETALLCHALLANS]
 @STARTROW INT,                
 @PAGESIZE INT,                
 @BRANCHID INT,                
 @FORMID INT,                
 @SECTIONID INT = -1,                
 @QUARTER INT = -1,      
 @ISLINKED INT = -1      
AS                
 BEGIN                  
  SET NOCOUNT ON                
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */                  
  DECLARE @FIRSTREC INT, @LASTREC INT      
  DECLARE @RESULTTABLE TABLE(ID INT IDENTITY(1,1),CHALLANID INT,QUARTER INT,SERIALNO INT,SECTIONNAME VARCHAR(10),INCOMETAX NUMERIC(13,2),
	SURCHARGE NUMERIC(13,2),EDUCATIONCESS NUMERIC(13,2),CHALLANTOTAL NUMERIC(13,2),BANKCHALLANNO VARCHAR(5),CHALLANPAIDDATE SMALLDATETIME,
	CHEQUENO VARCHAR(15),CHEQUEDATE SMALLDATETIME,BSRCODE VARCHAR(7),DEDAMNT NUMERIC(13,2), ISLINKED BIT)                
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);                
  DECLARE @SQLQUERY NVARCHAR(MAX);
  SELECT CHALLANID, QUARTER, SERIALNO, FORMID, INCOMETAX, SURCHARGE, EDUCATIONCESS, CHALLANTOTAL, BANKCHALLANNO, CHALLANPAIDDATE, 
		CHEQUENO, CHEQUEDATE, SECTIONID, BRANCHID, BANKID
  INTO #CHALLANDETAIL
  FROM CHALLANDETAIL WITH(NOLOCK)
  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID
  SELECT DEDUCTIONID, BRANCHID, INCOMETAX, SURCHARGE, EDUCATIONCESS
  INTO #DEDUCTIONDETAIL
  FROM DEDUCTIONDETAIL WITH(NOLOCK)
  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID
  SELECT CHALLANID, BRANCHID, DEDUCTIONID
  INTO #DEDCHALINK
  FROM DEDCHALINK WITH(NOLOCK)
  WHERE BRANCHID = @BRANCHID AND DEDUCTIONID IN (SELECT DEDUCTIONID FROM #DEDUCTIONDETAIL)
  SET @SQLQUERY='SELECT DISTINCT CD.CHALLANID,CD.[QUARTER], CD.SERIALNO,      
    CASE       
		WHEN CD.FORMID = 1 THEN TS.SECTIONNAME + '' (''+ TS.TAXNAME + '')''       
        ELSE TS.SECTIONNAME       
    END AS SECTIONNAME,                
    CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CD.CHALLANTOTAL,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,                
    CASE       
		WHEN CD.CHEQUENO = ''0'' THEN ''''       
		ELSE CD.CHEQUENO       
	END AS CHEQUENO,
    CD.CHEQUEDATE,RB.BSRCODE,C.DEDAMT, CASE WHEN C.DEDAMT IS NULL THEN 0 ELSE 1 END AS ISLINKED           
	FROM #CHALLANDETAIL CD 
    INNER JOIN TAXSECTIONS TS ON CD.SECTIONID=TS.SECTIONID       
    LEFT JOIN      
      (      
        SELECT (SUM(INCOMETAX) + SUM(SURCHARGE) + SUM(EDUCATIONCESS))DEDAMT , DL.CHALLANID FROM #DEDUCTIONDETAIL DD      
        INNER JOIN #DEDCHALINK DL ON  DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID       
        GROUP BY DL.CHALLANID      
       )C ON C.CHALLANID = CD.CHALLANID      
	LEFT JOIN #DEDCHALINK DL ON CD.CHALLANID = DL.CHALLANID AND CD.BRANCHID = DL.BRANCHID      
    LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID=RB.BANKID
    WHERE CD.BRANCHID='+CAST(@BRANCHID AS VARCHAR(10)) + ' AND CD.FORMID='+CAST(@FORMID AS VARCHAR(2))      
  IF(@SECTIONID<>-1)      
	BEGIN                
		SET @SQLQUERY=@SQLQUERY+' AND CD.SECTIONID='+CAST(@SECTIONID AS VARCHAR(2));                
	END                    
  IF(@QUARTER<>-1)                
	BEGIN                
		SET @SQLQUERY=@SQLQUERY+' AND CD.[QUARTER]='+CAST(@QUARTER AS VARCHAR(2));                
	END                
  IF(@ISLINKED = 1)      
	BEGIN      
		SET @SQLQUERY=@SQLQUERY+' AND DL.CHALLANID IS NOT NULL'      
	END      
  IF(@ISLINKED = 0)      
	BEGIN      
		SET @SQLQUERY=@SQLQUERY+' AND DL.CHALLANID IS NULL'      
	END      
  INSERT INTO @RESULTTABLE       
  EXEC SP_EXECUTESQL @SQLQUERY                
  SELECT TOP (@LASTREC-1) *                
  FROM @RESULTTABLE                
  WHERE ID > @FIRSTREC                 
  AND ID < @LASTREC                
  /* TURN NOCOUNT BACK OFF */                
  SET NOCOUNT OFF
  IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
		DROP TABLE #DEDUCTIONDETAIL                   
  IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
		DROP TABLE #DEDCHALINK 
  IF OBJECT_ID('TEMPDB..#CHALLANDETAIL') IS NOT NULL
		DROP TABLE #CHALLANDETAIL 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLCHALLANSCOUNT')
DROP PROCEDURE USP_TDS_GETALLCHALLANSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETALLCHALLANSCOUNT]    
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @SECTIONID INT,  
 @ISLINKED INT = -1    
AS    
 BEGIN    
  DECLARE @SQLQUERY NVARCHAR(MAX);    
  SET @SQLQUERY='SELECT COUNT(DISTINCT CD.CHALLANID) FROM CHALLANDETAIL CD  WITH(NOLOCK)
     LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID AND CD.BRANCHID = DL.BRANCHID  
     WHERE CD.BRANCHID='+CAST(@BRANCHID AS VARCHAR(10))+' AND FORMID='+CAST(@FORMID AS VARCHAR(2))
  IF(@QUARTER<>-1)    
   BEGIN    
    SET @SQLQUERY=@SQLQUERY+' AND [QUARTER]='+CAST(@QUARTER AS VARCHAR(2));  
   END    
  IF(@SECTIONID<>-1)    
   BEGIN    
    SET @SQLQUERY=@SQLQUERY+' AND SECTIONID='+CAST(@SECTIONID AS VARCHAR(2));    
   END    
  IF(@ISLINKED = 1)  
 BEGIN  
   SET @SQLQUERY=@SQLQUERY+' AND DL.CHALLANID IS NOT NULL'  
 END  
  IF(@ISLINKED = 0)  
 BEGIN  
   SET @SQLQUERY=@SQLQUERY+' AND DL.CHALLANID IS NULL'  
 END  
  EXECUTE SP_EXECUTESQL @SQLQUERY;        
  --PRINT @SQLQUERY  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLCHALLANSDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETALLCHALLANSDETAILSFORGRID
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETALLCHALLANSDETAILSFORGRID]   
 @BRANCHID INT,   
 @FORMID INT = -1,   
 @QUARTER INT = -1   
AS   
 BEGIN 
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
  DECLARE @SQLQUERY NVARCHAR(MAX);   
  SET @SQLQUERY = 'SELECT CD.FORMID, CD.QUARTER, CD.CHALLANID, CD.SERIALNO AS SLNO, TS.SECTIONNAME, 
					CD.INCOMETAX, CD.FEE,CD.SURCHARGE, CD.EDUCATIONCESS, CD.INTEREST, CD.PENALTY, CD.OTHERS, CD.CHALLANTOTAL, 
					CASE WHEN CD.BANKCHALLANNO='''' THEN CD.TRNVOUCHERNO ELSE CD.BANKCHALLANNO END AS BANKCHALLANNO, CD.CHALLANPAIDDATE, 
					CASE WHEN CD.BANKID<>0 THEN (SELECT BSRCODE FROM REMITTINGBANK WITH(NOLOCK) WHERE BANKID = CD.BANKID) ELSE CD.TVRECEIPTNUMBER END AS BSRCODE, 
					CD.CHEQUENO, CD.CHEQUEDATE, CD.CHEQUEDRAWNON, CD.TRANREFNO, CD.ISCOMPANY,  
					CASE WHEN CD.ISCOMPANY=1 THEN ''COMPANIES'' ELSE ''NON COMPANIES'' END AS CHADEDFROM,CD.REMARKS,CD.MINORHEAD 
					FROM (CHALLANDETAIL AS CD INNER JOIN TAXSECTIONS AS TS WITH(NOLOCK) ON CD.SECTIONID = TS.SECTIONID) 
					WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
  IF (@FORMID <> -1) 
   SET @SQLQUERY = @SQLQUERY + ' AND CD.FORMID = ' + CAST(@FORMID AS VARCHAR); 
  IF (@QUARTER <> -1) 
   SET @SQLQUERY = @SQLQUERY + ' AND CD.QUARTER = ' + CAST(@QUARTER AS VARCHAR); 
  SET @SQLQUERY = @SQLQUERY + ' ORDER BY CD.CHALLANID'; 
  EXECUTE SP_EXECUTESQL @SQLQUERY; 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLCHALLANSDETAILSFORLOOKUPEDIT')
DROP PROCEDURE USP_TDS_GETALLCHALLANSDETAILSFORLOOKUPEDIT
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETALLCHALLANSDETAILSFORLOOKUPEDIT]  
 @BRANCHID INT,  
 @FORMID INT = -1,  
 @QUARTER INT = -1,
 @SECID INT = -1
AS  
 BEGIN
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
  DECLARE @SQLQUERY NVARCHAR(MAX);  
  SET @SQLQUERY = 'SELECT CD.SERIALNO AS SLNO, TS.SECTIONID, TS.SECTIONNAME, CD.BANKCHALLANNO, CD.CHALLANPAIDDATE, CD.INTEREST, CD.CHALLANTOTAL, CD.CHALLANID
					FROM CHALLANDETAIL AS CD WITH(NOLOCK) INNER JOIN TAXSECTIONS AS TS WITH(NOLOCK) ON CD.SECTIONID = TS.SECTIONID
					WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
  IF (@FORMID <> -1)
   SET @SQLQUERY = @SQLQUERY + ' AND CD.FORMID = ' + CAST(@FORMID AS VARCHAR);
  IF (@QUARTER <> -1)
   SET @SQLQUERY = @SQLQUERY + ' AND CD.QUARTER = ' + CAST(@QUARTER AS VARCHAR);
  IF (@SECID <> -1)
   SET @SQLQUERY = @SQLQUERY + ' AND TS.SECTIONID = ' + CAST(@SECID AS VARCHAR);
  SET @SQLQUERY = @SQLQUERY + ' ORDER BY CD.CHALLANID';
  --PRINT @SQLQUERY
  EXECUTE SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLCOMPANYBRANCH')
DROP PROCEDURE USP_TDS_GETALLCOMPANYBRANCH
GO
CREATE PROCEDURE USP_TDS_GETALLCOMPANYBRANCH
AS
 BEGIN
	SELECT BRANCHCODE, BRANCHID FROM COMPANYBRANCH WITH(NOLOCK)
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLCORRCHALLAN')
DROP PROCEDURE USP_TDS_GETALLCORRCHALLAN
GO
CREATE PROCEDURE [USP_TDS_GETALLCORRCHALLAN]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
   SELECT ISNULL(CHALLANERETURNID, -1) CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID =@FORMID AND QUARTER = @QUARTER
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLCORREMPLOYEE')
DROP PROCEDURE USP_TDS_GETALLCORREMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_GETALLCORREMPLOYEE]
@BRANCHID INT  
AS  
 BEGIN  
  SELECT E.DEDUCTEESERIALNO, E.EMPLOYMENTFROM, E.EMPLOYMENTTO, E.ISSENIORCITIZEN, E.GENDER 
	FROM CORREMPLOYEE E WITH(NOLOCK)  
    WHERE E.BRANCHID = @BRANCHID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEDETAIL')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEDETAIL
GO
CREATE PROCEDURE USP_TDS_GETALLDEDUCTEDETAIL  
@BRANCHCODES NVARCHAR(MAX)  
AS  
 BEGIN  
 SELECT MAX(D.DEDUCTEEID)DEDUCTEEID,BRANCHCODE,REFERENCENO  FROM DEDUCTEE D WITH(NOLOCK)  
 LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID  
 WHERE BRANCHCODE IN (SELECT * FROM  DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')) AND ISNULL(REFERENCENO,'') <> ''  
 GROUP BY REFERENCENO , BRANCHCODE  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEE')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEE
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEE]
@BRANCHCODES NVARCHAR(MAX),      
@ISDEDUCTEE BIT      
AS        
 BEGIN
 SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')       
 DECLARE @QUERY NVARCHAR(MAX);      
 IF(@ISDEDUCTEE =1)      
  BEGIN      
   SET @QUERY=' SELECT T.DEDUCTEEID,BRANCHCODE, NAME AS DEDUCTEENAME, PAN, ISNULL(REFERENCENO,'''')REFERENCENO, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, STATEID, PINCODE  FROM
		     (
		      	 SELECT MAX(D.DEDUCTEEID) DEDUCTEEID,CB.BRANCHCODE
				 FROM DEDUCTEE D WITH(NOLOCK)         
				 INNER JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID        
				 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
				 INNER JOIN #BRANCHES B ON B.DATA=CB.BRANCHCODE
				 GROUP BY RTRIM(LTRIM(D.NAME)),D.PAN,CB.BRANCHCODE
			 )TT
             INNER JOIN
             (
              SELECT D.DEDUCTEEID, NAME, PAN,REFERENCENO,PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, STATEID, PINCODE FROM DEDUCTEE D WITH(NOLOCK)
              INNER JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID        
              INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
			  INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE           
             )T
             ON T.DEDUCTEEID = TT.DEDUCTEEID'        
     END      
 ELSE      
  BEGIN      
  SET @QUERY=' SELECT T.DEDUCTEEID,BRANCHCODE, NAME AS DEDUCTEENAME, PAN , ISNULL(REFERENCENO,'''')REFERENCENO, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, STATEID, PINCODE  FROM
		     (
		      	 SELECT MAX(D.DEDUCTEEID) DEDUCTEEID,CB.BRANCHCODE
				 FROM DEDUCTEE D WITH(NOLOCK)         
				 LEFT JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID        
				 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
				 INNER JOIN #BRANCHES B ON B.DATA=CB.BRANCHCODE
				 GROUP BY RTRIM(LTRIM(D.NAME)),D.PAN,CB.BRANCHCODE
			 )TT
             INNER JOIN
             (
              SELECT D.DEDUCTEEID, NAME, PAN,REFERENCENO,PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, STATEID, PINCODE FROM DEDUCTEE D WITH(NOLOCK)
              LEFT JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID        
              INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
			  INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE           
             )T
             ON T.DEDUCTEEID = TT.DEDUCTEEID'         
  END      
  EXEC SP_EXECUTESQL @QUERY;      
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEAUDITPAGED')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEAUDITPAGED
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEEAUDITPAGED]          
(          
 @STARTROW INT,                                      
 @PAGESIZE INT,
 @BRANCHID INT,           
 @BRANCHNAME VARCHAR(75),          
 @BRANCHCODE VARCHAR(7),          
 @NAME VARCHAR(75),    
 @PAN VARCHAR(10)    
)          
AS          
BEGIN          
    SET NOCOUNT ON          
    DECLARE @FIRSTREC INT, @LASTREC INT                          
    SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                  
    SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);            
    DECLARE @QUERY NVARCHAR(MAX)                  
    SET @QUERY = 'SELECT  ROWNUM = IDENTITY(INT,1,1), C.BRANCHNAME+'' ''+C.BRANCHCODE BRANCH,1 AS TRANSSTATUS,A.AUDITTYPE,A.AUDITDATE,A.AUDITREMARKS,U.USERNAME AS EDITEDBY           
  INTO  #TEMP           
  FROM DEDUCTEEAUDIT A  WITH(NOLOCK)        
  INNER  JOIN USERMASTER U WITH(NOLOCK)         
   ON U.USERID=A.USERID          
  INNER JOIN COMPANYBRANCH C WITH(NOLOCK)         
   ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS))  WHERE A.AUDITREMARKS<>'''' AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''         
  IF(@BRANCHNAME<>'')          
  BEGIN          
   SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';             
  END          
  IF(@BRANCHCODE<>'')          
  BEGIN          
   SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';             
  END          
  IF(@NAME <> '')                  
     BEGIN                  
         SET @QUERY = @QUERY + 'AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',3)) LIKE ''%' + @NAME + '%''';                  
     END                  
    IF(@PAN <> '')                  
     BEGIN                  
           SET @QUERY = @QUERY + ' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS+''^'',''^'',4)) LIKE ''%' + @PAN + '%''';                  
     END           
     SET @QUERY = @QUERY +  ';SELECT BRANCH,TRANSSTATUS,AUDITTYPE,AUDITDATE,AUDITREMARKS,EDITEDBY FROM #TEMP WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10)) + ' ORDER BY BRANCH';                    
    -- PRINT @QUERY          
     EXEC SP_EXECUTESQL @QUERY;           
     SET NOCOUNT OFF                
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEAUDITPAGEDCOUNT')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEAUDITPAGEDCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEEAUDITPAGEDCOUNT]      
(
 @BRANCHID INT,           
 @BRANCHNAME VARCHAR(75),      
 @BRANCHCODE VARCHAR(7),      
 @NAME VARCHAR(75),
 @PAN VARCHAR(10)
)      
AS      
BEGIN      
    SET NOCOUNT ON                
    DECLARE @QUERY NVARCHAR(MAX)              
    SET @QUERY = 'SELECT COUNT(A.AUDITID)
  FROM DEDUCTEEAUDIT A WITH(NOLOCK)      
  INNER  JOIN USERMASTER U  WITH(NOLOCK)    
   ON U.USERID=A.USERID      
  INNER JOIN COMPANYBRANCH C WITH(NOLOCK)     
   ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS))  WHERE A.AUDITREMARKS<>'''' AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''      
  IF(@BRANCHNAME<>'')      
  BEGIN      
   SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';         
  END      
  IF(@BRANCHCODE<>'')      
  BEGIN      
   SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';         
  END      
  IF(@NAME <> '')              
     BEGIN              
         SET @QUERY = @QUERY + 'AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',3)) LIKE ''%' + @NAME + '%''';              
     END              
    IF(@PAN <> '')              
     BEGIN              
           SET @QUERY = @QUERY + ' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS+''^'',''^'',4)) LIKE ''%' + @PAN + '%''';              
     END           
     --PRINT @QUERY      
     EXEC SP_EXECUTESQL @QUERY;       
     SET NOCOUNT OFF            
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEBASEDONPANANDBRANCH')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEBASEDONPANANDBRANCH
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETALLDEDUCTEEBASEDONPANANDBRANCH]
	@BRANCHCODES NVARCHAR(MAX),
	@PANSTRING NVARCHAR(MAX),       
	@ISDEDUCTEE BIT      
AS        
	BEGIN
		SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',') 
		SELECT DISTINCT * INTO #TEMPPAN FROM DBO.UDF_TDS_SPLITSTRING(@PANSTRING,',')        
		DECLARE @QUERY NVARCHAR(MAX);      
		IF(@ISDEDUCTEE =1)      
			BEGIN      
				SET @QUERY=' SELECT T.DEDUCTEEID,BRANCHCODE, NAME AS DEDUCTEENAME, PAN, 
				ISNULL(REFERENCENO,'''')REFERENCENO, PANREFERENCE, ADDRESS1, ADDRESS2, 
				ADDRESS3, ADDRESS4, STATEID, PINCODE  
				FROM(
				SELECT MAX(D.DEDUCTEEID) DEDUCTEEID,CB.BRANCHCODE
				FROM DEDUCTEE D WITH(NOLOCK)         
				INNER JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID        
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
				INNER JOIN #TEMPBR TB ON TB.DATA = CB.BRANCHCODE
				INNER JOIN #TEMPPAN TR ON TR.DATA = D.PAN
				GROUP BY RTRIM(LTRIM(D.NAME)),D.PAN,CB.BRANCHCODE
				)TT
				INNER JOIN
				(
				SELECT D.DEDUCTEEID, NAME, PAN,REFERENCENO,PANREFERENCE, ADDRESS1, ADDRESS2, 
				ADDRESS3, ADDRESS4, STATEID, PINCODE 
				FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID        
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
				INNER JOIN #TEMPBR B ON B.DATA = CB.BRANCHCODE           
				)T
				ON T.DEDUCTEEID = TT.DEDUCTEEID'        
			END      
		ELSE      
			BEGIN      
				SET @QUERY=' SELECT T.DEDUCTEEID,BRANCHCODE, NAME AS DEDUCTEENAME, PAN , 
				ISNULL(REFERENCENO,'''')REFERENCENO, PANREFERENCE, ADDRESS1, ADDRESS2, 
				ADDRESS3, ADDRESS4, STATEID, PINCODE  
				FROM(
				SELECT MAX(D.DEDUCTEEID) DEDUCTEEID,CB.BRANCHCODE
				FROM DEDUCTEE D WITH(NOLOCK)         
				LEFT JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID        
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
				INNER JOIN #TEMPBR TB ON TB.DATA = CB.BRANCHCODE
				INNER JOIN #TEMPPAN TR ON TR.DATA = D.PAN
				GROUP BY RTRIM(LTRIM(D.NAME)),D.PAN,CB.BRANCHCODE
				)TT
				INNER JOIN
				(
				SELECT D.DEDUCTEEID, NAME, PAN,REFERENCENO,PANREFERENCE, ADDRESS1, ADDRESS2, 
				ADDRESS3, ADDRESS4, STATEID, PINCODE 
				FROM DEDUCTEE D WITH(NOLOCK)
				LEFT JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID        
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
				INNER JOIN #TEMPBR B ON B.DATA = CB.BRANCHCODE           
				)T
				ON T.DEDUCTEEID = TT.DEDUCTEEID'         
			END      
		EXEC SP_EXECUTESQL @QUERY;     
		DROP TABLE #TEMPBR	              
		DROP TABLE #TEMPPAN	
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEDET')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEDET
GO
CREATE PROCEDURE USP_TDS_GETALLDEDUCTEEDET  
@BRANCHCODES NVARCHAR(MAX)    
AS    
 BEGIN    
  SELECT BRANCHCODE,ISNULL(REFERENCENO,'')REFERENCENO, D.NAME AS DEDUCTEENAME, D.PAN FROM DEDUCTEE D WITH(NOLOCK)   
  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID    
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID    
  WHERE BRANCHCODE IN (SELECT * FROM  DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')) --AND  ISNULL(REFERENCENO,'') = ''  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEDETAIL')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEEDETAIL]
AS
	BEGIN
		SELECT D.NAME , D.PAN, CB.BRANCHCODE, D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEFORLOOKUPEDIT')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEFORLOOKUPEDIT
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEEFORLOOKUPEDIT]  
 @BRANCHID INT,  
 @FORMID INT  
AS   
 BEGIN    
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED  
  DECLARE @SQLQUERY NVARCHAR(MAX);    
     IF(@FORMID = 1)  
   BEGIN  
    SET @SQLQUERY = 'SELECT E.SERIALNO, D.[NAME], D.PAN, D.REFERENCENO, D.DEDUCTEEID  
     FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID';  
   END  
  ELSE  
   BEGIN  
    SET @SQLQUERY = 'SELECT E.SERIALNO, D.[NAME], D.PAN, D.REFERENCENO, D.DEDUCTEEID  
     FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID';  
   END  
        SET @SQLQUERY = @SQLQUERY   
    + ' WHERE D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR);  
        IF(@FORMID <> 5)  
        BEGIN  
   IF(@FORMID = 2)  
    SET @SQLQUERY = @SQLQUERY + ' AND ISAPPLICABLE26 = 1';  
   IF(@FORMID = 3)  
    SET @SQLQUERY = @SQLQUERY + ' AND ISAPPLICABLE27 = 1';  
   IF(@FORMID = 4)  
    SET @SQLQUERY = @SQLQUERY + ' AND ISAPPLICABLE27E = 1';  
  END  
  SET @SQLQUERY = @SQLQUERY + ' ORDER BY E.SERIALNO';  
  --PRINT @SQLQUERY    
  EXECUTE SP_EXECUTESQL @SQLQUERY;    
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEIDSBASEDONNAMEPAN')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEIDSBASEDONNAMEPAN
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEEIDSBASEDONNAMEPAN]        
(        
@BRANCHCODES NVARCHAR(MAX),        
@NAMES NVARCHAR(MAX),  
@PANS NVARCHAR(MAX)  
)        
AS        
BEGIN  
 --SELECT * INTO #NAMES FROM UDF_TDS_SPLITSTRING(@NAMES,',')    
 --SELECT * INTO #PANS FROM UDF_TDS_SPLITSTRING(@PANS,',')  
 --SELECT * INTO #BRANCHCODES FROM UDF_TDS_SPLITSTRING(@BRANCHCODES,',')      
 SELECT D.DEDUCTEEID, C.BRANCHID,REFERENCENO,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,DEDUCTEECODE FROM DEDUCTEE D  WITH(NOLOCK)        
 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID        
 INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID=D.BRANCHID       
  WHERE ISNULL(REFERENCENO,'')='' AND NAME IN        
 (        
   SELECT * FROM  [DBO].[UDF_TDS_SPLITSTRING](@NAMES,',')        
 )  AND C.BRANCHCODE IN      
 (      
 SELECT * FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')        
 ) AND PAN IN   
 (  
 SELECT * FROM  [DBO].[UDF_TDS_SPLITSTRING](@PANS,',')  
 )      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEIDSCORF15GH')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEIDSCORF15GH
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETALLDEDUCTEEIDSCORF15GH]
@BRANCHCODE VARCHAR(20),           
@PAN NVARCHAR(MAX)                           
AS              
BEGIN              
  SELECT * INTO #REFNOS FROM [DBO].[UDF_TDS_SPLITSTRING](@PAN ,',')                        
  SELECT CB.BRANCHCODE,D.DEDUCTEEID, D.BRANCHID,REFERENCENO, NAME, PAN, PANREFERENCE,
         ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, PINCODE, STATEID, DEDUCTEECODE, ACCOUNTNUMBER       
  FROM DEDUCTEE D WITH(NOLOCK)       
  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID        
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID      
  INNER JOIN #REFNOS R ON R.DATA = D.PAN       
  WHERE CB.BRANCHCODE = @BRANCHCODE
  DROP TABLE #REFNOS
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEIDSF005')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEIDSF005
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEEIDSF005]          
(          
@BRANCHID INT,          
@REFERENCENOS NVARCHAR(MAX)          
)          
AS          
BEGIN          
  SELECT * INTO #BRANCHES FROM [DBO].[UDF_TDS_SPLITSTRING](@REFERENCENOS,',')          
  SELECT BRANCHID,REFERENCENO,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,DEDUCTEECODE,ACCOUNTNUMBER   
  FROM DEDUCTEE D WITH(NOLOCK)   
  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID    
  INNER JOIN #BRANCHES B ON B.DATA = D.REFERENCENO   
   WHERE BRANCHID=@BRANCHID   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEIDSF007')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEIDSF007
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEEIDSF007]      
(      
@BRANCHCODES NVARCHAR(MAX),      
@REFERENCENOS NVARCHAR(MAX)      
)      
AS      
BEGIN 
 SELECT * INTO #REFNO FROM  [DBO].[UDF_TDS_SPLITSTRING](@REFERENCENOS,',')      
 SELECT * INTO #BRANCHCODES FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')      
 SELECT D.DEDUCTEEID, C.BRANCHID,REFERENCENO,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,DEDUCTEECODE FROM DEDUCTEE D  WITH(NOLOCK)      
 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID      
 INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID=D.BRANCHID     
  WHERE ISNULL(REFERENCENO,'')<>'' AND   REFERENCENO IN      
 (      
   SELECT * FROM  #REFNO     
 )  AND C.BRANCHCODE IN    
 (    
 SELECT * FROM  #BRANCHCODES     
 )    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEIDSF008')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEIDSF008
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEEIDSF008]              
(              
@BRANCHCODES VARCHAR(MAX),           
@REFERENCENOS NVARCHAR(MAX)              
)              
AS              
BEGIN              
  SELECT * INTO #REFNOS FROM [DBO].[UDF_TDS_SPLITSTRING](@REFERENCENOS,',')             
  SELECT * INTO #BRANCHES FROM [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')            
  SELECT CB.BRANCHCODE,D.DEDUCTEEID, D.BRANCHID,REFERENCENO,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,DEDUCTEECODE,ACCOUNTNUMBER       
  FROM DEDUCTEE D WITH(NOLOCK)       
  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID        
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID      
  INNER JOIN #REFNOS R ON R.DATA = D.REFERENCENO       
  INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEIDSF011')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEIDSF011
GO
CREATE PROC [DBO].[USP_TDS_GETALLDEDUCTEEIDSF011]       
(        
@BRANCHCODES NVARCHAR(MAX),        
@REFERENCENOS NVARCHAR(MAX)        
)        
AS        
BEGIN
	SELECT * INTO #REFERENCENOS FROM [dbo].[UDF_TDS_SplitString](@REFERENCENOS,',')          
	SELECT D.DEDUCTEEID, C.BRANCHID, REFERENCENO, NAME, PAN, PANREFERENCE, ADDRESS1,
		ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, PINCODE, STATEID, EMPLOYMENTFROM, EMPLOYMENTTO,
		GENDER, ISSENIORCITIZEN, DATEOFBIRTH 
	FROM DEDUCTEE D  WITH(NOLOCK)        
		INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID        
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID = D.BRANCHID
		INNER JOIN #REFERENCENOS R ON D.REFERENCENO = R.DATA        
	WHERE C.BRANCHCODE IN      
	(      
	SELECT * FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')        
	)      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEEIDSF011BASEDONNAMEPAN')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEEIDSF011BASEDONNAMEPAN
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEEIDSF011BASEDONNAMEPAN]        
(        
@BRANCHCODES NVARCHAR(MAX),        
@NAMES NVARCHAR(MAX),  
@PANS NVARCHAR(MAX)  
)        
AS        
BEGIN  
 --SELECT * INTO #NAMES FROM UDF_TDS_SPLITSTRING(@NAMES,',')    
 --SELECT * INTO #PANS FROM UDF_TDS_SPLITSTRING(@PANS,',')  
 --SELECT * INTO #BRANCHCODES FROM UDF_TDS_SPLITSTRING(@BRANCHCODES,',')      
 SELECT D.DEDUCTEEID, C.BRANCHID,REFERENCENO,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,DEDUCTEECODE FROM DEDUCTEE D  WITH(NOLOCK)        
 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID        
 INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID=D.BRANCHID       
  WHERE ISNULL(REFERENCENO,'')='' 
 -- AND NAME IN        
 --(        
 --  SELECT * FROM  [DBO].[UDF_TDS_SPLITSTRING](@NAMES,',')        
 --) 
  AND C.BRANCHCODE IN      
 (      
 SELECT * FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')        
 ) AND PAN IN   
 (  
 SELECT * FROM  [DBO].[UDF_TDS_SPLITSTRING](@PANS,',')  
 )      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTEETDSDETAILS')
DROP PROCEDURE USP_TDS_GETALLDEDUCTEETDSDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTEETDSDETAILS] 
@BRANCHID INT, 
@FORMID INT 
AS 
BEGIN   
	SELECT E.SERIALNO AS SLNO,D.NAME,D.DEDUCTEEID,D.PAN,SUM(DD.PAYMENTMADE) AS PAYMENTMADE,   
	SUM(INCOMETAX) AS INCOMETAX,SUM(SURCHARGE) AS SURCHARGE,SUM(EDUCATIONCESS) AS CESS,E.GENDER,E.ISSENIORCITIZEN   
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)   
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID   
	INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID=D.DEDUCTEEID   
	WHERE D.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID   
	GROUP BY E.SERIALNO,D.NAME,D.DEDUCTEEID,D.PAN,E.GENDER,E.ISSENIORCITIZEN   
	UNION ALL  
    SELECT E.SERIALNO AS SLNO,D.NAME,DD.DEDUCTEEID,D.PAN,0 AS PAYMENTMADE,    
	0 AS INCOMETAX,0 AS SURCHARGE,0 AS CESS,E.GENDER,E.ISSENIORCITIZEN 
	FROM  
	(	 
		SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID 
		EXCEPT 
		SELECT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID 
	)DD 
	INNER JOIN EMPLOYEE E WITH(NOLOCK) ON DD.DEDUCTEEID=E.DEDUCTEEID 
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID=D.DEDUCTEEID 
	WHERE D.BRANCHID=@BRANCHID; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTIONAUDITPAGED')
DROP PROCEDURE USP_TDS_GETALLDEDUCTIONAUDITPAGED
GO
CREATE PROC [dbo].[USP_TDS_GETALLDEDUCTIONAUDITPAGED]  
(  
 @STARTROW INT,  
 @PAGESIZE INT, 
 @BRANCHID INT, 
 @BRANCHNAME VARCHAR(75),  
 @BRANCHCODE VARCHAR(7),  
 @FORMID  SMALLINT,  
 @QUARTER SMALLINT,  
 @NAME VARCHAR(75),  
 @PAN VARCHAR(10),  
 @AMOUNTOFPAYMENTFROM NUMERIC(13,2),  
 @AMOUNTOFPAYMENTTO NUMERIC(13,2),  
 @TAXDEDUCTEDFROM NUMERIC(13,2),  
 @TAXDEDUCTEDTO NUMERIC(13,2), 
 @SECTIONID INT, 
 @PAIDDATEFROM SMALLDATETIME=NULL,  
 @PAIDDATETO SMALLDATETIME=NULL,  
 @TAXDEDUCTEDDATEFROM SMALLDATETIME=NULL,  
 @TAXDEDUCTEDDATETO SMALLDATETIME=NULL
)  
AS  
BEGIN  
    SET NOCOUNT ON  
    DECLARE @FIRSTREC INT, @LASTREC INT  
    SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
    SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
    DECLARE @QUERY NVARCHAR(MAX)  
    SET @QUERY = 'SELECT  RowNum = IDENTITY(INT,1,1), C.BRANCHNAME+'' ''+C.BRANCHCODE BRANCH,A.TRANSSTATUS,
							A.AUDITTYPE,A.AUDITDATE,A.AUDITREMARKS,U.USERNAME AS EDITEDBY  
				  INTO  #TEMP  
				  FROM DEDUCTIONDETAILAUDIT A WITH(NOLOCK)  
					INNER  JOIN USERMASTER U   WITH(NOLOCK)  
						ON U.USERID=A.USERID  
					INNER JOIN COMPANYBRANCH C  WITH(NOLOCK)  
						ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS))
				  WHERE C.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ''  
	IF(@BRANCHNAME<>'')  
		BEGIN  
			SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';  
		END  
	IF(@BRANCHCODE<>'')  
		BEGIN  
			SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';  
		END  
	IF(@FORMID<>-1)  
		BEGIN  
			SET @QUERY = @QUERY +' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',2))=' + CAST(@FORMID AS VARCHAR);  
		END  
	IF(@QUARTER<>-1)  
		BEGIN  
			SET @QUERY = @QUERY +' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',3))=' + CAST(@QUARTER AS VARCHAR);  
		END  
	IF(@NAME <> '')  
		BEGIN  
			SET @QUERY = @QUERY + ' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',4)) LIKE ''%' + @NAME + '%''';  
		END  
	IF(@PAN <> '')  
		BEGIN  
			SET @QUERY = @QUERY + ' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',5)) LIKE ''%' + @PAN + '%''';  
		END  
	IF(@AMOUNTOFPAYMENTFROM<> 0 OR @AMOUNTOFPAYMENTTO<>0)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND  CONVERT(NUMERIC(15,2), (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',6)),1) BETWEEN ' + CAST(@AMOUNTOFPAYMENTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMOUNTOFPAYMENTTO AS VARCHAR(20))+'';  
		END  
	IF(@TAXDEDUCTEDFROM<> 0 OR @TAXDEDUCTEDTO<>0)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND  CONVERT(NUMERIC(15,2), (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',9)),1) BETWEEN ' + CAST(@TAXDEDUCTEDFROM AS VARCHAR(20)) + ' AND ' + CAST(@TAXDEDUCTEDTO AS VARCHAR(20))+'';  
		END  
	IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND   (CONVERT(SMALLDATETIME,SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',7)), 4,2)+''/''+SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',7)), 1,2)+''/''+  
			SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',7)), 7,4),101))  
			BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';                                             
		END  
	IF(@TAXDEDUCTEDDATEFROM IS NOT NULL AND @TAXDEDUCTEDDATETO IS NOT NULL)  
		BEGIN  
		SET @QUERY = @QUERY + ' AND   (CONVERT(SMALLDATETIME,SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',10)), 4,2)+''/''+SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',10)), 1,2)+''/''+  
		SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',10)), 7,4),101))  
		BETWEEN ''' + CAST(@TAXDEDUCTEDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDEDUCTEDDATETO AS VARCHAR) + '''';  
		END  
	IF(@SECTIONID<>-1)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND  (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',8)) = '+CAST(@SECTIONID AS VARCHAR)  
		END  
	SET @QUERY = @QUERY +  ';SELECT BRANCH,TRANSSTATUS,AUDITTYPE,AUDITDATE,AUDITREMARKS,EDITEDBY FROM #TEMP WHERE RowNum > ' + CAST(@FirstRec as varchar(10)) + ' AND RowNum < ' + CAST(@LastRec as varchar(10)) + ' ORDER BY BRANCH';  
	EXEC SP_EXECUTESQL @QUERY;  
	SET NOCOUNT OFF  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllDeductionAuditPagedCount')
DROP PROCEDURE USP_TDS_GetAllDeductionAuditPagedCount
GO
CREATE PROC [dbo].[USP_TDS_GetAllDeductionAuditPagedCount]  
(
 @BRANCHID INT,  
 @BRANCHNAME VARCHAR(75),  
 @BRANCHCODE VARCHAR(7),  
 @FORMID  SMALLINT,  
 @QUARTER SMALLINT,  
 @NAME VARCHAR(75),  
 @PAN VARCHAR(10),  
 @AMOUNTOFPAYMENTFROM NUMERIC(13,2),  
 @AMOUNTOFPAYMENTTO NUMERIC(13,2),  
 @TAXDEDUCTEDFROM NUMERIC(13,2),  
 @TAXDEDUCTEDTO NUMERIC(13,2),
 @SECTIONID INT,    
 @PAIDDATEFROM SMALLDATETIME=NULL,  
 @PAIDDATETO SMALLDATETIME=NULL,  
 @TAXDEDUCTEDDATEFROM SMALLDATETIME=NULL,  
 @TAXDEDUCTEDDATETO SMALLDATETIME=NULL  
)  
AS  
BEGIN  
	SET NOCOUNT ON  
	DECLARE @QUERY NVARCHAR(MAX)  
	SET @QUERY = 'SELECT COUNT(A.AUDITID)  
				  FROM DEDUCTIONDETAILAUDIT A WITH(NOLOCK)  
					INNER  JOIN USERMASTER U  WITH(NOLOCK)  
						 ON U.USERID=A.USERID  
					INNER JOIN COMPANYBRANCH C  WITH(NOLOCK)  
						ON C.BRANCHID= SUBSTRING(A.AUDITREMARKS,0,CHARINDEX(''^'',A.AUDITREMARKS)) WHERE A.AUDITREMARKS<>'''' 
							AND C.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+ ''   
	IF(@BRANCHNAME<>'')  
		BEGIN  
			SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';  
		END  
	IF(@BRANCHCODE<>'')  
		BEGIN  
			SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';  
		END  
	IF(@FORMID<>-1)  
		BEGIN  
			SET @QUERY = @QUERY +' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',2))=' + CAST(@FORMID AS VARCHAR);  
		END  
	IF(@QUARTER<>-1)  
		BEGIN  
			SET @QUERY = @QUERY +' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',3))=' + CAST(@QUARTER AS VARCHAR);  
		END  
	IF(@NAME <> '')  
		BEGIN  
			SET @QUERY = @QUERY + 'AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',4)) LIKE ''%' + @NAME + '%''';  
		END  
	IF(@PAN <> '')  
		BEGIN  
			SET @QUERY = @QUERY + ' AND (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',5)) LIKE ''%' + @PAN + '%''';  
		END  
	IF(@AMOUNTOFPAYMENTFROM<> 0 OR @AMOUNTOFPAYMENTTO<>0)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND  CONVERT(NUMERIC(15,2), (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',6)),1) BETWEEN ' + CAST(@AMOUNTOFPAYMENTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMOUNTOFPAYMENTTO AS VARCHAR(20))+'';  
		END  
	IF(@TAXDEDUCTEDFROM<> 0 OR @TAXDEDUCTEDTO<>0)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND  CONVERT(NUMERIC(15,2), (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',9)),1) BETWEEN ' + CAST(@TAXDEDUCTEDFROM AS VARCHAR(20)) + ' AND ' + CAST(@TAXDEDUCTEDTO AS VARCHAR(20))+'';  
		END  
	IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND   (CONVERT(SMALLDATETIME,SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',7)), 4,2)+''/''+SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',7)), 1,2)+''/''+  
			SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',7)), 7,4),101))  
			BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';                                             
		END  
	IF(@TAXDEDUCTEDDATEFROM IS NOT NULL AND @TAXDEDUCTEDDATETO IS NOT NULL)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND   (CONVERT(SMALLDATETIME,SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',10)), 4,2)+''/''+SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',10)), 1,2)+''/''+  
			SUBSTRING((select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',10)), 7,4),101))  
			BETWEEN ''' + CAST(@TAXDEDUCTEDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDEDUCTEDDATETO AS VARCHAR) + '''';  
		END  
	IF(@SECTIONID<>-1)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND  (select  dbo.UDF_TDS_GetSplittedString(A.AUDITREMARKS,''^'',8)) = '+CAST(@SECTIONID AS VARCHAR)  
		END  
	EXEC SP_EXECUTESQL @QUERY;  
	SET NOCOUNT OFF  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllDeductionDetail')
DROP PROCEDURE USP_TDS_GetAllDeductionDetail
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAllDeductionDetail]  
@BRANCHID INT,																					
@FORMID INT,                      
@QUARTER INT,
@ALLPAN NVARCHAR(MAX)          
AS                      
 BEGIN
	SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ALLPAN,',')    
	CREATE TABLE #DEDUCTEE(DEDUCTEEID INT, NAME VARCHAR(100), PAN VARCHAR(10), DEDUCTEECODE INT, PANREFERENCE VARCHAR(10), BRANCHID INT);
	IF(@FORMID = 1)
		BEGIN
			INSERT INTO #DEDUCTEE
			SELECT D.DEDUCTEEID,D.NAME,D.PAN,0 AS DEDUCTEECODE,D.PANREFERENCE,D.BRANCHID					
			FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
			INNER JOIN #TEMP T ON T.DATA=D.PAN    
			WHERE BRANCHID = @BRANCHID
		END
	ELSE
		BEGIN
			INSERT INTO #DEDUCTEE
			SELECT D.DEDUCTEEID,D.NAME,D.PAN,NE.DEDUCTEECODE,D.PANREFERENCE,D.BRANCHID		
			FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
			INNER JOIN #TEMP T ON T.DATA=D.PAN
			WHERE BRANCHID = @BRANCHID
		END
	SELECT D.NAME,D.PAN,D.DEDUCTEECODE,ISNULL(D.PANREFERENCE,'')PANREFERENCE,DD.*
	INTO #DEDUCTIONDETAIL
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID 
	WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER
    SELECT DCL.DEDUCTIONID, DCL.CHALLANID, DCL.BRANCHID
	INTO #DEDCHALINK
	FROM DEDCHALINK DCL WITH(NOLOCK)
	INNER JOIN #DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID  = DCL.DEDUCTIONID AND DD.BRANCHID = DCL.BRANCHID
	WHERE DCL.BRANCHID = @BRANCHID
	SELECT CHALLANID, ERETURNID, BRANCHID, FORMID, QUARTER
	INTO #CHALLANDETAIL
	FROM CHALLANDETAIL WITH(NOLOCK)
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
	SELECT DEDUCTIONID,CD.ERETURNID 
	INTO #CHALLAN
	FROM #DEDCHALINK DCL WITH(NOLOCK) 
	INNER JOIN #CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID AND CD.BRANCHID = DCL.BRANCHID
	WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.QUARTER = @QUARTER
	DROP TABLE #DEDCHALINK
	DROP TABLE #CHALLANDETAIL
	SELECT NAME,PAN,DEDUCTEECODE,PANREFERENCE,MAX(ISNULL(DD.SERIALNO,0))SERIALNO, MAX(ISNULL(DD.DEDUCTIONID,0))DEDUCTIONID, MAX(ISNULL(DD.ERETURNID,0))ERETURNID,MAX(ISNULL(CD.ERETURNID,0)) CHALLANERETURNID,
		 DD.PAYMENTDATE,ISNULL(DD.INCOMETAX,0)INCOMETAX , ISNULL(DD.SURCHARGE,0)SURCHARGE,ISNULL(DD.EDUCATIONCESS,0)EDUCATIONCESS,  
		 ISNULL(DD.TOTALDEDUCTED,0)TOTALDEDUCTED, DD.SECTIONID,ISNULL(DD.PAYMENTMADE,0)PAYMENTMADE     
	FROM #DEDUCTIONDETAIL DD WITH(NOLOCK)
	LEFT JOIN #CHALLAN CD ON CD.DEDUCTIONID = DD.DEDUCTIONID  
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
	GROUP BY NAME,PAN,DEDUCTEECODE,PANREFERENCE,DD.PAYMENTDATE,DD.INCOMETAX , DD.SURCHARGE,DD.EDUCATIONCESS,  DD.TOTALDEDUCTED, DD.SECTIONID,DD.PAYMENTMADE
	HAVING COUNT(DD.DEDUCTEEID) = 1	
	DROP TABLE #TEMP
	DROP TABLE #CHALLAN
	DROP TABLE #DEDUCTEE
	DROP TABLE #DEDUCTIONDETAIL
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTIONDETAILS')
DROP PROCEDURE USP_TDS_GETALLDEDUCTIONDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTIONDETAILS]
	@FORMID INT,
	@QUARTER INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT DD.DEDUCTEEID,D.NAME,NE.DEDUCTEECODE,DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,DD.ERETURNID,DD.MODE,DD.DEDUCTEEPAN,DD.LASTDEDUCTEEPAN,DD.DEDUCTEEPANREF,
			   DD.LASTDEDUCTEEPANREF,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.DEDUCTEDDATE,DD.SECTIONID ,TS.SECTIONNAME,
			   DD.INCOMETAXRATE,DD.SURCHARGERATE,DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,ISNULL(DD.SERIALNO,'') AS DEDSERIALNO, CD.SERIALNO AS CHALSERIALNO,
			   DL.DEDCHALINKID, CD.CHALLANID,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL ,CD.[QUARTER] AS CHALLANQUARTER,CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CD.ISCOMPANY END AS CHALLANCODE
		FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID
						  INNER JOIN TAXSECTIONS TS ON DD.SECTIONID=TS.SECTIONID
						  LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
						  LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
						  LEFT JOIN DBO.NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID
		WHERE  DD.FORMID=@FORMID AND DD.[QUARTER]=@QUARTER AND DD.BRANCHID=@BRANCHID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllDeductionDetailsCount')
DROP PROCEDURE USP_TDS_GetAllDeductionDetailsCount
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAllDeductionDetailsCount] 
 @BRANCHID INT,              
 @FORMID INT,              
 @QUARTER INT,         
 @SERIALNO INT = -1,                             
 @NAME VARCHAR(75),              
 @SECTIONID VARCHAR(MAX),              
 @AMTFROM NUMERIC(13,2),              
 @AMTTO NUMERIC(13,2),              
 @PAIDDATEFROM SMALLDATETIME = NULL,              
 @PAIDDATETO SMALLDATETIME = NULL,              
 @TAXAMTFROM NUMERIC(13,2),              
 @TAXAMTTO DECIMAL(13,2),              
 @TAXDATEFROM SMALLDATETIME = NULL,              
 @TAXDATETO SMALLDATETIME = NULL,            
 @ISSUPERADMIN BIT = 1,  
 @PAN INT,
 @ISCHECKER BIT,
 @NONDEDREASON INT = -1,
 @REFERENCENO VARCHAR(20),
 @TRANSACTIONSTATUS INT = -1        
AS              
 BEGIN              
     DECLARE @QUERY NVARCHAR(MAX);              
	 CREATE TABLE #DEDUCTEE(NAME VARCHAR(75),PAN VARCHAR(20),DEDUCTEEID INT,REFERENCENO VARCHAR(25))
	 SELECT D.NAME,D.PAN,D.DEDUCTEEID,D.REFERENCENO INTO #DED
	 FROM DEDUCTEE D WITH(NOLOCK)
	 WHERE BRANCHID=@BRANCHID
  IF @FORMID <> 1
	BEGIN
		INSERT INTO #DEDUCTEE
		SELECT NAME,PAN,D.DEDUCTEEID,REFERENCENO FROM #DED D WITH(NOLOCK)
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
	END
	ELSE
	BEGIN
		INSERT INTO #DEDUCTEE
		SELECT NAME,PAN,D.DEDUCTEEID,REFERENCENO FROM #DED D WITH(NOLOCK)
		--INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
	END  
	DROP TABLE #DED
	SELECT DEDUCTIONID
	INTO #DEDID
	FROM DEDUCTIONDETAIL WITH(NOLOCK)
	WHERE BRANCHID = @BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
	SELECT DD.DEDUCTIONID, DEDUCTEEID,	SECTIONID, BRANCHID, FORMID, QUARTER, ENTRYTYPE,
		SERIALNO, PAYMENTMADE, PAYMENTDATE, TOTALDEDUCTED, DEDUCTEDDATE,
		TRANSSTATUS, NONDEDREASON
	INTO #DEDDETAIL
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN #DEDID D ON DD.DEDUCTIONID = D.DEDUCTIONID
    DROP TABLE #DEDID
  SET @QUERY = 'SELECT COUNT(DISTINCT DD.DEDUCTIONID)              
       FROM #DEDDETAIL DD WITH(NOLOCK)   
     INNER JOIN  #DEDUCTEE D  WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID'    
  SET @QUERY = @QUERY + ' INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID
		    WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR);              
IF(@ISSUPERADMIN = 0)          
  BEGIN          
   SET @QUERY = @QUERY + ' AND DD.ENTRYTYPE <> 4'          
  END          
  IF(@NAME <> '')    
   BEGIN              
    SET @QUERY = @QUERY + ' AND D.NAME LIKE ''%' + @NAME + '%''';              
   END
    IF(@SERIALNO <> -1)
	   BEGIN	
		SET @QUERY = @QUERY + ' AND DD.SERIALNO = ' + CAST(@SERIALNO AS VARCHAR)
	   END           
    IF(@PAN = 1)  
	 BEGIN  
	  SET @QUERY = @QUERY + ' AND D.PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')'   
	 END    
	  ELSE IF(@PAN = 2)  
	 BEGIN  
	  SET @QUERY = @QUERY + ' AND D.PAN = ''PANAPPLIED'''  
	 END    
	  ELSE IF(@PAN = 3)  
	 BEGIN  
	  SET @QUERY = @QUERY + ' AND D.PAN = ''PANINVALID'''  
	 END    
	  ELSE IF(@PAN = 4)  
	 BEGIN  
  SET @QUERY = @QUERY + ' AND D.PAN = ''PANNOTAVBL'''  
 END         
  IF(@SECTIONID <> '')                                
   BEGIN                                
    SET @QUERY = @QUERY + ' AND TS.SECTIONNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS VARCHAR(MAX))+''','',''))'                        
   END               
  IF(@AMTFROM <> 0 OR @AMTTO <> 0)              
   BEGIN              
    SET @QUERY = @QUERY + ' AND DD.PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));              
   END              
  IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)              
   BEGIN              
    SET @QUERY = @QUERY +' AND DD.PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR)+''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';              
   END              
  IF(@TAXAMTFROM <> 0 OR @TAXAMTTO <> 0)              
   BEGIN              
    SET @QUERY = @QUERY + ' AND DD.TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR)+' AND ' + CAST(@TAXAMTTO AS VARCHAR);              
   END               
  IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)              
   BEGIN              
    SET @QUERY  = @QUERY + ' AND DD.DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR)+''' AND ''' + CAST(@TAXDATETO AS VARCHAR) + '''';              
   END  
  IF(@ISCHECKER = 1)
    BEGIN
		SET @QUERY =@QUERY + ' AND ISNULL(DD.TRANSSTATUS,0) IN (1,4)'
    END            
  IF(@NONDEDREASON <> -1)
     BEGIN
		 SET @QUERY = @QUERY + ' AND DD.NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)     
     END 
    IF(@REFERENCENO <> '')    
   BEGIN              
    SET @QUERY = @QUERY + ' AND D.REFERENCENO LIKE ''%' + @REFERENCENO + '%''';              
   END
   IF(@TRANSACTIONSTATUS <> -1)
	   BEGIN
			SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = ' + CAST(@TRANSACTIONSTATUS AS VARCHAR)
	   END
	EXEC SP_EXECUTESQL @QUERY;
	--PRINT @QUERY            
	DROP TABLE #DEDDETAIL  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllDeductionDetailsCount05')
DROP PROCEDURE USP_TDS_GetAllDeductionDetailsCount05
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAllDeductionDetailsCount05] 
 @BRANCHID INT,              
 @FORMID INT,              
 @QUARTER INT,         
 @SERIALNO INT = -1,                             
 @NAME VARCHAR(75),              
 @SECTIONID VARCHAR(MAX),              
 @AMTFROM NUMERIC(13,2),              
 @AMTTO NUMERIC(13,2),              
 @PAIDDATEFROM SMALLDATETIME = NULL,              
 @PAIDDATETO SMALLDATETIME = NULL,              
 @TAXAMTFROM NUMERIC(13,2),              
 @TAXAMTTO DECIMAL(13,2),              
 @TAXDATEFROM SMALLDATETIME = NULL,              
 @TAXDATETO SMALLDATETIME = NULL,            
 @ISSUPERADMIN BIT = 1,  
 @PAN INT,
 @ISCHECKER BIT,
 @NONDEDREASON INT = -1,
 @REFERENCENO VARCHAR(20),
 @TRANSACTIONSTATUS INT = -1,
 @HOBRANCHID INT,  
 @ISZOCLICK INT,
 @BRANCHCODE VARCHAR(50)= ''            
AS              
 BEGIN              
     DECLARE @QUERY NVARCHAR(MAX); 
     DECLARE @RTBRANCHID INT = -1;
     DECLARE @SEARCHRTBRANCHID INT = ISNULL((SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE = @BRANCHCODE ),0);
	IF((SELECT TOP 1 FINANCIALYEAR FROM DEDUCTOR  WITH(NOLOCK) ORDER BY FINANCIALYEAR DESC) = 2018)
		BEGIN
			IF(@HOBRANCHID<>0)
				BEGIN
					SET @RTBRANCHID = CASE WHEN @HOBRANCHID = @BRANCHID THEN -1 ELSE @BRANCHID END;
					SET @BRANCHID = @HOBRANCHID;
				END
			ELSE
				BEGIN
					IF ((SELECT ISZORO FROM COMPANYBRANCH WITH(NOLOCK) 
						WHERE BRANCHID = (SELECT PARENTBRANCHID 
										  FROM COMPANYBRANCH WITH(NOLOCK) 
										  WHERE BRANCHID = @BRANCHID AND ISZORO <> 1)) = 1)
						BEGIN
							SET @RTBRANCHID = @BRANCHID;
							SET @BRANCHID = (SELECT PARENTBRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @RTBRANCHID);
						END
			END
		END
	 CREATE TABLE #DEDUCTEE(NAME VARCHAR(75),PAN VARCHAR(20),DEDUCTEEID INT,REFERENCENO VARCHAR(25))
	 SELECT D.NAME,D.PAN,D.DEDUCTEEID,D.REFERENCENO INTO #DED
	 FROM DEDUCTEE D WITH(NOLOCK)
	 WHERE BRANCHID=@BRANCHID
  IF @FORMID <> 1
	BEGIN
		INSERT INTO #DEDUCTEE
		SELECT NAME,PAN,D.DEDUCTEEID,REFERENCENO FROM #DED D WITH(NOLOCK)
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
	END
	ELSE
	BEGIN
		INSERT INTO #DEDUCTEE
		SELECT NAME,PAN,D.DEDUCTEEID,REFERENCENO FROM #DED D WITH(NOLOCK)
		--INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
	END  
	DROP TABLE #DED
	CREATE TABLE #DEDID (DEDUCTIONID INT)
	IF(@RTBRANCHID = -1)
		BEGIN
			 IF(@ISZOCLICK = 1)
				BEGIN
					INSERT INTO #DEDID
					SELECT DEDUCTIONID
						FROM DEDUCTIONDETAIL WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID 
						AND FORMID = @FORMID 
						AND QUARTER = @QUARTER
						AND RTBRANCHID = @BRANCHID
				END
			ELSE
				BEGIN	
					INSERT INTO #DEDID
					SELECT DEDUCTIONID
						FROM DEDUCTIONDETAIL WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID 
						AND FORMID = @FORMID 
						AND QUARTER = @QUARTER
						AND RTBRANCHID <> @BRANCHID
				END
		END
	ELSE
		BEGIN
			INSERT INTO #DEDID
			SELECT DEDUCTIONID
				FROM DEDUCTIONDETAIL WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID 
				AND FORMID = @FORMID 
				AND QUARTER = @QUARTER
				AND RTBRANCHID = @RTBRANCHID
		END
	SELECT DD.DEDUCTIONID, DEDUCTEEID,	SECTIONID, BRANCHID, FORMID, QUARTER, ENTRYTYPE,
		SERIALNO, PAYMENTMADE, PAYMENTDATE, TOTALDEDUCTED, DEDUCTEDDATE,
		TRANSSTATUS, NONDEDREASON, RTBRANCHID
	INTO #DEDDETAIL
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN #DEDID D ON DD.DEDUCTIONID = D.DEDUCTIONID
    DROP TABLE #DEDID
  SET @QUERY = 'SELECT COUNT(DISTINCT DD.DEDUCTIONID)              
       FROM #DEDDETAIL DD WITH(NOLOCK)   
     INNER JOIN  #DEDUCTEE D  WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID'    
  SET @QUERY = @QUERY + ' INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID
		    WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR);              
IF(@ISSUPERADMIN = 0)          
  BEGIN          
   SET @QUERY = @QUERY + ' AND DD.ENTRYTYPE <> 4'          
  END          
  IF(@NAME <> '')    
   BEGIN              
    SET @QUERY = @QUERY + ' AND D.NAME LIKE ''%' + @NAME + '%''';              
   END
    IF(@SERIALNO <> -1)
	   BEGIN	
		SET @QUERY = @QUERY + ' AND DD.SERIALNO = ' + CAST(@SERIALNO AS VARCHAR)
	   END           
    IF(@PAN = 1)  
	 BEGIN  
	  SET @QUERY = @QUERY + ' AND D.PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')'   
	 END    
	  ELSE IF(@PAN = 2)  
	 BEGIN  
	  SET @QUERY = @QUERY + ' AND D.PAN = ''PANAPPLIED'''  
	 END    
	  ELSE IF(@PAN = 3)  
	 BEGIN  
	  SET @QUERY = @QUERY + ' AND D.PAN = ''PANINVALID'''  
	 END    
	  ELSE IF(@PAN = 4)  
	 BEGIN  
  SET @QUERY = @QUERY + ' AND D.PAN = ''PANNOTAVBL'''  
 END         
  IF(@SECTIONID <> '')                                
   BEGIN                                
    SET @QUERY = @QUERY + ' AND TS.SECTIONNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS VARCHAR(MAX))+''','',''))'                        
   END               
  IF(@AMTFROM <> 0 OR @AMTTO <> 0)              
   BEGIN              
    SET @QUERY = @QUERY + ' AND DD.PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));              
   END              
  IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)              
   BEGIN              
    SET @QUERY = @QUERY +' AND DD.PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR)+''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';              
   END              
  IF(@TAXAMTFROM <> 0 OR @TAXAMTTO <> 0)              
   BEGIN              
    SET @QUERY = @QUERY + ' AND DD.TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR)+' AND ' + CAST(@TAXAMTTO AS VARCHAR);              
   END               
  IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)              
   BEGIN              
    SET @QUERY  = @QUERY + ' AND DD.DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR)+''' AND ''' + CAST(@TAXDATETO AS VARCHAR) + '''';              
   END  
  IF(@ISCHECKER = 1)
    BEGIN
		SET @QUERY =@QUERY + ' AND ISNULL(DD.TRANSSTATUS,0) IN (1,4)'
    END            
  IF(@NONDEDREASON <> -1)
     BEGIN
		 SET @QUERY = @QUERY + ' AND DD.NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)     
     END 
    IF(@REFERENCENO <> '')    
   BEGIN              
    SET @QUERY = @QUERY + ' AND D.REFERENCENO LIKE ''%' + @REFERENCENO + '%''';              
   END
   IF(@TRANSACTIONSTATUS <> -1)
	   BEGIN
			SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = ' + CAST(@TRANSACTIONSTATUS AS VARCHAR)
	   END
	IF(@BRANCHCODE <> '')
		BEGIN 
			SET @QUERY = @QUERY + ' AND ISNULL(DD.RTBRANCHID,0) = ' + CAST(@SEARCHRTBRANCHID AS VARCHAR)
		END
	EXEC SP_EXECUTESQL @QUERY;            
	DROP TABLE #DEDDETAIL  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTIONDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETALLDEDUCTIONDETAILSFORGRID
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETALLDEDUCTIONDETAILSFORGRID]  
 @BRANCHID INT,    
 @FORMID INT = -1,     
 @QUARTER INT = -1,    
 @ALLDED INT = 0, 
 @STARTROW INT = 0, 
 @LASTROW INT = 0 
AS    
 BEGIN     
	DECLARE @SQLQUERY NVARCHAR(MAX),@DEFAULTCOLUMN NVARCHAR(MAX);    
	DECLARE @ALL VARCHAR(MAX);   
	SELECT * INTO #QUARTER FROM DBO.UDF_TDS_SPLITSTRING(CASE WHEN @QUARTER = -1 THEN '1,2,3,4' ELSE CAST(@QUARTER AS VARCHAR) END,',')    
	IF (@STARTROW = 0) 
		SET @STARTROW=1; 
	IF(@LASTROW=0) 
	BEGIN 
		SELECT @LASTROW=COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
		INNER JOIN #QUARTER Q ON DD.QUARTER = Q.DATA    
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
	END 
	SELECT ROW_NUMBER() OVER(ORDER BY DEDUCTIONID) RECNO, DEDUCTIONID INTO #DEDDETAIL FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
	INNER JOIN #QUARTER Q ON DD.QUARTER = Q.DATA    
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID    
	SELECT DEDUCTIONID INTO #LINKDEDDET FROM DEDCHALINK DL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID    
	IF(@ALLDED = 0 OR @ALLDED = 2)    
	  BEGIN    
		SELECT DEDUCTIONID, DL.CHALLANID, SERIALNO, QUARTER, CHALLANTOTAL     
		INTO #DED     
		FROM DEDCHALINK DL WITH(NOLOCK)     
		INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID AND DL.BRANCHID = CD.BRANCHID    
		WHERE DL.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID    
	  END    
	IF(@ALLDED = 0)    
	  BEGIN    
		SELECT DD.DEDUCTIONID, NULL AS SERIALNO, NULL AS QUARTER, NULL AS CHALLANTOTAL  INTO #UNLINKED0  FROM    
		(    
			SELECT DEDUCTIONID FROM #DEDDETAIL WHERE RECNO BETWEEN @STARTROW AND @LASTROW  
			EXCEPT    
			SELECT DEDUCTIONID FROM #LINKDEDDET    
		)DD    
		SELECT DD.DEDUCTIONID, DL.SERIALNO, DL.QUARTER, DL.CHALLANTOTAL INTO #LINKED0 FROM    
		(    
			SELECT DEDUCTIONID FROM #DEDDETAIL  WHERE RECNO BETWEEN @STARTROW AND @LASTROW  
			INTERSECT    
			SELECT DEDUCTIONID FROM #LINKDEDDET    
		)DD    
		INNER JOIN #DED DL ON DD.DEDUCTIONID = DL.DEDUCTIONID    
		SELECT * INTO #ALL0 FROM    
		 (    
			SELECT * FROM #LINKED0   
			UNION ALL    
			SELECT * FROM #UNLINKED0	    
		 ) A    
		 SET @ALL = '#ALL0'   
	  END    
	ELSE IF(@ALLDED = 1)    
	  BEGIN    
		SELECT DD.DEDUCTIONID, NULL AS SERIALNO, NULL AS QUARTER, NULL AS CHALLANTOTAL  INTO #ALL1 FROM    
		(    
			SELECT DEDUCTIONID FROM #DEDDETAIL  WHERE RECNO BETWEEN @STARTROW AND @LASTROW  
			EXCEPT    
			SELECT DEDUCTIONID FROM #LINKDEDDET    
		)DD    
		SET @ALL = '#ALL1'   
	  END    
	 ELSE IF(@ALLDED = 2)    
	  BEGIN    
		SELECT DD.DEDUCTIONID, DL.SERIALNO, DL.QUARTER, DL.CHALLANTOTAL INTO #ALL2  FROM    
		(    
			SELECT DEDUCTIONID FROM #DEDDETAIL  WHERE RECNO BETWEEN @STARTROW AND @LASTROW  
			INTERSECT    
			SELECT DEDUCTIONID FROM #LINKDEDDET    
		)DD    
		INNER JOIN #DED DL ON DD.DEDUCTIONID = DL.DEDUCTIONID	    
		SET @ALL = '#ALL2'   
	  END    
	SET @DEFAULTCOLUMN = ' DD.FORMID, DD.QUARTER, DD.DEDUCTIONID AS DEDUCTIONID, DD.SERIALNO AS SLNO, D.DEDUCTEEID, D.[NAME], D.PAN, TS.SECTIONNAME, DD.PAYMENTMADE, DD.PAYMENTDATE, DD.TOTALDEDUCTED,DD.TOTALPURCHASEVALUE,      
		 DD.INCOMETAXRATE, DD.INCOMETAX,DD.SURCHARGERATE, DD.SURCHARGE, DD.EDUCATIONCESSRATE, DD.EDUCATIONCESS, DD.NONDEDREASON, DD.ISBOOKENTRY,      
		 DD.TAXRATE,DD.DEDUCTEDDATE, DD.NARRATION';      
	IF(@FORMID = 1)    
	  BEGIN    
		SET @DEFAULTCOLUMN = @DEFAULTCOLUMN  +  ', NULL AS DEDUCTEECODE'     
	  END     
	ELSE    
	  BEGIN    
		SET @DEFAULTCOLUMN = @DEFAULTCOLUMN  + ', NE.DEDUCTEECODE AS DEDUCTEECODE'     
	  END     
	SET @SQLQUERY = ' FROM DEDUCTIONDETAIL DD WITH(NOLOCK)    
							INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID    
							INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID'    
	IF(@FORMID = 1)    
	  SET @SQLQUERY =  @SQLQUERY  + ' INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID'    
	ELSE     
	  SET @SQLQUERY =  @SQLQUERY  + ' INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID'      
	SET @DEFAULTCOLUMN = @DEFAULTCOLUMN  + ' , L.SERIALNO AS CHASLNO, L.CHALLANTOTAL, L.QUARTER AS CHAQUARTER'    
	SET @SQLQUERY = @SQLQUERY +  ' INNER JOIN ' + @ALL + ' L ON L.DEDUCTIONID = DD.DEDUCTIONID '     
	SET @SQLQUERY = @SQLQUERY + ' WHERE DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +' AND DD.FORMID = '+ CAST(@FORMID AS VARCHAR)    
	IF(@QUARTER <> -1)    
		SET @SQLQUERY = @SQLQUERY + ' AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)    
	SET @SQLQUERY = 'SELECT ' + @DEFAULTCOLUMN +  @SQLQUERY + ' ORDER BY DD.SERIALNO'  
	EXEC SP_EXECUTESQL @SQLQUERY    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTIONDETAILSFORLOOKUPEDIT')
DROP PROCEDURE USP_TDS_GETALLDEDUCTIONDETAILSFORLOOKUPEDIT
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETALLDEDUCTIONDETAILSFORLOOKUPEDIT]  
 @BRANCHID INT,  
 @FORMID INT = -1,  
 @QUARTER INT = -1
AS  
 BEGIN  
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
  DECLARE @SQLQUERY NVARCHAR(MAX);  
  SET @SQLQUERY = 'SELECT DD.SERIALNO AS SLNO,  D.[NAME], D.PAN, DD.PAYMENTMADE, DD.PAYMENTDATE, D.DEDUCTEEID, DD.DEDUCTIONID
					FROM DBO.DEDUCTIONDETAIL DD 
					INNER JOIN DBO.DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID
					WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR);
  IF (@FORMID <> -1)  
   SET @SQLQUERY = @SQLQUERY + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR);  
  IF (@QUARTER <> -1)  
   SET @SQLQUERY = @SQLQUERY + ' AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR);  
  SET @SQLQUERY = @SQLQUERY + ' ORDER BY DD.DEDUCTIONID';  
  --PRINT @SQLQUERY  
  EXECUTE SP_EXECUTESQL @SQLQUERY;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllDeductionDetailsPaged')
DROP PROCEDURE USP_TDS_GetAllDeductionDetailsPaged
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAllDeductionDetailsPaged]
 @StartRow INT,                                  
 @PageSize INT,                                  
 @BRANCHID INT,                                  
 @FORMID INT,                                  
 @QUARTER INT,     
 @SERIALNO INT = -1,                               
 @NAME VARCHAR(75),                                  
 @SECTIONID VARCHAR(MAX),                                  
 @AMTFROM NUMERIC(13,2),                                  
 @AMTTO NUMERIC(13,2),                                  
 @PAIDDATEFROM SMALLDATETIME = NULL,                                  
 @PAIDDATETO SMALLDATETIME = NULL,                                  
 @TAXAMTFROM NUMERIC(13,2),                                  
 @TAXAMTTO NUMERIC(13,2),                                  
 @TAXDATEFROM SMALLDATETIME = NULL,                                  
 @TAXDATETO SMALLDATETIME = NULL,                  
 @ISSUPERADMIN BIT = 1,              
 @PAN INT,        
 @ISCHECKER BIT = 0,    
 @ORDERNO VARCHAR(50) = '',  
 @NONDEDREASON INT = -1,  
 @REFERENCENO VARCHAR(20),
 @TRANSACTIONSTATUS INT = -1,
 @ORDERBY VARCHAR(5)      
AS                                  
	BEGIN
		IF EXISTS(SELECT SERIALNO, DD.BRANCHID FROM DEDUCTIONDETAIL DD 
							INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = DD.BRANCHID
							WHERE DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.BRANCHID = @BRANCHID 
							GROUP BY SERIALNO, DD.BRANCHID
							HAVING COUNT(SERIALNO) > 1)
		BEGIN
			SELECT ROW_NUMBER() OVER(PARTITION BY DD.BRANCHID,DD.FORMID,DD.QUARTER ORDER BY DD.DEDUCTIONID)SERIALNO, DD.DEDUCTIONID 
			INTO #DDSRNO
			FROM DEDUCTIONDETAIL DD
				INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = DD.BRANCHID
			WHERE FORMID = @FORMID AND QUARTER = @QUARTER AND DD.BRANCHID = @BRANCHID
			UPDATE DEDUCTIONDETAIL SET SERIALNO = S.SERIALNO
			FROM DEDUCTIONDETAIL DD
				INNER JOIN #DDSRNO S ON S.DEDUCTIONID = DD.DEDUCTIONID
			UPDATE DEDUCTIONDETAIL SET PARTPAYMENTID = SERIALNO 
			WHERE FORMID = @FORMID AND QUARTER = @QUARTER AND BRANCHID = @BRANCHID
		END               
		DECLARE @FirstRec INT, @LastRec INT;                                  
		DECLARE @QUERY NVARCHAR(MAX),@CHILDQUERY NVARCHAR(MAX);                                  
		DECLARE @ALLOW92A92B INT;                                  
		SET @ALLOW92A92B=0;                                  
		SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS                                   
		SELECT @FirstRec = (@StartRow - 1) * @PageSize;                                  
		SELECT @LastRec = (@StartRow * @PageSize + 1);                                      
		CREATE TABLE #DEDID (DEDUCTIONID INT)
		INSERT INTO #DEDID
		SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		SELECT DEDUCTIONID, BRANCHID, FORMID, QUARTER, SERIALNO, PARTPAYMENTID,SECTIONID,DEDUCTEEID, ORGPAYMENTMADE, 
		PAYMENTDATE,ORGINCOMETAX, INCOMETAXRATE, ORGEDUCATIONCESS, EDUCATIONCESSRATE, ORGSURCHARGE, SURCHARGERATE,
		ORGTOTALDEDUCTED, TAXRATE,DEDUCTEDDATE, ISBOOKENTRY, NONDEDREASON, ISGROSSINGUP,  
		ENTRYTYPE,CERTIFICATEDATE,TOTALPURCHASEVALUE,TRANSSTATUS,PAYMENTMADE,TOTALDEDUCTED,  
		TIMESTAMP,ORDERID, ADDLAMOUNT1,ADDLAMOUNT2,INVOICENO,INVOICEDATE
		INTO #DEDUCTIONDETAIL
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND QUARTER = @QUARTER
		SELECT DL.BRANCHID, DL.DEDUCTIONID, CHALLANID
		INTO #DEDCHALINK
		FROM DEDCHALINK DL WITH(NOLOCK)
		INNER JOIN #DEDUCTIONDETAIL DD
		ON DL.DEDUCTIONID = DD.DEDUCTIONID
		SELECT BRANCHID, CHALLANID, BANKCHALLANNO, CHALLANPAIDDATE, BANKID, FORMID, QUARTER
		INTO #CHALLANDETAIL
		FROM CHALLANDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND QUARTER = @QUARTER
		SELECT DD.DEDUCTIONID, BRANCHID, FORMID, QUARTER, SERIALNO, PARTPAYMENTID,SECTIONID,DEDUCTEEID, ORGPAYMENTMADE, 
		PAYMENTDATE,ORGINCOMETAX, INCOMETAXRATE, ORGEDUCATIONCESS, EDUCATIONCESSRATE, ORGSURCHARGE, SURCHARGERATE,
		ORGTOTALDEDUCTED, TAXRATE,DEDUCTEDDATE, ISBOOKENTRY, NONDEDREASON, ISGROSSINGUP,  
		ENTRYTYPE, CERTIFICATEDATE, ISNULL(TOTALPURCHASEVALUE,0)TOTALPURCHASEVALUE, ISNULL(TRANSSTATUS,2)TRANSSTATUS,PAYMENTMADE,TOTALDEDUCTED,  
		CONVERT(BIGINT,TIMESTAMP) AS TIMESTAMP, ORDERID, ISNULL(ADDLAMOUNT1,0)ADDLAMOUNT1, ISNULL(ADDLAMOUNT2,0)ADDLAMOUNT2, INVOICENO, INVOICEDATE  
		INTO #DEDUCTIONS  
		FROM #DEDUCTIONDETAIL DD 
		INNER JOIN #DEDID D ON DD.DEDUCTIONID = D.DEDUCTIONID
		DROP TABLE #DEDID
		SELECT DL.DEDUCTIONID,ISNULL(CD.BANKCHALLANNO,'')BANKCHALLANNO, CHALLANPAIDDATE,ISNULL(RB.BSRCODE,'')BSRCODE   
		INTO #CHALLAN  
		FROM #DEDCHALINK DL WITH(NOLOCK) --ON DD.DEDUCTIONID = DL.DEDUCTIONID                                  
		INNER JOIN #CHALLANDETAIL CD  WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID   
		INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID = CD.BANKID                                 
		WHERE  CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.[QUARTER] = @QUARTER
		CREATE TABLE #DED(NAME VARCHAR(75),PAN VARCHAR(10),REFERENCENO VARCHAR(25),DEDUCTEEID INT)
		INSERT INTO #DED  
		SELECT D.NAME,D.PAN,D.REFERENCENO,D.DEDUCTEEID   
		FROM DEDUCTEE D WITH(NOLOCK) WHERE BRANCHID = @BRANCHID           
		IF @FORMID = 1  
		BEGIN      
			SELECT D.NAME,D.PAN,ISNULL(D.REFERENCENO,'')REFERENCENO,D.DEDUCTEEID   
			INTO #DEDUCTEEEMP  
			FROM #DED D  
			INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
		END  
		ELSE  
		BEGIN  
			SELECT D.NAME,D.PAN,ISNULL(D.REFERENCENO,'')REFERENCENO,D.DEDUCTEEID   
			INTO #DEDUCTEENONEMP  
			FROM #DED D  
			INNER JOIN NONEMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
		END  
		DROP TABLE #DED
		SET @QUERY = 'SELECT ROWNUM = IDENTITY(int,1,1),DD.DEDUCTIONID,DD.SERIALNO,D.NAME,PARTPAYMENTID,D.PAN,ISNULL(D.REFERENCENO,'''')REFERENCENO,                                  
		CASE WHEN DD.FORMID = 1 AND ' + CAST(@ALLOW92A92B AS VARCHAR) + '= 1 THEN TS.SECTIONNAME + '' (''+ TS.TAXNAME + '')'' ELSE TS.SECTIONNAME  END AS SECTIONNAME,                                  
		DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,DD.ORGPAYMENTMADE,DD.PAYMENTDATE,DD.SECTIONID,--DD.ERETURNID,       
		DD.ORGINCOMETAX,DD.INCOMETAXRATE,DD.ORGSURCHARGE,DD.SURCHARGERATE,DD.ORGEDUCATIONCESS,DD.EDUCATIONCESSRATE,                                  
		DD.TAXRATE,DD.ORGTOTALDEDUCTED,DD.DEDUCTEDDATE,DD.ISBOOKENTRY,DD.NONDEDREASON,DD.ISGROSSINGUP,DD.ENTRYTYPE,   
		DD.CERTIFICATEDATE, TOTALPURCHASEVALUE, TRANSSTATUS,TIMESTAMP, ISNULL(PO.ORDERNO,'''')ORDERNO,ADDLAMOUNT1,  
		ADDLAMOUNT2,INVOICENO,INVOICEDATE, ISNULL(CD.BANKCHALLANNO,'''')BANKCHALLANNO, CD.CHALLANPAIDDATE,   
		ISNULL(CD.BSRCODE,'''')BSRCODE  
		INTO #DEDDISP  
		FROM #DEDUCTIONS DD ';  
		IF @FORMID = 1  
		BEGIN                                  
			SET @QUERY = @QUERY + ' INNER JOIN  #DEDUCTEEEMP D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID';                                  
		END  
		ELSE  
		BEGIN  
			SET @QUERY = @QUERY + ' INNER JOIN  #DEDUCTEENONEMP D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID'  
		END
		SET @QUERY = @QUERY + ' INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID    
			LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID                                   
			LEFT JOIN #CHALLAN CD ON DD.DEDUCTIONID = CD.DEDUCTIONID                                                                
			WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR);                                  
		IF(@ISSUPERADMIN = 0)                  
		BEGIN                  
			SET @QUERY = @QUERY + ' AND DD.ENTRYTYPE <> 4'                  
		END    
		IF(@NAME <> '')                                  
		BEGIN                  
			SET @QUERY = @QUERY + ' AND D.NAME LIKE ''%' + @NAME + '%''';                                  
		END    
		IF(@SERIALNO <> -1)  
		BEGIN   
			SET @QUERY = @QUERY + ' AND DD.SERIALNO = ' + CAST(@SERIALNO AS VARCHAR)  
		END                           
		IF(@PAN = 1)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND D.PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')'               
		END                
		ELSE IF(@PAN = 2)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND D.PAN = ''PANAPPLIED'''              
		END                
		ELSE IF(@PAN = 3)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND D.PAN = ''PANINVALID'''              
		END                
		ELSE IF(@PAN = 4)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND D.PAN = ''PANNOTAVBL'''              
		END                
		IF(@SECTIONID <> '')                                  
		BEGIN    
			IF(@FORMID = 1 AND @ALLOW92A92B = 1)  
				BEGIN         
					SET @QUERY = @QUERY + ' AND TS.TAXNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS NVARCHAR(MAX))+''','',''))'                          
				END  
			ELSE  
				BEGIN                                
					SET @QUERY = @QUERY + ' AND TS.SECTIONNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS NVARCHAR(MAX))+''','',''))'                          
				END  
		END                                
		IF(@AMTFROM <> 0 OR @AMTTO <> 0)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND DD.PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));      
		END                  
		IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)                                  
		BEGIN                   
			SET @QUERY = @QUERY + ' AND DD.PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';                                  
		END                         
		IF(@TAXAMTFROM <> 0 OR @TAXAMTTO <> 0)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND DD.TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR) + ' AND ' + CAST(@TAXAMTTO AS VARCHAR);                                  
		END                                   
		IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND DD.DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDATETO AS VARCHAR ) + ''''                                  
		END                                    
		IF(@ISCHECKER = 1)        
		BEGIN        
			SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) <> 2'        
		END        
		IF(@NONDEDREASON <> -1)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND DD.NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)       
		END  
		IF(@REFERENCENO <> '')  
		BEGIN  
			SET @QUERY = @QUERY + ' AND D.REFERENCENO LIKE ''%' + @REFERENCENO + '%''';     
		END 
		IF(@TRANSACTIONSTATUS <> -1)
		BEGIN
			SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = ' + CAST(@TRANSACTIONSTATUS AS VARCHAR)
		END  
		SET @QUERY = @QUERY + ' ORDER BY DD.SERIALNO '+ @ORDERBY +'; SELECT * FROM #DEDDISP WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10)) + ';DROP TABLE #DEDDISP';                                  
		EXEC SP_EXECUTESQL @QUERY;       
		DROP TABLE #DEDUCTIONS
		DROP TABLE #CHALLAN
		IF OBJECT_ID('TEMPDB..#DEDUCTEEEMP') IS NOT NULL
		DROP TABLE #DEDUCTEEEMP
		IF OBJECT_ID('TEMPDB..#DEDUCTEENONEMP') IS NOT NULL	
		DROP TABLE #DEDUCTEENONEMP
		IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
		DROP TABLE #DEDCHALINK
		IF OBJECT_ID('TEMPDB..#CHALLANDETAIL') IS NOT NULL
		DROP TABLE #CHALLANDETAIL
		IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
		DROP TABLE #DEDUCTIONDETAIL
		IF OBJECT_ID('TEMPDB..#DDSRNO') IS NOT NULL
		DROP TABLE #DDSRNO
	END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllDeductionDetailsPaged05')
DROP PROCEDURE USP_TDS_GetAllDeductionDetailsPaged05
GO
CREATE PROCEDURE USP_TDS_GetAllDeductionDetailsPaged05
 @StartRow INT,                                  
 @PageSize INT,                                  
 @BRANCHID INT,                                  
 @FORMID INT,                                  
 @QUARTER INT,     
 @SERIALNO INT = -1,                               
 @NAME VARCHAR(75),                                  
 @SECTIONID VARCHAR(MAX),                                  
 @AMTFROM NUMERIC(13,2),                                  
 @AMTTO NUMERIC(13,2),                                  
 @PAIDDATEFROM SMALLDATETIME = NULL,                                  
 @PAIDDATETO SMALLDATETIME = NULL,                                  
 @TAXAMTFROM NUMERIC(13,2),                                  
 @TAXAMTTO NUMERIC(13,2),                                  
 @TAXDATEFROM SMALLDATETIME = NULL,                                  
 @TAXDATETO SMALLDATETIME = NULL,                  
 @ISSUPERADMIN BIT = 1,              
 @PAN INT,        
 @ISCHECKER BIT = 0,    
 @ORDERNO VARCHAR(50) = '',  
 @NONDEDREASON INT = -1,  
 @REFERENCENO VARCHAR(20),
 @TRANSACTIONSTATUS INT = -1,
 @ORDERBY VARCHAR(5),
 @HOBRANCHID INT,  
 @ISZOCLICK INT,
 @BRANCHCODE VARCHAR(50)= ''      
AS                                  
	BEGIN
		DECLARE @RTBRANCHID INT = -1;
		DECLARE @SEARCHRTBRANCHID INT = ISNULL((SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE = @BRANCHCODE ),0);
		IF((SELECT TOP 1 FINANCIALYEAR FROM DEDUCTOR  WITH(NOLOCK) ORDER BY FINANCIALYEAR DESC) = 2018)
			BEGIN
				IF(@HOBRANCHID<>0)
					BEGIN
						SET @RTBRANCHID = CASE WHEN @HOBRANCHID = @BRANCHID THEN -1 ELSE @BRANCHID END;
						SET @BRANCHID = @HOBRANCHID;
					END
				ELSE
					BEGIN
						IF ((SELECT ISZORO FROM COMPANYBRANCH WITH(NOLOCK) 
							WHERE BRANCHID = (SELECT PARENTBRANCHID 
											  FROM COMPANYBRANCH WITH(NOLOCK) 
											  WHERE BRANCHID = @BRANCHID AND ISZORO <> 1)) = 1)
							BEGIN
								SET @RTBRANCHID = @BRANCHID;
								SET @BRANCHID = (SELECT PARENTBRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @RTBRANCHID);
							END
					END
			END
		IF EXISTS(SELECT SERIALNO, DD.BRANCHID FROM DEDUCTIONDETAIL DD 
							INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = DD.BRANCHID
							WHERE DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.BRANCHID = @BRANCHID 
							GROUP BY SERIALNO, DD.BRANCHID
							HAVING COUNT(SERIALNO) > 1)
		BEGIN
			SELECT ROW_NUMBER() OVER(PARTITION BY DD.BRANCHID,DD.FORMID,DD.QUARTER ORDER BY DD.DEDUCTIONID)SERIALNO, DD.DEDUCTIONID 
			INTO #DDSRNO
			FROM DEDUCTIONDETAIL DD
				INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = DD.BRANCHID
			WHERE FORMID = @FORMID AND QUARTER = @QUARTER AND DD.BRANCHID = @BRANCHID
			UPDATE DEDUCTIONDETAIL SET SERIALNO = S.SERIALNO
			FROM DEDUCTIONDETAIL DD
				INNER JOIN #DDSRNO S ON S.DEDUCTIONID = DD.DEDUCTIONID
			UPDATE DEDUCTIONDETAIL SET PARTPAYMENTID = SERIALNO 
			WHERE FORMID = @FORMID AND QUARTER = @QUARTER AND BRANCHID = @BRANCHID
		END               
		DECLARE @FirstRec INT, @LastRec INT;                                  
		DECLARE @QUERY NVARCHAR(MAX),@CHILDQUERY NVARCHAR(MAX);                                  
		DECLARE @ALLOW92A92B INT;                                  
		SET @ALLOW92A92B=0;                                  
		SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS                                   
		SELECT @FirstRec = (@StartRow - 1) * @PageSize;                                  
		SELECT @LastRec = (@StartRow * @PageSize + 1);                                      
		CREATE TABLE #DEDID (DEDUCTIONID INT)
		INSERT INTO #DEDID
		SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		DECLARE @RTQUERY NVARCHAR(MAX);
		CREATE TABLE #DEDUCTIONDETAIL 
		(DEDUCTIONID INT, BRANCHID INT , FORMID INT, QUARTER INT, SERIALNO INT, PARTPAYMENTID INT,SECTIONID INT,DEDUCTEEID INT, ORGPAYMENTMADE NUMERIC(13,2), 
			PAYMENTDATE SMALLDATETIME,ORGINCOMETAX NUMERIC(13,2), INCOMETAXRATE NUMERIC(6,3), ORGEDUCATIONCESS NUMERIC(13,2), EDUCATIONCESSRATE NUMERIC(6,3), ORGSURCHARGE NUMERIC(13,2), SURCHARGERATE NUMERIC(6,3),
			ORGTOTALDEDUCTED NUMERIC(13,2), TAXRATE NUMERIC(6,3),DEDUCTEDDATE SMALLDATETIME, ISBOOKENTRY BIT, NONDEDREASON INT, ISGROSSINGUP BIT,  
			ENTRYTYPE INT,CERTIFICATEDATE SMALLDATETIME,TOTALPURCHASEVALUE NUMERIC(13,2),TRANSSTATUS INT,PAYMENTMADE NUMERIC(13,2),TOTALDEDUCTED NUMERIC(13,2),  
			TIMESTAMP BIGINT,ORDERID INT, ADDLAMOUNT1 NUMERIC(13,2),ADDLAMOUNT2 NUMERIC(13,2),INVOICENO VARCHAR(20),INVOICEDATE SMALLDATETIME,RTBRANCHID INT)	
		IF(@RTBRANCHID = -1)
			BEGIN
			    IF(@ISZOCLICK = 1)
					BEGIN
						INSERT INTO #DEDUCTIONDETAIL
						SELECT DEDUCTIONID, BRANCHID, FORMID, QUARTER, SERIALNO, PARTPAYMENTID,SECTIONID,DEDUCTEEID, ORGPAYMENTMADE, 
						PAYMENTDATE,ORGINCOMETAX, INCOMETAXRATE, ORGEDUCATIONCESS, EDUCATIONCESSRATE, ORGSURCHARGE, SURCHARGERATE,
						ORGTOTALDEDUCTED, TAXRATE,DEDUCTEDDATE, ISBOOKENTRY, NONDEDREASON, ISGROSSINGUP,  
						ENTRYTYPE,CERTIFICATEDATE,TOTALPURCHASEVALUE,TRANSSTATUS,PAYMENTMADE,TOTALDEDUCTED,  
						TIMESTAMP,ORDERID, ADDLAMOUNT1,ADDLAMOUNT2,INVOICENO,INVOICEDATE,RTBRANCHID				
						FROM DEDUCTIONDETAIL WITH(NOLOCK)
						WHERE BRANCHID = @BRANCHID 
							AND FORMID = @FORMID 
							AND QUARTER = @QUARTER
							AND RTBRANCHID = @BRANCHID
					END
			    ELSE
					BEGIN
						INSERT INTO #DEDUCTIONDETAIL
						SELECT DEDUCTIONID, BRANCHID, FORMID, QUARTER, SERIALNO, PARTPAYMENTID,SECTIONID,DEDUCTEEID, ORGPAYMENTMADE, 
						PAYMENTDATE,ORGINCOMETAX, INCOMETAXRATE, ORGEDUCATIONCESS, EDUCATIONCESSRATE, ORGSURCHARGE, SURCHARGERATE,
						ORGTOTALDEDUCTED, TAXRATE,DEDUCTEDDATE, ISBOOKENTRY, NONDEDREASON, ISGROSSINGUP,  
						ENTRYTYPE,CERTIFICATEDATE,TOTALPURCHASEVALUE,TRANSSTATUS,PAYMENTMADE,TOTALDEDUCTED,  
						TIMESTAMP,ORDERID, ADDLAMOUNT1,ADDLAMOUNT2,INVOICENO,INVOICEDATE,RTBRANCHID				
						FROM DEDUCTIONDETAIL WITH(NOLOCK)
						WHERE BRANCHID = @BRANCHID 
							AND FORMID = @FORMID 
							AND QUARTER = @QUARTER
							AND RTBRANCHID <> @BRANCHID
					END
			END
		ELSE
			BEGIN
				INSERT INTO #DEDUCTIONDETAIL
				SELECT DEDUCTIONID, BRANCHID, FORMID, QUARTER, SERIALNO, PARTPAYMENTID,SECTIONID,DEDUCTEEID, ORGPAYMENTMADE, 
				PAYMENTDATE,ORGINCOMETAX, INCOMETAXRATE, ORGEDUCATIONCESS, EDUCATIONCESSRATE, ORGSURCHARGE, SURCHARGERATE,
				ORGTOTALDEDUCTED, TAXRATE,DEDUCTEDDATE, ISBOOKENTRY, NONDEDREASON, ISGROSSINGUP,  
				ENTRYTYPE,CERTIFICATEDATE,TOTALPURCHASEVALUE,TRANSSTATUS,PAYMENTMADE,TOTALDEDUCTED,  
				TIMESTAMP,ORDERID, ADDLAMOUNT1,ADDLAMOUNT2,INVOICENO,INVOICEDATE,RTBRANCHID
				FROM DEDUCTIONDETAIL WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID 
					AND FORMID = @FORMID 
					AND QUARTER = @QUARTER
					AND RTBRANCHID = @RTBRANCHID
			END
		SELECT DL.BRANCHID, DL.DEDUCTIONID, CHALLANID
		INTO #DEDCHALINK
		FROM DEDCHALINK DL WITH(NOLOCK)
		INNER JOIN #DEDUCTIONDETAIL DD
		ON DL.DEDUCTIONID = DD.DEDUCTIONID
		SELECT BRANCHID, CHALLANID, BANKCHALLANNO, CHALLANPAIDDATE, BANKID, FORMID, QUARTER
		INTO #CHALLANDETAIL
		FROM CHALLANDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND QUARTER = @QUARTER
		SELECT DD.DEDUCTIONID, BRANCHID, FORMID, QUARTER, SERIALNO, PARTPAYMENTID,SECTIONID,DEDUCTEEID, ORGPAYMENTMADE, 
		PAYMENTDATE,ORGINCOMETAX, INCOMETAXRATE, ORGEDUCATIONCESS, EDUCATIONCESSRATE, ORGSURCHARGE, SURCHARGERATE,
		ORGTOTALDEDUCTED, TAXRATE,DEDUCTEDDATE, ISBOOKENTRY, NONDEDREASON, ISGROSSINGUP,  
		ENTRYTYPE, CERTIFICATEDATE, ISNULL(TOTALPURCHASEVALUE,0)TOTALPURCHASEVALUE, ISNULL(TRANSSTATUS,2)TRANSSTATUS,PAYMENTMADE,TOTALDEDUCTED,  
		CONVERT(BIGINT,TIMESTAMP) AS TIMESTAMP,ORDERID, ISNULL(ADDLAMOUNT1,0)ADDLAMOUNT1, ISNULL(ADDLAMOUNT2,0)ADDLAMOUNT2, INVOICENO, INVOICEDATE ,RTBRANCHID 
		INTO #DEDUCTIONS  
		FROM #DEDUCTIONDETAIL DD 
		INNER JOIN #DEDID D ON DD.DEDUCTIONID = D.DEDUCTIONID
		DROP TABLE #DEDID
		SELECT DL.DEDUCTIONID,ISNULL(CD.BANKCHALLANNO,'')BANKCHALLANNO, CHALLANPAIDDATE,ISNULL(RB.BSRCODE,'')BSRCODE   
		INTO #CHALLAN  
		FROM #DEDCHALINK DL WITH(NOLOCK) --ON DD.DEDUCTIONID = DL.DEDUCTIONID                                  
		INNER JOIN #CHALLANDETAIL CD  WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID   
		INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID = CD.BANKID                                 
		WHERE  CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.[QUARTER] = @QUARTER
		CREATE TABLE #DED(NAME VARCHAR(75),PAN VARCHAR(10),REFERENCENO VARCHAR(25),DEDUCTEEID INT)
		INSERT INTO #DED  
		SELECT D.NAME,D.PAN,D.REFERENCENO,D.DEDUCTEEID   
		FROM DEDUCTEE D WITH(NOLOCK) WHERE BRANCHID = @BRANCHID           
		IF @FORMID = 1  
		BEGIN      
			SELECT D.NAME,D.PAN,ISNULL(D.REFERENCENO,'')REFERENCENO,D.DEDUCTEEID   
			INTO #DEDUCTEEEMP  
			FROM #DED D  
			INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
		END  
		ELSE  
		BEGIN  
			SELECT D.NAME,D.PAN,ISNULL(D.REFERENCENO,'')REFERENCENO,D.DEDUCTEEID   
			INTO #DEDUCTEENONEMP  
			FROM #DED D  
			INNER JOIN NONEMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
		END  
		DROP TABLE #DED
		SET @QUERY = 'SELECT ROWNUM = IDENTITY(int,1,1),DD.DEDUCTIONID,DD.SERIALNO,D.NAME,PARTPAYMENTID,D.PAN,ISNULL(D.REFERENCENO,'''')REFERENCENO,                                  
		CASE WHEN DD.FORMID = 1 AND ' + CAST(@ALLOW92A92B AS VARCHAR) + '= 1 THEN TS.SECTIONNAME + '' (''+ TS.TAXNAME + '')'' ELSE TS.SECTIONNAME  END AS SECTIONNAME,                                  
		DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,DD.ORGPAYMENTMADE,DD.PAYMENTDATE,DD.SECTIONID,--DD.ERETURNID,       
		DD.ORGINCOMETAX,DD.INCOMETAXRATE,DD.ORGSURCHARGE,DD.SURCHARGERATE,DD.ORGEDUCATIONCESS,DD.EDUCATIONCESSRATE,                                  
		DD.TAXRATE,DD.ORGTOTALDEDUCTED,DD.DEDUCTEDDATE,DD.ISBOOKENTRY,DD.NONDEDREASON,DD.ISGROSSINGUP,DD.ENTRYTYPE,   
		DD.CERTIFICATEDATE, TOTALPURCHASEVALUE, TRANSSTATUS,TIMESTAMP,ISNULL(PO.ORDERNO,'''')ORDERNO,ADDLAMOUNT1,  
		ADDLAMOUNT2,INVOICENO,INVOICEDATE, ISNULL(CD.BANKCHALLANNO,'''')BANKCHALLANNO, CD.CHALLANPAIDDATE,   
		ISNULL(CD.BSRCODE,'''')BSRCODE  
		INTO #DEDDISP  
		FROM #DEDUCTIONS DD ';  
		IF @FORMID = 1  
		BEGIN                                  
			SET @QUERY = @QUERY + ' INNER JOIN  #DEDUCTEEEMP D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID';                                  
		END  
		ELSE  
		BEGIN  
			SET @QUERY = @QUERY + ' INNER JOIN  #DEDUCTEENONEMP D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID'  
		END
		SET @QUERY = @QUERY + ' INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID    
			LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID                                   
			LEFT JOIN #CHALLAN CD ON DD.DEDUCTIONID = CD.DEDUCTIONID                                                                
			WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR);                                  
		IF(@ISSUPERADMIN = 0)                  
		BEGIN                  
			SET @QUERY = @QUERY + ' AND DD.ENTRYTYPE <> 4'                  
		END                  
		IF(@NAME <> '')                                  
		BEGIN                  
			SET @QUERY = @QUERY + ' AND D.NAME LIKE ''%' + @NAME + '%''';                                  
		END    
		IF(@SERIALNO <> -1)  
		BEGIN   
			SET @QUERY = @QUERY + ' AND DD.SERIALNO = ' + CAST(@SERIALNO AS VARCHAR)  
		END                           
		IF(@PAN = 1)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND D.PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')'               
		END                
		ELSE IF(@PAN = 2)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND D.PAN = ''PANAPPLIED'''              
		END                
		ELSE IF(@PAN = 3)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND D.PAN = ''PANINVALID'''              
		END                
		ELSE IF(@PAN = 4)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND D.PAN = ''PANNOTAVBL'''              
		END                
		IF(@SECTIONID <> '')                                  
		BEGIN    
			IF(@FORMID = 1 AND @ALLOW92A92B = 1)  
				BEGIN         
					SET @QUERY = @QUERY + ' AND TS.TAXNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS NVARCHAR(MAX))+''','',''))'                          
				END  
			ELSE  
				BEGIN                                
					SET @QUERY = @QUERY + ' AND TS.SECTIONNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS NVARCHAR(MAX))+''','',''))'                          
				END  
		END                                
		IF(@AMTFROM <> 0 OR @AMTTO <> 0)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND DD.PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));      
		END                  
		IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)                                  
		BEGIN                   
			SET @QUERY = @QUERY + ' AND DD.PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';                                  
		END                         
		IF(@TAXAMTFROM <> 0 OR @TAXAMTTO <> 0)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND DD.TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR) + ' AND ' + CAST(@TAXAMTTO AS VARCHAR);                                  
		END                                   
		IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND DD.DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDATETO AS VARCHAR ) + ''''                                  
		END                                    
		IF(@ISCHECKER = 1)        
		BEGIN        
			SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) <> 2'        
		END        
		IF(@NONDEDREASON <> -1)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND DD.NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)       
		END  
		IF(@REFERENCENO <> '')  
		BEGIN  
			SET @QUERY = @QUERY + ' AND D.REFERENCENO LIKE ''%' + @REFERENCENO + '%''';     
		END 
		IF(@TRANSACTIONSTATUS <> -1)
		BEGIN
			SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = ' + CAST(@TRANSACTIONSTATUS AS VARCHAR)
		END
		IF(@BRANCHCODE <> '')
		BEGIN 
			SET @QUERY = @QUERY + ' AND ISNULL(DD.RTBRANCHID,0) = ' + CAST(@SEARCHRTBRANCHID AS VARCHAR)
		END         
		SET @QUERY = @QUERY + ' ORDER BY DD.SERIALNO '+ @ORDERBY +'; SELECT * FROM #DEDDISP WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10)) + ';DROP TABLE #DEDDISP';                                  
		EXEC SP_EXECUTESQL @QUERY;     
		DROP TABLE #DEDUCTIONS
		DROP TABLE #CHALLAN
		IF OBJECT_ID('TEMPDB..#DEDUCTEEEMP') IS NOT NULL
		DROP TABLE #DEDUCTEEEMP
		IF OBJECT_ID('TEMPDB..#DEDUCTEENONEMP') IS NOT NULL	
		DROP TABLE #DEDUCTEENONEMP
		IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
		DROP TABLE #DEDCHALINK
		IF OBJECT_ID('TEMPDB..#CHALLANDETAIL') IS NOT NULL
		DROP TABLE #CHALLANDETAIL
		IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
		DROP TABLE #DEDUCTIONDETAIL
		IF OBJECT_ID('TEMPDB..#DDSRNO') IS NOT NULL
		DROP TABLE #DDSRNO
	END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTIONLINKSONCHALLANID')
DROP PROCEDURE USP_TDS_GETALLDEDUCTIONLINKSONCHALLANID
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTIONLINKSONCHALLANID]
	@CHALLANID INT
AS
	BEGIN
		SELECT DEDCHALINKID,DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE CHALLANID=@CHALLANID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETALLDEDUCTIONS
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTIONS]
@BRANCHID INT=NULL,
@FORMID INT,
@QUARTER INT,
@ISFROMERETURN BIT
AS
BEGIN
DECLARE @CODE INT; SELECT @CODE=BASEID FROM COMPANYBRANCH WHERE BRANCHID=@BRANCHID
DECLARE @SQLQUERY NVARCHAR(MAX)
 SET @SQLQUERY='SELECT  D.DEDUCTEEID,NE.SERIALNO,DD.SERIALNO AS DEDSERIALNO,CB.BRANCHNAME+''-''+CB.BRANCHCODE AS BRANCHCODE,PCB.BRANCHNAME+''-''+PCB.BRANCHCODE AS PARENTBRANCHCODE,D.NAME,D.PAN,DD.DEDUCTIONID,DD.PAYMENTMADE,DD.TAXRATE,DD.TOTALDEDUCTED,DD.NONDEDREASON
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID
             INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID
             INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID
             INNER JOIN COMPANYBRANCH PCB WITH(NOLOCK) ON PCB.BRANCHID=CB.PARENTBRANCHID
             WHERE ENTRYTYPE=4 AND FORMID='+CAST (@FORMID AS VARCHAR)+' AND QUARTER='+ CAST(@QUARTER AS VARCHAR)
  IF(@BRANCHID IS NOT NULL)
  BEGIN
    IF(@ISFROMERETURN=1)
		SET @SQLQUERY= @SQLQUERY + ' AND DD.BRANCHID= '+CAST(@BRANCHID AS VARCHAR)
	ELSE
		SET @SQLQUERY= @SQLQUERY + 'AND CB.PARENTBASEID LIKE ''%'+CAST(@CODE AS VARCHAR)+'%'''+' ORDER BY PCB.BRANCHID'
  END
  EXEC SP_EXECUTESQL @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTIONSERIALNO')
DROP PROCEDURE USP_TDS_GETALLDEDUCTIONSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTIONSERIALNO]    
@QUARTER INT,   
@FORMID VARCHAR(10),   
@BRANCHCODES NVARCHAR(MAX)    
AS    
BEGIN
  SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')    
  SELECT ISNULL(MAX(SERIALNO),0)AS SERIALNO,DD.QUARTER,BRANCHCODE,CB.BRANCHID,DD.FORMID    
  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID=CB.BRANCHID
  INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE     
  WHERE DD.QUARTER=@QUARTER
  AND DD.FORMID IN (SELECT * FROM DBO.UDF_TDS_SPLITSTRING(@FORMID,','))   
  GROUP BY BRANCHCODE,CB.BRANCHID,DD.FORMID,DD.QUARTER     
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTIONSONFORMID')
DROP PROCEDURE USP_TDS_GETALLDEDUCTIONSONFORMID
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTIONSONFORMID]
	@FORMID INT,
	@BRANCHID INT
AS
	BEGIN
		SELECT DD.DEDUCTEEID,D.NAME,D.PAN,NE.DEDUCTEECODE,DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,DD.ERETURNID,DD.MODE,DD.DEDUCTEEPAN,DD.LASTDEDUCTEEPAN,DD.DEDUCTEEPANREF,
			   DD.LASTDEDUCTEEPANREF,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.DEDUCTEDDATE,DD.SECTIONID ,TS.SECTIONNAME,
			   DD.INCOMETAXRATE,DD.SURCHARGERATE,DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,ISNULL(DD.SERIALNO,'') AS DEDSERIALNO, CD.SERIALNO AS CHALSERIALNO,
			   DL.DEDCHALINKID, CD.CHALLANID,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL ,CD.[QUARTER] AS CHALLANQUARTER ,CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CD.ISCOMPANY END AS CHALLANCODE
		FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID
						  INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON DD.SECTIONID=TS.SECTIONID
						  LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
						  LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
						  LEFT JOIN DBO.NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID
		WHERE  DD.FORMID=@FORMID AND DD.BRANCHID=@BRANCHID ;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTORDETAIL')
DROP PROCEDURE USP_TDS_GETALLDEDUCTORDETAIL
GO
CREATE  PROC [DBO].[USP_TDS_GETALLDEDUCTORDETAIL]  
AS  
SELECT BD.BRANCHID,D.TAN FROM DEDUCTOR D WITH(NOLOCK) 
INNER JOIN  
(  
SELECT MAX(DEDUCTORID)DEDUCTORID,BRANCHID FROM BRANCHDEDUCTORS WITH(NOLOCK)  
GROUP BY BRANCHID  
)BD  
ON D.DEDUCTORID=BD.DEDUCTORID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLDEDUCTORDETAILS')
DROP PROCEDURE USP_TDS_GETALLDEDUCTORDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETALLDEDUCTORDETAILS]
(
@TAN VARCHAR(10)
)
AS
 SELECT TOP 1 BD.BRANCHID,C.BRANCHNAME,C.BRANCHCODE FROM DEDUCTOR D
 INNER JOIN
 (
 SELECT BRANCHID,MAX(DEDUCTORID)DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK)
 GROUP BY BRANCHID
 )BD
  ON BD.DEDUCTORID=D.DEDUCTORID
 INNER JOIN COMPANYBRANCH C WITH(NOLOCK)
  ON C.BRANCHID=BD.BRANCHID
  WHERE D.TAN=@TAN
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPAUTOCOMPLETE')
DROP PROCEDURE USP_TDS_GETALLEMPAUTOCOMPLETE
GO
CREATE PROCEDURE [USP_TDS_GETALLEMPAUTOCOMPLETE]
 @BRANCHID INT,    
 @PREFIXTEXT NVARCHAR(MAX),    
 @RECORDCOUNT INT    
AS    
 BEGIN    
  DECLARE @QUERY NVARCHAR(MAX);    
  SET @QUERY = 'SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + ' (CAST(DEDUCTEE.DEDUCTEEID AS VARCHAR) + ''-'' + CAST(EMPLOYEE.GENDER AS VARCHAR) + ''-'' + CAST(EMPLOYEE.ISSENIORCITIZEN AS VARCHAR) + ''-''+ CASE WHEN PAN IN (''PANAPPLIED'', ''PANNOTAVBL'', ''PANINVALID'') THEN ''1'' ELSE ''0'' END) AS DEDUCTEEID, (DEDUCTEE.NAME + ''('' + CAST(EMPLOYEE.SERIALNO AS VARCHAR) + '')''+''-''+DEDUCTEE.PAN) AS DEDUCTEENAME
       FROM  DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = EMPLOYEE.DEDUCTEEID    
       WHERE  DEDUCTEE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)  + ' AND DEDUCTEE.NAME + ''('' + CAST(EMPLOYEE.SERIALNO AS VARCHAR) + '')'' LIKE ''' + @PREFIXTEXT + '%''';    
  EXEC SP_EXECUTESQL @QUERY;    
--PRINT @QUERY    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPCOMID')
DROP PROCEDURE USP_TDS_GETALLEMPCOMID
GO
CREATE PROCEDURE [USP_TDS_GETALLEMPCOMID]    
@REFERENCENOS NVARCHAR(MAX)    
AS    
 BEGIN    
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
 SET NOCOUNT ON   
 SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')           
 SELECT D.BRANCHID, CB.BRANCHCODE , LC.COMID, D.REFERENCENO FROM DEDUCTEE D WITH(NOLOCK)    
 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID     
 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID    
 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID    
 INNER JOIN #REFNO R ON R.DATA=D.REFERENCENO  
 WHERE ISNULL(D.REFERENCENO,'')<>'' 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPLOYEE')
DROP PROCEDURE USP_TDS_GETALLEMPLOYEE
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETALLEMPLOYEE] 
 @BRANCHID INT    
AS    
 BEGIN    
  SELECT D.BRANCHID,D.DEDUCTEEID,D.SALUTATION,D.NAME,D.PAN,D.PANREFERENCE,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,    
      D.ADDRESS5,D.STATEID,D.PINCODE,D.REFERENCENO,D.PHONENO,D.EMAILADDRESS,E.DESIGNATION,    
      E.SERIALNO,E.EMPLOYEEID,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.GENDER,E.ISSENIORCITIZEN,    
      SM.STATENAME,0 AS ISDEDUCTEEUSEDINCORRECTION,ISNULL(D.PANSTATUS,'')PANSTATUS, ISNULL(ACCOUNTNO,'')ACCOUNTNO,  
      ISNULL(PPONUMBER,'')PPONUMBER, E.DATEOFBIRTH, C.DEDUCTEESERIALNO  
  FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID     
        LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON D.STATEID = SM.STATEID     
        LEFT JOIN CORREMPLOYEE C WITH(NOLOCK) ON D.DEDUCTEEID = C.DEDUCTEEID     
  WHERE D.BRANCHID = @BRANCHID    
END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPLOYEEBASEDONBRANCH')
DROP PROCEDURE USP_TDS_GETALLEMPLOYEEBASEDONBRANCH
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETALLEMPLOYEEBASEDONBRANCH] 
	@BRANCHID NVARCHAR(MAX),
	@REFERENCENO NVARCHAR(MAX),
	@ISDEDUCTEE BIT 
AS  
	BEGIN			
		DECLARE @QUERY NVARCHAR(MAX)          
		DECLARE @JION VARCHAR(20);
		SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID,',') 
		SELECT DISTINCT * INTO #TEMPREF FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENO,',')        
		IF @ISDEDUCTEE=1          
			SET @JION='INNER';          
		ELSE          
			SET @JION='LEFT';          
		SET @QUERY= 'SELECT  MAX(D.DEDUCTEEID) DEDUCTEEID, ISNULL(D.REFERENCENO,'''') REFERENCENO,
					MAX(D.PAN) PAN, C.BRANCHCODE, D.BRANCHID, D.PANREFERENCE 
					FROM DEDUCTEE D WITH(NOLOCK) 
					INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON D.BRANCHID=C.BRANCHID '          
					+@JION+' JOIN EMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID 
					INNER JOIN #TEMPBR TB ON TB.DATA=C.BRANCHID
					INNER JOIN #TEMPREF TR ON TR.DATA=D.REFERENCENO
					LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON D.STATEID = SM.STATEID          
					WHERE ISNULL(D.REFERENCENO,'''') <>'''' AND D.DEDUCTEEID IN 
					(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
					EXCEPT 
					SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))  
					GROUP BY D.REFERENCENO, C.BRANCHCODE,D.BRANCHID, D.PANREFERENCE 
					ORDER BY C.BRANCHCODE'          
		EXEC SP_EXECUTESQL @QUERY  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPLOYEEBASEDONBRANCHANDPAN')
DROP PROCEDURE USP_TDS_GETALLEMPLOYEEBASEDONBRANCHANDPAN
GO
CREATE PROCEDURE USP_TDS_GETALLEMPLOYEEBASEDONBRANCHANDPAN
	@BRANCHID NVARCHAR(MAX),
	@PAN NVARCHAR(MAX)
AS  
	BEGIN			
		SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID,',') 
		SELECT DISTINCT * INTO #TEMPPAN FROM DBO.UDF_TDS_SPLITSTRING(@PAN,',')        
		SELECT  D.DEDUCTEEID, ISNULL(D.REFERENCENO,'') REFERENCENO,
				D.PAN, C.BRANCHCODE, D.BRANCHID 
				FROM DEDUCTEE D WITH(NOLOCK) 
				INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON D.BRANCHID=C.BRANCHID           
				INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID 
				INNER JOIN #TEMPBR TB ON TB.DATA=C.BRANCHID
				INNER JOIN #TEMPPAN TR ON TR.DATA=D.PAN
				LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON D.STATEID = SM.STATEID          
				WHERE ISNULL(D.REFERENCENO,'') = '' AND D.DEDUCTEEID IN 
				(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
				EXCEPT 
				SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))  
				ORDER BY C.BRANCHCODE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPLOYEECOUNT')
DROP PROCEDURE USP_TDS_GETALLEMPLOYEECOUNT
GO
CREATE PROCEDURE USP_TDS_GETALLEMPLOYEECOUNT
@REFERENCENO VARCHAR(20)
AS
   BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);		
		SELECT D.REFERENCENO, MAX(D.DEDUCTEEID)DEDUCTEEID
		INTO #DEDUCTEE
		FROM DEDUCTEE D WITH(NOLOCK)
		INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		WHERE ISNULL(D.REFERENCENO, '') <> ''
		GROUP BY D.REFERENCENO
		SET @SQLQUERY = ' SELECT ROW_NUMBER() OVER(ORDER BY D.NAME, D.PAN, D.REFERENCENO) ROWNO ,D.NAME, D.PAN, D.REFERENCENO 
		 							INTO #ALLDEDUCTEE
									FROM DEDUCTEE D WITH(NOLOCK)
									INNER JOIN #DEDUCTEE DE ON D.DEDUCTEEID = DE.DEDUCTEEID '
		IF(@REFERENCENO <> '')
			SET @SQLQUERY = @SQLQUERY  + ' WHERE D.REFERENCENO LIKE ''' + @REFERENCENO + '%'''
		SET @SQLQUERY = @SQLQUERY  + '; SELECT COUNT(ROWNO) FROM #ALLDEDUCTEE'
		EXEC SP_EXECUTESQL @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_GETALLEMPLOYEEDETAIL
GO
CREATE PROCEDURE USP_TDS_GETALLEMPLOYEEDETAIL
@VALUE BIT,        
@BRANCHID NVARCHAR(MAX)              
AS              
 BEGIN            
	DECLARE @SQLQUERY NVARCHAR(MAX);       
	DECLARE @BRANCH TABLE (BRANCHID INT);    
		IF(@BRANCHID <> '')
			BEGIN 
				INSERT INTO @BRANCH
				SELECT * FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID,',')
			END 
		ELSE
			BEGIN 
			INSERT INTO @BRANCH
			SELECT BRANCHID FROM COMPANYBRANCH
			END 
	IF(@VALUE = 1)              
		BEGIN     
		SELECT DEDUCTEEID,EMPLOYMENTFROM, EMPLOYMENTTO, GENDER, ISSENIORCITIZEN        
		INTO #EMPLOYEE
		FROM EMPLOYEE
		SELECT BRANCHID, BRANCHCODE
		INTO #COMPANYBRANCH
		FROM COMPANYBRANCH
		SELECT D.REFERENCENO, D.DEDUCTEEID, CB.BRANCHCODE, CB.BRANCHID, NAME AS DEDUCTEENAME, PAN,        
			ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, PINCODE, E.EMPLOYMENTFROM, E.EMPLOYMENTTO,        
			E.GENDER, E.ISSENIORCITIZEN , D.PANREFERENCE       
		FROM DEDUCTEE D WITH(NOLOCK)              
			INNER JOIN #EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID        
			INNER JOIN #COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID      
			INNER JOIN @BRANCH C ON C.BRANCHID = CB.BRANCHID         
		WHERE LEN(ISNULL(D.REFERENCENO,'')) > 0     
		END              
	ELSE              
		BEGIN              
			SELECT DE.REFERENCENO, D.DEDUCTEEID, CB.BRANCHCODE, CB.BRANCHID,        
				NAME AS DEDUCTEENAME, PAN, '' AS ADDRESS1, '' AS ADDRESS2,'' AS ADDRESS3,'' AS ADDRESS4,      
				'' AS ADDRESS5,0 AS STATEID,'' AS PINCODE,         
				'' AS EMPLOYMENTFROM, '' AS EMPLOYMENTTO, 0 AS GENDER, 0 AS ISSENIORCITIZEN              
		   FROM              
		  (              
			 SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)             
			 EXCEPT              
			 SELECT DEDUCTEEID FROM               
			 (              
				SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)             
				INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID                
				UNION              
				SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)             
				INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID               
			 )T              
		   )D              
		   INNER JOIN DEDUCTEE DE WITH(NOLOCK) ON DE.DEDUCTEEID = D.DEDUCTEEID                 
		   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DE.BRANCHID     
		   INNER JOIN @BRANCH C ON C.BRANCHID = CB.BRANCHID           
		END  
		EXEC SP_EXECUTESQL @SQLQUERY; 
		IF OBJECT_ID('TEMPDB..#EMPLOYEE') IS NOT NULL
			DROP TABLE #EMPLOYEE  
		IF OBJECT_ID('TEMPDB..#COMPANYBRANCH') IS NOT NULL
			DROP TABLE #COMPANYBRANCH           
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllEmployeePaged')
DROP PROCEDURE USP_TDS_GetAllEmployeePaged
GO
CREATE PROCEDURE USP_TDS_GetAllEmployeePaged 
@PAGEINDEX INT,
@PAGESIZE INT,
@REFERENCENO VARCHAR(20)
AS
   BEGIN
		DECLARE @STARTINDEX INT, @LASTINDEX INT, @SQLQUERY NVARCHAR(MAX);
		SET @STARTINDEX = (@PAGEINDEX - 1) *@PAGESIZE;
		SET @LASTINDEX = (@PAGEINDEX * @PAGESIZE + 1);  
		SELECT D.REFERENCENO, MAX(D.DEDUCTEEID)DEDUCTEEID
		INTO #DEDUCTEE
		FROM DEDUCTEE D WITH(NOLOCK)
		INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		WHERE ISNULL(D.REFERENCENO, '') <> ''
		GROUP BY D.REFERENCENO
		SET @SQLQUERY = ' SELECT ROW_NUMBER() OVER(ORDER BY D.NAME, D.PAN, D.REFERENCENO) ROWNO ,D.NAME, D.PAN, D.REFERENCENO, LC.COMID 
		 							INTO #ALLDEDUCTEE
									FROM DEDUCTEE D WITH(NOLOCK)
									INNER JOIN #DEDUCTEE DE ON D.DEDUCTEEID = DE.DEDUCTEEID									
									INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
									INNER JOIN LINKTOTC LC WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID'
		IF(@REFERENCENO <> '')
			SET @SQLQUERY = @SQLQUERY  + ' WHERE D.REFERENCENO LIKE ''' + @REFERENCENO + '%'''
		SET @SQLQUERY = @SQLQUERY  + '; SELECT NAME, PAN , REFERENCENO, COMID FROM #ALLDEDUCTEE WHERE ROWNO > ' + CAST(@STARTINDEX AS VARCHAR) + ' AND
																										ROWNO <  ' + CAST(@LASTINDEX AS VARCHAR) 
		EXEC SP_EXECUTESQL @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPLOYEEPANREFERENCE')
DROP PROCEDURE USP_TDS_GETALLEMPLOYEEPANREFERENCE
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAllEmployeePanReference]        
AS        
BEGIN        
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED        
  SELECT ISNULL(MAX(PANREFERENCE),'') PANREFERENCE, BRANCHCODE, ISNULL(D.BRANCHID,0) BRANCHID 
  FROM DEDUCTEE D        
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID=D.DEDUCTEEID        
  RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID=CB.BRANCHID        
  GROUP BY BRANCHCODE, D.BRANCHID        
END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPNONEMPDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETALLEMPNONEMPDETAILSFORGRID
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETALLEMPNONEMPDETAILSFORGRID] 
 @BRANCHID INT,   
 @ISEMPLOYEE BIT  
AS   
 BEGIN     
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED   
		DECLARE @SQLQUERY NVARCHAR(MAX);   
		DECLARE @SQLCOMMONQUERY NVARCHAR(MAX);   
	    SET @SQLCOMMONQUERY = 'D.DEDUCTEEID, D.SALUTATION AS TITLE, D.[NAME], D.DOB, D.PAN, D.PANREFERENCE,D.PANSTATUS,   
							CASE WHEN (LEN(ISNULL(D.PANSTATUS,'''')) > 0 AND D.PANSTATUS <> ''PAN IS NOT PRESENT IN ITD DATABASE. PAN IS INVALID.'')THEN -1 ELSE -10 END AS VALID,   
							CASE WHEN D.PANSTATUS = ''PAN IS NOT PRESENT IN ITD DATABASE. PAN IS INVALID.'' THEN -2 ELSE -10 END AS INVALID,   
							D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, SM.STATENAME, D.PINCODE, D.PHONENO, D.MOBILE, D.EMAILADDRESS';   
	    IF(@ISEMPLOYEE = 1)   
			BEGIN   
				SET @SQLQUERY = 'SELECT E.SERIALNO, ' + @SQLCOMMONQUERY +   
								', E.DESIGNATION, E.EMPLOYMENTFROM, E.EMPLOYMENTTO, E.GENDER, E.ISSENIORCITIZEN   
								FROM (DEDUCTEE D INNER JOIN STATEMASTER SM ON D.STATEID = SM.STATEID) INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID';   
			END   
		ELSE   
			BEGIN   
				SET @SQLQUERY = 'SELECT E.SERIALNO, ' + @SQLCOMMONQUERY +   
								',E.DEDUCTEECODE, CASE WHEN E.DEDUCTEECODE=1 THEN ''COMPANIES'' ELSE ''NON COMPANIES'' END AS CODE,   
								 E.ISAPPLICABLE26, E.ISAPPLICABLE27, E.ISAPPLICABLE27E, E.ISTRANSPORTER,E.BRANCHNAME  
								FROM (DEDUCTEE D INNER JOIN STATEMASTER SM ON D.STATEID = SM.STATEID) INNER JOIN NONEMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID';   
			END 				   
        SET @SQLQUERY = @SQLQUERY    
				+ ' WHERE D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR);   
		SET @SQLQUERY = @SQLQUERY + ' ORDER BY E.SERIALNO';      		  
		EXECUTE SP_EXECUTESQL @SQLQUERY;     
	 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllEmpRefNoAutoComplete')
DROP PROCEDURE USP_TDS_GetAllEmpRefNoAutoComplete
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAllEmpRefNoAutoComplete]
 @BRANCHID INT,      
 @PREFIXTEXT NVARCHAR(MAX),      
 @RECORDCOUNT INT,
 @ISPENSIONER BIT = 0,
 @ISFROMDEDUCTION BIT = 0   
AS      
 BEGIN      
  DECLARE @QUERY NVARCHAR(MAX);      
  SET @QUERY = 'SELECT ROW_NUMBER() OVER (ORDER BY DEDUCTEE.DEDUCTEEID)ROW_NUM, DEDUCTEE.EMPTYPE, 
			  CAST(LC.COMID AS VARCHAR) + ''-'' + CAST(DEDUCTEE.DEDUCTEEID AS VARCHAR) + ''-''+ (DEDUCTEE.NAME + ''('' + CAST(EMPLOYEE.SERIALNO AS VARCHAR) + '')''+''-''+DEDUCTEE.PAN + ''-''+ CAST(EMPLOYEE.ISSENIORCITIZEN AS VARCHAR) + ''-'' + CAST(EMPLOYEE.GENDER AS VARCHAR)) AS DEDUCTEENAME,
			  DEDUCTEE.REFERENCENO
			  INTO #DED
       FROM DEDUCTEE WITH(NOLOCK) 
       INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = EMPLOYEE.DEDUCTEEID
       INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = EMPLOYEE.EMPLOYEEID
       WHERE DEDUCTEE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)  + ' AND DEDUCTEE.REFERENCENO LIKE ''' + @PREFIXTEXT + '%'''; 
     IF(@ISFROMDEDUCTION = 0)
		BEGIN 
		  IF(@ISPENSIONER = 1)
			SET @QUERY = @QUERY + ' AND EMPTYPE = 1'
		  ELSE
			SET @QUERY = @QUERY + ' AND ISNULL(EMPTYPE,0) = 0'
		END
    SET @QUERY = @QUERY + ';SELECT DEDUCTEENAME, REFERENCENO FROM #DED WHERE ROW_NUM <=' + CAST(@RECORDCOUNT AS VARCHAR)
	EXEC SP_EXECUTESQL @QUERY;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEMPWORKMONTHS')
DROP PROCEDURE USP_TDS_GETALLEMPWORKMONTHS
GO
CREATE PROCEDURE  USP_TDS_GETALLEMPWORKMONTHS
@BRANCHCODES NVARCHAR(MAX)
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON  
SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING( @BRANCHCODES ,',') 
SELECT EW.* FROM EMPWORKMONTH  EW WITH(NOLOCK)
INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID=EW.BRANCHID
 INNER JOIN #BRANCHES B ON B.DATA=C.BRANCHCODE
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEXISTINGCHALLANSINCORR')
DROP PROCEDURE USP_TDS_GETALLEXISTINGCHALLANSINCORR
GO
CREATE PROCEDURE USP_TDS_GETALLEXISTINGCHALLANSINCORR  
 @STARTROW INT,  
    @PAGESIZE INT,  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT  
 AS  
   BEGIN  
   SET NOCOUNT ON  
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */  
  DECLARE @FIRSTREC INT, @LASTREC INT,@SQLQUERY NVARCHAR(MAX);  
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);   
  SELECT * INTO #CHALLAN FROM  
   (  
    SELECT SERIALNO FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  
    EXCEPT  
    SELECT CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  
   )D  
  SET @SQLQUERY= 'SELECT ID = IDENTITY(INT,1,1), * INTO #CHALLANS FROM  
    (  
     SELECT 7 AS CORRECTIONSTATUS,CD.SERIALNO,CD.BRANCHID,CD.FORMID,CD.QUARTER,ISNULL(CD.CHALLANID,-1) AS CHALLANID,  
               ERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,CD.MODEOFPAYMENT,  
         CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,  
         CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CD.INTEREST,  
         CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,  
         CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,  
         ISNULL(RB.BSRCODE,'''') AS BSRCODE,ISNULL(RB.BSRCODE,'''') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,  
         CD.FEE, CD.MINORHEAD,  
         ISNULL(TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER  
    FROM CHALLANDETAIL CD WITH(NOLOCK)  
    INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID = TS.SECTIONID  
    INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID    
    LEFT JOIN   
    (  
     SELECT DISTINCT CHALLANID FROM DEDCHALINK WITH(NOLOCK) WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '  
     )DL ON DL.CHALLANID = CD.CHALLANID      
    INNER JOIN #CHALLAN DE ON DE.SERIALNO = CD.SERIALNO  
    WHERE CD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
           CD.QUARTER = '+CAST(@QUARTER AS VARCHAR)   
  SET @SQLQUERY=@SQLQUERY+')C;SELECT * FROM #CHALLANS WHERE ID > '+CAST(@FIRSTREC AS VARCHAR)+ ' AND ID < '+CAST(@LASTREC AS VARCHAR)  
  EXECUTE SP_EXECUTESQL @SQLQUERY  
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLEXISTINGDEDUCTIONSINCORR')
DROP PROCEDURE USP_TDS_GETALLEXISTINGDEDUCTIONSINCORR
GO
CREATE PROCEDURE USP_TDS_GETALLEXISTINGDEDUCTIONSINCORR
	@STARTINDEX INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
	AS
	  BEGIN
			DECLARE @DEDUCTEE TABLE(DEDUCTEEID INT, NAME VARCHAR(75), PAN VARCHAR(10), SERIALNO INT, DEDUCTEECODE INT);
		    DECLARE @FIRSTREC INT, @LASTREC INT,@SQLQUERY NVARCHAR(MAX);  
		    SELECT @FIRSTREC = (@STARTINDEX - 1) * @PAGESIZE  
		    SELECT @LASTREC = (@STARTINDEX * @PAGESIZE + 1);  
			IF(@FORMID <> 1)
			  BEGIN
				INSERT INTO @DEDUCTEE
				SELECT D.DEDUCTEEID, D.NAME , D.PAN, NE.SERIALNO, NE.DEDUCTEECODE FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
				WHERE D.BRANCHID = @BRANCHID
			 END
			ELSE
			   BEGIN
				INSERT INTO @DEDUCTEE
				SELECT D.DEDUCTEEID, D.NAME , D.PAN, NE.SERIALNO, 0 AS DEDUCTEECODE FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
				WHERE D.BRANCHID = @BRANCHID
			 END
			SELECT * INTO #DEDUCTION FROM
			(
				SELECT SERIALNO FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
				EXCEPT
				SELECT DEDUCTIONSERIALNO FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			)D
			SELECT ROW_NUMBER() OVER(ORDER BY DEDUCTIONSERIALNO) ROWNO, * 
			INTO #DEDUCTIONS
			FROM
			(
				SELECT DD.BRANCHID, DD.FORMID, DD.QUARTER, DD.SERIALNO AS DEDUCTIONSERIALNO, D.NAME + '('+CAST(D.SERIALNO AS VARCHAR)+')' AS NAME, D.DEDUCTEECODE, DD.SECTIONID,
						   TS.SECTIONNAME, D.PAN,PAYMENTMADE, PAYMENTDATE, TOTALDEDUCTED, DD.TAXRATE, ISTAXINFOEDITABLE, DEDUCTEDDATE, DD.INCOMETAX,
						  DD.EDUCATIONCESS, DD.SURCHARGE, INCOMETAXRATE, SURCHARGERATE, EDUCATIONCESSRATE, NONDEDREASON, ISBOOKENTRY,DD.ISGROSSINGUP, CD.SERIALNO 	
				 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN @DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
				INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
				INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
				INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
				INNER JOIN #DEDUCTION DE WITH(NOLOCK) ON DE.SERIALNO = DD.SERIALNO
				WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND TOTALDEDUCTED > 0
				UNION ALL
				SELECT DD.BRANCHID, DD.FORMID, DD.QUARTER, DD.SERIALNO AS DEDUCTIONSERIALNO, D.NAME + '('+CAST(D.SERIALNO AS VARCHAR)+')' AS NAME, D.DEDUCTEECODE, DD.SECTIONID,
						   TS.SECTIONNAME, D.PAN,PAYMENTMADE, PAYMENTDATE, TOTALDEDUCTED, DD.TAXRATE, ISTAXINFOEDITABLE, DEDUCTEDDATE, DD.INCOMETAX,
						  DD.EDUCATIONCESS, DD.SURCHARGE, INCOMETAXRATE, SURCHARGERATE, EDUCATIONCESSRATE, NONDEDREASON, ISBOOKENTRY, DD.ISGROSSINGUP, -1 AS SERIALNO 	
				 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN @DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
				INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID	
				INNER JOIN #DEDUCTION DE ON DE.SERIALNO = DD.SERIALNO
				WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND TOTALDEDUCTED = 0 
			)T
			SELECT * FROM #DEDUCTIONS WHERE ROWNO > @FIRSTREC AND ROWNO < @LASTREC
	  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLFINACLEMONTHS')
DROP PROCEDURE USP_TDS_GETALLFINACLEMONTHS
GO
CREATE PROCEDURE [USP_TDS_GETALLFINACLEMONTHS]
AS
BEGIN
 SELECT DISTINCT CASE WHEN (LEN(MONTH(DEDUCTEDDATE))=1) THEN '0' + CAST(MONTH(DEDUCTEDDATE) AS VARCHAR)
 ELSE  CAST(MONTH(DEDUCTEDDATE) AS VARCHAR) END AS
 MONTH FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE ENTRYTYPE=4 AND DEDUCTEDDATE IS NOT NULL ORDER BY MONTH
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLISVALIDACKNO')
DROP PROCEDURE USP_TDS_GETALLISVALIDACKNO
GO
CREATE PROCEDURE USP_TDS_GETALLISVALIDACKNO
AS
BEGIN
	SELECT  CAST(ISNULL(BRANCHID,'') AS VARCHAR)  
		+ '^' + CAST(ISNULL(FORMID,'') AS VARCHAR) 
		+ '^' + CAST(ISNULL(QUARTER,'') AS VARCHAR) AS BRANCHID, 
		CAST(ISNULL(ISVALID,'') AS VARCHAR)
		+ '^' + CAST(ISNULL(CONVERT(VARCHAR,ERETURNGENDATE,103),'') AS VARCHAR)  AS ISVALID  
		FROM ACKNO 
		--WHERE ISVALID = 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLLOAN')
DROP PROCEDURE USP_TDS_GETALLLOAN
GO
CREATE PROCEDURE [USP_TDS_GETALLLOAN]  
AS  
 BEGIN  
 SELECT LOANID, NAME FROM LOAN   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLMONTHSALARYDETAILS')
DROP PROCEDURE USP_TDS_GETALLMONTHSALARYDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETALLMONTHSALARYDETAILS] 
@MONTHID INT,            
@REFERENCENOS NVARCHAR(MAX),        
@SALARYHEAIDS  NVARCHAR(MAX)         
AS            
BEGIN          
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED            
 SELECT LC.COMID,D.REFERENCENO,C.BRANCHCODE, ISNULL(SD.SALARYHEADID,0)SALARYHEADID  FROM LINKTOTC LC            
 INNER JOIN EMPLOYEE E ON LC.EMPLOYEEID = E.EMPLOYEEID            
 INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID           
 INNER JOIN COMPANYBRANCH C ON C.BRANCHID=D.BRANCHID      
 INNER JOIN SALDETAIL SD ON SD.COMID = LC.COMID         
 WHERE D.REFERENCENO IN (SELECT * FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')) 
 AND SD.MONTHID = @MONTHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLMONTHSALARYDETAILSFORUPDATE')
DROP PROCEDURE USP_TDS_GETALLMONTHSALARYDETAILSFORUPDATE
GO
CREATE PROCEDURE [USP_TDS_GETALLMONTHSALARYDETAILSFORUPDATE] 
@BRANCHCODES NVARCHAR(MAX),        
@MONTHID INT,          
@REFERENCENOS NVARCHAR(MAX)          
AS          
BEGIN          
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
 SET NOCOUNT ON 
-- SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING( @BRANCHCODES ,',')
-- SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')              
 SELECT C.BRANCHID, C.BRANCHCODE,LC.COMID,ABBREVATION, D.REFERENCENO,SD.SALARYHEADID,SH.EXEMPTAMT, SD.SALDETAILID,ISNULL(SD.GROSSAMT1,0)GROSSAMT1,  
  ISNULL(SD.GROSSAMT2,0)GROSSAMT2,ISNULL(SD.GROSSAMT3,0)GROSSAMT3,ISNULL(ISMETRORESIDENT,0)ISMETRORESIDENT,ISNULL(RENTPAID,0)RENTPAID, ISNULL(SD.RECOVERYAMT,0)RECOVERYAMT  
  FROM LINKTOTC LC          
 INNER JOIN EMPLOYEE E ON LC.EMPLOYEEID = E.EMPLOYEEID          
 INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID          
 INNER JOIN SALDETAIL SD ON SD.COMID = LC.COMID         
 INNER JOIN COMPANYBRANCH C ON C.BRANCHID=D.BRANCHID
 LEFT JOIN RENTDETAILS RENT ON RENT.SALDETAILID=SD.SALDETAILID       
 INNER JOIN SALARYHEAD SH ON SH.SALARYHEADID=SD.SALARYHEADID  
-- INNER JOIN #BRANCHES B ON B.DATA=C.BRANCHCODE 
--INNER JOIN #REFNO R ON R.DATA=D.REFERENCENO  
WHERE SD.MONTHID = @MONTHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLMONTHSF008DATA')
DROP PROCEDURE USP_TDS_GETALLMONTHSF008DATA
GO
CREATE PROCEDURE [USP_TDS_GETALLMONTHSF008DATA]  
@BRANCHID INT  
AS  
BEGIN  
 SELECT  MONTH(DD.PAYMENTDATE)MONTH  FROM DEDUCTEE D WITH(NOLOCK)      
 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)     
  ON NE.DEDUCTEEID=D.DEDUCTEEID       
  INNER JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK)    
 ON D.DEDUCTEEID=DD.DEDUCTEEID  
 WHERE DD.BRANCHID=@BRANCHID AND  DD.FORMID IN(2,3)   
 AND DD.SECTIONID IN(5,17) AND DD.ENTRYTYPE=4     
 GROUP BY MONTH(DD.PAYMENTDATE)  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllNonEmpAutoComplete')
DROP PROCEDURE USP_TDS_GetAllNonEmpAutoComplete
GO
CREATE PROCEDURE [USP_TDS_GetAllNonEmpAutoComplete]
 @BRANCHID INT,    
 @ISAPPLICABLE INT,    
 @PREFIXTEXT NVARCHAR(MAX),    
 @RECORDCOUNT INT    
AS    
 BEGIN    
  DECLARE @QUERY NVARCHAR(MAX);      
  SET @QUERY ='SELECT DEDUCTEE.DEDUCTEEID,DEDUCTEE.NAME +'' (''+ CAST(NONEMPLOYEE.SERIALNO AS VARCHAR)+'')''+''-''+DEDUCTEE.PAN AS DEDUCTEENAME,CASE WHEN LEN(ISNULL(DEDUCTEE.PANREFERENCE,'''')) > 0 THEN 0 ELSE 1 END PANREFERENCE,NONEMPLOYEE.ISTRANSPORTER,DEDUCTEE.REFERENCENO       FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=NONEMPLOYEE.DEDUCTEEID                     
      WHERE  DEDUCTEE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND'      
  IF (@ISAPPLICABLE = 2)    
 BEGIN    
  SET @QUERY = @QUERY + ' NONEMPLOYEE.ISAPPLICABLE26 = 1 AND ';    
 END    
  ELSE  IF(@ISAPPLICABLE = 3)  
 BEGIN    
  SET @QUERY = @QUERY + ' NONEMPLOYEE.ISAPPLICABLE27 = 1 AND ';    
  END   
   ELSE   
  BEGIN  
    SET @QUERY = @QUERY + ' NONEMPLOYEE.ISAPPLICABLE27E = 1 AND ';  
     END     
  SET @QUERY = @QUERY + 'DEDUCTEE.NAME +'' (''+ CAST(NONEMPLOYEE.SERIALNO AS VARCHAR) +'')'' LIKE '''+@PREFIXTEXT+'%''';    
  EXEC SP_EXECUTESQL @QUERY;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLNONEMPLOYEE')
DROP PROCEDURE USP_TDS_GETALLNONEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_GETALLNONEMPLOYEE]
@BRANCHID INT,
@FORMID INT
AS
 BEGIN
	DECLARE @QUERY NVARCHAR(MAX);
	SET @QUERY = 'SELECT D.NAME +''('' + CAST(NE.SERIALNO AS VARCHAR) + '')'' AS NAME , D.DEDUCTEEID FROM DEDUCTEE D
	INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
	WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
	IF( @FORMID = 2)	 
		SET @QUERY = @QUERY + ' AND NE.ISAPPLICABLE26 = 1'
    ELSE
        SET @QUERY = @QUERY + ' AND NE.ISAPPLICABLE27 = 1'
    EXEC SP_EXECUTESQL @QUERY
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllNonEmployeePanReference')
DROP PROCEDURE USP_TDS_GetAllNonEmployeePanReference
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAllNonEmployeePanReference]    
AS      
BEGIN      
 SELECT ISNULL(MAX(PANREFERENCE),'') PANREFERENCE,BRANCHCODE, CB.BRANCHID 
 FROM DEDUCTEE D WITH(NOLOCK)    
		 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID     
		 RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID      
 GROUP BY BRANCHCODE, CB.BRANCHID
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLNONEMPLOYEEPANREFERENCEBASEDONBRANCH')
DROP PROCEDURE USP_TDS_GETALLNONEMPLOYEEPANREFERENCEBASEDONBRANCH
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETALLNONEMPLOYEEPANREFERENCEBASEDONBRANCH]    
	@BRANCHCODES NVARCHAR(MAX)
AS      
BEGIN    
	SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')   
	SELECT ISNULL(MAX(PANREFERENCE),'') PANREFERENCE, CB.BRANCHCODE, CB.BRANCHID 
		FROM DEDUCTEE D WITH(NOLOCK)    
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
				ON NE.DEDUCTEEID=D.DEDUCTEEID     
			RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK) 
				ON D.BRANCHID=CB.BRANCHID 
			INNER JOIN #TEMPBR T ON T.DATA=CB.BRANCHCODE      
	GROUP BY BRANCHCODE, CB.BRANCHID
	DROP TABLE #TEMPBR	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllNonEmployeePanReferenceBranches')
DROP PROCEDURE USP_TDS_GetAllNonEmployeePanReferenceBranches
GO
CREATE PROCEDURE USP_TDS_GetAllNonEmployeePanReferenceBranches 
	@BRANCHES NVARCHAR(MAX)
AS      
BEGIN      
	SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHES, ',')
	SELECT BRANCHID, BRANCHCODE
	INTO #BRLIST
	FROM COMPANYBRANCH WITH(NOLOCK)
	WHERE BRANCHCODE IN (SELECT * FROM #BRANCHES)
	SELECT PANREFERENCE, D.BRANCHID, CB.BRANCHCODE 
	INTO #DEDLIST
	FROM DEDUCTEE D WITH(NOLOCK)    
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
		RIGHT JOIN #BRLIST CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID
    SELECT ISNULL(MAX(PANREFERENCE),'') PANREFERENCE, BRANCHCODE, BRANCHID 
	FROM #DEDLIST     
	GROUP BY BRANCHCODE, BRANCHID
	DROP TABLE #DEDLIST
	DROP TABLE #BRLIST
	DROP TABLE #BRANCHES
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllowance')
DROP PROCEDURE USP_TDS_GetAllowance
GO
CREATE PROCEDURE USP_TDS_GetAllowance
@MONTH INT,  
@COMID INT,
@BRANCHID INT 
AS    
  BEGIN    
	  SELECT SH.SALARYHEADID, SH.SALARYNAME, ISNULL(SD.GROSSAMT1,0)GROSSAMOUNT1, ISNULL(SD.GROSSAMT2,0)GROSSAMOUNT2,  
	  ISNULL(SD.GROSSAMT3,0)GROSSAMOUNT3, SD.EXEMPTAMT,SH.EXEMPTAMT AS EXEMPTEDAMOUNT, SD.BASIC, SD.DA,SD.HRA, SD.EPF, 
	  SH.BASICPER, SH.DAPERC, SH.EPFPERC, SH.HRAPERC, SH.EARNING, RECOVERYAMT,ISNULL(SH.ISEDITABLE,0) ISEDITABLE
	  FROM SALARYHEAD SH WITH (NOLOCK)  
      INNER JOIN         
      (  
	   SELECT GROSSAMT1,GROSSAMT2,GROSSAMT3, SALARYHEADID, EXEMPTAMT, BASIC, DA, HRA, EPF, RECOVERYAMT  
	   FROM SALDETAIL SD  WITH (NOLOCK)  
	   INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON SD.COMID = EM.COMID AND SD.MONTHID = EM.MONTHID    
	   WHERE SD.COMID  = @COMID AND SD.MONTHID = @MONTH  AND EM.BRANCHID = @BRANCHID 
      )SD   
      ON SH.SALARYHEADID = SD.SALARYHEADID    
      WHERE SH.SALARYHEADID >= 8
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllowanceBasedONID')
DROP PROCEDURE USP_TDS_GetAllowanceBasedONID
GO
CREATE PROCEDURE USP_TDS_GetAllowanceBasedONID
@MONTH INT,  
@COMID INT,  
@SALARYHEADID INT  
AS    
 BEGIN  
	 SELECT SD.SALDETAILID, SD.SALARYHEADID, SH.SALARYNAME,GROSSAMT1,GROSSAMT2,GROSSAMT3, SH.EXEMPTAMT AS EXEMPTEDAMOUNT, 
		SD.BASIC,SD.HRA, SD.DA,SD.EPF, SD.EXEMPTAMT, SH.BASICPER, SH.DAPERC, SH.HRAPERC, SH.EPFPERC, ISNULL(SH.EARNING,0) EARNING,
		RECOVERYAMT,ISNULL(SH.ISEDITABLE,0) ISEDITABLE
	FROM SALDETAIL SD WITH (NOLOCK)  
     INNER JOIN SALARYHEAD SH WITH (NOLOCK) ON SH.SALARYHEADID = SD.SALARYHEADID  
	WHERE COMID  = @COMID AND MONTHID = @MONTH AND SD.SALARYHEADID = @SALARYHEADID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPAN')
DROP PROCEDURE USP_TDS_GETALLPAN
GO
CREATE PROCEDURE USP_TDS_GETALLPAN
AS  
BEGIN 
	SELECT CAST(C.BRANCHCODE AS VARCHAR) + '-' + D.REFERENCENO + '-' + D.PAN AS BRANCHID, 
		C.BRANCHCODE + '-' + D.PAN AS PAN
	FROM EMPLOYEE E WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK)
			ON D.DEDUCTEEID = E.DEDUCTEEID
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK)
			ON D.BRANCHID = C.BRANCHID
	WHERE  D.REFERENCENO <>''
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPANAB')
DROP PROCEDURE USP_TDS_GETALLPANAB
GO
CREATE PROCEDURE USP_TDS_GETALLPANAB
AS  
BEGIN 
	SELECT BRANCHID, PAN FROM
	(SELECT D.REFERENCENO + '-' + D.PAN AS BRANCHID, 
		D.PAN AS PAN
	FROM EMPLOYEE E WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK)
			ON D.DEDUCTEEID = E.DEDUCTEEID
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK)
			ON D.BRANCHID = C.BRANCHID
	WHERE  D.REFERENCENO <>'') AS EMPLOYEEPAN
	GROUP BY BRANCHID, PAN
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPANCBI')
DROP PROCEDURE USP_TDS_GETALLPANCBI
GO
CREATE PROCEDURE USP_TDS_GETALLPANCBI
AS  
BEGIN 
	SELECT BRANCHID, PAN FROM
	(SELECT CAST(C.BRANCHCODE AS VARCHAR) + '-' + D.REFERENCENO + '-' + D.PAN AS BRANCHID, 
		C.BRANCHCODE + '-' + D.PAN AS PAN
	FROM EMPLOYEE E WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK)
			ON D.DEDUCTEEID = E.DEDUCTEEID
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK)
			ON D.BRANCHID = C.BRANCHID
	WHERE  D.REFERENCENO <>'') AS EMPLOYEEPAN
	GROUP BY BRANCHID, PAN
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPANREFERENCE')
DROP PROCEDURE USP_TDS_GETALLPANREFERENCE
GO
CREATE PROCEDURE [USP_TDS_GETALLPANREFERENCE]
AS
BEGIN
	SELECT ISNULL(MAX(PANREFERENCE),'') PANREFERENCE,BRANCHCODE FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID=CB.BRANCHID
	GROUP BY BRANCHCODE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPANREFERENCEBASEDONBRANCH')
DROP PROCEDURE USP_TDS_GETALLPANREFERENCEBASEDONBRANCH
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETALLPANREFERENCEBASEDONBRANCH]
@BRANCHCODES NVARCHAR(MAX)
AS
BEGIN
	SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')
	SELECT ISNULL(MAX(PANREFERENCE),'') PANREFERENCE,BRANCHCODE 
		FROM DEDUCTEE D WITH(NOLOCK) 
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
				ON D.DEDUCTEEID=NE.DEDUCTEEID 
			RIGHT JOIN COMPANYBRANCH CB WITH(NOLOCK) 
				ON D.BRANCHID=CB.BRANCHID
			INNER JOIN #TEMPBR TB ON TB.DATA=CB.BRANCHCODE
		GROUP BY BRANCHCODE
	DROP TABLE #TEMPBR
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPANS')
DROP PROCEDURE USP_TDS_GETALLPANS
GO
CREATE PROCEDURE USP_TDS_GETALLPANS
AS  
	BEGIN 
		SELECT DISTINCT CAST(D.BRANCHID AS VARCHAR) + '-' + D.PAN AS BRANCHID, D.PAN 
			FROM SALARYDETAIL B WITH(NOLOCK)
				INNER JOIN DEDUCTEE D WITH(NOLOCK)
				ON D.DEDUCTEEID = B.DEDUCTEEID 
					AND D.BRANCHID = B.BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPANUPDATE')
DROP PROCEDURE USP_TDS_GETALLPANUPDATE
GO
CREATE PROCEDURE [USP_TDS_GETALLPANUPDATE]  
 @PAGEINDEX INT,  
 @PAGESIZE INT,  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT  
AS  
 BEGIN  
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */  
  DECLARE @FIRSTREC INT, @LASTREC INT  
  SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE  
  SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);  
  DECLARE @QUERY NVARCHAR(MAX);  
  IF(@FORMID = 1)  
   BEGIN  
    SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #PANUPDATEDETAILS  FROM  
         (  
        SELECT C.CORRECTIONSTATUS AS CORRECTIONSTATUS,C.NAME AS CNAME,C.DEDUCTEESERIALNO AS CDEDUCTEESERIALNO,C.PAN AS CPAN,C.MATCHEDID,O.NAME AS ONAME,O.PAN AS OPAN,O.DEDUCTEEID AS ODEDUCTEEID  
        FROM   CORREMPLOYEE C WITH(NOLOCK) LEFT JOIN DEDUCTEE  O WITH(NOLOCK) ON (C.DEDUCTEEID = O.DEDUCTEEID OR C.MATCHEDID = O.DEDUCTEEID) AND O.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '  
        WHERE  C.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND C.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND C.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3';  
   END  
  ELSE  
   BEGIN  
    SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #PANUPDATEDETAILS  FROM  
         (  
         SELECT C.CORRECTIONSTATUS AS CORRECTIONSTATUS,C.NAME AS CNAME,C.DEDUCTEESERIALNO AS CDEDUCTEESERIALNO,C.PAN AS CPAN,C.MATCHEDID,O.NAME AS ONAME,O.PAN AS OPAN,O.DEDUCTEEID AS ODEDUCTEEID  
         FROM   CORRNONEMPLOYEE C WITH(NOLOCK) LEFT JOIN DEDUCTEE O WITH(NOLOCK) ON (C.DEDUCTEEID = O.DEDUCTEEID OR C.MATCHEDID = O.DEDUCTEEID) AND O.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '  
         WHERE  C.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND C.FORMID = ' + CAST(@FORMID AS VARCHAR) + 'AND C.QUARTER = ' +CAST(@QUARTER AS VARCHAR) + 'AND CORRECTIONSTATUS = 3';  
   END  
  SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #PANUPDATEDETAILS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);  
  EXEC SP_EXECUTESQL @QUERY;  
  --PRINT @QUERY
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPARTPAYMENTDEDUCTIONDETAILS')
DROP PROCEDURE USP_TDS_GETALLPARTPAYMENTDEDUCTIONDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETALLPARTPAYMENTDEDUCTIONDETAILS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@PARTPAYMENTID INT
AS
BEGIN
	SELECT DD.DEDUCTIONID,DD.SERIALNO,DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,
		   DD.TOTALDEDUCTED,CD.SERIALNO CHALLANSERIALNO,CD.QUARTER CHALLANQUARTER
	FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN PARTPAYMENTDETAILS PPD WITH(NOLOCK) ON DD.PARTPAYMENTID = PPD.PARTPAYMENTID AND DD.BRANCHID = PPD.BRANCHID AND DD.FORMID = PPD.FORMID AND DD.QUARTER = PPD.QUARTER
							  LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID AND DCL.BRANCHID = @BRANCHID
							  LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DCL.CHALLANID = CD.CHALLANID
	WHERE  DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.[QUARTER] = @QUARTER  AND DD.PARTPAYMENTID = @PARTPAYMENTID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPDFCHALLANS')
DROP PROCEDURE USP_TDS_GETALLPDFCHALLANS
GO
CREATE PROCEDURE [USP_TDS_GETALLPDFCHALLANS]
 @COMIDS NVARCHAR(MAX)        
 AS        
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED   
  SET NOCOUNT ON      
  SELECT * INTO #COMIDS FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')          
  SELECT LC.COMID ,SUM(TOTALDEDUCTED)CHALLANTOTAL, '192'AS SECTIONNAME, CD.MODEOFPAYMENT, CD.CHALLANPAIDDATE, 
		 CASE WHEN MODEOFPAYMENT<>3 THEN RB.BSRCODE ELSE CD.TVRECEIPTNUMBER END AS BSRCODE,
		  CASE WHEN MODEOFPAYMENT<>3 THEN RIGHT('00000'+CONVERT(VARCHAR(5), BANKCHALLANNO), 5)          
				ELSE  RIGHT('00000'+CONVERT(VARCHAR(5), TRNVOUCHERNO), 5)         
			END AS CHALLANNUMBER,
		 CD.QUARTER, DR.TAN FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
  INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
  INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
  INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID = CD.BANKID
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
  INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID
  INNER JOIN #COMIDS COM WITH(NOLOCK) ON COM.DATA=LC.COMID
  INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = CD.BRANCHID AND BD.QUARTER = CD.QUARTER
  INNER JOIN DEDUCTOR DR WITH(NOLOCK) ON BD.DEDUCTORID = DR.DEDUCTORID      
  WHERE DD.FORMID = 1 
  GROUP BY CD.CHALLANID, LC.COMID,CD.MODEOFPAYMENT, CD.CHALLANPAIDDATE, RB.BSRCODE, CD.BANKCHALLANNO, CD.QUARTER, DR.TAN,TVRECEIPTNUMBER,TRNVOUCHERNO
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPDFDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETALLPDFDEDUCTIONS
GO
CREATE PROCEDURE  USP_TDS_GETALLPDFDEDUCTIONS    
@COMIDS NVARCHAR(MAX)      
AS  
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED      
SELECT * INTO #COMIDS FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')      
SELECT COMID, QUARTER, SUM(TOTALDEDUCTED)TOTALDEDUCTED,SUM(PAYMENTMADE) PAYMENTMADE FROM       
(      
 SELECT DD.QUARTER, SUM(TOTALDEDUCTED)TOTALDEDUCTED,SUM(PAYMENTMADE) PAYMENTMADE, COMID FROM       
 DEDUCTIONDETAIL DD WITH(NOLOCK)        
 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID      
 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID      
 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID      
 INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID      
 INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID      
 INNER JOIN #COMIDS COM ON COM.DATA=LC.COMID       
 WHERE TOTALDEDUCTED > 0 AND (DD.TRANSSTATUS = 2 OR DD.TRANSSTATUS IS NULL) AND DD.FORMID = 1      
 GROUP BY DD.QUARTER, COMID      
 UNION      
 SELECT DD.QUARTER, SUM(TOTALDEDUCTED)TOTALDEDUCTED,SUM(PAYMENTMADE) PAYMENTMADE, COMID FROM       
 DEDUCTIONDETAIL DD WITH(NOLOCK)      
 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID      
 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID      
 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID      
 INNER JOIN #COMIDS COM ON COM.DATA=LC.COMID      
 WHERE  TOTALDEDUCTED = 0 AND (DD.TRANSSTATUS = 2 OR DD.TRANSSTATUS IS NULL) AND DD.FORMID = 1      
 GROUP BY DD.QUARTER, COMID      
 UNION      
 SELECT 4 AS QUARTER, 0 AS TOTALDEDUCTED,0 AS PAYMENTMADE, COMID FROM       
 DEDUCTEE D WITH(NOLOCK)     
 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID      
 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID      
 INNER JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.DEDUCTEEID = D.DEDUCTEEID      
 INNER JOIN #COMIDS COM ON COM.DATA=LC.COMID       
 GROUP BY COMID      
)T      
GROUP BY COMID, QUARTER
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPDFEMPLOYEEDETAILS')
DROP PROCEDURE USP_TDS_GETALLPDFEMPLOYEEDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETALLPDFEMPLOYEEDETAILS]      
@BRANCHID INT,      
@COMIDS NVARCHAR(MAX)      
AS      
 SET NOCOUNT ON      
 SELECT * INTO #COMIDS FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')        
 SELECT  LC.COMID,D.NAME,E.ISSENIORCITIZEN, D.REFERENCENO, E.DESIGNATION, D.PAN,F16.PRINTCERTIFICATENO,D.ADDRESS1,D.ADDRESS2,      
   D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.PINCODE,E.EMPLOYMENTFROM,E.EMPLOYMENTTO       
   FROM  DEDUCTEE D   WITH(NOLOCK)        
   INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID=E.DEDUCTEEID       
   INNER JOIN LINKTOTC LC WITH(NOLOCK)  ON LC.EMPLOYEEID = E.EMPLOYEEID AND D.BRANCHID = LC.BRANCHID      
   INNER JOIN #COMIDS COM ON COM.DATA=LC.COMID      
   INNER JOIN FORM16 F16 ON F16.COMID=LC.COMID  AND F16.BRANCHID = LC.BRANCHID AND F16.DEDUCTEEID=D.DEDUCTEEID    
   WHERE D.BRANCHID=@BRANCHID      
 SET NOCOUNT ON
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllPDFSalaryDetails')
DROP PROCEDURE USP_TDS_GetAllPDFSalaryDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAllPDFSalaryDetails]
 @BRANCHID INT,      
 @COMIDS NVARCHAR(MAX)   
AS      
 SET NOCOUNT ON  
    SELECT * INTO #COM FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')     
   -- SELECT COMID, [1] AS ET, [2] AS PT        
   --     INTO #SECTION16  
   --     FROM        
   --     (  
   --SELECT SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) - ISNULL(RECOVERYAMT,0))NETAMT, SALARYSECTIONID, S16.COMID  
   --FROM SECTION16DET S16  
   --INNER JOIN LINKTOTC L ON L.COMID = S16.COMID    
   --INNER JOIN EMPWORKMONTH EM ON EM.COMID = L.COMID AND EM.BRANCHID = L.BRANCHID AND EM.MONTHID = S16.MONTHID   
   --INNER JOIN #COM C ON C.DATA = S16.COMID  
   --GROUP BY SALARYSECTIONID, S16.COMID          
   --     ) PS        
   --     PIVOT        
   --     (        
   --     SUM (NETAMT)        
   --     FOR SALARYSECTIONID IN        
   --     ( [1], [2])        
   --     ) AS PVT  
 --SELECT SUM(NETAMT) AS BASICSALARY, COMID   
 --INTO #BASIC  
 --FROM     
 --  (    
 --   SELECT CASE WHEN EARNING = 0 THEN -1 * (SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) + ISNULL(GROSSAMT3,0) - ISNULL(SD.EXEMPTAMT,0) - ISNULL(SD.RECOVERYAMT,0)))    
 --      ELSE SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) + ISNULL(GROSSAMT3,0) - ISNULL(SD.RECOVERYAMT,0) - ISNULL(SD.EXEMPTAMT,0)) END AS NETAMT,--    
 --     EARNING, SD.COMID FROM SALDETAIL SD    
 --   INNER JOIN SALARYHEAD SH ON SH.SALARYHEADID = SD.SALARYHEADID      
 --   INNER JOIN LINKTOTC L ON L.COMID = SD.COMID    
 --   INNER JOIN EMPWORKMONTH EM ON EM.COMID = L.COMID AND EM.BRANCHID = L.BRANCHID AND EM.MONTHID = SD.MONTHID   
 --   INNER JOIN #COM C ON C.DATA = SD.COMID  
 --   WHERE INCLUDEUS10 = 0 AND ISNULL(SH.ABBREVATION,'') NOT IN ('LIC', 'AEPF', 'EPF') --AND L.BRANCHID = @BRANCHID    
 --   GROUP BY EARNING, SD.COMID  
 --  )T  
 --  GROUP BY COMID  
 SELECT 0 AS SALARYDETAILID,0 AS BRANCHID,0 AS DEDUCTEEID, LC.COMID, SUM(SD.BASICSALARY)BASICSALARY,SUM(SD.TAXABLEALLOWANCE)TAXABLEALLOWANCE,SUM(SD.PERKACCUNFURNISHED)PERKACCUNFURNISHED,SUM(SD.PERKFURNISHEDVALUE)PERKFURNISHEDVALUE,        
     SUM(SD.COSTOFFURNITURE)COSTOFFURNITURE,SUM(SD.FURNITURERENTALS)FURNITURERENTALS,SUM(SD.PERQVALUEOFFURNITURE)PERQVALUEOFFURNITURE,SUM(SD.PERKFURNISHEDTOTAL)PERKFURNISHEDTOTAL,SUM(SD.RENTPAIDBYEMP)RENTPAIDBYEMP,SUM(SD.VALUEOFPERQUISITES)VALUEOFPERQUISITES,        
   SUM(SD.CONVEYANCE)CONVEYANCE,SUM(SD.REMUNERATION)REMUNERATION,SUM(SD.TAXABLELTC)TAXABLELTC,SUM(SD.OTHERBENEFITS)OTHERBENEFITS,SUM(SD.PFINEXCESSOF12PERC)PFINEXCESSOF12PERC,SUM(SD.EXCESSINTERESTCREDITED)EXCESSINTERESTCREDITED,SUM(SD.TOTALPERQUISITE)TOTALPERQUISITE,        
   SUM(SD.TAXABLEPERQUISITES)TAXABLEPERQUISITES,SUM(SD.EXEMPTEDALLOWANCES)EXEMPTEDALLOWANCES,SUM(SD.GROSSSALARY)GROSSSALARY,SUM(SD.DEDUCTIONUS16)DEDUCTIONUS16,SUM(SD.INCOMEFROMSALARIES)INCOMEFROMSALARIES,      
   SUM(SD.SALARYFROMPREVEMP)SALARYFROMPREVEMP,SUM(SD.INCOMEFROMHOUSEPROPERTY)INCOMEFROMHOUSEPROPERTY,SUM(SD.INCOMEFROMBUSINESS)INCOMEFROMBUSINESS,SUM(SD.CAPITALGAINS)CAPITALGAINS,SUM(SD.INCOMEFROMOTHERSOURCES)INCOMEFROMOTHERSOURCES,SUM(SD.OTHERINCOME)OTHERINCOME,        
  SUM(SD.GROSSTOTALINCOME)GROSSTOTALINCOME,SUM(SD.TOTALDEDUNDERCHAPTERVIA)TOTALDEDUNDERCHAPTERVIA,SUM(SD.TOTALTAXABLEINCOME)TOTALTAXABLEINCOME,SUM(SD.TAXONTOTALINCOME)TAXONTOTALINCOME,SUM(SD.SURCHARGE)SURCHARGE,SUM(SD.EDUCATIONCESS)EDUCATIONCESS,        
  SUM(SD.TOTALINCOMETAXPAYABLE)TOTALINCOMETAXPAYABLE,SUM(SD.RELIEFUS89)RELIEFUS89,SUM(SD.NETTAXPAYABLE)NETTAXPAYABLE,SUM(SD.TDSITDEDUCTED)TDSITDEDUCTED,SUM(SD.TDSSURCHARGEDEDUCTED)TDSSURCHARGEDEDUCTED,SUM(SD.EDUCESSDEDUCTED)EDUCESSDEDUCTED,        
   SUM(SD.PREVEMPINCOMETAX)PREVEMPINCOMETAX,SUM(SD.PREVEMPSURCHARGE)PREVEMPSURCHARGE,SUM(SD.PREVEMPCESS)PREVEMPCESS,SUM(SD.MANUALINCOMETAX)MANUALINCOMETAX,SUM(SD.MANUALSURCHARGE)MANUALSURCHARGE,SUM(SD.MANUALCESS)MANUALCESS,SUM(SD.TOTALTDS)TOTALTDS,SUM(SD.TAXPAYABLE)TAXPAYABLE,        
   SUM(ISNULL(ETPT.ET,0)) ET,SUM(ISNULL(ETPT.PT,0)) PT,0 AS ISOTHERINCOMEDETAILSOPTED,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80C,0)) GROSSAMOUNT80C,SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCC,0)) GROSSAMOUNT80CCC,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD,0)) GROSSAMOUNT80CCD,SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80D,0)) GROSSAMOUNT80D,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80DD,0)) GROSSAMOUNT80DD,SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80DDB,0)) GROSSAMOUNT80DDB,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80E,0)) GROSSAMOUNT80E, SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80EE,0)) GROSSAMOUNT80EE,SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80G,0)) GROSSAMOUNT80G,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GG,0)) GROSSAMOUNT80GG,SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80QQB,0)) GROSSAMOUNT80QQB,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80RRB,0)) GROSSAMOUNT80RRB,SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80U,0)) GROSSAMOUNT80U,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCF,0)) GROSSAMOUNT80CCF, SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GGA,0)) GROSSAMOUNT80GGA,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GGC,0)) GROSSAMOUNT80GGC, SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80TTA,0)) GROSSAMOUNT80TTA,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCG,0)) GROSSAMOUNT80CCG, SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD1,0)) GROSSAMOUNT80CCD1,        
   SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD2,0)) GROSSAMOUNT80CCD2, SUM(ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD1B,0)) GROSSAMOUNT80CCD1B,       
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80C,0)) QUALIFYINGAMOUNT80C,SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCC,0)) QUALIFYINGAMOUNT80CCC,        
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD,0)) QUALIFYINGAMOUNT80CCD,SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80D,0)) QUALIFYINGAMOUNT80D,        
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80DD,0)) QUALIFYINGAMOUNT80DD,SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80DDB,0)) QUALIFYINGAMOUNT80DDB,        
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80E,0)) QUALIFYINGAMOUNT80E, SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80EE,0))QUALIFYINGAMOUNT80EE, SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80G,0)) QUALIFYINGAMOUNT80G,        
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GG,0)) QUALIFYINGAMOUNT80GG,SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80QQB,0)) QUALIFYINGAMOUNT80QQB,        
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80RRB,0)) QUALIFYINGAMOUNT80RRB,SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80U,0)) QUALIFYINGAMOUNT80U,        
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCF,0)) QUALIFYINGAMOUNT80CCF,SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GGA,0)) QUALIFYINGAMOUNT80GGA,        
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GGC,0)) QUALIFYINGAMOUNT80GGC,SUM (ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80TTA,0)) QUALIFYINGAMOUNT80TTA,        
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCG,0)) QUALIFYINGAMOUNT80CCG, SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD1,0)) QUALIFYINGAMOUNT80CCD1,        
   SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD2,0)) QUALIFYINGAMOUNT80CCD2, SUM(ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD1B,0)) QUALIFYINGAMOUNT80CCD1B,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80C,0)) DEDUCTIBLEAMOUNT80C,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCC,0)) DEDUCTIBLEAMOUNT80CCC,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD,0)) DEDUCTIBLEAMOUNT80CCD,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80D,0)) DEDUCTIBLEAMOUNT80D,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80DD,0)) DEDUCTIBLEAMOUNT80DD,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80DDB,0)) DEDUCTIBLEAMOUNT80DDB,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80E,0)) DEDUCTIBLEAMOUNT80E,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80EE,0)) DEDUCTIBLEAMOUNT80EE,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80G,0)) DEDUCTIBLEAMOUNT80G,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GG,0)) DEDUCTIBLEAMOUNT80GG,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80QQB,0)) DEDUCTIBLEAMOUNT80QQB,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80RRB,0)) DEDUCTIBLEAMOUNT80RRB,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80U,0)) DEDUCTIBLEAMOUNT80U ,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCF,0)) DEDUCTIBLEAMOUNT80CCF,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GGA,0)) DEDUCTIBLEAMOUNT80GGA,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GGC,0)) DEDUCTIBLEAMOUNT80GGC ,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80TTA,0)) DEDUCTIBLEAMOUNT80TTA,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCG,0)) DEDUCTIBLEAMOUNT80CCG,SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD1,0)) DEDUCTIBLEAMOUNT80CCD1,        
   SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD2,0)) DEDUCTIBLEAMOUNT80CCD2, SUM(ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD1B,0)) DEDUCTIBLEAMOUNT80CCD1B, SUM(ISNULL(SD.CREDITUS87A,0)) CREDITUS87A      
         FROM SALARYDETAIL SD  WITH(NOLOCK)      
         INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID       
         INNER JOIN EMPLOYEE E  WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID      
         INNER JOIN LINKTOTC LC  WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID    
         INNER JOIN #COM COM ON COM.DATA = LC.COMID    
       --  INNER JOIN #BASIC B ON B.COMID = LC.COMID     
         --LEFT JOIN #SECTION16 S16 ON S16.COMID = LC.COMID  
         LEFT JOIN   
          (SELECT SALARYDETAILID, [1] AS ET, [2] AS PT        
        FROM       
        (SELECT SALARYDETAILID, SALARYSECTIONID, AMOUNT        
        FROM SECTION16DETAIL WITH(NOLOCK)) PS        
        PIVOT        
        (        
        SUM (AMOUNT)        
        FOR SALARYSECTIONID IN        
        ( [1], [2])        
        ) AS PVT) ETPT        
        ON SD.SALARYDETAILID = ETPT.SALARYDETAILID        
        LEFT JOIN        
        (SELECT SALARYDETAILID, [3] AS GROSSAMOUNT80C, [4] AS GROSSAMOUNT80CCC,[5] AS GROSSAMOUNT80CCD,        
              [6] AS GROSSAMOUNT80D,[7] AS GROSSAMOUNT80DD,[8] AS GROSSAMOUNT80DDB,        
              [9] AS GROSSAMOUNT80E, [10] AS GROSSAMOUNT80G,[11] AS GROSSAMOUNT80GG,        
              [12] AS GROSSAMOUNT80QQB,[13] AS GROSSAMOUNT80RRB,[14] AS GROSSAMOUNT80U,  [15] AS GROSSAMOUNT80CCF,        
       [16] AS GROSSAMOUNT80GGA,[17] AS GROSSAMOUNT80GGC,[18] AS GROSSAMOUNT80TTA,[19] AS GROSSAMOUNT80CCG,        
             [20] AS GROSSAMOUNT80CCD1  ,[21] AS GROSSAMOUNT80CCD2, [22] AS GROSSAMOUNT80EE, [23] AS GROSSAMOUNT80CCD1B        
        FROM        
        (SELECT SALARYDETAILID, SALARYSECTIONID,GROSSAMOUNT        
        FROM CHAPTERVIADETAIL WITH(NOLOCK)) PS        
        PIVOT        
        (        
        SUM (GROSSAMOUNT)        
        FOR SALARYSECTIONID IN        
        ( [3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])        
        ) AS PVT) CVIAGROSSAMOUNT        
        ON SD.SALARYDETAILID=CVIAGROSSAMOUNT.SALARYDETAILID        
        LEFT JOIN        
        (SELECT SALARYDETAILID,[3] AS QUALIFYINGAMOUNT80C,[4] AS QUALIFYINGAMOUNT80CCC,[5] AS QUALIFYINGAMOUNT80CCD,        
                [6] AS QUALIFYINGAMOUNT80D,[7] AS QUALIFYINGAMOUNT80DD,[8] AS QUALIFYINGAMOUNT80DDB,        
                [9] AS QUALIFYINGAMOUNT80E, [10] AS QUALIFYINGAMOUNT80G,[11] AS QUALIFYINGAMOUNT80GG,        
                [12] AS QUALIFYINGAMOUNT80QQB,[13] AS QUALIFYINGAMOUNT80RRB,[14] AS QUALIFYINGAMOUNT80U ,[15] AS QUALIFYINGAMOUNT80CCF,        
                [16] AS QUALIFYINGAMOUNT80GGA  ,[17] AS QUALIFYINGAMOUNT80GGC ,[18] AS QUALIFYINGAMOUNT80TTA,[19] AS QUALIFYINGAMOUNT80CCG,        
             [20] AS QUALIFYINGAMOUNT80CCD1  ,[21] AS QUALIFYINGAMOUNT80CCD2,[22] AS  QUALIFYINGAMOUNT80EE, [23] AS QUALIFYINGAMOUNT80CCD1B       
         FROM        
         (SELECT SALARYDETAILID, SALARYSECTIONID,QUALIFYINGAMOUNT        
         FROM CHAPTERVIADETAIL WITH(NOLOCK)   ) PS        
         PIVOT        
         ( 
   SUM (QUALIFYINGAMOUNT)        
         FOR SALARYSECTIONID IN        
         ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])        
         ) AS PVT) CVIAQUALIFYINGAMOUNT        
         ON SD.SALARYDETAILID=CVIAQUALIFYINGAMOUNT.SALARYDETAILID        
         LEFT JOIN        
         (SELECT SALARYDETAILID,[3] AS DEDUCTIBLEAMOUNT80C,[4] AS DEDUCTIBLEAMOUNT80CCC,[5] AS DEDUCTIBLEAMOUNT80CCD,        
              [6] AS DEDUCTIBLEAMOUNT80D,[7] AS DEDUCTIBLEAMOUNT80DD,[8] AS DEDUCTIBLEAMOUNT80DDB,        
              [9] AS DEDUCTIBLEAMOUNT80E, [10] AS DEDUCTIBLEAMOUNT80G,[11] AS DEDUCTIBLEAMOUNT80GG,        
              [12] AS DEDUCTIBLEAMOUNT80QQB,[13] AS DEDUCTIBLEAMOUNT80RRB,[14] AS DEDUCTIBLEAMOUNT80U ,[15] AS DEDUCTIBLEAMOUNT80CCF ,        
             [16] AS DEDUCTIBLEAMOUNT80GGA,[17] AS DEDUCTIBLEAMOUNT80GGC, [18] AS DEDUCTIBLEAMOUNT80TTA,[19] AS DEDUCTIBLEAMOUNT80CCG,        
             [20] AS DEDUCTIBLEAMOUNT80CCD1  ,[21] AS DEDUCTIBLEAMOUNT80CCD2,[22] AS DEDUCTIBLEAMOUNT80EE ,  [23] AS DEDUCTIBLEAMOUNT80CCD1B      
         FROM        
         (SELECT SALARYDETAILID, SALARYSECTIONID,DEDUCTIBLEAMOUNT        
         FROM CHAPTERVIADETAIL WITH(NOLOCK)   ) PS        
         PIVOT        
         (        
         SUM (DEDUCTIBLEAMOUNT)        
         FOR SALARYSECTIONID IN        
         ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])        
         )AS PVT) CVIADEDUCTIBLEAMOUNT        
          ON SD.SALARYDETAILID=CVIADEDUCTIBLEAMOUNT.SALARYDETAILID        
   WHERE D.BRANCHID=@BRANCHID    
    GROUP BY LC.COMID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPURCHASEORDERPAGED')
DROP PROCEDURE USP_TDS_GETALLPURCHASEORDERPAGED
GO
CREATE PROCEDURE [USP_TDS_GETALLPURCHASEORDERPAGED]    
(    
@STARTROW INT,                                            
@PAGESIZE INT,    
@BRANCHID INT,    
@NAME VARCHAR(75),    
@ORDERAMOUNTFROM NUMERIC(13,2),                
@ORDERAMOUNTTO NUMERIC(13,2),      
@ORDERDATEFROM SMALLDATETIME=NULL,                
@ORDERATETO SMALLDATETIME=NULL    
)    
AS    
BEGIN    
 SET NOCOUNT ON                
    DECLARE @FIRSTREC INT, @LASTREC INT                                
    SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                        
    SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);                  
    DECLARE @QUERY NVARCHAR(MAX)          
  SET @QUERY = 'SELECT  ROWNUM = IDENTITY(INT,1,1), ORDERID,D.DEDUCTEEID,D.NAME,PO.ORDERNO,PO.ORDERAMOUNT,PO.ORDERDATE,PO.AMOUNTLIABLETOTAX,ISNULL(PO.TDSRATE,-1)TDSRATE,
													 PO.NARRATION, PO.NEXTAMCAMOUNT, PO.NEXTAMCDATE   
       INTO  #TEMP         
       FROM PURCHASEORDER PO WITH(NOLOCK)                 
      INNER  JOIN NONEMPLOYEE NE WITH(NOLOCK)       
      ON PO.DEDUCTEEID = NE.DEDUCTEEID    
      INNER JOIN DEDUCTEE D WITH(NOLOCK) 
      ON NE.DEDUCTEEID=D.DEDUCTEEID          
      WHERE D.BRANCHID=' + CAST(@BRANCHID AS VARCHAR);      
 IF(@NAME<>'')
  BEGIN                
   SET @QUERY = @QUERY +' AND D.NAME LIKE ''%' + @NAME + '%''';                   
  END      
 IF(@ORDERAMOUNTFROM<> 0 OR @ORDERAMOUNTTO<>0)                
       BEGIN              
           SET @QUERY = @QUERY + ' AND  PO.ORDERAMOUNT BETWEEN ' + CAST(@ORDERAMOUNTFROM AS VARCHAR(20)) + ' AND ' + CAST(@ORDERAMOUNTTO AS VARCHAR(20))+'';                     
       END     
 IF(@ORDERDATEFROM IS NOT NULL AND @ORDERATETO IS NOT NULL)                
     BEGIN                
        SET @QUERY = @QUERY + ' AND  PO.ORDERDATE BETWEEN ''' + CAST(@ORDERDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@ORDERATETO AS VARCHAR) + '''';                                              
     END        
      SET @QUERY = @QUERY +  'ORDER BY PO.ORDERID;SELECT ORDERID,DEDUCTEEID,NAME,ORDERNO,ORDERAMOUNT,ORDERDATE,NARRATION,0 AS ISUSED, AMOUNTLIABLETOTAX,TDSRATE,
			 NEXTAMCAMOUNT,NEXTAMCDATE FROM #TEMP WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10)) ;                          
     -- PRINT @QUERY                
      EXEC SP_EXECUTESQL @QUERY;          
      SET NOCOUNT OFF                  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLPURCHASEORDERPAGEDCOUNT')
DROP PROCEDURE USP_TDS_GETALLPURCHASEORDERPAGEDCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETALLPURCHASEORDERPAGEDCOUNT]
(
@BRANCHID INT,
@NAME VARCHAR(75),
@ORDERAMOUNTFROM NUMERIC(13,2),
@ORDERAMOUNTTO NUMERIC(13,2),
@ORDERDATEFROM SMALLDATETIME=NULL,
@ORDERATETO SMALLDATETIME=NULL
)
AS
BEGIN
 SET NOCOUNT ON
    DECLARE @QUERY NVARCHAR(MAX)
  SET @QUERY = 'SELECT  COUNT(PO.ORDERID)
      FROM PURCHASEORDER PO  WITH(NOLOCK)
      INNER  JOIN NONEMPLOYEE NE  WITH(NOLOCK)
      ON PO.DEDUCTEEID = NE.DEDUCTEEID
      INNER JOIN DEDUCTEE D  WITH(NOLOCK)
      ON NE.DEDUCTEEID=D.DEDUCTEEID
      WHERE D.BRANCHID=' + CAST(@BRANCHID AS VARCHAR);
 IF(@NAME<>'')
  BEGIN
   SET @QUERY = @QUERY +' AND D.NAME LIKE ''%' + @NAME + '%''';
  END
 IF(@ORDERAMOUNTFROM<> 0 OR @ORDERAMOUNTTO<>0)
       BEGIN
           SET @QUERY = @QUERY + ' AND  PO.ORDERAMOUNT BETWEEN ' + CAST(@ORDERAMOUNTFROM AS VARCHAR(20)) + ' AND ' + CAST(@ORDERAMOUNTTO AS VARCHAR(20))+'';
       END
 IF(@ORDERDATEFROM IS NOT NULL AND @ORDERATETO IS NOT NULL)
     BEGIN
        SET @QUERY = @QUERY + ' AND  PO.ORDERDATE BETWEEN ''' + CAST(@ORDERDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@ORDERATETO AS VARCHAR) + '''';
     END
      EXEC SP_EXECUTESQL @QUERY;
      SET NOCOUNT OFF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLREFERENCENOSF006')
DROP PROCEDURE USP_TDS_GETALLREFERENCENOSF006
GO
CREATE PROCEDURE [USP_TDS_GETALLREFERENCENOSF006]    
(    
@BRANCHCODES NVARCHAR(MAX)  
)    
AS   
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED   
SELECT MAX(D.DEDUCTEEID) DEDUCTEEID,MAX(REFERENCENO)REFERENCENO FROM DEDUCTEE D WITH(NOLOCK)    
INNER JOIN COMPANYBRANCH C WITH(NOLOCK)    
ON D.BRANCHID=C.BRANCHID    
WHERE C.BRANCHCODE IN(SELECT DATA FROM  DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')) AND ISNULL(D.REFERENCENO,'') <>''    
GROUP BY D.NAME, D.PAN, C.BRANCHID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLROLES')
DROP PROCEDURE USP_TDS_GETALLROLES
GO
CREATE PROCEDURE [USP_TDS_GETALLROLES]
AS
SELECT * FROM ROLES WITH(NOLOCK)
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLSALDETAILSTABLE')
DROP PROCEDURE USP_TDS_GETALLSALDETAILSTABLE
GO
CREATE PROCEDURE [USP_TDS_GETALLSALDETAILSTABLE]                
@BRANCHCODES NVARCHAR(MAX),                 
@MONTHID INT,                
@REFERENCENOS NVARCHAR(MAX)                
AS                
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
  SET NOCOUNT ON  
  SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING( @BRANCHCODES ,',')
  SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')                    
  SELECT  C.BRANCHID,SD.MONTHID, SD.COMID, SD.SALARYHEADID, ISNULL(SD.GROSSAMT1,0)GROSSAMT1, ISNULL(SD.GROSSAMT2,0)GROSSAMT2,                 
  ISNULL(SD.GROSSAMT3,0)GROSSAMT3, SD.EXEMPTAMT, SD.NETAMT,ISNULL(SD.RECOVERYAMT,0)RECOVERYAMT, SD.SALDETAILID                
 FROM LINKTOTC LC                
 INNER JOIN EMPLOYEE E ON LC.EMPLOYEEID = E.EMPLOYEEID                
 INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID                
 INNER JOIN SALDETAIL SD ON SD.COMID = LC.COMID             
 INNER JOIN COMPANYBRANCH C ON C.BRANCHID=D.BRANCHID             
 INNER JOIN #BRANCHES B ON B.DATA=C.BRANCHCODE 
 INNER JOIN #REFNO R ON R.DATA=D.REFERENCENO  
WHERE ISNULL(D.REFERENCENO,'')<>''
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLSERAILNO')
DROP PROCEDURE USP_TDS_GETALLSERAILNO
GO
CREATE PROCEDURE [USP_TDS_GETALLSERAILNO] 
@BRANCHCODES NVARCHAR(MAX)
AS
   BEGIN
		SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')
		SELECT ISNULL(MAX(N.SERIALNO),0)  AS SERIALNO, CB.BRANCHCODE, CB.BRANCHID FROM COMPANYBRANCH CB WITH(NOLOCK)
			LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
			LEFT JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID
			INNER JOIN #BRANCHES B ON B.DATA = BRANCHCODE
			GROUP BY CB.BRANCHCODE, CB.BRANCHID
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLSERAILNOBASEDONPANANDBRANCH')
DROP PROCEDURE USP_TDS_GETALLSERAILNOBASEDONPANANDBRANCH
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETALLSERAILNOBASEDONPANANDBRANCH] 
	@BRANCHCODES NVARCHAR(MAX),
	@PANSTRING NVARCHAR(MAX) 
AS
   BEGIN
		SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',') 
		SELECT DISTINCT * INTO #TEMPPAN FROM DBO.UDF_TDS_SPLITSTRING(@PANSTRING,',')  
		SELECT ISNULL(MAX(N.SERIALNO),0)  AS SERIALNO, CB.BRANCHCODE, CB.BRANCHID FROM COMPANYBRANCH CB WITH(NOLOCK)
			LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON CB.BRANCHID= D.BRANCHID
			LEFT JOIN NONEMPLOYEE N WITH(NOLOCK) ON N.DEDUCTEEID = D.DEDUCTEEID
			INNER JOIN #TEMPBR TB ON TB.DATA = CB.BRANCHCODE
			INNER JOIN #TEMPPAN TR ON TR.DATA = D.PAN
			GROUP BY CB.BRANCHCODE, CB.BRANCHID
		DROP TABLE #TEMPBR
		DROP TABLE #TEMPPAN
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllTaxSections')
DROP PROCEDURE USP_TDS_GetAllTaxSections
GO
CREATE PROCEDURE USP_TDS_GetAllTaxSections
AS
BEGIN
	SELECT SECTIONID,TAXNAME,SECTIONNAME,FORMID,[DESCRIPTION] FROM TAXSECTIONS WITH(NOLOCK) 
	ORDER BY FORMID,SECTIONID 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLTDSREGDETAILS')
DROP PROCEDURE USP_TDS_GETALLTDSREGDETAILS
GO
CREATE PROCEDURE USP_TDS_GETALLTDSREGDETAILS ---USP_TDS_GETALLTDSREGDETAILS 1674,2
	@BRANCHID INT,
	@FORMID INT,
	@FROMDATE SMALLDATETIME = NULL,
	@TODATE SMALLDATETIME = NULL,	
	@SECTIONID VARCHAR(MAX) = NULL,
	@DEDUCTEEID INT = NULL
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		DECLARE @RTBRANCHID INT,@ISZORO INT;
		SET @RTBRANCHID = @BRANCHID
		IF((SELECT TOP 1 DEDUCTORID FROM DEDUCTOR WITH(NOLOCK) WHERE TAN = 'HYDA08387B') <> '')
			BEGIN
				SELECT @ISZORO = ISZORO FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID
				IF(@ISZORO = 0)
					BEGIN
						IF(@FORMID <> 1)
							BEGIN
								SET @BRANCHID = (SELECT PARENTBRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @RTBRANCHID)
							END
					END
			END
		SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTIONID,',')
		SELECT DD.BRANCHID,DD.FORMID,DD.QUARTER,DD.TAXRATE,DD.TOTALDEDUCTED,DD.SECTIONID,DD.PAYMENTDATE,DD.DEDUCTEDDATE,  
		D.NAME,D.DEDUCTEEID,D.PAN,  
		TS.SECTIONNAME,      
		CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL,  
		FM.PRINTCERTIFICATENO,FM.CERTIFICATEDATE,CASE WHEN FM.ISCERTIFICATEGIVEN=1 THEN 'YES' ELSE 'NO' END AS ISCERTIFICATEGIVEN,
		DD.RTBRANCHID
		INTO #TEMP  
		FROM   DEDUCTIONDETAIL DD  
		INNER JOIN BRANCHDEDUCTORS BD ON DD.BRANCHID = BD.BRANCHID AND DD.QUARTER=BD.QUARTER     
		INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID  
		INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = DD.SECTIONID  
		INNER JOIN FORMDETAILS FD ON FD.FORMID=DD.FORMID     
		LEFT JOIN DEDCHALINK DL ON DL.DEDUCTIONID=DD.DEDUCTIONID  
		LEFT JOIN CHALLANDETAIL CD ON CD.CHALLANID = DL.CHALLANID   
		LEFT JOIN FORM16A FM ON FM.DEDUCTIONID = DD.DEDUCTIONID    
		WHERE  DD.FORMID IN (2,3,4) AND (DL.DEDCHALINKID IS NOT NULL)
		IF(@SECTIONID <> '-1')
			BEGIN
				SET @QUERY = 'SELECT NAME,PAN,SS.SECTIONNAME,PRINTCERTIFICATENO,ISCERTIFICATEGIVEN,TOTALDEDUCTED,DEDUCTEDDATE
							  FROM   #TEMP WITH(NOLOCK) SS
							  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = SS.SECTIONID
							  INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME  
							  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
							  AND PRINTCERTIFICATENO IS NOT NULL AND LEN(LTRIM(PRINTCERTIFICATENO)) > 0';
			END
		ELSE
			BEGIN
				SET @QUERY = 'SELECT NAME,PAN,SECTIONNAME,PRINTCERTIFICATENO,ISCERTIFICATEGIVEN,TOTALDEDUCTED,DEDUCTEDDATE
							  FROM   #TEMP WITH(NOLOCK)
							  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
							  AND PRINTCERTIFICATENO IS NOT NULL AND LEN(LTRIM(PRINTCERTIFICATENO)) > 0';
			END
		--IF(@SECTIONID <> -1)
		--	BEGIN
		--		SET @QUERY = @QUERY + ' AND SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);
		--	END				
		IF(@DEDUCTEEID <> -1)
			BEGIN
				SET @QUERY = @QUERY + ' AND DEDUCTEEID = ' + CAST(@DEDUCTEEID AS VARCHAR);
			END
		IF(@FROMDATE <> '')
			BEGIN
                SET @QUERY = @QUERY + ' AND CHALLANPAIDDATE >= ''' + CAST(@FROMDATE AS VARCHAR) + '''';
			END                
		IF(@TODATE <> '')
			BEGIN
                SET @QUERY = @QUERY + ' AND CHALLANPAIDDATE <=''' + CAST(@TODATE AS VARCHAR) + '''';
			END
		IF(@RTBRANCHID <> @BRANCHID)
			BEGIN
                SET @QUERY = @QUERY + ' AND RTBRANCHID = ' + CAST(@RTBRANCHID AS VARCHAR);  
			END
		EXEC SP_EXECUTESQL @QUERY;
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLUNLINKEDDEDSCOUNT')
DROP PROCEDURE USP_TDS_GETALLUNLINKEDDEDSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETALLUNLINKEDDEDSCOUNT]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @SECTIONID INT,
 @DEDNAME VARCHAR(75)
AS
 BEGIN
  DECLARE @SQLQUERY NVARCHAR(MAX);
  SET @SQLQUERY='SELECT COUNT(DD.DEDUCTIONID)
        FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) LEFT JOIN DEDUCTEE D  WITH(NOLOCK) ON DD.DEDUCTEEID=D.DEDUCTEEID
        LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID=DL.DEDUCTIONID
        WHERE  DD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND DD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND DL.DEDCHALINKID IS NULL AND DD.TOTALDEDUCTED <> 0';
  IF(@QUARTER<>-1)
   BEGIN
    SET @SQLQUERY=@SQLQUERY+' AND DD.[QUARTER]='+CAST(@QUARTER AS VARCHAR(2));
   END
  IF(@SECTIONID<>-1)
   BEGIN
    SET @SQLQUERY=@SQLQUERY+' AND DD.SECTIONID='+CAST(@SECTIONID AS VARCHAR(2));
   END
  IF(@DEDNAME<>'')
   BEGIN
    SET @SQLQUERY=@SQLQUERY+' AND D.NAME LIKE  '''+@DEDNAME+'%''';
   END
  EXEC SP_EXECUTESQL @SQLQUERY
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAllUnlinkedDedsOnSearch')
DROP PROCEDURE USP_TDS_GetAllUnlinkedDedsOnSearch
GO
CREATE PROCEDURE [USP_TDS_GetAllUnlinkedDedsOnSearch] 
 @BRANCHID INT,    
 @FORMID INT,    
 @SECTIONID INT = NULL,    
 @NAME VARCHAR(75) = NULL,    
 @QUARTER INT = NULL,    
 @FROMDATE SMALLDATETIME = NULL,    
 @TODATE SMALLDATETIME = NULL,    
 @DEDUCTEECODE INT = NULL    
AS    
BEGIN    
  DECLARE @SQLQUERY NVARCHAR(MAX)    
  SELECT DD.PARTPAYMENTID,DD.DEDUCTIONID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,    
           DD.DEDUCTEDDATE,DD.SECTIONID,DD.DEDUCTEEID,DD.SERIALNO INTO #DEDTEMP FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
  INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID  
  WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID --AND DD.TOTALDEDUCTED > 0
  SELECT PARTPAYMENTID,DEDUCTIONID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,    
           DEDUCTEDDATE,SECTIONID,DEDUCTEEID,SERIALNO INTO #TEMPTABLE FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
        SELECT PARTPAYMENTID,DEDUCTIONID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,    
           DEDUCTEDDATE,SECTIONID,DEDUCTEEID,SERIALNO  INTO #DEDUCTION FROM  
         (  
             SELECT PARTPAYMENTID,DEDUCTIONID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,    
           DEDUCTEDDATE,SECTIONID,DEDUCTEEID,SERIALNO FROM #TEMPTABLE T WITH(NOLOCK) WHERE   
			NOT EXISTS(  
		   SELECT PARTPAYMENTID,DEDUCTIONID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,    
           DEDUCTEDDATE,SECTIONID,DEDUCTEEID,SERIALNO FROM #DEDTEMP D WHERE T.DEDUCTIONID = D.DEDUCTIONID) 
            )DE    
  /* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/    
  SET NOCOUNT ON    
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */    
  SET @SQLQUERY = 'SELECT DD.PARTPAYMENTID,D.NAME,'
       IF(@FORMID = 1)
        SET @SQLQUERY = @SQLQUERY +'0 AS DEDUCTEECODE,'
        ELSE
        SET @SQLQUERY = @SQLQUERY +'DEDUCTEECODE,'
       SET @SQLQUERY = @SQLQUERY + 'DD.DEDUCTIONID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,    
           DD.DEDUCTEDDATE,DD.SECTIONID,TS.SECTIONNAME,ISNULL(DD.SERIALNO,0) AS SERIALNO INTO #TEMP1     
       FROM #DEDUCTION DD
               INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID '
    IF(@FORMID = 1)
        SET @SQLQUERY = @SQLQUERY + 'INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID '
     ELSE
        SET @SQLQUERY = @SQLQUERY + 'INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID '
               --LEFT JOIN dbo.NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
       SET @SQLQUERY = @SQLQUERY + 'INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID; 
       SELECT PPD.PARTPAYMENTID,DD.NAME,DEDUCTEECODE,-1 AS DEDUCTIONID,DD.QUARTER,DD.PAYMENTMADE,DD.PAYMENTDATE,PPD.REMINCOMETAX,PPD.REMSURCHARGE,PPD.REMEDUCATIONCESS,PPD.REMTOTALDEDUCTED,    
           GETDATE() AS DEDUCTEDDATE,DD.SECTIONID,DD.SECTIONNAME,DD.SERIALNO INTO #TEMP2      
       FROM PARTPAYMENTDETAILS PPD WITH(NOLOCK) INNER JOIN    
       (     
        SELECT  INNERDD.PARTPAYMENTID,INNERDD.BRANCHID,INNERDD.FORMID,INNERDD.QUARTER,INNERDD.SECTIONID,ISNULL(INNERDD.SERIALNO,0) AS SERIALNO,INNERDD.DEDUCTEEID,    
            D.NAME,TS.SECTIONNAME,INNERDD.PAYMENTMADE,INNERDD.PAYMENTDATE,NE.DEDUCTEECODE    
        FROM DEDUCTIONDETAIL INNERDD  WITH(NOLOCK)   
          INNER JOIN            
          (SELECT  MIN(SERIALNO) AS SERIALNO,PARTPAYMENTID,BRANCHID,FORMID,QUARTER     
             FROM DEDUCTIONDETAIL WITH(NOLOCK)    
            WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID='+CAST(@FORMID AS VARCHAR)+'--AND QUARTER=1     
            GROUP BY BRANCHID,FORMID,QUARTER,PARTPAYMENTID) MINDED    
          ON INNERDD.BRANCHID=MINDED.BRANCHID AND INNERDD.FORMID=MINDED.FORMID AND INNERDD.QUARTER=MINDED.QUARTER     
          AND INNERDD.SERIALNO=MINDED.SERIALNO AND INNERDD.PARTPAYMENTID=MINDED.PARTPAYMENTID    
              INNER JOIN    
             DEDUCTEE D WITH(NOLOCK)    
          ON INNERDD.DEDUCTEEID = D.DEDUCTEEID    
          LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
           INNER JOIN     
          TAXSECTIONS TS   WITH(NOLOCK)  
          ON INNERDD.SECTIONID = TS.SECTIONID    
          WHERE INNERDD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND INNERDD.FORMID = '+CAST(@FORMID AS VARCHAR)+' --AND INNERDD.QUARTER=1    
       ) DD ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID AND PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER    
       WHERE PPD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND PPD.FORMID = '+CAST(@FORMID AS VARCHAR)+';
		SELECT ROWNUMBER = IDENTITY(INT,1,1),* INTO #TEMP FROM    
       (    
       SELECT * FROM #TEMP1   
       UNION    
	   SELECT * FROM #TEMP2
      ) TEST WHERE 1 = 1'    
  IF(@SECTIONID IS NOT NULL)    
   BEGIN    
    SET @SQLQUERY = @SQLQUERY + ' AND TEST.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);    
   END    
  IF @NAME IS NOT NULL    
   BEGIN     
    SET @SQLQUERY = @SQLQUERY + ' AND TEST.NAME LIKE ''%' + @NAME + '%''';    
   END    
  IF(@QUARTER IS NOT NULL)    
   BEGIN    
    SET @SQLQUERY = @SQLQUERY + ' AND TEST.QUARTER = ' + CAST(@QUARTER AS VARCHAR(2))    
   END    
  IF(@FROMDATE IS NOT NULL)    
   BEGIN      
    SET @SQLQUERY = @SQLQUERY + ' AND TEST.DEDUCTEDDATE > =''' + CAST(@FROMDATE AS VARCHAR(20)) + ''''    
   END    
  IF(@TODATE IS NOT NULL)    
   BEGIN         
    SET @SQLQUERY = @SQLQUERY + ' AND TEST.DEDUCTEDDATE <= ''' + CAST(@TODATE AS VARCHAR(20)) + ''''    
   END    
  IF(@DEDUCTEECODE IS NOT NULL) 
   BEGIN
	SET @SQLQUERY = @SQLQUERY + 'AND TEST.DEDUCTEECODE = ' + CAST(@DEDUCTEECODE AS VARCHAR(2))    
   END   
  SET @SQLQUERY = @SQLQUERY + ' ORDER BY TEST.PARTPAYMENTID ;ALTER TABLE #TEMP ADD PRIMARY KEY (ROWNUMBER ); SELECT * FROM #TEMP'    
  --PRINT @SQLQUERY        
 EXECUTE SP_EXECUTESQL @SQLQUERY;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLUSERAUDITPAGED')
DROP PROCEDURE USP_TDS_GETALLUSERAUDITPAGED
GO
CREATE PROCEDURE [USP_TDS_GETALLUSERAUDITPAGED]                
(                
 @STARTROW INT,                                            
 @PAGESIZE INT,
 @BRANCHID INT, 
 @BRANCHNAME VARCHAR(75),                
 @BRANCHCODE VARCHAR(7),                   
 @USERNAME VARCHAR(75),                
 @USERTYPE VARCHAR(1)                  
)                
AS                
BEGIN                
    SET NOCOUNT ON                
    DECLARE @FIRSTREC INT, @LASTREC INT                                
    SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                        
    SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);                  
    DECLARE @QUERY NVARCHAR(MAX)                        
    SET @QUERY = 'SELECT  ROWNUM = IDENTITY(INT,1,1), C.BRANCHNAME+'' ''+C.BRANCHCODE BRANCH,1 AS TRANSSTATUS,A.AUDITTYPE,A.AUDITDATE,A.AUDITREMARKS,U.USERNAME AS EDITEDBY                 
  INTO  #TEMP                 
  FROM USERMASTERAUDIT A  WITH(NOLOCK)              
  INNER  JOIN USERMASTER U  WITH(NOLOCK)              
   ON U.USERID=A.USERID                
  INNER JOIN COMPANYBRANCH C  WITH(NOLOCK)              
   ON C.BRANCHID= (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',2))  WHERE A.AUDITREMARKS<>''''AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''                
  IF(@BRANCHNAME<>'')            
  BEGIN            
   SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';               
  END            
  IF(@BRANCHCODE<>'')            
  BEGIN            
   SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';               
  END        
  IF(@USERNAME<>'')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',1)) LIKE ''%' + @USERNAME + '%''';                   
  END                
  IF( @USERTYPE = '1')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',3))= 1'             
  END
   IF( @USERTYPE = '2')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',4))= 1'              
  END  
   IF( @USERTYPE = '3')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS+''^'',''^'',5))= 1'            
  END                            
     SET @QUERY = @QUERY +  ';SELECT BRANCH,TRANSSTATUS,AUDITTYPE,AUDITDATE,AUDITREMARKS,EDITEDBY FROM #TEMP WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10)) + ' ORDER BY BRANCH';                             --PRINT @QUERY                
     EXEC SP_EXECUTESQL @QUERY;                 
     SET NOCOUNT OFF                      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLUSERAUDITPAGEDCOUNT')
DROP PROCEDURE USP_TDS_GETALLUSERAUDITPAGEDCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETALLUSERAUDITPAGEDCOUNT]              
(
 @BRANCHID INT,                          
 @BRANCHNAME VARCHAR(75),                
 @BRANCHCODE VARCHAR(7),                   
 @USERNAME VARCHAR(75),                
 @USERTYPE VARCHAR(1)                
)              
AS              
BEGIN              
    SET NOCOUNT ON                          
    DECLARE @QUERY NVARCHAR(MAX)                      
    SET @QUERY = 'SELECT COUNT(A.AUDITID)  
  FROM USERMASTERAUDIT A WITH(NOLOCK)             
  INNER  JOIN USERMASTER U  WITH(NOLOCK)            
   ON U.USERID=A.USERID              
  INNER JOIN COMPANYBRANCH C WITH(NOLOCK)             
   ON C.BRANCHID= (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',2))  WHERE A.AUDITREMARKS<>''''AND C.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+''              
  IF(@BRANCHNAME<>'')            
  BEGIN            
   SET @QUERY = @QUERY +' AND C.BRANCHNAME LIKE ''%' + @BRANCHNAME + '%''';               
  END            
  IF(@BRANCHCODE<>'')            
  BEGIN            
   SET @QUERY = @QUERY +' AND C.BRANCHCODE LIKE ''%' + @BRANCHCODE + '%''';               
  END        
  IF(@USERNAME<>'')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',1)) LIKE ''%' + @USERNAME + '%''';                   
  END                
  IF( @USERTYPE = '1')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',3))= 1'             
  END
   IF( @USERTYPE = '2')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS,''^'',4))= 1'              
  END  
   IF( @USERTYPE = '3')                
  BEGIN                
   SET @QUERY = @QUERY +' AND (SELECT  DBO.UDF_TDS_GETSPLITTEDSTRING(A.AUDITREMARKS+''^'',''^'',5))= 1'            
  END                                  
     --PRINT @QUERY              
     EXEC SP_EXECUTESQL @QUERY;               
     SET NOCOUNT OFF                    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLUSERS')
DROP PROCEDURE USP_TDS_GETALLUSERS
GO
CREATE PROCEDURE [USP_TDS_GETALLUSERS]
AS
BEGIN
	SELECT USERNAME,PASSWORD,ISBRANCHADMIN,BRANCHID FROM USERMASTER WITH(NOLOCK)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLUSERSCOUNT')
DROP PROCEDURE USP_TDS_GETALLUSERSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETALLUSERSCOUNT]
AS
SELECT  COUNT(U.USERID) USERCOUNT FROM  USERMASTER U  WITH(NOLOCK)
 LEFT JOIN ROLEUSER R  WITH(NOLOCK)
 LEFT JOIN ROLES RL   WITH(NOLOCK)
 ON RL.ROLEID=R.ROLEID
 ON U.USERID=R.USERID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLUSERSCOUNTS')
DROP PROCEDURE USP_TDS_GETALLUSERSCOUNTS
GO
CREATE PROCEDURE [USP_TDS_GETALLUSERSCOUNTS]
@ROLEID INT,
@USERNAME VARCHAR(20),
@USERTYPE INT = -1
AS
  BEGIN
  DECLARE @SQLQUERY NVARCHAR(MAX);
  SET @SQLQUERY ='SELECT * INTO #USERROLES FROM
  (
   SELECT COUNT(U.USERID)USERID FROM USERMASTER U  WITH(NOLOCK)
    LEFT JOIN ROLEUSER R WITH(NOLOCK) ON U.USERID = R.USERID
    LEFT JOIN ROLES RL WITH(NOLOCK) ON R.ROLEID = RL.ROLEID '
 IF(@USERNAME <> '')
 BEGIN
  SET @SQLQUERY = @SQLQUERY + ' WHERE USERNAME LIKE '''+ @USERNAME +'%'''
 END
   SET @SQLQUERY = @SQLQUERY + ')R;SELECT SUM(USERID) FROM #USERROLES'
   EXEC SP_EXECUTESQL @SQLQUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLUSERSFORROLE')
DROP PROCEDURE USP_TDS_GETALLUSERSFORROLE
GO
CREATE PROCEDURE [USP_TDS_GETALLUSERSFORROLE]
 @STARTROW INT,      
 @PAGESIZE INT,                
 @ROLEID INT,          
 @USERNAME VARCHAR(20),          
 @USERTYPE INT = -1  
AS
BEGIN
  DECLARE @FIRSTREC INT;                                       
  DECLARE @LASTREC INT;          
  DECLARE @SQLQUERY NVARCHAR(MAX);                
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                    
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1)          
  SET @SQLQUERY ='SELECT ROW_NUM = IDENTITY (INT, 1, 1), * INTO #USERROLES FROM           
  (          
   SELECT U.USERID,U.USERNAME,U.ISSUPERADMIN,U.ISBRANCHADMIN,R.ROLEID,         
     CASE WHEN R.ROLEID IS NULL THEN ''NOT ASSIGNED''           
     ELSE RL.ROLENAME           
     END ROLENAME,           
     CASE WHEN R.ROLEID IS NULL THEN 0      
     ELSE 1          
     END ISASSIGNED          
     FROM USERMASTER U WITH(NOLOCK)                
     LEFT JOIN ROLEUSER R WITH(NOLOCK) ON U.USERID = R.USERID          
     LEFT JOIN ROLES RL WITH(NOLOCK) ON R.ROLEID = RL.ROLEID '          
 IF(@USERNAME <> '')          
 BEGIN          
  SET @SQLQUERY = @SQLQUERY + ' WHERE USERNAME LIKE '''+ @USERNAME +'%'''          
 END  
 SET @SQLQUERY = @SQLQUERY + ')R;      
  SELECT USERID,USERNAME,ISSUPERADMIN,ISBRANCHADMIN,ROLENAME,ISASSIGNED FROM #USERROLES       
  WHERE ROW_NUM >' +CAST(@FIRSTREC AS VARCHAR) +' AND ROW_NUM < '+CAST(@LASTREC AS VARCHAR)
  +'ORDER BY CASE WHEN ROLEID='+CAST(@ROLEID AS VARCHAR)+'THEN 1 ELSE 2 END'      
  EXEC SP_EXECUTESQL @SQLQUERY;         
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETALLUSERSFORROLES')
DROP PROCEDURE USP_TDS_GETALLUSERSFORROLES
GO
CREATE PROCEDURE [USP_TDS_GETALLUSERSFORROLES]
(
 @STARTROW INT,
 @PAGESIZE INT,
 @ROLEID INT
)
AS
 BEGIN
  DECLARE @FIRSTREC INT;
  DECLARE @LASTREC INT;
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1)
  DECLARE @TABLE TABLE (USERID INT,USERNAME VARCHAR(75),ISSUPERADMIN BIT,ISBRANCHADMIN BIT, ROLENAME VARCHAR(75),ISASSIGNED BIT)
  INSERT INTO @TABLE
  SELECT  U.USERID,U.USERNAME,U.ISSUPERADMIN,U.ISBRANCHADMIN,CASE WHEN R.ROLEID IS NULL THEN 'NOT ASSIGNED' ELSE RL.ROLENAME END ROLENAME,
   CASE WHEN R.ROLEID=@ROLEID THEN 1 ELSE 0 END  ISASSIGNED FROM USERMASTER U WITH(NOLOCK)
  LEFT JOIN ROLEUSER R WITH(NOLOCK)
  LEFT JOIN ROLES RL   WITH(NOLOCK)
   ON RL.ROLEID=R.ROLEID
   ON U.USERID=R.USERID
  WHERE  R.ROLEID=@ROLEID
  INSERT INTO @TABLE
  SELECT  U.USERID,U.USERNAME,U.ISSUPERADMIN,U.ISBRANCHADMIN,CASE WHEN R.ROLEID IS NULL THEN 'NOT ASSIGNED' ELSE RL.ROLENAME END ROLENAME,
   0 AS  ISASSIGNED FROM  USERMASTER U WITH(NOLOCK)
  LEFT JOIN ROLEUSER R   WITH(NOLOCK)
  LEFT JOIN ROLES RL   WITH(NOLOCK)
   ON RL.ROLEID=R.ROLEID
   ON U.USERID=R.USERID
  WHERE U.USERID NOT IN (SELECT USERID FROM @TABLE);
  WITH TEMP AS
  (
   SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 1)) ROWNUMBER, * FROM @TABLE
  )
  SELECT TOP (@LASTREC-1) *
  FROM TEMP
  WHERE ROWNUMBER > @FIRSTREC
  AND ROWNUMBER < @LASTREC
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETANNEXUREDETAILS')
DROP PROCEDURE USP_TDS_GETANNEXUREDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETANNEXUREDETAILS]
	@BRANCHID INT,
	@DEDUCTEEID VARCHAR(MAX)
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		SET @QUERY = 'SELECT DEDUCTEDDATE,TOTALDEDUCTED,BANKCHALLANNO,BSRCODE
					  FROM   VW_GETANNEXUREDETAILS WITH(NOLOCK) WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND (TOTALDEDUCTED = 0 OR DEDCHALINKID IS NOT NULL) AND PRINTCERTIFICATENO IS NOT NULL AND LEN(LTRIM(PRINTCERTIFICATENO))>0 AND DEDUCTEEID IN ( ' + CAST(@DEDUCTEEID AS VARCHAR(MAX)) + ')';
		EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETAPPROVALSTATUS')
DROP PROCEDURE USP_TDS_GETAPPROVALSTATUS
GO
CREATE PROCEDURE USP_TDS_GETAPPROVALSTATUS
 @DEDUCTIONID INT,                
 @USERID INT,              
 @FORMID INT,                
 @QUARTER INT                
AS                
BEGIN            
  SELECT ISNULL(DD.TRANSSTATUS,1) FROM DEDUCTIONDETAIL DD              
  WITH(NOLOCK)                
  WHERE DD.DEDUCTIONID=@DEDUCTIONID        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETAPPROVEDDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETAPPROVEDDEDUCTIONS
GO
CREATE PROCEDURE [USP_TDS_GETAPPROVEDDEDUCTIONS]  
@BRANCHID INT,  
@DEDUCTEEIDS NVARCHAR(MAX)=NULL  
AS  
BEGIN  
 DECLARE @DEDUCTEE TABLE(DEDUCTEEID INT);  
 DECLARE @EXISTS BIT;  
 IF(@DEDUCTEEIDS IS NULL)  
 BEGIN  
  INSERT INTO @DEDUCTEE  
  SELECT DEDUCTIONID FROM DEDUCTIONDETAIL  DD WITH(NOLOCK) 
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID  
  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID  
  WHERE DD.BRANCHID=@BRANCHID  AND DD.TRANSSTATUS=2  
 END  
  ELSE  
     BEGIN  
	  INSERT INTO @DEDUCTEE  
	  SELECT DEDUCTIONID FROM DEDUCTIONDETAIL  DD WITH(NOLOCK)  
	  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID  
	  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
	  WHERE DD.BRANCHID=@BRANCHID  AND DD.TRANSSTATUS = 2  AND DD.DEDUCTEEID IN  (SELECT * FROM  DBO.UDF_TDS_SPLITSTRING(@DEDUCTEEIDS,','))  
     END  
IF ((SELECT COUNT(DEDUCTEEID) FROM @DEDUCTEE) >  0)  
 BEGIN  
   SET @EXISTS=1  
 END  
ELSE  
 BEGIN  
       SET @EXISTS=0  
    END  
   SELECT @EXISTS  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETASSIGNBRANCHCOUNT')
DROP PROCEDURE USP_TDS_GETASSIGNBRANCHCOUNT
GO
CREATE PROCEDURE USP_TDS_GETASSIGNBRANCHCOUNT --2  
 @USERID INT  
AS  
BEGIN  
 SELECT COUNT(BRANCHID) FROM ASSIGNBRANCH   
 WHERE USERID=@USERID;  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETASSIGNEDBRANCHESPAGEWISE')
DROP PROCEDURE USP_TDS_GETASSIGNEDBRANCHESPAGEWISE
GO
CREATE PROCEDURE USP_TDS_GETASSIGNEDBRANCHESPAGEWISE  --1,10,'SUDIP',1       
 @PAGEINDEX INT               
 ,@PAGESIZE INT        
 ,@USERNAME VARCHAR(20)           
 ,@RECORDCOUNT INT OUTPUT              
AS              
 BEGIN              
  SET NOCOUNT ON;              
  SELECT SORTORDER,BRANCHNAME,BRANCHCODE,ASSIGNEDTO,BRANCHID,USERID,ASSIGNED,ROWNUMBER         
  INTO #RESULTS FROM   
   (  
    SELECT 1 SORTORDER,       
     (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = AB.BRANCHID) BRANCHNAME,      
     (SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = AB.BRANCHID) BRANCHCODE,      
     M.USERNAME AS ASSIGNEDTO, AB.BRANCHID AS BRANCHID, M.USERID AS USERID, 1 AS ASSIGNED,        
     ROW_NUMBER() OVER (ORDER BY AB.BRANCHID ASC) AS ROWNUMBER         
    FROM USERMASTER M WITH(NOLOCK)        
    INNER JOIN ASSIGNBRANCH AB WITH(NOLOCK) ON M.USERID = AB.USERID  
    WHERE M.USERNAME = @USERNAME        
   UNION        
    SELECT 2 SORTORDER,       
     (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = AB.BRANCHID) BRANCHNAME,      
     (SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = AB.BRANCHID) BRANCHCODE,      
     M.USERNAME AS ASSIGNEDTO, AB.BRANCHID AS BRANCHID, M.USERID AS USERID, 0 AS ASSIGNED,        
     ROW_NUMBER() OVER (ORDER BY AB.BRANCHID ASC) AS ROWNUMBER         
    FROM USERMASTER M WITH(NOLOCK)        
    INNER JOIN ASSIGNBRANCH AB WITH(NOLOCK) ON M.USERID = AB.USERID        
    WHERE M.USERNAME <> @USERNAME        
   UNION        
    SELECT 3 SORTORDER, CB.BRANCHNAME AS BRANCHNAME,         
     CB.BRANCHCODE AS BRANCHCODE, 'NOT ASSIGNED' ASSIGNEDTO,        
     CB.BRANCHID AS BRANCHID, 0 AS USERID, 0 AS ASSIGNED,        
     ROW_NUMBER() OVER (ORDER BY CB.BRANCHID ASC) AS ROWNUMBER         
    FROM COMPANYBRANCH CB WITH(NOLOCK)        
    WHERE CB.BRANCHID NOT IN (SELECT BRANCHID FROM ASSIGNBRANCH WITH(NOLOCK))        
   )  RESULT      
   ORDER BY SORTORDER            
  SELECT @RECORDCOUNT = COUNT(*)            
  FROM #RESULTS              
  SELECT * FROM #RESULTS              
  WHERE ROWNUMBER BETWEEN(@PAGEINDEX -1) * @PAGESIZE + 1 AND(((@PAGEINDEX -1) * @PAGESIZE + 1) + @PAGESIZE) - 1              
  DROP TABLE #RESULTS    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAuditDetailReportSB')
DROP PROCEDURE USP_TDS_GetAuditDetailReportSB
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetAuditDetailReportSB]
@ISHO BIT,
@MONTHID INT,
@BRANCHID INT,
@BRANCHFILTER INT = -1
AS
BEGIN
	IF(@ISHO = 1)
	BEGIN
		SELECT AUDITREMARKS 
		FROM DEDUCTIONDETAILAUDIT WITH(NOLOCK) 
		WHERE MONTH(AUDITDATE) = @MONTHID
	END
	ELSE
	BEGIN
		IF(@BRANCHFILTER <> -1)
		BEGIN
			SELECT AUDITREMARKS 
			FROM DEDUCTIONDETAILAUDIT DDA WITH(NOLOCK)
			WHERE AUDITID IN (
								SELECT AUDITID 
								FROM(SELECT AUDITID, SUBSTRING(AUDITREMARKS, 1, CHARINDEX('^',AUDITREMARKS, 1) - 1) AS BRANCHCODE 
									 FROM DEDUCTIONDETAILAUDIT WITH(NOLOCK)
									 WHERE ISNULL(AUDITREMARKS,'') <> ''	
									 ) D
									INNER JOIN (SELECT BRANCHCODE 
												FROM COMPANYBRANCH WITH(NOLOCK) 
												WHERE BRANCHID = @BRANCHFILTER
												) B 
										ON B.BRANCHCODE = D.BRANCHCODE) 
			AND MONTH(AUDITDATE) = @MONTHID
		END
		ELSE
		BEGIN
			SELECT AUDITREMARKS 
			FROM DEDUCTIONDETAILAUDIT DDA WITH(NOLOCK)
			WHERE AUDITID IN (SELECT AUDITID 
							  FROM (SELECT AUDITID, SUBSTRING(AUDITREMARKS, 1, CHARINDEX('^',AUDITREMARKS, 1) - 1) AS BRANCHCODE 
									FROM DEDUCTIONDETAILAUDIT WITH(NOLOCK)
								    WHERE ISNULL(AUDITREMARKS,'') <> ''	
								    ) D
								INNER JOIN (SELECT BRANCHCODE 
											FROM COMPANYBRANCH WITH(NOLOCK) 
											WHERE PARENTBRANCHID = @BRANCHID OR BRANCHID = @BRANCHID
											) B 
									ON B.BRANCHCODE = D.BRANCHCODE) 
			AND MONTH(AUDITDATE) = @MONTHID
		END
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETAUDITEXPORTDATA')
DROP PROCEDURE USP_TDS_GETAUDITEXPORTDATA
GO
CREATE PROCEDURE [USP_TDS_GETAUDITEXPORTDATA]            
(            
 @AUDITTYPE SMALLINT,            
 @STARTROW INT,                                              
 @PAGESIZE INT,   
 @BRANCHID INT,                   
 @BRANCHNAME VARCHAR(75),                  
 @BRANCHCODE VARCHAR(7),                  
 @FORMID  SMALLINT=NULL,                  
 @QUARTER SMALLINT=NULL,                  
 @NAME VARCHAR(75)=NULL,                  
 @PAN VARCHAR(10)=NULL,                  
 @AMOUNTOFPAYMENTFROM NUMERIC(13,2)=NULL,                  
 @AMOUNTOFPAYMENTTO NUMERIC(13,2)=NULL,                  
 @TAXDEDUCTEDFROM NUMERIC(13,2)=NULL,                  
 @TAXDEDUCTEDTO NUMERIC(13,2)=NULL,                  
 @PAIDDATEFROM SMALLDATETIME=NULL,                  
 @PAIDDATETO SMALLDATETIME=NULL,                  
 @TAXDEDUCTEDDATEFROM SMALLDATETIME=NULL,                  
 @TAXDEDUCTEDDATETO SMALLDATETIME=NULL,                  
 @SECTIONID INT=NULL,  
 @CHALLANNO VARCHAR(9)=NULL             
)            
AS            
BEGIN            
    SET NOCOUNT ON            
 DECLARE @TEMP TABLE             
 (            
 BRANCH VARCHAR(100),            
 TRANSSTATUS SMALLINT,            
 AUDITTYPE SMALLINT,            
 AUDITDATE DATETIME,            
 AUDITREMARKS VARCHAR(500),            
 EDITEDBY VARCHAR(75)            
 )            
 IF @AUDITTYPE=1            
 BEGIN            
  INSERT INTO @TEMP            
  EXEC USP_TDS_GETALLCHALLANAUDITPAGED  @STARTROW,@PAGESIZE, @BRANCHID, @BRANCHNAME,@BRANCHCODE,@FORMID,@QUARTER, @AMOUNTOFPAYMENTFROM,@AMOUNTOFPAYMENTTO,            
   @PAIDDATEFROM,@PAIDDATETO,@SECTIONID,@CHALLANNO            
 END            
 IF @AUDITTYPE=2            
 BEGIN            
  INSERT INTO @TEMP            
  EXEC USP_TDS_GETALLBRANCHAUDITPAGED  @STARTROW,@PAGESIZE,@BRANCHID,@BRANCHNAME,@BRANCHCODE            
 END            
 IF @AUDITTYPE=3            
 BEGIN            
  INSERT INTO @TEMP            
  EXEC  USP_TDS_GETALLDEDUCTIONAUDITPAGED @STARTROW,@PAGESIZE, @BRANCHID,@BRANCHNAME,@BRANCHCODE,@FORMID,@QUARTER,@NAME,@PAN,            
     @AMOUNTOFPAYMENTFROM,@AMOUNTOFPAYMENTTO,@TAXDEDUCTEDFROM,@TAXDEDUCTEDTO,@SECTIONID,@PAIDDATEFROM,@PAIDDATETO,@TAXDEDUCTEDDATEFROM,            
     @TAXDEDUCTEDDATETO             
 END            
 IF @AUDITTYPE=4            
 BEGIN            
  INSERT INTO @TEMP            
     EXEC  USP_TDS_GETALLDEDUCTEEAUDITPAGED @STARTROW,@PAGESIZE, @BRANCHID,@BRANCHNAME,@BRANCHCODE,@NAME,@PAN            
 END            
 IF @AUDITTYPE=5            
 BEGIN            
  INSERT INTO @TEMP            
     EXEC  USP_TDS_GETALLBANKAUDITPAGED @STARTROW,@PAGESIZE,@BRANCHID,@BRANCHNAME,@BRANCHCODE,@NAME,@PAN                 
 END            
 IF @AUDITTYPE=6            
 BEGIN            
  INSERT INTO @TEMP            
     EXEC  USP_TDS_GETALLUSERAUDITPAGED @STARTROW,@PAGESIZE, @BRANCHID,@BRANCHNAME,@BRANCHCODE,@NAME,@PAN                
 END             
 SELECT * FROM @TEMP            
 SET NOCOUNT OFF            
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETAUTOGENERATEDCHALLANCOUNT')
DROP PROCEDURE USP_TDS_GETAUTOGENERATEDCHALLANCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETAUTOGENERATEDCHALLANCOUNT]
@MONTH INT
AS
BEGIN
	SELECT ISNULL(COUNT(CD.CHALLANID),0) AS CHALLANCOUNT FROM CHALLANDETAIL CD WITH(NOLOCK) INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.CHALLANID=CD.CHALLANID AND DCL.BRANCHID=CD.BRANCHID
																			   INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID AND MONTH(DD.DEDUCTEDDATE)=@MONTH
	WHERE ISAUTOGENERATED=1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETAUTOGENERATEDCHALLANSNO')
DROP PROCEDURE USP_TDS_GETAUTOGENERATEDCHALLANSNO
GO
CREATE PROCEDURE [USP_TDS_GETAUTOGENERATEDCHALLANSNO]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
  BEGIN
	 SELECT CD.SERIALNO FROM CHALLANDETAIL CD  WITH(NOLOCK)
	 WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.QUARTER = @QUARTER AND ISNULL(CD.ISAUTOGENERATED,0) = 1
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetAutoLoginBranches')
DROP PROCEDURE USP_TDS_GetAutoLoginBranches
GO
CREATE PROCEDURE [USP_TDS_GetAutoLoginBranches]
(@BRANCHCODE VARCHAR(10))
AS
BEGIN 
	  SELECT BRANCHID,BRANCHNAME,BRANCHCODE,PARENTBRANCHID, '' TAN FROM COMPANYBRANCH  WITH(NOLOCK) 
	  WHERE  PARENTBASEID LIKE 
	  (
		SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE=@BRANCHCODE
	  )+'%'
	  ORDER BY PARENTBRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBALANCEPARKEDAMOUNT')
DROP PROCEDURE USP_TDS_GETBALANCEPARKEDAMOUNT
GO
CREATE PROCEDURE USP_TDS_GETBALANCEPARKEDAMOUNT
@MONTHID INT,
@FINYEAR INT,
@CLIENTID INT
AS
	BEGIN
		SELECT BRANCHID,PARENTBRANCHID,BRANCHCODE,BRANCHNAME,ISZORO INTO #COMPDET FROM COMPANYBRANCH WITH(NOLOCK) 
		SELECT DEDUCTIONID,BRANCHID,RTBRANCHID,DD.FORMID,TS.SECTIONID,ENTRYTYPE,TOTALDEDUCTED,
			   CASE WHEN DD.FORMID = 1 THEN '24Q' 
					WHEN DD.FORMID = 3 THEN '27Q' 
					WHEN (DD.FORMID = 2 AND ENTRYTYPE = 4 AND TS.SECTIONID = 5) THEN '26QI' 
					ELSE '26QV' END AS FORMTYPE
		INTO #DEDUCTIONS
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
			INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON TS.SECTIONID = DD.SECTIONID
		WHERE MONTH(DEDUCTEDDATE) = @MONTHID
		SELECT RTBRANCHID, FORMTYPE,SUM(TOTALDEDUCTED) TOTAL
		INTO #DED
		FROM #DEDUCTIONS DD WITH(NOLOCK) 
			INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID = DD.DEDUCTIONID
			INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
		WHERE CD.ISAUTOGENERATED = 1
		GROUP BY RTBRANCHID, FORMTYPE
		SELECT PA.MONTHYEAR,CASE WHEN CB.ISZORO = 0 THEN CB.PARENTBRANCHID ELSE CB.BRANCHID END AS ZONEBRANCHID,
			   CB.BRANCHCODE,PA.FORMTYPE,ACCOUNTNO,AMOUNT AS PARKEDAMOUNT, 
			   ISNULL(TOTAL, 0) AS DEDUCTIONLINKED,(AMOUNT - ISNULL(TOTAL, 0)) AS BALANCEPARKEDAMOUNT
		INTO #PARKEDBAL
		FROM PARKEDAMOUNT PA WITH(NOLOCK)
			INNER JOIN #COMPDET CB WITH(NOLOCK) ON CB.BRANCHID = PA.BRANCHID 
			LEFT JOIN #DED D WITH(NOLOCK) ON D.RTBRANCHID = PA.BRANCHID AND D.FORMTYPE = PA.FORMTYPE
		WHERE PA.MONTHYEAR = CAST(@MONTHID AS VARCHAR) + CAST(@FINYEAR AS VARCHAR) AND (AMOUNT - ISNULL(TOTAL, 0)) <> 0 
		SELECT ROW_NUMBER()OVER (ORDER BY CB.BRANCHCODE,PB.BRANCHCODE,FORMTYPE) SLNO,MONTHYEAR,CB.BRANCHCODE AS ZONEBRANCHCODE,PB.BRANCHCODE,
			   FORMTYPE,ACCOUNTNO,PARKEDAMOUNT,DEDUCTIONLINKED,BALANCEPARKEDAMOUNT
		FROM #PARKEDBAL PB WITH(NOLOCK)
			INNER JOIN #COMPDET CB WITH(NOLOCK) ON CB.BRANCHID = PB.ZONEBRANCHID 
		ORDER BY CB.BRANCHCODE,PB.BRANCHCODE,FORMTYPE
		DROP TABLE #COMPDET
		DROP TABLE #DEDUCTIONS
		DROP TABLE #DED
		DROP TABLE #PARKEDBAL
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBANKCOUNTRYCODEDETAIL')
DROP PROCEDURE USP_TDS_GETBANKCOUNTRYCODEDETAIL
GO
CREATE PROCEDURE USP_TDS_GETBANKCOUNTRYCODEDETAIL 
@BANKCOUNTRYID INT
AS
   BEGIN
	 SELECT BANKCOUNTRYID, COUNTRYID, BANKCOUNTRYNAME, BANKCOUNTRYCODE FROM BANKCOUNTRYCODE WITH(NOLOCK) WHERE BANKCOUNTRYID = @BANKCOUNTRYID
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBANKNAMESAUTOCOMPLETE')
DROP PROCEDURE USP_TDS_GETBANKNAMESAUTOCOMPLETE
GO
CREATE PROCEDURE [USP_TDS_GETBANKNAMESAUTOCOMPLETE]
(
 @PREFIXTEXT NVARCHAR(MAX),
 @RECORDCOUNT INT
)
AS
 BEGIN
  DECLARE @QUERY NVARCHAR(MAX);
  SET @QUERY = 'SELECT TOP '+CAST(@RECORDCOUNT AS VARCHAR)+ 'ID,BANKNAME FROM BANKLIST BL WITH(NOLOCK) '
		+ 'WHERE BL.BANKNAME  LIKE ''%' + @PREFIXTEXT + '%''';
 EXEC SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBGLCODE')
DROP PROCEDURE USP_TDS_GETBGLCODE
GO
CREATE PROCEDURE [USP_TDS_GETBGLCODE]
@DEDUCTEEID INT  
AS  
BEGIN  
DECLARE @SQLQUERY NVARCHAR(MAX), @FORMID VARCHAR(5);   
IF(@DEDUCTEEID > 0)
  BEGIN
	 SELECT @FORMID = CASE WHEN ISAPPLICABLE26 = 1 AND ISAPPLICABLE27 = 1 THEN '2,3'
									     WHEN ISAPPLICABLE26 = 1 AND ISAPPLICABLE27 = 0 THEN '2'
									     WHEN ISAPPLICABLE26 = 0 AND ISAPPLICABLE27 = 1 THEN '3'
									   ELSE '' END
	    FROM NONEMPLOYEE WHERE DEDUCTEEID = @DEDUCTEEID
	   SELECT BGLCODEID,BGLCODE + ' (' + T.DESCRIPTION  +')' AS BGLCODE FROM TDSRATE T WITH(NOLOCK) 
		INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON T.SECTIONID = TS.SECTIONID
		WHERE TS.FORMID IN (SELECT * FROM UDF_TDS_SPLITSTRING(@FORMID, ',')) 
		ORDER BY BGLCODE
  END 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBGLCODECBI')
DROP PROCEDURE USP_TDS_GETBGLCODECBI
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETBGLCODECBI]  
AS  
BEGIN  
	SELECT BGLCODEID,BGLCODE +'-'+ TS.SECTIONNAME AS BGLCODE FROM TDSRATE T WITH(NOLOCK) 
	INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON T.SECTIONID = TS.SECTIONID
	WHERE TS.FORMID = 2 AND BGLCODE NOT IN(55800,56685)
	ORDER BY BGLCODE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBGLCODECBINEW')
DROP PROCEDURE USP_TDS_GETBGLCODECBINEW
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETBGLCODECBINEW]
@FORMID INT  
AS  
BEGIN
	IF (@FORMID = 2)
	BEGIN  
		SELECT BGLCODEID,BGLCODE +'-'+ TS.SECTIONNAME AS BGLCODE FROM TDSRATE T WITH(NOLOCK) 
		INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON T.SECTIONID = TS.SECTIONID
		WHERE TS.FORMID = 2 AND BGLCODE NOT IN(55800,56685)
		ORDER BY BGLCODE
	END
	ELSE
	BEGIN
		SELECT BGLCODEID,BGLCODE +'-'+ TS.SECTIONNAME AS BGLCODE FROM TDSRATE T WITH(NOLOCK) 
		INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON T.SECTIONID = TS.SECTIONID
		WHERE TS.FORMID = 3
		ORDER BY BGLCODE
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBGLCODEREGISTER')
DROP PROCEDURE USP_TDS_GETBGLCODEREGISTER
GO
CREATE PROCEDURE [USP_TDS_GETBGLCODEREGISTER] 
@BRANCHID INT = -1,
@FROMDATE SMALLDATETIME = NULL,
@TODATE SMALLDATETIME = NULL
AS
  BEGIN
	 DECLARE @SQLQUERY NVARCHAR(MAX); 
	 IF(@BRANCHID IS NULL) SET @BRANCHID = -1
	SET @SQLQUERY = 'SELECT (SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = DD.BRANCHID) PARENTBRANCHCODE,
           (SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = DD.BRANCHID) PARENTBRANCHNAME,
            MAX(R.BRANCHNAME)BRANCHNAME, MAX(R.BRANCHCODE)BRANCHCODE, R.BRANCHID,DD.SECTIONID,
            SUM(PAYMENTMADE)PAYMENTMADE,SUM(TOTALDEDUCTED)TOTALDEDUCTED,MAX(RP.SERVICETAX)SERVICETAX,
            DD.BGLCODEID,MAX(TR.BGLCODE)BGLCODE, MAX(TR.DESCRIPTION)[DESCRIPTION]
		 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID          
		INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID         
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID   
		INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID 
		INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID AND DD.SECTIONID = TR.SECTIONID
		INNER JOIN
		(          
		   SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID FROM REPORTPAYMENT RP WITH(NOLOCK)            
		   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID          
		   WHERE RP.PARENTBRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
		)R
		ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID
	WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
	IF(@FROMDATE IS NOT NULL AND @TODATE IS NOT NULL)
	 BEGIN
		 SET @SQLQUERY = @SQLQUERY + ' AND PAYMENTDATE  BETWEEN ''' + CONVERT(VARCHAR(10),@FROMDATE,21) + ''' AND ''' + CONVERT(VARCHAR(10),@TODATE,21) + ''''
	 END 
	SET @SQLQUERY = @SQLQUERY + ' 	GROUP BY DD.BGLCODEID, DD.BRANCHID, R.BRANCHID, DD.SECTIONID
														ORDER BY R.BRANCHID'  
	EXEC SP_EXECUTESQL @SQLQUERY;     	
--	PRINT @SQLQUERY
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHCODE')
DROP PROCEDURE USP_TDS_GETBRANCHCODE
GO
CREATE PROCEDURE USP_TDS_GETBRANCHCODE --183,360575
 @BRANCHID INT,  
 @DEDUCTIONID INT  
AS  
BEGIN  
 SELECT CB.BRANCHCODE,DD.ADDITIONALFIELD1 FROM COMPANYBRANCH CB  
 INNER JOIN DEDUCTIONDETAIL DD  
 ON CB.BRANCHID=DD.BRANCHID  
 WHERE DD.DEDUCTIONID=@DEDUCTIONID  
 --CB.BRANCHID=@BRANCHID AND 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHCODE_F005')
DROP PROCEDURE USP_TDS_GETBRANCHCODE_F005
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHCODE_F005]
(
@BRANCHID INT
)
AS
BEGIN
SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHCODES')
DROP PROCEDURE USP_TDS_GETBRANCHCODES
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHCODES]
AS
BEGIN
	DECLARE @NAMES VARCHAR(MAX)
	SELECT @NAMES = COALESCE(@NAMES + ',', '') + BRANCHCODE+'-'+CONVERT(VARCHAR,BRANCHID)  FROM COMPANYBRANCH WITH(NOLOCK)
	SELECT ','+@NAMES+','
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHCODESFORIMPORT')
DROP PROCEDURE USP_TDS_GETBRANCHCODESFORIMPORT
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHCODESFORIMPORT]  
AS  
BEGIN  
SELECT BRANCHID,BRANCHCODE FROM COMPANYBRANCH  WITH(NOLOCK)  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHESCOUNT')
DROP PROCEDURE USP_TDS_GETBRANCHESCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHESCOUNT]
@ISBRANCH BIT=0
AS
	BEGIN
		SELECT COUNT(BRANCHID) FROM COMPANYBRANCH WITH(NOLOCK)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetBranchesWithValidEreturn')
DROP PROCEDURE USP_TDS_GetBranchesWithValidEreturn
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetBranchesWithValidEreturn]
	@BRANCH_CODE VARCHAR(MAX),
	@FORM_ID INT,
	@QUARTER INT
AS
	BEGIN
		DECLARE @QUERY_STRING NVARCHAR(MAX);
		SET @QUERY_STRING = 'SELECT CB.BRANCHCODE,CB.BRANCHID,FORMID,AN.QUARTER,TAN
							 FROM ACKNO AN WITH(NOLOCK) 
								INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = AN.BRANCHID
								INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID 
										   AND BD.QUARTER = AN.QUARTER
								INNER JOIN DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID
							 WHERE ISVALID = 1 
								AND LEN(TRACESACNAME) > 0 AND LEN(TRACESACPWD) > 0 '
		IF(@BRANCH_CODE <> 'ALL')
			SET @QUERY_STRING = @QUERY_STRING + ' AND CB.BRANCHCODE IN (' + @BRANCH_CODE + ')' 
		IF(@QUARTER > 0)
			SET @QUERY_STRING = @QUERY_STRING + ' AND BD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) 
		IF(@FORM_ID > 0)
			SET @QUERY_STRING = @QUERY_STRING + ' AND AN.FORMID = ' + CAST(@FORM_ID AS VARCHAR)
	END
	EXEC SP_EXECUTESQL @QUERY_STRING;

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHID')
DROP PROCEDURE USP_TDS_GETBRANCHID
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHID]
@BRANCHCODE VARCHAR(10)
AS
	BEGIN
		DECLARE @BRANCHID INT;
		IF EXISTS(SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE=@BRANCHCODE)
			BEGIN
				SELECT @BRANCHID=BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE=@BRANCHCODE;
			END
		ELSE
			BEGIN
				SET @BRANCHID=-1;
			END
			SELECT @BRANCHID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHIDFROMBRANCHCODE')
DROP PROCEDURE USP_TDS_GETBRANCHIDFROMBRANCHCODE
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHIDFROMBRANCHCODE]
@BRANCHCODE INT
AS
BEGIN
	SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE=@BRANCHCODE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetBranchIDHavingTan')
DROP PROCEDURE USP_TDS_GetBranchIDHavingTan
GO
CREATE PROCEDURE USP_TDS_GetBranchIDHavingTan  
@TAN VARCHAR(10),
@QUARTER INT  
AS  
	BEGIN  
		DECLARE @BRANCHID INT;
		SELECT @BRANCHID = CB.BRANCHID 
		FROM DEDUCTOR D
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID 
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID
		WHERE TAN = @TAN AND BD.QUARTER = @QUARTER
		IF @BRANCHID = '' OR @BRANCHID IS NULL 
			BEGIN  
				SET @BRANCHID=-1;  
			END  
		SELECT @BRANCHID;  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHINPUTDETAIL')
DROP PROCEDURE USP_TDS_GETBRANCHINPUTDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHINPUTDETAIL] 
@ID INT          
AS          
 BEGIN          
     DECLARE @NONTDS NUMERIC(13,2), @INCLUDEDDED NUMERIC(13,2), @TDSMADE NUMERIC(13,2), @THRESHOLDLIMIT NUMERIC(13,2),          
     @CURRENTPAYMENT NUMERIC(13,2), @TOTALPAYMENT NUMERIC(13,2), @ISTHRESHOLDCROSSED BIT, @LIMIT NUMERIC(13,2),          
      @DEDUCTEEID INT, @SECTIONID INT, @MODEOFPAYMENT INT , @DEDAMT NUMERIC(13,2), @COUNTID INT, @CONLIMIT NUMERIC(13,2);          
       DECLARE @CANSPLIT INT, @SUMOF94C NUMERIC(13,2);          
   SET @COUNTID = 0;    SET @CANSPLIT=0          
   SET @MODEOFPAYMENT = -1;          
   SELECT @MODEOFPAYMENT =  CASE WHEN ROUNDOFF IS NULL THEN -1   WHEN   ROUNDOFF = 1 THEN -1  ELSE ROUNDOFF END FROM DEFAULTSETTINGS WITH(NOLOCK)          
   SELECT @DEDUCTEEID = DEDUCTEEID , @SECTIONID = SECTIONID FROM REPORTPAYMENT WITH(NOLOCK) WHERE ID = @ID;          
   SELECT @CONLIMIT = ISNULL(CONLIMIT,0) FROM NONEMPLOYEE WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID       
 SELECT @NONTDS = SUM(DD.PAYMENTMADE)  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)          
 INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON DD.SECTIONID = RP.SECTIONID AND DD.DEDUCTEEID = RP.DEDUCTEEID          
 WHERE (DD.NONDEDREASON = 5 OR DD.NONDEDREASON = 3) AND ISNULL(DD.TOTALDEDUCTED,0) = 0 AND REFDEDUCTIONID IS NULL AND RP.ID = @ID       
 SELECT @INCLUDEDDED = SUM(DD.PAYMENTMADE) FROM DEDUCTIONDETAIL DD WITH(NOLOCK)          
 INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON DD.SECTIONID = RP.SECTIONID AND DD.DEDUCTEEID = RP.DEDUCTEEID          
 WHERE REFDEDUCTIONID IS NOT NULL AND DD.TOTALDEDUCTED = 0 AND RP.ID = @ID          
 SELECT @TDSMADE = SUM(ISNULL(DD.PAYMENTMADE,0)) , @DEDAMT = SUM(DD.TOTALDEDUCTED) FROM DEDUCTIONDETAIL DD WITH(NOLOCK)          
 INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON DD.SECTIONID = RP.SECTIONID AND DD.DEDUCTEEID = RP.DEDUCTEEID          
 WHERE (ISNULL(DD.TOTALDEDUCTED,0) > 0 OR (ISNULL(DD.TOTALDEDUCTED,0)= 0 AND DD.NONDEDREASON = 1)) AND RP.ID = @ID      
 SELECT @CURRENTPAYMENT =  EXCLUDESERVICETAX         
   FROM REPORTPAYMENT WITH(NOLOCK) WHERE ID = @ID          
  SELECT @COUNTID = COUNT(REPORTPAYMENTID)          
  FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE SECTIONID = @SECTIONID AND DEDUCTEEID = @DEDUCTEEID          
  GROUP BY REPORTPAYMENTID          
  HAVING COUNT(REPORTPAYMENTID) > 1          
  SELECT @SUMOF94C = SUM(ISNULL(PAYMENTMADE,0)) FROM DEDUCTIONDETAIL WITH(NOLOCK)   
  WHERE DEDUCTEEID = @DEDUCTEEID AND SECTIONID = @SECTIONID AND PAYMENTMADE <=30000         
  SELECT @TOTALPAYMENT = (ISNULL(@NONTDS, 0) + ISNULL(@INCLUDEDDED, 0) + ISNULL(@TDSMADE, 0))          
   IF((ISNULL(@NONTDS,0) + ISNULL(@INCLUDEDDED,0) + ISNULL(@TDSMADE,0)) < ISNULL(@CONLIMIT,0) AND (ISNULL(@NONTDS,0) + ISNULL(@INCLUDEDDED,0) + ISNULL(@TDSMADE,0) + ISNULL(@CURRENTPAYMENT,0)) > ISNULL(@CONLIMIT,0) AND ISNULL(@CONLIMIT,0) <> 0 AND ISNULL(@COUNTID,0)< 2)          
   BEGIN          
    SET @CANSPLIT = 1;          
   END          
    SELECT @THRESHOLDLIMIT =      
  CASE WHEN (ISNULL(@NONTDS,0) = 0 AND TR.SECTIONID = 8 AND ISNULL(@CURRENTPAYMENT,0) > 30000)          
     THEN 30000    
     WHEN (ISNULL(@NONTDS,0) = 0 AND TR.SECTIONID = 8 AND ISNULL(@CURRENTPAYMENT,0) < 30000)          
     THEN 75000    
     WHEN (ISNULL(@NONTDS,0) > 0 AND TR.SECTIONID = 8 AND ISNULL(@CURRENTPAYMENT,0) > 30000)          
     THEN 30000      
     WHEN (ISNULL(@NONTDS,0) > 0 AND TR.SECTIONID = 8 AND ISNULL(@CURRENTPAYMENT,0) <= 30000)          
     THEN 75000      
     ELSE ISNULL(TR.THRESHOLDLIMIT,0)          
  END      
     FROM TDSRATE TR      
     INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID          
     WHERE RP.ID = @ID      
   SELECT NE.SERIALNO, D.NAME, D.PAN,D.DEDUCTEEID, ISNULL(RP.EXCLUDESERVICETAX,0)EXCLUDESERVICETAX, ISNULL(RP.SERVICETAX,0)SERVICETAX,          
     ISNULL(TR.SECTIONID, -1)SECTIONID, ISNULL(@THRESHOLDLIMIT,0)THRESHOLDLIMIT,ISNULL(NE.CONTAXRATE,-1)CONTAXRATE, ISNULL(NE.STREGNO, '') STREGNO,          
     ISNULL(NE.CONLIMIT,0)CONLIMIT, @TDSMADE TDSMADE, @DEDAMT DEDAMT,  ISNULL(@INCLUDEDDED,0) INCLUDEDDED,@COUNTID COUNTID,          
       CASE WHEN NE.STATUS IN(1,2,3,4)          
        THEN TR.CATEGORY1          
       ELSE TR.CATEGORY2          
    END AS ITRATE,          
    TR.BGLCODE, TS.SECTIONNAME,TR.BGLCODEID, ISNULL(NE.ACCOUNTNUMBER,'')ACCOUNTNUMBER , ISNULL(NE.IFSCCODE, '')IFSCCODE,          
    ISNULL(@NONTDS,0) AS PAYMENTMADE, NE.MAKETDSFROMFIRSTPAYMENT,          
    ISNULL(NE.BANKNAME,'') BANKNAME,  ISNULL(NE.BRANCHNAME,'')BRANCHNAME,              
    CASE WHEN (TR.SECTIONID = 8 AND (ISNULL(@TOTALPAYMENT,0) + @CURRENTPAYMENT) > @THRESHOLDLIMIT)          
         THEN 1          
        WHEN (TR.SECTIONID <> 8 AND (ISNULL(@TOTALPAYMENT,0) + @CURRENTPAYMENT) > @THRESHOLDLIMIT)          
         THEN 1          
         ELSE 0
   END AS ISTHRESHOLDCROSSED,          
    CASE WHEN (@TOTALPAYMENT + @CURRENTPAYMENT) <= CONLIMIT          
        THEN 0          
       ELSE 1          
      END AS ISCONTAXLIMITCROSSED,          
    @MODEOFPAYMENT AS MODEOFPAYMENT, @CANSPLIT AS CANSPLITDED,  @CURRENTPAYMENT AS CURRENTPAYMENT          
   FROM REPORTPAYMENT RP WITH(NOLOCK)          
   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON RP.DEDUCTEEID = D.DEDUCTEEID          
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID          
   INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID          
   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID          
   WHERE RP.ID = @ID          
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetBranchInputDetailsCount')
DROP PROCEDURE USP_TDS_GetBranchInputDetailsCount
GO
CREATE PROCEDURE [USP_TDS_GetBranchInputDetailsCount]
@BRANCHID INT,            
@FORMID INT,        
@BRANCHNAME VARCHAR(100),        
@BRANCHCODE VARCHAR(10),        
@NAME VARCHAR(75),        
@PAN VARCHAR(10),        
@AMTFROM NUMERIC(13,2) = NULL,        
@AMTTO NUMERIC(13,2) = NULL,        
@BGLCODE VARCHAR(10) = NULL,  
@CREATIONDATE SMALLDATETIME = NULL                                        
AS            
 BEGIN            
   DECLARE @SQLQUERY NVARCHAR(MAX);             
   CREATE TABLE #DEDMST1(NAME VARCHAR(75),PAN VARCHAR(10),DEDUCTEEID INT,BRANCHID INT)
   INSERT INTO #DEDMST1
   SELECT D.NAME, D.PAN, D.DEDUCTEEID, D.BRANCHID 
	FROM DEDUCTEE D WITH(NOLOCK) 
	WHERE
		D.BRANCHID = @BRANCHID
   SELECT NE.SERIALNO, D.NAME, D.PAN, D.DEDUCTEEID, D.BRANCHID 
   INTO #DEDMST 
   FROM #DEDMST1 D 
    	INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID 
    CREATE TABLE #DEDDETAIL(REPORTPAYMENTID INT)
	INSERT INTO #DEDDETAIL
    SELECT REPORTPAYMENTID FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
    SELECT * INTO #REPPAY FROM REPORTPAYMENT RP WHERE RP.PARENTBRANCHID = @BRANCHID AND 
    NOT EXISTS 
    (
		SELECT REPORTPAYMENTID FROM #DEDDETAIL T WHERE RP.ID = T.REPORTPAYMENTID AND T.REPORTPAYMENTID IS NOT NULL
    )
    DROP TABLE #DEDDETAIL
    SET @SQLQUERY = ' SELECT COUNT(*) FROM #REPPAY RP WITH(NOLOCK)                            
   INNER JOIN #DEDMST D ON D.DEDUCTEEID = RP.DEDUCTEEID  AND D.BRANCHID = RP.PARENTBRANCHID                
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID                                   
   INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID AND TR.SECTIONID = RP.SECTIONID                               
   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID                          
   WHERE TS.FORMID = ' + CAST(@FORMID AS VARCHAR)  +' AND D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)           
   IF(@BRANCHNAME <> '')        
    BEGIN        
      SET @SQLQUERY = @SQLQUERY + 'AND CB.BRANCHNAME LIKE ''%' + CAST(@BRANCHNAME AS VARCHAR) + '%'''        
    END           
   IF(@BRANCHCODE <> '')        
    BEGIN         
     SET @SQLQUERY = @SQLQUERY + 'AND CB.BRANCHCODE LIKE ''%' + CAST(@BRANCHCODE AS VARCHAR) + '%'''        
    END           
   IF(@NAME <> '')        
     BEGIN        
     SET @SQLQUERY = @SQLQUERY + 'AND D.NAME LIKE ''%' + CAST(@NAME AS VARCHAR) + '%'''        
     END           
   IF(@PAN <> '')        
    BEGIN         
     SET @SQLQUERY = @SQLQUERY + 'AND D.PAN LIKE ''%' + CAST(@PAN AS VARCHAR) + '%'''        
    END            
   IF(@AMTFROM IS NOT NULL AND @AMTTO IS NOT NULL)        
    BEGIN         
     SET @SQLQUERY = @SQLQUERY + 'AND RP.PAYMENTAMOUNT BETWEEN ' + CAST(@AMTFROM AS VARCHAR) + ' AND '+ CAST(@AMTTO AS VARCHAR)         
    END           
   IF(@BGLCODE <> '')        
    BEGIN        
     SET @SQLQUERY = @SQLQUERY + 'AND TR.BGLCODE LIKE ''' + CAST(@BGLCODE AS VARCHAR) + '%'''        
    END             
    IF(@CREATIONDATE IS NOT NULL)  
   BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND RP.RPDATE = ''' + CAST(@CREATIONDATE AS VARCHAR) + ''''         
   END   
   EXEC SP_EXECUTESQL @SQLQUERY;
   DROP TABLE #DEDMST
   DROP TABLE #DEDMST1
   --PRINT @SQLQUERY        
     END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetBranchInputDetailsPaged')
DROP PROCEDURE USP_TDS_GetBranchInputDetailsPaged
GO
CREATE PROCEDURE [USP_TDS_GetBranchInputDetailsPaged]  
@PAGINDEX INT,                                    
@PAGESIZE INT,                            
@BRANCHID INT,                                
@FORMID INT ,          
@BRANCHNAME VARCHAR(100),          
@BRANCHCODE VARCHAR(10),          
@NAME VARCHAR(75),          
@PAN VARCHAR(10),          
@AMTFROM NUMERIC(13,2) = NULL,          
@AMTTO NUMERIC(13,2) = NULL,          
@BGLCODE VARCHAR(10) = NULL,  
@CREATIONDATE SMALLDATETIME = NULL                          
AS                                      
 BEGIN                                      
  DECLARE @FIRSTINDEX INT, @LASTINDEX INT, @SQLQUERY NVARCHAR(MAX);                                    
  SELECT @FIRSTINDEX = (@PAGINDEX - 1) * @PAGESIZE;                                          
  SELECT @LASTINDEX = (@PAGINDEX * @PAGESIZE + 1);                                               
  CREATE TABLE #DEDMST(SERIALNO INT,NAME VARCHAR(75),PAN VARCHAR(10),DEDUCTEEID INT,BRANCHID INT)
  CREATE TABLE #DED(NAME VARCHAR(75),PAN VARCHAR(10),DEDUCTEEID INT,BRANCHID INT)
  INSERT INTO #DED  
  SELECT NAME,PAN,DEDUCTEEID,BRANCHID FROM 
  DEDUCTEE WITH(NOLOCK)
  WHERE BRANCHID=@BRANCHID
 INSERT INTO #DEDMST
 SELECT NE.SERIALNO, D.NAME, D.PAN, D.DEDUCTEEID, D.BRANCHID   
 FROM #DED D WITH(NOLOCK)   
  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID   
 WHERE  
  D.BRANCHID = @BRANCHID  
    DROP TABLE #DED
    CREATE TABLE #RPTID(REPORTPAYMENTID INT)
    INSERT INTO #RPTID 
    SELECT REPORTPAYMENTID FROM DEDUCTIONDETAIL WITH(NOLOCK) 
    WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID   
    CREATE TABLE #REPPAY(ID INT,RPDATE SMALLDATETIME,SECTIONID INT,BILLDATE SMALLDATETIME,BILLNUM VARCHAR(25),
    PAYMENTAMOUNT NUMERIC(13,2),PARENTBRANCHID INT,DEDUCTEEID INT,BRANCHID INT,BGLCODEID INT)
    INSERT INTO #REPPAY  
    SELECT RP.ID,RP.RPDATE,RP.SECTIONID,RP.BILLDATE,RP.BILLNUM,RP.PAYMENTAMOUNT,RP.PARENTBRANCHID,
    RP.DEDUCTEEID,RP.BRANCHID,RP.BGLCODEID
    FROM REPORTPAYMENT RP 
    WHERE RP.PARENTBRANCHID = @BRANCHID AND   
    NOT EXISTS   
    (  
		SELECT REPORTPAYMENTID FROM #RPTID T WHERE RP.ID = T.REPORTPAYMENTID AND T.REPORTPAYMENTID IS NOT NULL 
    )  
    DROP TABLE #RPTID 
  SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER (ORDER BY RP.RPDATE ASC) ROWNUM, CB.BRANCHNAME, CB.BRANCHCODE  ,RP.ID, D.SERIALNO, D.NAME, D.PAN, TR.BGLCODE,                                     
        CASE WHEN (TS.SECTIONNAME IS NULL) THEN '''' ELSE (TS.SECTIONNAME + ''-''+ TS.DESCRIPTION) END AS SECTIONNAME, RP.RPDATE AS CREATIONDATE,                                    
        RP.PAYMENTAMOUNT, ISNULL(RP.BILLNUM, '''')BILLNUM, RP.BILLDATE, RP.SECTIONID                                    
        INTO #BRANCHINPUT                                    
        FROM #REPPAY RP WITH(NOLOCK)                                    
        INNER JOIN #DEDMST D WITH(NOLOCK) ON D.DEDUCTEEID = RP.DEDUCTEEID AND RP.PARENTBRANCHID = D.BRANCHID     
        --INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID   
        INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID                                            
        INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID AND TR.SECTIONID = RP.SECTIONID                                     
        INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID          
        --LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.REPORTPAYMENTID = RP.ID                          
        WHERE TS.FORMID = '+ CAST(@FORMID AS VARCHAR) +' AND --DD.REPORTPAYMENTID IS NULL AND                    
        D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)                    
  IF(@BRANCHNAME <> '')          
   BEGIN          
   SET @SQLQUERY = @SQLQUERY + 'AND CB.BRANCHNAME LIKE ''%' + CAST(@BRANCHNAME AS VARCHAR) + '%'''          
   END             
  IF(@BRANCHCODE <> '')          
  BEGIN           
   SET @SQLQUERY = @SQLQUERY + 'AND CB.BRANCHCODE LIKE ''%' + CAST(@BRANCHCODE AS VARCHAR) + '%'''          
  END             
 IF(@NAME <> '')  
   BEGIN          
   SET @SQLQUERY = @SQLQUERY + 'AND D.NAME LIKE ''%' + CAST(@NAME AS VARCHAR) + '%'''          
   END             
 IF(@PAN <> '')          
  BEGIN           
   SET @SQLQUERY = @SQLQUERY + 'AND D.PAN LIKE ''%' + CAST(@PAN AS VARCHAR) + '%'''          
  END              
 IF(@AMTFROM IS NOT NULL AND @AMTTO IS NOT NULL)          
  BEGIN           
   SET @SQLQUERY = @SQLQUERY + 'AND RP.PAYMENTAMOUNT BETWEEN ' + CAST(@AMTFROM AS VARCHAR) + ' AND '+ CAST(@AMTTO AS VARCHAR)           
  END             
 IF(@BGLCODE <> '')          
 BEGIN          
 SET @SQLQUERY = @SQLQUERY + 'AND TR.BGLCODE LIKE ''' + CAST(@BGLCODE AS VARCHAR) + '%'''          
 END        
 IF(@CREATIONDATE IS NOT NULL)  
  BEGIN  
 SET @SQLQUERY = @SQLQUERY + ' AND RP.RPDATE = ''' + CAST(@CREATIONDATE AS VARCHAR) + ''''         
  END  
  --SET @SQLQUERY = @SQLQUERY + ' ORDER BY RP.RPDATE DESC'       
  SET @SQLQUERY = @SQLQUERY + '; SELECT * FROM #BRANCHINPUT  WHERE ROWNUM > '+ CAST(@FIRSTINDEX AS VARCHAR) +' AND ROWNUM < '+ CAST(@LASTINDEX AS VARCHAR)                   
--PRINT @SQLQUERY;                                    
EXEC SP_EXECUTESQL @SQLQUERY;  
DROP TABLE #REPPAY
DROP TABLE #DEDMST 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHNAME')
DROP PROCEDURE USP_TDS_GETBRANCHNAME
GO
CREATE PROCEDURE USP_TDS_GETBRANCHNAME
 @BRANCHID INT  
AS  
BEGIN  
 SELECT BRANCHNAME,BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID=@BRANCHID;  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHUSERSCOUNT')
DROP PROCEDURE USP_TDS_GETBRANCHUSERSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHUSERSCOUNT]
   @USERID INT,
   @BRANCHID INT,
   @INCLUDECHILD BIT,
   @USERNAME VARCHAR(20)=NULL,
   @BRANCHNAMECODE VARCHAR(100)=NULL
AS
	BEGIN
		DECLARE @ISSUPERADMIN BIT;
		DECLARE @ISBRANCHADMIN BIT;
		DECLARE @SQLQUERY NVARCHAR(MAX)
		DECLARE @ISWHERENOTAVAIL BIT
		SELECT @ISSUPERADMIN = ISSUPERADMIN,@ISBRANCHADMIN = ISBRANCHADMIN FROM USERMASTER WHERE USERID = @USERID
		IF(@ISSUPERADMIN=1)
			BEGIN
				SET @SQLQUERY='SELECT COUNT(UM.USERID) FROM USERMASTER UM WITH(NOLOCK) INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON UM.BRANCHID = CB.BRANCHID'
				SET @ISWHERENOTAVAIL=1
			END
		ELSE IF(@ISBRANCHADMIN=1)
			BEGIN
			    IF(@INCLUDECHILD=1)
				BEGIN
				SET @SQLQUERY='SELECT COUNT(USERID) FROM USERMASTER UM WITH(NOLOCK) LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON UM.BRANCHID = CB.BRANCHID
					            WHERE UM.BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE  (
											SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE
												(SELECT CB.PARENTBASEID FROM USERMASTER US WITH(NOLOCK)
																			  INNER JOIN
																			COMPANYBRANCH CB WITH(NOLOCK)
																		  ON US.BRANCHID=CB.BRANCHID WHERE USERID='+CAST(@USERID AS VARCHAR)+')+''%'' AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+')+''%'')'
				SET @ISWHERENOTAVAIL=0
				END
				ELSE
				BEGIN
				SET @SQLQUERY='SELECT  COUNT(UM.USERID)
				                 FROM  USERMASTER UM WITH(NOLOCK) INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON UM.BRANCHID = CB.BRANCHID
				                WHERE  USERID ='+CAST(@USERID AS VARCHAR)+''
				SET @ISWHERENOTAVAIL=0
				END
			END
	    ELSE
	        BEGIN
	           SET @SQLQUERY='SELECT  COUNT(UM.USERID)
				                 FROM  USERMASTER UM WITH(NOLOCK) INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON UM.BRANCHID = CB.BRANCHID
				                WHERE  USERID ='+CAST(@USERID AS VARCHAR)+''
				SET @ISWHERENOTAVAIL=0
	        END
	 IF @USERNAME IS NOT NULL
		BEGIN
		   IF @ISWHERENOTAVAIL=1
		      BEGIN
		      SET @SQLQUERY=@SQLQUERY+' WHERE ';
			  SET @ISWHERENOTAVAIL=0;
		      END
		   ELSE
		      BEGIN
		      SET @SQLQUERY=@SQLQUERY+' AND ';
		      END
		SET @SQLQUERY=@SQLQUERY+'USERNAME LIKE ''%'+CAST(@USERNAME AS VARCHAR(100))+'%'''
		END
		IF @BRANCHNAMECODE IS NOT NULL
		BEGIN
		   IF @ISWHERENOTAVAIL=1
		      BEGIN
		      SET @SQLQUERY=@SQLQUERY+' WHERE ';
			  SET @ISWHERENOTAVAIL=0;
		      END
		   ELSE
		      BEGIN
		      SET @SQLQUERY=@SQLQUERY+' AND ';
		      END
		SET @SQLQUERY=@SQLQUERY+'(CB.BRANCHNAME LIKE ''%'+CAST(@BRANCHNAMECODE AS VARCHAR(100))+'%'' OR CB.BRANCHCODE  LIKE ''%'+CAST(@BRANCHNAMECODE AS VARCHAR(100))+'%'')'
		END
		EXECUTE SP_EXECUTESQL @SQLQUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHWISEDEDUCTIONFINACLE')
DROP PROCEDURE USP_TDS_GETBRANCHWISEDEDUCTIONFINACLE
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHWISEDEDUCTIONFINACLE]        
(        
@MONTHYEAR INT,        
@FINYEAR INT        
)        
AS        
BEGIN      
SET NOCOUNT ON      
DECLARE @TEMP TABLE(BRANCHCODE VARCHAR(7),BRANCHNAME VARCHAR(75),PBRANCHCODE VARCHAR(7),FORMTYPE VARCHAR(4),MONTH VARCHAR(25),T_COUNT INT,AMOUNT NUMERIC(13,2))      
INSERT INTO @TEMP      
SELECT CB.BRANCHCODE, CB.BRANCHNAME, (SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = CB.PARENTBRANCHID) [PARENT_BRANCH],      
FINDATA.FORMTYPE, FINDATA.MONTHYEAR_D, FINDATA.TDS_COUNT, FINDATA.TDS_AMOUNT FROM       
(      
SELECT BRANCHID, CASE WHEN SECTIONID = 5 THEN '26QI' ELSE CASE WHEN SECTIONID = 17 THEN '27Q' ELSE '26QV' END END AS FORMTYPE,       
DATENAME(MONTH, DEDUCTEDDATE) + ' ' + DATENAME(YEAR, DEDUCTEDDATE) [MONTHYEAR_D], COUNT(DEDUCTIONID) [TDS_COUNT], SUM(TOTALDEDUCTED) [TDS_AMOUNT]      
FROM DEDUCTIONDETAIL WITH(NOLOCK)       
WHERE      
 MONTH(DEDUCTEDDATE) = @MONTHYEAR AND YEAR(DEDUCTEDDATE) = @FINYEAR AND      
 FORMID <> 1 AND SECTIONID IN (5, 17) AND      
 TOTALDEDUCTED > 0 AND ENTRYTYPE=4     
GROUP BY BRANCHID, SECTIONID, DATENAME(MONTH, DEDUCTEDDATE) + ' ' + DATENAME(YEAR, DEDUCTEDDATE)      
) FINDATA INNER JOIN COMPANYBRANCH CB ON FINDATA.BRANCHID = CB.BRANCHID      
ORDER BY BRANCHCODE, FORMTYPE      
DECLARE @PREVBRANCHCODE VARCHAR(7);      
DECLARE @BRANCHCODE VARCHAR(7);      
DECLARE @BRANCHNAME VARCHAR(75);      
DECLARE @PBRANCHCODE VARCHAR(75);      
DECLARE @FORM VARCHAR(10);      
DECLARE @MONTH VARCHAR(75);      
DECLARE @26QCOUNT  INT;      
DECLARE @COUNT  INT;      
DECLARE @27QCOUNT INT;      
DECLARE @AMT NUMERIC(13,2);      
DECLARE @26QAMT NUMERIC(13,2);      
DECLARE @27QAMT NUMERIC(13,2);      
SET @PREVBRANCHCODE='';      
DECLARE @TEMP2 TABLE(BRANCHCODE VARCHAR(7),BRANCHNAME VARCHAR(75),PBRANCHCODE VARCHAR(7),FORMTYPE VARCHAR(4),MONTH VARCHAR(25),T_COUNT INT,AMOUNT NUMERIC(13,2))      
INSERT INTO @TEMP2      
SELECT * FROM @TEMP      
DECLARE @TEMP1 TABLE(BRANCHCODE VARCHAR(7),BRANCHNAME VARCHAR(75),PBRANCHCODE VARCHAR(7),MONTH VARCHAR(25),TS26QCOUNT INT,TS26QAMT NUMERIC(13,2),TS27QCOUNT INT,TS27QAMT NUMERIC(13,2) ,AMOUNT NUMERIC(13,2))      
WHILE(EXISTS(SELECT TOP 1 BRANCHCODE FROM @TEMP))      
BEGIN      
SELECT TOP 1 @BRANCHCODE=BRANCHCODE,@BRANCHNAME=BRANCHNAME,@PBRANCHCODE=PBRANCHCODE,@MONTH=MONTH,@FORM=FORMTYPE,@COUNT=T_COUNT,@AMT= AMOUNT FROM @TEMP      
IF(@FORM='26QI')      
BEGIN      
 SET @26QCOUNT=@COUNT      
 SET @26QAMT=@AMT;      
END      
IF(@FORM='27Q')      
BEGIN      
 SET @27QCOUNT=@COUNT;      
SET @27QAMT= @AMT      
END      
IF(@BRANCHCODE=@PREVBRANCHCODE)      
 BEGIN      
  INSERT INTO @TEMP1      
  SELECT @BRANCHCODE,@BRANCHNAME,@PBRANCHCODE,@MONTH,@26QCOUNT,@26QAMT,@27QCOUNT,@27QAMT,(@26QAMT+@27QAMT)      
 END      
SET @PREVBRANCHCODE=@BRANCHCODE;      
DELETE TOP(1) FROM @TEMP      
END      
--BUILD TEXT FILE      
SELECT  (TEXTFILE.BRANCHCODE+'|'+TEXTFILE.BRANCHNAME+'|'+TEXTFILE.PBRANCHCODE+'|'+ CAST(TEXTFILE.MONTH AS VARCHAR)+'|'+ CAST(TEXTFILE.TS26QCOUNT AS VARCHAR)      
+'|'+ CAST(TEXTFILE.TS26QAMT AS VARCHAR)+'|'+CAST(TEXTFILE.TS27QCOUNT AS VARCHAR)+'|'+CAST(TEXTFILE.TS27QAMT AS VARCHAR)+'|'+CAST(TEXTFILE.AMOUNT AS VARCHAR)) AS TEXTFILE  FROM      
(      
SELECT * FROM @TEMP1      
UNION ALL      
SELECT T.BRANCHCODE,T.BRANCHNAME,T.PBRANCHCODE,T.MONTH,TS26QCOUNT=CASE WHEN T.FORMTYPE='26QI' THEN T.T_COUNT ELSE 0 END,      
TS26QAMT=CASE WHEN T.FORMTYPE='26QI' THEN T.AMOUNT ELSE 0 END,TS27QCOUNT=CASE WHEN T.FORMTYPE='27Q' THEN T.T_COUNT ELSE 0 END,      
TS27QAMT=CASE WHEN T.FORMTYPE='27Q' THEN T.AMOUNT ELSE 0 END,      
AMOUNT=CASE WHEN T.FORMTYPE='26QI' THEN T.AMOUNT ELSE CASE WHEN T.FORMTYPE='26QV' THEN T.AMOUNT ELSE CASE WHEN T.FORMTYPE='27Q' THEN T.AMOUNT ELSE 0 END END END      
 FROM  @TEMP2 T      
WHERE BRANCHCODE NOT IN(  
SELECT BRANCHCODE FROM @TEMP1)      
) TEXTFILE 
SET NOCOUNT OFF      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBRANCHWISEREMITTANCE')
DROP PROCEDURE USP_TDS_GETBRANCHWISEREMITTANCE
GO
CREATE PROCEDURE [USP_TDS_GETBRANCHWISEREMITTANCE]
(
@DATE SMALLDATETIME
)
AS
BEGIN
SET NOCOUNT ON
SELECT BRANCHCODE+'|'+BRANCHNAME+'|'+ISNULL(PARENT_BRANCHCODE,'NOT AVAILABLE')+'|'+ MONTHYEAR_D +'|'+ CAST(ISNULL([26QI],0.00) AS VARCHAR)+'|'+CAST(ISNULL([26QV],0.00) AS VARCHAR)+'|'+CAST(ISNULL([27Q],0.00) AS VARCHAR)+'|'+
       CAST(ISNULL([26QV],0.00) + ISNULL([26QI],0.00)+ISNULL([27Q],0.00) AS VARCHAR) TEXTFILE
FROM
(
		SELECT CB.BRANCHCODE, CB.BRANCHNAME,
		(SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = CB.PARENTBRANCHID) [PARENT_BRANCHCODE],
		FINDATA.FORMTYPE, FINDATA.MONTHYEAR_D, FINDATA.TDS_AMOUNT   FROM
		(
		SELECT D.BRANCHID, CASE
            WHEN (D.FORMID = 2 AND D.SECTIONID = 5 AND D.ENTRYTYPE = 4) THEN '26QI'
   WHEN (D.FORMID = 2 AND ((D.SECTIONID = 5 AND D.ENTRYTYPE <> 4 AND D.ENTRYTYPE = 1 AND C.ISAUTOGENERATED = 1) OR (D.SECTIONID <> 5 AND D.ENTRYTYPE = 1 AND C.ISAUTOGENERATED = 1) OR D.ENTRYTYPE <> 1)) THEN '26QV'
   WHEN (D.FORMID = 3 AND (D.ENTRYTYPE = 1 AND C.ISAUTOGENERATED = 1) OR (D.ENTRYTYPE <> 1)) THEN '27Q' END  FORMTYPE,
		DATENAME(MONTH, D.DEDUCTEDDATE) + ' ' + DATENAME(YEAR, D.DEDUCTEDDATE) [MONTHYEAR_D], COUNT(D.DEDUCTIONID) [TDS_COUNT], SUM(D.TOTALDEDUCTED) [TDS_AMOUNT]
		FROM DEDUCTIONDETAIL D WITH(NOLOCK) INNER JOIN DEDCHALINK L WITH(NOLOCK) ON D.DEDUCTIONID = L.DEDUCTIONID
		 INNER JOIN CHALLANDETAIL C WITH(NOLOCK) ON L.CHALLANID = C.CHALLANID
		WHERE
		 D.FORMID IN(2,3) AND D.TOTALDEDUCTED > 0 AND C.ISAUTOGENERATED = 1 AND  CONVERT(VARCHAR, C.CHALLANPAIDDATE, 112)=@DATE
		GROUP BY C.ISAUTOGENERATED,D.FORMID, D.BRANCHID, D.SECTIONID,D.ENTRYTYPE, DATENAME(MONTH, D.DEDUCTEDDATE) + ' ' + DATENAME(YEAR, D.DEDUCTEDDATE)
		) FINDATA INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON FINDATA.BRANCHID = CB.BRANCHID
) UP
PIVOT (SUM(TDS_AMOUNT) FOR FORMTYPE IN ([26QI],[26QV] ,[27Q])) AS PVT
ORDER BY BRANCHCODE
SET NOCOUNT OFF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBSRCODEBYAUTOCOMPLETE')
DROP PROCEDURE USP_TDS_GETBSRCODEBYAUTOCOMPLETE
GO
CREATE PROCEDURE [USP_TDS_GETBSRCODEBYAUTOCOMPLETE]
@PREFIXTEXT NVARCHAR(MAX),
@COUNT INT
AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
SET @QUERY = 'SELECT TOP ' + CAST(@COUNT AS VARCHAR) + ' BANKID, BSRCODE FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE LIKE ''' + @PREFIXTEXT +'%'''+'ORDER BY BSRCODE ASC'
EXEC SP_EXECUTESQL @QUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBSRCODES')
DROP PROCEDURE USP_TDS_GETBSRCODES
GO
CREATE PROCEDURE [USP_TDS_GETBSRCODES]
AS
SELECT BSRCODE FROM REMITTINGBANK WITH(NOLOCK)
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetBsrCodeTableData')
DROP PROCEDURE USP_TDS_GetBsrCodeTableData
GO
CREATE PROCEDURE USP_TDS_GetBsrCodeTableData
AS    
BEGIN   
	SELECT * FROM REMITTINGBANK WITH(NOLOCK) 
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBULKCHALLANS')
DROP PROCEDURE USP_TDS_GETBULKCHALLANS
GO
CREATE PROCEDURE [USP_TDS_GETBULKCHALLANS]
	 @BRANCHID INT,
	 @FORMID TINYINT,
	 @QUARTER TINYINT,
	 @UPDATEITEMS VARCHAR(MAX)
	 AS
	 BEGIN
	 DECLARE @QUERY NVARCHAR(MAX);
SET @QUERY =  '
	SELECT CORRCHALLANDETAIL.BRANCHID AS BRANCHID,CHALLANID AS CHALLANID,CORRCHALLANDETAIL.FORMID AS FORMTYPE,CORRCHALLANDETAIL.[QUARTER] AS [QUARTER],
	       LINKDEDCOUNT AS LINKDEDUCTIONCOUNT,ISNILCHALLAN AS ISNILLCHALLAN,ISUPDATECHALLAN AS ISUPDATECHALLAN,
	       MODEOFPAYMENT AS MODEOFPAYMENT,BANKCHALLANNO AS BANKCHALLANNUMBER,LASTBANKCHALLANNO AS LASTBANKCHALLANNUMBER,TRNVOUCHERNO AS TRANSFERVOUCHERNUMBER,
	       LASTTRNVOUCHERNO AS LASTTRANSFERVOUCHERNUMBER,CORRCHALLANDETAIL.BANKID AS BANKID,LASTBANKID AS LASTBANKID,
	       CHALLANPAIDDATE AS CHALLANPAIDDATE,LASTCHALLANPAIDDATE AS LASTCHALLANPAIDDATE,DATEOFDEBIT AS DATEOFDEBIT,
	       CORRCHALLANDETAIL.SECTIONID AS SECTIONID,
	       CASE WHEN CORRCHALLANDETAIL.SECTIONID=1 THEN ''' + CAST('192-92A' AS VARCHAR) + '''  WHEN CORRCHALLANDETAIL.SECTIONID=2 THEN ''' + CAST('192-92B' AS VARCHAR) + ''' ELSE  TAXSECTIONS.SECTIONNAME END AS SECTIONNAME,
	       CORRCHALLANDETAIL.INCOMETAX AS INCOMETAX,CORRCHALLANDETAIL.SURCHARGE AS SURCHARGE,
	       CORRCHALLANDETAIL.EDUCATIONCESS AS EDUCATIONCESS,INTEREST AS INTEREST,OTHERS AS OTHERS,PENALTY AS PENALTY,CHALLANTOTAL AS CHALLANTOTALAMOUNT,
	       LASTCHALLANTOTAL AS LASTCHALLANTOTALAMOUNT,ISCOMPANY AS ISCOMPANY,CHEQUENO AS CHEQUENUMBER,CHEQUEDATE AS CHEQUEDATE,
	       CHEQUEDRAWNON AS CHEQUEDRAWNON,TRANREFNO AS TRANSFERREFERENCENUMBER,ISNULL(CORRCHALLANDETAIL.CHALLANSERIALNO,'''') AS SERIALNUMBER,
	       REMITTINGBANK.BSRCODE AS BANKBSRCODE,ISNULL(CORRCHALLANDETAIL.TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER,
	       CASE WHEN(LINKEDCHALLANID IS NULL) THEN ''' + CAST('FALSE' AS VARCHAR) + ''' ELSE ''' + CAST('TRUE' AS VARCHAR) + ''' END AS ISLINKED
	FROM   CORRCHALLANDETAIL WITH(NOLOCK) LEFT JOIN (SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID,DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK)) AS LINKTABLE
           ON CORRCHALLANDETAIL.CHALLANID = LINKTABLE.LINKEDCHALLANID
           INNER JOIN CORRDEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID=LINKTABLE.DEDUCTIONID
	       INNER JOIN TAXSECTIONS WITH(NOLOCK) ON  CORRCHALLANDETAIL.SECTIONID = TAXSECTIONS.SECTIONID
	       LEFT JOIN REMITTINGBANK WITH(NOLOCK) ON CORRCHALLANDETAIL.BANKID=REMITTINGBANK.BANKID
	WHERE CORRCHALLANDETAIL.BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND CORRCHALLANDETAIL.FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND CORRCHALLANDETAIL.QUARTER=' + CAST(@QUARTER AS VARCHAR) + ' AND DD.DEDUCTIONSERIALNO IN (' + CAST(@UPDATEITEMS AS VARCHAR(MAX)) + ')'
	EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetBulkDedDetailsMonthwise')
DROP PROCEDURE USP_TDS_GetBulkDedDetailsMonthwise
GO
CREATE PROCEDURE [USP_TDS_GetBulkDedDetailsMonthwise] 
 @STARTROW INT,  
 @PAGESIZE INT,   
 @MONTH INT    
AS    
BEGIN  
 DECLARE @ALLOW92A92B INT;  
 DECLARE @FirstRec INT, @LastRec INT;  
SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS   
SELECT @FirstRec = (@StartRow - 1) * @PageSize;  
SELECT @LastRec = (@StartRow * @PageSize + 1);    
DECLARE @QUERY NVARCHAR(MAX)     
DECLARE @QUERY1 NVARCHAR(MAX)    
DECLARE @ISCHALLANNONULL INT  
 -- Set @ISCHALLANNONULL=0
SELECT @ISCHALLANNONULL=COUNT(*) FROM CHALLANDETAIL CD WITH (NOLOCK)   
INNER JOIN DEDCHALINK DCL WITH (NOLOCK) ON CD.CHALLANID=DCL.CHALLANID  
--INNER JOIN DEDUCTIONDETAIL DD WITH (NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID  
WHERE  CD.BANKCHALLANNO IS NULL 
IF @ISCHALLANNONULL >0  
 BEGIN  
 SET @QUERY1= 'SELECT TOP ' + CAST(@LastRec AS VARCHAR) + 'RowNum = IDENTITY(int,1,1),CD.CHALLANID,CB.BRANCHNAME + '' (''+ CB.BRANCHCODE + '')'' AS BRANCHNAME,CB.BRANCHID,  CD.SECTIONID,
 CASE WHEN SECTIONNAME IN (''194I(a)'',''194I(b)'') THEN ''194I'' ELSE SECTIONNAME END + '' ('' +  TAXNAME + '')'' AS SECTIONNAME,
 CASE WHEN CD.ISCOMPANY=1 THEN 1 ELSE 2 END AS DEDUCTEECODE,CEILING(CD.INCOMETAX) INCOMETAX ,CEILING(CD.SURCHARGE) SURCHARGE,CEILING(CD.EDUCATIONCESS) EDUCATIONCESS,CHALLANTOTAL TOTALDEDUCTED,0 HASPARTPAYMENT, ISNULL(CD.
BANKCHALLANNO,0) BANKCHALLANNO, ISNULL(CONVERT(VARCHAR(10),CD.CHALLANPAIDDATE,103),0) AS CHALLANPAIDDATE,RB.BSRCODE, (SELECT TOP 1 MONTH(DEDUCTEDDATE) FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID = DD.DEDUCTIONID WHERE CHALLANID = CD.CHALLANID) DEDMONTH
          INTO #TEMP   
    FROM CHALLANDETAIL CD WITH (NOLOCK)  
    INNER JOIN TAXSECTIONS TS WITH (NOLOCK)  ON CD.SECTIONID = TS.SECTIONID   
    INNER JOIN COMPANYBRANCH CB WITH (NOLOCK)  ON CB.BRANCHID=CD.BRANCHID   
    INNER JOIN REMITTINGBANK RB WITH (NOLOCK)  ON CD.BANKID=RB.BANKID  
    WHERE CD.BANKCHALLANNO IS NULL AND CD.CHALLANPAIDDATE IS NULL AND CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0'  
   SET @QUERY1 = @QUERY1 + ';SELECT * FROM #TEMP WITH (NOLOCK) WHERE RowNum >' + CAST(@FirstRec AS VARCHAR(10)) + ' AND RowNum < ' + CAST(@LastRec AS VARCHAR(10));  
   EXEC SP_EXECUTESQL @QUERY1;  
   --print @QUERY1;  
  END   
ELSE  
BEGIN  
SELECT TOP (@LastRec) RowNum = IDENTITY(int,1,1), CD.CHALLANID,CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME,  
CB.BRANCHID,  DD.SECTIONID, (SELECT CASE WHEN SECTIONNAME IN ('194I(a)','194I(b)') THEN '194I' ELSE SECTIONNAME END + ' (' +  TAXNAME + ')' FROM TAXSECTIONS WITH(NOLOCK) WHERE SECTIONID = DD.SECTIONID) AS SECTIONNAME,  
NE.DEDUCTEECODE,CEILING(SUM(DD.INCOMETAX)) INCOMETAX ,CEILING(SUM(DD.SURCHARGE)) SURCHARGE,  
CEILING(SUM(DD.EDUCATIONCESS)) EDUCATIONCESS,CEILING(SUM(TOTALDEDUCTED)) TOTALDEDUCTED,  
0 HASPARTPAYMENT, CD.BANKCHALLANNO, CONVERT(varchar(10),CD.CHALLANPAIDDATE,103) AS CHALLANPAIDDATE,(SELECT BSRCODE FROM REMITTINGBANK WITH(NOLOCK) WHERE BANKID = CD.BANKID) BSRCODE, @MONTH AS DEDMONTH
   INTO #TEMPCHAPAY  
   FROM DEDUCTIONDETAIL DD WITH (NOLOCK)   
   INNER JOIN DEDCHALINK DL WITH (NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID   
   INNER JOIN DEDUCTEE D WITH (NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID 
   INNER JOIN NONEMPLOYEE NE WITH (NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
   INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON CB.BRANCHID=DD.BRANCHID      
   INNER JOIN CHALLANDETAIL CD WITH (NOLOCK) on CD.CHALLANID= DL.CHALLANID  
   WHERE MONTH(DD.DEDUCTEDDATE)=@MONTH AND CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0 AND CD.ISTTUMINCLUDED=0 --AND DD.TOTALDEDUCTED>0  AND DL.DEDCHALINKID IS not NULL  
   GROUP BY DD.SECTIONID,DEDUCTEECODE,CB.BRANCHNAME,CB.BRANCHCODE,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.BANKID,CB.BRANCHID,CD.CHALLANID  
   SET @QUERY = 'SELECT * FROM #TEMPCHAPAY WITH (NOLOCK)  WHERE RowNum >' + CAST(@FirstRec AS VARCHAR(10)) + ' AND RowNum < ' + CAST(@LastRec AS VARCHAR(10)); 
   --print @QUERY  
   EXEC SP_EXECUTESQL @QUERY;  
END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBULKDEDDETAILSMONTHWISECOUNT')
DROP PROCEDURE USP_TDS_GETBULKDEDDETAILSMONTHWISECOUNT
GO
CREATE PROCEDURE [USP_TDS_GETBULKDEDDETAILSMONTHWISECOUNT]
	@MONTH INT
AS
BEGIN
DECLARE @ALLOW92A92B INT;
SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS
DECLARE @ISCHALLANNONULL INT
SET @ISCHALLANNONULL=0
SELECT @ISCHALLANNONULL=COUNT(*) FROM CHALLANDETAIL CD WITH (NOLOCK)
INNER JOIN DEDCHALINK DCL WITH (NOLOCK) ON CD.CHALLANID=DCL.CHALLANID
INNER JOIN DEDUCTIONDETAIL DD WITH (NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
WHERE  CD.BANKCHALLANNO IS NULL
IF @ISCHALLANNONULL>0
	BEGIN
	SELECT COUNT(*) AS [COUNT] FROM
	(
	SELECT CB.BRANCHNAME + '('+ CB.BRANCHCODE + ')' AS BRANCHNAME,CB.BRANCHID, CASE WHEN @ALLOW92A92B = 1 THEN TS.SECTIONNAME + '('+ TS.TAXNAME + ')' ELSE TS.SECTIONNAME  END AS SECTIONNAME,0 HASPARTPAYMENT, CD.BANKCHALLANNO, CONVERT(VARCHAR(10),CD.CHALLANPAIDDATE,103) AS CHALLANPAIDDATE,RB.BSRCODE
	FROM CHALLANDETAIL CD WITH (NOLOCK)
			 INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON CD.SECTIONID = TS.SECTIONID AND TS.FORMID = CD.FORMID
			 INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON CB.BRANCHID=CD.BRANCHID
			 INNER JOIN REMITTINGBANK RB WITH (NOLOCK) ON CD.BANKID=RB.BANKID
			 WHERE CD.BANKCHALLANNO IS NULL AND CD.CHALLANPAIDDATE IS NULL AND CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0
	) T
	END
	ELSE
	BEGIN
SELECT COUNT(*) AS [COUNT] FROM
(
SELECT CB.BRANCHNAME + '('+ CB.BRANCHCODE + ')' AS BRANCHNAME,CB.BRANCHID,  DD.SECTIONID,CASE WHEN @ALLOW92A92B = 1 THEN TS.SECTIONNAME + '('+ TS.TAXNAME + ')' ELSE TS.SECTIONNAME  END AS SECTIONNAME,NE.DEDUCTEECODE,SUM(DD.INCOMETAX) INCOMETAX ,SUM(DD.SURCHARGE) SURCHARGE,SUM(DD.EDUCATIONCESS) EDUCATIONCESS,SUM(TOTALDEDUCTED) TOTALDEDUCTED,0 HASPARTPAYMENT, CD.BANKCHALLANNO, CONVERT(VARCHAR(10),CD.CHALLANPAIDDATE,103) AS CHALLANPAIDDATE,RB.BSRCODE
			FROM DEDUCTIONDETAIL DD WITH (NOLOCK)
			LEFT JOIN DEDCHALINK DL WITH (NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID
			LEFT JOIN DEDUCTEE D WITH (NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
			LEFT JOIN NONEMPLOYEE NE WITH (NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
			INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON DD.SECTIONID = TS.SECTIONID AND TS.FORMID = DD.FORMID
			INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON CB.BRANCHID=DD.BRANCHID
			INNER JOIN CHALLANDETAIL CD WITH (NOLOCK) ON CD.BRANCHID=DD.BRANCHID AND CD.CHALLANID= DL.CHALLANID
			INNER JOIN REMITTINGBANK RB WITH (NOLOCK) ON CD.BANKID=RB.BANKID
			WHERE MONTH(DD.DEDUCTEDDATE)=@MONTH AND CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0
			GROUP BY DD.SECTIONID,SECTIONNAME,NE.DEDUCTEECODE,TAXNAME,CB.BRANCHNAME,CB.BRANCHCODE,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,RB.BSRCODE,CB.BRANCHID
			) T
			END
			END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBULKERETURNHISTORY')
DROP PROCEDURE USP_TDS_GETBULKERETURNHISTORY
GO
CREATE PROCEDURE USP_TDS_GETBULKERETURNHISTORY --USP_TDS_GETBULKERETURNHISTORY 2,1,-1,1
	@FORMID INT,  
	@QUARTER INT,  
	@BRANCHID INT,
	@ISVALIDATED BIT  
AS  
	BEGIN
		DECLARE @VALIDATED VARCHAR(50);  
		DECLARE @SQLQUERY NVARCHAR(MAX); 
		SELECT BRANCHID, FORMID, QUARTER,ISREQACTIVE, QUEUEID, ISVALID, ACKID
		INTO #ERETDONE
		FROM ACKNO
		WHERE LEN(ISNULL(ORGNUM , '')) > 0
			AND FORMID = @FORMID
			AND QUARTER = @QUARTER 
		SELECT ED.BRANCHID,ED.FORMID,ED.QUARTER INTO #ERETURNVALIDBRANCHES FROM   
		(  
			SELECT BRANCHID,FORMID,QUARTER FROM DEDUCTIONDETAIL WITH(NOLOCK) GROUP BY BRANCHID,FORMID,QUARTER  
			UNION  
			(  
				SELECT BRANCHID,FORMID,QUARTER FROM CHALLANDETAIL CD WITH(NOLOCK) 
				GROUP BY BRANCHID,FORMID,QUARTER  
			)  
		)ED 
		GROUP BY BRANCHID, FORMID, QUARTER  
		EXCEPT SELECT BRANCHID, FORMID, QUARTER FROM #ERETDONE
		SET @SQLQUERY = 'SELECT BRANCHID, FORMID, QUARTER, ISVALID, TOKENNO, ISREQACTIVE, QUEUEID, ACKID
		INTO #ISVALIDATED
		FROM ACKNO
		WHERE FORMID = '+CAST(@FORMID AS VARCHAR)+'
			AND QUARTER = '+CAST(@QUARTER AS VARCHAR)+' 
		SELECT * INTO #VALIDBRANCHES  
			FROM  
			(  
				SELECT BRANCHCODE,BRANCHNAME,EVD.BRANCHID,EVD.FORMID,FORMNAME,EVD.QUARTER,IV.ISVALID,ISNULL(IV.TOKENNO,'''') TOKENNO, ISNULL(ISREQACTIVE,0) AS ISREQACTIVE, QUEUEID, ISNULL(ACKID,-1) AS ACKID FROM COMPANYBRANCH CB WITH(NOLOCK) 
				INNER JOIN #ERETURNVALIDBRANCHES EVD ON EVD.BRANCHID = CB.BRANCHID   
				INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID = EVD.FORMID  
				LEFT JOIN #ISVALIDATED IV ON EVD.BRANCHID = IV.BRANCHID AND EVD.FORMID = IV.FORMID AND EVD.QUARTER = IV.QUARTER  
			WHERE EVD.QUARTER = '+CAST(@QUARTER AS VARCHAR)  
		IF(@FORMID != -1)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND EVD.FORMID = '+CAST(@FORMID AS VARCHAR)  
			END  
		IF(@BRANCHID != -1)  
			BEGIN  
				SET @SQLQUERY = @SQLQUERY + ' AND EVD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)  
			END
		IF (@ISVALIDATED != 1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND IV.ISVALID = 0'
			END   
		SET @SQLQUERY = @SQLQUERY + ' )FINAL ORDER BY BRANCHCODE;SELECT * FROM #VALIDBRANCHES';  
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBULKUPDATEDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETBULKUPDATEDEDUCTIONS
GO
CREATE PROCEDURE USP_TDS_GETBULKUPDATEDEDUCTIONS 
 @STARTROW INT,    
 @PAGESIZE INT,    
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @UPDATEITEMS VARCHAR(MAX),
 @CORRECTIONSTATUS INT    
AS    
BEGIN    
	 SET NOCOUNT ON      
	  DECLARE @QUERY NVARCHAR(MAX), @SQLQUERY NVARCHAR(MAX), @TABLE VARCHAR(100);    
	  DECLARE @FIRSTREC INT, @LASTREC INT;
	  CREATE TABLE #CORRMASTER (BRANCHID INT,FORMID INT, QUARTER INT, NAME VARCHAR(75), DEDUCTEESERIALNO INT,PAN VARCHAR(10), LASTPAN VARCHAR(10),
																																	  PANREFERENCE VARCHAR(10), LASTPANREFERENCE VARCHAR(10), CODE BIT); 
      CREATE TABLE #DEDUCTIONS(DEDUCTIONSERIALNO INT, CORRECTIONSTATUS INT);
	  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE    
	  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);   
	  SELECT * INTO #UPDATEITEMS FROM DBO.UDF_TDS_SPLITSTRING(@UPDATEITEMS, ',') 
	  SET @TABLE = CASE WHEN @FORMID = 1 THEN 'CORREMPLOYEE' ELSE 'CORRNONEMPLOYEE' END
	  SET @SQLQUERY = ' SELECT CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,CNE.DEDUCTEESERIALNO,CNE.PAN,CNE.LASTPAN,  
											   CNE.PANREFERENCE,CNE.LASTPANREFERENCE,CNE.CODE    
							 FROM '+ CAST(@TABLE AS VARCHAR) + ' CNE WITH(NOLOCK)   
							INNER JOIN    
							(    
								SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
								FROM '+ CAST(@TABLE AS VARCHAR) + ' WITH(NOLOCK)  
							   WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
							   GROUP BY DEDUCTEESERIALNO    
							) UNE   
							ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS   
							WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) 
	   INSERT INTO #CORRMASTER
	   EXEC SP_EXECUTESQL @SQLQUERY
		IF(@CORRECTIONSTATUS = 2)
			BEGIN
				INSERT INTO #DEDUCTIONS
				SELECT DEDUCTIONSERIALNO, CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = @CORRECTIONSTATUS
				UNION
				SELECT CDD.DEDUCTIONSERIALNO, CDD.CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
				INNER JOIN 
				(
					SELECT DEDUCTIONSERIALNO, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
					GROUP BY DEDUCTIONSERIALNO
				)C ON C.CORRECTIONSTATUS = CDD.CORRECTIONSTATUS AND C.DEDUCTIONSERIALNO = CDD.DEDUCTIONSERIALNO
				INNER JOIN #UPDATEITEMS U ON U.DATA  = CDD.DEDUCTIONSERIALNO
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 				
			END
		ELSE
			BEGIN
				INSERT INTO #DEDUCTIONS
				SELECT DEDUCTIONSERIALNO, CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = @CORRECTIONSTATUS
			END
	   SET @QUERY =  'SELECT ID = IDENTITY(INT,1,1),*, -1 AS CHALLANSECTION 
							 INTO #FORM2627UPDATEDDEDS    
							 FROM 
							 (    
								 SELECT CDD.BRANCHID,CDD.FORMID,CDD.QUARTER,CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,
											CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME, CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,
											CN.CODE,CDD.SECTIONID,TS.SECTIONNAME, CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,  
											CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,
											CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS, CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,
											CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO,0 AS GENDER, 0 AS ISSENIORCITIZEN, 
											CDD.CERTNO,CDD.ACKNO, ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER, CDD.COUNTRYID, CDD.REMITTANCEID
								 FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)  
								INNER JOIN #DEDUCTIONS D ON CDD.DEDUCTIONSERIALNO = D.DEDUCTIONSERIALNO AND CDD.CORRECTIONSTATUS = D.CORRECTIONSTATUS  
								INNER JOIN #CORRMASTER CN ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND CN.BRANCHID = CDD.BRANCHID AND CN.FORMID = CDD.FORMID AND CN.QUARTER = CDD.QUARTER    
								INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID  
								INNER JOIN CORRCHALLANDETAIL CCD WITH(NOLOCK) ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID AND CDD.BRANCHID = CCD.BRANCHID AND CDD.FORMID = CCD.FORMID AND CDD.QUARTER = CCD.QUARTER								
								INNER JOIN
								(
									SELECT CHALLANERETURNID, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRCHALLANDETAIL WITH(NOLOCK) 
								        WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + '  AND
													  [QUARTER] ='+CAST(@QUARTER AS VARCHAR) + '  
									GROUP BY CHALLANERETURNID										
						        ) C
						   ON C.CHALLANERETURNID = CCD.CHALLANERETURNID AND C.CORRECTIONSTATUS = CCD.CORRECTIONSTATUS
						    WHERE CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + '  AND
													  CDD.[QUARTER] ='+CAST(@QUARTER AS VARCHAR)    
	  SET @QUERY = @QUERY + ') TEMP ORDER BY DEDUCTIONSERIALNO;SELECT * FROM #FORM2627UPDATEDDEDS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR) + ' ORDER BY CORRECTIONSTATUS';    
	 EXEC SP_EXECUTESQL @QUERY;    
	DROP TABLE #DEDUCTIONS 
	DROP TABLE #CORRMASTER
	-- PRINT @QUERY 
	 SET NOCOUNT OFF 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETBULKUPDATEDEDUCTIONSCOUNT')
DROP PROCEDURE USP_TDS_GETBULKUPDATEDEDUCTIONSCOUNT
GO
CREATE PROCEDURE USP_TDS_GETBULKUPDATEDEDUCTIONSCOUNT
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@DEDUCTIONSNO NVARCHAR(MAX),
@CORRECTIONSTATUS INT
AS
  BEGIN
	   SELECT * INTO #SERIALNO FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTIONSNO, ',');
	   CREATE TABLE #DEDUCTIONS(DEDUCTIONSERIALNO INT, CORRECTIONSTATUS INT);
		IF(@CORRECTIONSTATUS = 2)
			BEGIN
				INSERT INTO #DEDUCTIONS
				SELECT DEDUCTIONSERIALNO, CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
				AND CORRECTIONSTATUS = @CORRECTIONSTATUS
				UNION
				SELECT CDD.DEDUCTIONSERIALNO, CDD.CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL CDD
				INNER JOIN 
				(
					SELECT DEDUCTIONSERIALNO, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
					GROUP BY DEDUCTIONSERIALNO
				)C ON C.CORRECTIONSTATUS = CDD.CORRECTIONSTATUS AND C.DEDUCTIONSERIALNO = CDD.DEDUCTIONSERIALNO
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
				AND CDD.DEDUCTIONSERIALNO IN (SELECT * FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTIONSNO,','))
			END
		ELSE
			BEGIN
				INSERT INTO #DEDUCTIONS
				SELECT DEDUCTIONSERIALNO, CORRECTIONSTATUS FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = @CORRECTIONSTATUS
			END
			SELECT COUNT(DEDUCTIONSERIALNO) FROM #DEDUCTIONS
			DROP TABLE #DEDUCTIONS
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetC1YBatchHeader')
DROP PROCEDURE USP_TDS_GetC1YBatchHeader
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetC1YBatchHeader]  
 @BRANCHID INT,  
 @FORMID SMALLINT,  
 @QUARTER SMALLINT  
AS  
 BEGIN
	  UPDATE CORRDEDUCTIONDETAIL SET CONTACTNODED = NULL WHERE CONTACTNODED = '0'
	  SELECT TOP 1 DEDUCTORID,CD.BRANCHID,FORMID,QUARTER,DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,  
		  ISADDRCHANGED,FINANCIALYEAR,[TAN],PAN,PINCODE,CD.EMAILADDRESS,STDCODE,PHONENO,STATUSID,CD.DEDUCTORTYPEID,
		  ISNULL(LASTDEDUCTORTYPEID,-1) AS LASTDEDUCTORTYPEID,GOVTADDSTATEID,GOVTADDPAOCODE,GOVTADDPAOREGNNO,GOVTADDDDOCODE,
		  GOVTADDDDOREGNNO,GOVTADDMINISTRY,GOVTADDOTHERNAME,RPNAME,RPADDRESS1,RPADDRESS2,RPADDRESS3,RPADDRESS4,RPADDRESS5,
		  RPPINCODE,RPSTATEID,RPISADDRCHANGED,RPDESIGNATION,RPEMAILADDRESS,RPSTDCODE,RPPHONENO,CORRECTIONSTATUS,CB.BRANCHNAME,
		  RPMOBILENO,GOVTADDAIN,ALTERNATESTD, ALTERNATEPHONE, ALTERNATEEMAIL, ISNULL(GSTIN,'') GSTIN, RPALTERNATESTD, RPALTERNATEPHONE, RPALTERNATEEMAIL, CATEGORYCODE, TANREGISTRATION  
	  FROM CORRDEDUCTOR CD WITH(NOLOCK) 
	  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CD.BRANCHID=CB.BRANCHID  
	  INNER JOIN DEDUCTORTYPE DT  WITH(NOLOCK) ON DT.DEDUCTORTYPEID = CD.DEDUCTORTYPEID
	  WHERE CD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER ORDER BY CORRECTIONSTATUS DESC;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC1YSTATEMENT')
DROP PROCEDURE USP_TDS_GETC1YSTATEMENT
GO
CREATE PROCEDURE [USP_TDS_GETC1YSTATEMENT]
				@BRANCHID INT,
				@FORMID SMALLINT,
				@QUARTER SMALLINT
AS
BEGIN
		SELECT DEDUCTORID AS SERIALNO,'DEDUTOR' AS TRANSACTIONTYPE,CORRECTIONSTATUS AS STATUS FROM CORRDEDUCTOR WITH(NOLOCK)
		WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND CORRECTIONSTATUS <> 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC2CHALLANDETAILS')
DROP PROCEDURE USP_TDS_GETC2CHALLANDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETC2CHALLANDETAILS] 
				@BRANCHID INT,
				@FORMID SMALLINT,
				@QUARTER SMALLINT
AS
BEGIN
    DECLARE @C2SUMMARYTABLE TABLE(ID INT IDENTITY(1,1),CHALLANERETURNID INT,TRANSACTIONTYPE VARCHAR(10),STATUS SMALLINT)
    INSERT INTO @C2SUMMARYTABLE EXECUTE USP_TDS_GETC2STATEMENT @BRANCHID,@FORMID,@QUARTER
    SELECT DISTINCT CD.CHALLANSERIALNO,CD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,CD.BRANCHID,CD.FORMID,CD.QUARTER,
				  ISNULL(CD.CHALLANID,-1) AS CHALLANID,CD.CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,
				  CD.MODEOFPAYMENT,CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,
				  CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,
				  CD.EDUCATIONCESS,CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,
				  CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.CORRECTIONSTATUS,FEE, MINORHEAD,
				  ISNULL(RB.BSRCODE,'') AS BSRCODE,ISNULL(RBLAST.BSRCODE,'') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,
				  CASE WHEN(DD.CHALLANERETURNID IS NULL) THEN 'FALSE' ELSE 'TRUE'END AS ISLINKED,
				  ISNULL(TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER,ISNULL(CD.CHALLANEDITMODE,'') AS CHALLANEDITMODE
	  FROM CORRCHALLANDETAIL CD WITH(NOLOCK)
				INNER JOIN 
			@C2SUMMARYTABLE SCD
		ON CD.CHALLANERETURNID=SCD.CHALLANERETURNID
				LEFT JOIN 
		   CORRDEDUCTIONDETAIL DD WITH(NOLOCK)
		ON CD.CHALLANERETURNID=DD.CHALLANERETURNID AND CD.BRANCHID=DD.BRANCHID AND CD.FORMID=DD.FORMID AND CD.QUARTER=DD.QUARTER
				INNER JOIN 
			TAXSECTIONS TS WITH(NOLOCK)
	    ON CD.SECTIONID=TS.SECTIONID
				LEFT JOIN 
			REMITTINGBANK RB WITH(NOLOCK)
		ON CD.BANKID=RB.BANKID
				LEFT JOIN 
			REMITTINGBANK RBLAST WITH(NOLOCK)
		ON CD.LASTBANKID=RBLAST.BANKID
	 WHERE CD.ISUPDATECHALLAN=1 AND 
		   CD.CORRECTIONSTATUS=2 AND 	   
		   CD.BRANCHID=@BRANCHID AND
		   CD.FORMID=@FORMID AND
		   CD.QUARTER=@QUARTER
  ORDER BY CD.CHALLANERETURNID		   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC2STATEMENT')
DROP PROCEDURE USP_TDS_GETC2STATEMENT
GO
CREATE PROCEDURE [USP_TDS_GETC2STATEMENT]
			@BRANCHID INT,
			@FORMID SMALLINT,
			@QUARTER SMALLINT
AS
BEGIN
	SELECT CORRUPDATEDCHALLAN.CHALLANERETURNID AS SERIALNO,'CHALLAN' AS TRANSACTIONTYPE,2 AS STATUS
	FROM
			(SELECT DISTINCT CD.CHALLANERETURNID
			FROM CORRCHALLANDETAIL CD WITH(NOLOCK)
			WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER AND
			CD.CORRECTIONSTATUS=2 AND CD.ISUPDATECHALLAN=1
			) AS CORRUPDATEDCHALLAN
			LEFT JOIN
			(SELECT DISTINCT CHALLANERETURNID
				 FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
				 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND CORRECTIONSTATUS IN (2,4,5)
				 ) AS CORRUPDATEDDEDUCTION
			ON CORRUPDATEDCHALLAN.CHALLANERETURNID = CORRUPDATEDDEDUCTION.CHALLANERETURNID
	WHERE CORRUPDATEDDEDUCTION.CHALLANERETURNID IS NULL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC3CHALLANDETAILS')
DROP PROCEDURE USP_TDS_GETC3CHALLANDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETC3CHALLANDETAILS]
	@BRANCHID INT,
	@FORMID SMALLINT,
	@QUARTER SMALLINT
AS
BEGIN
		SELECT EXPECTEDDID, CHALLANERETURNID INTO #EXPECTEDDID FROM CORRCHALLANDETAIL WITH(NOLOCK) 
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 1
        IF(@FORMID=1)
        BEGIN
		SELECT DISTINCT CD.CHALLANSERIALNO,CD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,CD.BRANCHID,CD.FORMID,CD.QUARTER,
				  ISNULL(CD.CHALLANID,-1) AS CHALLANID,CD.CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,
				  CD.MODEOFPAYMENT,CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,
				  CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,
				  CD.EDUCATIONCESS,CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,
				  CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.CORRECTIONSTATUS,
				  ISNULL(RB.BSRCODE,'') AS BSRCODE,ISNULL(RBLAST.BSRCODE,'') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,
				  CASE WHEN(DD.CHALLANERETURNID IS NULL) THEN 'FALSE' ELSE 'TRUE'END AS ISLINKED,FEE, MINORHEAD,
				  ISNULL(TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER,ISNULL(CD.CHALLANEDITMODE,'') AS CHALLANEDITMODE, EID.EXPECTEDDID
		  FROM CORRCHALLANDETAIL CD  WITH(NOLOCK)
					INNER JOIN
				CORRDEDUCTIONDETAIL  DD  WITH(NOLOCK)
		    ON CD.CHALLANERETURNID=DD.CHALLANERETURNID  AND CD.BRANCHID=DD.BRANCHID AND CD.FORMID=DD.FORMID AND CD.QUARTER=DD.QUARTER					
					INNER JOIN
				TAXSECTIONS TS WITH(NOLOCK)
			ON CD.SECTIONID=TS.SECTIONID
					LEFT JOIN 
				REMITTINGBANK RB WITH(NOLOCK)
			ON CD.BANKID=RB.BANKID
					LEFT JOIN 
				REMITTINGBANK RBLAST WITH(NOLOCK)
		ON CD.LASTBANKID=RBLAST.BANKID
					INNER JOIN
				#EXPECTEDDID EID
			ON CD.CHALLANERETURNID = EID.CHALLANERETURNID
		 WHERE CD.CORRECTIONSTATUS=2
		   AND DD.CORRECTIONSTATUS IN(2,5,4) 		  
		   AND CD.BRANCHID=@BRANCHID 
		   AND CD.FORMID=@FORMID 
		   AND CD.QUARTER=@QUARTER
		ORDER BY CD.CHALLANERETURNID 
		END
		ELSE
		BEGIN
		SELECT DISTINCT CD.CHALLANSERIALNO,CD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,CD.BRANCHID,CD.FORMID,CD.QUARTER,
				  ISNULL(CD.CHALLANID,-1) AS CHALLANID,CD.CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,
				  CD.MODEOFPAYMENT,CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,
				  CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,
				  CD.EDUCATIONCESS,CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,
				  CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.CORRECTIONSTATUS,
				  ISNULL(RB.BSRCODE,'') AS BSRCODE,ISNULL(RBLAST.BSRCODE,'') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,
				  CASE WHEN(DD.CHALLANERETURNID IS NULL) THEN 'FALSE' ELSE 'TRUE'END AS ISLINKED,FEE, MINORHEAD,
				  ISNULL(TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER,ISNULL(CD.CHALLANEDITMODE,'') AS CHALLANEDITMODE, EID.EXPECTEDDID
		  FROM CORRCHALLANDETAIL CD WITH(NOLOCK)
					INNER JOIN
				CORRDEDUCTIONDETAIL  DD WITH(NOLOCK)
		    ON CD.CHALLANERETURNID=DD.CHALLANERETURNID  AND CD.BRANCHID=DD.BRANCHID AND CD.FORMID=DD.FORMID AND CD.QUARTER=DD.QUARTER					
					INNER JOIN
				TAXSECTIONS TS WITH(NOLOCK)
			ON CD.SECTIONID=TS.SECTIONID
					LEFT JOIN 
				REMITTINGBANK RB WITH(NOLOCK)
			ON CD.BANKID=RB.BANKID
					LEFT JOIN 
				REMITTINGBANK RBLAST WITH(NOLOCK)
			ON CD.LASTBANKID=RBLAST.BANKID
					INNER JOIN
				#EXPECTEDDID EID
			ON CD.CHALLANERETURNID = EID.CHALLANERETURNID
		 WHERE CD.CORRECTIONSTATUS=2 
		   AND DD.CORRECTIONSTATUS IN(2,5,4)
		   AND CD.BRANCHID=@BRANCHID 
		   AND CD.FORMID=@FORMID 
		   AND CD.QUARTER=@QUARTER
		ORDER BY CD.CHALLANERETURNID 
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC3DEDUCTIONDETAILS')
DROP PROCEDURE USP_TDS_GETC3DEDUCTIONDETAILS
GO
CREATE PROCEDURE USP_TDS_GETC3DEDUCTIONDETAILS 
 @BRANCHID INT,  
 @FORMID SMALLINT,  
 @QUARTER SMALLINT  
AS  
	BEGIN
		SELECT CHALLANERETURNID,EXPECTEDDID
		INTO #CORRCHA
		FROM CORRCHALLANDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER AND FORMID = @FORMID AND CORRECTIONSTATUS = 1
		SELECT CC.EXPECTEDDID - 1 + ROW_NUMBER() OVER (PARTITION BY DD.CHALLANERETURNID ORDER BY DD.DEDUCTIONSERIALNO)  AS NEWDEDERETID,
			   DD.DEDUCTIONSERIALNO,DD.CHALLANERETURNID,DD.DEDUCTIONERETURNID,DD.CORRECTIONSTATUS 
		INTO #CORRDED
		FROM CORRDEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #CORRCHA CC ON CC.CHALLANERETURNID = DD.CHALLANERETURNID 
		WHERE DD.BRANCHID = @BRANCHID AND DD.QUARTER = @QUARTER AND DD.FORMID = @FORMID 
		AND DD.CORRECTIONSTATUS = 5 
		UPDATE DD 
		SET DD.DEDUCTIONERETURNID = CD.NEWDEDERETID 
		FROM CORRDEDUCTIONDETAIL DD
		INNER JOIN #CORRDED CD ON CD.DEDUCTIONSERIALNO = DD.DEDUCTIONSERIALNO 
		WHERE DD.BRANCHID = @BRANCHID AND DD.QUARTER = @QUARTER AND DD.FORMID = @FORMID 
		AND DD.CORRECTIONSTATUS = 5
		IF @FORMID=1
			BEGIN
				SELECT MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS,DEDUCTEESERIALNO
				INTO #TEMP1  
				FROM CORREMPLOYEE WITH(NOLOCK)  
				WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER  
				GROUP BY DEDUCTEESERIALNO
				SELECT CE.DEDUCTEESERIALNO,CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.PAN,CE.GENDER, CE.ISSENIORCITIZEN, CE.PANREFERENCE,
				CASE WHEN CE.CORRECTIONSTATUS = 3 THEN CE.PAN ELSE CE.LASTPAN END AS LASTPAN,
				CASE WHEN CE.CORRECTIONSTATUS = 3 THEN CE.PANREFERENCE ELSE CE.LASTPANREFERENCE END AS LASTPANREFERENCE
				INTO #TEMP2					
				FROM CORREMPLOYEE CE WITH(NOLOCK)  
				INNER JOIN  
				#TEMP1 UCE  
				ON CE.DEDUCTEESERIALNO=UCE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS=UCE.CURRENTCORRECTIONSTATUS  
				WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
			END
		ELSE
			BEGIN
				SELECT MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS,DEDUCTEESERIALNO
				INTO #TEMP3
				FROM CORRNONEMPLOYEE  WITH(NOLOCK)  
				WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER  
				GROUP BY DEDUCTEESERIALNO
				SELECT CNE.DEDUCTEESERIALNO,CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,  
						CNE.PAN,CNE.PANREFERENCE,CASE WHEN CNE.CORRECTIONSTATUS = 3 THEN CNE.PAN ELSE CNE.LASTPAN END AS LASTPAN,
						CASE WHEN CNE.CORRECTIONSTATUS = 3 THEN CNE.PANREFERENCE ELSE CNE.LASTPANREFERENCE END AS LASTPANREFERENCE,CNE.CODE  
				INTO #TEMP4
				FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)  
				INNER JOIN  
				#TEMP3 UCE  
				ON CNE.DEDUCTEESERIALNO=UCE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS=UCE.CURRENTCORRECTIONSTATUS  
				WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
			END
		SELECT * INTO #CORRCHALLANDETAIL FROM CORRCHALLANDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		SELECT * INTO #CORRDEDUCTIONDETAIL FROM CORRDEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			IF @FORMID=1  
				 BEGIN  
					 SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,EMP.NAME,  
						 CDD.SECTIONID,TS.TAXNAME AS SECTIONNAME,EMP.PAN,EMP.LASTPAN,
						 EMP.PANREFERENCE,EMP.LASTPANREFERENCE,CDD.PAYMENTMADE,  
						 CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,  
						 CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,  
						 CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CCD.CHALLANSERIALNO,CDD.ISBOOKENTRY,  
						 CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,CCD.CHALLANTOTAL,-1 AS CODE,CDD.ISTAXINFOEDITABLE,GENDER, ISSENIORCITIZEN,
						 CDD.CERTNO, ISNULL(CDD.TDSRATEASPER,' ')TDSRATEASPER, CDD.ACKNO, CDD.REMITTANCEID, CDD.COUNTRYID, CCD.SECTIONID AS CHALLANSECTION  
					 FROM #CORRCHALLANDETAIL CCD
						 INNER JOIN #CORRDEDUCTIONDETAIL CDD  
						 ON CCD.CHALLANERETURNID=CDD.CHALLANERETURNID  AND CCD.BRANCHID=CDD.BRANCHID AND CCD.FORMID=CDD.FORMID AND CCD.QUARTER=CDD.QUARTER  
						 INNER JOIN  
						 #TEMP2 EMP  
						ON CDD.DEDUCTEESERIALNO=EMP.DEDUCTEESERIALNO AND EMP.BRANCHID=CDD.BRANCHID AND EMP.FORMID=CDD.FORMID AND EMP.QUARTER=CDD.QUARTER  
					   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID  
					 WHERE CDD.CORRECTIONSTATUS IN(2,5,4) AND CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER AND  
							CCD.CORRECTIONSTATUS=2  
				 END  
			ELSE  
				BEGIN  
					SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,NEMP.NAME,  
						 CDD.SECTIONID,TS.TAXNAME AS SECTIONNAME,NEMP.PAN ,NEMP.LASTPAN,NEMP.PANREFERENCE,NEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,  
						 CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,  
						 CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,  
						 CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CCD.CHALLANSERIALNO,  
						 CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,CCD.CHALLANTOTAL,ISNULL(NEMP.CODE,0) AS CODE,CDD.ISTAXINFOEDITABLE, 0 AS GENDER,
						 0 AS ISSENIORCITIZEN,CDD.CERTNO, ISNULL(CDD.TDSRATEASPER,' ')TDSRATEASPER, CDD.ACKNO, CDD.REMITTANCEID, CDD.COUNTRYID, CCD.SECTIONID AS CHALLANSECTION,
						 ISNULL(CDD.EMAILDED,'')EMAILDED, ISNULL(CDD.CONTACTNODED,'')CONTACTNODED, ISNULL(CDD.ADDRESSDED,'')ADDRESSDED, ISNULL(CDD.IDENTNUMDED,'')IDENTNUMDED,
						 ISNULL(CDD.REMARKS1,'')REMARKS1, ISNULL(CDD.REMARKS3,'')REMARKS3        
					FROM #CORRCHALLANDETAIL CCD WITH(NOLOCK)  
					INNER JOIN #CORRDEDUCTIONDETAIL  CDD  WITH(NOLOCK)  
					ON CCD.CHALLANERETURNID=CDD.CHALLANERETURNID  AND CCD.BRANCHID=CDD.BRANCHID AND CCD.FORMID=CDD.FORMID AND CCD.QUARTER=CDD.QUARTER  
					INNER JOIN  
					#TEMP4 NEMP  
					ON CDD.DEDUCTEESERIALNO=NEMP.DEDUCTEESERIALNO AND NEMP.BRANCHID=CDD.BRANCHID AND NEMP.FORMID=CDD.FORMID AND NEMP.QUARTER=CDD.QUARTER  
					INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID  
					WHERE CDD.CORRECTIONSTATUS IN(2,5,4) AND CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER AND  
						  CCD.CORRECTIONSTATUS=2  
				END
		IF OBJECT_ID('tempdb..#CORRCHA') is not null
				  DROP TABLE #CORRCHA
		IF OBJECT_ID('tempdb..#CORRDED') is not null
				  DROP TABLE #CORRDED
		IF OBJECT_ID('tempdb..#TEMP1') is not null
				  DROP TABLE #TEMP1
		IF OBJECT_ID('tempdb..#TEMP2') is not null
				  DROP TABLE #TEMP2
		IF OBJECT_ID('tempdb..#TEMP3') is not null
				  DROP TABLE #TEMP3
		IF OBJECT_ID('tempdb..#TEMP4') is not null
				  DROP TABLE #TEMP4
	END  

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC3STATEMENT')
DROP PROCEDURE USP_TDS_GETC3STATEMENT
GO
--[DBO].[USP_TDS_GETC3STATEMENT] 326,2,1
CREATE PROCEDURE [USP_TDS_GETC3STATEMENT]
@BRANCHID INT,
@FORMID SMALLINT,
@QUARTER SMALLINT
AS
  BEGIN
		SELECT CDD.DEDUCTIONSERIALNO AS SERIALNO,'DEDUCTION' AS TRANSACTIONTYPE,CDD.CORRECTIONSTATUS AS STATUS 
		FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
		INNER JOIN CORRCHALLANDETAIL CCD WITH(NOLOCK) ON CDD.BRANCHID = CCD.BRANCHID AND CDD.FORMID = CCD.FORMID AND CDD.QUARTER = CCD.QUARTER AND CDD.CHALLANERETURNID = CCD.CHALLANERETURNID
		WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER AND
		CDD.CORRECTIONSTATUS IN (2,4,5,7) AND CCD.CORRECTIONSTATUS  = 2
		UNION
		SELECT CCD.CHALLANSERIALNO AS SERIALNO,'CHALLAN' AS TRANSACTIONTYPE,CCD.CORRECTIONSTATUS AS STATUS 
		FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)
		INNER JOIN CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) ON CCD.BRANCHID = CDD.BRANCHID AND CCD.FORMID = CDD.FORMID AND CCD.QUARTER = CDD.QUARTER AND CCD.CHALLANERETURNID = CDD.CHALLANERETURNID
		WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER AND
		CDD.CORRECTIONSTATUS IN (2,4,5,7) AND CCD.CORRECTIONSTATUS  = 2
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetC4SalaryDetails')
DROP PROCEDURE USP_TDS_GetC4SalaryDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetC4SalaryDetails] 
	@BRANCHID INT
AS
	BEGIN
		SELECT CSD.DEDUCTEESERIALNO,CSD.CORRDEDUCTEESERIALNO,CSD.BRANCHID,CE.NAME,CE.GENDER,CE.ISSENIORCITIZEN,CE.PAN,CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO,
			   CSD.GROSSSALARY,CSD.DEDUCTIONUS16,CSD.INCOMEFROMSALARIES,CSD.OTHERINCOME,CSD.GROSSTOTALINCOME,CSD.LASTGROSSTOTALINCOME,
			   CSD.TOTALDEDUNDERCHAPTERVIA,CSD.TOTALTAXABLEINCOME,CSD.TAXONTOTALINCOME,CSD.SURCHARGE,CSD.EDUCATIONCESS,CSD.RELIEFUS89,
			   CSD.NETTAXPAYABLE,CSD.TOTALTDS,CSD.TAXPAYABLE,CSD.ET,CSD.PT,CSD.VIA80CCE,CSD.VIA80CCF,CSD.VIA80CCG,CSD.VIAOTHERS,CSD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,
			   CSD.CORRECTIONSTATUS,RECORDSTATUS, CURRENTTAXABLEINCOME,PREVTAXABLEINCOME,CURRENTTDS,PREVTDS,ISNULL(ISTDSATHIGHERRATE,0)ISTDSATHIGHERRATE,
			   ISNULL(PANLL1,'') PANLL1, ISNULL(NAMELL1,'') NAMELL1, ISNULL(PANLL2,'') PANLL2, ISNULL(NAMELL2,'') NAMELL2, ISNULL(PANLL3,'') PANLL3, ISNULL(NAMELL3,'') NAMELL3, 
			   ISNULL(PANLL4,'') PANLL4, ISNULL(NAMELL4,'') NAMELL4, ISNULL(PANLEND1,'') PANLEND1, ISNULL(NAMELEND1,'') NAMELEND1, ISNULL(PANLEND2,'') PANLEND2, 
			   ISNULL(NAMELEND2,'') NAMELEND2, ISNULL(PANLEND3,'') PANLEND3, ISNULL(NAMELEND3,'') NAMELEND3, ISNULL(PANLEND4,'') PANLEND4, ISNULL(NAMELEND4,'') NAMELEND4, 
			   ISNULL(SAFNAME,'') SAFNAME, ISNULL(SAFFROMDATE,'') SAFFROMDATE, ISNULL(SAFTODATE,'') SAFTODATE, ISNULL(AMTREPAID,0) AMTREPAID, ISNULL(SAFTAXRATE,0) SAFTAXRATE, 
			   ISNULL(SAFTAXDEDUCTED,0) SAFTAXDEDUCTED
		FROM   CORRSALARYDETAIL CSD WITH(NOLOCK) INNER JOIN (SELECT CE.DEDUCTEESERIALNO,CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.PAN,CE.PANREFERENCE,CE.LASTPAN,
													   CE.LASTPANREFERENCE ,CE.CORRECTIONSTATUS,CE.GENDER,CE.ISSENIORCITIZEN,CE.EMPLOYMENTFROM,
												       CE.EMPLOYMENTTO
												FROM   CORREMPLOYEE CE WITH(NOLOCK) INNER JOIN (SELECT MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS,DEDUCTEESERIALNO 
																				   FROM   CORREMPLOYEE  WITH(NOLOCK)
																				   WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4
																				   GROUP BY DEDUCTEESERIALNO) UCE 
																ON CE.DEDUCTEESERIALNO = UCE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UCE.CURRENTCORRECTIONSTATUS
												WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4) CE 
									ON CSD.DEDUCTEESERIALNO = CE.DEDUCTEESERIALNO AND CSD.BRANCHID = CE.BRANCHID AND CE.FORMID = 1 AND CE.QUARTER = 4
		WHERE  CSD.BRANCHID = @BRANCHID AND CSD.CORRECTIONSTATUS <> 1 ORDER BY CSD.CORRDEDUCTEESERIALNO ASC;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC4STATEMENT')
DROP PROCEDURE USP_TDS_GETC4STATEMENT
GO
CREATE PROCEDURE [USP_TDS_GETC4STATEMENT]
	@BRANCHID INT
AS
	BEGIN
		SELECT DISTINCT CSD.DEDUCTEESERIALNO AS SERIALNO,'SALARY' AS TRANSACTIONTYPE,CSD.CORRECTIONSTATUS AS STATUS
		FROM   CORRSALARYDETAIL CSD WITH(NOLOCK) INNER JOIN (SELECT CE.DEDUCTEESERIALNO,CE.BRANCHID,CE.FORMID,CE.QUARTER
											  FROM   CORREMPLOYEE CE WITH(NOLOCK) INNER JOIN (SELECT MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS,DEDUCTEESERIALNO
																				 FROM   CORREMPLOYEE WITH(NOLOCK)
																				 WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4
																				 GROUP BY DEDUCTEESERIALNO) UCE
								  ON CE.DEDUCTEESERIALNO = UCE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UCE.CURRENTCORRECTIONSTATUS
											  WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4) CE
								  ON CSD.BRANCHID = CE.BRANCHID AND CE.FORMID = 1 AND CE.QUARTER = 4
		WHERE  CSD.BRANCHID = @BRANCHID AND CSD.CORRECTIONSTATUS <> 1
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC5CHALLANDETAILS')
DROP PROCEDURE USP_TDS_GETC5CHALLANDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETC5CHALLANDETAILS] 
		@BRANCHID INT,
		@FORMID SMALLINT,
		@QUARTER SMALLINT
AS
BEGIN
      	DECLARE @SQLQUERY NVARCHAR(MAX)
		CREATE TABLE #CORRDEDUCTEE(DEDUCTEESERIALNO INT);
		IF(@FORMID = 1)
			BEGIN
				SET @SQLQUERY = 'SELECT DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK)
								WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = '+ CAST(@FORMID AS VARCHAR) + ' AND 
										  QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3'
			END
		 ELSE
			BEGIN
				SET @SQLQUERY = 'SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK)
								WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = '+ CAST(@FORMID AS VARCHAR) + ' AND
										  QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3'
			END 
			INSERT INTO #CORRDEDUCTEE
			EXEC SP_EXECUTESQL @SQLQUERY
			SELECT CHALLANERETURNID
			INTO #CORRDEDUCTION
			FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
			INNER JOIN #CORRDEDUCTEE CDE ON CDD.DEDUCTEESERIALNO = CDE.DEDUCTEESERIALNO
			WHERE CDD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CDD.CORRECTIONSTATUS = 1
			GROUP BY CHALLANERETURNID
			SELECT CCD.CHALLANSERIALNO,CCD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,CCD.BRANCHID,CCD.FORMID,CCD.QUARTER,
					  ISNULL(CCD.CHALLANID,-1) AS CHALLANID,CCD.CHALLANERETURNID,CCD.LINKDEDCOUNT,CCD.ISNILCHALLAN,CCD.ISUPDATECHALLAN,
					  CCD.MODEOFPAYMENT,CCD.BANKCHALLANNO,CCD.LASTBANKCHALLANNO,CCD.TRNVOUCHERNO,CCD.LASTTRNVOUCHERNO,
					  CCD.BANKID,CCD.LASTBANKID,CCD.CHALLANPAIDDATE,CCD.LASTCHALLANPAIDDATE,CCD.DATEOFDEBIT,CCD.SECTIONID,CCD.INCOMETAX,CCD.SURCHARGE,
					  CCD.EDUCATIONCESS,CCD.INTEREST,CCD.PENALTY,CCD.OTHERS,CCD.CHALLANTOTAL,CCD.LASTCHALLANTOTAL,ISNULL(CCD.ISCOMPANY,1) AS ISCOMPANY,
					  CCD.CHEQUENO,CCD.CHEQUEDATE,CCD.CHEQUEDRAWNON,CCD.TRANREFNO,CCD.CORRECTIONSTATUS,FEE, MINORHEAD,
					  ISNULL(RB.BSRCODE,'') AS BSRCODE,ISNULL(RBLAST.BSRCODE,'') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,
					  CASE WHEN(CCD.CHALLANERETURNID IS NULL) THEN 'FALSE' ELSE 'TRUE' END AS ISLINKED,
					  ISNULL(TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER,ISNULL(CCD.CHALLANEDITMODE,'') AS CHALLANEDITMODE
				FROM CORRCHALLANDETAIL  CCD WITH(NOLOCK)
				INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CCD.SECTIONID=TS.SECTIONID
				LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CCD.BANKID=RB.BANKID
				LEFT JOIN REMITTINGBANK RBLAST WITH(NOLOCK) ON CCD.LASTBANKID=RBLAST.BANKID
			INNER JOIN #CORRDEDUCTION C ON C.CHALLANERETURNID = CCD.CHALLANERETURNID		
			WHERE BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND QUARTER = @QUARTER AND CCD.CORRECTIONSTATUS = 1
			ORDER BY CCD.CHALLANERETURNID
		DROP TABLE #CORRDEDUCTEE
		DROP TABLE #CORRDEDUCTION
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC5DEDUCTIONDETAILS')
DROP PROCEDURE USP_TDS_GETC5DEDUCTIONDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETC5DEDUCTIONDETAILS] 
 @BRANCHID INT,    
 @FORMID SMALLINT,    
 @QUARTER SMALLINT    
AS    
BEGIN    
	DECLARE @SQLQUERY NVARCHAR(MAX)
	CREATE TABLE #CORRDEDUCTEE(DEDUCTEESERIALNO INT, NAME VARCHAR(75), PAN VARCHAR(10), LASTPAN VARCHAR(10), PANREFERENCE VARCHAR(10), LASTPANREFERENCE VARCHAR(10),
										GENDER INT, ISSENIORCITIZEN INT);
	IF(@FORMID = 1)
		BEGIN
			SET @SQLQUERY = 'SELECT DEDUCTEESERIALNO, NAME, PAN, LASTPAN, PANREFERENCE,LASTPANREFERENCE, GENDER,ISSENIORCITIZEN  FROM CORREMPLOYEE WITH(NOLOCK)
							WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = '+ CAST(@FORMID AS VARCHAR) + ' AND 
									  QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3'
		END
	 ELSE
		BEGIN
			SET @SQLQUERY = 'SELECT DEDUCTEESERIALNO, NAME, PAN, LASTPAN, PANREFERENCE,LASTPANREFERENCE, 0 AS GENDER, 0 AS ISSENIORCITIZEN FROM CORRNONEMPLOYEE WITH(NOLOCK)
							WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = '+ CAST(@FORMID AS VARCHAR) + ' AND
									  QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3'
		END 
		INSERT INTO #CORRDEDUCTEE
		EXEC SP_EXECUTESQL @SQLQUERY
		SELECT CDD.CHALLANERETURNID, SUM(CCD.CHALLANTOTAL)CHALLANTOTAL, CCD.CHALLANSERIALNO
		INTO #CORRDEDUCTION
		FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
		INNER JOIN #CORRDEDUCTEE CDE ON CDD.DEDUCTEESERIALNO = CDE.DEDUCTEESERIALNO
		INNER JOIN CORRCHALLANDETAIL CCD WITH(NOLOCK) ON CCD.CHALLANERETURNID = CDD.CHALLANERETURNID AND CCD.BRANCHID=  CDD.BRANCHID AND CCD.FORMID = CDD.FORMID AND CCD.QUARTER = CDD.QUARTER
		WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER AND CDD.CORRECTIONSTATUS = 1 AND CCD.CORRECTIONSTATUS = 1
	    GROUP BY CDD.CHALLANERETURNID,CCD.CHALLANSERIALNO
		SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,CDE.NAME,    
			 CDD.SECTIONID,TS.SECTIONNAME,CDE.PAN,CDE.LASTPAN ,CDE.PANREFERENCE,CDE.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,    
			 CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,    
			 CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,    
			 CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,C.CHALLANSERIALNO,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,    
			 C.CHALLANTOTAL,-1 AS CODE,CDD.ISTAXINFOEDITABLE, CDE.GENDER, CDE.ISSENIORCITIZEN,ISNULL(CDD.CERTNO,'')CERTNO, ISNULL(CDD.TDSRATEASPER, ' ')TDSRATEASPER,
			 ISNULL(CDD.ACKNO,'')ACKNO, ISNULL(CDD.REMITTANCEID,-1)REMITTANCEID, ISNULL(CDD.COUNTRYID,-1)COUNTRYID, -1 AS CHALLANSECTION, ISNULL(CDD.EMAILDED,'')EMAILDED,
			 ISNULL(CDD.CONTACTNODED,'')CONTACTNODED, ISNULL(CDD.ADDRESSDED,'')ADDRESSDED, ISNULL(CDD.IDENTNUMDED,'')IDENTNUMDED   
			FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
			INNER JOIN #CORRDEDUCTEE CDE ON CDD.DEDUCTEESERIALNO = CDE.DEDUCTEESERIALNO
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID			
		    INNER JOIN #CORRDEDUCTION C ON C.CHALLANERETURNID = CDD.CHALLANERETURNID		
	    WHERE BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND QUARTER = @QUARTER AND CDD.CORRECTIONSTATUS = 1
	    ORDER BY CDD.DEDUCTIONERETURNID  
		DROP TABLE #CORRDEDUCTEE
		DROP TABLE #CORRDEDUCTION
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC5SALARYDETAILS')
DROP PROCEDURE USP_TDS_GETC5SALARYDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETC5SALARYDETAILS] 
			@BRANCHID INT
AS
BEGIN	
		SELECT MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS,DEDUCTEESERIALNO 
		INTO #CORREMP
		FROM CORREMPLOYEE  WITH(NOLOCK)
		WHERE BRANCHID=@BRANCHID AND FORMID=1 AND QUARTER=4
		GROUP BY DEDUCTEESERIALNO
		SELECT  CE.DEDUCTEESERIALNO,CE.BRANCHID,CE.FORMID,CE.QUARTER,
				CE.NAME,CE.PAN,CE.PANREFERENCE,CE.LASTPAN,
				CE.LASTPANREFERENCE ,CE.CORRECTIONSTATUS,
				CE.GENDER,CE.ISSENIORCITIZEN,CE.EMPLOYMENTFROM,
				CE.EMPLOYMENTTO
		INTO #CORREMP1 
		FROM CORREMPLOYEE CE WITH(NOLOCK)
			INNER JOIN #CORREMP UCE
				ON CE.DEDUCTEESERIALNO=UCE.DEDUCTEESERIALNO 
					AND CE.CORRECTIONSTATUS=UCE.CURRENTCORRECTIONSTATUS
		WHERE  CE.BRANCHID = @BRANCHID AND  CE.FORMID=1 AND  CE.QUARTER=4 AND CE.CORRECTIONSTATUS=3
		IF OBJECT_ID('tempdb..#CORREMP') IS NOT NULL
		DROP TABLE #CORREMP
		SELECT DEDUCTEESERIALNO 
		INTO #CORRSALDEDSR 
		FROM CORRSALARYDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID
		GROUP BY DEDUCTEESERIALNO
		HAVING COUNT(DEDUCTEESERIALNO)=1
		SELECT  CSD.DEDUCTEESERIALNO,CSD.CORRDEDUCTEESERIALNO,CSD.BRANCHID,
				CSD.GROSSSALARY,CSD.DEDUCTIONUS16,CSD.INCOMEFROMSALARIES,
				CSD.OTHERINCOME,CSD.GROSSTOTALINCOME,CSD.LASTGROSSTOTALINCOME,
				CSD.TOTALDEDUNDERCHAPTERVIA,CSD.TOTALTAXABLEINCOME,CSD.TAXONTOTALINCOME,
				CSD.SURCHARGE,CSD.EDUCATIONCESS,CSD.RELIEFUS89,CSD.NETTAXPAYABLE,CSD.TOTALTDS,
				CSD.TAXPAYABLE,CSD.ET,CSD.PT,CSD.VIA80CCE,CSD.VIA80CCF,
				CSD.VIAOTHERS,CSD.VIA80CCG,CSD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,
				CSD.CORRECTIONSTATUS,RECORDSTATUS,CSD.CURRENTTAXABLEINCOME,CSD.PREVTAXABLEINCOME,
				CSD.CURRENTTDS,CSD.PREVTDS,CSD.ISTDSATHIGHERRATE,
				ISNULL(PANLL1,'') PANLL1, ISNULL(NAMELL1,'') NAMELL1, 
				ISNULL(PANLL2,'') PANLL2, ISNULL(NAMELL2,'') NAMELL2, 
				ISNULL(PANLL3,'') PANLL3, ISNULL(NAMELL3,'') NAMELL3, 
				ISNULL(PANLL4,'') PANLL4, ISNULL(NAMELL4,'') NAMELL4, 
				ISNULL(PANLEND1,'') PANLEND1, ISNULL(NAMELEND1,'') NAMELEND1, 
				ISNULL(PANLEND2,'') PANLEND2, ISNULL(NAMELEND2,'') NAMELEND2, 
				ISNULL(PANLEND3,'') PANLEND3, ISNULL(NAMELEND3,'') NAMELEND3, 
				ISNULL(PANLEND4,'') PANLEND4, ISNULL(NAMELEND4,'') NAMELEND4, 
				ISNULL(SAFNAME,'') SAFNAME, ISNULL(SAFFROMDATE,'') SAFFROMDATE, 
				ISNULL(SAFTODATE,'') SAFTODATE, ISNULL(AMTREPAID,0) AMTREPAID, 
				ISNULL(SAFTAXRATE,0) SAFTAXRATE, ISNULL(SAFTAXDEDUCTED,0) SAFTAXDEDUCTED
		INTO #CORRSALDET
		FROM CORRSALARYDETAIL CSD  WITH(NOLOCK)
		WHERE CSD.BRANCHID=@BRANCHID
		SELECT  CSD.DEDUCTEESERIALNO,CSD.CORRDEDUCTEESERIALNO,CSD.BRANCHID,
				CE.NAME,CE.GENDER,CE.ISSENIORCITIZEN,CE.PAN,CE.EMPLOYMENTFROM,
				CE.EMPLOYMENTTO,CSD.GROSSSALARY,CSD.DEDUCTIONUS16,CSD.INCOMEFROMSALARIES,
				CSD.OTHERINCOME,CSD.GROSSTOTALINCOME,CSD.LASTGROSSTOTALINCOME,
				CSD.TOTALDEDUNDERCHAPTERVIA,CSD.TOTALTAXABLEINCOME,CSD.TAXONTOTALINCOME,
				CSD.SURCHARGE,CSD.EDUCATIONCESS,CSD.RELIEFUS89,CSD.NETTAXPAYABLE,CSD.TOTALTDS,
				CSD.TAXPAYABLE,CSD.ET,CSD.PT,CSD.VIA80CCE,CSD.VIA80CCF,
				CSD.VIAOTHERS,CSD.VIA80CCG,CSD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,
				CSD.CORRECTIONSTATUS,RECORDSTATUS,CSD.CURRENTTAXABLEINCOME,CSD.PREVTAXABLEINCOME,
				CSD.CURRENTTDS,CSD.PREVTDS,CSD.ISTDSATHIGHERRATE,
				ISNULL(PANLL1,'') PANLL1, ISNULL(NAMELL1,'') NAMELL1, 
				ISNULL(PANLL2,'') PANLL2, ISNULL(NAMELL2,'') NAMELL2, 
				ISNULL(PANLL3,'') PANLL3, ISNULL(NAMELL3,'') NAMELL3, 
				ISNULL(PANLL4,'') PANLL4, ISNULL(NAMELL4,'') NAMELL4, 
				ISNULL(PANLEND1,'') PANLEND1, ISNULL(NAMELEND1,'') NAMELEND1, 
				ISNULL(PANLEND2,'') PANLEND2, ISNULL(NAMELEND2,'') NAMELEND2, 
				ISNULL(PANLEND3,'') PANLEND3, ISNULL(NAMELEND3,'') NAMELEND3, 
				ISNULL(PANLEND4,'') PANLEND4, ISNULL(NAMELEND4,'') NAMELEND4, 
				ISNULL(SAFNAME,'') SAFNAME, ISNULL(SAFFROMDATE,'') SAFFROMDATE, 
				ISNULL(SAFTODATE,'') SAFTODATE, ISNULL(AMTREPAID,0) AMTREPAID, 
				ISNULL(SAFTAXRATE,0) SAFTAXRATE, ISNULL(SAFTAXDEDUCTED,0) SAFTAXDEDUCTED
		FROM #CORRSALDET CSD  WITH(NOLOCK)
			 INNER JOIN #CORREMP1 CE 
					ON CSD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO AND CSD.BRANCHID=CE.BRANCHID
		/* GET SALARY DETAIL WHEN ONLY ONE RECORD IS THERE (WHEN SALARY DETAILS IS NOT UPDATED OR DELETED)*/
			INNER JOIN #CORRSALDEDSR CSDSR
					ON CSD.DEDUCTEESERIALNO = CSDSR.DEDUCTEESERIALNO
		ORDER BY CSD.CORRDEDUCTEESERIALNO ASC
		IF OBJECT_ID('tempdb..#CORREMP1') IS NOT NULL
			DROP TABLE #CORREMP1
		IF OBJECT_ID('tempdb..#CORRSALDEDSR') IS NOT NULL
			DROP TABLE #CORRSALDEDSR
		IF OBJECT_ID('tempdb..#CORRSALDET') IS NOT NULL
			DROP TABLE #CORRSALDET
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetC5Statement')
DROP PROCEDURE USP_TDS_GetC5Statement
GO
CREATE PROCEDURE [USP_TDS_GetC5Statement] 
			  @BRANCHID INT,
			  @FORMID SMALLINT,
			  @QUARTER SMALLINT
AS
BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX)
	IF(@FORMID=1)
	BEGIN	
			SELECT CE.DEDUCTEESERIALNO,BRANCHID,FORMID,QUARTER,CORRECTIONSTATUS 
			INTO #CORREMP 
			FROM CORREMPLOYEE CE WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			SELECT DEDUCTIONSERIALNO,DEDUCTEESERIALNO,CHALLANERETURNID,CORRECTIONSTATUS 
			INTO #CORREMPDEDUCTION 
			FROM CORRDEDUCTIONDETAIL CCD WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			SET @SQLQUERY='SELECT CDD.DEDUCTIONSERIALNO AS SERIALNO,''DEDUCTION'' AS TRANSACTIONTYPE,CDD.CORRECTIONSTATUS AS STATUS
					  FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)
								INNER JOIN
							#CORREMPDEDUCTION CDD WITH(NOLOCK)
						ON CCD.CHALLANERETURNID=CDD.CHALLANERETURNID  --AND CCD.BRANCHID=CDD.BRANCHID AND CCD.FORMID=CDD.FORMID AND CCD.QUARTER=CDD.QUARTER
								INNER JOIN 
							#CORREMP CE  WITH(NOLOCK)
						ON CDD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO --AND CCD.BRANCHID=CE.BRANCHID AND CCD.FORMID=CE.FORMID AND CCD.QUARTER=CE.QUARTER
						WHERE CE.CORRECTIONSTATUS=3 AND
							  CDD.CORRECTIONSTATUS IN (1,7) AND 
							  CCD.CORRECTIONSTATUS IN (1,7) AND 				  			  
							  CCD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+ 'AND 
							  CCD.FORMID='+CAST(@FORMID AS VARCHAR)+ ' AND 
							  CCD.QUARTER='+CAST(@QUARTER AS VARCHAR)+ '
					UNION 
					SELECT DISTINCT CCD.CHALLANSERIALNO AS SERIALNO,''CHALLAN'' AS TRANSACTIONTYPE,CCD.CORRECTIONSTATUS AS STATUS
					  FROM CORRCHALLANDETAIL CCD   WITH(NOLOCK)
								INNER JOIN
							#CORREMPDEDUCTION  CDD   WITH(NOLOCK)
						ON CCD.CHALLANERETURNID=CDD.CHALLANERETURNID  --AND CCD.BRANCHID=CDD.BRANCHID AND CCD.FORMID=CDD.FORMID AND CCD.QUARTER=CDD.QUARTER
								INNER JOIN
							#CORREMP CE WITH(NOLOCK)
						ON CDD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO --AND CCD.BRANCHID=CE.BRANCHID AND CCD.FORMID=CE.FORMID AND CCD.QUARTER=CE.QUARTER
						WHERE CE.CORRECTIONSTATUS=3 AND
							  CDD.CORRECTIONSTATUS IN (1,7) AND 
							  CCD.CORRECTIONSTATUS IN (1,7) AND 
							  CCD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+ 'AND 
							  CCD.FORMID='+CAST(@FORMID AS VARCHAR)+ ' AND 
							  CCD.QUARTER='+CAST(@QUARTER AS VARCHAR)+ '
					UNION 
					SELECT DEDUCTEESERIALNO AS SERIALNO,''PANUPDATE'' AS TRANSACIONTYPE,CORRECTIONSTATUS AS STATUS
					  FROM CORREMPLOYEE   WITH(NOLOCK)
					 WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+ 'AND 
					       FORMID='+CAST(@FORMID AS VARCHAR)+ ' AND 
					       QUARTER='+CAST(@QUARTER AS VARCHAR)+ ' AND
					       CORRECTIONSTATUS=3'
			IF(@QUARTER=4)
			BEGIN
			SET @SQLQUERY=@SQLQUERY+' UNION 
					SELECT CSD.DEDUCTEESERIALNO AS SERIALNO,''PANSALARY'' AS TRANSACTIONTYPE,CSD.CORRECTIONSTATUS AS STATUS
					  FROM CORRSALARYDETAIL CSD  WITH(NOLOCK)
							INNER JOIN 
							CORREMPLOYEE CE  WITH(NOLOCK)
						 ON CSD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO AND CSD.BRANCHID=CE.BRANCHID
					  WHERE CSD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+ 'AND CE.FORMID=1 AND CE.QUARTER=4 AND CE.CORRECTIONSTATUS=3'
			END
		EXECUTE SP_EXECUTESQL @SQLQUERY
		 IF OBJECT_ID('TEMPDB..#CORREMPDEDUCTION') IS NOT NULL
				DROP TABLE #CORREMPDEDUCTION
		 IF OBJECT_ID('TEMPDB..#CORREMP') IS NOT NULL
				DROP TABLE #CORREMP
	END
	ELSE
	BEGIN
		SELECT DEDUCTEESERIALNO,BRANCHID,FORMID,QUARTER,CORRECTIONSTATUS 
		INTO #CORRNONEMP 
		FROM CORRNONEMPLOYEE CNE 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		SELECT DEDUCTIONSERIALNO,DEDUCTEESERIALNO,CHALLANERETURNID,CORRECTIONSTATUS 
		INTO #CORRNONEMPDEDUCTION 
		FROM CORRDEDUCTIONDETAIL CCD 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		SET @SQLQUERY='SELECT CDD.DEDUCTIONSERIALNO AS SERIALNO,''DEDUCTION'' AS TRANSACTIONTYPE,CDD.CORRECTIONSTATUS AS STATUS
					  FROM CORRCHALLANDETAIL CCD  WITH(NOLOCK)
								INNER JOIN
							#CORRNONEMPDEDUCTION CDD  WITH(NOLOCK)
						ON CCD.CHALLANERETURNID=CDD.CHALLANERETURNID  --AND CCD.BRANCHID=CDD.BRANCHID AND CCD.FORMID=CDD.FORMID AND CCD.QUARTER=CDD.QUARTER
								INNER JOIN 
							#CORRNONEMP CNE  WITH(NOLOCK)
						ON CDD.DEDUCTEESERIALNO=CNE.DEDUCTEESERIALNO --AND CCD.BRANCHID=CNE.BRANCHID AND CCD.FORMID=CNE.FORMID AND CCD.QUARTER=CNE.QUARTER
						WHERE CNE.CORRECTIONSTATUS=3 AND 
							  CDD.CORRECTIONSTATUS IN (1,7) AND 
							  CCD.CORRECTIONSTATUS IN (1,7) AND 					  
							  CCD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+ 'AND 
							  CCD.FORMID='+CAST(@FORMID AS VARCHAR)+ ' AND 
							  CCD.QUARTER='+CAST(@QUARTER AS VARCHAR)+ '
					UNION 
					SELECT DISTINCT CCD.CHALLANSERIALNO AS SERIALNO,''CHALLAN'' AS TRANSACTIONTYPE,CCD.CORRECTIONSTATUS AS STATUS
					  FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)
								INNER JOIN
							#CORRNONEMPDEDUCTION CDD WITH(NOLOCK)
						ON CCD.CHALLANERETURNID=CDD.CHALLANERETURNID  --AND CCD.BRANCHID=CDD.BRANCHID AND CCD.FORMID=CDD.FORMID AND CCD.QUARTER=CDD.QUARTER
								INNER JOIN
							#CORRNONEMP CNE  WITH(NOLOCK)
						ON CDD.DEDUCTEESERIALNO=CNE.DEDUCTEESERIALNO --AND CCD.BRANCHID=CNE.BRANCHID AND CCD.FORMID=CNE.FORMID AND CCD.QUARTER=CNE.QUARTER
						WHERE CNE.CORRECTIONSTATUS=3 AND 
							  CDD.CORRECTIONSTATUS IN (1,7) AND 
							  CCD.CORRECTIONSTATUS IN (1,7) AND 					  
							  CCD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+ 'AND 
							  CCD.FORMID='+CAST(@FORMID AS VARCHAR)+ ' AND 
							  CCD.QUARTER='+CAST(@QUARTER AS VARCHAR)+ '
					UNION 
					SELECT DEDUCTEESERIALNO AS SERIALNO,''PANUPDATE'' AS TRANSACIONTYPE,CORRECTIONSTATUS AS STATUS
					  FROM CORRNONEMPLOYEE  WITH(NOLOCK) 
					 WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+ 'AND 
					       FORMID='+CAST(@FORMID AS VARCHAR)+ ' AND 
					       QUARTER='+CAST(@QUARTER AS VARCHAR)+ ' AND
					       CORRECTIONSTATUS=3'
		 EXECUTE SP_EXECUTESQL @SQLQUERY
		 IF OBJECT_ID('TEMPDB..#CORRNONEMPDEDUCTION') IS NOT NULL
				DROP TABLE #CORRNONEMPDEDUCTION
		 IF OBJECT_ID('TEMPDB..#CORRNONEMP') IS NOT NULL
				DROP TABLE #CORRNONEMP
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC9CHALLANDETAILS')
DROP PROCEDURE USP_TDS_GETC9CHALLANDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETC9CHALLANDETAILS] 
	@BRANCHID INT,
	@FORMID SMALLINT,
	@QUARTER SMALLINT
AS
BEGIN
	SELECT DISTINCT CD.CHALLANSERIALNO,CD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,CD.BRANCHID,CD.FORMID,CD.QUARTER,
				  ISNULL(CD.CHALLANID,-1) AS CHALLANID,CD.CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,
				  CD.MODEOFPAYMENT,CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,
				  CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,
				  CD.EDUCATIONCESS,CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,
				  CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.CORRECTIONSTATUS,
				  ISNULL(RB.BSRCODE,'') AS BSRCODE,ISNULL(RBLAST.BSRCODE,'') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,
				  CASE WHEN(DD.CHALLANERETURNID IS NULL) THEN 'FALSE' ELSE 'TRUE'END AS ISLINKED,FEE, MINORHEAD,
				  ISNULL(TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER,ISNULL(CD.CHALLANEDITMODE,'') AS CHALLANEDITMODE
	  FROM CORRCHALLANDETAIL CD    WITH(NOLOCK)
				LEFT JOIN   
		   CORRDEDUCTIONDETAIL DD  WITH(NOLOCK)
		ON CD.CHALLANERETURNID=DD.CHALLANERETURNID AND CD.BRANCHID=DD.BRANCHID AND CD.FORMID=DD.FORMID AND CD.QUARTER=DD.QUARTER
				INNER JOIN 
			  TAXSECTIONS TS  WITH(NOLOCK)
		ON CD.SECTIONID=TS.SECTIONID
				LEFT JOIN 
			  REMITTINGBANK RB  WITH(NOLOCK)
		ON CD.BANKID=RB.BANKID 
				LEFT JOIN 
			  REMITTINGBANK RBLAST  WITH(NOLOCK)
		ON CD.LASTBANKID=RBLAST.BANKID
	 WHERE CD.CORRECTIONSTATUS IN (5,7) AND CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER
	 ORDER BY CD.CHALLANERETURNID 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETC9DEDUCTIONDETAILS')
DROP PROCEDURE USP_TDS_GETC9DEDUCTIONDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETC9DEDUCTIONDETAILS]
 @BRANCHID INT,  
 @FORMID SMALLINT,  
 @QUARTER SMALLINT  
AS  
BEGIN  
    IF @FORMID=1  
      BEGIN  
		SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,CE.NAME,  
		  CDD.SECTIONID,TS.TAXNAME AS SECTIONNAME,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,CE.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,  
		  CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,  
		  CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,  
		  CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CCD.CHALLANSERIALNO,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,  
		  CDD.CORRECTIONSTATUS,CCD.CHALLANTOTAL,-1 AS CODE,CDD.ISTAXINFOEDITABLE,GENDER,ISSENIORCITIZEN,CDD.CERTNO, 
		  ISNULL(CDD.TDSRATEASPER,' ')TDSRATEASPER,CDD.ACKNO, CDD.REMITTANCEID, CDD.COUNTRYID, CCD.SECTIONID AS CHALLANSECTION  
		FROM  CORRDEDUCTIONDETAIL CDD   WITH(NOLOCK)  
		 INNER JOIN  
		CORRCHALLANDETAIL CCD   WITH(NOLOCK)  
	   ON CDD.CHALLANERETURNID=CCD.CHALLANERETURNID AND CDD.BRANCHID=CCD.BRANCHID AND CDD.FORMID=CCD.FORMID AND CDD.QUARTER=CCD.QUARTER  
		 INNER JOIN  
		(SELECT CE.DEDUCTEESERIALNO,CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.PAN,CE.GENDER, CE.ISSENIORCITIZEN, CE.PANREFERENCE,CE.LASTPAN,CE.LASTPANREFERENCE  
		   FROM CORREMPLOYEE CE   WITH(NOLOCK)  
		  INNER JOIN  
		 (SELECT MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS,DEDUCTEESERIALNO  
		   FROM CORREMPLOYEE  WITH(NOLOCK)  
		  WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER  
		  GROUP BY DEDUCTEESERIALNO) UCE  
		  ON CE.DEDUCTEESERIALNO=UCE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS=UCE.CURRENTCORRECTIONSTATUS  
		 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER) CE  
	   ON CDD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO AND CDD.BRANCHID=CE.BRANCHID AND CDD.FORMID=CE.FORMID AND CDD.QUARTER=CE.QUARTER  
		 INNER JOIN  
		TAXSECTIONS TS  WITH(NOLOCK)  
	   ON CDD.SECTIONID=TS.SECTIONID  
	   WHERE  CDD.BRANCHID=@BRANCHID  
	   AND CDD.FORMID=@FORMID  
	   AND CDD.QUARTER=@QUARTER  
	   AND CCD.CORRECTIONSTATUS IN (5,7)
	   AND CDD.CORRECTIONSTATUS IN (5,7)
      END  
    ELSE  
      BEGIN  
		SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,CNE.NAME,  
		  CDD.SECTIONID,TS.TAXNAME AS SECTIONNAME,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,  
		  CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,  
		  CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,  
		  CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CCD.CHALLANSERIALNO,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,  
		  CDD.CORRECTIONSTATUS,CCD.CHALLANTOTAL,ISNULL(CNE.CODE,0) AS CODE,CDD.ISTAXINFOEDITABLE, 0 AS GENDER,0 AS ISSENIORCITIZEN,
		  CDD.CERTNO, ISNULL(CDD.TDSRATEASPER,' ')TDSRATEASPER, CDD.ACKNO, CDD.REMITTANCEID, CDD.COUNTRYID , CCD.SECTIONID AS CHALLANSECTION       
		FROM  CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)  
		 INNER JOIN  
		CORRCHALLANDETAIL CCD WITH(NOLOCK)  
	   ON CDD.CHALLANERETURNID=CCD.CHALLANERETURNID AND CDD.BRANCHID=CCD.BRANCHID AND CDD.FORMID=CCD.FORMID AND CDD.QUARTER=CCD.QUARTER  
		 INNER JOIN  
		(SELECT CNE.DEDUCTEESERIALNO,CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,  
		   CNE.PAN,CNE.PANREFERENCE,CNE.LASTPAN,CNE.LASTPANREFERENCE,CNE.CODE  
		   FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)  
		  INNER JOIN  
		 (SELECT MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS,DEDUCTEESERIALNO  
		   FROM CORRNONEMPLOYEE  WITH(NOLOCK)  
		  WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER  
		  GROUP BY DEDUCTEESERIALNO) UCE  
		  ON CNE.DEDUCTEESERIALNO=UCE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS=UCE.CURRENTCORRECTIONSTATUS  
		 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER) CNE  
	   ON CDD.DEDUCTEESERIALNO=CNE.DEDUCTEESERIALNO AND CDD.BRANCHID=CNE.BRANCHID AND CDD.FORMID=CNE.FORMID AND CDD.QUARTER=CNE.QUARTER  
		 INNER JOIN  
		TAXSECTIONS TS WITH(NOLOCK)  
	   ON CDD.SECTIONID=TS.SECTIONID  
	   WHERE CCD.BRANCHID=@BRANCHID  
		 AND CCD.FORMID=@FORMID  
		 AND CCD.QUARTER=@QUARTER  
		 AND CCD.CORRECTIONSTATUS IN (5,7)
		 AND CDD.CORRECTIONSTATUS IN (5,7)
    END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetC9Statement')
DROP PROCEDURE USP_TDS_GetC9Statement
GO
--[USP_TDS_GetC9Statement] 106,2,1
CREATE PROCEDURE [USP_TDS_GetC9Statement]
@BRANCHID INT,
@FORMID SMALLINT,
@QUARTER SMALLINT
AS
BEGIN
		SELECT DISTINCT CCD.CHALLANSERIALNO AS SERIALNO,'CHALLAN' AS TRANSACTIONTYPE,CCD.CORRECTIONSTATUS AS [STATUS]
		FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)    
		WHERE CCD.CORRECTIONSTATUS IN (5,7) AND CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.QUARTER =  @QUARTER
		UNION
		SELECT DISTINCT CDD.DEDUCTIONSERIALNO,'DEDUCTION' AS TRANSACTIONTYPE,CDD.CORRECTIONSTATUS AS [STATUS]
		FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)    
		INNER JOIN CORRCHALLANDETAIL CCD WITH(NOLOCK) ON CDD.BRANCHID = CCD.BRANCHID AND CDD.FORMID = CCD.FORMID AND CDD.QUARTER= CCD.QUARTER AND CDD.CHALLANERETURNID = CCD.CHALLANERETURNID
		WHERE CCD.CORRECTIONSTATUS IN (5,7) AND CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER =  @QUARTER
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCATEGORYCODE')
DROP PROCEDURE USP_TDS_GETCATEGORYCODE
GO
CREATE PROCEDURE [USP_TDS_GETCATEGORYCODE]
@BRANCHID INT,
@QUARTER INT
AS
 BEGIN
	SELECT DY.CATEGORYCODE FROM DEDUCTOR DR WITH(NOLOCK)
	INNER JOIN DEDUCTORTYPE DY WITH(NOLOCK) ON DR.DEDUCTORTYPEID = DY.DEDUCTORTYPEID
	INNER JOIN BRANCHDEDUCTORS BR WITH(NOLOCK) ON BR.DEDUCTORID = DR.DEDUCTORID
	WHERE BR.BRANCHID = @BRANCHID AND BR.QUARTER = @QUARTER
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCERTAUTOCOMPLETEFORSB')
DROP PROCEDURE USP_TDS_GETCERTAUTOCOMPLETEFORSB
GO
CREATE PROCEDURE [USP_TDS_GETCERTAUTOCOMPLETEFORSB] 
@BRANCHID INT,
@PREFIXTEXT VARCHAR(MAX),  
@RECCOUNT INT    
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED                 
     DECLARE @QUERY NVARCHAR(MAX);  
   SET @QUERY = 'SELECT  TOP ' + CAST(@RECCOUNT AS VARCHAR) + ' PRINTCERTIFICATENO
				 FROM  FORM16 F16 WITH(NOLOCK) WHERE BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + '
				 AND  PRINTCERTIFICATENO LIKE ''%' + @PREFIXTEXT + '%'''  
   EXEC SP_EXECUTESQL  @QUERY
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCERTDETAIL')
DROP PROCEDURE USP_TDS_GETCERTDETAIL
GO
CREATE PROCEDURE USP_TDS_GETCERTDETAIL   
@DEDUCTEEID INT  
AS  
 BEGIN  
  SELECT CERTDETAILID, CERTNO, CERTLIMIT, TDSRATE AS RATE, VALIDFROM, VALIDTO, SECTIONNAME FROM CERTDETAIL CDET WITH(NOLOCK)  
  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CDET.SECTIONID = TS.SECTIONID  
  WHERE DEDUCTEEID = @DEDUCTEEID  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanBA798ReportDetails')
DROP PROCEDURE USP_TDS_GetChallanBA798ReportDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetChallanBA798ReportDetails]
	@BRANCHID INT,
	@CHALLANPAIDDATE VARCHAR(10)
AS
	BEGIN
		SELECT CP.BRANCHNAME, CHALLANTOTAL, CHALLANPAIDDATE,
		CASE WHEN ISCOMPANY = 1 THEN '0020 (COMPANY DEDUCTEES)' ELSE '0021 (NON-COMPANY DEDUCTEES)' END MAJORHEAD
		FROM   CHALLANDETAIL CD WITH(NOLOCK)
		INNER JOIN COMPANYBRANCH CP WITH(NOLOCK)
		ON CD.BRANCHID = CP.BRANCHID
		WHERE CONVERT(VARCHAR(10),CHALLANPAIDDATE,103)= CAST(@CHALLANPAIDDATE AS VARCHAR) 
			AND ISAUTOGENERATED = 1
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanBA799ReportDetails')
DROP PROCEDURE USP_TDS_GetChallanBA799ReportDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetChallanBA799ReportDetails]
	@BRANCHID INT,
	@CHALLANPAIDDATE VARCHAR(10)
AS
	BEGIN
		SELECT DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,FINANCIALYEAR,ASSESSMENTYEAR,[TAN],PAN,PINCODE,PHONENO,
			   STATENAME,BRANCHID,FORMID,QUARTER,SERIALNO,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,CHALLANTOTAL,CHALLANPAIDDATE,
			   CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TRANREFNO,ISCOMPANY,TAXNAME, FEE ,MINORHEAD,BANKCHALLANNO,BSRCODE, MODEOFPAYMENT
		FROM   VW_GetChallanITNS281ReportDetails WITH(NOLOCK)
		WHERE CONVERT(VARCHAR(10),CHALLANPAIDDATE,103)= CAST(@CHALLANPAIDDATE AS VARCHAR) AND ISAUTOGENERATED = 1
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANBALANCE')
DROP PROCEDURE USP_TDS_GETCHALLANBALANCE
GO
CREATE PROCEDURE USP_TDS_GETCHALLANBALANCE --1,'2014-01-01','2014-06-30'  
 @BRANCHID INT,    
 @FROMDATE SMALLDATETIME=NULL,
 @TODATE SMALLDATETIME=NULL
AS    
BEGIN    
DECLARE @QUERY NVARCHAR(MAX);
SET @QUERY='SELECT CONVERT(NVARCHAR,CD.CHALLANPAIDDATE,103) AS CHALLANDATE,    
 CD.BANKCHALLANNO,CD.CHALLANTOTAL,  
 ISNULL(SUM(DD.TOTALDEDUCTED), 0) LINKEDAMT,  
 CD.CHALLANTOTAL - ISNULL(SUM(DD.TOTALDEDUCTED), 0) AS BALAVAILABLE,  
 CASE WHEN TS.FORMID = 4 THEN TS.SECTIONNAME ELSE TS.TAXNAME END TAXNAME  
FROM  
 CHALLANDETAIL CD WITH(NOLOCK)  
 LEFT JOIN DEDCHALINK DC WITH(NOLOCK)   
  ON CD.CHALLANID = DC.CHALLANID  
 LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)  
  ON DC.DEDUCTIONID = DD.DEDUCTIONID   
 INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  
  ON CD.SECTIONID = TS.SECTIONID   
WHERE  
 CD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
IF(@FROMDATE IS NOT NULL)                                                      
 BEGIN                                                    
  SET @QUERY=@QUERY+' AND CD.CHALLANPAIDDATE>='''+CAST(@FROMDATE AS VARCHAR)+''''                                          
 END                                                 
IF(@TODATE IS NOT NULL)                                                      
 BEGIN                                                    
  SET @QUERY=@QUERY+' AND CD.CHALLANPAIDDATE<='''+CAST(@TODATE AS VARCHAR)+''''                                          
 END 
SET @QUERY=@QUERY+' GROUP BY CD.CHALLANPAIDDATE, CD.BANKCHALLANNO, CD.CHALLANTOTAL,   
 TS.FORMID, TS.SECTIONNAME, TS.TAXNAME ' 
EXEC SP_EXECUTESQL @QUERY; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANBASEDONCHALLANID')
DROP PROCEDURE USP_TDS_GETCHALLANBASEDONCHALLANID
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETCHALLANBASEDONCHALLANID]      
@CHALLANID INT      
AS      
BEGIN      
	 DECLARE @TOTALDEDUCTED NUMERIC(13,2);
	 DECLARE @EXCLUDEDAMOUNT NUMERIC(13,2);
	 SELECT @TOTALDEDUCTED = SUM(TOTALDEDUCTED) FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
				INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
	 WHERE CD.CHALLANID = @CHALLANID
	SELECT @EXCLUDEDAMOUNT = ISNULL(SUM(TOTALDEDUCTED),0)
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
		INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
		INNER JOIN ACKNO AN WITH(NOLOCK) ON AN.BRANCHID = CD.BRANCHID AND AN.FORMID = CD.FORMID AND AN.QUARTER = CD.QUARTER
	WHERE CD.CHALLANID = @CHALLANID AND ISNULL(DD.ERETURNID,0) = 0 
	 SELECT BRANCHID,CHALLANID,CD.FORMID AS FORMTYPE,[QUARTER],ERETURNID,LINKDEDCOUNT AS LINKDEDUCTIONCOUNT,
			   ISNILCHALLAN AS ISNILLCHALLAN,ISUPDATECHALLAN, MODEOFPAYMENT,BANKCHALLANNO AS BANKCHALLANNUMBER,LASTBANKCHALLANNO AS LASTBANKCHALLANNUMBER,
			   TRNVOUCHERNO AS TRANSFERVOUCHERNUMBER, LASTTRNVOUCHERNO AS LASTTRANSFERVOUCHERNUMBER,CD.BANKID,CD.LASTBANKID,      
			   CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,CD.SECTIONID, TS.SECTIONNAME,INCOMETAX,SURCHARGE, EDUCATIONCESS,
			   INTEREST,OTHERS,PENALTY,CHALLANTOTAL AS CHALLANTOTALAMOUNT,LASTCHALLANTOTAL AS LASTCHALLANTOTALAMOUNT,
			   ISCOMPANY ,CHEQUENO AS CHEQUENUMBER,CHEQUEDATE, CHEQUEDRAWNON,TRANREFNO AS TRANSFERREFERENCENUMBER,MINORHEAD,       
			   ISNULL(CD.SERIALNO,'') AS SERIALNUMBER, RB.BSRCODE AS BANKBSRCODE,ISNULL(CD.TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER,FEE, 
			   CASE WHEN(LINKEDCHALLANID IS NULL) THEN 'FALSE' ELSE 'TRUE' END AS ISLINKED,
			   ISNULL(CD.CINSTATUS,'') AS CINSTATUS, @TOTALDEDUCTED AS TOTALDEDUCTED, @EXCLUDEDAMOUNT AS EXCLUDEDAMOUNT
	 FROM CHALLANDETAIL CD WITH(NOLOCK) 
	INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON  CD.SECTIONID = TS.SECTIONID      
	 LEFT JOIN 
	 (
		 SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID FROM DEDCHALINK WITH(NOLOCK)
	 ) AS LINKTABLE      
	 ON CD.CHALLANID = LINKTABLE.LINKEDCHALLANID       
	LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID=RB.BANKID       
	WHERE CHALLANID=@CHALLANID      
END  

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANCOUNT')
DROP PROCEDURE USP_TDS_GETCHALLANCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANCOUNT]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @SECTIONID INT=NULL,
 @MODEOFPAYMENT INT=NULL,
 @ITFRM NUMERIC(13,2)=NULL,
 @ITTO NUMERIC(13,2)=NULL,
 @SURCHARGEFRM NUMERIC(13,2)=NULL,
 @SURCHARGETO NUMERIC(13,2)=NULL,
 @EDUCESSFRM NUMERIC(13,2)=NULL,
 @EDUCESSTO NUMERIC(13,2)=NULL,
 @CHALLANDATEFRM SMALLDATETIME=NULL,
 @CHALLANDATETO SMALLDATETIME=NULL
AS
 BEGIN
  DECLARE @SQLQUERY NVARCHAR(MAX);
  SET @SQLQUERY='SELECT  COUNT(CHALLANID)
       FROM   CHALLANDETAIL WITH(NOLOCK) LEFT JOIN (SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID FROM DEDCHALINK) AS LINKTABLE ON CHALLANDETAIL.CHALLANID = LINKTABLE.LINKEDCHALLANID
             INNER JOIN TAXSECTIONS WITH(NOLOCK) ON  CHALLANDETAIL.SECTIONID = TAXSECTIONS.SECTIONID
             LEFT JOIN REMITTINGBANK WITH(NOLOCK) ON CHALLANDETAIL.BANKID=REMITTINGBANK.BANKID
        WHERE  CHALLANDETAIL.BRANCHID='+CAST(@BRANCHID AS VARCHAR(10)) +
        ' AND CHALLANDETAIL.FORMID='+CAST(@FORMID AS VARCHAR(2))+' AND CHALLANDETAIL.[QUARTER]='+CAST(@QUARTER AS VARCHAR(2))
  IF(@SECTIONID IS NOT NULL)
   BEGIN
    SET @SQLQUERY=@SQLQUERY+' AND CHALLANDETAIL.SECTIONID='+CAST(@SECTIONID AS VARCHAR(2));
   END
  IF(@MODEOFPAYMENT IS NOT NULL)
   BEGIN
    SET @SQLQUERY=@SQLQUERY+' AND CHALLANDETAIL.[MODEOFPAYMENT]='+CAST(@MODEOFPAYMENT AS VARCHAR(2));
   END
  IF(@ITFRM IS NOT NULL OR @ITTO IS NOT NULL)
   BEGIN
    SET @SQLQUERY=@SQLQUERY+' AND CHALLANDETAIL.[INCOMETAX] BETWEEN '+CAST(ISNULL(@ITFRM,0) AS VARCHAR)+' AND '+CAST(ISNULL(@ITTO,0) AS VARCHAR)
   END
  IF(@SURCHARGEFRM IS NOT NULL OR @SURCHARGETO IS NOT NULL)
   BEGIN
    SET @SQLQUERY=@SQLQUERY+' AND CHALLANDETAIL.[SURCHARGE] BETWEEN '+CAST(ISNULL(@SURCHARGEFRM,0) AS VARCHAR)+' AND '+CAST(ISNULL(@SURCHARGETO,0) AS VARCHAR)
   END
  IF(@EDUCESSFRM IS NOT NULL OR @EDUCESSTO IS NOT NULL)
   BEGIN
    SET @SQLQUERY=@SQLQUERY+' AND CHALLANDETAIL.[EDUCATIONCESS] BETWEEN '+CAST(ISNULL(@EDUCESSFRM,0) AS VARCHAR)+' AND '+CAST(ISNULL(@EDUCESSTO,0) AS VARCHAR)
   END
  IF(@CHALLANDATEFRM IS NOT NULL OR @CHALLANDATETO IS NOT NULL)
   BEGIN
    SET @SQLQUERY=@SQLQUERY+' AND CHALLANDETAIL.[CHALLANPAIDDATE] BETWEEN '''+CAST(@CHALLANDATEFRM AS VARCHAR)+''' AND '''+CAST(@CHALLANDATETO AS VARCHAR)+''''
   END
   EXEC SP_EXECUTESQL @SQLQUERY
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANCOUNTBASEDONBRANCHID')
DROP PROCEDURE USP_TDS_GETCHALLANCOUNTBASEDONBRANCHID
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANCOUNTBASEDONBRANCHID]
@BRANCHID INT
AS
	BEGIN
		SELECT COUNT(CHALLANID) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANDEDUCTORDETAILS')
DROP PROCEDURE USP_TDS_GETCHALLANDEDUCTORDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANDEDUCTORDETAILS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@CHALLANSLNO INT
AS
	BEGIN
		SELECT * FROM GETCHALLANDEDUCTORDETAILS  WITH(NOLOCK)
		WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND SERIALNO = @CHALLANSLNO;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanDetail')
DROP PROCEDURE USP_TDS_GetChallanDetail
GO
CREATE PROCEDURE [USP_TDS_GetChallanDetail] 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@CHALLANSLNO INT
AS
	BEGIN
		SELECT CD.SERIALNO,CD.BRANCHID,CD.FORMID,CD.[QUARTER],CD.CHALLANID,CD.ERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,
			   CD.MODEOFPAYMENT,CASE WHEN CD.MODEOFPAYMENT <> 3 THEN CD.BANKCHALLANNO ELSE CD.TRNVOUCHERNO END AS CHALLANNO,			   
			   CASE WHEN CD.MODEOFPAYMENT <> 3 THEN CD.LASTBANKCHALLANNO ELSE CD.LASTTRNVOUCHERNO END AS LASTBANKCHALLANNO,
			   CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,
			   CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,TS.SECTIONNAME AS SECTIONNAME,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,
			   CD.LASTCHALLANTOTAL,CD.ISCOMPANY,CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.TVRECEIPTNUMBER,			   
			   CASE WHEN CD.MODEOFPAYMENT <> 3 THEN CD.TVRECEIPTNUMBER ELSE RB.BSRCODE END AS BSRCODE,CD.MINORHEAD ,CD.FEE
		FROM   CHALLANDETAIL CD WITH(NOLOCK) INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON  CD.SECTIONID = TS.SECTIONID
								LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID
		WHERE  CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.QUARTER = @QUARTER AND CD.SERIALNO = @CHALLANSLNO;--AND CD.SECTIONID = (CASE WHEN @SECTIONID IN (23,24) THEN 15 ELSE @SECTIONID END) 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANDETAILF005')
DROP PROCEDURE USP_TDS_GETCHALLANDETAILF005
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANDETAILF005]  
(  
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,  
@SECTIONID INT  
)  
AS  
BEGIN  
 SELECT CHALLANID,RB.BSRCODE,BANKCHALLANNO,CHALLANPAIDDATE,ISCOMPANY FROM CHALLANDETAIL CD WITH(NOLOCK)  
 INNER JOIN REMITTINGBANK RB  WITH(NOLOCK)  
  ON RB.BANKID=CD.BANKID  
 WHERE  BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER AND CD.SECTIONID=@SECTIONID  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANDETAILF008')
DROP PROCEDURE USP_TDS_GETCHALLANDETAILF008
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANDETAILF008] 
(      
@BRANCHCODES VARCHAR(MAX)     
)      
AS      
BEGIN      
	 SELECT * INTO #BRANCHES FROM [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')        
	 SELECT CD.CHALLANID,CD.SECTIONID,CD.FORMID,RB.BSRCODE,BANKCHALLANNO,CHALLANPAIDDATE,ISCOMPANY, CD.BRANCHID
	  FROM CHALLANDETAIL CD WITH(NOLOCK)    
	 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CD.BRANCHID = CB.BRANCHID
	 INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE 
	 INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID=CD.BANKID  
	 WHERE CD.FORMID IN(2,3) AND CD.SECTIONID IN(5,17)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANDETAILFORCHALLANID')
DROP PROCEDURE USP_TDS_GETCHALLANDETAILFORCHALLANID
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANDETAILFORCHALLANID]
@CHALLANID INT
AS
BEGIN
SELECT CHALLANID,CASE WHEN MODEOFPAYMENT <> 3 THEN BANKCHALLANNO ELSE TRNVOUCHERNO END AS CHALLANNO,CONVERT(VARCHAR(10),CHALLANPAIDDATE,103) AS CHALLANPAIDDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,CHALLANTOTAL,ISCOMPANY
       FROM CHALLANDETAIL WITH(NOLOCK) WHERE CHALLANID=@CHALLANID
       END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANDETAILS')
DROP PROCEDURE USP_TDS_GETCHALLANDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANDETAILS] 
@BRANCHID INT,      
@FORMID INT,      
@QUARTER INT      
AS      
  BEGIN        
	  SELECT BRANCHID,FORMID,QUARTER,SERIALNO, ERETURNID,MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,CHALLANID,       
			   TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,        
			   LASTCHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,        
           EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,FEE,MINORHEAD,        
           ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TVRECEIPTNUMBER,TRANREFNO        
           FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER      
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANDETAILS_F005')
DROP PROCEDURE USP_TDS_GETCHALLANDETAILS_F005
GO
CREATE PROCEDURE USP_TDS_GETCHALLANDETAILS_F005
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
	SELECT CD.CHALLANPAIDDATE,CD.BANKCHALLANNO,RB.BSRCODE FROM CHALLANDETAIL CD WITH(NOLOCK)
	INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID = CD.BANKID
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANERETURNID')
DROP PROCEDURE USP_TDS_GETCHALLANERETURNID
GO
CREATE PROCEDURE USP_TDS_GETCHALLANERETURNID  ---USP_TDS_GETCHALLANERETURNID 5201,1,1,2,'0'  
	@BRANCHID INT,    
	@FORMID INT,    
	@QUARTER INT,    
	@CORRECTIONSTATUS INT,    
	@CHALLANSERIALNO NVARCHAR(MAX)    
AS 
	BEGIN    
		SELECT * INTO #DEDSER FROM  dbo.UDF_TDS_SplitString(@CHALLANSERIALNO,',')        
		SELECT CHALLANSERIALNO,CHALLANID,INCOMETAX,CHALLANTOTAL,
			LASTCHALLANTOTAL,CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,
			ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,
			BANKID,CHALLANEDITMODE,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,
			MINORHEAD,FEE,CORRECTIONSTATUS,EXPECTEDDID,SURCHARGE,PENDINGAMOUNT,
			ISCOMPANY,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,TRNVOUCHERNO,
			LASTTRNVOUCHERNO,DATEOFDEBIT,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,
			TRANREFNO,TVRECEIPTNUMBER,MATCHEDID,UPDATEINDICATOR,ISONLINECHALLAN         
		INTO #CDDATA    
		FROM CORRCHALLANDETAIL CD WITH(NOLOCK)     
			INNER JOIN #DEDSER DS ON DS.DATA = CD.CHALLANSERIALNO    
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
			AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 1   
		DELETE FROM CORRCHALLANDETAIL   
		WHERE CHALLANSERIALNO IN (SELECT CHALLANSERIALNO FROM #CDDATA)   
			AND  CORRECTIONSTATUS = 2 AND BRANCHID = @BRANCHID 
			AND FORMID = @FORMID AND QUARTER = @QUARTER    
		SELECT * FROM #CDDATA WHERE CORRECTIONSTATUS = 1  
		DROP TABLE #CDDATA      
		DROP TABLE #DEDSER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanFile')
DROP PROCEDURE USP_TDS_GetChallanFile
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetChallanFile]
@ISKB BIT 
--@PARENTBRANCHID INT
		AS
			BEGIN
				SELECT DISTINCT CB.PARENTBRANCHID,CB.BRANCHCODE,CD.BRANCHID, CD.CHALLANID,'281' CHALLANSERIALNO ,CASE WHEN ISCOMPANY=1 THEN '0020' ELSE '0021' END AS MAJORHEADCODE,    
						'200' AS MINORHEADCODE,(D.FINANCIALYEAR+1) AS ASSESSMENTYEAR,D.FINANCIALYEAR,CASE WHEN TS.TAXNAME IN ('4IA','4IB') THEN '94I' ELSE TS.TAXNAME END AS NATUREOFPAYMENT,
						D.DEDUCTORNAME,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5 ,
						SM.STATEID as IB_CBSCODE,D.PINCODE, CASE WHEN D.TAN='TANAPPLIED' THEN D.PAN ELSE D.TAN END AS [TAN] , '' AS ZAOCODE,CD.INCOMETAX,ISNULL(CD.SURCHARGE,0)SURCHARGE,ISNULL(CD.EDUCATIONCESS,0)EDUCATIONCESS,ISNULL(CD.PENALTY,0) AS PENALTYAMOUNT,ISNULL(CD.INTEREST,0) AS INTERESTAMOUNT,
						CD.OTHERS,ABS(CD.CHALLANTOTAL) AS TOTALAMOUNT,DD.ENTRYTYPE
				FROM CHALLANDETAIL CD INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CD.BRANCHID=BD.BRANCHID AND CD.QUARTER=BD.QUARTER    
						  INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID=D.DEDUCTORID     
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID=TS.SECTIONID 
						  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CD.BRANCHID=CB.BRANCHID
						  INNER JOIN STATEMASTER SM  WITH(NOLOCK) ON SM.STATEID= D.STATEID  
						  INNER JOIN DEDCHALINK DCL WITH(NOLOCK)  ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID     
						  INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DCL.DEDUCTIONID = DD.DEDUCTIONID    
				WHERE  CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0 AND ISTTUMINCLUDED=CASE WHEN @ISKB = 1 THEN 1 ELSE 0 END --AND CB.PARENTBRANCHID=@PARENTBRANCHID
				ORDER BY CB.BRANCHCODE
		END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanFileKB')
DROP PROCEDURE USP_TDS_GetChallanFileKB
GO
CREATE PROCEDURE [USP_TDS_GetChallanFileKB]
@ISKB BIT 
		AS
		BEGIN
				SELECT DISTINCT CB.PARENTBRANCHID,CB.BRANCHCODE,CD.BRANCHID, CD.CHALLANID,'281' CHALLANSERIALNO ,CASE WHEN ISCOMPANY=1 THEN '0020' ELSE '0021' END AS MAJORHEADCODE,    
						'200' AS MINORHEADCODE,(D.FINANCIALYEAR+1) AS ASSESSMENTYEAR,D.FINANCIALYEAR,CASE WHEN TS.TAXNAME IN ('4IA','4IB') THEN '94I' ELSE TS.TAXNAME END AS NATUREOFPAYMENT,
						D.DEDUCTORNAME,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5 ,
						RIGHT(CAST(100+(SM.STATEID) AS VARCHAR),2) as IB_CBSCODE,D.PINCODE, CASE WHEN D.TAN='TANAPPLIED' THEN D.PAN ELSE D.TAN END AS [TAN] , '' AS ZAOCODE,CD.INCOMETAX,ISNULL(CD.SURCHARGE,0)SURCHARGE,ISNULL(CD.EDUCATIONCESS,0)EDUCATIONCESS,ISNULL(CD.PENALTY,0) AS PENALTYAMOUNT,ISNULL(CD.INTEREST,0) AS INTERESTAMOUNT,
						CD.OTHERS,ABS(CD.CHALLANTOTAL) AS TOTALAMOUNT,0 AS ENTRYTYPE
				FROM CHALLANDETAIL CD WITH(NOLOCK) INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CD.BRANCHID=BD.BRANCHID AND CD.QUARTER=BD.QUARTER    
						  INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID=D.DEDUCTORID     
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID=TS.SECTIONID 
						  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CD.BRANCHID=CB.BRANCHID
						  INNER JOIN STATEMASTER SM  WITH(NOLOCK) ON SM.STATEID= D.STATEID   
				WHERE  CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0 AND ISTTUMINCLUDED=1
				ORDER BY CB.BRANCHCODE
		END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANID')
DROP PROCEDURE USP_TDS_GETCHALLANID
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANID]  
@BRANCHID INT,  
@FORMID INT  
AS  
 BEGIN  
    SELECT SERIALNO, CHALLANID, QUARTER FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID  
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANIDTOVERIFY')
DROP PROCEDURE USP_TDS_GETCHALLANIDTOVERIFY
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANIDTOVERIFY]
(
@BRANCHID INT,
@FORMID TINYINT,
@QUARTER TINYINT,
@SERIALNO INT
)
AS
BEGIN
DECLARE @CHALID INT;
SET @CHALID=0;
IF(EXISTS(SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND SERIALNO=@SERIALNO AND QUARTER=@QUARTER))
 BEGIN
  SET @CHALID=1;
 END
SELECT @CHALID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanITNS281ReportDetails')
DROP PROCEDURE USP_TDS_GetChallanITNS281ReportDetails
GO
CREATE PROCEDURE USP_TDS_GetChallanITNS281ReportDetails 
	@BRANCHID INT = -1,
	@FORMID INT = -1,
	@QUARTER INT = -1,
	@CHALLANSLNO INT = -1,
	@FROMCHALLANPAIDDATE SMALLDATETIME = NULL,      
	@TOCHALLANPAIDDATE SMALLDATETIME = NULL      
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY = 'SELECT D.DEDUCTORNAME, D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, CAST(D.FINANCIALYEAR AS VARCHAR) 
				  + ''-'' + CAST(D.FINANCIALYEAR + 1 AS VARCHAR) AS FINANCIALYEAR, CAST(D.FINANCIALYEAR + 1 AS VARCHAR) 
				  + ''-'' + CAST(D.FINANCIALYEAR + 2 AS VARCHAR) AS ASSESSMENTYEAR, D.TAN, D.PAN, D.PINCODE, D.STDCODE 
				  + ''-'' + D.PHONENO AS PHONENO, SM.STATENAME, CASE WHEN ISNULL(CD.MINORHEAD, - 1) = - 1 THEN 200 ELSE MINORHEAD END AS MINORHEAD, 
				  CD.BRANCHID, CD.FORMID, CD.QUARTER, CD.SERIALNO, CD.INCOMETAX, CD.SURCHARGE, CD.EDUCATIONCESS, 
				  CD.INTEREST, CD.PENALTY + CD.OTHERS AS PENALTY, CD.CHALLANTOTAL, CD.CHALLANPAIDDATE, CD.CHEQUENO, 
				  CD.CHEQUEDATE, CD.CHEQUEDRAWNON, CD.TRANREFNO, CD.ISCOMPANY, ISNULL(CD.FEE, 0) AS FEE, 
				  CASE WHEN CD.FORMID = 4 THEN TS .SECTIONNAME ELSE TS .TAXNAME END AS TAXNAME, 
				  CASE WHEN CD.MODEOFPAYMENT = 3 THEN CD.TRNVOUCHERNO ELSE CD.BANKCHALLANNO END AS BANKCHALLANNO, 
				  CASE WHEN CD.MODEOFPAYMENT = 3 THEN CD.TVRECEIPTNUMBER ELSE RB.BSRCODE END AS BSRCODE,MODEOFPAYMENT,
				  CD.ISAUTOGENERATED
		FROM  CHALLANDETAIL AS CD 
				LEFT JOIN REMITTINGBANK AS RB 
					ON CD.BANKID = RB.BANKID 
				LEFT OUTER JOIN BRANCHDEDUCTORS AS BD 
					ON CD.BRANCHID = BD.BRANCHID AND CD.QUARTER = BD.QUARTER 
				LEFT OUTER JOIN DEDUCTOR AS D 
					ON D.DEDUCTORID = BD.DEDUCTORID 
				LEFT OUTER JOIN STATEMASTER AS SM 
					ON D.STATEID = SM.STATEID 
				LEFT OUTER JOIN TAXSECTIONS AS TS 
					ON CD.SECTIONID = TS.SECTIONID
		WHERE ' 
			IF(@BRANCHID <> -1)
				BEGIN
					SET @SQLQUERY = @SQLQUERY + ' CD.BRANCHID ='  + CAST(@BRANCHID AS VARCHAR)  
				END
			IF(@FORMID <> -1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND CD.FORMID = ' + CAST(@FORMID AS VARCHAR) 
			END
			IF(@QUARTER <> -1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND CD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)
			END			 
			IF(@CHALLANSLNO <> -1)
				BEGIN
					SET @SQLQUERY = @SQLQUERY + ' AND SERIALNO = '+ CAST(@CHALLANSLNO AS VARCHAR)
				END
			IF(@FROMCHALLANPAIDDATE IS NOT NULL AND @TOCHALLANPAIDDATE IS NOT NULL)
				BEGIN
					SET @SQLQUERY = @SQLQUERY + ' AND CHALLANPAIDDATE BETWEEN ''' + CAST(@FROMCHALLANPAIDDATE AS VARCHAR) + ''' AND ''' + CAST(@TOCHALLANPAIDDATE AS VARCHAR) + ''''
				END
			EXEC SP_EXECUTESQL @SQLQUERY;    			
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANNOSBASEDONDATES')
DROP PROCEDURE USP_TDS_GETCHALLANNOSBASEDONDATES
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANNOSBASEDONDATES]
	@BRANCHID INT,
	@FORMID INT,
	@TYPEVALUE INT,
	@FROMDATE SMALLDATETIME=NULL,
	@TODATE SMALLDATETIME=NULL
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY='SELECT DISTINCT CD.BANKCHALLANNO
					   FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
											  LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
					   WHERE  DD.BRANCHID='+ CAST(@BRANCHID AS VARCHAR) +' AND DD.FORMID='+ CAST(@FORMID AS VARCHAR)
					+' AND DD.PAYMENTDATE >='''+CAST(@FROMDATE AS VARCHAR)+''' AND DD.PAYMENTDATE <='''+CAST(@TODATE AS VARCHAR)+''' AND (DD.TOTALDEDUCTED=0 OR DL.DEDCHALINKID IS NOT NULL) AND CD.BANKCHALLANNO IS NOT NULL';
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANNOSFORFORM16A')
DROP PROCEDURE USP_TDS_GETCHALLANNOSFORFORM16A
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANNOSFORFORM16A]
	@BRANCHID INT,
	@FORMID INT,
	@TYPEVALUE INT,
	@VALUE INT,
	@FROMDATE SMALLDATETIME = NULL,
	@TODATE SMALLDATETIME = NULL
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY = 'SELECT DISTINCT CD.BANKCHALLANNO AS CHALLANNO
						 FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
												   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
						 WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL) AND CD.BANKCHALLANNO IS NOT NULL AND LEN(CD.BANKCHALLANNO) > 0
						 UNION
						 SELECT DISTINCT CD.TRNVOUCHERNO AS CHALLANNO
					     FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
												   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
						 WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL) AND CD.TRNVOUCHERNO IS NOT NULL AND LEN(CD.TRNVOUCHERNO) > 0';
		IF(@TYPEVALUE = 1 AND @VALUE<>5)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND DD.QUARTER = ' + CAST(@VALUE AS VARCHAR);
			END
		ELSE IF(@TYPEVALUE = 2)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND MONTH(DD.PAYMENTDATE) = ' + CAST(@VALUE AS VARCHAR);
			END
		ELSE IF(@TYPEVALUE = 3)
			BEGIN
				IF (@FROMDATE IS NOT NULL)
					BEGIN
						SET @SQLQUERY = @SQLQUERY +  ' AND DD.PAYMENTDATE >='''+CAST(@FROMDATE AS VARCHAR)+'''';
					END
				IF (@TODATE IS NOT NULL)
					BEGIN
						SET @SQLQUERY = @SQLQUERY + ' AND DD.PAYMENTDATE <='''+CAST(@TODATE AS VARCHAR)+'''';
					END
			END
		EXEC SP_EXECUTESQL @SQLQUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanRegisterMIS')
DROP PROCEDURE USP_TDS_GetChallanRegisterMIS
GO
CREATE PROCEDURE USP_TDS_GetChallanRegisterMIS
AS
BEGIN
	SELECT TOP 1 CD.BRANCHID,CD.FORMID,CD.QUARTER,CD.SERIALNO,
	   CAST(CD.SERIALNO AS VARCHAR)+':Q'+CAST(CD.QUARTER AS VARCHAR) AS CHALLANSLNO,
	   CD.SECTIONID,TS.SECTIONNAME,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,
	   CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,
		   CASE WHEN CD.MODEOFPAYMENT=3 THEN CD.TRNVOUCHERNO ELSE  CD.BANKCHALLANNO END BANKCHALLANNO,
		   CD.CHALLANPAIDDATE,CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON 
	FROM CHALLANDETAIL CD WITH(NOLOCK)
	INNER JOIN TAXSECTIONS TS WITH(NOLOCK)
	ON CD.SECTIONID = TS.SECTIONID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanRegisterMISCBI')
DROP PROCEDURE USP_TDS_GetChallanRegisterMISCBI
GO
CREATE PROCEDURE USP_TDS_GetChallanRegisterMISCBI
AS
BEGIN
	SELECT TOP 1 BRANCHNAME,BRANCHCODE,CD.BRANCHID,CD.FORMID,CD.QUARTER,CD.SERIALNO,
	   CAST(CD.SERIALNO AS VARCHAR)+':Q'+CAST(CD.QUARTER AS VARCHAR) AS CHALLANSLNO,
	   CD.SECTIONID,TS.SECTIONNAME,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,
	   CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,
		   CASE WHEN CD.MODEOFPAYMENT=3 THEN CD.TRNVOUCHERNO ELSE  CD.BANKCHALLANNO END BANKCHALLANNO,
		   CD.CHALLANPAIDDATE,CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON 
	FROM CHALLANDETAIL CD WITH(NOLOCK)
	INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = CD.BRANCHID
	INNER JOIN TAXSECTIONS TS WITH(NOLOCK)
	ON CD.SECTIONID = TS.SECTIONID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanRemittedReportSB')
DROP PROCEDURE USP_TDS_GetChallanRemittedReportSB
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetChallanRemittedReportSB]
@ISHO BIT,
@MONTH INT,
@BRANCHID INT
AS
BEGIN
	CREATE TABLE #DEDUCTIONDETAIL (DEDUCTIONID INT ,BRANCHID INT, TOTALDEDUCTED NUMERIC(13,2), DEDUCTEDDATE SMALLDATETIME, FORMID INT, SECTIONID INT)
	CREATE TABLE #CHALLANDETAIL (CHALLANID INT, BRANCHID INT, CHALLANTOTAL NUMERIC(13,2), FORMID INT, CHALLANPAIDDATE SMALLDATETIME, SECTIONID INT)
	DECLARE @SQLQUERY NVARCHAR(MAX);
	DECLARE @CHALLANMONTH INT;
	IF @MONTH =12
	BEGIN
		SET @CHALLANMONTH = 1
	END
	ELSE
	BEGIN
		SET @CHALLANMONTH = @MONTH + 1
	END
	IF(@ISHO = 1)
	BEGIN
		SET @SQLQUERY = 'INSERT INTO #DEDUCTIONDETAIL
		SELECT DEDUCTIONID, BRANCHID, TOTALDEDUCTED, DEDUCTEDDATE, FORMID, SECTIONID 
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE MONTH(PAYMENTDATE) = ' + CAST(@MONTH AS VARCHAR) + ' 
		INSERT INTO #CHALLANDETAIL
		SELECT CD.CHALLANID, CD.BRANCHID, CD.CHALLANTOTAL, CD.FORMID, CD.CHALLANPAIDDATE, CD.SECTIONID
		FROM CHALLANDETAIL CD WITH(NOLOCK)
		INNER JOIN 
		DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
		INNER JOIN
		#DEDUCTIONDETAIL DD ON DD.DEDUCTIONID = DCL.DEDUCTIONID 
		WHERE ISAUTOGENERATED = 1
		GROUP BY CD.CHALLANID, CD.BRANCHID, CD.CHALLANTOTAL, CD.FORMID, CD.CHALLANPAIDDATE, CD.SECTIONID
		INSERT INTO #CHALLANDETAIL
		SELECT CD.CHALLANID, CD.BRANCHID, CD.CHALLANTOTAL, CD.FORMID, CD.CHALLANPAIDDATE, CD.SECTIONID
		FROM CHALLANDETAIL CD WITH(NOLOCK)
		WHERE CHALLANID NOT IN(SELECT CHALLANID FROM DEDCHALINK WITH(NOLOCK)) AND MONTH(CHALLANPAIDDATE) = ' + CAST(@CHALLANMONTH AS VARCHAR)  + 
		' AND ISAUTOGENERATED = 1'
	END
	ELSE
	BEGIN
		SET @SQLQUERY = 'INSERT INTO #DEDUCTIONDETAIL
		SELECT DD.BRANCHID, TOTALDEDUCTED, DEDUCTEDDATE, FORMID, SECTIONID 
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN
		COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID
		WHERE MONTH(PAYMENTDATE) = ' + CAST(@MONTH AS VARCHAR) + 'AND CB.PARENTBRANCHID = ' +CAST(@BRANCHID AS VARCHAR) + ' 
		INSERT INTO #CHALLANDETAIL
		SELECT CD.CHALLANID, CD.BRANCHID, CD.CHALLANTOTAL, CD.FORMID, CD.CHALLANPAIDDATE, CD.SECTIONID
		FROM CHALLANDETAIL CD WITH(NOLOCK)
		INNER JOIN
		COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID
		INNER JOIN 
		DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
		INNER JOIN
		#DEDUCTIONDETAIL DD ON DD.DEDUCTIONID = DCL.DEDUCTIONID 
		WHERE ISAUTOGENERATED = 1 AND CB.PARENTBRANCHID = ' +CAST(@BRANCHID AS VARCHAR) +
		'GROUP BY CD.CHALLANID, CD.BRANCHID, CD.CHALLANTOTAL, CD.FORMID, CD.CHALLANPAIDDATE, CD.SECTIONID
		INSERT INTO #CHALLANDETAIL
		SELECT CD.CHALLANID, CD.BRANCHID, CD.CHALLANTOTAL, CD.FORMID, CD.CHALLANPAIDDATE, CD.SECTIONID
		FROM CHALLANDETAIL CD WITH(NOLOCK)
		WHERE CHALLANID NOT IN(SELECT CHALLANID FROM DEDCHALINK WITH(NOLOCK)) AND MONTH(CHALLANPAIDDATE) = ' + CAST(@CHALLANMONTH AS VARCHAR)  + 
		' AND ISAUTOGENERATED = 1 AND CB.PARENTBRANCHID = ' +CAST(@BRANCHID AS VARCHAR)
	END
		EXECUTE SP_EXECUTESQL @SQLQUERY;
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM24Q_DEDUCTED
	INTO #FORM24Q_TOTALDEDUCTED
	FROM #DEDUCTIONDETAIL WHERE FORMID = 1 
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(CHALLANTOTAL) AS FORM24Q_REMITTED
	INTO #FORM24Q_TOTALREMITTED
	FROM #CHALLANDETAIL WHERE FORMID = 1
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26QI_DEDUCTED
	INTO #FORM26QI_TOTALDEDUCTED
	FROM #DEDUCTIONDETAIL WHERE SECTIONID = 5
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(CHALLANTOTAL) AS FORM26QI_REMITTED
	INTO #FORM26QI_TOTALREMITTED
	FROM #CHALLANDETAIL WHERE SECTIONID = 5
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26Q194C_DEDUCTED
	INTO #FORM26Q194C_TOTALDEDUCTED
	FROM #DEDUCTIONDETAIL WHERE SECTIONID = 8
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(CHALLANTOTAL) AS FORM26Q194C_REMITTED
	INTO #FORM26Q194C_TOTALREMITTED
	FROM #CHALLANDETAIL WHERE SECTIONID = 8
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26Q194H_DEDUCTED
	INTO #FORM26Q194H_TOTALDEDUCTED
	FROM #DEDUCTIONDETAIL WHERE SECTIONID = 14
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(CHALLANTOTAL) AS FORM26Q194H_REMITTED
	INTO #FORM26Q194H_TOTALREMITTED
	FROM #CHALLANDETAIL WHERE SECTIONID = 14
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26Q194IA_DEDUCTED
	INTO #FORM26Q194IA_TOTALDEDUCTED
	FROM #DEDUCTIONDETAIL WHERE SECTIONID = 23
	GROUP BY BRANCHID
	SELECT CD.BRANCHID, SUM(CHALLANTOTAL) AS FORM26Q194IA_REMITTED
	INTO #FORM26Q194IA_TOTALREMITTED
	FROM #CHALLANDETAIL CD 
	INNER JOIN DEDCHALINK DCL ON DCL.CHALLANID = CD.CHALLANID 
	INNER JOIN #DEDUCTIONDETAIL DD ON DCL.DEDUCTIONID =  DD.DEDUCTIONID
	WHERE DD.SECTIONID = 23
	GROUP BY CD.BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26Q194IB_DEDUCTED
	INTO #FORM26Q194IB_TOTALDEDUCTED
	FROM #DEDUCTIONDETAIL WHERE SECTIONID = 24
	GROUP BY BRANCHID
	SELECT CD.BRANCHID, SUM(CHALLANTOTAL) AS FORM26Q194IB_REMITTED
	INTO #FORM26Q194IB_TOTALREMITTED
	FROM #CHALLANDETAIL CD 
	INNER JOIN DEDCHALINK DCL ON DCL.CHALLANID = CD.CHALLANID 
	INNER JOIN #DEDUCTIONDETAIL DD ON DCL.DEDUCTIONID =  DD.DEDUCTIONID
	WHERE DD.SECTIONID = 24
	GROUP BY CD.BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26Q194J_DEDUCTED
	INTO #FORM26Q194J_TOTALDEDUCTED
	FROM #DEDUCTIONDETAIL WHERE SECTIONID = 16
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(CHALLANTOTAL) AS FORM26Q194J_REMITTED
	INTO #FORM26Q194J_TOTALREMITTED
	FROM #CHALLANDETAIL WHERE SECTIONID = 16
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM27Q_DEDUCTED
	INTO #FORM27Q_TOTALDEDUCTED
	FROM #DEDUCTIONDETAIL WHERE FORMID = 3
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(CHALLANTOTAL) AS FORM27Q_REMITTED
	INTO #FORM7Q_TOTALREMITTED
	FROM #CHALLANDETAIL WHERE FORMID = 3
	GROUP BY BRANCHID
	SELECT BRANCHNAME, BRANCHID
	INTO #PARENTBRANCH
	FROM COMPANYBRANCH WITH(NOLOCK) 
	SELECT SLNO = IDENTITY(INT,1,1), CB.BRANCHID, CB.PARENTBRANCHID, BRANCHCODE, CB.BRANCHNAME, ISNULL(PB.BRANCHNAME,'') PARENTBRANCHNAME,
		CASE WHEN ISNULL(FORM24Q_DEDUCTED,0) = 0 THEN 'ND'
			WHEN ISNULL(FORM24Q_DEDUCTED,0) > 0 AND ISNULL(FORM24Q_REMITTED,0) = 0 THEN 'NR'
				WHEN ISNULL(FORM24Q_DEDUCTED,0) > ISNULL(FORM24Q_REMITTED,0) AND ISNULL(FORM24Q_REMITTED,0) > 0 THEN CAST(FORM24Q_REMITTED AS VARCHAR) + '/NR'
					ELSE CAST(FORM24Q_REMITTED AS VARCHAR)
			END FORM24QREMITTED,
		CASE WHEN ISNULL(FORM26QI_DEDUCTED,0) = 0 THEN 'ND'
			WHEN ISNULL(FORM26QI_DEDUCTED,0) > 0 AND ISNULL(FORM26QI_REMITTED,0) = 0 THEN 'NR'
				WHEN ISNULL(FORM26QI_DEDUCTED,0) > ISNULL(FORM26QI_REMITTED,0) AND ISNULL(FORM26QI_REMITTED,0) > 0 THEN CAST(FORM26QI_REMITTED AS VARCHAR) + '/NR'
					ELSE CAST(FORM26QI_REMITTED AS VARCHAR)
			END FORM26QIREMITTED,
		CASE WHEN ISNULL(FORM26Q194C_DEDUCTED,0) = 0 THEN 'ND'
			WHEN ISNULL(FORM26Q194C_DEDUCTED,0) > 0 AND ISNULL(FORM26Q194C_REMITTED,0) = 0 THEN 'NR'
				WHEN ISNULL(FORM26Q194C_DEDUCTED,0) > ISNULL(FORM26Q194C_REMITTED,0) AND ISNULL(FORM26Q194C_REMITTED,0) > 0 THEN CAST(FORM26Q194C_REMITTED AS VARCHAR) + '/NR'
					ELSE CAST(FORM26Q194C_REMITTED AS VARCHAR)
			END FORM26Q194CREMITTED,
		CASE WHEN ISNULL(FORM26Q194H_DEDUCTED,0) = 0 THEN 'ND'
			WHEN ISNULL(FORM26Q194H_DEDUCTED,0) > 0 AND ISNULL(FORM26Q194H_REMITTED,0) = 0 THEN 'NR'
				WHEN ISNULL(FORM26Q194H_DEDUCTED,0) > ISNULL(FORM26Q194H_REMITTED,0) AND ISNULL(FORM26Q194H_REMITTED,0) > 0 THEN CAST(FORM26Q194H_REMITTED AS VARCHAR) + '/NR'
					ELSE CAST(FORM26Q194H_REMITTED AS VARCHAR)
			END FORM26Q194HREMITTED,
		CASE WHEN ISNULL(FORM26Q194IA_DEDUCTED,0) = 0 THEN 'ND'
			WHEN ISNULL(FORM26Q194IA_DEDUCTED,0) > 0 AND ISNULL(FORM26Q194IA_REMITTED,0) = 0 THEN 'NR'
				WHEN ISNULL(FORM26Q194IA_DEDUCTED,0) > ISNULL(FORM26Q194IA_REMITTED,0) AND ISNULL(FORM26Q194IA_REMITTED,0) > 0 THEN CAST(FORM26Q194IA_REMITTED AS VARCHAR) + '/NR'
					ELSE CAST(FORM26Q194IA_REMITTED AS VARCHAR)
			END FORM26Q194IAREMITTED,
		CASE WHEN ISNULL(FORM26Q194IB_DEDUCTED,0) = 0 THEN 'ND'
			WHEN ISNULL(FORM26Q194IB_DEDUCTED,0) > 0 AND ISNULL(FORM26Q194IB_REMITTED,0) = 0 THEN 'NR'
				WHEN ISNULL(FORM26Q194IB_DEDUCTED,0) > ISNULL(FORM26Q194IB_REMITTED,0) AND ISNULL(FORM26Q194IB_REMITTED,0) > 0 THEN CAST(FORM26Q194IB_REMITTED AS VARCHAR) + '/NR'
					ELSE CAST(FORM26Q194IB_REMITTED AS VARCHAR)
			END FORM26Q194IBREMITTED,
		CASE WHEN ISNULL(FORM26Q194J_DEDUCTED,0) = 0 THEN 'ND'
			WHEN ISNULL(FORM26Q194J_DEDUCTED,0) > 0 AND ISNULL(FORM26Q194J_REMITTED,0) = 0 THEN 'NR'
				WHEN ISNULL(FORM26Q194J_DEDUCTED,0) > ISNULL(FORM26Q194J_REMITTED,0) AND ISNULL(FORM26Q194J_REMITTED,0) > 0 THEN CAST(FORM26Q194J_REMITTED AS VARCHAR) + '/NR'
					ELSE CAST(FORM26Q194J_REMITTED AS VARCHAR)
			END FORM26Q194JREMITTED,
		(ISNULL(FORM26Q194C_REMITTED,0) + ISNULL(FORM26Q194H_REMITTED,0) + ISNULL(FORM26Q194IA_REMITTED,0) + ISNULL(FORM26Q194IB_REMITTED,0) + ISNULL(FORM26Q194J_REMITTED,0)) AS FORM26QVTOTALREMITTED,
		CASE WHEN ISNULL(FORM27Q_DEDUCTED,0) = 0 THEN 'ND'
			WHEN ISNULL(FORM27Q_DEDUCTED,0) > 0 AND ISNULL(FORM27Q_REMITTED,0) = 0 THEN 'NR'
				WHEN ISNULL(FORM27Q_DEDUCTED,0) > ISNULL(FORM27Q_REMITTED,0) AND ISNULL(FORM27Q_REMITTED,0) > 0 THEN CAST(FORM27Q_REMITTED AS VARCHAR) + '/NR'
					ELSE CAST(FORM27Q_REMITTED AS VARCHAR)
			END FORM27QREMITTED,
		(ISNULL(FORM24Q_REMITTED,0) + ISNULL(FORM26QI_REMITTED,0) + (ISNULL(FORM26Q194C_REMITTED,0) + ISNULL(FORM26Q194H_REMITTED,0) + ISNULL(FORM26Q194IA_REMITTED,0) + ISNULL(FORM26Q194IB_REMITTED,0) + ISNULL(FORM26Q194J_REMITTED,0)) + ISNULL(FORM27Q_REMITTED,0)) AS GRANDTOTAL												
		INTO #FINAL
		FROM
		COMPANYBRANCH CB WITH(NOLOCK) 
		LEFT JOIN
		#PARENTBRANCH PB ON CB.PARENTBRANCHID = PB.BRANCHID
		LEFT JOIN
		#FORM24Q_TOTALDEDUCTED F24QTD  ON CB.BRANCHID = F24QTD.BRANCHID
		LEFT JOIN
		#FORM24Q_TOTALREMITTED F24QTR ON CB.BRANCHID = F24QTR.BRANCHID
		LEFT JOIN
		#FORM26QI_TOTALDEDUCTED F26QITD  ON CB.BRANCHID = F26QITD.BRANCHID
		LEFT JOIN
		#FORM26QI_TOTALREMITTED F26QITR ON CB.BRANCHID = F26QITR.BRANCHID
		LEFT JOIN
		#FORM26Q194C_TOTALDEDUCTED F26194CTD ON CB.BRANCHID = F26194CTD.BRANCHID
		LEFT JOIN
		#FORM26Q194C_TOTALREMITTED F26194CTR ON CB.BRANCHID = F26194CTR.BRANCHID
		LEFT JOIN
		#FORM26Q194H_TOTALDEDUCTED F26194HTD ON CB.BRANCHID = F26194HTD.BRANCHID
		LEFT JOIN
		#FORM26Q194H_TOTALREMITTED F26194HTR ON CB.BRANCHID = F26194HTR.BRANCHID
		LEFT JOIN
		#FORM26Q194IA_TOTALDEDUCTED F26194IATD ON CB.BRANCHID = F26194IATD.BRANCHID
		LEFT JOIN
		#FORM26Q194IA_TOTALREMITTED F26194IATR ON CB.BRANCHID = F26194IATR.BRANCHID
		LEFT JOIN
		#FORM26Q194IB_TOTALDEDUCTED F26194IBTD ON CB.BRANCHID = F26194IBTD.BRANCHID
		LEFT JOIN
		#FORM26Q194IB_TOTALREMITTED F26194IBTR ON CB.BRANCHID = F26194IBTR.BRANCHID
		LEFT JOIN
		#FORM26Q194J_TOTALDEDUCTED F26194JTD ON CB.BRANCHID = F26194JTD.BRANCHID
		LEFT JOIN
		#FORM26Q194J_TOTALREMITTED F26194JTR ON CB.BRANCHID = F26194JTR.BRANCHID
		LEFT JOIN
		#FORM27Q_TOTALDEDUCTED F27QTD ON CB.BRANCHID = F27QTD.BRANCHID
		LEFT JOIN
		#FORM7Q_TOTALREMITTED F27QTR ON CB.BRANCHID = F27QTR.BRANCHID
	IF(@ISHO = 1)
	BEGIN
		SELECT SLNO, BRANCHCODE, BRANCHNAME, PARENTBRANCHNAME, FORM24QREMITTED, FORM26QIREMITTED, FORM26Q194CREMITTED, FORM26Q194HREMITTED, 
		FORM26Q194IAREMITTED, FORM26Q194IBREMITTED, FORM26Q194JREMITTED, FORM26QVTOTALREMITTED, FORM27QREMITTED, GRANDTOTAL FROM #FINAL
	END
	ELSE
	BEGIN
		SELECT SLNO, BRANCHCODE, BRANCHNAME, PARENTBRANCHNAME, FORM24QREMITTED, FORM26QIREMITTED, FORM26Q194CREMITTED, FORM26Q194HREMITTED, 
		FORM26Q194IAREMITTED, FORM26Q194IBREMITTED, FORM26Q194JREMITTED, FORM26QVTOTALREMITTED, FORM27QREMITTED, GRANDTOTAL FROM #FINAL WHERE PARENTBRANCHID = @BRANCHID
	END
	DROP TABLE #FORM24Q_TOTALDEDUCTED
	DROP TABLE #FORM24Q_TOTALREMITTED
	DROP TABLE #FORM26QI_TOTALDEDUCTED
	DROP TABLE #FORM26QI_TOTALREMITTED
	DROP TABLE #FORM26Q194C_TOTALDEDUCTED
	DROP TABLE #FORM26Q194C_TOTALREMITTED
	DROP TABLE #FORM26Q194H_TOTALDEDUCTED
	DROP TABLE #FORM26Q194H_TOTALREMITTED
	DROP TABLE #FORM26Q194IA_TOTALDEDUCTED
	DROP TABLE #FORM26Q194IA_TOTALREMITTED
	DROP TABLE #FORM26Q194IB_TOTALDEDUCTED
	DROP TABLE #FORM26Q194IB_TOTALREMITTED
	DROP TABLE #FORM26Q194J_TOTALDEDUCTED
	DROP TABLE #FORM26Q194J_TOTALREMITTED
	DROP TABLE #FORM27Q_TOTALDEDUCTED
	DROP TABLE #FORM7Q_TOTALREMITTED
	DROP TABLE #PARENTBRANCH
	DROP TABLE #FINAL
	DROP TABLE #DEDUCTIONDETAIL
	DROP TABLE #CHALLANDETAIL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANREPORT')
DROP PROCEDURE USP_TDS_GETCHALLANREPORT
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANREPORT] 
	@SECTION NVARCHAR(MAX),
	@FROMDATE SMALLDATETIME,
	@TODATE SMALLDATETIME
AS 
    BEGIN 
	   DECLARE @QUERY NVARCHAR(MAX);
	   SELECT * 
	   INTO #SECTIONS 
	   FROM DBO.UDF_TDS_SPLITSTRING(@SECTION, ',')
	   SELECT RB.BSRCODE, CB.BRANCHCODE, CB.BRANCHNAME, CD.BRANCHID, CD.FORMID, CD.QUARTER, CD.SERIALNO,
		  CAST(CD.SERIALNO AS VARCHAR) + ':Q' + CAST(CD.QUARTER AS VARCHAR) AS CHALLANSLNO,
		  CD.SECTIONID, CASE WHEN CD.FORMID = 4 THEN TS.TAXNAME ELSE TS.SECTIONNAME END SECTION, 
		  CD.INCOMETAX, CD.SURCHARGE, CD.EDUCATIONCESS,
		  CD.INTEREST, CD.PENALTY, CD.OTHERS, CD.CHALLANTOTAL,
		  CASE WHEN CD.MODEOFPAYMENT = 3 THEN CD.TRNVOUCHERNO ELSE CD.BANKCHALLANNO END BANKCHALLANNO,
		  CD.CHALLANPAIDDATE 
	   FROM CHALLANDETAIL CD WITH(NOLOCK) 
    		  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID = TS.SECTIONID
    		  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CD.BRANCHID = CB.BRANCHID
    		  INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID
	   WHERE CD.CHALLANPAIDDATE BETWEEN @FROMDATE AND @TODATE
		  AND CD.SECTIONID IN (SELECT * FROM #SECTIONS)
	   DROP TABLE #SECTIONS
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANS')
DROP PROCEDURE USP_TDS_GETCHALLANS
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANS]
  @BRANCHID INT,  
  @FORMID TINYINT,  
  @QUARTER TINYINT,
   @ISCHILDBRANCH BIT = 0   
AS  
BEGIN  
	DECLARE @SQLQUERY NVARCHAR(MAX);
		SET  @SQLQUERY = 'SELECT BRANCHID AS BRANCHID,CHALLANID AS CHALLANID,CHALLANDETAIL.FORMID AS FORMTYPE,[QUARTER] AS [QUARTER],ERETURNID AS ERETURNID,  
								LINKDEDCOUNT AS LINKDEDUCTIONCOUNT,ISNILCHALLAN AS ISNILLCHALLAN,ISUPDATECHALLAN AS ISUPDATECHALLAN,  
								MODEOFPAYMENT AS MODEOFPAYMENT,BANKCHALLANNO AS BANKCHALLANNUMBER,LASTBANKCHALLANNO AS LASTBANKCHALLANNUMBER,TRNVOUCHERNO AS TRANSFERVOUCHERNUMBER,  
								LASTTRNVOUCHERNO AS LASTTRANSFERVOUCHERNUMBER,CHALLANDETAIL.BANKID AS BANKID,LASTBANKID AS LASTBANKID,  
								CHALLANPAIDDATE AS CHALLANPAIDDATE,LASTCHALLANPAIDDATE AS LASTCHALLANPAIDDATE,DATEOFDEBIT AS DATEOFDEBIT,  
								CHALLANDETAIL.SECTIONID AS SECTIONID, CHALLANDETAIL.ISAUTOGENERATED, 
								CASE WHEN CHALLANDETAIL.FORMID =1 THEN TAXSECTIONS.SECTIONNAME + ''-''+ TAXSECTIONS.TAXNAME ELSE  TAXSECTIONS.SECTIONNAME END AS SECTIONNAME,          
								INCOMETAX AS INCOMETAX,SURCHARGE AS SURCHARGE,  
								EDUCATIONCESS AS EDUCATIONCESS,INTEREST AS INTEREST,OTHERS AS OTHERS,PENALTY AS PENALTY,CHALLANTOTAL AS CHALLANTOTALAMOUNT,  
								LASTCHALLANTOTAL AS LASTCHALLANTOTALAMOUNT,ISCOMPANY AS ISCOMPANY,CHEQUENO AS CHEQUENUMBER,CHEQUEDATE AS CHEQUEDATE,  
								CHEQUEDRAWNON AS CHEQUEDRAWNON,TRANREFNO AS TRANSFERREFERENCENUMBER,ISNULL(CHALLANDETAIL.SERIALNO,0) AS SERIALNUMBER,  
								REMITTINGBANK.BSRCODE AS BANKBSRCODE,ISNULL(CHALLANDETAIL.TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER,   
								CASE WHEN(LINKEDCHALLANID IS NULL) THEN ''FALSE'' ELSE ''TRUE'' END AS ISLINKED, FEE, MINORHEAD   
						 FROM   CHALLANDETAIL WITH(NOLOCK) LEFT JOIN (SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID FROM DEDCHALINK WITH(NOLOCK)) AS LINKTABLE  
								   ON CHALLANDETAIL.CHALLANID = LINKTABLE.LINKEDCHALLANID   
								INNER JOIN TAXSECTIONS WITH(NOLOCK) ON  CHALLANDETAIL.SECTIONID = TAXSECTIONS.SECTIONID  
								LEFT JOIN REMITTINGBANK WITH(NOLOCK) ON CHALLANDETAIL.BANKID=REMITTINGBANK.BANKID   
						 WHERE  BRANCHID = '+  CAST(@BRANCHID AS VARCHAR) + ' AND CHALLANDETAIL.FORMID = '+ CAST(@FORMID AS VARCHAR)+ ' AND [QUARTER] = '+ CAST(@QUARTER AS VARCHAR)
						IF(@ISCHILDBRANCH = 1)
						BEGIN
							SET @SQLQUERY = @SQLQUERY + ' AND ISNULL(CHALLANDETAIL.ISAUTOGENERATED,0) <> 1'
						END
			SET @SQLQUERY = @SQLQUERY + ' ORDER BY CHALLANDETAIL.SERIALNO' 
			--PRINT @SQLQUERY
			EXEC SP_EXECUTESQL @SQLQUERY; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallansBasedOnBranchcodeQuarter')
DROP PROCEDURE USP_TDS_GetChallansBasedOnBranchcodeQuarter
GO
CREATE PROCEDURE USP_TDS_GetChallansBasedOnBranchcodeQuarter  
@BRANCHCODES NVARCHAR(MAX),      
@QUARTER INT      
AS      
BEGIN     
 SELECT * INTO #BRANCHES FROM  dbo.UDF_TDS_SplitString(@BRANCHCODES,',')     
 SELECT BRANCHID, FORMID, QUARTER, CHALLANID, BANKCHALLANNO, BANKID, CHALLANPAIDDATE   
 INTO #CHALLANS  
 FROM CHALLANDETAIL WITH(NOLOCK)  
 WHERE QUARTER = @QUARTER  
 SELECT CD.BRANCHID, CD.FORMID, CD.QUARTER, CD.CHALLANID, CD.BANKCHALLANNO, CD.BANKID, CD.CHALLANPAIDDATE   
 FROM #CHALLANS CD WITH(NOLOCK)   
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID  
  INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE  
 WHERE CD.QUARTER = @QUARTER  
 DROP TABLE #CHALLANS  
 DROP TABLE #BRANCHES  
END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSBASEDONBRANCHFORMID')
DROP PROCEDURE USP_TDS_GETCHALLANSBASEDONBRANCHFORMID
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANSBASEDONBRANCHFORMID]
		@BRANCHID INT,
		@FORMID INT
AS
BEGIN
	SELECT BRANCHID AS BRANCHID,CHALLANID AS CHALLANID,CHALLANDETAIL.FORMID AS FORMTYPE,[QUARTER] AS [QUARTER],ERETURNID AS ERETURNID,
	       LINKDEDCOUNT AS LINKDEDUCTIONCOUNT,ISNILCHALLAN AS ISNILLCHALLAN,ISUPDATECHALLAN AS ISUPDATECHALLAN,
	       MODEOFPAYMENT AS MODEOFPAYMENT,BANKCHALLANNO AS BANKCHALLANNUMBER,LASTBANKCHALLANNO AS LASTBANKCHALLANNUMBER,TRNVOUCHERNO AS TRANSFERVOUCHERNUMBER,
	       LASTTRNVOUCHERNO AS LASTTRANSFERVOUCHERNUMBER,CHALLANDETAIL.BANKID AS BANKID,LASTBANKID AS LASTBANKID,
	       CHALLANPAIDDATE AS CHALLANPAIDDATE,LASTCHALLANPAIDDATE AS LASTCHALLANPAIDDATE,DATEOFDEBIT AS DATEOFDEBIT,
	       CHALLANDETAIL.SECTIONID AS SECTIONID,
	       TAXSECTIONS.SECTIONNAME AS SECTIONNAME,
	       INCOMETAX AS INCOMETAX,SURCHARGE AS SURCHARGE,
	       EDUCATIONCESS AS EDUCATIONCESS,INTEREST AS INTEREST,OTHERS AS OTHERS,PENALTY AS PENALTY,CHALLANTOTAL AS CHALLANTOTALAMOUNT,
	       LASTCHALLANTOTAL AS LASTCHALLANTOTALAMOUNT,ISCOMPANY AS ISCOMPANY,CHEQUENO AS CHEQUENUMBER,CHEQUEDATE AS CHEQUEDATE,
	       CHEQUEDRAWNON AS CHEQUEDRAWNON,TRANREFNO AS TRANSFERREFERENCENUMBER,ISNULL(CHALLANDETAIL.SERIALNO,'') AS SERIALNUMBER,
	       REMITTINGBANK.BSRCODE AS BANKBSRCODE,ISNULL(CHALLANDETAIL.TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER,
	       CASE WHEN(LINKEDCHALLANID IS NULL) THEN 'FALSE' ELSE 'TRUE' END AS ISLINKED
	FROM   CHALLANDETAIL WITH(NOLOCK) LEFT JOIN (SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID FROM DEDCHALINK WITH(NOLOCK)) AS LINKTABLE
           ON CHALLANDETAIL.CHALLANID = LINKTABLE.LINKEDCHALLANID
	       INNER JOIN TAXSECTIONS WITH(NOLOCK) ON  CHALLANDETAIL.SECTIONID = TAXSECTIONS.SECTIONID
	       LEFT JOIN REMITTINGBANK WITH(NOLOCK) ON CHALLANDETAIL.BANKID=REMITTINGBANK.BANKID
	WHERE BRANCHID=@BRANCHID AND CHALLANDETAIL.FORMID=@FORMID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSBASEDONSECTIONBRANCHID')
DROP PROCEDURE USP_TDS_GETCHALLANSBASEDONSECTIONBRANCHID
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANSBASEDONSECTIONBRANCHID]
	@BRANCHID INT,
	@FORMID INT,
	@SECTIONID INT
AS
BEGIN
	SELECT BRANCHID AS BRANCHID,CHALLANID AS CHALLANID,CHALLANDETAIL.FORMID AS FORMTYPE,[QUARTER] AS [QUARTER],ERETURNID AS ERETURNID,
	       LINKDEDCOUNT AS LINKDEDUCTIONCOUNT,ISNILCHALLAN AS ISNILLCHALLAN,ISUPDATECHALLAN AS ISUPDATECHALLAN,
	       MODEOFPAYMENT AS MODEOFPAYMENT,BANKCHALLANNO AS BANKCHALLANNUMBER,LASTBANKCHALLANNO AS LASTBANKCHALLANNUMBER,TRNVOUCHERNO AS TRANSFERVOUCHERNUMBER,
	       LASTTRNVOUCHERNO AS LASTTRANSFERVOUCHERNUMBER,CHALLANDETAIL.BANKID AS BANKID,LASTBANKID AS LASTBANKID,
	       CHALLANPAIDDATE AS CHALLANPAIDDATE,LASTCHALLANPAIDDATE AS LASTCHALLANPAIDDATE,DATEOFDEBIT AS DATEOFDEBIT,
	       CHALLANDETAIL.SECTIONID AS SECTIONID,
	       TAXSECTIONS.SECTIONNAME AS SECTIONNAME,
	       INCOMETAX AS INCOMETAX,SURCHARGE AS SURCHARGE,
	       EDUCATIONCESS AS EDUCATIONCESS,INTEREST AS INTEREST,OTHERS AS OTHERS,PENALTY AS PENALTY,CHALLANTOTAL AS CHALLANTOTALAMOUNT,
	       LASTCHALLANTOTAL AS LASTCHALLANTOTALAMOUNT,ISCOMPANY AS ISCOMPANY,CHEQUENO AS CHEQUENUMBER,CHEQUEDATE AS CHEQUEDATE,
	       CHEQUEDRAWNON AS CHEQUEDRAWNON,TRANREFNO AS TRANSFERREFERENCENUMBER,ISNULL(CHALLANDETAIL.SERIALNO,'') AS SERIALNUMBER,
	        REMITTINGBANK.BSRCODE AS BANKBSRCODE,ISNULL(CHALLANDETAIL.TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER,
	       CASE WHEN(LINKEDCHALLANID IS NULL) THEN 'FALSE' ELSE 'TRUE' END AS ISLINKED
	FROM   CHALLANDETAILWITH(NOLOCK) LEFT JOIN (SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID FROM DEDCHALINK WITH(NOLOCK)) AS LINKTABLE
           ON CHALLANDETAIL.CHALLANID = LINKTABLE.LINKEDCHALLANID
           INNER JOIN TAXSECTIONS WITH(NOLOCK) ON  CHALLANDETAIL.SECTIONID = TAXSECTIONS.SECTIONID
           LEFT JOIN REMITTINGBANK WITH(NOLOCK)  ON CHALLANDETAIL.BANKID=REMITTINGBANK.BANKID
	WHERE  CHALLANDETAIL.SECTIONID=@SECTIONID AND BRANCHID=@BRANCHID AND DBO.CHALLANDETAIL.FORMID=@FORMID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallansCountForBulkDelete')
DROP PROCEDURE USP_TDS_GetChallansCountForBulkDelete
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetChallansCountForBulkDelete]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTION INT =-1,
	@MONTH INT =-1
AS
	BEGIN
	 DECLARE @SQLQUERY NVARCHAR(MAX);      
     SET @SQLQUERY = 'SELECT COUNT(CD.CHALLANID) AS CHALLANSCOUNT		
		FROM   CHALLANDETAIL CD WITH(NOLOCK) LEFT JOIN (
												SELECT DISTINCT CHALLANID FROM DEDCHALINK DCL WITH(NOLOCK) INNER JOIN 
												(
													SELECT DD.DEDUCTIONID FROM PARTPAYMENTDETAILS PPD WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID AND PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER
													WHERE  PPD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR(10))+' AND PPD.FORMID = '+CAST(@FORMID AS VARCHAR(2))+ ' AND PPD.QUARTER = '+CAST(@QUARTER AS VARCHAR(2))+'
												) DD ON DCL.DEDUCTIONID = DD.DEDUCTIONID
												WHERE DCL.BRANCHID = '+CAST(@BRANCHID AS VARCHAR(10))+') CHD ON CD.CHALLANID = CHD.CHALLANID
		WHERE CD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR(10))+' AND CD.FORMID = '+CAST(@FORMID AS VARCHAR(2))+ ' AND CD.QUARTER = '+CAST(@QUARTER AS VARCHAR(2));
		IF(@SECTION<>-1)      
			BEGIN      
				SET @SQLQUERY = @SQLQUERY + ' AND CD.SECTIONID='+CAST(@SECTION AS VARCHAR(2));      
			END
		IF(@MONTH<>-1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND MONTH(CD.CHALLANPAIDDATE) = '+ CAST(@MONTH AS VARCHAR)
			END 
	EXECUTE SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSERIALNO')
DROP PROCEDURE USP_TDS_GETCHALLANSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANSERIALNO]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @SECTIONID INT
AS
BEGIN
SELECT SERIALNO,CHALLANID
       FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND SECTIONID = @SECTIONID
       END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSERIALNO_CORRECTION')
DROP PROCEDURE USP_TDS_GETCHALLANSERIALNO_CORRECTION
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETCHALLANSERIALNO_CORRECTION]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT
AS
BEGIN
SELECT SERIALNO,CHALLANID
       FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
       END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallansForBulkDelete')
DROP PROCEDURE USP_TDS_GetChallansForBulkDelete
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetChallansForBulkDelete]
	@PAGEINDEX INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTION INT =-1,
	@MONTH INT =-1
AS
	BEGIN
		/* The number of rows affected by the different commands does not interest the application, so turn NOCOUNT ON*/
		SET NOCOUNT ON
		/* Determine the first record and last record */
		DECLARE @FIRSTREC INT, @LASTREC INT, @SQLQUERY NVARCHAR(MAX)
		SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE;
		SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);
		SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER(ORDER BY CD.CHALLANID) as RowNum,
				   CD.BRANCHID,CD.FORMID,CD.[QUARTER],CD.CHALLANID,CD.ERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,CD.MODEOFPAYMENT,CD.BANKCHALLANNO,
				   CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,
				   CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CD.INTEREST,CD.OTHERS,CD.PENALTY,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,CD.ISCOMPANY,
				   CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.SERIALNO,
				   ISNULL(CD.TVRECEIPTNUMBER,'''') TVRECEIPTNUMBER,
				   TS.TAXNAME AS SECTIONNAME,
				   RB.BSRCODE,
				   CASE WHEN CHD.CHALLANID IS NULL THEN 0 ELSE 1 END AS ISLINKED,
				   CASE WHEN CHD.CHALLANID IS NULL THEN 0 ELSE 1 END HASPARTPAYMENT	
				   INTO #TEMP			   
			FROM  CHALLANDETAIL CD WITH(NOLOCK) 
			LEFT JOIN 
			(
						SELECT DISTINCT CHALLANID FROM DEDCHALINK DCL WITH(NOLOCK) INNER JOIN 
						(
							SELECT DD.DEDUCTIONID FROM PARTPAYMENTDETAILS PPD 
							INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID AND PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER
						   WHERE  PPD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + ' AND PPD.FORMID = '+ CAST(@FORMID AS VARCHAR) + ' AND PPD.QUARTER = '+ CAST(@QUARTER AS VARCHAR) + '
						) DD ON DCL.DEDUCTIONID = DD.DEDUCTIONID
					 WHERE DCL.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + '
			) CHD ON CD.CHALLANID = CHD.CHALLANID
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID = TS.SECTIONID
			LEFT JOIN REMITTINGBANK RB ON CD.BANKID = RB.BANKID
			WHERE CD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + ' AND CD.FORMID = '+ CAST(@FORMID AS VARCHAR) + 'AND CD.QUARTER = '+ CAST(@QUARTER AS VARCHAR)
		IF(@SECTION <> -1)
		 BEGIN
			SET @SQLQUERY = @SQLQUERY + ' AND CD.SECTIONID = '+ CAST(@SECTION AS VARCHAR)
		 END 
	    IF(@MONTH<>-1)
		 BEGIN
			SET @SQLQUERY = @SQLQUERY + ' AND MONTH(CD.CHALLANPAIDDATE) = '+ CAST(@MONTH AS VARCHAR)
		 END 
       SET @SQLQUERY = @SQLQUERY + '; SELECT * FROM #TEMP 
			WHERE RowNum > '+ CAST(@FirstRec AS VARCHAR) + ' AND RowNum < '+ CAST(@LastRec AS VARCHAR)	
		EXEC SP_EXECUTESQL @SQLQUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSFORDQR')
DROP PROCEDURE USP_TDS_GETCHALLANSFORDQR
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANSFORDQR]
(
@BRANCHID INT,
@FORMID TINYINT,
@QUARTER TINYINT
)
AS
BEGIN
SELECT TAX.SECTIONNAME,TAX.TAXNAME ,C.CHALLANTOTAL,C.SERIALNO,C.BANKCHALLANNO,C.CHALLANPAIDDATE,RM.BSRCODE,ISNULL(C.CINSTATUS,'') AS CINSTATUS  FROM CHALLANDETAIL  C INNER JOIN TAXSECTIONS TAX WITH(NOLOCK)
ON C.SECTIONID=TAX.SECTIONID AND C.FORMID=TAX.FORMID INNER JOIN REMITTINGBANK RM WITH(NOLOCK)
ON RM.BANKID=C.BANKID
WHERE C.BRANCHID=@BRANCHID AND C.FORMID=@FORMID AND C.QUARTER=@QUARTER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSLNOS')
DROP PROCEDURE USP_TDS_GETCHALLANSLNOS
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANSLNOS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT
AS
	BEGIN
		SELECT CCD.CHALLANSERIALNO,CCD.BRANCHID,CCD.FORMID,CCD.[QUARTER],ISNULL(CCD.CHALLANID,-1) AS CHALLANID,CCD.CHALLANERETURNID,CCD.LINKDEDCOUNT,CCD.ISNILCHALLAN,CCD.ISUPDATECHALLAN,
			   CCD.MODEOFPAYMENT,CCD.BANKCHALLANNO,CCD.LASTBANKCHALLANNO,CCD.TRNVOUCHERNO,CCD.LASTTRNVOUCHERNO,CCD.BANKID,CCD.LASTBANKID,CCD.CHALLANPAIDDATE,CCD.LASTCHALLANPAIDDATE,CCD.DATEOFDEBIT,
			   CCD.SECTIONID,CCD.INCOMETAX,CCD.SURCHARGE,CCD.EDUCATIONCESS,CCD.INTEREST,CCD.PENALTY,CCD.OTHERS,CCD.CHALLANTOTAL,CCD.LASTCHALLANTOTAL,ISNULL(CCD.ISCOMPANY,1) AS ISCOMPANY,
			   CCD.CHEQUENO,CCD.CHEQUEDATE,CCD.CHEQUEDRAWNON,CCD.TRANREFNO,CCD.CORRECTIONSTATUS,CCD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,
			   ISNULL(RB.BSRCODE,'') AS BSRCODE, ISNULL(RBLAST.BSRCODE,'') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,CASE WHEN(CCD.CHALLANSERIALNO IS NULL) THEN 'FALSE' ELSE 'TRUE' END AS  ISLINKED,
			   ISNULL(CCD.TVRECEIPTNUMBER,'') TVRECEIPTNUMBER,CCD.CHALLANEDITMODE, CCD.EXPECTEDDID
		FROM  (SELECT CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],ISNULL(CHALLANID,-1) AS CHALLANID,CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,
					  MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,ISNULL(BANKID,-1) BANKID,ISNULL(LASTBANKID,-1) LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,
					  SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,ISNULL(ISCOMPANY,1) AS ISCOMPANY,
					  CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TRANREFNO,TVRECEIPTNUMBER,CORRECTIONSTATUS,CORRECTIONSTATUS AS CURRENTCORRSTATUS,ISNULL(CHALLANEDITMODE,'') AS CHALLANEDITMODE, EXPECTEDDID
			   FROM   CORRCHALLANDETAIL WITH(NOLOCK)
			   WHERE  CORRECTIONSTATUS = 1 AND CHALLANSERIALNO NOT IN (SELECT CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE CORRECTIONSTATUS <> 1 AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND SECTIONID = @SECTIONID) AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND SECTIONID = @SECTIONID
			   UNION
			   SELECT CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],ISNULL(CHALLANID,-1) AS CHALLANID,CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,
					  MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,
					  SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,ISNULL(ISCOMPANY,1) AS ISCOMPANY,
					  CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TRANREFNO,TVRECEIPTNUMBER,CORRECTIONSTATUS,CORRECTIONSTATUS AS CURRENTCORRSTATUS,ISNULL(CHALLANEDITMODE,'') AS CHALLANEDITMODE,EXPECTEDDID
			   FROM   CORRCHALLANDETAIL WITH(NOLOCK)
			   WHERE  CORRECTIONSTATUS <> 1 AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND SECTIONID = @SECTIONID) CCD
			   LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CCD.BANKID=RB.BANKID
			   LEFT JOIN REMITTINGBANK RBLAST WITH(NOLOCK) ON CCD.LASTBANKID = RBLAST.BANKID
			   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CCD.SECTIONID=TS.SECTIONID
		WHERE  CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.[QUARTER] = @QUARTER AND CCD.SECTIONID = @SECTIONID AND CCD.CHALLANTOTAL > 0;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanSlNosForAutoComplete')
DROP PROCEDURE USP_TDS_GetChallanSlNosForAutoComplete
GO
CREATE PROCEDURE USP_TDS_GetChallanSlNosForAutoComplete --USP_TDS_GetChallanSlNosForAutoComplete 2387,2,1,3,2,10
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @SECTIONID INT,    
 @PREFIXTEXT NVARCHAR(MAX),    
 @COUNT INT    
AS    
 BEGIN    
  DECLARE @QUERY NVARCHAR(MAX);
  SET @QUERY = 'SELECT TOP ' + CAST(@COUNT AS VARCHAR) + ' SERIALNO,CHALLANID,
					 CASE WHEN MODEOFPAYMENT <> 3 
							THEN BANKCHALLANNO 
						  ELSE TRNVOUCHERNO 
						  END AS CHALLANNO,
					 FEE, MINORHEAD,
					 CONVERT(VARCHAR(10),CHALLANPAIDDATE,103) AS CHALLANPAIDDATE,
					 INCOMETAX,SURCHARGE,EDUCATIONCESS, 
					 ISCOMPANY AS CODE,CHALLANTOTAL,
					 ISNULL(ISAUTOGENERATED,0) ISAUTOGENERATED  
				FROM CHALLANDETAIL WITH(NOLOCK) 
				WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
					AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
					AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) 
					--+ ' AND SECTIONID = ' + CAST(CASE WHEN @SECTIONID IN(23,24) THEN 15 ELSE @SECTIONID END AS VARCHAR);    
  IF @PREFIXTEXT <> ''    
   BEGIN    
    SET @QUERY = @QUERY + ' AND SERIALNO LIKE ''' + @PREFIXTEXT + '%''';
   END    
  -- PRINT @QUERY  
  EXEC SP_EXECUTESQL @QUERY;       
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSLNOSFORREPORTS')
DROP PROCEDURE USP_TDS_GETCHALLANSLNOSFORREPORTS
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANSLNOSFORREPORTS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT SERIALNO FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSPAGED')
DROP PROCEDURE USP_TDS_GETCHALLANSPAGED
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetChallansPaged]
 @StartRow INT,      
 @PageSize INT,      
 @BRANCHID INT,      
 @FORMID INT,       
 @QUARTER INT,      
 @SECTIONID INT=NULL,      
 @MODEOFPAYMENT INT=NULL,      
 @ITFRM NUMERIC(13,2)=NULL,      
 @ITTO NUMERIC(13,2)=NULL,      
 @SURCHARGEFRM NUMERIC(13,2)=NULL,      
 @SURCHARGETO NUMERIC(13,2)=NULL,      
 @EDUCESSFRM NUMERIC(13,2)=NULL,      
 @EDUCESSTO NUMERIC(13,2)=NULL,      
 @CHALLANDATEFRM SMALLDATETIME=NULL,      
 @CHALLANDATETO SMALLDATETIME=NULL ,
 @FEE NUMERIC(14,2) = NULL,
 @MINORHEAD INT = NULL      
AS      
 BEGIN        
  SET NOCOUNT ON      
  /* Determine the first record and last record */        
  DECLARE @FirstRec int, @LastRec int      
  DECLARE @SQLQUERY NVARCHAR(MAX);   
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE      
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);   
  SELECT BRANCHID, FORMID, QUARTER, SERIALNO AS SERIALNUMBER, CHALLANID, ERETURNID, ISNILCHALLAN AS ISNILLCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT, 
		     BANKCHALLANNO AS BANKCHALLANNUMBER, LASTBANKCHALLANNO AS LASTBANKCHALLANNUMBER,TRNVOUCHERNO AS TRANSFERVOUCHERNUMBER,
			 LASTTRNVOUCHERNO AS LASTTRANSFERVOUCHERNUMBER,BANKID, LASTBANKID, CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX,SURCHARGE,EDUCATIONCESS,
			 INTEREST, OTHERS, PENALTY, CHALLANTOTAL AS CHALLANTOTALAMOUNT,LASTCHALLANTOTAL AS LASTCHALLANTOTALAMOUNT, ISCOMPANY, CHEQUENO AS CHEQUENUMBER,
			 CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, ISNULL(TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER, ISNULL(MINORHEAD,-1)MINORHEAD,ISNULL(FEE, 0) FEE, 
			 LINKDEDCOUNT AS LINKDEDUCTIONCOUNT,ISNULL(CINSTATUS,'') AS CINSTATUS, 0 AS EXCLUDEDAMOUNT
	INTO #CHALLAN
	FROM CHALLANDETAIL WITH(NOLOCK)
  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
  SELECT CD.CHALLANID, CASE WHEN DL.CHALLANID IS NULL THEN 'FALSE' ELSE 'TRUE' END AS ISLINKED 
  INTO #DEDLINK 
  FROM CHALLANDETAIL CD WITH(NOLOCK)
  LEFT JOIN DEDCHALINK DL ON CD.CHALLANID = DL.CHALLANID
  WHERE CD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
   GROUP BY CD.CHALLANID, DL.CHALLANID
  SET @SQLQUERY='SELECT  ROWNUM = IDENTITY(INT,1,1) ,BRANCHID,CD.CHALLANID,CD.FORMID AS FORMTYPE,QUARTER, ERETURNID, CD.ISNILLCHALLAN, ISUPDATECHALLAN,      
									MODEOFPAYMENT,BANKCHALLANNUMBER,LASTBANKCHALLANNUMBER,TRANSFERVOUCHERNUMBER,LASTTRANSFERVOUCHERNUMBER,CD.BANKID, 
									LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE , DATEOFDEBIT,CD.SECTIONID,SECTIONNAME,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									INTEREST,OTHERS,PENALTY, CHALLANTOTALAMOUNT,LASTCHALLANTOTALAMOUNT,ISCOMPANY,CHEQUENUMBER, CHEQUEDATE,      
									CHEQUEDRAWNON,TRANREFNO AS TRANSFERREFERENCENUMBER, CD.SERIALNUMBER, BSRCODE AS BANKBSRCODE, TVRECEIPTNUMBER, CINSTATUS, 0 AS TOTALDEDUCTED, 
									ISLINKED, FEE, MINORHEAD,LINKDEDUCTIONCOUNT,EXCLUDEDAMOUNT
        INTO #TEMP      
        FROM #CHALLAN CD
        INNER JOIN  #DEDLINK DL ON DL.CHALLANID = CD.CHALLANID
        INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON  CD.SECTIONID = TS.SECTIONID       
        LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID       
        WHERE CD.BRANCHID='+CAST(@BRANCHID AS VARCHAR(10)) + ' AND CD.FORMID='+CAST(@FORMID AS VARCHAR(2))+ ' AND CD.[QUARTER]='+CAST(@QUARTER AS VARCHAR(2))      
  IF(@SECTIONID IS NOT NULL)      
   BEGIN      
    SET @SQLQUERY=@SQLQUERY+' AND CD.SECTIONID='+CAST(@SECTIONID AS VARCHAR(2));      
   END            
  IF(@MODEOFPAYMENT IS NOT NULL)      
   BEGIN      
    SET @SQLQUERY=@SQLQUERY+' AND CD.[MODEOFPAYMENT]='+CAST(@MODEOFPAYMENT AS VARCHAR(2));      
   END      
  IF(@ITFRM IS NOT NULL OR @ITTO IS NOT NULL)      
   BEGIN      
    SET @SQLQUERY=@SQLQUERY+' AND CD.[INCOMETAX] BETWEEN '+CAST(ISNULL(@ITFRM,0) AS VARCHAR)+' AND '+CAST(ISNULL(@ITTO,0) AS VARCHAR)      
   END      
  IF(@SURCHARGEFRM IS NOT NULL OR @SURCHARGETO IS NOT NULL)      
   BEGIN      
    SET @SQLQUERY=@SQLQUERY+' AND CD.[SURCHARGE] BETWEEN '+CAST(ISNULL(@SURCHARGEFRM,0) AS VARCHAR)+' AND '+CAST(ISNULL(@SURCHARGETO,0) AS VARCHAR)      
   END      
  IF(@EDUCESSFRM IS NOT NULL OR @EDUCESSTO IS NOT NULL)      
   BEGIN      
    SET @SQLQUERY=@SQLQUERY+' AND CD.[EDUCATIONCESS] BETWEEN '+CAST(ISNULL(@EDUCESSFRM,0) AS VARCHAR)+' AND '+CAST(ISNULL(@EDUCESSTO,0) AS VARCHAR)      
   END      
  IF(@CHALLANDATEFRM IS NOT NULL OR @CHALLANDATETO IS NOT NULL)   
  BEGIN      
    SET @SQLQUERY=@SQLQUERY+' AND CD.[CHALLANPAIDDATE] BETWEEN '''+CAST(@CHALLANDATEFRM AS VARCHAR)+''' AND '''+CAST(@CHALLANDATETO AS VARCHAR)+''''      
   END        
  SET @SQLQUERY = @SQLQUERY + ';ALTER TABLE #TEMP ADD PRIMARY KEY (ROWNUM ); 
							 SELECT * FROM #TEMP WHERE ROWNUM > '+CAST(@FIRSTREC AS VARCHAR(10))+ ' AND ROWNUM < '+CAST(@LASTREC AS VARCHAR(10));      
  EXEC SP_EXECUTESQL @SQLQUERY        
 --PRINT @SQLQUERY 
  /* Turn NOCOUNT back OFF */      
  SET NOCOUNT OFF         
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallansToMatch')
DROP PROCEDURE USP_TDS_GetChallansToMatch
GO
CREATE PROCEDURE [USP_TDS_GetChallansToMatch]
	@PAGEINDEX INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@CHALLANSLNO INT
AS
	BEGIN
		/* Determine the first record and last record */
		DECLARE @FIRSTREC INT, @LASTREC INT;
		SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE;
		SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);		
		WITH TempResult AS
		(
			SELECT ROW_NUMBER() OVER (ORDER BY CD.CHALLANID) AS RowNum,CD.BRANCHID,CD.FORMID,CD.[QUARTER],CD.CHALLANID,CD.ERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,CD.MODEOFPAYMENT,
				   CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO ,CD.LASTTRNVOUCHERNO,CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,
				   CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,TS.SECTIONNAME,CD.INCOMETAX ,CD.SURCHARGE,CD.EDUCATIONCESS,CD.INTEREST,
				   CD.OTHERS,CD.PENALTY,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,CD.ISCOMPANY,CD.CHEQUENO ,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO ,CD.SERIALNO,RB.BSRCODE,
				   CASE WHEN(LT.LINKEDCHALLANID IS NULL) THEN 'False' ELSE 'True' END AS IsLinked 
			FROM   CHALLANDETAIL  CD WITH(NOLOCK) LEFT JOIN (SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID FROM DEDCHALINK) AS LT ON CD.CHALLANID = LT.LINKEDCHALLANID 
									INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON  CD.SECTIONID = TS.SECTIONID
									LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID 
			WHERE  CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.SECTIONID = @SECTIONID
										   AND CD.CHALLANID NOT IN (SELECT ISNULL(CHALLANID,MATCHEDID) 
																	FROM   CORRCHALLANDETAIL WITH(NOLOCK)
																	WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 2 AND (CHALLANID IS NOT NULL OR MATCHEDID IS NOT NULL ) AND CHALLANSERIALNO <> @CHALLANSLNO)
		)
		SELECT TOP (@LASTREC-1) *
		FROM TempResult
		WHERE RowNum > @FIRSTREC 
		AND RowNum < @LASTREC
		/* Turn NOCOUNT back OFF */
		SET NOCOUNT OFF				
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSTOMATCHCOUNT')
DROP PROCEDURE USP_TDS_GETCHALLANSTOMATCHCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANSTOMATCHCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@CHALLANSERIALNO INT
AS
	BEGIN
		SELECT COUNT(CD.CHALLANID) AS CHALLANSTOMATCHCOUNT
		FROM   CHALLANDETAIL CD WITH(NOLOCK) LEFT JOIN (SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID FROM DEDCHALINK) AS LT ON CD.CHALLANID = LT.LINKEDCHALLANID
								INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON  CD.SECTIONID = TS.SECTIONID
								LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID
		WHERE  CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID
		AND CD.SECTIONID = @SECTIONID AND CD.CHALLANID NOT IN (SELECT ISNULL(CHALLANID,MATCHEDID) FROM CORRCHALLANDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 2 AND (CHALLANID IS NOT NULL OR MATCHEDID IS NOT NULL ) AND CHALLANSERIALNO <> @CHALLANSERIALNO)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANSTOUPDATECOUNT')
DROP PROCEDURE USP_TDS_GETCHALLANSTOUPDATECOUNT
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANSTOUPDATECOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SHOWONLYUNMATCHEDDETAILS BIT
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);	
		SET @QUERY = 'SELECT COUNT(C.CHALLANSERIALNO) CHALLANCOUNT FROM CORRCHALLANDETAIL C WITH(NOLOCK) LEFT JOIN CHALLANDETAIL O WITH(NOLOCK) ON (C.MATCHEDID = O.CHALLANID OR C.CHALLANID = O.CHALLANID) AND C.FORMID = O.FORMID AND C.QUARTER = O.QUARTER
																					  LEFT JOIN TAXSECTIONS TSC WITH(NOLOCK) ON C.SECTIONID = TSC.SECTIONID
																					  LEFT JOIN TAXSECTIONS TSO WITH(NOLOCK) ON O.SECTIONID = TSO.SECTIONID
					  WHERE   C.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + 'AND C.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND C.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + 'AND C.ISNILCHALLAN = ''N'' AND C.CORRECTIONSTATUS NOT IN (1,7)';
		IF @SHOWONLYUNMATCHEDDETAILS = 1
			BEGIN
				SET @QUERY = @QUERY + '  AND ((O.CHALLANID IS NULL OR O.CHALLANID = 0) OR  C.MATCHEDID IS NOT NULL)';
			END
		EXEC SP_EXECUTESQL @QUERY;
		--PRINT @QUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANTOTAL')
DROP PROCEDURE USP_TDS_GETCHALLANTOTAL
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANTOTAL]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
   BEGIN
   DECLARE @TEMP TABLE(CHALLANTOTAL NUMERIC(13,2));
INSERT INTO @TEMP
SELECT  ISNULL(CD.CHALLANTOTAL,0) FROM CHALLANDETAIL CD WITH(NOLOCK)
       INNER JOIN
       (
        SELECT DISTINCT CHALLANID FROM DEDCHALINK DL WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID=DL.DEDUCTIONID WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
       )
       DL
       ON
       DL.CHALLANID=CD.CHALLANID
INSERT INTO @TEMP
SELECT ISNULL(CHALLANTOTAL,0) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND CHALLANID NOT IN(SELECT DISTINCT CHALLANID FROM DEDCHALINK WHERE BRANCHID=@BRANCHID)
INSERT INTO @TEMP
SELECT ISNULL(CD.CHALLANTOTAL,0) FROM CHALLANDETAIL CD
     INNER JOIN
     (
      SELECT DISTINCT CHALLANID FROM DEDCHALINK DL WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID=DL.DEDUCTIONID WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID
     )
     DL
     ON
     DL.CHALLANID=CD.CHALLANID AND
     CD.QUARTER=@QUARTER AND CD.CHALLANID NOT IN
     (
      SELECT DISTINCT CHALLANID FROM DEDCHALINK DL WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND QUARTER=@QUARTER
     )
       WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID
        SELECT  ISNULL(SUM(CHALLANTOTAL),0) FROM @TEMP;
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHALLANTRANSACTIONDETAIL')
DROP PROCEDURE USP_TDS_GETCHALLANTRANSACTIONDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETCHALLANTRANSACTIONDETAIL]
@CHALLANPAIDDATE SMALLDATETIME
AS
  BEGIN
 SELECT DISTINCT CB.BRANCHNAME + ' (' + CB.BRANCHCODE +')' AS BRANCH, CD.CHALLANID, BANKCHALLANNO, RB.BSRCODE,
     CD.CHALLANTOTAL, TS.DESCRIPTION + ' - '+ TS.SECTIONNAME AS SECTION,CD.TRANSACTIONNO,CD.TRANSACTIONDATE,
     CD.CHALLANPAIDDATE FROM CHALLANDETAIL CD WITH(NOLOCK)
  INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
  INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
  INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID = CD.BANKID
  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = CD.SECTIONID
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID
  WHERE CD.ISAUTOGENERATED = 1 AND CD.ISOLTASINCLUDED = 1 AND ISTTUMINCLUDED = 1 AND CAST(CONVERT(VARCHAR(24),CHALLANPAIDDATE,101) AS SMALLDATETIME) = @CHALLANPAIDDATE
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChallanUpdate')
DROP PROCEDURE USP_TDS_GetChallanUpdate
GO
CREATE PROCEDURE [USP_TDS_GetChallanUpdate]
 @PAGEINDEX INT,  
 @PAGESIZE INT,  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @SHOWONLYUNMATCHEDDETAILS BIT  
AS  
 BEGIN  
  /* Determine the first record and last record */  
  DECLARE @FIRSTREC INT, @LASTREC INT;  
  DECLARE @QUERY NVARCHAR(MAX);    
  SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE  
  SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);  
  SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #CHALLANS FROM  
       (  
       SELECT  C.CHALLANSERIALNO,C.CHALLANID,C.BANKCHALLANNO,C.CHALLANPAIDDATE,CD.SECTIONID, C.SECTIONID NEWSECTIONID,TSC.SECTIONNAME,C.INCOMETAX,C.SURCHARGE,  
         C.EDUCATIONCESS,C.INTEREST,C.PENALTY,C.OTHERS,C.CHALLANTOTAL,C.CORRECTIONSTATUS,C.MATCHEDID,O.SERIALNO OSERIALNO,O.CHALLANID OCHALLANID,  
         O.BANKCHALLANNO OBANKCHALLANNO,O.CHALLANPAIDDATE OCHALLANPAIDDATE,TSO.SECTIONNAME OSECTIONNAME,O.INCOMETAX OINCOMETAX,  
         O.SURCHARGE OSURCHARGE,O.EDUCATIONCESS OEDUCATIONCESS,O.INTEREST OINTEREST,O.PENALTY OPENALTY,O.OTHERS OOTHERS,  
         O.CHALLANTOTAL OCHALLANTOTAL, ISNULL(C.ISONLINECHALLAN,0)ISONLINECHALLAN  
         FROM   CORRCHALLANDETAIL C WITH(NOLOCK) 
         LEFT JOIN CHALLANDETAIL O ON (C.MATCHEDID = O.CHALLANID OR C.CHALLANID = O.CHALLANID) AND C.FORMID = O.FORMID   
              LEFT JOIN TAXSECTIONS TSC WITH(NOLOCK) ON C.SECTIONID = TSC.SECTIONID  
              LEFT JOIN TAXSECTIONS TSO WITH(NOLOCK) ON O.SECTIONID = TSO.SECTIONID  
              LEFT JOIN CORRCHALLANDETAIL CD WITH(NOLOCK) ON C.CHALLANSERIALNO = CD.CHALLANSERIALNO AND C.BRANCHID = CD.BRANCHID AND C.FORMID = CD.FORMID AND C.QUARTER = CD.QUARTER AND CD.CORRECTIONSTATUS = 1  
       WHERE   C.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + 'AND C.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND C.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND C.ISNILCHALLAN = ''N'' AND C.CORRECTIONSTATUS NOT IN (1,7)'; /* AND C.ISUPDATECHALLAN = 1';*/  
  IF @SHOWONLYUNMATCHEDDETAILS = 1  
   BEGIN  
    SET @QUERY = @QUERY + '  AND C.CORRECTIONSTATUS NOT IN (5,7) AND ((O.CHALLANID IS NULL OR O.CHALLANID = 0) OR  C.MATCHEDID IS NOT NULL)';  
   END  
  SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #CHALLANS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);  
  EXEC SP_EXECUTESQL @QUERY;    
 --PRINT @QUERY 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChapterVIA')
DROP PROCEDURE USP_TDS_GetChapterVIA
GO
CREATE PROCEDURE USP_TDS_GetChapterVIA
@COMID INT,
@BRANCHID INT,
@FINYEAR INT
AS                
  BEGIN         
    DECLARE @TOT TABLE (ID INT, GROSS NUMERIC(13,2), QUALIFYING NUMERIC(13,2), ISORIGINAL BIT);    
	 INSERT INTO @TOT    
	 EXEC USP_TDS_GETACTUAL80CVALUES @COMID, @BRANCHID   
	 SELECT CHAPTERVIADETAILID, SALARYSECTIONID, ISNULL(GROSSAMOUNT,0)GROSSAMOUNT, ISNULL(QUALIFYINGAMOUNT,0)QUALIFYINGAMOUNT       
	 INTO #CHAPTERVIA
	 FROM
	  (      
	  SELECT CHAPTERVIADETAILID, SALARYSECTIONID, SUM(GROSSAMOUNT)GROSSAMOUNT, SUM(QUALIFYINGAMOUNT)QUALIFYINGAMOUNT FROM      
	  (      
	   SELECT -1 AS CHAPTERVIADETAILID, 5 AS SALARYSECTIONID, CASE WHEN SALARYSECTIONID = 20 THEN GROSSAMOUNT ELSE 0 END AS GROSSAMOUNT,      
		 CASE WHEN SALARYSECTIONID = 21 THEN QUALIFYINGAMOUNT ELSE 0 END AS QUALIFYINGAMOUNT      
	   FROM CHAPTERVIADET WITH (NOLOCK) WHERE COMID = @COMID AND SALARYSECTIONID IN (20 ,21)
	  )AA
	   GROUP BY CHAPTERVIADETAILID, SALARYSECTIONID    
	   )T      
   SELECT MAX(A.CHAPTERVIADETAILID)CHAPTERVIADETAILID, A.SALARYSECTIONID, 
		 SUM(ISNULL(A.GROSSAMOUNT,0))  GROSSAMOUNT,     
		 CASE WHEN A.SALARYSECTIONID = 3 THEN 
		     CASE WHEN @FINYEAR > 2013 THEN  
				CASE WHEN SUM(ISNULL(A.QUALIFYINGAMOUNT,0)) > 150000 THEN 150000 
				 ELSE SUM(ISNULL(A.QUALIFYINGAMOUNT,0)) END 
			 ELSE 
				 CASE WHEN SUM(ISNULL(A.QUALIFYINGAMOUNT,0)) > 100000 THEN 100000 
				 ELSE SUM(ISNULL(A.QUALIFYINGAMOUNT,0)) END
			 END
		 ELSE SUM(ISNULL(A.QUALIFYINGAMOUNT,0)) END AS QUALIFYINGAMOUNT, A.CONDI
    FROM
    (
		SELECT CHAPTERVIADETAILID, CASE WHEN SALARYSECTIONID = 6 AND ISSELF = 1 THEN 61          
										WHEN SALARYSECTIONID = 6 AND ISSELF = 0 THEN 62
										WHEN SALARYSECTIONID = 25 AND ISSELF = 1 THEN 201
										WHEN SALARYSECTIONID = 25 AND ISSELF = 0 THEN 202
										ELSE SALARYSECTIONID 
								   END AS SALARYSECTIONID,          
			GROSSAMOUNT,QUALIFYINGAMOUNT, ISNULL(CONDI,0)CONDI             
		FROM CHAPTERVIADET WITH (NOLOCK) WHERE COMID = @COMID AND SALARYSECTIONID NOT IN (20,21,3)
		UNION      
	   SELECT CHAPTERVIADETAILID, SALARYSECTIONID, GROSSAMOUNT, QUALIFYINGAMOUNT , 0 AS CONDI FROM #CHAPTERVIA    
		UNION    
	   SELECT -1, 3, SUM(GROSS)GROSSAMT, SUM(QUALIFYING)QUALIFYINGAMT, 0 FROM @TOT 
    )A    
    GROUP BY A.SALARYSECTIONID ,A.CONDI 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHAPTERVIABASEDONREFERENCEANDBRANCH')
DROP PROCEDURE USP_TDS_GETCHAPTERVIABASEDONREFERENCEANDBRANCH
GO
create PROCEDURE USP_TDS_GETCHAPTERVIABASEDONREFERENCEANDBRANCH 
	@BRANCHCODES NVARCHAR(MAX),      
	@REFERENCENOS NVARCHAR(MAX)    
AS  
  BEGIN  
	SELECT * INTO #TEMPREF FROM  [DBO].[UDF_TDS_SPLITSTRING](@REFERENCENOS,',')      
	SELECT * INTO #TEMPBR FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')
	SELECT D.REFERENCENO, E.SERIALNO, SD.SALARYDETAILID, SD.DEDUCTEEID, SD.BRANCHID , CHAPTERVIADETAILID
	FROM SALARYDETAIL SD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) 
			ON SD.DEDUCTEEID = D.DEDUCTEEID 			
		INNER JOIN EMPLOYEE E WITH(NOLOCK) 
			ON D.DEDUCTEEID = E.DEDUCTEEID		 
		INNER JOIN #TEMPREF TR WITH(NOLOCK) 
			ON D.REFERENCENO=TR.DATA
		INNER JOIN #TEMPBR TB WITH(NOLOCK) 
			ON SD.BRANCHID=TB.DATA  
			AND D.BRANCHID=TB.DATA
		INNER JOIN CHAPTERVIADETAIL CH
			ON SD.SALARYDETAILID = CH.SALARYDETAILID  AND CH.SALARYSECTIONID = 3
	GROUP BY D.REFERENCENO, E.SERIALNO, SD.SALARYDETAILID, SD.DEDUCTEEID, SD.BRANCHID, CHAPTERVIADETAILID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChapterVIADetails')
DROP PROCEDURE USP_TDS_GetChapterVIADetails
GO
CREATE PROCEDURE USP_TDS_GetChapterVIADetails
	@SALARYDETAILID INT
AS
	BEGIN
		IF EXISTS(SELECT 1 FROM SALARYDETAIL WITH(NOLOCK) WHERE SALARYDETAILID=@SALARYDETAILID)
			BEGIN
				SELECT SALARYSECTIONS.SALARYSECTIONID,SALARYSECTIONS.CATEGORY,SALARYSECTIONS.SECTIONNAME,CHAPTERVIADETAIL.CHAPTERVIADETAILID,CHAPTERVIADETAIL.SALARYDETAILID,CHAPTERVIADETAIL.SALARYSECTIONID,
					   CHAPTERVIADETAIL.GROSSAMOUNT,CHAPTERVIADETAIL.QUALIFYINGAMOUNT,CHAPTERVIADETAIL.DEDUCTIBLEAMOUNT,CHAPTERVIADETAIL.REMARKS
				FROM   SALARYSECTIONS WITH(NOLOCK) LEFT JOIN CHAPTERVIADETAIL WITH(NOLOCK) ON SALARYSECTIONS.SALARYSECTIONID=CHAPTERVIADETAIL.SALARYSECTIONID
				WHERE  SALARYSECTIONS.CATEGORY = 2 AND (CHAPTERVIADETAIL.SALARYDETAILID = @SALARYDETAILID OR CHAPTERVIADETAIL.SALARYDETAILID IS NULL);
			END
		ELSE
			BEGIN
				SELECT SALARYSECTIONID,CATEGORY,SECTIONNAME,'' AS CHAPTERVIADETAILID,NULL SALARYDETAILID,'' SALARYSECTIONID,'' GROSSAMOUNT,'' QUALIFYINGAMOUNT,''DEDUCTIBLEAMOUNT,''REMARKS
				FROM   SALARYSECTIONS  WITH(NOLOCK)
				WHERE  SALARYSECTIONS.CATEGORY = 2;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetChapterVIDetail')
DROP PROCEDURE USP_TDS_GetChapterVIDetail
GO
CREATE PROCEDURE USP_TDS_GetChapterVIDetail
	@BranchID INT
AS
BEGIN
	SELECT D.REFERENCENO,CVI.CHAPTERVIADETAILID,CVI.DEDUCTIBLEAMOUNT,CVI.GROSSAMOUNT,
	CVI.QUALIFYINGAMOUNT,CVI.REMARKS,CVI.SALARYSECTIONID,
	CVI.REMARKS,CVI.SALARYDETAILID
	FROM CHAPTERVIADETAIL CVI WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID=CVI.SALARYDETAILID
	INNER JOIN DEDUCTEE D WITH(NOLOCK)
	ON D.DEDUCTEEID=SD.DEDUCTEEID
	WHERE SD.BRANCHID=@BranchID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHILDBRANCHES')
DROP PROCEDURE USP_TDS_GETCHILDBRANCHES
GO
CREATE PROCEDURE [USP_TDS_GETCHILDBRANCHES]
@BRANCHID INT
AS
	BEGIN
		SELECT BRANCHCODE, BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBRANCHID = @BRANCHID
		UNION
		SELECT BRANCHCODE, BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCHILDBRANCHESFORTRANSFER')
DROP PROCEDURE USP_TDS_GETCHILDBRANCHESFORTRANSFER
GO
CREATE PROCEDURE USP_TDS_GETCHILDBRANCHESFORTRANSFER
@BRANCHID INT 
AS
BEGIN
	SELECT BRANCHID,BRANCHNAME,BASEID,PARENTBASEID,PARENTBRANCHID,BRANCHCODE,ISZORO,NOCHALLANPAY,EMAILADDRESS FROM COMPANYBRANCH 
	WHERE PARENTBRANCHID = @BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCINTABLE')
DROP PROCEDURE USP_TDS_GETCINTABLE
GO
CREATE PROCEDURE [USP_TDS_GETCINTABLE]
@CHALLANIDS NVARCHAR(MAX)
AS
BEGIN
SELECT * INTO #CHALLANS FROM DBO.UDF_TDS_SPLITSTRING(@CHALLANIDS,',')
SELECT CHALLANID,BANKCHALLANNO,LASTBANKCHALLANNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE 
FROM CHALLANDETAIL CD WITH(NOLOCK) INNER JOIN #CHALLANS C ON C.DATA = CD.CHALLANID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCITADDRESSCOUNT')
DROP PROCEDURE USP_TDS_GETCITADDRESSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETCITADDRESSCOUNT]
	@BRANCHID INT
AS
	BEGIN
		SELECT COUNT(ID) FROM CITTDSBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCITTDSADDRESS')
DROP PROCEDURE USP_TDS_GETCITTDSADDRESS
GO
CREATE PROCEDURE [USP_TDS_GETCITTDSADDRESS]
	@BRANCHID INT
AS
	BEGIN
		SELECT BRANCHID,ADDRESS1,ADDRESS2,ADDRESS3,CITY,PINCODE FROM CITTDSBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCITTDSADDRESSFORPDF')
DROP PROCEDURE USP_TDS_GETCITTDSADDRESSFORPDF
GO
CREATE PROCEDURE [USP_TDS_GETCITTDSADDRESSFORPDF]
   @BRANCHID INT,
   @RCCNAME VARCHAR(3)
AS
BEGIN
 IF EXISTS(SELECT ID FROM CITTDSBRANCH WHERE BRANCHID=@BRANCHID)
 BEGIN
  SELECT ID,BRANCHID,ADDRESS1,ADDRESS2,ADDRESS3,CITY,PINCODE FROM CITTDSBRANCH WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
 END
 ELSE
 BEGIN
  INSERT INTO CITTDSBRANCH(BRANCHID,ADDRESS1,ADDRESS2,ADDRESS3,CITY,PINCODE)
      (SELECT @BRANCHID,ADDRESS1,ADDRESS2,ADDRESS3,CITY,PINCODE
          FROM CITTDS WHERE RCCNAME=@RCCNAME)
  SELECT @BRANCHID BRANCHID,ADDRESS1,ADDRESS2,ADDRESS3,CITY,PINCODE
          FROM CITTDS WITH(NOLOCK) WHERE RCCNAME=@RCCNAME
 END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMIDDATA')
DROP PROCEDURE USP_TDS_GETCOMIDDATA
GO
CREATE PROCEDURE [USP_TDS_GETCOMIDDATA]     
@REFERENCENOS NVARCHAR(MAX)        
AS        
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON 
 SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')        
SELECT D.REFERENCENO,LC.COMID,C.BRANCHCODE,E.EMPLOYEEID,C.BRANCHID        
FROM DEDUCTEE D WITH(NOLOCK)    
INNER JOIN COMPANYBRANCH C ON C.BRANCHID=D.BRANCHID        
INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID        
INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID 
INNER JOIN #REFNO R ON R.DATA=D.REFERENCENO       
WHERE LEN(ISNULL(D.REFERENCENO,'')) > 0
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMPANYBRANCH')
DROP PROCEDURE USP_TDS_GETCOMPANYBRANCH
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETCOMPANYBRANCH]
AS
BEGIN
	SELECT BRANCHID,PARENTBRANCHID,BRANCHNAME,BRANCHCODE,BASEID,PARENTBASEID,ISNULL(ISZORO,0) ISZORO,
		   ISNULL(NOCHALLANPAY,0)NOCHALLANPAY, ISNULL(EMAILADDRESS,'') EMAILADDRESS
		FROM COMPANYBRANCH  WITH(NOLOCK)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCompanyBranchByCode')
DROP PROCEDURE USP_TDS_GetCompanyBranchByCode
GO
CREATE PROCEDURE [USP_TDS_GetCompanyBranchByCode]
	@BRANCHCODE INT
AS
BEGIN
	SELECT	CB.BRANCHID AS BRANCHID,CB.PARENTBRANCHID AS PARENTBRANCHID,CB.BRANCHNAME AS BRANCHNAME,CB.BRANCHCODE AS BRANCHCODE,CB.BASEID AS BASEID,CB.PARENTBASEID AS PARENTBASEID,LF.BRANCHNAME AS PARENTBRANCHNAME,LF.BRANCHCODE AS PARENTBRANCHCODE,ISNULL(CB.ADDITIONALFIELD1,'')ADDITIONALFIELD1
	FROM	COMPANYBRANCH CB WITH(NOLOCK)
			LEFT JOIN COMPANYBRANCH LF WITH(NOLOCK) ON CB.PARENTBRANCHID = LF.BRANCHID
	WHERE	CB.BRANCHCODE= @BRANCHCODE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCompanyBranchByID')
DROP PROCEDURE USP_TDS_GetCompanyBranchByID
GO
CREATE PROCEDURE [USP_TDS_GetCompanyBranchByID]    
 @BRANCHID INT    
AS    
BEGIN    
     SELECT CB.BRANCHID AS BRANCHID,CB.PARENTBRANCHID AS PARENTBRANCHID,CB.BRANCHNAME AS BRANCHNAME,CB.BRANCHCODE AS BRANCHCODE,
		CB.BASEID AS BASEID,CB.PARENTBASEID AS PARENTBASEID,LF.BRANCHNAME AS PARENTBRANCHNAME,LF.BRANCHCODE AS PARENTBRANCHCODE,
		ISNULL(CB.ISZORO,0) ISZORO,ISNULL(CB.NOCHALLANPAY,0)NOCHALLANPAY, ISNULL(CB.EMAILADDRESS,'') EMAILADDRESS, 
		ISNULL(CB.ADDITIONALFIELD1,'')ADDITIONALFIELD1 , ISNULL(CB.ISOPTION1,0)ISOPTION1
      FROM COMPANYBRANCH CB  WITH(NOLOCK)   
      LEFT JOIN COMPANYBRANCH LF WITH(NOLOCK) ON CB.PARENTBRANCHID = LF.BRANCHID    
      WHERE CB.BRANCHID=@BRANCHID    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMPANYBRANCHCOUNT')
DROP PROCEDURE USP_TDS_GETCOMPANYBRANCHCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETCOMPANYBRANCHCOUNT]
(
	@BRANCHID INT,
	@BRANCHNAME VARCHAR(100)=NULL,
	@BRANCHCODE VARCHAR(10)=NULL
)
AS
BEGIN
    DECLARE @SQLQUERY NVARCHAR(MAX)
    DECLARE @ISWHERENOTAVAIL BIT
	IF EXISTS(SELECT BRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID AND PARENTBRANCHID=0)
		BEGIN
			SET @SQLQUERY='SELECT COUNT(BRANCHID) FROM COMPANYBRANCH WITH(NOLOCK)'
			SET @ISWHERENOTAVAIL=1
		END
		ELSE
		BEGIN
			SET @SQLQUERY='SELECT	COUNT(BRANCHID)
							FROM	COMPANYBRANCH WITH(NOLOCK)
							WHERE	PARENTBASEID LIKE (	SELECT	PARENTBASEID
										FROM COMPANYBRANCH WITH(NOLOCK)
										WHERE BRANCHID = '+CAST(@BRANCHID AS VARCHAR(MAX))+')+''%'''
		END
	 IF @BRANCHNAME IS NOT NULL
	 BEGIN
		IF @ISWHERENOTAVAIL=1
			BEGIN
			SET @SQLQUERY=@SQLQUERY+' WHERE ';
			SET @ISWHERENOTAVAIL=0;
			END
		ELSE
			BEGIN
			SET @SQLQUERY=@SQLQUERY+' AND ';
			END
	   SET @SQLQUERY=@SQLQUERY+'BRANCHNAME LIKE ''%'+CAST(@BRANCHNAME AS VARCHAR(75))+'%'''
	 END
	 IF @BRANCHCODE IS NOT NULL
	 BEGIN
		IF @ISWHERENOTAVAIL=1
			BEGIN
			SET @SQLQUERY=@SQLQUERY+' WHERE ';
			SET @ISWHERENOTAVAIL=0;
			END
		ELSE
			BEGIN
			SET @SQLQUERY=@SQLQUERY+' AND ';
			END
	SET @SQLQUERY=@SQLQUERY+'BRANCHCODE LIKE ''%'+CAST(@BRANCHCODE AS VARCHAR(10))+'%'''
    END
	 EXECUTE SP_EXECUTESQL @SQLQUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMPANYBRANCHES')
DROP PROCEDURE USP_TDS_GETCOMPANYBRANCHES
GO
CREATE PROCEDURE [USP_TDS_GETCOMPANYBRANCHES]
AS
	BEGIN
		SELECT BRANCHID, BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMPANYBRANCHESDETAILFORERETURNHISTORY')
DROP PROCEDURE USP_TDS_GETCOMPANYBRANCHESDETAILFORERETURNHISTORY
GO
CREATE PROCEDURE USP_TDS_GETCOMPANYBRANCHESDETAILFORERETURNHISTORY    
(  
 @USERID INT,@PREFIXTEXT NVARCHAR(MAX),@RECORDCOUNT INT  
)  
AS  
BEGIN  
 DECLARE @BRANCHID INT;  
 DECLARE @ISSUPERADMIN BIT  
 DECLARE @ISBRANCHADMIN BIT  
 DECLARE @QUERY NVARCHAR(MAX)  
 SELECT @BRANCHID=BRANCHID,@ISSUPERADMIN = ISSUPERADMIN,@ISBRANCHADMIN=ISBRANCHADMIN FROM USERMASTER WITH(NOLOCK) WHERE USERID = @USERID;  
 IF(@ISSUPERADMIN=1)  
  BEGIN  
   SET @QUERY = 'SELECT TOP '+CAST(@RECORDCOUNT AS VARCHAR) +' BRANCHID,BRANCHNAME +'' (''+ BRANCHCODE +'')'' AS BRANCHNAME  
       FROM COMPANYBRANCH WITH(NOLOCK)  
       WHERE BRANCHNAME +'' (''+ BRANCHCODE +'')'' LIKE '''+@PREFIXTEXT+'%''';  
  END  
 ELSE  
  BEGIN  
   SET @QUERY = 'SELECT TOP '+CAST(@RECORDCOUNT AS VARCHAR) +' BRANCHID,BRANCHNAME +'' (''+ BRANCHCODE +'')'' AS BRANCHNAME  
    FROM COMPANYBRANCH WITH(NOLOCK)  
    WHERE PARENTBASEID LIKE ( SELECT PARENTBASEID  
       FROM COMPANYBRANCH WITH(NOLOCK)  
       WHERE BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +')+''%''  
    AND BRANCHNAME +'' (''+ BRANCHCODE +'')'' LIKE '''+@PREFIXTEXT+'%''';  
  END  
 EXEC SP_EXECUTESQL @QUERY;  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMPANYBRANCHESFORTRACES')
DROP PROCEDURE USP_TDS_GETCOMPANYBRANCHESFORTRACES
GO
CREATE PROCEDURE USP_TDS_GETCOMPANYBRANCHESFORTRACES
AS
	BEGIN
		SELECT BRANCHCODE,TRACESACNAME,TRACESACPWD FROM COMPANYBRANCH WITH(NOLOCK)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMPANYBRANCHFOREXCEL')
DROP PROCEDURE USP_TDS_GETCOMPANYBRANCHFOREXCEL
GO
CREATE PROCEDURE [USP_TDS_GETCOMPANYBRANCHFOREXCEL]
AS
BEGIN
 SELECT BRANCHID,PARENTBRANCHID,BRANCHNAME,BRANCHCODE,ISNULL(ISZORO,0) ISZORO
          FROM COMPANYBRANCH  WITH(NOLOCK)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCompanyBranchIDByBranchCode')
DROP PROCEDURE USP_TDS_GetCompanyBranchIDByBranchCode
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCompanyBranchIDByBranchCode]
@BRANCHCODE VARCHAR(20)
AS
	BEGIN
		SELECT CB.BRANCHCODE,CB.BRANCHID,BD.QUARTER,D.TAN
		FROM COMPANYBRANCH CB WITH(NOLOCK)
			INNER JOIN BRANCHDEDUCTORS BD ON BD.BRANCHID = CB.BRANCHID
			INNER JOIN DEDUCTOR D ON D.DEDUCTORID = BD.DEDUCTORID
		WHERE CB.BRANCHCODE = @BRANCHCODE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMPANYBRANCHPAGED')
DROP PROCEDURE USP_TDS_GETCOMPANYBRANCHPAGED
GO
CREATE PROCEDURE [USP_TDS_GETCOMPANYBRANCHPAGED]
(
 @STARTROW INT,
 @PAGESIZE INT,
 @BRANCHID INT,
 @BRANCHNAME VARCHAR(100)=NULL,
 @BRANCHCODE VARCHAR(10)=NULL
)
AS
BEGIN
 /* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
 SET NOCOUNT ON
 /* DETERMINE THE FIRST RECORD AND LAST RECORD */
 DECLARE @FIRSTREC INT, @LASTREC INT
 SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
 SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
 DECLARE @COMAPNYBRANCH TABLE(ID INT IDENTITY(1,1),BRANCHID INT,PARENTBRANCHID INT,BRANCHNAME VARCHAR(100),
                                BRANCHCODE VARCHAR(10),BASEID INT,PARENTBASEID VARCHAR(50),ISZORO BIT,NOCHALLANPAY BIT, EMAILADDRESS VARCHAR(100))
 DECLARE @SQLQUERY NVARCHAR(MAX)
 DECLARE @ISWHERENOTAVAIL BIT
 IF EXISTS(SELECT BRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID AND PARENTBRANCHID=0)
	BEGIN
   SET @SQLQUERY='SELECT BRANCHID,PARENTBRANCHID,BRANCHNAME,BRANCHCODE,BASEID,PARENTBASEID,ISNULL(ISZORO,0) ISZORO,
						 ISNULL(NOCHALLANPAY,0)NOCHALLANPAY, ISNULL(EMAILADDRESS,'''')EMAILADDRESS
            FROM COMPANYBRANCH WITH(NOLOCK)'
   SET @ISWHERENOTAVAIL=1
 END
 ELSE
	BEGIN
   SET @SQLQUERY='SELECT BRANCHID,PARENTBRANCHID,BRANCHNAME,BRANCHCODE,BASEID,PARENTBASEID,
						 ISNULL(ISZORO,0) ISZORO,ISNULL(NOCHALLANPAY,0)NOCHALLANPAY, ISNULL(EMAILADDRESS,'''')EMAILADDRESS
					 FROM COMPANYBRANCH  WITH(NOLOCK)
				 WHERE PARENTBASEID LIKE (SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = '+CAST(@BRANCHID AS VARCHAR(MAX))+')+''%'''
 END
IF @BRANCHNAME IS NOT NULL
	BEGIN
	 IF @ISWHERENOTAVAIL=1
		   BEGIN
		   SET @SQLQUERY=@SQLQUERY+' WHERE ';
		   SET @ISWHERENOTAVAIL=0;
		   END
		 ELSE
		   BEGIN
		   SET @SQLQUERY=@SQLQUERY+' AND ';
		   END
	 SET @SQLQUERY=@SQLQUERY+'BRANCHNAME LIKE ''%'+CAST(@BRANCHNAME AS VARCHAR(75))+'%'''
	END
 IF @BRANCHCODE IS NOT NULL
 BEGIN
  IF @ISWHERENOTAVAIL=1
   BEGIN
   SET @SQLQUERY=@SQLQUERY+' WHERE ';
   SET @ISWHERENOTAVAIL=0;
   END
  ELSE
   BEGIN
   SET @SQLQUERY=@SQLQUERY+' AND ';
   END
 SET @SQLQUERY=@SQLQUERY+'BRANCHCODE LIKE ''%'+CAST(@BRANCHCODE AS VARCHAR(10))+'%'''
    END
    INSERT INTO @COMAPNYBRANCH EXECUTE SP_EXECUTESQL @SQLQUERY;
 SELECT TOP (@LASTREC-1) *FROM @COMAPNYBRANCH WHERE ID > @FIRSTREC AND ID < @LASTREC
 /* TURN NOCOUNT BACK OFF */
 SET NOCOUNT OFF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMPANYBRANCHWITHPARENTCODE')
DROP PROCEDURE USP_TDS_GETCOMPANYBRANCHWITHPARENTCODE
GO
CREATE PROCEDURE USP_TDS_GETCOMPANYBRANCHWITHPARENTCODE
AS
BEGIN
	SELECT BRANCHID, BRANCHCODE
	INTO #ISZORO 
		FROM COMPANYBRANCH  WITH(NOLOCK)
	WHERE ISZORO = 1
	SELECT	CB.BRANCHID AS BRANCHID,
				CASE WHEN CB.PARENTBRANCHID = 0 THEN CB.BRANCHID ELSE CB.PARENTBRANCHID END AS PARENTBRANCHID, 
				CB.BRANCHNAME AS BRANCHNAME, CB.BRANCHCODE AS BRANCHCODE, 
				CB.BASEID AS BASEID, CB.PARENTBASEID AS PARENTBASEID,
				ISNULL(CB.ISZORO,0)	AS ISZORO, ISNULL(CB.NOCHALLANPAY,0) NOCHALLANPAY,
				ISNULL(CB.EMAILADDRESS,'') EMAILADDRESS,
				CASE WHEN LF.BRANCHNAME IS NULL OR CB.PARENTBRANCHID <> ZO.BRANCHID THEN CB.BRANCHNAME ELSE LF.BRANCHNAME END AS PARENTBRANCHNAME,
				CASE WHEN LF.BRANCHCODE IS NULL OR CB.PARENTBRANCHID <> ZO.BRANCHID THEN CB.BRANCHCODE ELSE LF.BRANCHCODE END AS PARENTBRANCHCODE
		FROM COMPANYBRANCH CB WITH(NOLOCK)
			LEFT JOIN #ISZORO ZO
				ON ZO.BRANCHID = CB.PARENTBRANCHID
			LEFT JOIN COMPANYBRANCH LF WITH(NOLOCK) 
				ON CB.PARENTBRANCHID = LF.BRANCHID
		ORDER BY CB.BRANCHCODE
	 IF OBJECT_ID('TEMPDB..#ISZORO') IS NOT NULL 
		 DROP TABLE #ISZORO 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOMPANYCHILDBRANCHESDETAIL')
DROP PROCEDURE USP_TDS_GETCOMPANYCHILDBRANCHESDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETCOMPANYCHILDBRANCHESDETAIL]
(
 @BRANCHID INT,
 @PREFIXTEXT VARCHAR(MAX),
 @RECORDCOUNT INT ,
@ISIB BIT = 0  ,
@ISSB BIT = 0  ,
@FINYEAR INT
)
AS
BEGIN
 DECLARE @QUERY NVARCHAR(MAX)
 IF(@ISSB = 1)
 BEGIN
	  SET @QUERY = 'SELECT TOP '+CAST(@RECORDCOUNT AS VARCHAR) +' BRANCHID,BRANCHNAME +'' (''+ BRANCHCODE +'')'' AS BRANCHNAME
		  FROM COMPANYBRANCH WITH(NOLOCK)
		  WHERE BRANCHID IN ( SELECT BRANCHID
			 FROM COMPANYBRANCH  WITH(NOLOCK)
			 WHERE (PARENTBRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +' OR BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +')'+
		  ' AND (BRANCHNAME LIKE ''' + @PREFIXTEXT + '%''' + ' OR BRANCHCODE LIKE ''' + @PREFIXTEXT + '%'''+'))';
	 END
 ELSE
 BEGIN
	 IF EXISTS(SELECT BRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID AND PARENTBRANCHID=0)
	 BEGIN
	  SET @QUERY = 'SELECT TOP '+CAST(@RECORDCOUNT AS VARCHAR) +' BRANCHID,BRANCHNAME +'' (''+ BRANCHCODE +'')'' AS BRANCHNAME
		  FROM COMPANYBRANCH  WITH(NOLOCK)
		  WHERE BRANCHNAME LIKE ''' + @PREFIXTEXT + '%''' + ' OR BRANCHCODE LIKE''' + @PREFIXTEXT + '%''';
	   IF(@ISIB = 1 AND @FINYEAR > 2011)
	 SET @QUERY = @QUERY + '  AND (ISZORO = 1 OR BRANCHID = 1)'
	 END
	 ELSE
	 BEGIN
	  SET @QUERY = 'SELECT TOP '+CAST(@RECORDCOUNT AS VARCHAR) +' BRANCHID,BRANCHNAME +'' (''+ BRANCHCODE +'')'' AS BRANCHNAME
		  FROM COMPANYBRANCH WITH(NOLOCK)
		  WHERE PARENTBASEID LIKE ( SELECT PARENTBASEID
			 FROM COMPANYBRANCH  WITH(NOLOCK)
			 WHERE BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +')+''%''
		  AND BRANCHNAME LIKE ''' + @PREFIXTEXT + '%''' + ' OR BRANCHCODE LIKE''' + @PREFIXTEXT + '%''';
	 IF(@ISIB = 1 AND @FINYEAR > 2011)
	  SET @QUERY = @QUERY + '  AND (ISZORO = 1 OR BRANCHID = 1)'
	 END
 END
 EXEC SP_EXECUTESQL @QUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRCHALLANDETAIL')
DROP PROCEDURE USP_TDS_GETCORRCHALLANDETAIL
GO
CREATE PROCEDURE USP_TDS_GETCORRCHALLANDETAIL 
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS	
   BEGIN
		SELECT CCD.CHALLANSERIALNO FROM CORRCHALLANDETAIL CCD WITH(NOLOCK) 
			  INNER JOIN
			  (
						SELECT CHALLANERETURNID, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRCHALLANDETAIL WITH(NOLOCK) 
							WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER
							GROUP BY CHALLANERETURNID										
			   ) C
			   ON CCD.CHALLANERETURNID = C.CHALLANERETURNID AND CCD.CORRECTIONSTATUS = C.CORRECTIONSTATUS
			   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER		
			  ORDER BY CCD.CHALLANSERIALNO 	   
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrChallanDetails')
DROP PROCEDURE USP_TDS_GetCorrChallanDetails
GO
--[USP_TDS_GetCorrChallanDetails] 1,10,119,2,2,null, null
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrChallanDetails] 
        @STARTROW INT,
        @PAGESIZE INT,
		@BRANCHID INT,
		@FORMID SMALLINT,
		@QUARTER SMALLINT,			
		@SECTIONID INT=NULL,
		@BANKID INT=NULL,
		@SHOWALL BIT = 0
AS
BEGIN
   /* The number of rows affected by the different commands does not interest the application, so turn NOCOUNT ON*/
	SET NOCOUNT ON
	/* Determine the first record and last record */
	DECLARE @FIRSTREC int, @LASTREC int
	SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
	SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);	
   DECLARE @SQLQUERY NVARCHAR(MAX)
   IF(@SHOWALL = 0)
     BEGIN 
		 SET @SQLQUERY='SELECT ID=IDENTITY(INT,1,1),CD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,CD.CHALLANSERIALNO,CD.BRANCHID,CD.FORMID,CD.QUARTER,
				  ISNULL(CD.CHALLANID,-1) AS CHALLANID,CD.CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,CD.MODEOFPAYMENT,
				  CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,
				  CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CD.INTEREST,
				  CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,
				  CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.CORRECTIONSTATUS,
				  ISNULL(RB.BSRCODE,'''') AS BSRCODE,ISNULL(RBLAST.BSRCODE,'''') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,
				  CASE WHEN(DD.CHALLANERETURNID IS NULL) THEN ''FALSE'' ELSE ''TRUE'' END AS  ISLINKED,CD.FEE, CD.MINORHEAD,
				  ISNULL(TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER,ISNULL(CD.CHALLANEDITMODE,'''') AS CHALLANEDITMODE,CD.EXPECTEDDID
				  INTO #TEMP
				FROM CORRCHALLANDETAIL CD WITH(NOLOCK) LEFT JOIN REMITTINGBANK RB WITH(NOLOCK)
			   ON CD.BANKID=RB.BANKID
			       LEFT JOIN REMITTINGBANK RBLAST WITH(NOLOCK)
			   ON CD.LASTBANKID=RBLAST.BANKID
				  INNER JOIN TAXSECTIONS TS WITH(NOLOCK)
			   ON CD.SECTIONID=TS.SECTIONID
			      LEFT JOIN (SELECT DISTINCT CHALLANERETURNID FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
							  WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND 
							        FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
							        QUARTER='+CAST(@QUARTER AS VARCHAR)+' 
							 ) AS DD
			   ON CD.CHALLANERETURNID=DD.CHALLANERETURNID
			WHERE CD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND 
				  CD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
				  CD.QUARTER='+CAST(@QUARTER AS VARCHAR)+' AND 
				  CD.CORRECTIONSTATUS=1 AND CD.CHALLANTOTAL > 0' 
		IF @SECTIONID IS NOT NULL
		  SET @SQLQUERY=@SQLQUERY+' AND CD.SECTIONID='+CAST(@SECTIONID AS VARCHAR)+''
		IF @BANKID IS NOT NULL
		  SET @SQLQUERY=@SQLQUERY+' AND CD.BANKID='+CAST(@BANKID AS VARCHAR)+''  
     END 		
   ELSE
     BEGIN 
		 SET @SQLQUERY='SELECT ID=IDENTITY(INT,1,1),* INTO #TEMP FROM
				( 
					SELECT 7 AS CURRENTCORRSTATUS,CD.SERIALNO AS CHALLANSERIALNO,CD.BRANCHID,CD.FORMID,CD.QUARTER,
						  ISNULL(CD.CHALLANID,-1) AS CHALLANID,0 AS CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,CD.MODEOFPAYMENT,
						  CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,
						  CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CD.INTEREST,
						  CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,
						  CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,7 AS CORRECTIONSTATUS,
						  ISNULL(RB.BSRCODE,'''') AS BSRCODE,ISNULL(RB.BSRCODE,'''') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,
						  ''TRUE'' AS  ISLINKED,CD.FEE, CD.MINORHEAD,
						  ISNULL(TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER,'''' AS CHALLANEDITMODE,0 AS EXPECTEDDID
						  FROM CHALLANDETAIL CD WITH(NOLOCK) 
						  INNER JOIN 
						  (
							 SELECT DISTINCT CHALLANID FROM DEDCHALINK WHERE BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+'
						  ) DL ON CD.CHALLANID = DL.CHALLANID
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID=TS.SECTIONID 
						  LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID=RB.BANKID			      
					WHERE CD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND 
						  CD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
						  CD.QUARTER='+CAST(@QUARTER AS VARCHAR)+' AND 
						  CD.CHALLANTOTAL > 0
			     UNION
				  SELECT 7 AS CURRENTCORRSTATUS,CD.SERIALNO AS CHALLANSERIALNO,CD.BRANCHID,CD.FORMID,CD.QUARTER,
						  ISNULL(CD.CHALLANID,-1) AS CHALLANID,0 AS CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,CD.MODEOFPAYMENT,
						  CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,
						  CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CD.INTEREST,
						  CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,
						  CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,7 AS CORRECTIONSTATUS,
						  ISNULL(RB.BSRCODE,'''') AS BSRCODE,ISNULL(RB.BSRCODE,'''') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,
						   ''FALSE'' AS  ISLINKED,CD.FEE, CD.MINORHEAD,
						  ISNULL(TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER,'''' AS CHALLANEDITMODE,0 AS EXPECTEDDID
						  FROM CHALLANDETAIL CD WITH(NOLOCK) 						 
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID=TS.SECTIONID 
						  LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID=RB.BANKID			      
					WHERE CD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND 
						  CD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
						  CD.QUARTER='+CAST(@QUARTER AS VARCHAR)+' AND 
						  CD.CHALLANTOTAL = 0)T'
		IF(@SECTIONID IS NOT NULL OR @BANKID IS NOT NULL)
		  SET @SQLQUERY = @SQLQUERY + ' WHERE '
		IF @SECTIONID IS NOT NULL
		  SET @SQLQUERY=@SQLQUERY+' CD.SECTIONID='+CAST(@SECTIONID AS VARCHAR)+''
		IF(@SECTIONID IS NULL AND @BANKID IS NOT NULL)
		  SET @SQLQUERY = @SQLQUERY + ' AND '
		IF @BANKID IS NOT NULL
		  SET @SQLQUERY=@SQLQUERY+' CD.BANKID='+CAST(@BANKID AS VARCHAR)+''   
     END 
	SET @SQLQUERY=@SQLQUERY+' ORDER BY CHALLANSERIALNO'
	SET @SQLQUERY=@SQLQUERY+' ;SELECT * FROM #TEMP WHERE ID > '+CAST(@FIRSTREC AS VARCHAR)+ ' AND ID < '+CAST(@LASTREC AS VARCHAR)
	EXECUTE SP_EXECUTESQL @SQLQUERY
	--PRINT @SQLQUERY
		/* Turn NOCOUNT back OFF */
		SET NOCOUNT OFF		
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRCHALLANDETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETCORRCHALLANDETAILSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETCORRCHALLANDETAILSCOUNT] 
		@BRANCHID INT,
		@FORMID SMALLINT,
		@QUARTER SMALLINT,
		@SECTIONID INT=NULL,
		@BANKID INT=NULL,
		@SHOWALL BIT = 0
AS
BEGIN
    IF(@SHOWALL = 1)
      BEGIN
        SELECT COUNT(CHALLANID) FROM
        (
			SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			EXCEPT
			SELECT CHALLANID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		)T
      END 
    ELSE
      BEGIN 
		DECLARE @SQLQUERY NVARCHAR(MAX)
		SET @SQLQUERY='SELECT COUNT(CD.CHALLANSERIALNO) FROM CORRCHALLANDETAIL CD WITH(NOLOCK) 
							 LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID=RB.BANKID
							 INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID=TS.SECTIONID
							 WHERE CD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND CD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
									   CD.QUARTER='+CAST(@QUARTER AS VARCHAR)+' AND CD.CORRECTIONSTATUS= 1 AND CD.CHALLANTOTAL > 0'				  
		IF @SECTIONID IS NOT NULL
			SET @SQLQUERY=@SQLQUERY+' AND CD.SECTIONID='+CAST(@SECTIONID AS VARCHAR)+''
		IF @BANKID IS NOT NULL
			SET @SQLQUERY=@SQLQUERY+' AND CD.BANKID='+CAST(@BANKID AS VARCHAR)+''    
		EXECUTE SP_EXECUTESQL @SQLQUERY
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrChallanDetailsLookUp')
DROP PROCEDURE USP_TDS_GetCorrChallanDetailsLookUp
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrChallanDetailsLookUp]
		@BRANCHID INT,
		@FORMID SMALLINT,
		@QUARTER SMALLINT,
		@FORGRID BIT=0
AS
BEGIN 
  DECLARE @QUERY NVARCHAR(MAX); 
SELECT CD.CHALLANSERIALNO AS SlNo,(CASE WHEN @FORMID=1 THEN TS.SECTIONNAME + '-' + TS.TAXNAME ELSE TS.SECTIONNAME END) AS Section,  
     CD.INCOMETAX AS IncomeTax, CD.SURCHARGE AS Surcharge, CD.EDUCATIONCESS AS Cess 
     FROM CORRCHALLANDETAIL AS CD  
     INNER JOIN TAXSECTIONS AS TS ON CD.SECTIONID = TS.SECTIONID 
	 INNER JOIN 
	 ( 
		 SELECT CHALLANSERIALNO, MAX(CORRECTIONSTATUS)CORRSTATUS FROM CORRCHALLANDETAIL 
		 WHERE BRANCHID =@BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER 
		 GROUP BY CHALLANSERIALNO 
	 )CCD ON CD.CHALLANSERIALNO = CCD.CHALLANSERIALNO AND CD.CORRECTIONSTATUS = CCD.CORRSTATUS  
	 WHERE BRANCHID = @BRANCHID AND CD.FORMID =@FORMID AND QUARTER =@QUARTER ORDER BY CD.CHALLANSERIALNO 
END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRCHALLANS')
DROP PROCEDURE USP_TDS_GETCORRCHALLANS
GO
CREATE PROCEDURE [USP_TDS_GETCORRCHALLANS]  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @SECTIONID INT, 
 @PREFIXTEXT NVARCHAR(MAX),  
 @RECORDCOUNT INT  
AS  
 BEGIN  
  DECLARE @QUERY NVARCHAR(MAX),@QRY NVARCHAR(MAX);  
  SET @QUERY ='SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + ' CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO, CCD.BANKCHALLANNO,CCD.CHALLANPAIDDATE , ISNULL(RB.BSRCODE,'''')BSRCODE 
     FROM CORRCHALLANDETAIL CCD INNER JOIN  
     (  
      SELECT CHALLANSERIALNO,MAX(CORRECTIONSTATUS) CORRECTIONSTATUS  
      FROM   CORRCHALLANDETAIL WITH(NOLOCK)   
      WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '  
      GROUP BY CHALLANSERIALNO  
     ) CD ON CD.CHALLANSERIALNO = CCD.CHALLANSERIALNO AND CD.CORRECTIONSTATUS = CCD.CORRECTIONSTATUS  
     LEFT JOIN REMITTINGBANK RB ON RB.BANKID = CCD. BANKID 
     WHERE CCD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CCD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND CCD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + '
					AND CCD.CHALLANTOTAL > 0 '
  IF(@SECTIONID <> -1)
	BEGIN
		SET @QUERY = @QUERY + 'AND CCD.SECTIONID  = CASE WHEN ' + CAST(@SECTIONID AS VARCHAR) + ' IN (23,24) THEN 15 ELSE ' + CAST(@SECTIONID AS VARCHAR) + ' END '
	END     
  IF(@PREFIXTEXT <> '')  
   BEGIN  
    SET @QUERY = @QUERY  + ' AND (CCD.CHALLANSERIALNO LIKE ''' + @PREFIXTEXT + '%'' OR CCD.BANKCHALLANNO LIKE ''' + @PREFIXTEXT + '%'' OR CONVERT(VARCHAR,CCD.CHALLANPAIDDATE,103) = ''' + CONVERT(VARCHAR,@PREFIXTEXT,103) + ''' OR ISNULL(RB.BSRCODE,'''') LIKE ''' + @PREFIXTEXT + '%'')'   
   END    
 EXEC SP_EXECUTESQL @QUERY;  
-- PRINT @QUERY 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrChallansDetail')
DROP PROCEDURE USP_TDS_GetCorrChallansDetail
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrChallansDetail] 
@BRANCHID INT,          
@FORMID INT,          
@QUARTER INT          
AS          
 BEGIN          
  SELECT MAX(SERIALNO)SERIALNO, MAX(ERETURNID)ERETURNID, MAX(CHALLANID)CHALLANID,SECTIONID , INCOMETAX , SURCHARGE , EDUCATIONCESS, INTEREST,OTHERS, PENALTY, CHALLANTOTAL,BANKCHALLANNO,ISNULL(TRNVOUCHERNO,'')TRNVOUCHERNO,          
     CAST(CONVERT(VARCHAR(10), ISNULL(CHALLANPAIDDATE,''), 111) AS SMALLDATETIME)CHALLANPAIDDATE,ISNULL(TVRECEIPTNUMBER,'')TVRECEIPTNUMBER 
      FROM CHALLANDETAIL  WITH(NOLOCK)          
      WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
  GROUP BY SECTIONID , INCOMETAX , SURCHARGE , EDUCATIONCESS, INTEREST,OTHERS, PENALTY, CHALLANTOTAL,BANKCHALLANNO,TRNVOUCHERNO,          
      CHALLANPAIDDATE, SERIALNO, TVRECEIPTNUMBER           
  HAVING COUNT(CHALLANID) = 1
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrChallansDetailForCorrUpload')
DROP PROCEDURE USP_TDS_GetCorrChallansDetailForCorrUpload
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrChallansDetailForCorrUpload] 
@BRANCHID INT,          
@FORMID INT,          
@QUARTER INT,
@ERETURNIDS NVARCHAR(MAX)          
AS          
 BEGIN
		SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ERETURNIDS,',')  
		SELECT MAX(CHALLANSERIALNO) AS SERIALNO, 
			   MAX(CHALLANERETURNID)AS ERETURNID, 
			   ISNULL(MAX(CHALLANID),0)CHALLANID,
			   SECTIONID ,INCOMETAX , SURCHARGE , EDUCATIONCESS, 
			   INTEREST,OTHERS, PENALTY, CHALLANTOTAL,BANKCHALLANNO,
			   ISNULL(TRNVOUCHERNO,'')TRNVOUCHERNO,CAST(CONVERT(VARCHAR(10), 
			   ISNULL(CHALLANPAIDDATE,''), 111) AS SMALLDATETIME)CHALLANPAIDDATE,
			   ISNULL(TVRECEIPTNUMBER,'')TVRECEIPTNUMBER  
		FROM CORRCHALLANDETAIL  CCD WITH(NOLOCK)
				INNER JOIN #TEMP T ON T.DATA=CCD.CHALLANERETURNID            
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
		GROUP BY SECTIONID , INCOMETAX , SURCHARGE , EDUCATIONCESS, INTEREST,OTHERS, 
				PENALTY, CHALLANTOTAL,BANKCHALLANNO,TRNVOUCHERNO,          
				CHALLANPAIDDATE, CHALLANSERIALNO, TVRECEIPTNUMBER           
		--HAVING COUNT(CHALLANID) = 1
	    DROP TABLE #TEMP
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRCHALLANSDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETCORRCHALLANSDETAILSFORGRID
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETCORRCHALLANSDETAILSFORGRID] 
 @BRANCHID INT,   
 @FORMID INT,   
 @QUARTER INT,   
 @CORRUPDATED INT=-1   
AS     
 BEGIN   
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED   
  DECLARE @SQLQUERY NVARCHAR(MAX);   
  DECLARE @SQLWHERE NVARCHAR(MAX);     
  SET @SQLQUERY = 'SELECT CD.FORMID, CD.QUARTER, CD.CHALLANID, CASE CD.CORRECTIONSTATUS WHEN 2 THEN ''UPDATE'' WHEN 5 THEN ''ADD'' END AS CORRECTION, 
	 CD.CHALLANSERIALNO AS SLNO, CD.INCOMETAX,CD.FEE, CD.SURCHARGE, CD.EDUCATIONCESS,  
	 CD.INTEREST, CD.PENALTY, CD.OTHERS, CD.CHALLANTOTAL, CD.BANKCHALLANNO, CD.CHALLANPAIDDATE,CD.SECTIONID, TS.SECTIONNAME, CD.MINORHEAD, 
	 CASE CD.MINORHEAD WHEN 1 THEN ''200-PAYABLE BY TAXPAYER'' WHEN 2 THEN ''400-REGULAR ASSESSMENT (RAISED BY I. T, DEPT.)''ELSE '''' END AS TYPEOFPAYMENT, 
	 CD.CHEQUENO, CD.CHEQUEDATE, CD.CHEQUEDRAWNON, CD.BANKID,(SELECT BSRCODE FROM REMITTINGBANK WHERE BANKID = CD.BANKID) AS BSRCODE,   
     CD.TRANREFNO, CD.TVRECEIPTNUMBER, CD.ISCOMPANY, CASE WHEN CD.ISCOMPANY=1 THEN ''COMPANIS'' ELSE ''NON COMPANIES'' END AS TAXDEDFROM, 
     CD.MODEOFPAYMENT, CD.CORRECTIONSTATUS, 
	 CD.MATCHEDID AS CHAMATCHID,CD.CHALLANERETURNID, 
	 ''COLOR-'' + CAST(CD.CORRECTIONSTATUS AS VARCHAR) AS ROWCOLOR 
     FROM CORRCHALLANDETAIL AS CD WITH(NOLOCK)  
     INNER JOIN TAXSECTIONS AS TS WITH(NOLOCK) ON CD.SECTIONID = TS.SECTIONID' 
  IF (@CORRUPDATED=-1) 
	SET @SQLQUERY=@SQLQUERY+' 
	INNER JOIN 
	 ( 
		 SELECT CHALLANSERIALNO, MAX(CORRECTIONSTATUS)CORRSTATUS FROM CORRCHALLANDETAIL WITH(NOLOCK)
		 WHERE BRANCHID ='+CAST(@BRANCHID AS VARCHAR)+'AND FORMID ='+CAST(@FORMID AS VARCHAR)+' AND QUARTER ='+CAST(@QUARTER AS VARCHAR)+' 
		 GROUP BY CHALLANSERIALNO 
	 )CCD ON CD.CHALLANSERIALNO = CCD.CHALLANSERIALNO AND CD.CORRECTIONSTATUS = CCD.CORRSTATUS' 
  SET @SQLWHERE=' 
     WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND  
				CD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND  
				CD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) 
  IF (@CORRUPDATED = 0)   
   SET @SQLQUERY = @SQLQUERY + @SQLWHERE+' AND CD.CHALLANTOTAL > 0 AND CD.CORRECTIONSTATUS = 1' 
  IF (@CORRUPDATED=1)  
   SET @SQLQUERY = @SQLQUERY + @SQLWHERE+' AND CD.CORRECTIONSTATUS <> ' + CAST(@CORRUPDATED AS VARCHAR)+' AND CD.ISUPDATECHALLAN = 1' 
  IF (@CORRUPDATED<>-1) 
   SET @SQLQUERY = @SQLQUERY + ' ORDER BY CD.CHALLANID';   
  ELSE 
   SET @SQLQUERY=@SQLQUERY+@SQLWHERE; 
  EXECUTE SP_EXECUTESQL @SQLQUERY;   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrDedFor15GOr15HCert')
DROP PROCEDURE USP_TDS_GetCorrDedFor15GOr15HCert
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrDedFor15GOr15HCert]	
@BRANCHID INT, 
@FORMID INT, 
@QUARTER INT
AS
BEGIN
	SELECT CDD.DEDUCTIONSERIALNO AS SLNO,CERTNO,PAN FROM CORRDEDUCTIONDETAIL CDD
	INNER JOIN CORRNONEMPLOYEE NE ON CDD.DEDUCTEESERIALNO=NE.DEDUCTEESERIALNO AND CDD.BRANCHID=NE.BRANCHID AND 
	CDD.FORMID=NE.FORMID AND CDD.QUARTER=NE.QUARTER
	WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER;
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDEDUCTEEDETAIL')
DROP PROCEDURE USP_TDS_GETCORRDEDUCTEEDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETCORRDEDUCTEEDETAIL]
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,  
@ISNONEMPLOYEE BIT,
@ISTRUE BIT = 0,
@ALLPAN NVARCHAR(MAX) 
AS  
	BEGIN  
	    SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ALLPAN,',') 
		IF(@ISNONEMPLOYEE = 1)  
			BEGIN  
				SELECT DEDUCTEEID , DEDUCTEESERIALNO, NAME, PAN, CODE, 
				ISNULL(PANREFERENCE,'')PANREFERENCE 
				FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)
					INNER JOIN #TEMP T ON T.DATA=CNE.PAN   
				WHERE BRANCHID = @BRANCHID AND FORMID =@FORMID AND QUARTER = @QUARTER  
				ORDER BY  DEDUCTEESERIALNO  
			END  
		ELSE  
			BEGIN
				IF(@ISTRUE = 0)
					BEGIN  
						SELECT DEDUCTEEID, DEDUCTEESERIALNO, NAME, PAN , 
							   CAST(0 AS INT) AS CODE, ISNULL(PANREFERENCE,'')PANREFERENCE, 
							   EMPLOYMENTFROM, EMPLOYMENTTO, GENDER, ISSENIORCITIZEN 
						FROM CORREMPLOYEE CE WITH(NOLOCK)
							INNER JOIN #TEMP T ON T.DATA=CE.PAN   
						WHERE BRANCHID = @BRANCHID AND FORMID =@FORMID AND QUARTER = @QUARTER  
						ORDER BY  DEDUCTEESERIALNO  
					END
				ELSE
					BEGIN
						SELECT DEDUCTEEID, DEDUCTEESERIALNO, NAME, PAN , 
							   CAST(0 AS INT) AS CODE, ISNULL(PANREFERENCE,'')PANREFERENCE, 
							   EMPLOYMENTFROM, EMPLOYMENTTO, GENDER, ISSENIORCITIZEN 
						FROM CORREMPLOYEE CE WITH(NOLOCK) 
							INNER JOIN #TEMP T ON T.DATA=CE.PAN 
						WHERE BRANCHID = @BRANCHID AND FORMID =@FORMID AND QUARTER = @QUARTER 
								AND DEDUCTEESERIALNO NOT IN(
															SELECT DEDUCTEESERIALNO 
															FROM CORRSALARYDETAIL 
															WHERE BRANCHID = @BRANCHID
															)  
						ORDER BY  DEDUCTEESERIALNO  
					END
			END
		DROP TABLE #TEMP   
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrDeductees')
DROP PROCEDURE USP_TDS_GetCorrDeductees
GO
CREATE PROCEDURE USP_TDS_GetCorrDeductees  
@BRANCHID INT,          
@FORMID INT,          
@QUARTER INT,          
@ISNONEMPLOYEE BIT,  
@ALLPAN NVARCHAR(MAX)           
AS          
 BEGIN    
   SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ALLPAN,',')   
   IF(@ISNONEMPLOYEE = 1)          
    BEGIN          
        SELECT NAME, PAN,CODE, CNE.DEDUCTEESERIALNO,ISNULL(PANREFERENCE,'')PANREFERENCE   
        FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)   
   INNER JOIN   
   (  
    SELECT DEDUCTEESERIALNO, MAX(CORRECTIONSTATUS) CORRECTIONSTATUS FROM CORRNONEMPLOYEE WITH(NOLOCK)   
    WHERE BRANCHID=@BRANCHID  AND FORMID =@FORMID AND QUARTER =@QUARTER        
    GROUP BY DEDUCTEESERIALNO     
   )C ON C.DEDUCTEESERIALNO = CNE.DEDUCTEESERIALNO AND C.CORRECTIONSTATUS = CNE.CORRECTIONSTATUS  
   INNER JOIN #TEMP T ON T.DATA=CNE.PAN  
   WHERE BRANCHID=@BRANCHID  AND FORMID =@FORMID AND QUARTER =@QUARTER         
    END          
   ELSE          
    BEGIN          
         SELECT NAME, PAN,0 AS CODE, CNE.DEDUCTEESERIALNO,ISNULL(PANREFERENCE,'')PANREFERENCE   
         FROM CORREMPLOYEE CNE WITH(NOLOCK)   
   INNER JOIN   
   (  
    SELECT DEDUCTEESERIALNO, MAX(CORRECTIONSTATUS) CORRECTIONSTATUS FROM CORREMPLOYEE WITH(NOLOCK)   
    WHERE BRANCHID=@BRANCHID  AND FORMID =@FORMID AND QUARTER =@QUARTER        
    GROUP BY DEDUCTEESERIALNO     
   )C ON C.DEDUCTEESERIALNO = CNE.DEDUCTEESERIALNO AND C.CORRECTIONSTATUS = CNE.CORRECTIONSTATUS  
      INNER JOIN #TEMP T ON T.DATA=CNE.PAN  
   WHERE BRANCHID=@BRANCHID  AND FORMID =@FORMID AND QUARTER =@QUARTER            
    END  
    DROP TABLE #TEMP         
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrDeductees_For_Deduction')
DROP PROCEDURE USP_TDS_GetCorrDeductees_For_Deduction
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrDeductees_For_Deduction]  
@BRANCHID INT,     
@FORMID INT,     
@QUARTER INT,     
@ISNONEMPLOYEE BIT,   
@ALLEMP BIT=1,
@ALLPAN NVARCHAR(MAX)= null  
AS  
 BEGIN 
	SELECT DISTINCT * INTO #TEMP4 FROM DBO.UDF_TDS_SPLITSTRING(@ALLPAN,',')        
    DECLARE @QUERY NVARCHAR(MAX);     
	DECLARE @SUBQUERY NVARCHAR(MAX);    
   IF(@ISNONEMPLOYEE = 1)         
	BEGIN    
	SELECT MAX(CORRECTIONSTATUS) CORRECTIONSTATUS,DEDUCTEESERIALNO INTO #Temp1 FROM CORRNONEMPLOYEE E        
	WHERE BRANCHID=CAST(@BRANCHID AS VARCHAR) AND E.FORMID= CAST(@FORMID AS VARCHAR) AND E.QUARTER= CAST(@QUARTER AS VARCHAR)         
	GROUP BY DEDUCTEESERIALNO     
    SET @QUERY='         
		SELECT CE.DEDUCTEESERIALNO AS SLNO,NAME,      
		PAN,CASE WHEN (PAN=''PANAPPLIED'' OR PAN = ''PANINVALID'' OR PAN=''PANNOTAVBL'') THEN PANREFERENCE ELSE PAN END PAN1,   
		PANREFERENCE,CODE,DEDUCTEEID
		INTO #Temp FROM CORRNONEMPLOYEE CE        
		INNER JOIN #Temp1 EMP ON CE.DEDUCTEESERIALNO=EMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS=EMP.CORRECTIONSTATUS '        		
	 SET @SUBQUERY = ' INNER JOIN #TEMP4 T ON T.DATA=CE.PAN '    
	 SET @QUERY = @QUERY + (CASE WHEN @ALLPAN IS NULL THEN '' ELSE @SUBQUERY END) + ' WHERE CE.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND CE.FORMID='+CAST(@FORMID AS VARCHAR)+' AND CE.QUARTER='+CAST(@QUARTER AS VARCHAR);     
	IF @ALLEMP=1     
	BEGIN     
		SET @QUERY =@QUERY+'		    		      
		SELECT NE.SERIALNO AS SLNO,NAME,       
		PAN,CASE WHEN (PAN=''PANAPPLIED'' OR PAN = ''PANINVALID'' OR PAN=''PANNOTAVBL'') THEN PANREFERENCE ELSE PAN END PAN1,      
		PANREFERENCE,NE.DEDUCTEECODE AS CODE,D.DEDUCTEEID
		INTO #Temp3  
		FROM DEDUCTEE D         
		INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID      
		WHERE D.BRANCHID= '+CAST( @BRANCHID AS VARCHAR) +' AND NE.SERIALNO NOT IN ( SELECT SLNO FROM #Temp) ORDER BY SLNO'  
	END       
    END         
   ELSE          
    BEGIN          
		SELECT MAX(CORRECTIONSTATUS) CORRECTIONSTATUS,DEDUCTEESERIALNO INTO #Temp2 FROM CORREMPLOYEE E        
		WHERE BRANCHID=CAST(@BRANCHID AS VARCHAR) AND E.FORMID= CAST(@FORMID AS VARCHAR) AND E.QUARTER= CAST(@QUARTER AS VARCHAR)         
		GROUP BY DEDUCTEESERIALNO   
		SET @QUERY ='        
		SELECT CE.DEDUCTEESERIALNO AS SLNO,NAME,       
		PAN,CASE WHEN (PAN=''PANAPPLIED'' OR PAN = ''PANINVALID'' OR PAN=''PANNOTAVBL'') THEN PANREFERENCE ELSE PAN END PAN1,PANREFERENCE,0 AS CODE,      
		DEDUCTEEID ,GENDER,ISSENIORCITIZEN
		 INTO #Temp FROM CORREMPLOYEE CE         
		INNER JOIN #Temp2 EMP ON CE.DEDUCTEESERIALNO=EMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS=EMP.CORRECTIONSTATUS         
		WHERE CE.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND CE.FORMID='+CAST(@FORMID AS VARCHAR)+' AND CE.QUARTER='+CAST(@QUARTER AS VARCHAR);      
		IF @ALLEMP=1     
		BEGIN     
			SET @QUERY =@QUERY+'		  
			SELECT E.SERIALNO AS SLNO,NAME,       
			PAN,CASE WHEN (PAN=''PANAPPLIED'' OR PAN = ''PANINVALID'' OR PAN=''PANNOTAVBL'') THEN PANREFERENCE ELSE PAN END PAN1,      
			PANREFERENCE,0 AS CODE,D.DEDUCTEEID ,GENDER,ISSENIORCITIZEN 
			INTO #Temp3  
			FROM DEDUCTEE D         
			INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID      
			WHERE D.BRANCHID= '+CAST( @BRANCHID AS VARCHAR) +' AND E.SERIALNO NOT IN (  SELECT SLNO FROM #Temp) ORDER BY SLNO' 
		END     
    END   
    IF @ALLEMP=1  
    BEGIN  
		SET @QUERY=@QUERY+'  
			SELECT * FROM #Temp  
			UNION  
			SELECT * FROM #Temp3 ' 
	END  
	ELSE  
		SET @QUERY=@QUERY+' SELECT * FROM #Temp'; 	  
    EXEC SP_EXECUTESQL @QUERY 
    PRINT @QUERY           
	IF OBJECT_ID('tempdb..#Temp1') is not null       
		DROP TABLE #Temp1     
	IF OBJECT_ID('tempdb..#Temp2') is not null       
		DROP TABLE #Temp2 		       
	IF OBJECT_ID('tempdb..#Temp') is not null       
		DROP TABLE #Temp  
	IF OBJECT_ID('tempdb..#Temp3') is not null       
		DROP TABLE #Temp3     
	  
	IF OBJECT_ID('tempdb..#T1') is not null       
		DROP TABLE #T1  
	IF OBJECT_ID('tempdb..#Temp4') is not null       
		DROP TABLE #Temp4 		
 END   

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_GETCORRDEDUCTIONDETAIL
GO
CREATE PROCEDURE USP_TDS_GETCORRDEDUCTIONDETAIL
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @DEDUCTIONSLNO INT    
AS    
	BEGIN    
		IF @FORMID = 1    
			BEGIN    
				SELECT TOP 1 CEMP.NAME,-1 AS CODE, CDD.DEDUCTIONID, CDD.BRANCHID, CDD.FORMID, CDD.[QUARTER],
					CDD.DEDUCTIONSERIALNO, CDD.DEDUCTEESERIALNO, CDD.DEDUCTIONERETURNID, CDD.MODE, 
					CEMP.PAN, CEMP.LASTPAN, CEMP.PANREFERENCE, CEMP.LASTPANREFERENCE, CDD.INCOMETAX,
					CDD.LASTINCOMETAX, CDD.SURCHARGE, CDD.LASTSURCHARGE, CDD.EDUCATIONCESS, 
					CDD.LASTEDUCATIONCESS, CDD.TOTALDEDUCTED, CDD.LASTTOTALDEDUCTED, CDD.PAYMENTMADE,
					CDD.PAYMENTDATE,CDD.DEDUCTEDDATE, CDD.SECTIONID, TS.SECTIONNAME, CDD.INCOMETAXRATE,
					CDD.SURCHARGERATE, CDD.EDUCATIONCESSRATE, CDD.TAXRATE, CDD.ISTAXINFOEDITABLE, CDD.NONDEDREASON,  
					CDD.ISBOOKENTRY, CDD.ISGROSSINGUP, CDD.UTN, CDD.ISPANVALIDBYITD, 
					ISNULL(CDD.CHALLANERETURNID,0) AS CHALLANERETURNID, CCD.CHALLANTOTAL, CCD.CHALLANSERIALNO,
					CEMP.PAN, CDD.CORRECTIONSTATUS, GENDER, ISSENIORCITIZEN, CERTNO, ACKNO, REMITTANCEID, COUNTRYID, 
					ISNULL(TDSRATEASPER,' ' ) TDSRATEASPER , CCD.SECTIONID AS CHALLANSECTION,
					ISNULL(CDD.REMARKS1,'') REMARKS1, ISNULL(CDD.REMARKS3,'') REMARKS3  
				FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)   
					INNER JOIN    
						(    
							SELECT CE.BRANCHID, CE.FORMID, CE.QUARTER, CE.NAME, CE.DEDUCTEESERIALNO, 
								CE.PAN, CE.GENDER, CE.ISSENIORCITIZEN, CE.LASTPAN, CE.PANREFERENCE, CE.LASTPANREFERENCE    
							FROM   CORREMPLOYEE CE WITH(NOLOCK)   
								INNER JOIN   
									(    
										SELECT DEDUCTEESERIALNO, MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
										FROM   CORREMPLOYEE WITH(NOLOCK)   
										WHERE BRANCHID = @BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER   
										GROUP BY DEDUCTEESERIALNO    
									) UE   
									ON CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS  
						    WHERE CE.BRANCHID = @BRANCHID AND CE.FORMID = @FORMID AND CE.QUARTER = @QUARTER    
						) CEMP   
						ON CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER    
					INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID    
					LEFT JOIN    
						(  
							SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID 
							FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
							WHERE  CORRECTIONSTATUS = 1 
								AND CHALLANERETURNID NOT IN   
											(  
												SELECT CHALLANERETURNID 
												FROM CORRCHALLANDETAIL WITH(NOLOCK)   
												WHERE CORRECTIONSTATUS <> 1 AND BRANCHID = @BRANCHID 
													AND FORMID = @FORMID AND [QUARTER]= @QUARTER  
											) 
								AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER    
							UNION    
							SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID 
							FROM CORRCHALLANDETAIL WITH(NOLOCK)    
							WHERE  CORRECTIONSTATUS <> 1 AND BRANCHID = @BRANCHID 
								AND FORMID = @FORMID AND [QUARTER] = @QUARTER  
					   ) CCD   
					   ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
				 WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID 
					AND CDD.[QUARTER] = @QUARTER AND CDD.DEDUCTIONSERIALNO = @DEDUCTIONSLNO    
				 ORDER BY CDD.CORRECTIONSTATUS DESC;    
			END    
		ELSE IF (@FORMID = 2 OR @FORMID = 3)  
			BEGIN    
				SELECT TOP 1 CN.NAME, CN.CODE, CDD.DEDUCTIONID, CDD.BRANCHID, CDD.FORMID, CDD.[QUARTER], 
					CDD.DEDUCTIONSERIALNO, CDD.DEDUCTEESERIALNO, CDD.DEDUCTIONERETURNID, CDD.MODE,
					CN.PAN, CN.LASTPAN, CN.PANREFERENCE, CN.LASTPANREFERENCE, CDD.INCOMETAX,
					CDD.LASTINCOMETAX, CDD.SURCHARGE, CDD.LASTSURCHARGE, CDD.EDUCATIONCESS,
					CDD.LASTEDUCATIONCESS, CDD.TOTALDEDUCTED, CDD.LASTTOTALDEDUCTED, CDD.PAYMENTMADE,
					CDD.PAYMENTDATE, CDD.DEDUCTEDDATE, CDD.SECTIONID, TS.SECTIONNAME, CDD.INCOMETAXRATE,
					CDD.SURCHARGERATE, CDD.EDUCATIONCESSRATE, CDD.TAXRATE, CDD.ISTAXINFOEDITABLE, CDD.NONDEDREASON,
					CDD.ISBOOKENTRY, CDD.ISGROSSINGUP, CDD.UTN, CDD.ISPANVALIDBYITD, 
					ISNULL(CCD.CHALLANERETURNID,0) AS CHALLANERETURNID, CCD.CHALLANSERIALNO,
					ISNULL(CCD.CHALLANTOTAL,0) AS CHALLANTOTAL, CN.PAN, CDD.CORRECTIONSTATUS,
					0 AS GENDER, 0 AS ISSENIORCITIZEN, CERTNO, ACKNO, REMITTANCEID, COUNTRYID,
					ISNULL(TDSRATEASPER,' ' ) TDSRATEASPER, CCD.SECTIONID AS CHALLANSECTION, 
					ISNULL(CDD.EMAILDED,'') EMAILDED, ISNULL(CDD.CONTACTNODED,'') CONTACTNODED, 
					ISNULL(CDD.ADDRESSDED,'') ADDRESSDED, ISNULL(CDD.IDENTNUMDED,'') IDENTNUMDED,
					ISNULL(CDD.REMARKS1,'') REMARKS1, ISNULL(CDD.REMARKS3,'') REMARKS3    
				FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) 
					INNER JOIN 
						(    
							SELECT CNE.BRANCHID, CNE.FORMID, CNE.QUARTER, CNE.NAME, CNE.DEDUCTEESERIALNO, CNE.PAN, 
								0 AS GENDER, 0 AS ISSENIORCITIZEN, CNE.LASTPAN, CNE.PANREFERENCE, CNE.LASTPANREFERENCE, CNE.CODE    
							FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)   
								INNER JOIN    
									(    
										SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
										FROM CORRNONEMPLOYEE WITH(NOLOCK) 
										WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
											AND QUARTER = @QUARTER GROUP BY DEDUCTEESERIALNO    
									) UNE  
									ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO 
										AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS 
							WHERE CNE.BRANCHID = @BRANCHID AND CNE.FORMID = @FORMID AND CNE.QUARTER = @QUARTER    
						) CN   
						ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND CN.BRANCHID = CDD.BRANCHID 
							AND CN.FORMID = CDD.FORMID AND CN.QUARTER = CDD.QUARTER    
					INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID    
					LEFT JOIN    
						(  
							SELECT CHALLANERETURNID, CHALLANSERIALNO, CHALLANTOTAL, SECTIONID 
							FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
							WHERE  CORRECTIONSTATUS = 1 
							AND CHALLANERETURNID NOT IN 
										(
											SELECT CHALLANERETURNID 
											FROM CORRCHALLANDETAIL WITH(NOLOCK)    
											WHERE  CORRECTIONSTATUS <> 1 AND BRANCHID = @BRANCHID 
												AND FORMID = @FORMID AND [QUARTER]= @QUARTER
										) 
							AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER    
							UNION    
							SELECT CHALLANERETURNID, CHALLANSERIALNO, CHALLANTOTAL, SECTIONID 
							FROM CORRCHALLANDETAIL WITH(NOLOCK)    
							WHERE  CORRECTIONSTATUS <> 1 AND BRANCHID = @BRANCHID 
								AND FORMID = @FORMID AND [QUARTER] = @QUARTER
						) CCD 
						ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
				WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.[QUARTER]=@QUARTER AND CDD.DEDUCTIONSERIALNO =@DEDUCTIONSLNO    
				ORDER BY CDD.CORRECTIONSTATUS DESC;    
			END    
	END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDEDUCTIONMAXSERIALNO')
DROP PROCEDURE USP_TDS_GETCORRDEDUCTIONMAXSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETCORRDEDUCTIONMAXSERIALNO]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
  DECLARE @CORRDEDUCTIONSERIALNO INT, @DEDUCTIONSERIALNO INT, @MASTERDEDUCTIONSERIALNO INT;
  SELECT @CORRDEDUCTIONSERIALNO=ISNULL(MAX(DEDUCTIONSERIALNO),0)+1 FROM CORRDEDUCTIONDETAIL  WITH(NOLOCK)
      WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
  SELECT @MASTERDEDUCTIONSERIALNO=ISNULL(MAX(SERIALNO),0)+1 FROM DEDUCTIONDETAIL WITH(NOLOCK)
     WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
    IF(@MASTERDEDUCTIONSERIALNO>@CORRDEDUCTIONSERIALNO)
     BEGIN
    SET @DEDUCTIONSERIALNO=@MASTERDEDUCTIONSERIALNO
     END
    ELSE
     BEGIN
    SET @DEDUCTIONSERIALNO=@CORRDEDUCTIONSERIALNO
     END
    SELECT  @DEDUCTIONSERIALNO;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDEDUCTIONSDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETCORRDEDUCTIONSDETAILSFORGRID
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrDeductionsDetailsForGrid]
 @BRANCHID INT,      
 @FORMID INT,      
 @QUARTER INT,      
 @CORRUPDATED BIT = 0,  
 @STARTROW INT = 1,  
 @LASTROW INT = 10000000    
AS    
 BEGIN          
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED            
  DECLARE @SQLQUERY NVARCHAR(MAX);            
  DECLARE @DEFAULTCOLUMN NVARCHAR(MAX);            
  DECLARE @SQLFROM NVARCHAR(MAX);            
  DECLARE @SQLEMPNONEMP NVARCHAR(MAX);            
  DECLARE @SQLWHERE NVARCHAR(MAX);            
  IF (@FORMID = 1)            
   SET @SQLEMPNONEMP = 'CORREMPLOYEE E';            
  ELSE            
   SET @SQLEMPNONEMP = 'CORRNONEMPLOYEE E';            
 DECLARE @DED NVARCHAR(MAX);      
 DECLARE @DEDUCTEE NVARCHAR(MAX);              
 SELECT DISTINCT CASE DD.CORRECTIONSTATUS WHEN 2 THEN 'Update' WHEN 4 THEN 'Delete' WHEN 5 THEN 'Add' END AS CORRECTION,      
 DD.DEDUCTIONSERIALNO AS DEDUCTIONSLNO,DD.DEDUCTEESERIALNO,      
 DD.PAYMENTMADE, DD.PAYMENTDATE,DD.TAXRATE, DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.INCOMETAXRATE,       
 DD.INCOMETAX, DD.SURCHARGERATE, DD.SURCHARGE, DD.EDUCATIONCESSRATE, DD.EDUCATIONCESS,DD.NONDEDREASON,      
 CASE DD.ISBOOKENTRY WHEN 0 THEN 'No' WHEN 1 THEN 'Yes' END AS ISBOOKENTRY,DD.CERTNO,DD.CHALLANERETURNID,      
 CASE DD.TDSRATEASPER WHEN 'A' THEN 'IT Act' WHEN 'B' THEN 'DTAA' END AS TDSRATEASPER,DD.ACKNO,      
 CASE DD.ISGROSSINGUP WHEN 0 THEN 'NO' WHEN 1 THEN 'YES' END AS ISGROSSINGUP,     
 DD.EMAILDED, DD.CONTACTNODED, DD.ADDRESSDED, DD.IDENTNUMDED,         
 REMITTANCEID,COUNTRYID,DD.CORRECTIONSTATUS,      
 DD.SECTIONID,'COLOR-' + CAST(DD.CORRECTIONSTATUS AS VARCHAR) AS ROWCOLOR,       
 DD.BRANCHID, DD.FORMID, DD.QUARTER,DD.ISTAXINFOEDITABLE,DD.MODE  
 INTO #CORRDED   
 FROM CORRDEDUCTIONDETAIL DD WITH(NOLOCK)      
 WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER      
 SET @DED='#CORRDED';  
 IF (@FORMID=1)      
 BEGIN    
  IF (@CORRUPDATED = 0)    
  BEGIN          
   SELECT MIN(CORRECTIONSTATUS) CORRECTIONSTATUS,DEDUCTEESERIALNO INTO #Temp1 FROM CORREMPLOYEE E          
   WHERE BRANCHID=CAST(@BRANCHID AS VARCHAR) AND E.FORMID= CAST(@FORMID AS VARCHAR) AND E.QUARTER= CAST(@QUARTER AS VARCHAR)           
   GROUP BY DEDUCTEESERIALNO    
   SELECT (CAST(E.NAME AS VARCHAR(75)) + '(' + CAST(E.DEDUCTEESERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   ISNULL(D.REFERENCENO,'') REFERENCENO,   
   E.PAN,CASE WHEN E.PANFLAG='N' THEN 'Invalid' ELSE E.PANFLAG END AS PANFLAG , E.DEDUCTEESERIALNO AS DEDUCTEESLNO,      
   E.PANCOUNTER ,E.BRANCHID,E.FORMID,E.QUARTER,E.DEDUCTEESERIALNO ,E.CORRECTIONSTATUS     
   INTO #CORREMP1      
   FROM CORREMPLOYEE E LEFT JOIN DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID   
   WHERE E.BRANCHID=@BRANCHID AND E.FORMID=@FORMID AND E.QUARTER=@QUARTER AND (E.CORRECTIONSTATUS=5 OR E.CORRECTIONSTATUS=3 OR(E.CORRECTIONSTATUS=1 AND E.DEDUCTEEID IS Null))  
   UNION  
   SELECT (CAST(C.NAME AS VARCHAR(75)) + '(' + CAST(C.DEDUCTEESERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   (ISNULL(D.REFERENCENO,''))REFERENCENO,   
   C.PAN,CASE WHEN C.PANFLAG='N' THEN 'Invalid' ELSE C.PANFLAG END AS PANFLAG , C.DEDUCTEESERIALNO AS DEDUCTEESLNO,      
   C.PANCOUNTER ,C.BRANCHID,C.FORMID,C.QUARTER,C.DEDUCTEESERIALNO ,C.CORRECTIONSTATUS     
   FROM DEDUCTEE D   
    INNER JOIN EMPLOYEE N ON D.DEDUCTEEID = N.DEDUCTEEID  
    INNER JOIN CORREMPLOYEE C ON N.DEDUCTEEID = C.DEDUCTEEID  
    INNER JOIN #Temp1 EMP ON C.DEDUCTEESERIALNO=EMP.DEDUCTEESERIALNO AND C.CORRECTIONSTATUS=EMP.CORRECTIONSTATUS      
   WHERE D.BRANCHID=@BRANCHID AND C.FORMID=@FORMID AND C.QUARTER=@QUARTER    
   UNION  
   SELECT (CAST(D.NAME AS VARCHAR(75)) + '(' + CAST(E.SERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   (ISNULL(D.REFERENCENO,''))REFERENCENO,   
   D.PAN,'' AS PANFLAG , E.SERIALNO AS DEDUCTEESLNO,      
   0 AS PANCOUNTER ,@BRANCHID AS BRANCHID,@FORMID AS FORMID,@QUARTER AS QUARTER,E.SERIALNO ,1 AS CORRECTIONSTATUS     
   FROM DEDUCTEE D   
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID  
   WHERE D.BRANCHID=@BRANCHID AND   
   E.SERIALNO NOT IN (SELECT DEDUCTEESERIALNO FROM CORREMPLOYEE)  
   SET @DEDUCTEE='#CORREMP1';      
  END         
  ELSE       
  BEGIN            
      SELECT MAX(CORRECTIONSTATUS) CORRECTIONSTATUS,DEDUCTEESERIALNO INTO #Temp2 FROM CORREMPLOYEE E          
   WHERE BRANCHID=CAST(@BRANCHID AS VARCHAR) AND E.FORMID= CAST(@FORMID AS VARCHAR) AND E.QUARTER= CAST(@QUARTER AS VARCHAR)           
   GROUP BY DEDUCTEESERIALNO   
   SELECT (CAST(E.NAME AS VARCHAR(75)) + '(' + CAST(E.DEDUCTEESERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   ISNULL(D.REFERENCENO,'')REFERENCENO,   
   E.PAN,CASE WHEN E.PANFLAG='N' THEN 'Invalid' ELSE E.PANFLAG END AS PANFLAG , E.DEDUCTEESERIALNO AS DEDUCTEESLNO,      
   E.PANCOUNTER ,E.BRANCHID,E.FORMID,E.QUARTER,E.DEDUCTEESERIALNO ,E.CORRECTIONSTATUS     
   INTO #CORREMP2      
   FROM CORREMPLOYEE E LEFT JOIN DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID   
   WHERE E.BRANCHID=@BRANCHID AND E.FORMID=@FORMID AND E.QUARTER=@QUARTER AND (E.CORRECTIONSTATUS=5 OR E.CORRECTIONSTATUS=3 OR(E.CORRECTIONSTATUS=1 AND E.DEDUCTEEID IS Null))  
   UNION  
   SELECT (CAST(C.NAME AS VARCHAR(75)) + '(' + CAST(C.DEDUCTEESERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   (ISNULL(D.REFERENCENO,''))REFERENCENO,   
   C.PAN,CASE WHEN C.PANFLAG='N' THEN 'Invalid' ELSE C.PANFLAG END AS PANFLAG , C.DEDUCTEESERIALNO AS DEDUCTEESLNO,      
   C.PANCOUNTER ,C.BRANCHID,C.FORMID,C.QUARTER,C.DEDUCTEESERIALNO ,C.CORRECTIONSTATUS     
   FROM DEDUCTEE D   
    INNER JOIN EMPLOYEE N ON D.DEDUCTEEID = N.DEDUCTEEID  
    INNER JOIN CORREMPLOYEE C ON N.DEDUCTEEID = C.DEDUCTEEID  
    INNER JOIN #Temp2 EMP ON C.DEDUCTEESERIALNO=EMP.DEDUCTEESERIALNO AND C.CORRECTIONSTATUS=EMP.CORRECTIONSTATUS      
   WHERE D.BRANCHID=@BRANCHID AND C.FORMID=@FORMID AND C.QUARTER=@QUARTER    
   UNION  
   SELECT (CAST(D.NAME AS VARCHAR(75)) + '(' + CAST(E.SERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   (ISNULL(D.REFERENCENO,''))REFERENCENO,   
   D.PAN,'' AS PANFLAG , E.SERIALNO AS DEDUCTEESLNO,      
   0 AS PANCOUNTER ,@BRANCHID AS BRANCHID,@FORMID AS FORMID,@QUARTER AS QUARTER,E.SERIALNO ,1 AS CORRECTIONSTATUS     
   FROM DEDUCTEE D   
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID  
   WHERE D.BRANCHID=@BRANCHID AND   
   E.SERIALNO NOT IN (SELECT DEDUCTEESERIALNO FROM CORREMPLOYEE)  
   SET @DEDUCTEE='#CORREMP2';    
  END          
 END      
 ELSE      
 BEGIN      
  IF (@CORRUPDATED = 0)    
  BEGIN     
   SELECT MIN(CORRECTIONSTATUS) CORRECTIONSTATUS,DEDUCTEESERIALNO INTO #Temp3 FROM CORRNONEMPLOYEE E          
   WHERE BRANCHID=CAST(@BRANCHID AS VARCHAR) AND E.FORMID= CAST(@FORMID AS VARCHAR) AND E.QUARTER= CAST(@QUARTER AS VARCHAR)           
   GROUP BY DEDUCTEESERIALNO        
   SELECT (CAST(E.NAME AS VARCHAR(75)) + '(' + CAST(E.DEDUCTEESERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   ISNULL(D.REFERENCENO,'')REFERENCENO,   
   E.PAN,CASE WHEN E.PANFLAG='N' THEN 'Invalid' ELSE E.PANFLAG END AS PANFLAG , E.DEDUCTEESERIALNO AS DEDUCTEESLNO,      
   E.PANCOUNTER ,E.BRANCHID,E.FORMID,E.QUARTER,E.DEDUCTEESERIALNO ,E.CORRECTIONSTATUS   
   INTO #CORRNONEMP1      
   FROM CORRNONEMPLOYEE E LEFT JOIN DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID   
   WHERE E.BRANCHID=@BRANCHID AND E.FORMID=@FORMID AND E.QUARTER=@QUARTER AND (E.CORRECTIONSTATUS=5 OR E.CORRECTIONSTATUS=3 OR (E.CORRECTIONSTATUS=1 AND E.DEDUCTEEID IS Null))  
   UNION  
   SELECT (CAST(C.NAME AS VARCHAR(75)) + '(' + CAST(C.DEDUCTEESERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   (CASE WHEN LEN(ISNULL(D.REFERENCENO,''))=0 THEN ISNULL(D.REFERENCENO,'') ELSE ISNULL(D.REFERENCENO,'') END)REFERENCENO,   
   C.PAN,CASE WHEN C.PANFLAG='N' THEN 'Invalid' ELSE C.PANFLAG END AS PANFLAG , C.DEDUCTEESERIALNO AS DEDUCTEESLNO,      
   C.PANCOUNTER ,C.BRANCHID,C.FORMID,C.QUARTER,C.DEDUCTEESERIALNO ,C.CORRECTIONSTATUS   
   FROM DEDUCTEE D   
    INNER JOIN NONEMPLOYEE N ON D.DEDUCTEEID = N.DEDUCTEEID  
    INNER JOIN CORRNONEMPLOYEE C ON N.DEDUCTEEID = C.DEDUCTEEID  
    INNER JOIN #Temp3 EMP ON C.DEDUCTEESERIALNO=EMP.DEDUCTEESERIALNO AND C.CORRECTIONSTATUS=EMP.CORRECTIONSTATUS       
   WHERE D.BRANCHID=@BRANCHID AND C.FORMID=@FORMID AND C.QUARTER=@QUARTER   
   UNION  
   SELECT (CAST(D.NAME AS VARCHAR(75)) + '(' + CAST(E.SERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   (ISNULL(D.REFERENCENO,''))REFERENCENO,   
   D.PAN,'' AS PANFLAG , E.SERIALNO AS DEDUCTEESLNO,      
   0 AS PANCOUNTER,@BRANCHID AS BRANCHID,@FORMID AS FORMID,@QUARTER AS QUARTER,E.SERIALNO ,1 AS CORRECTIONSTATUS  
   FROM DEDUCTEE D   
    INNER JOIN NONEMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID  
   WHERE D.BRANCHID=@BRANCHID AND   
   E.SERIALNO NOT IN (SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE)           
   SET @DEDUCTEE='#CORRNONEMP1';     
  END  
  ELSE  
  BEGIN  
   SELECT MIN(CORRECTIONSTATUS) CORRECTIONSTATUS,DEDUCTEESERIALNO INTO #Temp4 FROM CORRNONEMPLOYEE E          
   WHERE BRANCHID=CAST(@BRANCHID AS VARCHAR) AND E.FORMID= CAST(@FORMID AS VARCHAR) AND E.QUARTER= CAST(@QUARTER AS VARCHAR)           
   GROUP BY DEDUCTEESERIALNO        
   SELECT (CAST(E.NAME AS VARCHAR(75)) + '(' + CAST(E.DEDUCTEESERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   ISNULL(D.REFERENCENO,'')REFERENCENO,   
   E.PAN,CASE WHEN E.PANFLAG='N' THEN 'Invalid' ELSE E.PANFLAG END AS PANFLAG , E.DEDUCTEESERIALNO AS DEDUCTEESLNO,      
   E.PANCOUNTER ,E.BRANCHID,E.FORMID,E.QUARTER,E.DEDUCTEESERIALNO ,E.CORRECTIONSTATUS   
   INTO #CORRNONEMP2      
   FROM CORRNONEMPLOYEE E LEFT JOIN DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID   
   WHERE E.BRANCHID=@BRANCHID AND E.FORMID=@FORMID AND E.QUARTER=@QUARTER AND (E.CORRECTIONSTATUS=5 OR E.CORRECTIONSTATUS=3 OR (E.CORRECTIONSTATUS=1 AND E.DEDUCTEEID IS Null))  
   UNION  
   SELECT (CAST(C.NAME AS VARCHAR(75)) + '(' + CAST(C.DEDUCTEESERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   (CASE WHEN LEN(ISNULL(D.REFERENCENO,''))=0 THEN ISNULL(D.REFERENCENO,'') ELSE ISNULL(C.REFERENCENO,'') END)REFERENCENO,   
   C.PAN,CASE WHEN C.PANFLAG='N' THEN 'Invalid' ELSE C.PANFLAG END AS PANFLAG , C.DEDUCTEESERIALNO AS DEDUCTEESLNO,      
   C.PANCOUNTER ,C.BRANCHID,C.FORMID,C.QUARTER,C.DEDUCTEESERIALNO ,C.CORRECTIONSTATUS   
   FROM DEDUCTEE D   
    INNER JOIN NONEMPLOYEE N ON D.DEDUCTEEID = N.DEDUCTEEID  
    INNER JOIN CORRNONEMPLOYEE C ON N.DEDUCTEEID = C.DEDUCTEEID  
    INNER JOIN #Temp4 EMP ON C.DEDUCTEESERIALNO=EMP.DEDUCTEESERIALNO AND C.CORRECTIONSTATUS=EMP.CORRECTIONSTATUS       
   WHERE D.BRANCHID=@BRANCHID AND C.FORMID=@FORMID AND C.QUARTER=@QUARTER   
   UNION  
   SELECT (CAST(D.NAME AS VARCHAR(75)) + '(' + CAST(E.SERIALNO AS VARCHAR(10)) + ')') AS NAME,   
   (ISNULL(D.REFERENCENO,''))REFERENCENO,   
   D.PAN,'' AS PANFLAG , E.SERIALNO AS DEDUCTEESLNO,      
   0 AS PANCOUNTER,@BRANCHID AS BRANCHID,@FORMID AS FORMID,@QUARTER AS QUARTER,E.SERIALNO ,1 AS CORRECTIONSTATUS  
   FROM DEDUCTEE D   
    INNER JOIN NONEMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID  
   WHERE D.BRANCHID=@BRANCHID AND   
   E.SERIALNO NOT IN (SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE)           
   SET @DEDUCTEE='#CORRNONEMP2';        
  END  
 END      
 SET @SQLWHERE = ' WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)            
      + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR)            
      + ' AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR);      
 IF (@CORRUPDATED = 0)            
  SET @SQLWHERE = @SQLWHERE+ ' AND DD.CORRECTIONSTATUS = 1 AND DD.CORRECTIONSTATUS=E.CORRECTIONSTATUS';            
 ELSE       
 BEGIN            
  SET @SQLWHERE = ' LEFT JOIN ( SELECT MAX(CORRECTIONSTATUS) CS,E.DEDUCTEESERIALNO FROM '+@SQLEMPNONEMP+       
   ' WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND E.FORMID='+CAST(@FORMID AS VARCHAR)+' AND E.QUARTER='+CAST(@QUARTER AS VARCHAR)+' GROUP BY DEDUCTEESERIALNO       
   ) CE ON E.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO AND E.CORRECTIONSTATUS=CE.CS '+       
 @SQLWHERE + ' AND DD.CORRECTIONSTATUS <> ' + CAST(@CORRUPDATED AS VARCHAR);      
 END      
 SET @DEFAULTCOLUMN='DD.CORRECTION,DD.DEDUCTIONSLNO,NAME,REFERENCENO,E.PAN,CASE WHEN '+CAST(@FORMID AS VARCHAR(1)) +'=1 THEN TS.SECTIONNAME+''-''+TS.TAXNAME ELSE TS.SECTIONNAME END AS SECTIONNAME,      
 DD.PAYMENTMADE, DD.PAYMENTDATE,DD.TAXRATE, DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.INCOMETAXRATE,       
 DD.INCOMETAX, DD.SURCHARGERATE, DD.SURCHARGE, DD.EDUCATIONCESSRATE, DD.EDUCATIONCESS, DD.NONDEDREASON AS NONDEDREASON,      
 DD.ISBOOKENTRY ,DD.CERTNO,      
 (SELECT DISTINCT TOP 1 CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = DD.BRANCHID AND CHALLANERETURNID = DD.CHALLANERETURNID) AS CHASLNO,      
 DD.TDSRATEASPER ,DD.ACKNO,      
 CASE WHEN DD.FORMID=3 THEN (SELECT PARTICULARS FROM REMITTANCES WHERE ID=DD.REMITTANCEID) ELSE '''' END AS REMITTANCE,       
 CASE WHEN DD.FORMID=3 THEN (SELECT COUNTRYNAME FROM COUNTRYMASTER WHERE COUNTRYCODE=DD.COUNTRYID) ELSE '''' END AS COUNTRY,      
 DD.ISGROSSINGUP,DD.EMAILDED, DD.CONTACTNODED, DD.ADDRESSDED, DD.IDENTNUMDED, REMITTANCEID,COUNTRYID,DD.CORRECTIONSTATUS,E.PANFLAG, E.DEDUCTEESLNO,      
 DD.SECTIONID,ROWCOLOR, 0 AS TOTALPURCHASEVALUE,DD.FORMID, DD.QUARTER,DD.ISTAXINFOEDITABLE,E.PANCOUNTER,DD.MODE,0 AS DEDNR,''0'' AS DEDPERESTINDIA';      
 SET @SQLQUERY =    
  ' SELECT ROW_NUMBER() OVER (ORDER BY DD.DEDUCTIONSLNO) RECNO, ' + @DEFAULTCOLUMN +    
  ' INTO #FINAL FROM ' + @DED + ' DD ' +      
  ' INNER JOIN ' + @DEDUCTEE + ' E ON DD.DEDUCTEESERIALNO = E.DEDUCTEESERIALNO ' +      
  ' INNER JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID'   
 SET @SQLQUERY = @SQLQUERY + @SQLWHERE --+ ' AND RECNO BETWEEN '    
    SET @SQLQUERY = @SQLQUERY + '; SELECT * FROM #FINAL WHERE RECNO BETWEEN '   
  + CAST(@STARTROW AS VARCHAR) + ' AND ' + CAST(@LASTROW AS VARCHAR) + ' Order By DEDUCTIONSLNO;'       
 EXECUTE SP_EXECUTESQL @SQLQUERY;   
 PRINT @SQLQUERY  
 IF OBJECT_ID('tempdb..#CORRDED') is not null     
  DROP TABLE #CORRDED     
 IF OBJECT_ID('tempdb..#Temp1') is not null     
  DROP TABLE #Temp1     
 IF OBJECT_ID('tempdb..#Temp2') is not null     
  DROP TABLE #Temp2     
 IF OBJECT_ID('tempdb..#Temp3') is not null     
  DROP TABLE #Temp3   
 IF OBJECT_ID('tempdb..#Temp4') is not null     
  DROP TABLE #Temp4           
 IF @FORMID=1     
 BEGIN     
  IF OBJECT_ID('tempdb..#CORREMP1') is not null     
   DROP TABLE #CORREMP1     
  IF OBJECT_ID('tempdb..#CORREMP2') is not null     
   DROP TABLE #CORREMP2       
 END     
 ELSE     
  BEGIN     
  IF OBJECT_ID('tempdb..#CORRNONEMP1') is not null     
   DROP TABLE #CORRNONEMP1    
  IF OBJECT_ID('tempdb..#CORRNONEMP2') is not null     
   DROP TABLE #CORRNONEMP2        
  END     
 END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDEDUCTIONVALIDPANPERCENTAGE')
DROP PROCEDURE USP_TDS_GETCORRDEDUCTIONVALIDPANPERCENTAGE
GO
CREATE PROCEDURE [USP_TDS_GETCORRDEDUCTIONVALIDPANPERCENTAGE] 
					@BRANCHID INT,
					@FORMID SMALLINT,
					@QUARTER SMALLINT,
					@CORRECTIONTYPE VARCHAR(5),
					@FINANCIALYEAR INT
AS
BEGIN
        DECLARE @PANTABLE TABLE(ID INT IDENTITY(1,1),ISVALID SMALLINT, NONDEDREASON INT)
        DECLARE @DEDUCTEE TABLE(DEDUCTEESERIALNO INT, ISVALID BIT);       			
		DECLARE @TOTALROWCOUNT INT,@VALIDCOUNT INT, @VALIDPERCENTAGE INT;
		SET @VALIDPERCENTAGE =0 
       	IF(@FORMID=1) 
		   BEGIN	
				INSERT INTO @DEDUCTEE 
				SELECT CE.DEDUCTEESERIALNO , CASE WHEN PAN LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 1 ELSE 0 END AS ISVALID
				FROM CORREMPLOYEE CE WITH(NOLOCK)
				INNER JOIN
				(
					SELECT DEDUCTEESERIALNO, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS 
					FROM CORREMPLOYEE CE WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER   
					GROUP BY DEDUCTEESERIALNO
				)C ON C.DEDUCTEESERIALNO = CE.DEDUCTEESERIALNO AND C.CORRECTIONSTATUS = CE.CORRECTIONSTATUS
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER   
           END
        ELSE
            BEGIN	
				INSERT INTO @DEDUCTEE 
				SELECT CNE.DEDUCTEESERIALNO , CASE WHEN PAN LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 1 ELSE 0 END AS ISVALID
				FROM CORRNONEMPLOYEE  CNE WITH(NOLOCK)
				INNER JOIN
				(
					SELECT DEDUCTEESERIALNO, MAX(CORRECTIONSTATUS)CORRECTIONSTATUS 
					FROM CORRNONEMPLOYEE CE WITH(NOLOCK)
					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER   
					GROUP BY DEDUCTEESERIALNO
				)C ON C.DEDUCTEESERIALNO = CNE.DEDUCTEESERIALNO AND C.CORRECTIONSTATUS = CNE.CORRECTIONSTATUS 
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER   
           END
		 IF(@CORRECTIONTYPE='C3')
			BEGIN 
				INSERT INTO @PANTABLE
				SELECT CE.ISVALID, CDD.NONDEDREASON										
				FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
				INNER JOIN CORRCHALLANDETAIL CCD WITH(NOLOCK) ON CCD.CHALLANERETURNID=CDD.CHALLANERETURNID  AND CCD.BRANCHID=CDD.BRANCHID AND 
																							 CCD.FORMID=CDD.FORMID AND CCD.QUARTER=CDD.QUARTER
				INNER JOIN @DEDUCTEE CE ON CDD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO
				WHERE CDD.CORRECTIONSTATUS IN(2,5,4) AND CCD.CORRECTIONSTATUS = 2 AND CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER
			END
		 ELSE IF(@CORRECTIONTYPE='C9')
			BEGIN 
				INSERT INTO @PANTABLE 
				SELECT CE.ISVALID, CDD.NONDEDREASON												
				FROM  CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) 
				INNER JOIN CORRCHALLANDETAIL CCD WITH(NOLOCK) ON CCD.CHALLANERETURNID=CDD.CHALLANERETURNID  AND CCD.BRANCHID=CDD.BRANCHID AND 
																			CCD.FORMID=CDD.FORMID AND CCD.QUARTER=CDD.QUARTER
				INNER JOIN @DEDUCTEE CE ON CDD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO
				WHERE CCD.CORRECTIONSTATUS IN (5,7) AND CCD.BRANCHID=@BRANCHID AND CCD.FORMID=@FORMID AND CCD.QUARTER=@QUARTER
			 END
		SELECT @TOTALROWCOUNT=COUNT(ID) FROM @PANTABLE
		SELECT @VALIDCOUNT=COUNT(ID) FROM @PANTABLE WHERE ISVALID=1 OR (ISVALID = 0 AND NONDEDREASON = 3)
	    IF(@TOTALROWCOUNT>0 AND @VALIDCOUNT>0)
		  BEGIN
			SELECT @VALIDPERCENTAGE=(@VALIDCOUNT/@TOTALROWCOUNT) *100
	      END
        SELECT @VALIDPERCENTAGE 
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrDeductorDetails')
DROP PROCEDURE USP_TDS_GetCorrDeductorDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrDeductorDetails]
	@BRANCHID INT,
	@FORMID INT,	
	@QUARTER INT
AS
	BEGIN
		SELECT  CD.BRANCHID,CB.BRANCHNAME,CD.FORMID,CD.[QUARTER],CD.DEDUCTORID,CD.DEDUCTORNAME,CD.ADDRESS1,CD.ADDRESS2,CD.ADDRESS3,CD.ADDRESS4,CD.ADDRESS5,
				CD.PINCODE,CD.STATEID,CD.ISADDRCHANGED,CD.STDCODE,CD.PHONENO,CD.EMAILADDRESS,CD.PAN,CD.[TAN],CD.FINANCIALYEAR,CD.STATUSID,CD.DEDUCTORTYPEID,
				CD.LASTDEDUCTORTYPEID,CD.GOVTADDSTATEID,CD.GOVTADDPAOCODE,CD.GOVTADDPAOREGNNO,CD.GOVTADDDDOCODE,CD.GOVTADDDDOREGNNO,CD.GOVTADDMINISTRY,CD.GOVTADDOTHERNAME,				
				CD.RPNAME,CD.RPDESIGNATION,CD.RPADDRESS1,CD.RPADDRESS2,CD.RPADDRESS3,CD.RPADDRESS4,CD.RPADDRESS5,CD.RPSTATEID,CD.RPPINCODE,CD.RPISADDRCHANGED,CD.RPSTDCODE,CD.RPPHONENO,CD.RPMOBILENO,
				CD.RPEMAILADDRESS,CD.CORRECTIONSTATUS, CD.GOVTADDAIN,ALTERNATESTD, ALTERNATEPHONE, ALTERNATEEMAIL,RPALTERNATESTD, RPALTERNATEPHONE, RPALTERNATEEMAIL,
				CATEGORYCODE,TANREGISTRATION, ISNULL(GSTIN,'') AS GSTIN
		FROM	CORRDEDUCTOR CD WITH(NOLOCK) 
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CD.BRANCHID = CB.BRANCHID
		INNER JOIN DEDUCTORTYPE DT WITH(NOLOCK) ON DT.DEDUCTORTYPEID = CD.DEDUCTORTYPEID
		WHERE   CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.[QUARTER] = @QUARTER; 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDEDUCTORSTATUS')
DROP PROCEDURE USP_TDS_GETCORRDEDUCTORSTATUS
GO
CREATE PROCEDURE USP_TDS_GETCORRDEDUCTORSTATUS
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
	 SELECT DEDUCTORID FROM CORRDEDUCTOR WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 6
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDEDUCTORTAN')
DROP PROCEDURE USP_TDS_GETCORRDEDUCTORTAN
GO
CREATE PROCEDURE USP_TDS_GETCORRDEDUCTORTAN
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
   BEGIN
		SELECT CD.TAN FROM CORRDEDUCTOR CD
		INNER JOIN
		(
			SELECT MAX(CORRECTIONSTATUS)CORRECTIONSTATUS FROM CORRDEDUCTOR WITH(NOLOCK) 
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		)C ON CD.CORRECTIONSTATUS = C.CORRECTIONSTATUS
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDEFAULTDETAILS')
DROP PROCEDURE USP_TDS_GETCORRDEFAULTDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETCORRDEFAULTDETAILS]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN
    DECLARE @DEFAULTID INT
    SELECT @DEFAULTID=DEFAULTID FROM CORRDEFAULTDETAILS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
	SELECT * FROM CORRDEFAULTDETAILS WITH(NOLOCK) WHERE DEFAULTID=@DEFAULTID
	SELECT * FROM CORRDEFAULTSTATEMENT WITH(NOLOCK) WHERE DEFAULTID=@DEFAULTID
	SELECT * FROM CORRDEFAULTSHORTDEDS WITH(NOLOCK) WHERE DEFAULTID=@DEFAULTID
	SELECT * FROM CORRDEFAULTSHORTPAYMENTS WITH(NOLOCK) WHERE DEFAULTID=@DEFAULTID
	SELECT * FROM CORRDEFAULTLATEPAYMENTS WITH(NOLOCK) WHERE DEFAULTID=@DEFAULTID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDISPLAYLINKEDCHALLAN')
DROP PROCEDURE USP_TDS_GETCORRDISPLAYLINKEDCHALLAN
GO
CREATE PROCEDURE [USP_TDS_GETCORRDISPLAYLINKEDCHALLAN]                
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,  
@CHALLANERETURNID INT                
AS                
 BEGIN       
   SELECT SUM(CD.TOTALDEDUCTED)TOTALDEDUCTED, CD.CHALLANERETURNID   
  INTO #DEDUCTION  
  FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)   
  INNER JOIN  
  (  
   SELECT CD.CORRECTIONSTATUS,CDD.CHALLANERETURNID ,CASE WHEN CD.CORRECTIONSTATUS = 4 THEN 0 ELSE SUM(CDD.TOTALDEDUCTED) END AS TOTALDEDUCTED, CDD.DEDUCTIONSERIALNO FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)  
   INNER JOIN  
   (  
     SELECT MAX(CORRECTIONSTATUS) CORRECTIONSTATUS, DEDUCTIONSERIALNO FROM CORRDEDUCTIONDETAIL   WITH(NOLOCK)
       WHERE BRANCHID = @BRANCHID AND FORMID= @FORMID AND QUARTER = @QUARTER   
       GROUP BY DEDUCTIONSERIALNO  
   )CD  
   ON CD.CORRECTIONSTATUS = CDD.CORRECTIONSTATUS  
   AND CD.DEDUCTIONSERIALNO = CDD.DEDUCTIONSERIALNO  
   WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID =@FORMID AND CDD.QUARTER = @QUARTER --AND CDD.DEDUCTIONSERIALNO = 3  
   GROUP BY CDD.CHALLANERETURNID , CDD.DEDUCTIONSERIALNO, CD.CORRECTIONSTATUS  
  )CD ON CD.DEDUCTIONSERIALNO = CDD.DEDUCTIONSERIALNO  
  AND CD.CORRECTIONSTATUS = CDD.CORRECTIONSTATUS 
  WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID =@FORMID AND CDD.QUARTER = @QUARTER  
  GROUP BY CD.CHALLANERETURNID  
   SELECT CCD.CHALLANERETURNID, SUM(ISNULL(CCD.INCOMETAX,0) + ISNULL(CCD.SURCHARGE,0) + ISNULL(CCD.EDUCATIONCESS,0))CHALLANTOTAL   
   INTO #CHALLAN  
   FROM CORRCHALLANDETAIL CCD  WITH(NOLOCK)
   INNER JOIN  
   (  
    SELECT MAX(CORRECTIONSTATUS)CORRECTIONSTATUS , CHALLANSERIALNO  FROM CORRCHALLANDETAIL WITH(NOLOCK)   
    WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  
    GROUP BY CHALLANSERIALNO  
   )CC  
   ON CC.CHALLANSERIALNO = CCD.CHALLANSERIALNO  
   AND CC.CORRECTIONSTATUS = CCD.CORRECTIONSTATUS  
   WHERE CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.QUARTER = @QUARTER  
   GROUP BY CCD.CHALLANERETURNID  
 SELECT C.CHALLANTOTAL , (C.CHALLANTOTAL - ISNULL(D.TOTALDEDUCTED,0)) AMOUNTAVAILTOLINK FROM #DEDUCTION D   
 RIGHT JOIN #CHALLAN C ON D.CHALLANERETURNID = C.CHALLANERETURNID  
 WHERE C.CHALLANERETURNID = @CHALLANERETURNID   
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRDISPLAYLINKEDCHALLANDETAILS')
DROP PROCEDURE USP_TDS_GETCORRDISPLAYLINKEDCHALLANDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETCORRDISPLAYLINKEDCHALLANDETAILS] 
 @STARTROW INT,    
  @PAGESIZE INT,    
  @BRANCHID INT,    
  @FORMID SMALLINT,    
  @QUARTER SMALLINT,    
  @SECTIONID INT    
AS    
BEGIN    
 SET NOCOUNT ON    
 DECLARE @FIRSTREC INT, @LASTREC INT    
 SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE    
 SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);    
   DECLARE @SQLQUERY NVARCHAR(MAX)    
   SET @SQLQUERY='SELECT ID=IDENTITY(INT,1,1), CCD.CHALLANSERIALNO, CCD.CHALLANID,CCD.BANKCHALLANNO,CCD.CHALLANPAIDDATE, CCD.SECTIONID,CCD.INCOMETAX,CCD.SURCHARGE,    
               CCD.EDUCATIONCESS,CCD.CHALLANTOTAL,  CASE WHEN CCD.CHEQUENO = ''0'' THEN '''' ELSE CCD.CHEQUENO END AS CHEQUENO ,CCD.CHEQUEDATE,CCD.CHEQUEDRAWNON,CCD.CORRECTIONSTATUS, ISNULL(RB.BSRCODE,'''') AS BSRCODE,    
               TS.TAXNAME AS SECTIONNAME, SUM(CC.TOTALDEDUCTED) AS TOTALDEDUCTED,CCD.CHALLANERETURNID, CCD.ISCOMPANY, ISNULL(CCD.PENDINGAMOUNT,0)PENDINGAMOUNT,
				ISLINKED,TRNVOUCHERNO
           INTO #TEMP    
          FROM CORRCHALLANDETAIL CCD  WITH(NOLOCK)    
          LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CCD.BANKID=RB.BANKID    
          LEFT JOIN REMITTINGBANK RBLAST WITH(NOLOCK)  ON CCD.LASTBANKID=RBLAST.BANKID    
          INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CCD.SECTIONID=TS.SECTIONID    
          LEFT JOIN    
			(    
			  SELECT CASE WHEN(C.CORRECTIONSTATUS = 4 ) THEN 0 ELSE SUM(CDD.TOTALDEDUCTED)  END AS  TOTALDEDUCTED , CDD.CHALLANERETURNID, CDD.DEDUCTIONSERIALNO, CASE WHEN CDD.DEDUCTIONSERIALNO IS NULL THEN 0 ELSE 1 END AS ISLINKED
			  FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)    
			  INNER JOIN    
			  (    
				 SELECT MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS,DEDUCTIONSERIALNO FROM CORRDEDUCTIONDETAIL  WITH(NOLOCK)    
				   WHERE BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+ ' AND    
				 FORMID='+ CAST(@FORMID AS VARCHAR)+ ' AND    
				 QUARTER=' +CAST (@QUARTER AS VARCHAR) + '    
				 GROUP BY DEDUCTIONSERIALNO    
			  )C    
			 ON    
			 C.CORRECTIONSTATUS = CDD.CORRECTIONSTATUS AND    
			 C.DEDUCTIONSERIALNO = CDD.DEDUCTIONSERIALNO    
			 WHERE CDD.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+ ' AND CDD.FORMID='+ CAST(@FORMID AS VARCHAR)+ ' AND CDD.QUARTER=' +CAST (@QUARTER AS VARCHAR) + '    
			 GROUP BY CDD.CHALLANERETURNID, CDD.DEDUCTIONSERIALNO,C.CORRECTIONSTATUS    
		 )CC    
		 ON CC.CHALLANERETURNID=CCD.CHALLANERETURNID    
		 INNER JOIN    
		 (    
		  SELECT MAX(CORRECTIONSTATUS)  CORRECTIONSTATUS , CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE    
		  BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+ ' AND    
		  FORMID='+ CAST(@FORMID AS VARCHAR)+ '  AND    
		  QUARTER=' +CAST (@QUARTER AS VARCHAR) + ' GROUP BY CHALLANERETURNID    
		 )A ON CCD.CORRECTIONSTATUS=A.CORRECTIONSTATUS AND CCD.CHALLANERETURNID=A.CHALLANERETURNID    
		 WHERE CCD.BRANCHID='+ CAST(@BRANCHID AS VARCHAR)+ '  AND CCD.FORMID='+ CAST(@FORMID AS VARCHAR)+ ' AND CCD.QUARTER=' +CAST (@QUARTER AS VARCHAR)+'    
		AND CCD.CHALLANTOTAL <> 0'    
 IF (@SECTIONID<>-1)    
     SET @SQLQUERY=@SQLQUERY+' AND CCD.SECTIONID='+CAST(@SECTIONID AS VARCHAR)+''    
 SET @SQLQUERY=@SQLQUERY+' GROUP BY CCD.CHALLANSERIALNO,CCD.CHALLANID, CCD.BANKCHALLANNO,CCD.CHALLANPAIDDATE,CCD.SECTIONID , CCD.INCOMETAX, CCD.SURCHARGE,CCD.EDUCATIONCESS,CCD.CHALLANTOTAL,    
     CCD.CHEQUENO,CCD.CHEQUEDATE,CCD.CHEQUEDRAWNON,CCD.CORRECTIONSTATUS, RB.BSRCODE, TS.TAXNAME,CCD.CHALLANERETURNID,CCD.ISCOMPANY, PENDINGAMOUNT,ISLINKED,TRNVOUCHERNO
      ORDER BY CCD.CHALLANSERIALNO'    
 SET @SQLQUERY=@SQLQUERY+' ;SELECT * FROM #TEMP WHERE ID > '+CAST(@FIRSTREC AS VARCHAR)+ ' AND ID < '+CAST(@LASTREC AS VARCHAR)    
 EXECUTE SP_EXECUTESQL @SQLQUERY    
-- PRINT  @SQLQUERY
  SET NOCOUNT OFF    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrectionDetail')
DROP PROCEDURE USP_TDS_GetCorrectionDetail
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrectionDetail] 
@BRANCHID INT,                  
@FORMID INT,                  
@QUARTER INT                  
AS                  
 BEGIN                  
   DECLARE @TOTALDEDUCTIONCOUNT INT;    
   DECLARE @TOTALCHALLANCOUNT INT;         
   SELECT @TOTALDEDUCTIONCOUNT= COUNT(DEDUCTIONSERIALNO)  
   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID 
	AND QUARTER=@QUARTER AND CORRECTIONSTATUS=1     
   SELECT @TOTALCHALLANCOUNT= COUNT(*)  
   FROM CORRCHALLANDETAIL WITH(NOLOCK) 
   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID 
   AND QUARTER=@QUARTER AND CORRECTIONSTATUS=1     
  SELECT TOP 1 A.ERETURNGENDATE AS FILECREATIONDATE, A.ORGNUM AS ORIGINALRRNO,
			CDD.TAN ,CD.FILEDDATE, @TOTALDEDUCTIONCOUNT AS TOTALDEDUCTIONCOUNT ,                  
			@TOTALCHALLANCOUNT AS TOTALCHALLANCOUNT, 
			ISNULL(
					(
						SELECT TOP 1 REVNUM 
						FROM ACKNOREV AR 
						WHERE A.ACKID = AR.ACKID 
						ORDER BY REVISENUMBER DESC
					),A.ORGNUM
				  ) AS REVISERRNO 
  FROM ACKNO A WITH(NOLOCK)
	  INNER JOIN CORRECTIONDETAILS CD WITH(NOLOCK) 
			ON CD.BRANCHID = A.BRANCHID AND CD.FORMID =A.FORMID AND CD.QUARTER= A.QUARTER 
	  INNER JOIN CORRDEDUCTOR CDD WITH(NOLOCK)
			ON CDD.BRANCHID = A.BRANCHID AND CDD.FORMID = A.FORMID AND CDD.QUARTER = A.QUARTER
	  INNER JOIN
	  (
		SELECT MAX(DEDUCTORID)DEDUCTORID 
		FROM CORRDEDUCTOR 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
	  )D ON D.DEDUCTORID = CDD.DEDUCTORID
	  LEFT JOIN ACKNOREV AR ON A.ACKID = AR.ACKID AND AR.REVISENUMBER = CD.REVISENUMBER
  WHERE A.BRANCHID = @BRANCHID AND A.FORMID = @FORMID AND A.QUARTER = @QUARTER 
  ORDER BY CD.REVISENUMBER DESC              
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRECTIONDETAILS')
DROP PROCEDURE USP_TDS_GETCORRECTIONDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETCORRECTIONDETAILS]
				@BRANCHID INT,
				@FORMID SMALLINT,
				@QUARTER SMALLINT
AS
BEGIN
	SELECT TOP 1 BRANCHID,FORMID,QUARTER,ISNULL(REVISENUMBER,0) AS REVISENUMBER,
				 ISVALIDCORRERETURN,ISFINALUPDATE,ISNULL(ISCANCELLED,0) AS ISCANCELLED,FILEDDATE
	  FROM CORRECTIONDETAILS  WITH(NOLOCK)
	 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
  ORDER BY REVISENUMBER DESC
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrEmployeeAutocompleteForSalary')
DROP PROCEDURE USP_TDS_GetCorrEmployeeAutocompleteForSalary
GO
CREATE PROCEDURE [USP_TDS_GetCorrEmployeeAutocompleteForSalary]
	@BRANCHID INT,
	@PREFIXTEXT NVARCHAR(MAX),
	@RECORDCOUNT INT
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY = 'SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + ' AUTOCOMPLETE.NAME + ''('' + CAST(DEDUCTEESERIALNO AS VARCHAR) + '')-'' + AUTOCOMPLETE.PAN AS NAME,
								CAST(DEDUCTEESERIALNO AS VARCHAR(30)) + ''-'' + CAST(AUTOCOMPLETE.TOTALTDS AS VARCHAR(30)) AS DEDUCTEESERIALNO 
								FROM (
										SELECT D.NAME AS NAME,D.PAN AS PAN,E.SERIALNO AS DEDUCTEESERIALNO,ISNULL(DD.TOTALTDS,0) AS TOTALTDS
										FROM   DEDUCTEE D INNER JOIN EMPLOYEE E  WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
														  INNER JOIN (
																		SELECT DEDUCTEEID,SUM(TOTALDEDUCTED) TOTALTDS FROM DEDUCTIONDETAIL WITH(NOLOCK)
																		WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' GROUP BY DEDUCTEEID) DD ON D.DEDUCTEEID = DD.DEDUCTEEID
														  LEFT JOIN  (
																		SELECT NAME,PAN,CSD.DEDUCTEESERIALNO 
																		FROM   CORREMPLOYEE CE WITH(NOLOCK) LEFT JOIN CORRSALARYDETAIL CSD WITH(NOLOCK) ON CE.DEDUCTEESERIALNO = CSD.DEDUCTEESERIALNO AND CSD.BRANCHID = CE.BRANCHID
																		WHERE  CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CSD.CORRECTIONSTATUS = 1 AND CE.QUARTER = 4 AND CE.FORMID = 1) AS CORRSAL
																		ON D.NAME = CORRSAL.NAME AND D.PAN = CORRSAL.PAN
						WHERE   D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CORRSAL.NAME IS NULL AND CORRSAL.PAN IS NULL 
																				AND D.DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM CORREMPLOYEE WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = 1 AND QUARTER = 4 AND DEDUCTEEID IS NOT NULL)
						UNION
						SELECT CE.NAME AS NAME,CE.PAN AS PAN,CE.DEDUCTEESERIALNO,ISNULL(CSD.TOTALTDS,0) AS TOTALTDS
						FROM   CORRSALARYDETAIL CSD WITH(NOLOCK) 
						INNER JOIN 
						(
							SELECT NAME,PAN,DEDUCTEESERIALNO,FORMID,QUARTER,BRANCHID,MAX(CORRECTIONSTATUS)CORRECTIONSTATUS
							FROM CORREMPLOYEE WITH(NOLOCK) 
							WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = 1 AND QUARTER = 4 
							GROUP BY NAME,PAN,DEDUCTEESERIALNO,FORMID,QUARTER,BRANCHID
						) CE ON CSD.DEDUCTEESERIALNO = CE.DEDUCTEESERIALNO AND CSD.BRANCHID = CE.BRANCHID
						WHERE  CSD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CE.FORMID = 1 AND CE.QUARTER = 4 AND CSD.CORRECTIONSTATUS = 4 AND RECORDSTATUS = 1
						UNION	
						SELECT NAME,PAN,CE.DEDUCTEESERIALNO,ISNULL(DD.TOTALTDS,0) AS TOTALTDS 
						FROM   CORREMPLOYEE CE WITH(NOLOCK) LEFT JOIN CORRSALARYDETAIL CSD  WITH(NOLOCK) ON CE.DEDUCTEESERIALNO = CSD.DEDUCTEESERIALNO AND CSD.BRANCHID = CE.BRANCHID
											   LEFT JOIN (SELECT DEDUCTEESERIALNO,SUM(TOTALDEDUCTED) TOTALTDS 
														  FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
														  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = 1 GROUP BY DEDUCTEESERIALNO) DD ON CE.DEDUCTEESERIALNO = DD.DEDUCTEESERIALNO
						WHERE  CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CE.FORMID = 1 AND CE.QUARTER = 4 AND CSD.DEDUCTEESERIALNO IS NULL) AUTOCOMPLETE
						WHERE  AUTOCOMPLETE.NAME LIKE ''' + CAST(@PREFIXTEXT AS VARCHAR(75)) + '%'''
		EXECUTE SP_EXECUTESQL @SQLQUERY;
		--PRINT @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORREMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_GETCORREMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETCORREMPLOYEEDETAIL]   
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @DEDUCTEESLNO INT
AS
 BEGIN
  SELECT TOP 1 CE.BRANCHID,CE.FORMID,CE.[QUARTER],CE.DEDUCTEESERIALNO,CE.SALUTATION,CE.NAME,
      CE.ADDRESS1,CE.ADDRESS2,CE.ADDRESS3,CE.ADDRESS4,CE.ADDRESS5,CE.STATEID,SM.STATENAME,CE.PINCODE,CE.GENDER,ISNULL(CE.ISSENIORCITIZEN,0)ISSENIORCITIZEN ,CE.DESIGNATION,
      CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO,CE.PHONENO,CE.EMAILADDRESS,CE.PAN,ISNULL(CE.PANREFERENCE,'') PANREFERENCE,CE.LASTPAN,CE.UPDATEINDICATOR,CE.CORRECTIONSTATUS
  FROM         CORREMPLOYEE CE WITH(NOLOCK) LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON CE.STATEID= SM.STATEID
  WHERE        CE.BRANCHID=@BRANCHID AND CE.FORMID=@FORMID AND CE.[QUARTER]=@QUARTER AND CE.DEDUCTEESERIALNO=@DEDUCTEESLNO ORDER BY CORRECTIONSTATUS DESC;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORREMPLOYEESCOUNT')
DROP PROCEDURE USP_TDS_GETCORREMPLOYEESCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETCORREMPLOYEESCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT COUNT(DEDUCTEESERIALNO)
		FROM   CORREMPLOYEE WITH(NOLOCK)
		WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND UPDATEINDICATOR = 1 AND CORRECTIONSTATUS = 5;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORREMPLOYEESPAGED')
DROP PROCEDURE USP_TDS_GETCORREMPLOYEESPAGED
GO
CREATE PROCEDURE [USP_TDS_GETCORREMPLOYEESPAGED]
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		/* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
		SET NOCOUNT ON
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		WITH TEMPRESULT AS
		(
			SELECT ROW_NUMBER() OVER(ORDER BY CE.DEDUCTEESERIALNO) AS ROWNUM,CE.BRANCHID,CE.FORMID,CE.[QUARTER],CE.DEDUCTEESERIALNO,CE.SALUTATION,CE.NAME,
				   CE.ADDRESS1,CE.ADDRESS2,CE.ADDRESS3,CE.ADDRESS4,CE.ADDRESS5,CE.STATEID,SM.STATENAME,CE.PINCODE,CE.GENDER,CE.ISSENIORCITIZEN,CE.DESIGNATION,
				   CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO,CE.PHONENO,CE.EMAILADDRESS,CE.PAN,CE.PANREFERENCE,CE.LASTPAN,CE.UPDATEINDICATOR,CE.CORRECTIONSTATUS
			FROM   CORREMPLOYEE CE WITH(NOLOCK) LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON CE.STATEID= SM.STATEID
			WHERE  BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND UPDATEINDICATOR = 1 AND  CORRECTIONSTATUS = 5
		)
		SELECT TOP (@LASTREC-1) *
		FROM TEMPRESULT
		WHERE ROWNUM > @FIRSTREC
		AND ROWNUM < @LASTREC
		/* TURN NOCOUNT BACK OFF */
		SET NOCOUNT OFF
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrEmps')
DROP PROCEDURE USP_TDS_GetCorrEmps
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrEmps]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@PREFIXTEXT NVARCHAR(MAX),
	@RECORDCOUNT INT
AS
	BEGIN
		SELECT *
		INTO #DEDUCTEE
		FROM DEDUCTEE 
		WHERE BRANCHID = @BRANCHID
		SELECT *
		INTO #CORREMPLOYEE 
			FROM CORREMPLOYEE 
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND QUARTER = @QUARTER 
			AND DEDUCTEEID IS NOT NULL
		SELECT NAME + '-' + PAN AS PAN
		INTO #CORRNAMEPAN
			FROM CORREMPLOYEE
		WHERE BRANCHID = @BRANCHID
			AND FORMID = @FORMID
			AND QUARTER = @QUARTER
		SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CORRECTIONSTATUS
			INTO #DEDUCTEESERIALNO
				FROM  CORREMPLOYEE WITH(NOLOCK) 
			WHERE BRANCHID = @BRANCHID  
				AND FORMID = @FORMID 
				AND QUARTER = @QUARTER 
				GROUP BY DEDUCTEESERIALNO
		DECLARE @QUERY NVARCHAR(MAX),@QRY NVARCHAR(MAX),@QRY1 NVARCHAR(MAX);		
		SET @QRY = 'SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + ' D.NAME 
				+ ''('' + CAST(E.SERIALNO AS VARCHAR) + '')'' + ''-''+ D.PAN AS NAME, 
					E.SERIALNO AS DEDUCTEESERIALNO
			FROM  #DEDUCTEE D WITH(NOLOCK) 
				INNER JOIN EMPLOYEE E WITH(NOLOCK) 
					ON D.DEDUCTEEID = E.DEDUCTEEID
			WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
				+ ' AND D.DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM #CORREMPLOYEE)'
				+ ' AND D.NAME + ''-'' + D.PAN NOT IN (SELECT PAN FROM #CORRNAMEPAN)'
		SET @QRY1 ='SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + ' CE.NAME +
				 ''('' + CAST(CE.DEDUCTEESERIALNO AS VARCHAR) + '')'' + ''-''+ CE.PAN AS NAME, 
					CE.DEDUCTEESERIALNO
			FROM   CORREMPLOYEE CE 
			INNER JOIN #DEDUCTEESERIALNO E 
				ON CE.DEDUCTEESERIALNO = E.DEDUCTEESERIALNO 
						AND CE.CORRECTIONSTATUS = E.CORRECTIONSTATUS
			WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
				+ ' AND CE.FORMID = ' + CAST(@FORMID AS VARCHAR) 
				+ ' AND CE.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)
		IF(@PREFIXTEXT <> '')
			BEGIN
				SET @QRY = @QRY  + ' AND D.NAME + ''(''+ CAST(E.SERIALNO AS VARCHAR) + '')'' + ''-'' + D.PAN LIKE ''' + @PREFIXTEXT + '%''';
				SET @QRY1 =@QRY1 + ' AND CE.NAME + ''('' + CAST(CE.DEDUCTEESERIALNO AS VARCHAR) + '')'' LIKE ''' + @PREFIXTEXT + '%''';
			END		
		SET @QUERY ='SELECT TEMP.NAME,TEMP.DEDUCTEESERIALNO 
			INTO #TEMPTABLE FROM ( ' + @QRY + ' UNION ' + @QRY1 + ' ) TEMP;
			SELECT NAME,DEDUCTEESERIALNO FROM #TEMPTABLE;'		
		EXEC SP_EXECUTESQL @QUERY;
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRERETURNHISTORY')
DROP PROCEDURE USP_TDS_GETCORRERETURNHISTORY
GO
CREATE PROCEDURE USP_TDS_GETCORRERETURNHISTORY        
@BRANCHID INT,        
@FORMID INT,        
@QUARTER INT      
AS        
BEGIN        
	DECLARE @SQLQUERY NVARCHAR(MAX)        
	SET @SQLQUERY = 'SELECT A.BRANCHID,A.FORMID,A.QUARTER,CD.REVISENUMBER,RECEIPTNO,ORGNUM,REVFILEDDATE,ISVALID FROM ACKNO A WITH(NOLOCK)   
					INNER JOIN ACKNOREV AR WITH(NOLOCK) ON A.ACKID = AR.ACKID    
					INNER JOIN CORRECTIONDETAILS CD WITH(NOLOCK) ON A.BRANCHID = CD.BRANCHID AND A.FORMID = CD.FORMID AND A.QUARTER = CD.QUARTER AND CD.REVISENUMBER = (AR.REVISENUMBER + 1)      
					WHERE A.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND ISVALIDCORRERETURN = 1 AND CD.REVISENUMBER > 1    
					UNION    
					SELECT A.BRANCHID,A.FORMID,A.QUARTER,CD.REVISENUMBER,RECEIPTNO,ORGNUM,ORGFILEDDATE,ISVALID FROM ACKNO A WITH(NOLOCK)   
					LEFT JOIN ACKNOREV AR WITH(NOLOCK) ON A.ACKID = AR.ACKID    
					INNER JOIN CORRECTIONDETAILS CD WITH(NOLOCK) ON A.BRANCHID = CD.BRANCHID AND A.FORMID = CD.FORMID AND A.QUARTER = CD.QUARTER    
					WHERE A.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND ISVALIDCORRERETURN = 1 AND CD.REVISENUMBER = 1'    
	IF(@FORMID <> -1)        
		SET @SQLQUERY = @SQLQUERY + 'AND A.FORMID ='+CAST(@FORMID AS VARCHAR);        
	IF(@QUARTER <> -1)        
		SET @SQLQUERY = @SQLQUERY + 'AND A.QUARTER ='+CAST(@QUARTER AS VARCHAR);        
END             
EXEC SP_EXECUTESQL @SQLQUERY
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRFORM27ADETAILS')
DROP PROCEDURE USP_TDS_GETCORRFORM27ADETAILS
GO
CREATE PROCEDURE [USP_TDS_GETCORRFORM27ADETAILS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT * FROM VW_GETCORRFORM27ADETAILS
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRMASTER')
DROP PROCEDURE USP_TDS_GETCORRMASTER
GO
CREATE PROCEDURE USP_TDS_GETCORRMASTER 
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
   BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX), @TABLE VARCHAR(100), @CTABLE VARCHAR(100);
		IF(@FORMID = 1)
		  BEGIN
			SET @TABLE = 'EMPLOYEE'
			SET @CTABLE = 'CORREMPLOYEE'
		  END
		ELSE
		  BEGIN
			SET @TABLE = 'NONEMPLOYEE'
			SET @CTABLE = 'CORRNONEMPLOYEE'			
		  END
	 	SET @SQLQUERY = 'SELECT E.SERIALNO, D.DEDUCTEEID, D.NAME, D.PAN FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN ' + @TABLE + ' E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
				WHERE D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)
	   SET @SQLQUERY = @SQLQUERY + '
				  			UNION
				SELECT DEDUCTEESERIALNO AS SERIALNO, DEDUCTEEID, NAME, PAN FROM ' + @CTABLE + '
				WHERE  BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = '+ CAST(@QUARTER AS VARCHAR)
		EXEC SP_EXECUTESQL @SQLQUERY			  
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRMASTERDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETCORRMASTERDETAILSFORGRID
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETCORRMASTERDETAILSFORGRID]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @ISEMPLOYEE BIT = 0
AS
 BEGIN
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
  DECLARE @SQLQUERY NVARCHAR(MAX);
  DECLARE @DEFAULTCOLUMN NVARCHAR(MAX);
  DECLARE @SQLFROM NVARCHAR(MAX);
  DECLARE @SQLWHERE NVARCHAR(MAX);
  SET @DEFAULTCOLUMN = 'M.DEDUCTEESERIALNO AS SLNO, M.SALUTATION AS SALUTATION,
	 M.[NAME] AS NAME, M.ADDRESS1, M.ADDRESS2, M.ADDRESS3, M.ADDRESS4, M.ADDRESS5, M.STATEID,SM.STATENAME AS STATE, M.PINCODE AS PINCODE, M.PHONENO AS PHONE, M.EMAILADDRESS,
	 M.PAN, M.PANREFERENCE';
  IF (@ISEMPLOYEE = 1)
	BEGIN
		SET @DEFAULTCOLUMN = @DEFAULTCOLUMN + ', M.GENDER, M.ISSENIORCITIZEN, M.DESIGNATION AS DESIGNATION, M.EMPLOYMENTFROM AS FROMDATE, M.EMPLOYMENTTO AS TODATE';
		SET @SQLFROM = 'CORREMPLOYEE AS M' ;
	END
  ELSE
	BEGIN
		SET @DEFAULTCOLUMN = @DEFAULTCOLUMN + ', M.ISAPPLICABLE26, M.ISAPPLICABLE27, M.CODE AS CODE, M.ISTRANSPORTER';
		SET @SQLFROM = 'CORRNONEMPLOYEE AS M';
	END
	SET @SQLFROM=@SQLFROM+' INNER JOIN STATEMASTER SM ON SM.STATEID=M.STATEID';
  SET @SQLWHERE = ' WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
				 + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR)
				 + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR)
				 +' AND CORRECTIONSTATUS = 5 ';
  SET @SQLQUERY = 'SELECT ' + @DEFAULTCOLUMN + ' FROM ' + @SQLFROM + @SQLWHERE;
  SET @SQLQUERY = @SQLQUERY + ' ORDER BY DEDUCTEESERIALNO';
  --PRINT @SQLQUERY
  EXECUTE SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrNonEmployee')
DROP PROCEDURE USP_TDS_GetCorrNonEmployee
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrNonEmployee]  
@BRANCHID INT,                  
@FORMID INT,                  
@QUARTER INT,                  
@ISNONEMPLOYEE BIT,
@ISTRUE BIT = 0 ,
@ALLPAN NVARCHAR(MAX),
@ISOBC BIT = 0                  
AS                  
 BEGIN 
	  SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ALLPAN,',') 
	  IF(@ISOBC = 1)
		BEGIN	                 
			IF(@ISNONEMPLOYEE = 1)                  
				BEGIN                  
					SELECT NE.SERIALNO AS DEDUCTEESERIALNO, D.NAME, D.PAN,D.DEDUCTEEID, ISNULL(D.SALUTATION,0)SALUTATION, 
						ISNULL(D.ADDRESS1,'')ADDRESS1, ISNULL(D.ADDRESS2,'')ADDRESS2, ISNULL(D.ADDRESS3,'')ADDRESS3, ISNULL(D.ADDRESS4,'')ADDRESS4,
						ISNULL(D.ADDRESS5,'')ADDRESS5,ISNULL(D.STATEID,1)STATEID, ISNULL(D.PINCODE,'')PINCODE, NE.ISAPPLICABLE26, NE.ISAPPLICABLE27,                 
						ISNULL(D.PHONENO,'')PHONENO, ISNULL(D.EMAILADDRESS,'')EMAILADDRESS, ISNULL(D.PANREFERENCE,'')PANREFERENCE, NE.DEDUCTEECODE, 
						NE.ISTRANSPORTER                 
						FROM DEDUCTEE D  WITH(NOLOCK)                
						INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
						INNER JOIN #TEMP T WITH(NOLOCK) ON T.DATA=D.PAN          
						INNER JOIN      
						(      
							SELECT MAX(D.DEDUCTEEID) DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)  
							INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID      
							WHERE D.BRANCHID = @BRANCHID      
							GROUP BY RTRIM(LTRIM(D.NAME COLLATE Latin1_General_CS_AS)), D.PAN, NE.DEDUCTEECODE 
						)N ON D.DEDUCTEEID = N.DEDUCTEEID  
					WHERE D.BRANCHID = @BRANCHID  
				END                  
			ELSE                  
				BEGIN
					IF(@ISTRUE = 0)
						BEGIN             
								SELECT E.SERIALNO AS DEDUCTEESERIALNO, D.NAME,D.PAN, D.DEDUCTEEID, D.SALUTATION, 
									   D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.STATEID, D.PINCODE, 
									   E.GENDER, E.ISSENIORCITIZEN, E.DESIGNATION,                
									   E.EMPLOYMENTFROM, E.EMPLOYMENTTO, D.PHONENO, D.EMAILADDRESS,
									   ISNULL(D.PANREFERENCE,'')PANREFERENCE, 0 AS DEDUCTEECODE                
								FROM DEDUCTEE D   WITH(NOLOCK)               
								INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
								INNER JOIN #TEMP T WITH(NOLOCK) ON T.DATA=D.PAN                   
								INNER JOIN      
								(      
									SELECT MAX(D.DEDUCTEEID) DEDUCTEEID 
									 FROM DEDUCTEE D WITH(NOLOCK)     
										INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
									 WHERE D.BRANCHID = @BRANCHID      
									 GROUP BY RTRIM(LTRIM(D.NAME COLLATE Latin1_General_CS_AS)), D.PAN  
								)N ON D.DEDUCTEEID = N.DEDUCTEEID       
							WHERE D.BRANCHID = @BRANCHID                  
						END
					ELSE
						BEGIN
								SELECT E.SERIALNO AS DEDUCTEESERIALNO, D.NAME,D.PAN, D.DEDUCTEEID, D.SALUTATION, 
									   D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.STATEID, D.PINCODE, 
									   E.GENDER, E.ISSENIORCITIZEN, E.DESIGNATION,                
									   E.EMPLOYMENTFROM, E.EMPLOYMENTTO, D.PHONENO, D.EMAILADDRESS, 
									   ISNULL(D.PANREFERENCE,'')PANREFERENCE, 0 AS DEDUCTEECODE                
								FROM DEDUCTEE D   WITH(NOLOCK)               
								INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
								INNER JOIN #TEMP T WITH(NOLOCK) ON T.DATA=D.PAN                   
								INNER JOIN      
								(      
									 SELECT MAX(D.DEDUCTEEID) DEDUCTEEID 
									 FROM DEDUCTEE D WITH(NOLOCK)    
										INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
									 WHERE D.BRANCHID = @BRANCHID AND SERIALNO 
										NOT IN
										(
											SELECT DEDUCTEESERIALNO 
											FROM CORRSALARYDETAIL WITH(NOLOCK)
											WHERE BRANCHID = @BRANCHID
										)     
									 GROUP BY RTRIM(LTRIM(D.NAME COLLATE Latin1_General_CS_AS)), D.PAN      
								)N ON D.DEDUCTEEID = N.DEDUCTEEID       
							WHERE D.BRANCHID = @BRANCHID          
						END
				END      
		END
	  ELSE
		BEGIN
			IF(@ISNONEMPLOYEE = 1)                  
			BEGIN                  
				SELECT NE.SERIALNO AS DEDUCTEESERIALNO, D.NAME, D.PAN,D.DEDUCTEEID, ISNULL(D.SALUTATION,0)SALUTATION, 
					ISNULL(D.ADDRESS1,'')ADDRESS1, ISNULL(D.ADDRESS2,'')ADDRESS2, ISNULL(D.ADDRESS3,'')ADDRESS3, ISNULL(D.ADDRESS4,'')ADDRESS4,
					ISNULL(D.ADDRESS5,'')ADDRESS5,ISNULL(D.STATEID,1)STATEID, ISNULL(D.PINCODE,'')PINCODE, NE.ISAPPLICABLE26, NE.ISAPPLICABLE27,                 
					ISNULL(D.PHONENO,'')PHONENO, ISNULL(D.EMAILADDRESS,'')EMAILADDRESS, ISNULL(D.PANREFERENCE,'')PANREFERENCE, NE.DEDUCTEECODE, 
					NE.ISTRANSPORTER                 
					FROM DEDUCTEE D  WITH(NOLOCK)                
					INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
					INNER JOIN #TEMP T WITH(NOLOCK) ON T.DATA=D.PAN          
					INNER JOIN      
					(      
						SELECT MAX(D.DEDUCTEEID) DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)  
						INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID      
						WHERE D.BRANCHID = @BRANCHID      
						GROUP BY RTRIM(LTRIM(D.NAME)), D.PAN, NE.DEDUCTEECODE  
					)N ON D.DEDUCTEEID = N.DEDUCTEEID  
				WHERE D.BRANCHID = @BRANCHID  
			END                  
			ELSE                  
			BEGIN
				IF(@ISTRUE = 0)
					BEGIN             
							SELECT E.SERIALNO AS DEDUCTEESERIALNO, D.NAME,D.PAN, D.DEDUCTEEID, D.SALUTATION, 
								   D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.STATEID, D.PINCODE, 
								   E.GENDER, E.ISSENIORCITIZEN, E.DESIGNATION,                
								   E.EMPLOYMENTFROM, E.EMPLOYMENTTO, D.PHONENO, D.EMAILADDRESS,
								   ISNULL(D.PANREFERENCE,'')PANREFERENCE, 0 AS DEDUCTEECODE                
							FROM DEDUCTEE D   WITH(NOLOCK)               
							INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
							INNER JOIN #TEMP T WITH(NOLOCK) ON T.DATA=D.PAN                   
							INNER JOIN      
							(      
								 SELECT MAX(D.DEDUCTEEID) DEDUCTEEID 
								 FROM DEDUCTEE D WITH(NOLOCK)     
									INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
								 WHERE D.BRANCHID = @BRANCHID      
								 GROUP BY RTRIM(LTRIM(D.NAME)), D.PAN      
							)N ON D.DEDUCTEEID = N.DEDUCTEEID       
						WHERE D.BRANCHID = @BRANCHID                  
					END
				ELSE
					BEGIN
							SELECT E.SERIALNO AS DEDUCTEESERIALNO, D.NAME,D.PAN, D.DEDUCTEEID, D.SALUTATION, 
								   D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.STATEID, D.PINCODE, 
								   E.GENDER, E.ISSENIORCITIZEN, E.DESIGNATION,                
								   E.EMPLOYMENTFROM, E.EMPLOYMENTTO, D.PHONENO, D.EMAILADDRESS, 
								   ISNULL(D.PANREFERENCE,'')PANREFERENCE, 0 AS DEDUCTEECODE                
							FROM DEDUCTEE D   WITH(NOLOCK)               
							INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
							INNER JOIN #TEMP T WITH(NOLOCK) ON T.DATA=D.PAN                   
							INNER JOIN      
							(      
								 SELECT MAX(D.DEDUCTEEID) DEDUCTEEID 
								 FROM DEDUCTEE D WITH(NOLOCK)    
									INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
								 WHERE D.BRANCHID = @BRANCHID AND SERIALNO 
									NOT IN
									(
										SELECT DEDUCTEESERIALNO 
										FROM CORRSALARYDETAIL WITH(NOLOCK)
										WHERE BRANCHID = @BRANCHID
									)     
								 GROUP BY RTRIM(LTRIM(D.NAME)), D.PAN      
							)N ON D.DEDUCTEEID = N.DEDUCTEEID       
						WHERE D.BRANCHID = @BRANCHID          
					END
			END 
		END   
      DROP TABLE #TEMP                 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRNONEMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_GETCORRNONEMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETCORRNONEMPLOYEEDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESLNO INT
AS
	BEGIN
		SELECT TOP 1 CNE.BRANCHID,CNE.FORMID,CNE.[QUARTER],CNE.DEDUCTEESERIALNO,CNE.SALUTATION,CNE.NAME,ISNULL(CNE.ADDRESS1,'') AS ADDRESS1,ISNULL(CNE.ADDRESS2,'') AS ADDRESS2,ISNULL(CNE.ADDRESS3,'') AS ADDRESS3,ISNULL(CNE.ADDRESS4,'') AS ADDRESS4,ISNULL(CNE.ADDRESS5,'') AS ADDRESS5,
					 CNE.STATEID,SM.STATENAME,ISNULL(CNE.PINCODE,'') AS PINCODE,CNE.ISAPPLICABLE26,CNE.ISAPPLICABLE27,ISNULL(CNE.PHONENO,'') AS PHONENO,ISNULL(CNE.EMAILADDRESS,'') AS EMAILADDRESS,CNE.PAN,CNE.LASTPAN,ISNULL(CNE.PANREFERENCE,'') PANREFERENCE,CNE.CODE,CNE.ISTRANSPORTER,CNE.CORRECTIONSTATUS
		FROM   CORRNONEMPLOYEE CNE WITH(NOLOCK) LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON CNE.STATEID = SM.STATEID
		WHERE  CNE.BRANCHID = @BRANCHID AND CNE.FORMID = @FORMID AND CNE.[QUARTER] = @QUARTER AND CNE.DEDUCTEESERIALNO = @DEDUCTEESLNO
		ORDER BY CORRECTIONSTATUS DESC;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRNONEMPLOYEESCOUNT')
DROP PROCEDURE USP_TDS_GETCORRNONEMPLOYEESCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETCORRNONEMPLOYEESCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT COUNT(DEDUCTEESERIALNO)
		FROM   CORRNONEMPLOYEE WITH(NOLOCK)
		WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND UPDATEINDICATOR = 1 AND CORRECTIONSTATUS = 5;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRNONEMPLOYEESPAGED')
DROP PROCEDURE USP_TDS_GETCORRNONEMPLOYEESPAGED
GO
CREATE PROCEDURE [USP_TDS_GETCORRNONEMPLOYEESPAGED]
	  @STARTROW INT,
	  @PAGESIZE INT,
	  @BRANCHID INT,
	  @FORMID INT,
	  @QUARTER INT
AS
	BEGIN
		/* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
		SET NOCOUNT ON
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		WITH TEMPRESULT AS
		(
			SELECT ROW_NUMBER() OVER(ORDER BY CNE.DEDUCTEESERIALNO) AS ROWNUM,CNE.BRANCHID,CNE.FORMID,CNE.[QUARTER],CNE.DEDUCTEESERIALNO,CNE.SALUTATION,CNE.NAME,
				   CNE.ADDRESS1,CNE.ADDRESS2,CNE.ADDRESS3,CNE.ADDRESS4,CNE.ADDRESS5,CNE.STATEID,SM.STATENAME,CNE.PINCODE,CNE.ISAPPLICABLE26,CNE.ISAPPLICABLE27,
				   CNE.PHONENO,CNE.EMAILADDRESS,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.CODE,CNE.ISTRANSPORTER,CNE.CORRECTIONSTATUS
			FROM   CORRNONEMPLOYEE CNE WITH(NOLOCK) LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON CNE.STATEID= SM.STATEID
			WHERE  BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND UPDATEINDICATOR = 1 AND  CORRECTIONSTATUS = 5
		)
		SELECT TOP (@LASTREC-1) *
		FROM TEMPRESULT
		WHERE ROWNUM > @FIRSTREC
		AND ROWNUM < @LASTREC
		/* TURN NOCOUNT BACK OFF */
		SET NOCOUNT OFF
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCorrNonEmps')
DROP PROCEDURE USP_TDS_GetCorrNonEmps
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetCorrNonEmps]  --USP_TDS_GetCorrNonEmps 30,2,1,'',100000  
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @PREFIXTEXT NVARCHAR(MAX),    
 @RECORDCOUNT INT    
AS    
 BEGIN    
  SELECT *    
  INTO #DEDUCTEE    
  FROM DEDUCTEE     
  WHERE BRANCHID = @BRANCHID     
  SELECT *    
  INTO #CORRNONEMPLOYEE     
   FROM CORRNONEMPLOYEE     
  WHERE BRANCHID = @BRANCHID     
   AND FORMID = @FORMID     
   AND QUARTER = @QUARTER     
   AND DEDUCTEEID IS NOT NULL    
  SELECT NAME + '-' + PAN AS PAN    
  INTO #CORRNAMEPAN    
   FROM CORRNONEMPLOYEE    
  WHERE BRANCHID = @BRANCHID    
   AND FORMID = @FORMID    
   AND QUARTER = @QUARTER    
  SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CORRECTIONSTATUS    
  INTO #DEDUCTEESERIALNO    
   FROM   CORRNONEMPLOYEE WITH(NOLOCK)     
  WHERE BRANCHID = @BRANCHID      
   AND FORMID = @FORMID    
   AND QUARTER = @QUARTER     
  GROUP BY DEDUCTEESERIALNO    
  DECLARE @QUERY NVARCHAR(MAX),@QRY NVARCHAR(MAX),@QRY1 NVARCHAR(MAX);      
  SET @QRY = 'SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + ' D.NAME     
    + ''(''+ CAST(NE.SERIALNO AS VARCHAR)+'')'' + ''-''+ D.PAN AS NAME, D.NAME + ''('' + CAST(NE.SERIALNO AS VARCHAR) + '')'' AS NAME1,    
     NE.SERIALNO AS DEDUCTEESERIALNO,D.PAN AS PAN,D.PANREFERENCE,NE.ISTRANSPORTER    
    FROM #DEDUCTEE D     
     INNER JOIN  NONEMPLOYEE NE     
      ON D.DEDUCTEEID = NE.DEDUCTEEID                    
    WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)     
     + ' AND D.DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM #CORRNONEMPLOYEE)'    
     + ' AND D.NAME + ''-'' + D.PAN NOT IN (SELECT PAN FROM #CORRNAMEPAN)    
        AND';    
  SET @QRY1 ='SELECT TOP ' + CAST(@RECORDCOUNT AS VARCHAR) + ' CNE.NAME +     
     ''('' + CAST(CNE.DEDUCTEESERIALNO AS VARCHAR) + '')'' + ''-'' + CNE.PAN AS NAME , CNE.NAME + ''('' + CAST(CNE.DEDUCTEESERIALNO AS VARCHAR) + '')'' AS NAME1,    
      CNE.DEDUCTEESERIALNO AS DEDUCTEESERIALNO,CNE.PAN AS PAN,    
      '''' AS PANREFERENCE,ISNULL(CNE.ISTRANSPORTER,0) AS ISTRANSPORTER    
     FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)     
     INNER JOIN #DEDUCTEESERIALNO NE     
      ON CNE.DEDUCTEESERIALNO = NE.DEDUCTEESERIALNO     
       AND CNE.CORRECTIONSTATUS = NE.CORRECTIONSTATUS     
    WHERE CNE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)     
     + ' AND CNE.FORMID = ' + CAST(@FORMID AS VARCHAR)     
     + ' AND CNE.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND';    
  IF (@FORMID = 2)    
   BEGIN    
    SET @QRY = @QRY + ' NE.ISAPPLICABLE26 = 1';    
    SET @QRY1 = @QRY1 + ' CNE.ISAPPLICABLE26 = 1';        
   END    
  ELSE    
   BEGIN    
    SET @QRY = @QRY + ' NE.ISAPPLICABLE27 = 1';    
    SET @QRY1 = @QRY1 + ' CNE.ISAPPLICABLE27 = 1';    
   END    
  IF @PREFIXTEXT <> ''    
   BEGIN    
    SET @QRY = @QRY + ' AND D.NAME + ''('' + CAST(NE.SERIALNO AS VARCHAR) + '')'' + ''-''+ D.PAN LIKE ''' + @PREFIXTEXT + '%''';    
    SET @QRY1 = @QRY1 + ' AND CNE.NAME + '' ('' + CAST(CNE.DEDUCTEESERIALNO AS VARCHAR) + '')'' LIKE ''' + @PREFIXTEXT + '%''';    
   END    
  SET @QUERY='SELECT TEMP.NAME,TEMP.NAME1,TEMP.DEDUCTEESERIALNO,TEMP.PAN,TEMP.PANREFERENCE,TEMP.ISTRANSPORTER     
    INTO #NAMES FROM (' + @QRY + ' UNION ' + @QRY1 + ') TEMP;    
    SELECT NAME,NAME1,DEDUCTEESERIALNO,PAN,PANREFERENCE,ISTRANSPORTER FROM #NAMES;'      
  print @QUERY;  
  EXEC SP_EXECUTESQL @QUERY;    
  IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL    
   DROP TABLE #DEDUCTEE    
  IF OBJECT_ID('TEMPDB..#CORRNONEMPLOYEE') IS NOT NULL    
   DROP TABLE #CORRNONEMPLOYEE    
  IF OBJECT_ID('TEMPDB..#CORRNAMEPAN') IS NOT NULL    
   DROP TABLE #CORRNAMEPAN    
  IF OBJECT_ID('TEMPDB..#DEDUCTEESERIALNO') IS NOT NULL    
   DROP TABLE #DEDUCTEESERIALNO     
 END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRPANMAXREFERENCENUMBER')
DROP PROCEDURE USP_TDS_GETCORRPANMAXREFERENCENUMBER
GO
CREATE PROCEDURE [USP_TDS_GETCORRPANMAXREFERENCENUMBER]
@BRANCHID INT,
@ISEMPLOYEE BIT
AS    
BEGIN    
		DECLARE @PANREFERENCE VARCHAR(10);
		SET @PANREFERENCE = 'NP';      
        SET @PANREFERENCE = @PANREFERENCE + DBO.UDF_TDS_GETCORRPANREFERENCEBASEDONBRANCHID(@BRANCHID,@ISEMPLOYEE);     
        SELECT @PANREFERENCE AS PANREFERENCE;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRPANUPDATEDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETCORRPANUPDATEDETAILSFORGRID
GO
CREATE PROCEDURE [USP_TDS_GETCORRPANUPDATEDETAILSFORGRID] 
@BRANCHID INT, 
 @FORMID INT, 
 @QUARTER INT, 
 @ISEMPLOYEE BIT = 0, 
 @CORRUPDATED BIT = 0 
AS 
 BEGIN 
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
  DECLARE @SQLQUERY NVARCHAR(MAX); 
  DECLARE @DEFAULTCOLUMN NVARCHAR(MAX); 
  DECLARE @SQLFROM NVARCHAR(MAX); 
  DECLARE @SQLWHERE NVARCHAR(MAX); 
  SET @DEFAULTCOLUMN = 'M.FORMID, M.QUARTER, M.DEDUCTEESERIALNO AS DEDUCTEESLNO, M.DEDUCTEEID, 
	 M.[NAME], M.PAN, M.ADDRESS1, M.ADDRESS2, M.ADDRESS3, M.ADDRESS4, M.ADDRESS5, M.STATEID, M.PINCODE, M.PHONENO, M.EMAILADDRESS, 
	 M.PANFLAG, M.PANCOUNTER, M.CORRECTIONSTATUS,''COLOR-'' + CAST(M.CORRECTIONSTATUS AS VARCHAR) AS ROWCOLOR'; 
  IF (@ISEMPLOYEE = 1) 
	BEGIN 
		SET @DEFAULTCOLUMN = @DEFAULTCOLUMN + ', M.GENDER, M.ISSENIORCITIZEN, M.DESIGNATION, M.EMPLOYMENTFROM, M.EMPLOYMENTTO'; 
		SET @SQLFROM = 'CORREMPLOYEE AS M'; 
	END 
  ELSE 
	BEGIN 
		SET @DEFAULTCOLUMN = @DEFAULTCOLUMN + ', M.ISAPPLICABLE26, M.ISAPPLICABLE27, M.CODE, M.ISTRANSPORTER'; 
		SET @SQLFROM = 'CORRNONEMPLOYEE AS M'; 
	END 
  SET @SQLWHERE = ' WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
				 + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) 
				 + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR); 
  IF (@CORRUPDATED = 0) 
   SET @SQLWHERE = @SQLWHERE + ' AND M.CORRECTIONSTATUS = 1'; 
  ELSE 
   SET @SQLWHERE = @SQLWHERE + ' AND M.CORRECTIONSTATUS<>5 AND M.CORRECTIONSTATUS <> ' + CAST(@CORRUPDATED AS VARCHAR); 
  SET @SQLQUERY = 'SELECT ' + @DEFAULTCOLUMN + ' FROM ' + @SQLFROM + @SQLWHERE; 
  SET @SQLQUERY = @SQLQUERY + ' ORDER BY DEDUCTEESERIALNO'; 
  EXECUTE SP_EXECUTESQL @SQLQUERY; 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRSALARYDETAILS')
DROP PROCEDURE USP_TDS_GETCORRSALARYDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETCORRSALARYDETAILS] 
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@NAME VARCHAR(75) = NULL,
	@FINYEAR INT = NULL,
	@SHOWALL BIT = 0
AS
	BEGIN
		/* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
		SET NOCOUNT ON
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE;
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		DECLARE @SQLQUERY NVARCHAR(MAX);
		IF(@SHOWALL = 0)
		  BEGIN
			SET @SQLQUERY = 'SELECT ID = IDENTITY(INT,1,1),SD.DEDUCTEESERIALNO,SD.CORRDEDUCTEESERIALNO,SD.DEDUCTEEID,SD.BRANCHID,E.NAME,
												ISNULL(E.GENDER,0) AS GENDER,ISNULL(E.ISSENIORCITIZEN,0) AS ISSENIORCITIZEN,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,
												E.PAN,SD.GROSSSALARY,SD.ET,SD.PT,SD.DEDUCTIONUS16,SD.INCOMEFROMSALARIES,SD.OTHERINCOME,SD.GROSSTOTALINCOME,
												SD.LASTGROSSTOTALINCOME,SD.VIA80CCE,SD.VIA80CCF,SD.VIAOTHERS,SD.VIA80CCG,SD.TOTALDEDUNDERCHAPTERVIA,
												SD.TOTALTAXABLEINCOME,SD.TAXONTOTALINCOME,SD.SURCHARGE,SD.EDUCATIONCESS,SD.RELIEFUS89,SD.NETTAXPAYABLE,
												SD.TOTALTDS,SD.TAXPAYABLE,SD.CORRECTIONSTATUS,SD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,RECORDSTATUS,
												CURRENTTAXABLEINCOME,PREVTAXABLEINCOME,CURRENTTDS,PREVTDS,ISNULL(ISTDSATHIGHERRATE,0)ISTDSATHIGHERRATE, 
												PANLL1, NAMELL1, PANLL2, NAMELL2, PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, 
												PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED
								INTO #SALARY 
								FROM CORRSALARYDETAIL SD WITH(NOLOCK) 
								INNER JOIN 
								 (
									 SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.DEDUCTEESERIALNO,CE.NAME,CE.GENDER,CE.ISSENIORCITIZEN,CE.PAN, 
												CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO
									 FROM CORREMPLOYEE CE WITH(NOLOCK)
									 INNER JOIN
									 (
										 SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS 
										 FROM CORREMPLOYEE  WITH(NOLOCK)
										WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4 
										GROUP BY DEDUCTEESERIALNO
									  ) AS CURRENTEMP
									  ON CE.DEDUCTEESERIALNO=CURRENTEMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS=CURRENTEMP.CORRECTIONSTATUS
									 WHERE CE.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4
								  ) E ON SD.DEDUCTEESERIALNO=E.DEDUCTEESERIALNO AND SD.BRANCHID=E.BRANCHID
							  WHERE SD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND E.QUARTER=4 AND E.FORMID=1 AND SD.RECORDSTATUS=1 AND SD.CORRECTIONSTATUS = 1'
		  END
		ELSE
		  BEGIN
		    SELECT SALARYDETAILID, SUM(ISNULL([80C],0)) [80C], SUM(ISNULL([80CCC],0))[80CCC] ,SUM(ISNULL([80CCD],0))[80CCD], SUM(ISNULL([80D],0))[80D],
			SUM(ISNULL([80DD],0))[80DD] ,SUM(ISNULL([80DDB],0))[80DDB], SUM(ISNULL([80E],0))[80E], SUM(ISNULL([80G],0))[80G], SUM(ISNULL([80GG],0))[80GG],
			SUM(ISNULL([80QQB],0))[80QQB], SUM(ISNULL([80RRB],0))[80RRB], SUM(ISNULL([80U],0))[80U], SUM(ISNULL([80CCF],0))[80CCF], SUM(ISNULL([80GGA],0))[80GGA],
			SUM(ISNULL([80GGC],0))[80GGC] ,SUM(ISNULL([80TTA],0))[80TTA] , SUM(ISNULL([80CCG],0))[80CCG], SUM(ISNULL([80CCD(1)],0))[80CCD(1)],SUM(ISNULL([80CCD(2)],0))[80CCD(2)],
		    SUM(ISNULL([80EE],0))[80EE] 
			INTO #CHAPTERVIA 
						FROM
			(
				SELECT SALARYDETAILID, [3] AS [80C], [4] AS [80CCC],[5] AS [80CCD],[6] AS [80D],[7] AS [80DD], [8] AS [80DDB],
					[9] AS [80E], [10] AS [80G],[11] AS [80GG],[12] AS [80QQB],[13] AS [80RRB], [14] AS [80U],[15] AS [80CCF],
					[16] AS [80GGA],[17] AS [80GGC], [18] AS [80TTA],[19] AS [80CCG],[20] AS [80CCD(1)], [21] AS [80CCD(2)],[22] AS [80EE]
				FROM 
				(
					SELECT SALARYDETAILID, GROSSAMOUNT, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT,SALARYSECTIONID
					FROM CHAPTERVIADETAIL WITH(NOLOCK)) UP
					PIVOT (SUM(DEDUCTIBLEAMOUNT) FOR SALARYSECTIONID IN ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22])
				) AS PVT
			)TT
			GROUP BY SALARYDETAILID
			SELECT SALARYDETAILID, [1] AS ET, [2] AS PT
			INTO #SECTION16
			FROM 
			(
				SELECT SALARYDETAILID, AMOUNT,SALARYSECTIONID
				FROM SECTION16DETAIL WITH(NOLOCK)) UP
				PIVOT (SUM(AMOUNT) FOR SALARYSECTIONID IN ([1],[2])
			) AS PVT
			ORDER BY SALARYDETAILID
		    SELECT S.SERIALNO, D.DEDUCTEEID, D.NAME, D.PAN, ISNULL(E.GENDER,0) GENDER,ISNULL(ISSENIORCITIZEN,0) AS ISSENIORCITIZEN,
					   E.EMPLOYMENTFROM,E.EMPLOYMENTTO
		    INTO #SALDED FROM
		    (  
				SELECT E.SERIALNO FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
				WHERE BRANCHID =  @BRANCHID  
				EXCEPT
				SELECT DEDUCTEESERIALNO FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID =  @BRANCHID 
		    )S
		    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.SERIALNO = S.SERIALNO 
		    INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		    WHERE BRANCHID =  @BRANCHID  
			SET @SQLQUERY = 'SELECT ID = IDENTITY(INT,1,1),S.SERIALNO AS DEDUCTEESERIALNO,S.SERIALNO AS CORRDEDUCTEESERIALNO,SD.DEDUCTEEID,SD.BRANCHID,S.NAME,
												GENDER,ISSENIORCITIZEN,S.EMPLOYMENTFROM,S.EMPLOYMENTTO,
												S.PAN,SD.GROSSSALARY,S16.ET,S16.PT,SD.DEDUCTIONUS16,SD.INCOMEFROMSALARIES,SD.OTHERINCOME,SD.GROSSTOTALINCOME,
												SD.GROSSTOTALINCOME AS LASTGROSSTOTALINCOME,
												CASE WHEN ' + CAST(@FINYEAR AS VARCHAR) + ' < 2011 
																THEN (ISNULL([80C],0) + ISNULL([80CCC],0) + ISNULL([80CCD],0)) 
														ELSE (ISNULL([80C],0) + ISNULL([80CCC],0) + ISNULL([80CCD(1)],0))
												END AS VIA80CCE,
												CASE WHEN  ' + CAST(@FINYEAR AS VARCHAR) + ' < 2010 
															   THEN ISNULL([80D],0) + ISNULL([80DD],0) +  ISNULL([80DDB],0) + ISNULL([80E],0) + ISNULL([80GG],0) + ISNULL([80QQB],0) + 
																	   ISNULL([80RRB],0) + ISNULL([80G],0) + ISNULL([80U],0) + ISNULL([80GGA],0) + ISNULL([80GGC],0) + ISNULL([80TTA],0) +
																	   ISNULL([80CCG],0)
													    WHEN  ' + CAST(@FINYEAR AS VARCHAR) + ' >= 2011 
															  THEN  ISNULL([80D],0) + ISNULL([80DD],0) +  ISNULL([80DDB],0) + ISNULL([80E],0) + ISNULL([80GG],0) + ISNULL([80QQB],0) + 
																	   ISNULL([80RRB],0) + ISNULL([80G],0) + ISNULL([80U],0) + ISNULL([80GGA],0) + ISNULL([80GGC],0) + ISNULL([80TTA],0) + 
																	   ISNULL([80CCD(2)],0)
														ELSE 0 
											   END AS VIAOTHERS, 
											  CASE WHEN  ' + CAST(@FINYEAR AS VARCHAR) + ' < 2010	
															 THEN 0
													 WHEN ' + CAST(@FINYEAR AS VARCHAR) + ' <= 2011 
															 THEN ISNULL([80CCF],0)
													 ELSE 0 
											  END AS VIA80CCF,
											  CASE WHEN  ' + CAST(@FINYEAR AS VARCHAR) + ' >= 2012 
															 THEN ISNULL([80CCG],0)
													  ELSE  0 
											   END AS VIA80CCG,
										SD.TOTALDEDUNDERCHAPTERVIA,SD.TOTALTAXABLEINCOME,SD.TAXONTOTALINCOME,SD.SURCHARGE,SD.EDUCATIONCESS,SD.RELIEFUS89,
										SD.NETTAXPAYABLE, SD.TOTALTDS,SD.TAXPAYABLE,5 AS CORRECTIONSTATUS,5 AS CURRENTCORRSTATUS,1 AS RECORDSTATUS,
										0 AS CURRENTTAXABLEINCOME,0 AS PREVTAXABLEINCOME,0 AS CURRENTTDS,0 AS PREVTDS,0 AS ISTDSATHIGHERRATE,
										PANLL1, NAMELL1, PANLL2, NAMELL2, PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, 
										PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED
								INTO #SALARY 
								FROM SALARYDETAIL SD WITH(NOLOCK) 
								LEFT JOIN #CHAPTERVIA CVIA ON SD.SALARYDETAILID = CVIA.SALARYDETAILID
								LEFT JOIN #SECTION16 S16 ON SD.SALARYDETAILID = S16.SALARYDETAILID
								INNER JOIN #SALDED S  ON SD.DEDUCTEEID = S.DEDUCTEEID
								--INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = S.DEDUCTEEID
							    WHERE SD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)
		  END
		IF @NAME IS NOT NULL
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND E.NAME LIKE ''%'+CAST(@NAME AS VARCHAR(75))+'%''';
			END
		SET @SQLQUERY = @SQLQUERY + ' ORDER BY SD.DEDUCTEEID;SELECT * FROM #SALARY WHERE ID > '+CAST(@FIRSTREC AS VARCHAR)+ ' AND ID < '+CAST(@LASTREC AS VARCHAR);
	EXECUTE SP_EXECUTESQL @SQLQUERY;
	SET NOCOUNT OFF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRSALARYDETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETCORRSALARYDETAILSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETCORRSALARYDETAILSCOUNT]
	@BRANCHID INT,
	@NAME VARCHAR(75) = NULL,
	@SHOWALL BIT = 0
AS
BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX)
	IF(@SHOWALL = 0)
	  BEGIN
		SET @SQLQUERY = 'SELECT COUNT(SD.DEDUCTEESERIALNO) FROM CORRSALARYDETAIL SD WITH(NOLOCK) 
								   INNER JOIN 
							   (
										SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.DEDUCTEESERIALNO	,CE.NAME								 
										 FROM CORREMPLOYEE CE WITH(NOLOCK) 
										 INNER JOIN 
										 (
											SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS
											FROM CORREMPLOYEE  WITH(NOLOCK)	
											WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = 1 AND QUARTER = 4 
											GROUP BY DEDUCTEESERIALNO
										  ) AS CURRENTEMP
										 ON CE.DEDUCTEESERIALNO = CURRENTEMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = CURRENTEMP.CORRECTIONSTATUS
								 WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = 1 AND QUARTER = 4
							  ) E ON SD.DEDUCTEESERIALNO = E.DEDUCTEESERIALNO AND SD.BRANCHID = E.BRANCHID
					         WHERE SD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND E.FORMID = 1 AND E.QUARTER = 4 AND SD.CORRECTIONSTATUS = 1 AND SD.RECORDSTATUS = 1'
	  END		  
	ELSE
	  BEGIN
		SELECT S.SERIALNO, D.DEDUCTEEID
		    INTO #SALDED FROM
		    (  
				SELECT E.SERIALNO FROM DEDUCTEE D
				INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
				WHERE BRANCHID =  @BRANCHID  
				EXCEPT
				SELECT DEDUCTEESERIALNO FROM CORRSALARYDETAIL WHERE BRANCHID =  @BRANCHID 
		    )S
		    INNER JOIN EMPLOYEE E ON E.SERIALNO = S.SERIALNO 
		    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID
		    WHERE BRANCHID =  @BRANCHID   
		SET @SQLQUERY = ' SELECT COUNT(SD.DEDUCTEEID) FROM SALARYDETAIL SD WITH(NOLOCK)
									INNER JOIN DEDUCTEE D WITH(NOLOCK) ON SD.DEDUCTEEID = D.DEDUCTEEID
									INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = SD.DEDUCTEEID
									INNER JOIN #SALDED S ON S.DEDUCTEEID = D.DEDUCTEEID
									WHERE SD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
	  END      
	IF @NAME IS NOT NULL
		BEGIN
			SET @SQLQUERY = @SQLQUERY + ' AND NAME LIKE ''%' + CAST(@NAME AS VARCHAR(75)) + '%'''
		END		
	EXECUTE SP_EXECUTESQL @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRSALARYDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETCORRSALARYDETAILSFORGRID
GO
CREATE PROCEDURE [USP_TDS_GETCORRSALARYDETAILSFORGRID] 
@BRANCHID INT, 
@CORRUPDATED BIT = 0 
AS 
BEGIN  
	DECLARE @SQLQUERY NVARCHAR(MAX);  
	DECLARE @SQLWHERE NVARCHAR(MAX);  
	SET @SQLQUERY='SELECT CASE SD.CORRECTIONSTATUS WHEN 2 THEN ''UPDATE'' WHEN 4 THEN ''DELETE'' END AS CORRECTION,  
	SD.CORRDEDUCTEESERIALNO,CE.NAME ,CE.PAN,CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO,CE.GENDER,CASE CE.GENDER WHEN ''1'' THEN ''FEMALE'' WHEN ''0'' THEN ''MALE'' END AS GEN,  
	CE.ISSENIORCITIZEN, CASE CE.ISSENIORCITIZEN WHEN 1 THEN ''YES'' WHEN 0 THEN ''NO'' END AS SENIORCITIZEN,  
	SD.GROSSSALARY,SD.ET,SD.PT,SD.INCOMEFROMSALARIES,SD.OTHERINCOME,SD.VIA80CCE,SD.VIAOTHERS,SD.VIA80CCF,SD.VIA80CCG,SD.TAXONTOTALINCOME,  
	SD.SURCHARGE,SD.EDUCATIONCESS,SD.RELIEFUS89,SD.NETTAXPAYABLE,SD.TOTALTDS,SD.TAXPAYABLE,SD.CORRECTIONSTATUS,  
	''COLOR-'' + CAST(SD.CORRECTIONSTATUS AS VARCHAR) AS ROWCOLOR  
	FROM CORRSALARYDETAIL SD WITH(NOLOCK)  
	INNER JOIN CORREMPLOYEE CE WITH(NOLOCK) ON   
	CE.DEDUCTEESERIALNO=SD.DEDUCTEESERIALNO AND  
	CE.BRANCHID=SD.BRANCHID';  
	SET @SQLWHERE=' WHERE SD.BRANCHID=' + CAST(@BRANCHID AS VARCHAR) +' AND CE.FORMID=1 AND CE.QUARTER=4';  
	IF (@CORRUPDATED=0)   
		SET @SQLWHERE=' AND CE.CORRECTIONSTATUS=SD.CORRECTIONSTATUS '+ @SQLWHERE +' AND SD.CORRECTIONSTATUS=1';  
	ELSE   
		SET @SQLWHERE= @SQLWHERE +' AND SD.CORRECTIONSTATUS<>1 AND CE.CORRECTIONSTATUS<>3';  
	SET @SQLQUERY=@SQLQUERY+@SQLWHERE;  
	EXECUTE SP_EXECUTESQL @SQLQUERY;  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCORRTAXSECTIONS')
DROP PROCEDURE USP_TDS_GETCORRTAXSECTIONS
GO
CREATE PROCEDURE [USP_TDS_GETCORRTAXSECTIONS]
	@FORMID INT,
	@QUARTER INT,
	@BRANCHID INT
AS
	BEGIN
		IF(@FORMID=1)
				BEGIN
				IF EXISTS (SELECT ALLOW92A92B FROM DEFAULTSETTINGS WITH(NOLOCK) WHERE ALLOW92A92B = 0)
				BEGIN
					DECLARE @STATUSID INT,@DEDUCTORID INT;
					SELECT @DEDUCTORID = DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND [QUARTER] = @QUARTER;
					SELECT @STATUSID = STATUSID FROM DEDUCTOR WITH(NOLOCK) WHERE DEDUCTORID = @DEDUCTORID;
					IF(@STATUSID = 1) /*GOVERNMENT*/
						BEGIN
							SELECT SECTIONID,TAXNAME,SECTIONNAME,FORMID,[DESCRIPTION],SHORTDESC
							FROM   TAXSECTIONS WITH(NOLOCK)
							WHERE  SECTIONID = 1;
						END
					ELSE IF (@STATUSID = 2) /*OTHERS*/
						BEGIN
							SELECT SECTIONID,TAXNAME,SECTIONNAME,FORMID,[DESCRIPTION],SHORTDESC
							FROM   TAXSECTIONS WITH(NOLOCK)
							WHERE  SECTIONID  = 2;
						END
				END
				ELSE
				BEGIN
					SELECT TS.SECTIONID,TS.TAXNAME,
						   TS.SECTIONNAME,TS.[DESCRIPTION],FD.FORMID,FD.FORMNAME,SHORTDESC
					FROM TAXSECTIONS TS WITH(NOLOCK) INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON TS.FORMID = FD.FORMID
					WHERE  FD.FORMID = @FORMID;
				END
			END
		ELSE IF(@FORMID=2 OR @FORMID=3)
			BEGIN
				SELECT TS.SECTIONID,TS.TAXNAME,TS.SECTIONNAME,TS.[DESCRIPTION],FD.FORMID,FD.FORMNAME,SHORTDESC
				FROM   TAXSECTIONS TS WITH(NOLOCK) INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON TS.FORMID=FD.FORMID
				WHERE  FD.FORMID=@FORMID;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOUNTRIES')
DROP PROCEDURE USP_TDS_GETCOUNTRIES
GO
CREATE PROCEDURE USP_TDS_GETCOUNTRIES
AS
  BEGIN
	 SELECT COUNTRYCODE, COUNTRYNAME FROM COUNTRYMASTER WITH(NOLOCK)
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOUNTRYCODE')
DROP PROCEDURE USP_TDS_GETCOUNTRYCODE
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETCOUNTRYCODE]
@COUNTRY_NAME VARCHAR(255)
AS
  BEGIN
	 SELECT COUNTRYCODE FROM COUNTRYMASTER WITH(NOLOCK) WHERE COUNTRYNAME=@COUNTRY_NAME
  END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOUNTRYCODEDETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETCOUNTRYCODEDETAILSCOUNT
GO
--SELECT * FROM BANKCOUNTRYCODE
--USP_TDS_GETCOUNTRYCODEDETAILSPAGED 1,10,'',''
CREATE PROCEDURE USP_TDS_GETCOUNTRYCODEDETAILSCOUNT
@COUNTRYCODE VARCHAR(5),
@COUNTRYNAME VARCHAR(75)
AS
  BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX);
	SET @SQLQUERY = 'SELECT COUNT(BCC.BANKCOUNTRYID)
								      FROM BANKCOUNTRYCODE BCC WITH(NOLOCK)
							    INNER JOIN COUNTRYMASTER CM WITH(NOLOCK) ON BCC.COUNTRYID = CM.COUNTRYCODE'
	IF(@COUNTRYCODE <> '')
	  SET @SQLQUERY = @SQLQUERY + ' WHERE BCC.BANKCOUNTRYCODE LIKE ''%' + @COUNTRYCODE + '%'''
	IF(@COUNTRYCODE = '' AND @COUNTRYNAME <> '')
	  SET @SQLQUERY = @SQLQUERY + ' WHERE '
	ELSE IF(@COUNTRYCODE <> '' AND @COUNTRYNAME <> '')
	  SET @SQLQUERY = @SQLQUERY + ' AND '	
	IF(@COUNTRYNAME <> '')
	  SET @SQLQUERY = @SQLQUERY + ' BCC.BANKCOUNTRYNAME LIKE ''%' + @COUNTRYNAME + '%'''	  
	  --SET @SQLQUERY = @SQLQUERY + ' ORDER BY BCC.BANKCOUNTRYID; SELECT * FROM #COUNTRY WHERE ROWNO > ' + CAST(@STARTINDEX AS VARCHAR) + ' AND ROWNO < ' + CAST(@LASTINDEX AS VARCHAR) 
	 EXEC SP_EXECUTESQL @SQLQUERY	  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCOUNTRYCODEDETAILSPAGED')
DROP PROCEDURE USP_TDS_GETCOUNTRYCODEDETAILSPAGED
GO
CREATE PROCEDURE USP_TDS_GETCOUNTRYCODEDETAILSPAGED
@PAGEINDEX INT,
@PAGESIZE INT,
@COUNTRYCODE VARCHAR(5),
@COUNTRYNAME VARCHAR(75)
AS
  BEGIN
	DECLARE @STARTINDEX INT, @LASTINDEX INT, @SQLQUERY NVARCHAR(MAX);
	SET @STARTINDEX = (@PAGEINDEX - 1) * @PAGESIZE ;
	SET @LASTINDEX = (@PAGEINDEX * @PAGESIZE + 1);
	SET @SQLQUERY = 'SELECT ROWNO = IDENTITY(INT,1,1), BCC.BANKCOUNTRYID, CM.COUNTRYNAME, BCC.BANKCOUNTRYCODE,
														BCC.BANKCOUNTRYNAME 
									  INTO #COUNTRY
								      FROM BANKCOUNTRYCODE BCC WITH(NOLOCK)
							    INNER JOIN COUNTRYMASTER CM WITH(NOLOCK) ON BCC.COUNTRYID = CM.COUNTRYCODE'
	IF(@COUNTRYCODE <> '')
	  SET @SQLQUERY = @SQLQUERY + ' WHERE BCC.BANKCOUNTRYCODE LIKE ''%' + @COUNTRYCODE + '%'''
	IF(@COUNTRYCODE = '' AND @COUNTRYNAME <> '')
	  SET @SQLQUERY = @SQLQUERY + ' WHERE '
	ELSE IF(@COUNTRYCODE <> '' AND @COUNTRYNAME <> '')
	  SET @SQLQUERY = @SQLQUERY + ' AND '	
	IF(@COUNTRYNAME <> '')
	  SET @SQLQUERY = @SQLQUERY + ' BCC.BANKCOUNTRYNAME LIKE ''%' + @COUNTRYNAME + '%'''	  
	  SET @SQLQUERY = @SQLQUERY + ' ORDER BY BCC.BANKCOUNTRYID; SELECT * FROM #COUNTRY WHERE ROWNO > ' + CAST(@STARTINDEX AS VARCHAR) + ' AND ROWNO < ' + CAST(@LASTINDEX AS VARCHAR) 
	 EXEC SP_EXECUTESQL @SQLQUERY	  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCURIMPORTDETAILS')
DROP PROCEDURE USP_TDS_GETCURIMPORTDETAILS
GO
CREATE PROCEDURE USP_TDS_GETCURIMPORTDETAILS      
@BRANCHID INT      
AS      
BEGIN      
SELECT BRANCHID, MONTHID, ISVALID, ISREQACTIVE, QUEUEID, CURREQ, CURSTATUS, RECCOUNT, IMPORTEDDATE FROM IMPORTSTATUS WITH(NOLOCK)      
WHERE BRANCHID = @BRANCHID AND CURREQ = 1      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCVIA80C')
DROP PROCEDURE USP_TDS_GETCVIA80C
GO
CREATE PROCEDURE [USP_TDS_GETCVIA80C]
AS
  BEGIN
	SELECT C80CID AS ID , C80CDESC AS [DESC] FROM CVIA80C WITH (NOLOCK)
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetCVIA80CDet')
DROP PROCEDURE USP_TDS_GetCVIA80CDet
GO
CREATE PROCEDURE USP_TDS_GetCVIA80CDet
@CHAPTERVIAID INT,          
@C80CID INT,  
@COMID INT,  
@BRANCHID INT          
AS          
  BEGIN          
     DECLARE @SQLQUERY NVARCHAR(MAX);          
     CREATE TABLE #TMP(TID INT,GROSSAMT NUMERIC(13,2),QUALIFYINGAMT NUMERIC(13,2), ISORIGINAL BIT);  
	 INSERT INTO #TMP  
	 EXEC USP_TDS_GETACTUAL80CVALUES @COMID, @BRANCHID
	 SET @SQLQUERY = 'SELECT * FROM (  
	   SELECT TID AS ID, C.C80CDESC AS DESCR, GROSSAMT AS GROSS, QUALIFYINGAMT AS QUALIFYING, 
	   ISORIGINAL FROM #TMP T 
   	   INNER JOIN CVIA80C C WITH(NOLOCK) ON C.C80CID = T.TID	   
	   )T'  
	 IF(@C80CID <> -1)          
	   BEGIN         
		SET @SQLQUERY = @SQLQUERY  + ' WHERE ID = ' + CAST(@C80CID AS VARCHAR)  
		+' AND ISORIGINAL = 1'
	   END 
		EXEC SP_EXECUTESQL @SQLQUERY;   
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETCVIA80CDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETCVIA80CDETAILSFORGRID
GO
CREATE PROCEDURE [USP_TDS_GETCVIA80CDETAILSFORGRID]
@SALARYDETAILID INT
AS
BEGIN
	SELECT C.CVIA80CDETID,CVIA.C80CDESC AS PARTICULARS,C.C80CID,C.GROSS,C.QUALIFYING,C.DEDUCTIBLE
	FROM CVIA80CDET C WITH(NOLOCK)
	INNER JOIN CVIA80C CVIA WITH(NOLOCK) ON CVIA.C80CID=C.C80CID
	INNER JOIN CHAPTERVIADETAIL CD WITH(NOLOCK) ON CD.CHAPTERVIADETAILID=C.CHAPTERVIADETID
	WHERE CD.SALARYDETAILID=@SALARYDETAILID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDailyReport')
DROP PROCEDURE USP_TDS_GetDailyReport
GO
CREATE PROCEDURE [USP_TDS_GetDailyReport]        
	@BRANCHID INT,        
	@FORMID INT,        
	@QUARTER INT,        
	@PAYMENTDATE SMALLDATETIME        
AS        
	BEGIN        
		SELECT R.BRANCHNAME, R.BRANCHCODE , TR.BGLCODE, RP.BILLNUM, RP.BILLDATE, DD.RPAMOUNT1 AS EXCLUDESERVICETAX, 
			DD.RPAMOUNT2 AS SERVICETAX, DD.RPSBCESS, DD.RPKKCESS, (DD.RPAMOUNT1 + DD.RPAMOUNT2 + DD.RPSBCESS + DD.RPKKCESS) PAYMENTAMOUNT,   
			TS.SECTIONNAME, DD.TOTALDEDUCTED, 
			((DD.RPAMOUNT1 + DD.RPAMOUNT2 + DD.RPSBCESS + DD.RPKKCESS) - DD.TOTALDEDUCTED) AS NETAMOUNTPAYABLE, 
			TR.DESCRIPTION, D.NAME, D.PAN, DD.SERIALNO        
		FROM DEDUCTIONDETAIL DD        
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID      
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID        
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID        
			INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID        
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID        
			INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID  
			INNER JOIN   
			(  
				SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID 
				FROM REPORTPAYMENT RP WITH(NOLOCK)  
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID  
				WHERE RP.PARENTBRANCHID = @BRANCHID  
			)R  
			ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID  
		WHERE DD.BRANCHID = @BRANCHID 
			AND DD.FORMID = @FORMID 
			AND DD.PAYMENTDATE = @PAYMENTDATE 
			AND DD.QUARTER = @QUARTER        
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDATAAUDITDETAILS')
DROP PROCEDURE USP_TDS_GETDATAAUDITDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETDATAAUDITDETAILS]   
@DATAAUDITTYPE VARCHAR(MAX),
@FROMDATE SMALLDATETIME=NULL,
@TODATE SMALLDATETIME=NULL
AS 
BEGIN   
DECLARE @QUERY NVARCHAR(MAX);
SELECT * INTO #TEMP   
FROM UDF_TDS_SPLITSTRING(@DATAAUDITTYPE,','); 
SET @QUERY='SELECT DA.CHGDATETIME,UM.USERNAME,CB.BRANCHCODE,CB.BRANCHNAME,DA.DESCRIPTION 
FROM DATAAUDIT DA
INNER JOIN #TEMP T ON DA.TYPE = T.DATA
INNER JOIN USERMASTER UM ON UM.USERID=DA.USERID
LEFT JOIN COMPANYBRANCH CB ON CB.BRANCHID=DA.BRANCHID  
WHERE 1=1' 
IF(@FROMDATE IS NOT NULL)                                                      
 BEGIN                                                    
  SET @QUERY=@QUERY+' AND DA.CHGDATETIME >='''+CAST(@FROMDATE AS VARCHAR)+''''                                          
 END                                                 
IF(@TODATE IS NOT NULL)                                                      
 BEGIN                                                    
  SET @QUERY=@QUERY+' AND DA.CHGDATETIME <='''+CAST(@TODATE AS VARCHAR)+''''                                          
 END
 --PRINT @QUERY
 EXEC SP_EXECUTESQL @QUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDBList')
DROP PROCEDURE USP_TDS_GetDBList
GO
CREATE PROCEDURE USP_TDS_GetDBList
	@dbName VARCHAR(20)
AS
BEGIN
	SELECT name DBName
	FROM master..sysdatabases
	WHERE name LIKE @dbName + '%'
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDCHALLANMONTHSUMMARY')
DROP PROCEDURE USP_TDS_GETDEDCHALLANMONTHSUMMARY
GO
--[USP_TDS_GETDEDCHALLANMONTHSUMMARY] 112,1           
CREATE PROCEDURE [USP_TDS_GETDEDCHALLANMONTHSUMMARY]
@BRANCHID INT,          
@ISSUPERADMIN BIT = 1 
AS              
BEGIN
		 SET NOCOUNT ON              
		 DECLARE @FORMID INT,@MONTH INT; 
		 DECLARE @DEDLINKCOUNT INT,@DEDLINKAMOUNT NUMERIC(13,2), @LINKPAIDAMOUNT NUMERIC(13,2), @DEDUNLINKCOUNT INT,@DEDUNLINKAMOUNT NUMERIC(13,2),@UNLINKPAIDAMOUNT NUMERIC(13,2);              
		 DECLARE @DEDCHALSUNDRY NUMERIC(13,2), @DEDCHALAMOUNT NUMERIC(13,2),@CHALLANTOTAL NUMERIC(13,2),@DEDUCTIONTOTAL NUMERIC(13,2);                     
		 DECLARE @DEDUCTION TABLE(FORMID INT, MONTH INT, DEDLINKCOUNT INT,LINKPAIDAMOUNT NUMERIC(13,2), DEDLINKAMOUNT NUMERIC(13,2),DEDUNLINKCOUNT INT,DEDUNLINKAMOUNT NUMERIC(13,2),UNLINKPAIDAMOUNT NUMERIC(13,2));              
		 DECLARE @CHALLAN TABLE(FORMID INT, MONTH INT, CHALLANCOUNT NUMERIC(13,2), CHALLANTOTAL NUMERIC(13,2));                
		 SET @MONTH=1;             
		 SET @FORMID=1;        
		WHILE(@FORMID<=4)              
		  BEGIN              
		   WHILE(@MONTH<=12)              
			BEGIN  
				  SELECT  @DEDLINKCOUNT = COUNT(DD.DEDUCTIONID) , @DEDLINKAMOUNT = SUM(ISNULL(TOTALDEDUCTED,0)),  @LINKPAIDAMOUNT = SUM(ISNULL(PAYMENTMADE,0))
					FROM DEDUCTIONDETAIL DD WITH(NOLOCK)             
				  INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID       
				  INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID        
				  WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND ISAUTOGENERATED=1 
				  SELECT @DEDUNLINKCOUNT= COUNT(DD.DEDUCTIONID)  , @DEDUNLINKAMOUNT = SUM(ISNULL(TOTALDEDUCTED,0)), @UNLINKPAIDAMOUNT = SUM(ISNULL(PAYMENTMADE,0)) 
				   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)              
				  LEFT JOIN DEDCHALINK DL  WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID              
				  WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND MONTH(COALESCE(DD.DEDUCTEDDATE, DD.PAYMENTDATE)) = @MONTH AND DL.DEDUCTIONID IS NULL       
			      SELECT @DEDCHALAMOUNT= SUM(ISNULL(CD.CHALLANTOTAL,0))	
					 FROM  CHALLANDETAIL CD WITH(NOLOCK)      
				  INNER JOIN         
				  (        
				    SELECT DISTINCT CHALLANID FROM DEDCHALINK DL WITH(NOLOCK)
				    INNER JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DL.BRANCHID = DD.BRANCHID 
					WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND MONTH(DD.DEDUCTEDDATE) = @MONTH          
				  )DED        
				  ON DED.CHALLANID=CD.CHALLANID        
				  WHERE CD.ISAUTOGENERATED = 1        
			--IF(EXISTS(SELECT CD.CHALLANID FROM CHALLANDETAIL CD  WITH(NOLOCK)       
		 --  INNER JOIN      
		 --  (      
			--SELECT DISTINCT CHALLANID FROM DEDCHALINK WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID      
		 --  )DL ON CD.CHALLANID = DL.CHALLANID        
		 --  WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND MONTH(CD.CHALLANPAIDDATE) = @MONTH AND CD.ISAUTOGENERATED=1))  
			-- BEGIN  
		 -- SELECT @CHALLANTOTAL=ISNULL(SUM(CD.CHALLANTOTAL),0) FROM CHALLANDETAIL CD        
		 -- INNER JOIN      
		 -- (      
		 --  SELECT DISTINCT CHALLANID FROM DEDCHALINK WITH(NOLOCK) WHERE BRANCHID=@BRANCHID      
		 -- )DL ON CD.CHALLANID = DL.CHALLANID        
		 -- WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND MONTH(CD.CHALLANPAIDDATE) = @MONTH AND CD.ISAUTOGENERATED=1  
		 -- SELECT @DEDUCTIONTOTAL=ISNULL(SUM(DD.TOTALDEDUCTED),0) FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  WHERE DD.DEDUCTIONID  
		 --  IN  
		 --  (  
		 --  SELECT DL.DEDUCTIONID FROM CHALLANDETAIL CD    WITH(NOLOCK)     
		 --  INNER JOIN      
		 --  (      
			--SELECT  DEDUCTIONID,CHALLANID FROM DEDCHALINK  WHERE BRANCHID=@BRANCHID      
		 --  )DL ON CD.CHALLANID = DL.CHALLANID        
		 --  WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND MONTH(CD.CHALLANPAIDDATE) = @MONTH AND CD.ISAUTOGENERATED=1  
		 -- )  
			--END  
			--ELSE  
			--BEGIN  
			--SET @CHALLANTOTAL=0;  
			--SET  @DEDUCTIONTOTAL=0;  
			--END  
			SET @DEDCHALSUNDRY = @CHALLANTOTAL-@DEDUCTIONTOTAL;  
		  INSERT INTO @DEDUCTION              
		  SELECT @FORMID,@MONTH,@DEDLINKCOUNT,@LINKPAIDAMOUNT,@DEDLINKAMOUNT,@DEDUNLINKCOUNT,@DEDUNLINKAMOUNT ,@UNLINKPAIDAMOUNT             
		  INSERT INTO @CHALLAN              
		  SELECT @FORMID,@MONTH,@DEDCHALSUNDRY,@DEDCHALAMOUNT              
		  SET @MONTH=@MONTH+1;              
			END              
		   SET @MONTH = 1;               
		   SET @FORMID=@FORMID+1;              
		  END           
		SELECT D.MONTH, CASE WHEN D.FORMID =1 THEN 'FORM 24'
										 WHEN D.FORMID  = 2 THEN 'FORM 26'  
										 WHEN D.FORMID  = 3 THEN 'FORM 27'  
										 ELSE 'FORM27E' 
								 END FORM, D.DEDLINKCOUNT,
				ISNULL(D.LINKPAIDAMOUNT,0)LINKPAIDAMOUNT,ISNULL(D.DEDLINKAMOUNT,0)DEDLINKAMOUNT,D.DEDUNLINKCOUNT,ISNULL(D.UNLINKPAIDAMOUNT,0)UNLINKPAIDAMOUNT, 
				ISNULL(D.DEDUNLINKAMOUNT,0)DEDUNLINKAMOUNT,
			 CASE WHEN C.CHALLANCOUNT< 0 THEN 0 ELSE ISNULL(C.CHALLANCOUNT,0) END AS SUNDRY,
				ISNULL(C.CHALLANTOTAL,0) AS REMITTED 
				FROM @DEDUCTION D 
				INNER JOIN @CHALLAN C ON D.FORMID=C.FORMID AND C.MONTH=D.MONTH
			 SET NOCOUNT OFF              
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDS')
DROP PROCEDURE USP_TDS_GETDEDS
GO
CREATE PROCEDURE [USP_TDS_GETDEDS]
 @STARTROW INT,  
 @PAGESIZE INT,  
 @BRANCHID INT,  
 @FORMID INT,  
 @CHALLANID INT,  
 @DEDNAME VARCHAR(75)  
AS  
 BEGIN    
  SET NOCOUNT ON  
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */  
  DECLARE @FIRSTREC INT, @LASTREC INT,@SQLQUERY NVARCHAR(MAX);    
  DECLARE @RESULTTABLE TABLE(ID INT IDENTITY(1,1),SERIALNO INT,DEDUCTIONID INT,[QUARTER] INT,NAME VARCHAR(75),PAN VARCHAR(10),SECTIONID INT,SECTIONNAME VARCHAR(10),
								 PAYMENTMADE NUMERIC(13,2),PAYMENTDATE SMALLDATETIME,INCOMETAX NUMERIC(13,2),SURCHARGE NUMERIC(13,2),EDUCATIONCESS NUMERIC(13,2),
								 TOTALDEDUCTED NUMERIC(13,2),TAXRATE NUMERIC(6,3),DEDUCTEDDATE SMALLDATETIME,HASPARTPAYMNETDETAIL BIT,DEDCHALINKID INT,CHALLANSERIALNO INT)    
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
  SET @SQLQUERY = 'SELECT DD.SERIALNO,DD.DEDUCTIONID,DD.[QUARTER],D.NAME,D.PAN,DD.SECTIONID,TS.SECTIONNAME,DD.ORGPAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
										DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.TAXRATE,DD.DEDUCTEDDATE,
										CASE WHEN PPD.PARTDETAILID IS NULL THEN 0 ELSE 1  END AS HASPARTPAYMNETDETAIL,DL.DEDCHALINKID,CD.SERIALNO  
				  FROM  DEDUCTIONDETAIL DD WITH(NOLOCK)
			   LEFT JOIN PARTPAYMENTDETAILS PPD WITH(NOLOCK) ON DD.PARTPAYMENTID = PPD.PARTPAYMENTID AND DD.BRANCHID = PPD.BRANCHID AND DD.FORMID = PPD.FORMID AND DD.QUARTER = PPD.QUARTER  
               INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID  
               INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID  
               INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID   
               INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID   
       WHERE  DD.FORMID = ' + CAST(@FORMID AS VARCHAR(2)) +  ' AND DL.CHALLANID = '+ CAST(@CHALLANID AS VARCHAR)
  IF(@DEDNAME <> '')  
   BEGIN  
    SET @SQLQUERY = @SQLQUERY + ' AND D.NAME LIKE ''%' + @DEDNAME + '%''';  
   END  
  INSERT INTO @RESULTTABLE 
  EXEC SP_EXECUTESQL @SQLQUERY;  
  SELECT * FROM @RESULTTABLE  WHERE ID > @FIRSTREC AND ID < @LASTREC  
  /* TURN NOCOUNT BACK OFF */  
  SET NOCOUNT OFF  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDSCOUNT')
DROP PROCEDURE USP_TDS_GETDEDSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETDEDSCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@CHALLANID INT,
	@DEDNAME VARCHAR(75)
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		SET @QUERY = 'SELECT COUNT(DD.DEDUCTIONID)
					  FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) 
					  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID
					  INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID 
					  WHERE  DD.FORMID = ' + CAST(@FORMID AS VARCHAR(2)) + ' AND DL.CHALLANID = '+ CAST(@CHALLANID AS VARCHAR) 
		IF(@DEDNAME <> '')
			BEGIN
				SET @QUERY = @QUERY + ' AND D.NAME LIKE  ''%' + @DEDNAME + '%''';
			END
		EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEE')
DROP PROCEDURE USP_TDS_GETDEDUCTEE
GO
CREATE PROCEDURE USP_TDS_GETDEDUCTEE 
@BRANCHID INT,  
@ISNONEMPLOYEE BIT,
@ALLPAN NVARCHAR(MAX)   
AS  
 BEGIN  
	  SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ALLPAN,',')   
	  IF(@ISNONEMPLOYEE = 1)  
		   BEGIN  
				SELECT MAX(D.DEDUCTEEID) DEDUCTEEID, D.NAME, D.PAN, N.DEDUCTEECODE AS CODE, D.PANREFERENCE  
				FROM DEDUCTEE D  
					INNER JOIN NONEMPLOYEE N WITH(NOLOCK) ON D.DEDUCTEEID = N.DEDUCTEEID
					INNER JOIN #TEMP T ON T.DATA=D.PAN    
				WHERE D.BRANCHID = @BRANCHID  
				GROUP BY D.NAME, D.PAN, N.DEDUCTEECODE, D.PANREFERENCE   
		   END  
	  ELSE  
		   BEGIN  
				SELECT MAX(D.DEDUCTEEID) DEDUCTEEID, D.NAME, D.PAN, 0 AS CODE, D.PANREFERENCE 
				FROM DEDUCTEE D  
					--INNER JOIN EMPLOYEE N WITH(NOLOCK) ON D.DEDUCTEEID = N.DEDUCTEEID
					INNER JOIN #TEMP T ON T.DATA=D.PAN    
				WHERE D.BRANCHID = @BRANCHID  
				GROUP BY D.NAME, D.PAN, D.PANREFERENCE   
		   END  
 END  

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEECODEMISMATCHFORDQR')
DROP PROCEDURE USP_TDS_GETDEDUCTEECODEMISMATCHFORDQR
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEECODEMISMATCHFORDQR]
(
@BRANCHID INT
)
AS
BEGIN
   SELECT DISTINCT NE.SERIALNO, D.NAME,D.PAN,CASE  NE.DEDUCTEECODE WHEN 1 THEN 'COMPANIES' ELSE 'OTHER THAN COMPANIES' END AS SPECCODE,
    CASE  SUBSTRING(D.PAN,4,1) WHEN 'C' THEN 'COMPANIES' ELSE 'OTHER THAN COMPANIES' END AS EXPCODE
    FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)
   ON D.DEDUCTEEID =NE.DEDUCTEEID AND D.PANREFERENCE=''
   WHERE D.BRANCHID=@BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEDETAIL')
DROP PROCEDURE USP_TDS_GETDEDUCTEEDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETDEDUCTEEDETAIL] 
@BRANCHID INT,                              
@ISNONEMPLOYEE BIT,          
@ISTRUE BIT          
AS                              
 BEGIN   
	DECLARE @DEDUCTEE TABLE(DEDUCTEEID INT)                           
   IF(@ISNONEMPLOYEE = 1)          
    BEGIN 
	 IF(@ISTRUE = 0)          
		BEGIN  
		   SELECT DEDUCTEEID INTO #DED FROM DEDUCTEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID      
		   INSERT INTO @DEDUCTEE
		   SELECT DEDUCTEEID FROM #DED 
		   EXCEPT
		   (
			SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
			WHERE D.BRANCHID = @BRANCHID
			UNION
			SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
			WHERE D.BRANCHID = @BRANCHID
		   )
		   SELECT D.NAME, D.PAN,D.PANREFERENCE, 0 AS SERIALNO,D.DEDUCTEEID,ISNULL(D.CODE,0)CODE,D.REFERENCENO
		   FROM DEDUCTEE D WITH(NOLOCK)
		   INNER JOIN @DEDUCTEE DE  ON DE.DEDUCTEEID = D.DEDUCTEEID	           
		END          
	 ELSE          
		BEGIN        
		   SELECT D.NAME, D.PAN,D.PANREFERENCE,NE.SERIALNO, D.DEDUCTEEID,NE.DEDUCTEECODE AS CODE,D.REFERENCENO   
		   FROM DEDUCTEE D WITH(NOLOCK)                             
		   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID                    
		   WHERE BRANCHID = @BRANCHID                    
		END                          
    END                              
   ELSE          
    BEGIN 
		IF(@ISTRUE = 0)          
		   BEGIN       
		   SELECT DEDUCTEEID INTO #DED1 FROM DEDUCTEE WHERE BRANCHID = @BRANCHID                  
		   INSERT INTO @DEDUCTEE
		   SELECT DEDUCTEEID FROM #DED1  
		   EXCEPT
		   (
			SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
			WHERE D.BRANCHID = @BRANCHID
			UNION
			SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) 
			INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
			WHERE D.BRANCHID = @BRANCHID
		   )
		   SELECT D.NAME, D.PAN,D.PANREFERENCE,0 AS SERIALNO, D.DEDUCTEEID,ISNULL(D.CODE,0)CODE,D.REFERENCENO
		   FROM DEDUCTEE D WITH(NOLOCK)
		   INNER JOIN @DEDUCTEE DE  ON DE.DEDUCTEEID = D.DEDUCTEEID	                 
			END          
		  ELSE          
		   BEGIN          
			 SELECT D.NAME, D.PAN,D.PANREFERENCE,E.SERIALNO, D.DEDUCTEEID,0 AS CODE,D.REFERENCENO    
			 FROM DEDUCTEE D WITH(NOLOCK)                         
			INNER JOIN EMPLOYEE E WITH(NOLOCK)ON E.DEDUCTEEID = D.DEDUCTEEID 
			WHERE BRANCHID = @BRANCHID            
		   END             
	END                              
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeducteeDetailCB')
DROP PROCEDURE USP_TDS_GetDeducteeDetailCB
GO
CREATE PROCEDURE [USP_TDS_GetDeducteeDetailCB] 
@BranchCode VARCHAR(20),                              
@ISNONEMPLOYEE BIT,          
@ISTRUE BIT          
AS                              
 BEGIN  
       DECLARE @BRANCHID INT;
	   SET @BRANCHID=ISNULL((SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE=@BranchCode),0) 
	   DECLARE @DEDUCTEE TABLE(DEDUCTEEID INT)                           
	 --SELECT D.NAME, D.PAN,D.PANREFERENCE,E.SERIALNO, D.DEDUCTEEID,'' AS CODE,
	 --ISNULL(D.REFERENCENO,'') REFERENCENO,
	 --E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.EMPLOYEEID,
	 --E.DESIGNATION,E.DATEOFBIRTH,E.GENDER,E.ISSENIORCITIZEN,ISNULL(D.STATEID,0) STATEID,D.BRANCHID,
	 --D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5    
	 --FROM DEDUCTEE D WITH(NOLOCK)                         
	 --INNER JOIN EMPLOYEE E WITH(NOLOCK)ON E.DEDUCTEEID = D.DEDUCTEEID 
	 --WHERE BRANCHID = @BRANCHID 
	 SELECT D.NAME, D.PAN,D.PANREFERENCE,ISNULL(D.REFERENCENO,'') REFERENCENO,D.DEDUCTEEID
	 FROM DEDUCTEE D WITH(NOLOCK)
	 WHERE D.BRANCHID=@BRANCHID
	 GROUP BY D.NAME, D.PAN,D.PANREFERENCE,REFERENCENO,D.DEDUCTEEID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeducteeDetailForExcel')
DROP PROCEDURE USP_TDS_GetDeducteeDetailForExcel
GO
CREATE PROCEDURE [USP_TDS_GetDeducteeDetailForExcel]   
 @BRANCHID INT,        
 @FORMID INT        
AS        
BEGIN        
 DECLARE @OPERATOR NVARCHAR(50) = ''  
 DECLARE @QSTRING NVARCHAR(MAX) = ''  
 IF(@FORMID=1)  
  SET @OPERATOR='ISNULL(CODE,0) = 0'    
 ELSE  
  SET @OPERATOR='ISNULL(CODE,0) > 0'    
 SET @QSTRING='SELECT DEDUCTEEID INTO #DEDUCTEE FROM       
 (      
  SELECT D.DEDUCTEEID  FROM DEDUCTEE D        
   INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID        
  WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '       
  UNION         
  SELECT D.DEDUCTEEID  FROM DEDUCTEE D        
   INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID        
  WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '   
 )DE      
 SELECT D.REFERENCENO, D.DEDUCTEEID, ISNULL(CODE,0) CODE, D.NAME, D.PAN FROM DEDUCTEE D      
  INNER JOIN      
  (        
   SELECT DEDUCTEEID  FROM DEDUCTEE WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '       
   EXCEPT      
   SELECT DEDUCTEEID  FROM #DEDUCTEE        
  )DE ON D.DEDUCTEEID = DE.DEDUCTEEID        
 WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '  AND ' + @OPERATOR   
 PRINT @QSTRING  
 EXEC sp_executesql @QSTRING       
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEDETAILFOREXCELPENSIONER')
DROP PROCEDURE USP_TDS_GETDEDUCTEEDETAILFOREXCELPENSIONER
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEDETAILFOREXCELPENSIONER]     
@BRANCHID INT      
AS      
  BEGIN      
      SELECT DEDUCTEEID INTO #DEDUCTEE FROM     
      (    
    SELECT D.DEDUCTEEID  FROM DEDUCTEE D WITH(NOLOCK)     
    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
    WHERE D.BRANCHID = @BRANCHID      
    UNION       
    SELECT D.DEDUCTEEID  FROM DEDUCTEE D WITH(NOLOCK)      
    INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
    WHERE D.BRANCHID = @BRANCHID    
   )DE    
   SELECT D.REFERENCENO, D.DEDUCTEEID, ISNULL(CODE,0) CODE FROM DEDUCTEE D    
   INNER JOIN    
   (      
    SELECT DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND      
    NOT EXISTS
    (    
		SELECT DEDUCTEEID  FROM #DEDUCTEE DDD WHERE DDD.DEDUCTEEID = D.DEDUCTEEID
    )      
   )DE ON D.DEDUCTEEID = DE.DEDUCTEEID      
   WHERE BRANCHID = @BRANCHID  AND ISNULL(CODE,0) > 0 AND D.EMPTYPE = 1    
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeducteeDetailForTdsImport')
DROP PROCEDURE USP_TDS_GetDeducteeDetailForTdsImport
GO
CREATE PROCEDURE USP_TDS_GetDeducteeDetailForTdsImport 
@BRANCHID INT,                              
@ISNONEMPLOYEE BIT,          
@ISTRUE BIT,
@ALLPAN NVARCHAR(MAX)          
	AS                              
	 BEGIN   
		DECLARE @DEDUCTEE TABLE(DEDUCTEEID INT) 
		SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ALLPAN,',')   
	    IF(@ISNONEMPLOYEE = 1)          
			BEGIN 
			 IF(@ISTRUE = 0)          
				BEGIN  
				   SELECT D.DEDUCTEEID,D.NAME, D.PAN, D.PANREFERENCE, 0 AS SERIALNO, ISNULL(D.CODE,0)CODE, D.REFERENCENO, D.BRANCHID 
				   INTO #DED 
				   FROM DEDUCTEE D WITH(NOLOCK) 
						INNER JOIN #TEMP T ON T.DATA=D.PAN  
				   WHERE D.BRANCHID = @BRANCHID 
				   INSERT INTO @DEDUCTEE
				   SELECT DEDUCTEEID
				   FROM #DED
					   EXCEPT
					   (
							SELECT D.DEDUCTEEID 
							FROM #DED D WITH(NOLOCK)
								INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
							WHERE D.BRANCHID = @BRANCHID
							UNION
							SELECT D.DEDUCTEEID 
							FROM #DED D WITH(NOLOCK)
								INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
							WHERE D.BRANCHID = @BRANCHID
					   )
				   SELECT D.NAME, D.PAN, D.PANREFERENCE, D.SERIALNO, D.DEDUCTEEID, D.CODE, D.REFERENCENO
				   FROM #DED D WITH(NOLOCK)
						INNER JOIN @DEDUCTEE DE  ON DE.DEDUCTEEID = D.DEDUCTEEID 	           
				END          
			 ELSE          
				BEGIN        
				   SELECT D.NAME, D.PAN, D.PANREFERENCE, NE.SERIALNO, D.DEDUCTEEID, NE.DEDUCTEECODE AS CODE, D.REFERENCENO   
				   FROM DEDUCTEE D WITH(NOLOCK)                             
						INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
						INNER JOIN #TEMP T ON T.DATA=D.PAN                    
				   WHERE D.BRANCHID = @BRANCHID                    
				END                          
			END                              
	    ELSE          
			BEGIN 
				IF(@ISTRUE = 0)          
				   BEGIN       
					   SELECT D.DEDUCTEEID, D.NAME, D.PAN, D.PANREFERENCE, 0 AS SERIALNO, D.CODE, D.REFERENCENO,D.BRANCHID 
					   INTO #DED1 
					   FROM DEDUCTEE D
							INNER JOIN #TEMP T ON T.DATA=D.PAN  
					   WHERE D.BRANCHID = @BRANCHID
					   INSERT INTO @DEDUCTEE
					   SELECT DEDUCTEEID
					   FROM #DED1 
						   EXCEPT
						   (
								SELECT D.DEDUCTEEID 
								FROM #DED1 D WITH(NOLOCK)
									INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
								WHERE D.BRANCHID = @BRANCHID
								UNION
								SELECT D.DEDUCTEEID 
								FROM #DED1 D WITH(NOLOCK) 
									INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
								WHERE D.BRANCHID = @BRANCHID
						   )
					   SELECT D.NAME, D.PAN, D.PANREFERENCE, D.SERIALNO, D.DEDUCTEEID, D.CODE, D.REFERENCENO
					   FROM #DED1 D WITH(NOLOCK)
							INNER JOIN @DEDUCTEE DE  ON DE.DEDUCTEEID = D.DEDUCTEEID	                 
					END          
				ELSE          
				    BEGIN          
					   SELECT D.NAME, D.PAN,D.PANREFERENCE,E.SERIALNO, D.DEDUCTEEID,0 AS CODE,D.REFERENCENO    
					   FROM DEDUCTEE D WITH(NOLOCK)                         
							INNER JOIN EMPLOYEE E WITH(NOLOCK)ON E.DEDUCTEEID = D.DEDUCTEEID 
							INNER JOIN #TEMP T ON T.DATA=D.PAN  
					   WHERE BRANCHID = @BRANCHID            
				    END             
			END                              
	END
	IF OBJECT_ID('tempdb.dbo.#TEMP', 'U') IS NOT NULL
		DROP TABLE #TEMP; 
	IF OBJECT_ID('tempdb.dbo.#DED', 'U') IS NOT NULL
		DROP TABLE #DED;
	IF OBJECT_ID('tempdb.dbo.#DED1', 'U') IS NOT NULL
		DROP TABLE #DED1;
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEDETAILS')
DROP PROCEDURE USP_TDS_GETDEDUCTEEDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEDETAILS]
@BRANCHID INT
AS
 BEGIN
  SELECT DEDUCTEEID, ISNULL(REFERENCENO,'')REFERENCENO, NAME, PAN, PANREFERENCE, ISNULL(ENTRYBRANCHID,-1) AS SERIALNO FROM DEDUCTEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND DEDUCTEEID NOT IN
  (
   SELECT DEDUCTEEID FROM EMPLOYEE  WITH(NOLOCK)
   UNION ALL
   SELECT DEDUCTEEID FROM NONEMPLOYEE    WITH(NOLOCK)
  )
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEID')
DROP PROCEDURE USP_TDS_GETDEDUCTEEID
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEID]
@NAME VARCHAR(75),
@PAN VARCHAR(10),
@BRANCHID INT
AS
BEGIN
		IF EXISTS(SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID
                                   WHERE D.NAME=@NAME AND D.PAN=@PAN AND D.BRANCHID=@BRANCHID)
         BEGIN
				  SELECT D.DEDUCTEEID FROM DEDUCTEE D  WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID
                                   WHERE D.NAME=@NAME AND D.PAN=@PAN AND D.BRANCHID=@BRANCHID
         END
         ELSE
                 SELECT -1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDBASEDONBRANCHID')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDBASEDONBRANCHID
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETDEDUCTEEIDBASEDONBRANCHID]
@BRANCHID NVARCHAR(MAX),          
@ISDEDUCTEE BIT          
AS          
BEGIN          
 DECLARE @QUERY NVARCHAR(MAX)          
 DECLARE @JION VARCHAR(20);       
	IF @ISDEDUCTEE=1          
			SET @JION='INNER';          
	ELSE          
			SET @JION='LEFT';          
		SET @QUERY= 'SELECT  D.DEDUCTEEID, D.REFERENCENO, D.PAN, C.BRANCHCODE, D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK) 
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON D.BRANCHID = C.BRANCHID '          
		+ @JION +' JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID           
		WHERE D.BRANCHID = '+ @BRANCHID +' AND D.DEDUCTEEID IN 
		(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
		EXCEPT 
		SELECT DEDUCTEEID FROM EMPLOYEE WITH(NOLOCK))  
		ORDER BY D.DEDUCTEEID DESC'          
        EXEC SP_EXECUTESQL @QUERY          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDBASEDONCOMID')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDBASEDONCOMID
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEIDBASEDONCOMID] 
@COMID INT
AS
 BEGIN
	SELECT D.DEDUCTEEID FROM LINKTOTC LC WITH (NOLOCK) 
	INNER JOIN EMPLOYEE E WITH (NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID
	INNER JOIN DEDUCTEE D WITH (NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
	WHERE LC.COMID = @COMID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDBASEDONNAMEPAN')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDBASEDONNAMEPAN
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEIDBASEDONNAMEPAN] 
(              
@BRANCHCODES NVARCHAR(MAX),              
@ISDEDUCTEE BIT              
)              
AS              
BEGIN              
 DECLARE @QUERY NVARCHAR(MAX)              
 DECLARE @JION VARCHAR(20);    
 SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')             
 IF @ISDEDUCTEE=1              
   SET @JION='INNER';              
 ELSE              
   SET @JION='LEFT';              
  SET @QUERY= 'SELECT ROW_NUMBER() OVER(PARTITION BY D.PAN,D.BRANCHID ORDER BY D.DEDUCTEEID DESC) AS ROWNO ,MAX(D.DEDUCTEEID) DEDUCTEEID,MAX(D.NAME) NAME,MAX(D.PAN) PAN,C.BRANCHCODE, D.BRANCHID 
  INTO #TOPTEMP
  FROM DEDUCTEE D WITH(NOLOCK) 
  INNER JOIN COMPANYBRANCH C WITH(NOLOCK)              
  ON D.BRANCHID=C.BRANCHID '              
  +@JION+' JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID     
  INNER JOIN #TEMP T ON T.DATA=C.BRANCHCODE             
  WHERE NOT EXISTS (SELECT DEDUCTEEID FROM EMPLOYEE E WHERE E.DEDUCTEEID = D.DEDUCTEEID)              
  GROUP BY D.DEDUCTEEID, C.BRANCHCODE,D.BRANCHID,D.NAME,D.PAN ORDER BY C.BRANCHCODE; SELECT MAX(DEDUCTEEID)DEDUCTEEID,NAME,PAN,BRANCHCODE,BRANCHID FROM #TOPTEMP WHERE ROWNO = 1 GROUP BY BRANCHCODE,BRANCHID,NAME,PAN ORDER BY BRANCHCODE'              
        EXEC SP_EXECUTESQL @QUERY 
        --PRINT @QUERY             
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDBASEDONNAMEPANANDBRANCH')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDBASEDONNAMEPANANDBRANCH
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETDEDUCTEEIDBASEDONNAMEPANANDBRANCH]              
@BRANCHCODES NVARCHAR(MAX),              
@REFERENCENO NVARCHAR(MAX), 
@ISDEDUCTEE BIT                          
AS              
BEGIN              
 DECLARE @QUERY NVARCHAR(MAX)              
 DECLARE @JION VARCHAR(20);    
 SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',') 
 SELECT DISTINCT * INTO #TEMPREF FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENO,',')              
 IF @ISDEDUCTEE=1              
   SET @JION='INNER';              
 ELSE              
   SET @JION='LEFT';              
  SET @QUERY= 'SELECT ROW_NUMBER() OVER(PARTITION BY D.PAN,D.BRANCHID ORDER BY D.DEDUCTEEID DESC) AS ROWNO,
			  MAX(D.DEDUCTEEID) DEDUCTEEID,MAX(D.NAME) NAME,MAX(D.PAN) PAN,C.BRANCHCODE, D.BRANCHID 
			  INTO #TOPTEMP
			  FROM DEDUCTEE D WITH(NOLOCK) 
			  INNER JOIN COMPANYBRANCH C WITH(NOLOCK)              
			  ON D.BRANCHID=C.BRANCHID '              
			  +@JION+' JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID     
			  INNER JOIN #TEMPBR TB ON TB.DATA=C.BRANCHCODE
			  INNER JOIN #TEMPREF TR ON TR.DATA=D.REFERENCENO               
			  WHERE NOT EXISTS (SELECT DEDUCTEEID FROM EMPLOYEE E WHERE E.DEDUCTEEID = D.DEDUCTEEID)              
			  GROUP BY D.DEDUCTEEID, C.BRANCHCODE,D.BRANCHID,D.NAME,D.PAN ORDER BY C.BRANCHCODE; 
			  SELECT MAX(DEDUCTEEID)DEDUCTEEID,NAME,PAN,BRANCHCODE,BRANCHID 
			  FROM #TOPTEMP 
			  WHERE ROWNO = 1 GROUP BY BRANCHCODE,BRANCHID,NAME,PAN ORDER BY BRANCHCODE'              
        EXEC SP_EXECUTESQL @QUERY 
        --PRINT @QUERY             
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDBASEDONNAMEPANANDBRANCHCBI')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDBASEDONNAMEPANANDBRANCHCBI
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETDEDUCTEEIDBASEDONNAMEPANANDBRANCHCBI]              
	@BRANCHCODES NVARCHAR(MAX),              
	@PANSTRING NVARCHAR(MAX),              
	@ISDEDUCTEE BIT                           
AS              
BEGIN              
	DECLARE @QUERY NVARCHAR(MAX)              
	DECLARE @JION VARCHAR(20);
	SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',') 
	SELECT DISTINCT * INTO #TEMPPAN FROM DBO.UDF_TDS_SPLITSTRING(@PANSTRING,',')            
	IF @ISDEDUCTEE=1              
	SET @JION='INNER';              
	ELSE              
	SET @JION='LEFT';              
	SET @QUERY= 'SELECT ROW_NUMBER() OVER(PARTITION BY LTRIM(D.NAME), D.PAN,
	D.BRANCHID ORDER BY D.DEDUCTEEID DESC) AS ROWNO ,
	MAX(D.DEDUCTEEID) DEDUCTEEID,MAX(D.NAME) NAME,
	MAX(D.PAN) PAN, C.BRANCHCODE, D.BRANCHID 
	INTO #TOPTEMP
	FROM DEDUCTEE D WITH(NOLOCK) 
	INNER JOIN COMPANYBRANCH C WITH(NOLOCK)              
	ON D.BRANCHID=C.BRANCHID '              
	+@JION+' JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID     
	INNER JOIN #TEMPBR T ON T.DATA=C.BRANCHCODE 
	INNER JOIN #TEMPPAN TP ON TP.DATA=D.PAN            
	WHERE NOT EXISTS (SELECT DEDUCTEEID FROM EMPLOYEE E WHERE E.DEDUCTEEID = D.DEDUCTEEID)              
	GROUP BY D.DEDUCTEEID, C.BRANCHCODE, D.BRANCHID, D.NAME, D.PAN 
	ORDER BY C.BRANCHCODE; 
	SELECT MAX(DEDUCTEEID)DEDUCTEEID,NAME,PAN,BRANCHCODE,BRANCHID 
		FROM #TOPTEMP 
		WHERE ROWNO = 1 
		GROUP BY BRANCHCODE,BRANCHID,NAME,PAN 
		ORDER BY BRANCHCODE'              
	EXEC SP_EXECUTESQL @QUERY
	DROP TABLE #TEMPBR	              
	DROP TABLE #TEMPPAN	 
		--PRINT @QUERY             
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDBASEDONNAMEPANCBI')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDBASEDONNAMEPANCBI
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEIDBASEDONNAMEPANCBI] 
(              
@BRANCHCODES NVARCHAR(MAX),              
@ISDEDUCTEE BIT              
)              
AS              
BEGIN              
 DECLARE @QUERY NVARCHAR(MAX)              
 DECLARE @JION VARCHAR(20);    
 SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')             
 IF @ISDEDUCTEE=1              
   SET @JION='INNER';              
 ELSE              
   SET @JION='LEFT';              
  SET @QUERY= 'SELECT ROW_NUMBER() OVER(PARTITION BY LTRIM(D.NAME),D.PAN,D.BRANCHID ORDER BY D.DEDUCTEEID DESC) AS ROWNO ,MAX(D.DEDUCTEEID) DEDUCTEEID,MAX(D.NAME) NAME,MAX(D.PAN) PAN,C.BRANCHCODE, D.BRANCHID 
  INTO #TOPTEMP
  FROM DEDUCTEE D WITH(NOLOCK) 
  INNER JOIN COMPANYBRANCH C WITH(NOLOCK)              
  ON D.BRANCHID=C.BRANCHID '              
  +@JION+' JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID     
  INNER JOIN #TEMP T ON T.DATA=C.BRANCHCODE             
  WHERE NOT EXISTS (SELECT DEDUCTEEID FROM EMPLOYEE E WHERE E.DEDUCTEEID = D.DEDUCTEEID)              
  GROUP BY D.DEDUCTEEID, C.BRANCHCODE,D.BRANCHID,D.NAME,D.PAN ORDER BY C.BRANCHCODE; SELECT MAX(DEDUCTEEID)DEDUCTEEID,NAME,PAN,BRANCHCODE,BRANCHID FROM #TOPTEMP WHERE ROWNO = 1 GROUP BY BRANCHCODE,BRANCHID,NAME,PAN ORDER BY BRANCHCODE'              
        EXEC SP_EXECUTESQL @QUERY 
        --PRINT @QUERY             
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDBASEDONREFERENCE')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDBASEDONREFERENCE
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEIDBASEDONREFERENCE]
@BRANCHCODES NVARCHAR(MAX),          
@ISDEDUCTEE BIT          
AS          
BEGIN          
 DECLARE @QUERY NVARCHAR(MAX)          
 DECLARE @JION VARCHAR(20);
 SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')         
	IF @ISDEDUCTEE=1          
			SET @JION='INNER';          
	ELSE          
			SET @JION='LEFT';          
		SET @QUERY= 'SELECT  MAX(D.DEDUCTEEID) DEDUCTEEID,ISNULL(D.REFERENCENO,'''') REFERENCENO,MAX(D.PAN) PAN,C.BRANCHCODE, D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK) 
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON D.BRANCHID=C.BRANCHID '          
		+@JION+' JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID 
		INNER JOIN #TEMP T ON T.DATA=C.BRANCHCODE          
		WHERE ISNULL(D.REFERENCENO,'''') <>'''' AND D.DEDUCTEEID IN 
		(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
		EXCEPT 
		SELECT DEDUCTEEID FROM EMPLOYEE WITH(NOLOCK))  
		GROUP BY D.REFERENCENO, C.BRANCHCODE,D.BRANCHID 
		ORDER BY C.BRANCHCODE'          
        EXEC SP_EXECUTESQL @QUERY          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDBASEDONREFERENCEANDBRANCH')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDBASEDONREFERENCEANDBRANCH
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETDEDUCTEEIDBASEDONREFERENCEANDBRANCH]
	@BRANCHCODES NVARCHAR(MAX),
	@REFERENCENO NVARCHAR(MAX),                    
	@ISDEDUCTEE BIT          
AS          
	BEGIN          
		DECLARE @QUERY NVARCHAR(MAX)          
		DECLARE @JION VARCHAR(20);
		SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',') 
		SELECT DISTINCT * INTO #TEMPREF FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENO,',')
		SELECT D.BRANCHID,C.BRANCHCODE,D.DEDUCTEEID,D.REFERENCENO,D.PAN 
		INTO #DEDTOUSE 
		FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON D.BRANCHID = C.BRANCHID
			INNER JOIN #TEMPBR TB ON TB.DATA = C.BRANCHCODE
			INNER JOIN #TEMPREF TR ON TR.DATA = D.REFERENCENO    
		WHERE DEDUCTEEID NOT IN ( SELECT DEDUCTEEID FROM EMPLOYEE WITH(NOLOCK))
		SELECT BRANCHID, BRANCHCODE, DEDUCTEEID, ISNULL(REFERENCENO, '') REFERENCENO, PAN
		INTO #DEDMST
		FROM #DEDTOUSE WITH(NOLOCK)
		WHERE REFERENCENO <> ''
		DROP TABLE #DEDTOUSE
		IF @ISDEDUCTEE = 1 
			BEGIN
				SELECT  D.REFERENCENO, D.BRANCHCODE, D.BRANCHID,
					MAX(D.DEDUCTEEID) DEDUCTEEID, MAX(D.PAN) PAN
				FROM #DEDMST D  
					INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID        
				GROUP BY D.REFERENCENO, D.BRANCHCODE, D.BRANCHID 
				ORDER BY D.BRANCHCODE 
			END                  
		ELSE
			BEGIN
				SELECT  D.REFERENCENO, D.BRANCHCODE, D.BRANCHID,
					MAX(D.DEDUCTEEID) DEDUCTEEID, MAX(D.PAN) PAN
				FROM #DEDMST D  
					LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID        
				GROUP BY D.REFERENCENO, D.BRANCHCODE, D.BRANCHID 
				ORDER BY D.BRANCHCODE 
			END                 
	DROP TABLE #DEDMST
	DROP TABLE #TEMPBR	              
	DROP TABLE #TEMPREF	        
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDBASEDONREFERENCEFORFORM16A')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDBASEDONREFERENCEFORFORM16A
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEIDBASEDONREFERENCEFORFORM16A]       
(              
@BRANCHCODES NVARCHAR(MAX),              
@ISDEDUCTEE BIT              
)              
AS              
BEGIN              
 DECLARE @QUERY NVARCHAR(MAX)              
 DECLARE @JION VARCHAR(20);    
 SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')             
 IF @ISDEDUCTEE=1              
   SET @JION='INNER';              
 ELSE              
   SET @JION='LEFT';              
  SET @QUERY= 'SELECT DD.DEDUCTEEID, DD.REFERENCENO, DD.PAN, DD.BRANCHCODE,DD.BRANCHID  
FROM  
(   
SELECT ROW_NUMBER() OVER(PARTITION BY D.PAN,D.NAME ORDER BY D.PAN)ROWNO, D.DEDUCTEEID,ISNULL(D.REFERENCENO,'''') REFERENCENO,D.PAN,C.BRANCHCODE, D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN COMPANYBRANCH C WITH(NOLOCK)              
  ON D.BRANCHID=C.BRANCHID '              
  +@JION+' JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID     
  INNER JOIN #TEMP T ON T.DATA=C.BRANCHCODE             
  WHERE  D.REFERENCENO IS NOT NULL AND D.REFERENCENO<>''''  
  )DD  
WHERE DD.ROWNO = 1'               
        EXEC SP_EXECUTESQL @QUERY              
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDS')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDS
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEIDS]
@BRANCHID VARCHAR(MAX),
@ISVALID BIT
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		IF(@ISVALID = 1)
			BEGIN
					SET @SQLQUERY = 'SELECT BRANCHID, D.DEDUCTEEID, REFERENCENO FROM DEDUCTEE D WITH(NOLOCK)
											INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
											WHERE BRANCHID IN (' + CAST (@BRANCHID AS VARCHAR) + ') AND REFERENCENO IS NOT NULL AND REFERENCENO <> '''''
			END
		ELSE
			BEGIN
				SET @SQLQUERY = 'SELECT BRANCHID, D.DEDUCTEEID, REFERENCENO FROM DEDUCTEE D WITH(NOLOCK)
											LEFT JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
											WHERE BRANCHID IN (' + CAST (@BRANCHID AS VARCHAR) + ') AND REFERENCENO IS NOT NULL AND REFERENCENO <> '''''
			END
 EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEIDSFORTIN')
DROP PROCEDURE USP_TDS_GETDEDUCTEEIDSFORTIN
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETDEDUCTEEIDSFORTIN]      
(      
@TAN VARCHAR(10),      
@PAN NVARCHAR(MAX),
@DEDUCTOREMAIL VARCHAR(75)     
)      
AS
  SET NOCOUNT ON
  SELECT DISTINCT * INTO #PANS FROM DBO.UDF_TDS_SPLITSTRING(@PAN,',')      
  DECLARE @BRANCHID INT;  
  SELECT TOP 1 @BRANCHID=BD.BRANCHID FROM DEDUCTOR D    
   INNER JOIN    
   (    
   SELECT BRANCHID,MAX(DEDUCTORID)DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK)    
   GROUP BY BRANCHID    
   )BD    
    ON BD.DEDUCTORID=D.DEDUCTORID    
    WHERE D.TAN=@TAN AND D.EMAILADDRESS =  @DEDUCTOREMAIL
  SELECT D.DEDUCTEEID,D.NAME,D.PAN FROM DEDUCTEE D WITH(NOLOCK)    
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID=D.DEDUCTEEID  
 INNER JOIN #PANS P ON P.DATA=D.PAN   
  WHERE   D.BRANCHID=@BRANCHID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEMAXSERIALNO')
DROP PROCEDURE USP_TDS_GETDEDUCTEEMAXSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEMAXSERIALNO]   
@BRANCHID INT,      
@ISEMPLOYEE BIT      
AS      
BEGIN      
 DECLARE @QUERY NVARCHAR(MAX);      
 SET @QUERY = 'SELECT ISNULL(MAX(E.SERIALNO),0)SERIALNO FROM DEDUCTEE D WITH(NOLOCK)'      
 IF(@ISEMPLOYEE = 1)      
  BEGIN      
  SET @QUERY = @QUERY + ' INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'      
  END      
 ELSE      
  BEGIN      
    SET @QUERY = @QUERY + ' INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'      
  END      
    SET @QUERY = @QUERY + ' WHERE BRANCHID =  '+ CAST(@BRANCHID AS VARCHAR)    
  EXEC SP_EXECUTESQL @QUERY;        
  --PRINT @QUERY    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEENAMESFORFORM16A')
DROP PROCEDURE USP_TDS_GETDEDUCTEENAMESFORFORM16A
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEENAMESFORFORM16A]
	@BRANCHID INT,
	@FORMID INT,
	@SECTION INT,
	@PREFIXTEXT NVARCHAR(MAX),
	@RECCOUNT INT
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY='SELECT DISTINCT TOP '+CAST(@RECCOUNT AS VARCHAR) +' NE.SERIALNO,D.NAME +'' (''+ CAST(NE.SERIALNO AS VARCHAR)+'')''AS DEDUCTEENAME
					   FROM	  DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID =D.DEDUCTEEID
												 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
												 LEFT JOIN DEDCHALINK WITH(NOLOCK) DL ON DD.DEDUCTIONID = DL.DEDUCTIONID
					   WHERE  D.NAME +'' (''+ CAST(NE.SERIALNO AS VARCHAR) +'')'' LIKE '''+@PREFIXTEXT+'%'' AND DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND (DD.TOTALDEDUCTED=0 OR DL.DEDCHALINKID IS NOT NULL)';
		IF(@SECTION<>-1)
			BEGIN
				SET @SQLQUERY=@SQLQUERY +' AND DD.SECTIONID='+CAST(@SECTION AS VARCHAR);
			END
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEONBRANCHCODE')
DROP PROCEDURE USP_TDS_GETDEDUCTEEONBRANCHCODE
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEONBRANCHCODE]  
(  
@BRANCHCODES VARCHAR(MAX)  
)  
AS  
BEGIN  
	DECLARE @QUERY NVARCHAR(MAX)  
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SELECT MAX(D.DEDUCTEEID) DEDUCTEEID,D.NAME,D.PAN,C.BRANCHCODE,ISNULL(D.REFERENCENO,'''')REFERENCENO FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN COMPANYBRANCH C WITH(NOLOCK)  
	ON D.BRANCHID=C.BRANCHID  
	WHERE C.BRANCHCODE IN(SELECT DATA FROM  DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,','))  
	GROUP BY D.NAME, D.PAN, C.BRANCHCODE, D.REFERENCENO  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEPAN')
DROP PROCEDURE USP_TDS_GETDEDUCTEEPAN
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEPAN]
@BRANCHID INT,
@PAN NVARCHAR(MAX)
AS
  BEGIN
	SELECT * INTO #PANS FROM  DBO.UDF_TDS_SPLITSTRING(@PAN,',')
	SELECT NAME, PAN
	FROM DEDUCTEE WITH(NOLOCK)
	INNER JOIN #PANS P ON P.DATA = PAN 
	WHERE BRANCHID = @BRANCHID    
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEPANCOUNT')
DROP PROCEDURE USP_TDS_GETDEDUCTEEPANCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEPANCOUNT]
@DEDUCTEEID INT,
@PAN VARCHAR(10),
@BRANCHID INT,
@ISEMPLOYEE BIT
AS
  BEGIN
  DECLARE @FORM VARCHAR(20)
  DECLARE @SQLQUERY NVARCHAR(MAX)
  SET @FORM=CASE WHEN @ISEMPLOYEE=1 THEN 'EMPLOYEE' ELSE 'NONEMPLOYEE ' END
  SET @SQLQUERY='SELECT COUNT(DEDUCTEE.DEDUCTEEID) FROM DEDUCTEE WITH(NOLOCK) INNER JOIN '
  SET @SQLQUERY=@SQLQUERY+@FORM +' ON DEDUCTEE.DEDUCTEEID='+@FORM+'.DEDUCTEEID
	WHERE DEDUCTEE.PAN='''+CAST(@PAN AS VARCHAR)+''' AND DEDUCTEE.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DEDUCTEE.DEDUCTEEID<>'+CAST(@DEDUCTEEID AS VARCHAR)
 EXEC SP_EXECUTESQL @SQLQUERY
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeducteePanList')
DROP PROCEDURE USP_TDS_GetDeducteePanList
GO
CREATE PROCEDURE USP_TDS_GetDeducteePanList
@RTBRANCHID INT,
@FORMID INT,
@QUARTER INT,
@ISSB BIT = 0,
@ISZONE BIT = 0
AS    
	BEGIN   
		DECLARE @DED TABLE(DEDUCTEEID INT);
		IF(@ISSB = 1)
			BEGIN
				IF (@ISZONE = 1)
					BEGIN
						INSERT INTO @DED
						SELECT DEDUCTEEID
						FROM DEDUCTIONDETAIL WITH(NOLOCK) 
						WHERE BRANCHID = @RTBRANCHID 
							AND FORMID = @FORMID 
							AND QUARTER = @QUARTER 
							AND ISNULL(RTBRANCHID,'') <> '' 
							AND (CERTNO LIKE ('G%') OR CERTNO LIKE ('H%')) 
						GROUP BY DEDUCTEEID
					END
				ELSE 
					BEGIN
						INSERT INTO @DED
						SELECT DEDUCTEEID
						FROM DEDUCTIONDETAIL WITH(NOLOCK) 
						WHERE RTBRANCHID = @RTBRANCHID 
							AND FORMID = @FORMID 
							AND QUARTER = @QUARTER
							AND (CERTNO LIKE ('G%') OR CERTNO LIKE ('H%')) 
						GROUP BY DEDUCTEEID
					END
			END
		ELSE
			BEGIN
				INSERT INTO @DED
				SELECT DEDUCTEEID
				FROM DEDUCTIONDETAIL WITH(NOLOCK) 
				WHERE RTBRANCHID = @RTBRANCHID 
					AND FORMID = @FORMID 
					AND QUARTER = @QUARTER
				GROUP BY DEDUCTEEID
			END
		SELECT D.PAN 
		FROM DEDUCTEE D WITH(NOLOCK) 
			INNER JOIN @DED DD ON DD.DEDUCTEEID = D.DEDUCTEEID
		GROUP BY D.PAN 
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeducteePODetails')
DROP PROCEDURE USP_TDS_GetDeducteePODetails
GO
CREATE PROCEDURE USP_TDS_GetDeducteePODetails
@DEDUCTEEID INT,  
@FROMDATE SMALLDATETIME = NULL,  
@TODATE SMALLDATETIME = NULL  
AS  
	BEGIN  
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SELECT CB.BRANCHNAME + ' - ' + CB.BRANCHCODE AS BRANCH, D.DEDUCTEEID, D.NAME, (D.ADDRESS1 + ' '+ D.ADDRESS2+ ' ' + D.ADDRESS3 + ' ' + D.ADDRESS4 + ' ' + D.ADDRESS5 +' ' + SM.STATENAME + ' - ' + D.PINCODE) ADDRESS,   
		PO.ORDERNO, D.REFERENCENO, PO.ORDERDATE,NE.ACCOUNTNUMBER, NE.IFSCCODE, DD.INVOICENO, DD.INVOICEDATE,ADDLAMOUNT1 AS INVOICEAMOUNT,  
		DD.PAYMENTMADE, PAYMENTDATE, DD.TOTALDEDUCTED, PO.NEXTAMCDATE    
		INTO #TEMP
		FROM DEDUCTEE D  WITH(NOLOCK)
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID  
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID  
		INNER JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.DEDUCTEEID = D.DEDUCTEEID  
		INNER JOIN STATEMASTER SM WITH(NOLOCK) ON SM.STATEID = D.STATEID  
		INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.ORDERID = PO.ORDERID AND DD.DEDUCTEEID = PO.DEDUCTEEID
		SET @SQLQUERY = 'SELECT * FROM #TEMP WHERE DEDUCTEEID = '+ CAST(@DEDUCTEEID AS VARCHAR)  
		IF(@FROMDATE IS NOT NULL AND @TODATE IS NOT NULL)  
		BEGIN  
			SET @SQLQUERY = @SQLQUERY  + ' AND INVOICEDATE BETWEEN ''' + CAST(@FROMDATE AS VARCHAR) + ''' AND ''' + CAST(@TODATE AS VARCHAR ) + ''''                         
		END  
		EXEC SP_EXECUTESQL @SQLQUERY;  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeducteePODetailsMIS')
DROP PROCEDURE USP_TDS_GetDeducteePODetailsMIS
GO
CREATE PROCEDURE USP_TDS_GetDeducteePODetailsMIS
AS
BEGIN
	SELECT CB.BRANCHNAME + ' - ' + CB.BRANCHCODE AS BRANCH, D.DEDUCTEEID, D.NAME, (D.ADDRESS1 + ' '+ D.ADDRESS2+ ' ' + D.ADDRESS3 + ' ' + D.ADDRESS4 + ' ' + D.ADDRESS5 +' ' + SM.STATENAME + ' - ' + D.PINCODE) ADDRESS,   
   PO.ORDERNO, D.REFERENCENO, PO.ORDERDATE,NE.ACCOUNTNUMBER, NE.IFSCCODE, DD.INVOICENO, DD.INVOICEDATE,ADDLAMOUNT1 AS INVOICEAMOUNT,  
   DD.PAYMENTMADE, PAYMENTDATE, DD.TOTALDEDUCTED, PO.NEXTAMCDATE    
   FROM DEDUCTEE D  
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID  
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID  
   INNER JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.DEDUCTEEID = D.DEDUCTEEID  
   INNER JOIN STATEMASTER SM WITH(NOLOCK) ON SM.STATEID = D.STATEID  
   INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.ORDERID = PO.ORDERID AND DD.DEDUCTEEID = PO.DEDUCTEEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEES')
DROP PROCEDURE USP_TDS_GETDEDUCTEES
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEES]
 @BRANCHID INT,
 @FORMID INT,
 @SECTIONID INT,
 @PREFIXTEXT VARCHAR(MAX),
 @RECCOUNT INT,
 @ISAUDITTRIAL BIT = 0
AS
 BEGIN
  DECLARE @QUERY NVARCHAR(MAX);
  IF @FORMID = 1
   BEGIN
    SET @QUERY = 'SELECT DISTINCT TOP ' + CAST(@RECCOUNT AS VARCHAR) + ' SERIALNO,NAME + ''('' + CAST(SERIALNO AS VARCHAR) + '')'' AS DEDUCTEENAME
				 FROM
				 (
				   SELECT DISTINCT D.NAME, D.PAN, E.SERIALNO FROM DEDUCTEE D  WITH(NOLOCK)
					  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
					  LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
					  LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID = DD.DEDUCTIONID
					  LEFT JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.DEDUCTEEID = D.DEDUCTEEID
					  WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND (DD.TOTALDEDUCTED  = 0 OR DCL.DEDCHALINKID IS NOT NULL OR SD.SALARYDETAILID IS NOT NULL)'
	 IF(@ISAUDITTRIAL = 1)
	   BEGIN
			SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'
	   END
	 SET @QUERY = @QUERY + ') T
				 WHERE NAME + ''('' + CAST(SERIALNO AS VARCHAR) + '')'' LIKE ''' + @PREFIXTEXT + '%'''
   END
  ELSE
   BEGIN
    SET @QUERY = 'SELECT DISTINCT TOP ' + CAST(@RECCOUNT AS VARCHAR) + ' NE.SERIALNO,D.NAME + ''('' + CAST(NE.SERIALNO AS VARCHAR) + '')''AS DEDUCTEENAME
         FROM (
          SELECT DISTINCT DD.DEDUCTEEID,DD.SECTIONID
          FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID
          WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND (DD.TOTALDEDUCTED = 0 OR DCL.DEDCHALINKID IS NOT NULL)'
	IF(@ISAUDITTRIAL = 1)
	   BEGIN
			SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'
	   END
    SET @QUERY = @QUERY +') T INNER JOIN DEDUCTEE D WITH(NOLOCK) ON T.DEDUCTEEID = D.DEDUCTEEID
            INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
         WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND D.NAME + ''('' + CAST(NE.SERIALNO AS VARCHAR) + '')'' LIKE ''' + @PREFIXTEXT + '%'''
  IF(@SECTIONID <> -1)
     BEGIN
      SET @QUERY = @QUERY  + ' AND T.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);
     END
   END
  EXEC SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEESERIALNO')
DROP PROCEDURE USP_TDS_GETDEDUCTEESERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEESERIALNO]
@BRANCHID INT,
@ISEMPLOYEE BIT
AS
 BEGIN
   DECLARE @SQLQUERY NVARCHAR(MAX);
   SET @SQLQUERY = 'SELECT MAX(D.DEDUCTEEID)DEDUCTEEID , E.SERIALNO FROM DEDUCTEE D WITH(NOLOCK)
             INNER JOIN '
    IF(@ISEMPLOYEE = 1)
    BEGIN
     SET @SQLQUERY = @SQLQUERY + ' EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'
    END
  ELSE
    BEGIN
     SET @SQLQUERY = @SQLQUERY + ' NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'
    END
    SET @SQLQUERY = @SQLQUERY + '  WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' GROUP BY  E.SERIALNO'
    EXEC SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEESFORAUTOCOMPLETE')
DROP PROCEDURE USP_TDS_GETDEDUCTEESFORAUTOCOMPLETE
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEESFORAUTOCOMPLETE]
	@BRANCHID INT,
	@FORMID INT,
	@TYPEVALUE INT,
	@VALUE INT,
	@PREFIXTEXT NVARCHAR(MAX),
	@RECCOUNT INT
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY='SELECT DISTINCT TOP '+CAST(@RECCOUNT AS VARCHAR) +' DD.DEDUCTEEID,D.NAME +'' (''+ CAST(NE.SERIALNO AS VARCHAR)+'')''AS DEDUCTEENAME
					   FROM	  DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
												 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
												 LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
					   WHERE  D.NAME +'' (''+ CAST(NE.SERIALNO AS VARCHAR) +'')'' LIKE '''+@PREFIXTEXT+'%'' AND DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND (DD.TOTALDEDUCTED=0 OR DL.DEDCHALINKID IS NOT NULL)';
		IF(@TYPEVALUE = 1 AND @VALUE <> 5)
			BEGIN
				SET @SQLQUERY=@SQLQUERY+' AND DD.QUARTER = ' + CAST(@VALUE AS VARCHAR);
			END
		ELSE IF(@TYPEVALUE = 2)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND MONTH(DD.PAYMENTDATE)='+ CAST(@VALUE AS VARCHAR);
			END
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEESFORFORM16')
DROP PROCEDURE USP_TDS_GETDEDUCTEESFORFORM16
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEESFORFORM16]
	@BRANCHID INT,
	@FORMID INT,
	@PREFIXTEXT VARCHAR(MAX),
	@RECCOUNT INT
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		SET @QUERY = 'SELECT DISTINCT TOP ' + CAST(@RECCOUNT AS VARCHAR) + ' E.SERIALNO,D.NAME + ''('' + CAST(E.SERIALNO AS VARCHAR) + '')''AS DEDUCTEENAME
					  FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
												INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
												LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
					  WHERE  D.NAME + ''(''+ CAST(E.SERIALNO AS VARCHAR) + '')'' LIKE '''+@PREFIXTEXT + '%'' AND DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL)';					  EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEESFORPOAUTOCOMPLETE')
DROP PROCEDURE USP_TDS_GETDEDUCTEESFORPOAUTOCOMPLETE
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEESFORPOAUTOCOMPLETE]
(
 @BRANCHID INT,
 @PREFIXTEXT NVARCHAR(MAX),
 @RECORDCOUNT INT
 )
AS
 BEGIN
  DECLARE @QUERY NVARCHAR(MAX);
  SET @QUERY ='SELECT DEDUCTEE.DEDUCTEEID,DEDUCTEE.NAME +'' (''+ CAST(NONEMPLOYEE.SERIALNO AS VARCHAR)+'')''+''-''+DEDUCTEE.PAN AS DEDUCTEENAME,DEDUCTEE.PANREFERENCE,NONEMPLOYEE.ISTRANSPORTER
      FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=NONEMPLOYEE.DEDUCTEEID
      WHERE  DEDUCTEE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND'
  SET @QUERY = @QUERY + ' DEDUCTEE.NAME +'' (''+ CAST(NONEMPLOYEE.SERIALNO AS VARCHAR) +'')'' LIKE ''%'+@PREFIXTEXT+'%''';
  EXEC SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeducteesHavingBankPan')
DROP PROCEDURE USP_TDS_GetDeducteesHavingBankPan
GO
CREATE PROCEDURE USP_TDS_GetDeducteesHavingBankPan
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS    
	BEGIN 
		SELECT DEDUCTEEID 
		INTO #DED 
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		GROUP BY DEDUCTEEID
		SELECT D.REFERENCENO, D.NAME, D.PAN
		FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN DEFAULTSETTINGS DS WITH(NOLOCK) ON DS.PAN = D.PAN
		WHERE BRANCHID = @BRANCHID AND  
			DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DED) AND
			ISNULL(DS.PAN,'') <> ''
		DROP TABLE #DED 
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTEEWITHINVALIDPAN')
DROP PROCEDURE USP_TDS_GETDEDUCTEEWITHINVALIDPAN
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTEEWITHINVALIDPAN]
@ISEMPLOYEE BIT = 0
AS
 BEGIN
	DECLARE @DEDUCTEE TABLE(REGION VARCHAR(100), BRANCH VARCHAR(100), SERIALNO INT, NAME VARCHAR(100), PAN VARCHAR(10), ADDRESS1 VARCHAR(50),
							ADDRESS2 VARCHAR(50), ADDRESS3 VARCHAR(50), ADDRESS4 VARCHAR(50),ADDRESS5 VARCHAR(50), PHONE VARCHAR(20),
							EMAIL VARCHAR(100), ISEMPLOYEE BIT);
	INSERT INTO @DEDUCTEE
	SELECT (SELECT BRANCHNAME + ' [' + BRANCHCODE +']' FROM COMPANYBRANCH WHERE CB.PARENTBRANCHID = BRANCHID) REGION,
		CB.BRANCHNAME + ' [' + CB.BRANCHCODE +']' BRANCH,
		CASE WHEN NE.SERIALNO IS NULL THEN E.SERIALNO ELSE NE.SERIALNO END AS SERIALNO, D.NAME, D.PAN, D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.PHONENO, D.EMAILADDRESS,
		CASE WHEN NE.DEDUCTEEID IS NULL THEN 1 ELSE 0 END AS ISEMPLOYEE
		FROM
		DEDUCTEE D  WITH(NOLOCK)
		LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
		LEFT JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID
		WHERE PAN NOT LIKE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]')
			AND PAN NOT IN ('PANNOTAVBL','PANINVALID','PANAPPLIED')
  SELECT * FROM @DEDUCTEE WHERE ISEMPLOYEE = @ISEMPLOYEE
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONAUDITTRIAL')
DROP PROCEDURE USP_TDS_GETDEDUCTIONAUDITTRIAL
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONAUDITTRIAL]
AS
  BEGIN
        DECLARE @ROWCOUNT INT,@COUNT INT, @DATA VARCHAR(MAX);
        DECLARE @STRINGSPLIT TABLE(AUDITID INT,BRANCHID INT, FORMID INT, QUARTER INT, NAME VARCHAR(MAX), PAN VARCHAR(10), PAYMENTMADE NUMERIC(13,2),
         PAYMENTDATE VARCHAR(20), SECTIONID INT, TOTALDEDUCTED NUMERIC(13,2), DEDUCTEDDATE VARCHAR(20), CHALLANSNO VARCHAR(10), CHALLANPAIDDATE VARCHAR(20));
  DECLARE @AUDIT TABLE(ID INT IDENTITY(1,1),DATA VARCHAR(MAX));
  INSERT INTO @AUDIT(DATA)
  SELECT TOP 62 (CAST(DA.AUDITID AS VARCHAR) +'^'+ DA.AUDITREMARKS) DATA
     FROM DEDUCTIONDETAILAUDIT DA WITH(NOLOCK)
     LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DA.RECORDID = DD.DEDUCTIONID
     WHERE DA.AUDITREMARKS <> ''
  SELECT @ROWCOUNT = COUNT(ID) FROM @AUDIT
  SET @COUNT = 1;
  WHILE(@COUNT <= @ROWCOUNT)
   BEGIN
      SELECT @DATA = DATA FROM @AUDIT WHERE ID = @COUNT;
   INSERT INTO @STRINGSPLIT (AUDITID ,BRANCHID , FORMID , QUARTER , NAME , PAN , PAYMENTMADE,
         PAYMENTDATE , SECTIONID , TOTALDEDUCTED , DEDUCTEDDATE, CHALLANSNO, CHALLANPAIDDATE)
   EXEC USP_TDS_SPLITINCOLUMNS @DATA
   SET @COUNT = @COUNT + 1;
   END
   SELECT * FROM @STRINGSPLIT
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionChallanSummary')
DROP PROCEDURE USP_TDS_GetDeductionChallanSummary
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDeductionChallanSummary] 
 @BRANCHID INT,      
 @FORMID INT = -1,      
 @ISSUPERADMIN BIT = 1        
AS        
 BEGIN     
   DECLARE @SQLQUERY1 NVARCHAR(MAX),@SQLQUERY2 NVARCHAR(MAX), @SQLQUERY3 NVARCHAR(MAX), @SQLQUERY4 NVARCHAR(MAX);    
   DECLARE @DEDUCTION TABLE(BRANCHID INT, FORMID INT, QUARTER INT,DEDUCTIONCOUNT INT, PAYMENTMADE NUMERIC(15,2), DEDUCTIONTOTAL NUMERIC(13,2));    
   DECLARE @CHALLAN TABLE(BRANCHID INT, FORMID INT, QUARTER INT,CHALLANCOUNT INT, CHALLANTOTAL NUMERIC(15,2))    
   DECLARE @COMPANY TABLE(BRANCHID INT, FORMID INT, QUARTER INT);
   CREATE TABLE #DEDUCTION(BRANCHID INT, QUARTER INT, FORMID INT, DEDUCTIONCOUNT INT,PAYMENTMADE NUMERIC(15,2), DEDUCTIONTOTAL NUMERIC(15,2));
   CREATE TABLE #CHALLAN(BRANCHID INT, QUARTER INT, FORMID INT, CHALLANCOUNT INT,CHALLANTOTAL NUMERIC(15,2));   
   SELECT CB.BRANCHID,TB.FORMID,TB.QUARTER
   INTO #COMPANY
   FROM COMPANYBRANCH CB WITH(NOLOCK)              
   FULL JOIN
   (              
    SELECT 1 FORMID,1 QUARTER UNION SELECT 1 FORMID,2 QUARTER UNION SELECT 1 FORMID,3 QUARTER UNION SELECT 1 FORMID,4 QUARTER              
    UNION              
    SELECT 2 FORMID,1 QUARTER UNION SELECT 2 FORMID,2 QUARTER UNION SELECT 2 FORMID,3 QUARTER UNION SELECT 2 FORMID,4 QUARTER              
    UNION              
    SELECT 3 FORMID,1 QUARTER UNION SELECT 3 FORMID,2 QUARTER UNION SELECT 3 FORMID,3 QUARTER UNION SELECT 3 FORMID,4 QUARTER    
    UNION              
    SELECT 4 FORMID,1 QUARTER UNION SELECT 4 FORMID,2 QUARTER UNION SELECT 4 FORMID,3 QUARTER UNION SELECT 4 FORMID,4 QUARTER                 
   ) AS TB ON 1=1       
   WHERE CB.BRANCHID = @BRANCHID
   SET @SQLQUERY3  =  'SELECT BRANCHID, QUARTER, FORMID, COUNT(DD.DEDUCTIONID)[DEDUCTIONCOUNT], SUM(ISNULL(DD.PAYMENTMADE,0))[PAYMENTMADE], SUM(ISNULL(DD.TOTALDEDUCTED,0))[DEDUCTIONTOTAL] 
				  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				  WHERE DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)
    IF(@FORMID <> -1)
    BEGIN    
		SET @SQLQUERY3  = @SQLQUERY3 + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR)    
    END    
		SET @SQLQUERY3  = @SQLQUERY3 + ' GROUP BY BRANCHID, QUARTER, FORMID'
    INSERT INTO #DEDUCTION
    EXEC SP_EXECUTESQL @SQLQUERY3 
   SET @SQLQUERY1  = 'SELECT C.BRANCHID,C.FORMID,C.QUARTER,ISNULL(TB.DEDUCTIONCOUNT,0)DEDUCTIONCOUNT,ISNULL(TB.PAYMENTMADE,0)PAYMENTMADE, 
			ISNULL(TB.DEDUCTIONTOTAL,0) DEDUCTIONTOTAL  FROM #COMPANY C
			LEFT JOIN 
			(
				SELECT BRANCHID, QUARTER, FORMID, DEDUCTIONCOUNT, PAYMENTMADE, DEDUCTIONTOTAL
				  FROM #DEDUCTION
		    )TB
			ON C.FORMID = TB.FORMID AND C.QUARTER = TB.QUARTER AND C.BRANCHID = TB.BRANCHID'
   INSERT INTO @DEDUCTION
   EXEC SP_EXECUTESQL @SQLQUERY1  
   SET @SQLQUERY4  =  'SELECT BRANCHID, QUARTER, FORMID, COUNT(CD.CHALLANID)[CHALLANCOUNT], SUM(CD.CHALLANTOTAL)[CHALLANTOTAL] 
				  FROM CHALLANDETAIL CD WITH(NOLOCK)
				  WHERE CD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
    IF(@FORMID <> -1)
    BEGIN    
		SET @SQLQUERY4  = @SQLQUERY4 + ' AND CD.FORMID = ' + CAST(@FORMID AS VARCHAR)    
    END    
		SET @SQLQUERY4  = @SQLQUERY4 + ' GROUP BY BRANCHID, QUARTER, FORMID'
    INSERT INTO #CHALLAN
    EXEC SP_EXECUTESQL @SQLQUERY4   
   SET @SQLQUERY2 = 'SELECT C.BRANCHID,C.FORMID,C.QUARTER,ISNULL(TB.CHALLANCOUNT,0)CHALLANCOUNT, ISNULL(TB.CHALLANTOTAL,0)CHALLANTOTAL
		  FROM #COMPANY C
			LEFT JOIN 
			(
				SELECT BRANCHID, QUARTER, FORMID, CHALLANCOUNT, CHALLANTOTAL
				  FROM #CHALLAN
		    )TB
			 ON C.FORMID = TB.FORMID AND C.QUARTER = TB.QUARTER AND C.BRANCHID = TB.BRANCHID'   
   INSERT INTO @CHALLAN    
   EXEC SP_EXECUTESQL @SQLQUERY2    
   SELECT C.BRANCHID, CASE WHEN C.FORMID =1 THEN 'Form 24' WHEN C.FORMID=2 THEN 'Form 26' WHEN C.FORMID=3 THEN 'Form 27' ELSE 'Form 27E' END AS FORM,      
			  C.QUARTER, ISNULL(D.[DEDUCTIONCOUNT],0)DEDUCTIONCOUNT,ISNULL(D.PAYMENTMADE,0)[PAYMENTMADE],ISNULL(D.[DEDUCTIONTOTAL],0)[DEDUCTIONTOTAL],       
			  ISNULL(C.[CHALLANCOUNT],0)CHALLANCOUNT, ISNULL(C.[CHALLANTOTAL],0)[CHALLANTOTAL] 
   FROM @DEDUCTION D      
   INNER JOIN @CHALLAN C ON C.BRANCHID = D.BRANCHID AND C.FORMID = D.FORMID AND C.QUARTER = D.QUARTER      
   ORDER BY C.FORMID, C.QUARTER
   DROP TABLE #DEDUCTION
   DROP TABLE #CHALLAN
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONCHALLANTOTAL')
DROP PROCEDURE USP_TDS_GETDEDUCTIONCHALLANTOTAL
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONCHALLANTOTAL]
 @BRANCHID INT ,
 @FORMID INT,
 @QUARTERID INT
AS
BEGIN
	 DECLARE @DEDUCTIONTOTAL NUMERIC(18,2),@CHALLANTOTAL NUMERIC(18,2)
	SELECT @DEDUCTIONTOTAL=SUM(TOTALDEDUCTED),@CHALLANTOTAL=SUM(CD.CHALLANTOTAL) FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN  CHALLANDETAIL CD WITH(NOLOCK) ON DD.BRANCHID=CD.BRANCHID
      WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER = @QUARTERID;
      IF(@DEDUCTIONTOTAL<@CHALLANTOTAL)
      BEGIN
      SELECT  0;
      END
      ELSE
      BEGIN
      SELECT  1;
      END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONCOUNT')
DROP PROCEDURE USP_TDS_GETDEDUCTIONCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONCOUNT]
@BRANCHID INT
AS
	BEGIN
		SELECT COUNT(PARTPAYMENTID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONDET')
DROP PROCEDURE USP_TDS_GETDEDUCTIONDET
GO
CREATE PROCEDURE USP_TDS_GETDEDUCTIONDET
@BRANCHID INT,
@FORMID INT
AS
 BEGIN
	SELECT SERIALNO, PARTPAYMENTID, DEDUCTIONID, QUARTER, BRANCHID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_GETDEDUCTIONDETAIL
GO
CREATE PROCEDURE USP_TDS_GETDEDUCTIONDETAIL
 @DEDUCTIONID INT,        
 @NAME VARCHAR(100),        
 @PAN VARCHAR(11)        
AS                
BEGIN                
 SELECT CB.BRANCHCODE,DD.FORMID,DD.QUARTER,            
 D.NAME,D.PAN,DD.ADDITIONALFIELD1,DD.TOTALDEDUCTED,
 DD.PAYMENTMADE,CONVERT(NVARCHAR,DD.DEDUCTEDDATE,103) AS DEDUCTEDDATE,
 D.REFERENCENO,DD.TRANSACTIONSEQNO      
FROM DEDUCTEE D WITH(NOLOCK)       
INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID      
INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = DD.BRANCHID            
 WHERE DD.DEDUCTIONID=@DEDUCTIONID AND        
 D.NAME=@NAME AND        
 D.PAN=@PAN                
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONDETAILBASEDONCHALLANID')
DROP PROCEDURE USP_TDS_GETDEDUCTIONDETAILBASEDONCHALLANID
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONDETAILBASEDONCHALLANID]
@FORMID INT,
@CHALLANID INT,
@NAME VARCHAR(75)
AS
  BEGIN
	 DECLARE @SQLQUERY NVARCHAR(MAX);
 	 SET @SQLQUERY='SELECT COUNT(DD.DEDUCTIONID)TOTAL, ISNULL(SUM(DD.INCOMETAX),0)INCOMETAX , ISNULL(SUM(DD.SURCHARGE),0)SURCHARGE, ISNULL(SUM(DD.EDUCATIONCESS),0)EDUCATIONCESS ,
				   ISNULL(SUM(DD.TOTALDEDUCTED),0) TOTALDEDUCTED
			FROM CHALLANDETAIL CD WITH(NOLOCK)
			LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID AND DL.BRANCHID = CD.BRANCHID
			LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID
			LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID'
	IF(@FORMID = 1)
	  BEGIN
		SET @SQLQUERY=@SQLQUERY + ' INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID'
	  END
	ELSE
	  BEGIN
		SET @SQLQUERY=@SQLQUERY + ' INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID'
	  END
		SET @SQLQUERY=@SQLQUERY + '	WHERE CD.CHALLANID = ' + CAST (@CHALLANID AS VARCHAR)
	 IF(@NAME <> '')
	  BEGIN
		SET @SQLQUERY=@SQLQUERY + ' AND D.NAME LIKE ''%' + @NAME + '%'''
	  END
	 EXEC SP_EXECUTESQL @SQLQUERY;
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionDetailForReport')
DROP PROCEDURE USP_TDS_GetDeductionDetailForReport
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDeductionDetailForReport]
@BRANCHID INT,                          
@FORMID INT,                          
@QUARTER INT,                          
@ID VARCHAR(MAX),          
@IsDeductionID BIT                          
AS                          
  BEGIN          
   DECLARE @SQLQUERY NVARCHAR(MAX);                        
   DECLARE  @IDTABLE TABLE(ID INT);          
   IF(@IsDeductionID = 0)                          
   BEGIN
	  SET @SQLQUERY = 'SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WHERE PARTPAYMENTID IN (' +@ID + ') AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '           
		   AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR)                         
	  INSERT INTO @IDTABLE                
	  EXEC SP_EXECUTESQL @SQLQUERY;          
   END          
  ELSE        
  BEGIN        
   INSERT INTO @IDTABLE                 
   SELECT * FROM DBO.UDF_TDS_SplitString (@ID,',')            
  END            
	SELECT C.BRANCHNAME, C.BRANCHCODE, C.PARENTBRANCHID, C.BRANCHID
	INTO #COMPANY
	 FROM COMPANYBRANCH CB
	INNER JOIN
	(
		SELECT BRANCHID, BRANCHNAME, BRANCHCODE, ISZORO, CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END AS PARENTBRANCHID
		FROM COMPANYBRANCH WITH(NOLOCK)
	) C ON C.PARENTBRANCHID = CB.BRANCHID 
   SELECT (CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')') ZONE, (C.BRANCHNAME + ' ('+ C.BRANCHCODE + ')') BRANCH, DD.SERIALNO, D.NAME, D.PAN,                  
    (TR.BGLCODE + ' - '+ TR.DESCRIPTION) BGLCODE, DD.PAYMENTMADE, DD.PAYMENTDATE, DD.TAXRATE, DD.TOTALDEDUCTED, DD.DEDUCTEDDATE,                          
    NE.ACCOUNTNUMBER, NE.IFSCCODE,ISNULL(NE.STREGNO,'')STREGNO, ISNULL(NE.GSTIN,'')GSTIN, DD.RPAMOUNT1 AS EXCLUDESERVICETAX, DD.RPAMOUNT2 AS SERVICETAX, DD.RPSBCESS AS SBCESS, DD.RPKKCESS AS KKCESS,((DD.RPAMOUNT1 + DD.RPAMOUNT2 + DD.RPSBCESS + DD.RPKKCESS) - DD.TOTALDEDUCTED)AS NETPAYABLE, NE.BANKNAME, ISNULL(NE.BRANCHNAME,'') AS DEDUCTEEBRANCH,           CASE                   
      WHEN (TS.SECTIONNAME IS NULL)                   
        THEN ''                   
       ELSE (TS.SECTIONNAME + '-'+ TS.DESCRIPTION)                   
    END AS SECTIONNAME, ISNULL(RP.BILLDATE, CAST('30-JUN-2017' AS SMALLDATETIME)) AS BILLDATE                                       
    FROM DEDUCTIONDETAIL DD WITH(NOLOCK)                  
    INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID                  
    INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID                  
    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID
	INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON DD.REPORTPAYMENTID = RP.ID                   
    INNER JOIN                  
    (                  
       SELECT CB.PARENTBRANCHID, CB.BRANCHNAME, CB.BRANCHCODE, DD.REPORTPAYMENTID FROM #COMPANY CB     
		INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTEEBRANCH = CB.BRANCHID                  
		--WHERE CB.PARENTBRANCHID = @BRANCHID 
		GROUP BY  CB.PARENTBRANCHID, CB.BRANCHNAME, CB.BRANCHCODE, DD.REPORTPAYMENTID
    )C ON  DD.REPORTPAYMENTID = C.REPORTPAYMENTID --C.PARENTBRANCHID = DD.BRANCHID AND                           
    INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID                                                 
    INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID              
    INNER JOIN @IDTABLE IDT ON IDT.ID = DD.DEDUCTIONID        
    WHERE DD.BRANCHID = @BRANCHID  AND DD.FORMID = @FORMID  AND DD.QUARTER =@QUARTER
    DROP TABLE #COMPANY       
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionDetailManualEntered')
DROP PROCEDURE USP_TDS_GetDeductionDetailManualEntered
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDeductionDetailManualEntered] 
	@FORMID INT,
	@MONTHID INT
AS
	BEGIN
		SELECT * INTO #DEDTOSHOW
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE ENTRYTYPE = 1
			AND FORMID = @FORMID
			AND MONTH(PAYMENTDATE) = @MONTHID
		SELECT BRANCHCODE, QUARTER, 
			CASE WHEN DD.FORMID = 1 THEN '24Q'
				WHEN DD.FORMID = 2 THEN '26Q'
				WHEN DD.FORMID = 3 THEN '27Q'
				ELSE '27EQ' END FORMTYPE, 
			DD.SERIALNO, D.NAME, D.PAN, INCOMETAX, SURCHARGE, EDUCATIONCESS,
			TOTALDEDUCTED, PAYMENTMADE, PAYMENTDATE, DEDUCTEDDATE,
			(TS.SECTIONNAME +'-'+ TS.TAXNAME) AS SECTIONNAME, INCOMETAXRATE, SURCHARGERATE, EDUCATIONCESSRATE,
			DD.TAXRATE, 
			CASE 
				WHEN DD.FORMID = 1 AND ISNULL(DD.NONDEDREASON, 0) = 1 THEN 'LOWER DEDUCTION U/S 197'						-- A	spec
				WHEN DD.FORMID = 1 AND ISNULL(DD.NONDEDREASON, 0) = 2 THEN 'NO DEDUCTION U/S 197'							-- B	spec
				WHEN DD.FORMID = 1 AND ISNULL(DD.NONDEDREASON, 0) = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 2 AND ISNULL(DD.NONDEDREASON, 0) = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'			-- A	spec
				WHEN DD.FORMID = 2 AND ISNULL(DD.NONDEDREASON, 0) = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
				WHEN DD.FORMID = 2 AND ISNULL(DD.NONDEDREASON, 0) = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 2 AND ISNULL(DD.NONDEDREASON, 0) = 4 THEN 'Transporter with valid PAN (0%)'				-- T	spec
				WHEN DD.FORMID = 2 AND ISNULL(DD.NONDEDREASON, 0) = 5 THEN 'Amount Paid/Credited is Under Threshold'		-- Y	spec
				WHEN DD.FORMID = 2 AND ISNULL(DD.NONDEDREASON, 0) = 6 THEN 'Software Vendor Transaction'					-- S	spec
				WHEN DD.FORMID = 2 AND ISNULL(DD.NONDEDREASON, 0) = 7 THEN 'NO DEDUCTION U/S 197A(1F)'						-- Z	spec
				WHEN DD.FORMID = 3 AND ISNULL(DD.NONDEDREASON, 0) = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'		-- A	spec
				WHEN DD.FORMID = 3 AND ISNULL(DD.NONDEDREASON, 0) = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
				WHEN DD.FORMID = 3 AND ISNULL(DD.NONDEDREASON, 0) = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 3 AND ISNULL(DD.NONDEDREASON, 0) = 6 THEN 'Software Vendor Transaction'					-- S	spec
				WHEN DD.FORMID = 4 AND ISNULL(DD.NONDEDREASON, 0) = 1 THEN 'AS PER SECTION 206C(9)'							-- A	spec
				WHEN DD.FORMID = 4 AND ISNULL(DD.NONDEDREASON, 0) = 2 THEN 'AS PER SECTION 206C(1A)'						-- B	spec
				ELSE ''
			END [DEDUCTIONREMARKS]
		FROM #DEDTOSHOW DD WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
				ON CB.BRANCHID = DD.BRANCHID
			INNER JOIN DEDUCTEE D WITH(NOLOCK)
				ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK)
				ON TS.SECTIONID = DD.SECTIONID
		ORDER BY BRANCHCODE,DD.FORMID,QUARTER 
		DROP TABLE #DEDTOSHOW
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONDETAILS')
DROP PROCEDURE USP_TDS_GETDEDUCTIONDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETDEDUCTIONDETAILS]
 @DEDUCTIONID INT
AS
 BEGIN
  SELECT D.NAME,D.PAN,D.PANREFERENCE,
      NE.DEDUCTEECODE,
      TS.SECTIONNAME,
      DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,DD.SERIALNO AS DEDSERIALNO,DD.DEDUCTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.SECTIONID,DD.ERETURNID,DD.MODE,
      DD.INCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.ISTAXINFOEDITABLE,DD.TAXRATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
      DD.ISBOOKENTRY,DD.NONDEDREASON,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,
      CD.SERIALNO AS CHALSERIALNO,CD.CHALLANID,CASE WHEN CD.MODEOFPAYMENT = 1 OR CD.MODEOFPAYMENT = 2 THEN CD.BANKCHALLANNO ELSE CD.TRNVOUCHERNO END AS BANKCHALLANNO,
      CD.CHALLANPAIDDATE,CD.INCOMETAX AS CHALLANINCOMETAX,CD.SURCHARGE AS CHALLANSURCHARGE,CD.EDUCATIONCESS AS CHALLANEDUCATIONCESS,CD.CHALLANTOTAL,CD.[QUARTER] AS CHALLANQUARTER,CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CD.ISCOMPANY END AS CHALLANCODE,      DL.DEDCHALINKID
  FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID
          LEFT JOIN  NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
          INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
          LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
          LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
  WHERE  DD.DEDUCTIONID = @DEDUCTIONID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONDETAILSF005')
DROP PROCEDURE USP_TDS_GETDEDUCTIONDETAILSF005
GO
CREATE PROCEDURE  USP_TDS_GETDEDUCTIONDETAILSF005  
(  
@BRANCHID INT,  
@QUARTER INT  
)  
AS  
BEGIN  
	SELECT DD.DEDUCTIONID INTO #DED FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
		WHERE  DD.BRANCHID=@BRANCHID AND DD.FORMID=2 AND DD.QUARTER = @QUARTER AND DD.SECTIONID=5 AND DD.ENTRYTYPE=4 AND 
		    ISNULL(DD.TOTALDEDUCTED,0) > 0
    SELECT DEDUCTIONID INTO #DEDUCTION FROM 
    (
	   SELECT DEDUCTIONID FROM #DED
	   EXCEPT
	   SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE BRANCHID=@BRANCHID 
    )DD
   SELECT D.REFERENCENO,DD.DEDUCTIONID,DD.PAYMENTMADE,PAYMENTDATE,TOTALDEDUCTED,DEDUCTEDDATE 
	 FROM #DEDUCTION DE 
	INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DE.DEDUCTIONID = DD.DEDUCTIONID
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID   
	WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=2 AND DD.QUARTER = @QUARTER AND DD.SECTIONID=5 AND DD.ENTRYTYPE=4 AND LEN(ISNULL(D.REFERENCENO,'')) > 0
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONDETAILSF008')
DROP PROCEDURE USP_TDS_GETDEDUCTIONDETAILSF008
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONDETAILSF008]
(          
@BRANCHCODES VARCHAR(MAX),          
@MONTH INT          
)          
AS          
BEGIN         
	  SELECT * INTO #BRANCES FROM UDF_TDS_SPLITSTRING(@BRANCHCODES,',');
	  SELECT DD.DEDUCTIONID INTO #DED FROM DEDUCTIONDETAIL DD WITH(NOLOCK)   
	  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID
	  INNER JOIN #BRANCES B ON B.DATA = CB.BRANCHCODE
	  WHERE  DD.FORMID IN (2,3) AND MONTH(DD.PAYMENTDATE) = @MONTH AND DD.SECTIONID IN(5,17) AND DD.ENTRYTYPE=4 AND ISNULL(DD.TOTALDEDUCTED,0) > 0
       SELECT DEDUCTIONID INTO #DEDUCTION FROM   
		(  
		SELECT DEDUCTIONID FROM #DED  
		EXCEPT  
		SELECT DEDUCTIONID FROM DEDCHALINK DL 
		 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DL.BRANCHID = CB.BRANCHID
	     INNER JOIN #BRANCES B ON B.DATA = CB.BRANCHCODE		
		)DD        
	   SELECT CB.BRANCHCODE,D.BRANCHID, D.REFERENCENO,DD.DEDUCTIONID,DD.SERIALNO,DD.SECTIONID,DD.FORMID,DD.PAYMENTMADE,PAYMENTDATE,TOTALDEDUCTED,DEDUCTEDDATE 
	   FROM #DEDUCTION DE   
	  INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DE.DEDUCTIONID = DD.DEDUCTIONID  
	   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID
	  INNER JOIN #BRANCES B ON B.DATA = CB.BRANCHCODE
	  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID     
	  WHERE DD.FORMID IN (2,3)  AND MONTH(DD.PAYMENTDATE) = @MONTH AND DD.SECTIONID=5 AND DD.ENTRYTYPE=4 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONDETAILSFORFORM16A')
DROP PROCEDURE USP_TDS_GETDEDUCTIONDETAILSFORFORM16A
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONDETAILSFORFORM16A]
 @STARTROW INT,  
 @PAGESIZE INT,  
 @BRANCHID INT ,  
 @FORMID INT,  
 @SECTIONID INT,  
 @DEDUCTEESLNO INT,  
 @PRINTCERTIFICATENO VARCHAR(50)  
AS  
 BEGIN  
  SET NOCOUNT ON
  DECLARE @FIRSTREC INT, @LASTREC INT;  
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE;  
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
  DECLARE @QUERY NVARCHAR(MAX), @SQLQUERY NVARCHAR(MAX);  
  SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #FORM16ADEDUCTIONS  
       FROM (  
        SELECT DD.DEDUCTEEID,NE.SERIALNO,D.NAME,DD.DEDUCTIONID,DD.[QUARTER] AS DEDQUARTER,DD.SERIALNO AS DEDSLNO,
			   DD.SECTIONID,DD.PAYMENTDATE,DD.PAYMENTMADE,DD.DEDUCTEDDATE,DD.TOTALDEDUCTED,DD.TAXRATE,  
			   NULL AS DEDCHALINKID, TS.SECTIONNAME, NULL AS CHALLANPAIDDATE,NULL AS BANKCHALLANNO,NULL AS CHAQUARTER,
			   NULL AS CHALSLNO,NULL AS BSRCODE,F.TDSCERTIFICATENO,F.PRINTCERTIFICATENO,F.CERTIFICATEDATE,F.ISCERTIFICATEGIVEN  
        FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID  
                 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
                 INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID                  
                 LEFT JOIN FORM16A F  WITH(NOLOCK) ON DD.DEDUCTIONID = F.DEDUCTIONID  
        WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.TOTALDEDUCTED = 0';  
  IF @SECTIONID <> -1  
   BEGIN  
    SET @QUERY = @QUERY + ' AND DD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);  
   END  
  IF @DEDUCTEESLNO <> -1  
   BEGIN  
    SET @QUERY = @QUERY + ' AND NE.SERIALNO = ' + CAST(@DEDUCTEESLNO AS VARCHAR);  
   END  
   IF @PRINTCERTIFICATENO <> ''  
   BEGIN  
    SET @QUERY = @QUERY + ' AND F.PRINTCERTIFICATENO = ''' + @PRINTCERTIFICATENO + '''';  
   END  
  SET @QUERY = @QUERY + ' UNION '
  SET @SQLQUERY = ' SELECT DD.DEDUCTEEID,  
          NE.SERIALNO,  
          D.NAME,  
          DD.DEDUCTIONID,DD.[QUARTER] AS DEDQUARTER,DD.SERIALNO AS DEDSLNO,DD.SECTIONID,DD.PAYMENTDATE,DD.PAYMENTMADE,DD.DEDUCTEDDATE,DD.TOTALDEDUCTED,DD.TAXRATE,  
          DCL.DEDCHALINKID,  
          TS.SECTIONNAME,  
          CD.CHALLANPAIDDATE,CD.BANKCHALLANNO,CD.[QUARTER] AS CHAQUARTER,CD.SERIALNO AS CHALSLNO,  
          RB.BSRCODE,  
          F.TDSCERTIFICATENO,F.PRINTCERTIFICATENO,F.CERTIFICATEDATE,F.ISCERTIFICATEGIVEN  
        FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID  
                 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
                 INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID  
                 INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID  
                 INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DCL.CHALLANID = CD.CHALLANID  
                 LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID  
                 LEFT JOIN FORM16A F  WITH(NOLOCK) ON DD.DEDUCTIONID = F.DEDUCTIONID  
        WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.TOTALDEDUCTED > 0'
   IF @SECTIONID <> -1  
   BEGIN  
    SET @SQLQUERY = @SQLQUERY + ' AND DD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);  
   END  
  IF @DEDUCTEESLNO <> -1  
   BEGIN  
    SET @SQLQUERY = @SQLQUERY + ' AND NE.SERIALNO = ' + CAST(@DEDUCTEESLNO AS VARCHAR);  
   END  
   IF @PRINTCERTIFICATENO <> ''  
   BEGIN  
    SET @SQLQUERY = @SQLQUERY + ' AND F.PRINTCERTIFICATENO = ''' + @PRINTCERTIFICATENO + '''';  
   END        
  SET @QUERY = @QUERY +  @SQLQUERY +') TEMP;SELECT * FROM #FORM16ADEDUCTIONS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);  
  EXEC SP_EXECUTESQL @QUERY;  
   SET NOCOUNT OFF
  --PRINT @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONDETAILSFORPANVALIDATION')
DROP PROCEDURE USP_TDS_GETDEDUCTIONDETAILSFORPANVALIDATION
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONDETAILSFORPANVALIDATION]
	@FORMID INT,
	@QUARTER INT,
	 @BRANCHID INT
AS
	BEGIN
		IF(@FORMID=1)
			BEGIN
				/*FORM24*/
				SELECT  DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,DD.DEDUCTEEPAN,DD.PAYMENTMADE,DD.TOTALDEDUCTED
				FROM    DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
				WHERE   DD.[QUARTER]=@QUARTER AND DD.FORMID=@FORMID AND DD.BRANCHID=@BRANCHID
				UNION
				SELECT  DEDUCTIONID,[QUARTER],BRANCHID,FORMID,DEDUCTEEPAN,PAYMENTMADE,TOTALDEDUCTED
				FROM    DEDUCTIONDETAIL WITH(NOLOCK)
				WHERE   [QUARTER]=@QUARTER AND FORMID=@FORMID AND BRANCHID=@BRANCHID AND  TOTALDEDUCTED=0;
			END
		ELSE IF(@FORMID=2)
			BEGIN
			/*IF NONDEDUCTION REASON IS NULL OR NON DEDUCTION REASON IS 1*/
				SELECT  DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,DD.DEDUCTEEPAN,DD.PAYMENTMADE,DD.TOTALDEDUCTED
				FROM    DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
				WHERE   DD.[QUARTER]=@QUARTER AND DD.FORMID=@FORMID AND DD.BRANCHID=@BRANCHID AND DD.NONDEDREASON=0 OR DD.NONDEDREASON IS NULL
				UNION
				SELECT  DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,DD.DEDUCTEEPAN,DD.PAYMENTMADE,DD.TOTALDEDUCTED
				FROM    DEDUCTIONDETAIL DD WITH(NOLOCK)
						INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID =TS.SECTIONID
				WHERE   DD.[QUARTER]=@QUARTER AND DD.FORMID=@FORMID AND DD.BRANCHID=@BRANCHID AND DD.SECTIONID IN(3,4,5,11) AND DD.NONDEDREASON=1
				UNION
				SELECT  DEDUCTIONID,[QUARTER],BRANCHID,FORMID,DEDUCTEEPAN,PAYMENTMADE,TOTALDEDUCTED
				FROM    DEDUCTIONDETAIL  WITH(NOLOCK)
				WHERE   [QUARTER]=@QUARTER AND FORMID=@FORMID AND BRANCHID=@BRANCHID AND  TOTALDEDUCTED=0;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONDETAILSFORREPORT')
DROP PROCEDURE USP_TDS_GETDEDUCTIONDETAILSFORREPORT
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONDETAILSFORREPORT]
  @BRANCHID INT,
  @FORMID INT,
  @FROMDATE SMALLDATETIME,
  @TODATETIME SMALLDATETIME
  AS
   BEGIN
    SELECT * FROM VW_DEDUCTIONREPORT WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND PAYMENTDATE BETWEEN @FROMDATE AND @TODATETIME
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionDetailsOnPartPaymentID')
DROP PROCEDURE USP_TDS_GetDeductionDetailsOnPartPaymentID
GO
CREATE PROCEDURE USP_TDS_GetDeductionDetailsOnPartPaymentID
	@BRANCHID INT,                                            
	@FORMID INT,                                            
	@QUARTER INT,                                            
	@PARTPAYMENTID INT                  
AS    
	BEGIN                                            
		DECLARE @HASPARTPAYMENTDETAIL BIT,@AVAILORDERAMOUNT NUMERIC(13,2), @DEDUCTEEID INT, @ORDERID INT;                                            
		SET @AVAILORDERAMOUNT = 0;              
		IF EXISTS (SELECT PARTDETAILID 
				   FROM PARTPAYMENTDETAILS WITH(NOLOCK) 
				   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
						AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)                                            
			BEGIN                                            
				SET @HASPARTPAYMENTDETAIL = 1;                    
			END                        
		ELSE                      
			BEGIN                                            
				SET @HASPARTPAYMENTDETAIL = 0;                    
			END
		IF EXISTS(SELECT ORDERID 
				  FROM DEDUCTIONDETAIL WITH(NOLOCK) 
				  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
					AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID 
					AND ISNULL(ORDERID,-1) <> -1)              
			BEGIN              
				SELECT @DEDUCTEEID = DEDUCTEEID, @ORDERID = ORDERID 
				FROM DEDUCTIONDETAIL WITH(NOLOCK)  
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
					AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID   
				SELECT @AVAILORDERAMOUNT = SUM(ISNULL(ADDLAMOUNT1,0)) 
				FROM DEDUCTIONDETAIL WITH(NOLOCK)               
				WHERE DEDUCTEEID = @DEDUCTEEID AND ORDERID = @ORDERID              
				GROUP BY DEDUCTEEID              
			END              
		SELECT @HASPARTPAYMENTDETAIL HASPARTPAYMENTDETAIL, D.NAME, D.PAN, D.PANREFERENCE,
			ISNULL(D.REFERENCENO, '') REFERENCENO, NE.DEDUCTEECODE, NE.SERIALNO, TS.SECTIONNAME,  
			DD.BRANCHID, DD.FORMID, DD.[QUARTER], DD.DEDUCTEEID, DD.SERIALNO AS DEDSERIALNO, 
			DD.DEDUCTIONID, DD.PAYMENTMADE, DD.PAYMENTDATE, DD.SECTIONID, DD.ERETURNID, DD.MODE,                                            
			DD.INCOMETAX, DD.INCOMETAXRATE, DD.SURCHARGE, DD.SURCHARGERATE, DD.EDUCATIONCESS, 
			DD.EDUCATIONCESSRATE, DD.ISTAXINFOEDITABLE, DD.TAXRATE, DD.TOTALDEDUCTED, DD.DEDUCTEDDATE, 
			DD.ISBOOKENTRY, DD.NONDEDREASON, DD.ISGROSSINGUP, DD.UTN, DD.ISPANVALIDBYITD, CD.SERIALNO AS CHALSERIALNO,                                          
			ISNULL(CD.CHALLANID, -1) CHALLANID, ISNULL(NE.BANKNAME, '') BANKNAME, ISNULL(BRANCHNAME, '') DEDUCTEEBRANCH,                                           
			CASE  WHEN CD.MODEOFPAYMENT = 1 OR CD.MODEOFPAYMENT = 2 
					THEN CD.BANKCHALLANNO                                           
					ELSE CD.TRNVOUCHERNO 
			END AS BANKCHALLANNO,                                          
			CD.CHALLANPAIDDATE, CD.INCOMETAX AS CHALLANINCOMETAX, CD.SURCHARGE AS CHALLANSURCHARGE,
			CD.EDUCATIONCESS AS CHALLANEDUCATIONCESS, CD.CHALLANTOTAL , CD.[QUARTER] AS CHALLANQUARTER, 
			CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CASE WHEN CD.ISCOMPANY=1 THEN 1 ELSE 2 END END AS CHALLANCODE,                                            
			ISNULL(CD.ISAUTOGENERATED,0) AS ISAUTOGENERATED, DL.DEDCHALINKID, DD.ORGINCOMETAX, 
			ORGSURCHARGE, ORGEDUCATIONCESS, ORGTOTALDEDUCTED, DD.ORGPAYMENTMADE, 
			ISNULL(DD.ADDITIONALFIELD1, '') ADDITIONALFIELD1, DD.PARTPAYMENTID, 
			ISNULL(DD.BGLCODEID, -1) BGLCODEID, ISNULL(DD.REPORTPAYMENTID, -1) REPORTPAYMENTID,                                        
			ISNULL(NE.ACCOUNTNUMBER, '') ACCOUNTNUMBER, ISNULL(NE.IFSCCODE, '') IFSCCODE,  
			ISNULL(DD.RPAMOUNT1, 0) EXCLUDESERVICETAX,
			CASE 
				WHEN ISNULL(RP.BILLDATE, CAST('30-JUN-2017' AS SMALLDATETIME)) <= CAST('30-JUN-2017' AS SMALLDATETIME) 
					THEN ISNULL(NE.STREGNO ,'') 
					ELSE ISNULL(NE.GSTIN,'') 
			END STREGNO,                                        
			ISNULL(DD.RPAMOUNT2, 0) SERVICETAX, ISNULL(DD.RPSBCESS, 0) SBCESS,  ISNULL(DD.RPKKCESS, 0) KKCESS,                                   
			ISNULL(TR.BGLCODE, 0)  BGLCODE, DD.ENTRYTYPE, ISNULL(TOTALPURCHASEVALUE, 0) TOTALPURCHASEVALUE , 
			CERTIFICATEDATE, CREATEDON, ISNULL(DD.TRANSSTATUS, 0)TRANSACTIONSTATUS, CONVERT(BIGINT, DD.TIMESTAMP) AS TIMESTAMP, 
			ISNULL(DD.ORDERID, -1) ORDERID, ISNULL(PO.ORDERNO, '') ORDERNO , 
			CASE WHEN ORDERAMOUNT IS NULL 
				THEN ISNULL(ORDERAMOUNT, 0) 
				ELSE ORDERAMOUNT - @AVAILORDERAMOUNT 
			END AS AVAILORDERAMOUNT ,             
			ISNULL(ORDERAMOUNT, 0) AS TOTALORDERAMOUNT, ISNULL(ADDLAMOUNT1, 0) ADDLAMOUNT1, 
			ISNULL(ADDLAMOUNT2, 0)ADDLAMOUNT2, ISNULL(INCLUDEST, 0) INCLUDEST, INVOICENO, INVOICEDATE, 
			TS.TAXRATE AS SECTIONTAXRATE, ISNULL(DD.CERTNO, '') CERTNO, ISNULL(TDSRATEASPER, '') TDSRATEASPER, 
			DD.ACKNO, ISNULL(REMITTANCEID, -1) REMITTANCEID,
			ISNULL(COUNTRYID, -1) COUNTRYID, ISNULL(EMAILDED, '') EMAILDED, ISNULL(CONTACTNODED, '') CONTACTNODED, 
			ISNULL(ADDRESSDED, '') ADDRESSDED, ISNULL(IDENTNUMDED, '') IDENTNUMDED,
			ISNULL(RP.BILLDATE, CAST('30-JUN-2017' AS SMALLDATETIME)) AS BILLDATE,
			ISNULL(DD.REMARKS1,'') REMARKS1, ISNULL(DD.REMARKS3,'') REMARKS3 
		FROM DEDUCTIONDETAIL DD   WITH(NOLOCK)              
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID                                            
			LEFT JOIN  NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID                                          
			LEFT JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID= DD.REPORTPAYMENTID                                        
			LEFT JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID                                           
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID                                               
			LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID                                            
			LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID                       
			LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID       
			LEFT JOIN CERTDETAIL C WITH(NOLOCK) ON C.DEDUCTEEID = DD.DEDUCTEEID 
				AND C.SECTIONID = CASE WHEN DD.SECTIONID IN (23,24) THEN 15 ELSE DD.SECTIONID END 
		WHERE  DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID 
			AND DD.QUARTER = @QUARTER AND DD.PARTPAYMENTID = @PARTPAYMENTID                                            
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionDetForDQR')
DROP PROCEDURE USP_TDS_GetDeductionDetForDQR
GO
CREATE PROCEDURE [USP_TDS_GetDeductionDetForDQR]  
(  
@BRANCHID INT,  
@FORMID TINYINT,  
@QUARTER TINYINT  
)  
AS  
BEGIN  
IF @FORMID=1
 BEGIN
	SELECT NE.SERIALNO,D.NAME,D.PAN,TAX.SECTIONNAME,DD.PAYMENTMADE,DD.TOTALDEDUCTED,ISNULL(DD.NONDEDREASON,0)NONDEDREASON FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK)  
	ON D.DEDUCTEEID=DD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID INNER JOIN TAXSECTIONS TAX  WITH(NOLOCK)  
	ON DD.SECTIONID=TAX.SECTIONID AND DD.FORMID=TAX.FORMID  LEFT JOIN DEDCHALINK DCL WITH(NOLOCK)  
	ON DCL.DEDUCTIONID=DD.DEDUCTIONID AND DCL.BRANCHID=DD.BRANCHID  
	INNER JOIN EMPLOYEE NE WITH(NOLOCK)  
	ON NE.DEDUCTEEID=D.DEDUCTEEID  
	WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND D.PANREFERENCE<>'' AND ( DD.TOTALDEDUCTED=0 OR DCL.DEDUCTIONID  IS NOT  NULL )  
 END
ELSE
	BEGIN
	SELECT NE.SERIALNO,D.NAME,D.PAN,TAX.SECTIONNAME,DD.PAYMENTMADE,DD.TOTALDEDUCTED,ISNULL(DD.NONDEDREASON,0)NONDEDREASON FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK)  
	ON D.DEDUCTEEID=DD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID INNER JOIN TAXSECTIONS TAX  WITH(NOLOCK)  
	ON DD.SECTIONID=TAX.SECTIONID AND DD.FORMID=TAX.FORMID  LEFT JOIN DEDCHALINK DCL WITH(NOLOCK)  
	ON DCL.DEDUCTIONID=DD.DEDUCTIONID AND DCL.BRANCHID=DD.BRANCHID  
	INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  
	ON NE.DEDUCTEEID=D.DEDUCTEEID  
	WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND D.PANREFERENCE<>'' AND ( DD.TOTALDEDUCTED=0 OR DCL.DEDUCTIONID  IS NOT  NULL )  
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONERETURNID')
DROP PROCEDURE USP_TDS_GETDEDUCTIONERETURNID
GO
CREATE PROCEDURE USP_TDS_GETDEDUCTIONERETURNID  --USP_TDS_GETDEDUCTIONERETURNID 5201,1,1,5,'56'
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@CORRECTIONSTATUS INT,
@DEDUCTIONSERIALNO NVARCHAR(MAX)
AS
BEGIN
	SELECT * INTO #DEDSER FROM  dbo.UDF_TDS_SplitString(@DEDUCTIONSERIALNO,',')	
	IF(@CORRECTIONSTATUS = 2)   -- UPDATE
		BEGIN
			SELECT DEDUCTIONID, DEDUCTIONSERIALNO, DEDUCTIONERETURNID, CORRECTIONSTATUS,
					INCOMETAX AS LASTINCOMETAX,
					SURCHARGE AS LASTSURCHARGE, EDUCATIONCESS AS LASTEDUCATIONCESS,
					TOTALDEDUCTED AS LASTTOTALDEDUCTED					
			INTO #CDDATA
			FROM CORRDEDUCTIONDETAIL CD WITH(NOLOCK) 
				INNER JOIN #DEDSER DS ON DS.DATA = CD.DEDUCTIONSERIALNO
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 1			
			DELETE FROM CORRDEDUCTIONDETAIL WHERE 
			DEDUCTIONSERIALNO IN (SELECT DEDUCTIONSERIALNO FROM #CDDATA) AND CORRECTIONSTATUS = 2
			AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER			
			SELECT DEDUCTIONID, DEDUCTIONSERIALNO, DEDUCTIONERETURNID,
					LASTINCOMETAX, LASTSURCHARGE, LASTEDUCATIONCESS, LASTTOTALDEDUCTED										
			FROM #CDDATA 		
			DROP TABLE #CDDATA	
		END
	ELSE						-- ADD
		BEGIN
			SELECT DEDUCTIONID, DEDUCTIONSERIALNO, DEDUCTIONERETURNID, CORRECTIONSTATUS,
					INCOMETAX AS LASTINCOMETAX,
					SURCHARGE AS LASTSURCHARGE, EDUCATIONCESS AS LASTEDUCATIONCESS,
					TOTALDEDUCTED AS LASTTOTALDEDUCTED					
			INTO #CDDATA1
			FROM CORRDEDUCTIONDETAIL CD WITH(NOLOCK) 
				INNER JOIN #DEDSER DS ON DS.DATA = CD.DEDUCTIONSERIALNO
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 5			
			DELETE FROM CORRDEDUCTIONDETAIL WHERE 
			DEDUCTIONSERIALNO IN (SELECT DEDUCTIONSERIALNO FROM #CDDATA1) AND CORRECTIONSTATUS = 5
			AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER			
			SELECT DEDUCTIONID, DEDUCTIONSERIALNO, DEDUCTIONERETURNID,
				LASTINCOMETAX, LASTSURCHARGE, LASTEDUCATIONCESS, LASTTOTALDEDUCTED				
			FROM #CDDATA1 
			DROP TABLE #CDDATA1		
		END
		DROP TABLE #DEDSER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONID')
DROP PROCEDURE USP_TDS_GETDEDUCTIONID
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONID]  
@DEDUCTEEID INT  
AS  
  BEGIN  
  SELECT DD.DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID  
  WHERE D.DEDUCTEEID = @DEDUCTEEID  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONIDSONPARTPAYMENTID')
DROP PROCEDURE USP_TDS_GETDEDUCTIONIDSONPARTPAYMENTID
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONIDSONPARTPAYMENTID]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@PARTPAYMENTID INT
AS
	BEGIN
		SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONMAXSERIALNO')
DROP PROCEDURE USP_TDS_GETDEDUCTIONMAXSERIALNO
GO
CREATE PROCEDURE USP_TDS_GETDEDUCTIONMAXSERIALNO 
@BRANCHCODES VARCHAR(MAX),
@QUARTER INT  
AS  
 BEGIN  
	SELECT * INTO #BRANCES FROM UDF_TDS_SPLITSTRING(@BRANCHCODES,',');
  SELECT CB.BRANCHID, CB.BRANCHCODE,TB.FORMID, 0 AS SERIALNO  
   INTO #COMPANY  
     FROM COMPANYBRANCH CB WITH(NOLOCK)                
     FULL JOIN  
     (               
	   SELECT 2 FORMID,1 QUARTER UNION SELECT 2 FORMID,2 QUARTER UNION SELECT 2 FORMID,3 QUARTER UNION SELECT 2 FORMID,4 QUARTER                
	   UNION                
	   SELECT 3 FORMID,1 QUARTER UNION SELECT 3 FORMID,2 QUARTER UNION SELECT 3 FORMID,3 QUARTER UNION SELECT 3 FORMID,4 QUARTER         
     ) AS TB ON 1=1   
   INNER JOIN #BRANCES B ON B.DATA = CB.BRANCHCODE 
  WHERE  QUARTER = @QUARTER  
  SELECT BRANCHID, BRANCHCODE,FORMID,MAX(SERIALNO)SERIALNO FROM  
  (  
   SELECT DD.BRANCHID, BRANCHCODE, DD.FORMID,MAX(DD.SERIALNO) SERIALNO FROM DEDUCTIONDETAIL DD WITH(NOLOCK)   
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID 
   INNER JOIN #BRANCES B ON B.DATA = CB.BRANCHCODE  
   WHERE DD.QUARTER = @QUARTER  
   GROUP BY BRANCHCODE, DD.BRANCHID,DD.FORMID  
   UNION ALL  
   SELECT BRANCHID, BRANCHCODE,FORMID,SERIALNO FROM #COMPANY  
  )D  
  GROUP BY BRANCHID, BRANCHCODE,FORMID    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionMismatchDetail')
DROP PROCEDURE USP_TDS_GetDeductionMismatchDetail
GO
CREATE PROCEDURE USP_TDS_GetDeductionMismatchDetail 
    @MONTHID INT,  
    @FINYEAR INT,
    @CLIENTID INT  
AS  
    BEGIN  
	   DECLARE @MONTHYEAR VARCHAR(10);
	   CREATE TABLE #TEMPPARKEDAMOUNT(MONTHYEAR INT, BRANCHID INT, FORMTYPE VARCHAR(10),
		  ACCOUNTNO VARCHAR(20), AMOUNT NUMERIC(17,2))
	   CREATE TABLE #TEMPFORMTYPE(FORMTYPE VARCHAR(10), BRANCHID INT, DEDCOUNT INT, DEDAMOUNT NUMERIC(17,2)) 
	   CREATE TABLE #UNLINKED (DEDUCTIONID INT)
	   IF(@MONTHID < 4)
			BEGIN	  
				SET @MONTHYEAR = CAST(@MONTHID AS VARCHAR) + CAST((@FINYEAR + 1) AS VARCHAR) 
			END 
		ELSE
			BEGIN  
				SET @MONTHYEAR = CAST(@MONTHID AS VARCHAR) + CAST(@FINYEAR AS VARCHAR) 
			END
		IF(@CLIENTID = 6 OR @CLIENTID = 14)
			BEGIN	
				EXEC USP_TDS_CHALLANSQL_PA @MONTHYEAR
				EXEC USP_TDS_CHALLANSQL_PA_KB @MONTHYEAR,@MONTHID
			END
		IF(@CLIENTID = 15)
			BEGIN	
				EXEC USP_TDS_CHALLANSQL_PA @MONTHYEAR
				EXEC USP_TDS_CHALLANSQL_PA_JK @MONTHYEAR,@MONTHID
			END
	   IF(@CLIENTID = -1)
		  BEGIN
			 INSERT INTO #TEMPPARKEDAMOUNT 
			 EXEC USP_TDS_GETREMAININGPARKEDAMOUNT @MONTHID,@MONTHYEAR
		  END
	   ELSE
		  BEGIN
			 INSERT INTO #TEMPPARKEDAMOUNT
			 SELECT MONTHYEAR,BRANCHID,FORMTYPE,ACCOUNTNO,AMOUNT FROM PARKEDAMOUNT WITH(NOLOCK) WHERE MONTHYEAR = @MONTHYEAR
		  END
	  SELECT DD.DEDUCTIONID, DD.FORMID, DD.ENTRYTYPE, DD.SECTIONID 
	  INTO #DEDTEMP 
	  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		 INNER JOIN DEDUCTEE D WITH(NOLOCK) 
			ON D.DEDUCTEEID = DD.DEDUCTEEID
	  WHERE MONTH(DEDUCTEDDATE) = @MONTHID 
		 AND D.PAN LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) 
			THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END AND
	  NOT EXISTS
	  (
		 SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
	  )
	  IF(@CLIENTID = 11)
		BEGIN
			INSERT INTO #UNLINKED
			SELECT DEDUCTIONID FROM #DEDTEMP
			EXCEPT
			SELECT DEDUCTIONID FROM #DEDTEMP WHERE FORMID = 2 AND ENTRYTYPE = 1 AND SECTIONID <> 5 
		END
	 ELSE IF(@CLIENTID = 5)
		BEGIN
			INSERT INTO #UNLINKED 
			SELECT DEDUCTIONID
			FROM #DEDTEMP
			WHERE FORMID IN (1, 3)
				OR (FORMID = 2 AND SECTIONID = 5 AND ENTRYTYPE = 4)
				OR (FORMID = 2 AND SECTIONID <> 5 AND ENTRYTYPE <> 1)
		END	
	  ELSE
		BEGIN
			INSERT INTO #UNLINKED
			SELECT DEDUCTIONID FROM #DEDTEMP
		END  
		IF OBJECT_ID('TEMPDB..#DEDTEMP') IS NOT NULL
			DROP TABLE #DEDTEMP
	   IF (@CLIENTID <> 7)
		  BEGIN				
			 IF(@CLIENTID = 1)
				BEGIN
				    INSERT INTO #TEMPFORMTYPE
				    SELECT * FROM
				    (
					    SELECT '26QVS' FORMTYPE, D.BRANCHID, COUNT(D.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT
					    FROM DEDUCTIONDETAIL D WITH(NOLOCK)
						  INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
					    WHERE SECTIONID <> 5 AND FORMID = 2 
						  AND ENTRYTYPE = 4
					    GROUP BY BRANCHID
					    UNION
					    SELECT '26QV' FORMTYPE, D.BRANCHID, COUNT(D.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT  
					    FROM DEDUCTIONDETAIL D WITH(NOLOCK)
						  INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
					    WHERE SECTIONID <> 5 AND FORMID = 2 
						  AND ENTRYTYPE <> 4
					    GROUP BY BRANCHID 
				    )T
				END
			 ELSE
				BEGIN
				    INSERT  INTO #TEMPFORMTYPE		
				    SELECT '26QV' FORMTYPE, D.BRANCHID, COUNT(D.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT
				    FROM DEDUCTIONDETAIL D WITH(NOLOCK)
					   INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
				     WHERE SECTIONID <> 5 AND FORMID = 2 
				    GROUP BY BRANCHID 
				END
			 SELECT '26QI' FORMTYPE, BRANCHID, COUNT(DD.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT  
			 INTO #DEDAVB  
			 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID  
			 WHERE 
				SECTIONID = 5 AND ENTRYTYPE = 4 AND (EXCLUDEINAC = 0 OR EXCLUDEINAC IS NULL)  
			 GROUP BY BRANCHID  
			 UNION  
			 SELECT '27Q' FORMTYPE, BRANCHID, COUNT(DD.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT  
			 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID   
			 WHERE
				FORMID = 3 AND (EXCLUDEINAC = 0 OR EXCLUDEINAC IS NULL)  
			 GROUP BY BRANCHID
			 UNION  
			 SELECT FORMTYPE, BRANCHID,DEDCOUNT,DEDAMOUNT FROM #TEMPFORMTYPE 
			 UNION  
			 SELECT '24Q' FORMTYPE, BRANCHID, COUNT(DD.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT  
			 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID   
			 WHERE
				FORMID = 1 AND (EXCLUDEINAC = 0 OR EXCLUDEINAC IS NULL)  
			 GROUP BY BRANCHID  
			 SELECT CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')' AS BRANCH, D.FORMTYPE, D.DEDCOUNT, D.DEDAMOUNT, P.AMOUNT, (D.DEDAMOUNT - P.AMOUNT) DIFFAMOUNT
			 FROM #DEDAVB D  
				INNER JOIN #TEMPPARKEDAMOUNT P WITH(NOLOCK)  
				    ON D.BRANCHID = P.BRANCHID AND D.FORMTYPE = P.FORMTYPE   
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID  
			 WHERE P.MONTHYEAR = @MONTHYEAR AND ((D.DEDAMOUNT > P.AMOUNT) OR (FLOOR(P.AMOUNT) > P.AMOUNT))
		  END
	   ELSE
		  BEGIN
			 DECLARE @BGLID INT;
			 SELECT TOP 1 @BGLID = BGLCODEID FROM TDSRATE WHERE BGLCODE = '55800'
			 SELECT DEDUCTIONID INTO #BGUPD FROM DEDUCTIONDETAIL WITH(NOLOCK)
			 WHERE FORMID = 1 
				AND MONTH(PAYMENTDATE) = @MONTHID
				AND ISNULL(BGLCODEID, 0) <> @BGLID
				AND SECTIONID IN (1, 2, 25)
			 UPDATE DEDUCTIONDETAIL 
			    SET BGLCODEID = @BGLID
			    WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #BGUPD)
			 SELECT * INTO #TDSRATE FROM TDSRATE WITH(NOLOCK)
			 UPDATE DEDUCTIONDETAIL 
			 SET BGLCODEID = (SELECT ISNULL(MAX(BGLCODEID),-1) FROM #TDSRATE WITH(NOLOCK) WHERE BGLCODE = 55801) 
			 FROM DEDUCTIONDETAIL DD 
				INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID
			 WHERE MONTH(DEDUCTEDDATE) = @MONTHID AND ((SECTIONID = 5 AND ENTRYTYPE = 4) OR (SECTIONID = 17 AND ENTRYTYPE = 4))
			 UPDATE DEDUCTIONDETAIL SET BGLCODEID = (SELECT ISNULL(MAX(BGLCODEID),-1) FROM #TDSRATE WITH(NOLOCK) WHERE BGLCODE = 56685) 
			 FROM DEDUCTIONDETAIL DD INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID
			 WHERE MONTH(DEDUCTEDDATE) = @MONTHID AND (SECTIONID = 17 AND ENTRYTYPE <> 4)
			 SELECT BGLCODE, DD.BRANCHID, COUNT(DD.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT  
			 INTO #DEDAVBL  
			 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID  
				INNER JOIN #TDSRATE TR ON DD.BGLCODEID = TR.BGLCODEID
			 GROUP BY BGLCODE,DD.BRANCHID 
			 SELECT CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')' AS BRANCH, 
				D.BGLCODE AS FORMTYPE, D.DEDCOUNT, D.DEDAMOUNT, 
				ISNULL(P.AMOUNT,0)AMOUNT, (D.DEDAMOUNT - ISNULL(P.AMOUNT,0)) DIFFAMOUNT
			 FROM #DEDAVBL D  
				LEFT JOIN #TEMPPARKEDAMOUNT P WITH(NOLOCK)  
				    ON D.BRANCHID = P.BRANCHID AND D.BGLCODE COLLATE SQL_Latin1_General_CP1_CI_AS = P.FORMTYPE COLLATE SQL_Latin1_General_CP1_CI_AS   
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID  
			 WHERE ISNULL(P.MONTHYEAR,@MONTHYEAR) = @MONTHYEAR 
				AND ((D.DEDAMOUNT > ISNULL(P.AMOUNT,0)) OR (FLOOR(ISNULL(P.AMOUNT,0)) > ISNULL(P.AMOUNT,0)))
		  END
	   IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNT') IS NOT NULL
		  DROP TABLE #TEMPPARKEDAMOUNT  
	   IF OBJECT_ID('TEMPDB..#TEMPFORMTYPE') IS NOT NULL
		  DROP TABLE #TEMPFORMTYPE
	   IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
		  DROP TABLE #UNLINKED
	   IF OBJECT_ID('TEMPDB..#DEDAVB') IS NOT NULL
		  DROP TABLE #DEDAVB
	   IF OBJECT_ID('TEMPDB..#TDSRATE') IS NOT NULL
		  DROP TABLE #TDSRATE
	   IF OBJECT_ID('TEMPDB..#DEDAVBL') IS NOT NULL
		  DROP TABLE #DEDAVBL
	   IF OBJECT_ID('TEMPDB..#BGUPD') IS NOT NULL
		  DROP TABLE #BGUPD
    END   

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionMismatchDetail05')
DROP PROCEDURE USP_TDS_GetDeductionMismatchDetail05
GO
CREATE PROCEDURE USP_TDS_GetDeductionMismatchDetail05 
    @MONTHID INT,  
    @FINYEAR INT,
    @CLIENTID INT  
AS  
    BEGIN  
		DECLARE @MONTHYEAR VARCHAR(10);
		CREATE TABLE #TEMPPARKEDAMOUNT(MONTHYEAR INT, BRANCHID INT, FORMTYPE VARCHAR(10),
		  ACCOUNTNO VARCHAR(20), AMOUNT NUMERIC(17,2))
		CREATE TABLE #TEMPFORMTYPE(FORMTYPE VARCHAR(10), BRANCHID INT, DEDCOUNT INT, DEDAMOUNT NUMERIC(17,2)) 
		IF(@MONTHID < 4)
			BEGIN	  
				SET @MONTHYEAR = CAST(@MONTHID AS VARCHAR) + CAST((@FINYEAR + 1) AS VARCHAR) 
			END 
		ELSE
			BEGIN  
				SET @MONTHYEAR = CAST(@MONTHID AS VARCHAR) + CAST(@FINYEAR AS VARCHAR) 
			END
		INSERT INTO #TEMPPARKEDAMOUNT
		SELECT MONTHYEAR,BRANCHID,FORMTYPE,ACCOUNTNO,AMOUNT 
		FROM PARKEDAMOUNT WITH(NOLOCK) 
		WHERE MONTHYEAR = @MONTHYEAR
		SELECT DEDUCTIONID,BRANCHID,FORMID,SECTIONID,ENTRYTYPE,EXCLUDEINAC,DEDUCTEDDATE,TOTALDEDUCTED,RTBRANCHID 
		INTO #DEDDET
		FROM DEDUCTIONDETAIL 
		WHERE MONTH(DEDUCTEDDATE) = @MONTHID AND ISNULL(RTBRANCHID,0) <> 0 
		SELECT * 
		INTO #UNLINKED 
		FROM
			(
			  SELECT DEDUCTIONID 
			  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				 INNER JOIN DEDUCTEE D WITH(NOLOCK) 
					ON D.DEDUCTEEID = DD.DEDUCTEEID
			  WHERE MONTH(DEDUCTEDDATE) = @MONTHID 
				 AND D.PAN LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) 
					THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END AND
			  NOT EXISTS
			  (
				 SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
			  )
			)U
		INSERT  INTO #TEMPFORMTYPE		
		SELECT '26QV' FORMTYPE, D.RTBRANCHID AS BRANCHID, COUNT(D.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT
		FROM #DEDDET D WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
		WHERE SECTIONID <> 5 AND FORMID = 2 
		GROUP BY RTBRANCHID 
		SELECT '26QI' FORMTYPE, DD.RTBRANCHID AS BRANCHID, COUNT(DD.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT  
		INTO #DEDAVB  
		FROM #DEDDET DD WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID  
		WHERE SECTIONID = 5 AND ENTRYTYPE = 4 AND (EXCLUDEINAC = 0 OR EXCLUDEINAC IS NULL)  
		GROUP BY RTBRANCHID  
		UNION  
		SELECT '27Q' FORMTYPE, RTBRANCHID AS BRANCHID, COUNT(DD.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT  
		FROM #DEDDET DD WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID   
		WHERE FORMID = 3 AND (EXCLUDEINAC = 0 OR EXCLUDEINAC IS NULL)  
		GROUP BY RTBRANCHID
		UNION  
		SELECT FORMTYPE,BRANCHID AS BRANCHID,DEDCOUNT,DEDAMOUNT 
		FROM #TEMPFORMTYPE 
		UNION  
		SELECT '24Q' FORMTYPE, RTBRANCHID AS BRANCHID, COUNT(DD.DEDUCTIONID) DEDCOUNT, SUM(TOTALDEDUCTED) DEDAMOUNT  
		FROM #DEDDET DD WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID   
		WHERE
		FORMID = 1 AND (EXCLUDEINAC = 0 OR EXCLUDEINAC IS NULL)  
		GROUP BY RTBRANCHID 
		SELECT CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')' AS BRANCH, D.FORMTYPE, D.DEDCOUNT, D.DEDAMOUNT, P.AMOUNT, (D.DEDAMOUNT - P.AMOUNT) DIFFAMOUNT
		FROM #DEDAVB D  
			INNER JOIN #TEMPPARKEDAMOUNT P WITH(NOLOCK)  
				ON D.BRANCHID = P.BRANCHID AND D.FORMTYPE = P.FORMTYPE   
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID  
		WHERE P.MONTHYEAR = @MONTHYEAR AND ((D.DEDAMOUNT > P.AMOUNT) OR (FLOOR(P.AMOUNT) > P.AMOUNT))
		IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNT') IS NOT NULL
		  DROP TABLE #TEMPPARKEDAMOUNT  
		IF OBJECT_ID('TEMPDB..#TEMPFORMTYPE') IS NOT NULL
		  DROP TABLE #TEMPFORMTYPE
		IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
		  DROP TABLE #UNLINKED
		IF OBJECT_ID('TEMPDB..#DEDAVB') IS NOT NULL
		  DROP TABLE #DEDAVB
		IF OBJECT_ID('TEMPDB..#TDSRATE') IS NOT NULL
		  DROP TABLE #TDSRATE
		IF OBJECT_ID('TEMPDB..#DEDAVBL') IS NOT NULL
		  DROP TABLE #DEDAVBL
		IF OBJECT_ID('TEMPDB..#BGUPD') IS NOT NULL
		  DROP TABLE #BGUPD
		IF OBJECT_ID('TEMPDB..#DEDDET') IS NOT NULL
		  DROP TABLE #DEDDET
    END   

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONRECORDS')
DROP PROCEDURE USP_TDS_GETDEDUCTIONRECORDS
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONRECORDS]
@BRANCHID INT,
@FINYEAR SMALLDATETIME
AS
SELECT NAME, REFERENCENO, DESIGNATION,MONTHID,CAST(REPLACE(STR(MONTHID, 2), SPACE(1), '0') AS VARCHAR) + CAST(YEAR(@FINYEAR) AS VARCHAR) MONTHYEAR,0 AS EARNING,
 [EPF] AS EPF,[AEPF] AS AEPF,[LIC] AS LIC,[QTR-RENT] AS RENT,[UNION-FEE] AS UNIONFEE,[DRF-AMT] AS DRF,[SCSTAMT] AS SCAMT,
 [HOUSE-LOAN] AS HOUSE,[ADDL-HL] AS ADDL,[DEM-LOAN] AS DEM,[FUR-LOAN] AS FUR,[VEH-LOAN] AS VEH,[NSC-LOAN] AS NSC,[BANK-VEH] AS BANK
FROM 
(SELECT NAME, REFERENCENO, DESIGNATION,MONTHID, GROSSAMT1,ABBREVATION--,SUPPLEMENTARY
FROM #SAL WHERE EARNING = 0) PS
PIVOT
(
SUM (GROSSAMT1)
FOR ABBREVATION IN
([EPF],[AEPF],[LIC],[QTR-RENT],[UNION-FEE],[DRF-AMT],[SCSTAMT],[HOUSE-LOAN],[ADDL-HL],[DEM-LOAN],[FUR-LOAN],[VEH-LOAN],[NSC-LOAN],[BANK-VEH])
) AS PVT
UNION ALL
SELECT NAME, REFERENCENO, DESIGNATION,MONTHID,'SUP:' MONTHYEAR,0 AS EARNING,
 [EPF] AS EPF,[AEPF] AS AEPF,[LIC] AS LIC,[QTR-RENT] AS RENT,[UNION-FEE] AS UNIONFEE,[DRF-AMT] AS DRF,[SCSTAMT] AS SCAMT,
 [HOUSE-LOAN] AS HOUSE,[ADDL-HL] AS ADDL,[DEM-LOAN] AS DEM,[FUR-LOAN] AS FUR,[VEH-LOAN] AS VEH,[NSC-LOAN] AS NSC,[BANK-VEH] AS BANK
FROM 
(SELECT NAME, REFERENCENO, DESIGNATION,MONTHID, SUPPLEMENTARY,ABBREVATION--,SUPPLEMENTARY
FROM #SAL WHERE EARNING = 0) PS
PIVOT
(
SUM(SUPPLEMENTARY)
FOR ABBREVATION IN
([EPF],[AEPF],[LIC],[QTR-RENT],[UNION-FEE],[DRF-AMT],[SCSTAMT],[HOUSE-LOAN],[ADDL-HL],[DEM-LOAN],[FUR-LOAN],[VEH-LOAN],[NSC-LOAN],[BANK-VEH])
) AS PVT
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONSCOUNT')
DROP PROCEDURE USP_TDS_GETDEDUCTIONSCOUNT
GO
CREATE PROCEDURE USP_TDS_GETDEDUCTIONSCOUNT
	@BRANCHCODES NVARCHAR(MAX),  
	@MONTH INT  
AS
BEGIN
	SELECT DISTINCT DATA INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')  
	SELECT DISTINCT CB.BRANCHCODE,DD.FORMID 
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
			ON CB.BRANCHID = DD.BRANCHID
		INNER JOIN #TEMP T 
			ON T.DATA=CB.BRANCHCODE  
	WHERE FORMID IN(2,3)
		AND ENTRYTYPE = 4
		AND SECTIONID NOT IN(5,17) 
		AND MONTH(PAYMENTDATE) = @MONTH
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionsCountF007')
DROP PROCEDURE USP_TDS_GetDeductionsCountF007
GO
CREATE PROC USP_TDS_GetDeductionsCountF007 
@BRANCHCODES NVARCHAR(MAX),  
@QUARTER INT,
@ISNONTDS BIT = 0
AS
	BEGIN
		-- @QUARTER is actually MONTHID
		SET @ISNONTDS = 0
		SELECT DISTINCT DATA INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',') 
	    IF(@ISNONTDS = 1)
			BEGIN
				SELECT DISTINCT CB.BRANCHCODE,DD.FORMID 
				FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID
				INNER JOIN #TEMP T ON T.DATA=CB.BRANCHCODE  
				WHERE FORMID IN (2) 
					AND ENTRYTYPE = 4 
					AND MONTH(PAYMENTDATE) = @QUARTER 
					AND SECTIONID IN(5) 
				AND ISNULL(DEDUCTEDATE,'') = '' 		
			END
		ELSE
			BEGIN
				SELECT DISTINCT CB.BRANCHCODE,DD.FORMID 
				FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID
				INNER JOIN #TEMP T ON T.DATA=CB.BRANCHCODE  
				WHERE FORMID IN(2,3)AND ENTRYTYPE=4 AND SECTIONID IN(5,17) AND MONTH(PAYMENTDATE)=@QUARTER 			
			END	
		DROP TABLE #TEMP		
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONSCOUNTF011')
DROP PROCEDURE USP_TDS_GETDEDUCTIONSCOUNTF011
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONSCOUNTF011]   
@BRANCHCODES NVARCHAR(MAX),    
@MONTH INT    
AS  
 SELECT DISTINCT DATA INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')    
 SELECT DISTINCT CB.BRANCHCODE,DD.FORMID FROM DEDUCTIONDETAIL DD    
 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID  
 INNER JOIN #TEMP T ON T.DATA=CB.BRANCHCODE    
 WHERE FORMID = 1 AND ENTRYTYPE=4 AND SECTIONID = 2 AND MONTH(PAYMENTDATE)=@MONTH
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionsCountForBulkDelete')
DROP PROCEDURE USP_TDS_GetDeductionsCountForBulkDelete
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDeductionsCountForBulkDelete]      
 @BRANCHID INT,      
 @FORMID INT,      
 @QUARTER INT,
 @ISCHECKER BIT = 0,
 @SECTION INT =-1,
 @MONTH INT =-1     
AS      
 BEGIN  
	DECLARE @SQLQUERY NVARCHAR(MAX);
	SET @SQLQUERY = 'SELECT DD.DEDUCTIONID 
					 INTO #TEMP   
					  FROM DEDUCTIONDETAIL DD WITH(NOLOCK) LEFT JOIN     
					  (      
							SELECT DD.DEDUCTIONID  FROM  PARTPAYMENTDETAILS PPD WITH(NOLOCK)     
							INNER JOIN     
							DEDUCTIONDETAIL DD  WITH(NOLOCK)    
							ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID      
							WHERE  PPD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+' AND PPD.FORMID = ' + CAST(@FORMID AS VARCHAR)+' AND PPD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+'     
					   ) PPD ON DD.DEDUCTIONID = PPD.DEDUCTIONID      
					  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID      
					  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID      
					  LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID  AND DD.BRANCHID = DCL.BRANCHID    
					  WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR)+' AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+''      
	IF(@ISCHECKER = 1)
	 BEGIN
		SET @SQLQUERY = @SQLQUERY  + ' AND ISNULL(DD.TRANSSTATUS,0) = 4'
	 END
	IF(@SECTION<>-1)
       BEGIN
       SET @SQLQUERY = @SQLQUERY + ' AND DD.SECTIONID = '+ CAST(@SECTION AS VARCHAR)
       END
	IF(@MONTH<>-1)
       BEGIN
       SET @SQLQUERY = @SQLQUERY + ' AND MONTH(DD.PAYMENTDATE) = '+ CAST(@MONTH AS VARCHAR)
       END
		SET @SQLQUERY = @SQLQUERY  + '; SELECT COUNT(DEDUCTIONID)DEDUCTIONSCOUNT FROM #TEMP'
	 EXEC SP_EXECUTESQL @SQLQUERY; 		  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionSerialNo_F005')
DROP PROCEDURE USP_TDS_GetDeductionSerialNo_F005
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDeductionSerialNo_F005]    
@NAME VARCHAR(75),  
@PAN VARCHAR(10),  
@CUSTID VARCHAR(20) = NULL,  
@ADDRESS1 VARCHAR(25),  
@PAYMENTMADE NUMERIC(15,3),  
@PAYMENTDATE SMALLDATETIME,  
@BRANCHID INT,  
@QUARTER INT  
AS
	BEGIN  
	  SELECT D.DEDUCTEEID, D.BRANCHID,D.REFERENCENO
	  INTO #TEMP  
	  FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID 
	  WHERE D.NAME = @NAME AND D.PAN = @PAN AND D.ADDRESS1 = @ADDRESS1
		    AND D.BRANCHID=@BRANCHID
		IF(@CUSTID IS NOT NULL)
			BEGIN
				SELECT DEDUCTEEID,BRANCHID
				INTO #TEMP1  
				FROM #TEMP 
				WHERE REFERENCENO=@CUSTID
	END	
		SELECT * FROM 
		(
			SELECT CAST(DD.SERIALNO AS VARCHAR)+';BRANCHCODE:'+CB.BRANCHCODE+';URN:'+DD.URN AS SERIALNO ,'ERRORID'=  
			  CASE   
				WHEN DD.PAYMENTMADE < 0 THEN '1'  
				WHEN DD.PAYMENTMADE< DD.TOTALDEDUCTED THEN '2'  
			  END FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID
			  INNER JOIN #TEMP1 D  
			ON  
			DD.DEDUCTEEID=D.DEDUCTEEID  
			AND DD.BRANCHID=D.BRANCHID  
			AND DD.PAYMENTMADE=@PAYMENTMADE  
			AND DD.PAYMENTDATE=@PAYMENTDATE  
			AND DD.FORMID=2  
			AND DD.QUARTER=@QUARTER  
		) TEMP
		WHERE TEMP.ERRORID IS NOT NULL
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionSerialNoOnEntryType')
DROP PROCEDURE USP_TDS_GetDeductionSerialNoOnEntryType
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDeductionSerialNoOnEntryType]
(    
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @ENTRYTYPE VARCHAR(20)    
)    
AS    
 BEGIN    
  SET NOCOUNT ON    
  SELECT *     
  INTO #ENTRYTYPE     
  FROM DBO.UDF_TDS_SPLITSTRING(@ENTRYTYPE, ',')     
  SELECT SERIALNO, ENTRYTYPE, BRANCHID, FORMID, QUARTER    
  FROM DEDUCTIONDETAIL WITH(NOLOCK)    
  WHERE    
   ENTRYTYPE IN (SELECT * FROM #ENTRYTYPE)    
   AND BRANCHID = @BRANCHID    
   AND FORMID = @FORMID    
   AND QUARTER = @QUARTER    
  DROP TABLE #ENTRYTYPE    
 END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONSFORBULKDELETE')
DROP PROCEDURE USP_TDS_GETDEDUCTIONSFORBULKDELETE
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETDEDUCTIONSFORBULKDELETE]
 @PAGEINDEX INT,
 @PAGESIZE INT,
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @ISCHECKER BIT = 0,
 @SECTION INT =-1,
 @MONTH INT =-1
AS
 BEGIN
  SET NOCOUNT ON
  DECLARE @FIRSTREC INT, @LASTREC INT, @SQLQUERY NVARCHAR(MAX);
  SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE;
  SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);
  SET @SQLQUERY='SELECT ROW_NUMBER() OVER(ORDER BY DD.DEDUCTIONID) AS ROWNUM, DD.DEDUCTIONID,DD.PARTPAYMENTID,DD.BRANCHID,
					DD.FORMID,DD.QUARTER,DD.DEDUCTEEID,DD.SECTIONID,DD.PAYMENTMADE,DD.ORGPAYMENTMADE,DD.PAYMENTDATE,
					DD.DEDUCTEDDATE,DD.ORGINCOMETAX,DD.ORGSURCHARGE,DD.ORGEDUCATIONCESS,DD.ORGTOTALDEDUCTED,
					DD.INCOMETAXRATE,DD.SURCHARGERATE,DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.NONDEDREASON,DD.ISBOOKENTRY,
					DD.ISGROSSINGUP,D.NAME,D.PAN,TS.SECTIONNAME, ISNULL(DD.TRANSSTATUS,0)TRANSSTATUS,
					 CASE WHEN PPD.DEDUCTIONID IS NULL
							THEN 0
						  ELSE 1
				     END AS  HASPARTPAYMENTDETAIL
				    INTO #TEMP
					FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
					LEFT JOIN
						(
						 SELECT DD.DEDUCTIONID
						 FROM   PARTPAYMENTDETAILS PPD  WITH(NOLOCK)
						 INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID
						 WHERE  PPD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +' AND PPD.FORMID = '+ CAST(@FORMID AS VARCHAR) +' AND PPD.QUARTER = '+ CAST(@QUARTER AS VARCHAR)+'
						) PPD ON DD.DEDUCTIONID = PPD.DEDUCTIONID
				   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
				   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
				   LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID
				WHERE DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +' AND DD.FORMID ='+ CAST(@FORMID AS VARCHAR) +' AND DD.QUARTER = '+ CAST(@QUARTER AS VARCHAR) 
     IF(@ISCHECKER = 1)
       BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND ISNULL(DD.TRANSSTATUS,0) = 4'
       END
       IF(@SECTION<>-1)
       BEGIN
       SET @SQLQUERY = @SQLQUERY + ' AND DD.SECTIONID = '+ CAST(@SECTION AS VARCHAR)
       END
       IF(@MONTH<>-1)
       BEGIN
       SET @SQLQUERY = @SQLQUERY + ' AND MONTH(DD.PAYMENTDATE) = '+ CAST(@MONTH AS VARCHAR)
       END
     SET @SQLQUERY = @SQLQUERY + '; SELECT * FROM #TEMP WHERE ROWNUM >' + CAST(@FIRSTREC AS VARCHAR) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR)
     EXEC SP_EXECUTESQL @SQLQUERY;
   SET NOCOUNT OFF
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONSNOANDID')
DROP PROCEDURE USP_TDS_GETDEDUCTIONSNOANDID
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONSNOANDID]
@BRANCHID VARCHAR(MAX)  ,
@QUARTER INT
AS
 BEGIN
  DECLARE @SQLQUERY NVARCHAR(MAX);
     SET @SQLQUERY = 'SELECT MAX(CD.SERIALNO) AS SERIALNO, MAX(CD.PARTPAYMENTID) AS PARTPAYMENTID, CD.BRANCHID
              FROM
              (
               SELECT MAX(DD.SERIALNO) AS SERIALNO, MAX(DD.PARTPAYMENTID) AS PARTPAYMENTID, DD.BRANCHID FROM
                  DEDUCTIONDETAIL DD WITH(NOLOCK)
                  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID
                  WHERE DD.BRANCHID IN (' + CAST (@BRANCHID AS VARCHAR) + ') AND FORMID = 1 AND QUARTER = ' + CAST(@QUARTER AS VARCHAR)+'
                  GROUP BY DD.BRANCHID
               UNION
               SELECT 0 AS SERIALNO, 0 AS PARTPAYMENTID, BRANCHID FROM COMPANYBRANCH
                  WHERE BRANCHID IN (' + CAST (@BRANCHID AS VARCHAR) + ')
              )CD
              GROUP BY BRANCHID'
      EXEC SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionSNoLinkedtoAutoGenerated')
DROP PROCEDURE USP_TDS_GetDeductionSNoLinkedtoAutoGenerated
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDeductionSNoLinkedtoAutoGenerated] 
	@BRANCHID INT,  
	@FORMID INT,  
	@QUARTER INT  
AS  
	BEGIN  
		SELECT DEDUCTIONID, SERIALNO, BRANCHID, FORMID, QUARTER
		INTO #DEDDETAIL
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE
			BRANCHID = @BRANCHID
			AND FORMID = @FORMID
			AND QUARTER = @QUARTER
		SELECT CHALLANID, ISAUTOGENERATED
		INTO #CHADETAIL
		FROM CHALLANDETAIL WITH(NOLOCK)
		WHERE
			BRANCHID = @BRANCHID
			AND FORMID = @FORMID
		SELECT CHALLANID, DEDUCTIONID
		INTO #LNKDETAIL
		FROM DEDCHALINK WITH(NOLOCK)
		WHERE
			CHALLANID IN (SELECT CHALLANID FROM #CHADETAIL)
		SELECT DD.SERIALNO 
		FROM #DEDDETAIL DD WITH(NOLOCK)   
			LEFT JOIN #LNKDETAIL DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID  
			LEFT JOIN #CHADETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID  
		WHERE DD.BRANCHID = @BRANCHID 
			AND DD.FORMID = @FORMID 
			AND DD.QUARTER = @QUARTER 
			AND ISNULL(CD.ISAUTOGENERATED,0) = 1  
		ORDER BY DD.SERIALNO
		DROP TABLE #LNKDETAIL
		DROP TABLE #CHADETAIL
		DROP TABLE #DEDDETAIL
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONSTATUS')
DROP PROCEDURE USP_TDS_GETDEDUCTIONSTATUS
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONSTATUS]
@DEDUCTIONID INT
AS
BEGIN
   DECLARE @ISUSED BIT
   IF((SELECT COUNT(DA.AUDITID) FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)
                         INNER JOIN DEDUCTIONDETAILAUDIT DA WITH(NOLOCK) ON DD.DEDUCTIONID=DA.RECORDID WHERE DD.DEDUCTIONID=@DEDUCTIONID AND DA.TRANSSTATUS=2)>0)
     BEGIN
     SET @ISUSED=1
     END
     ELSE
     BEGIN
     SET @ISUSED=0
     END
     SELECT @ISUSED
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionsToMatch')
DROP PROCEDURE USP_TDS_GetDeductionsToMatch
GO
CREATE PROCEDURE USP_TDS_GetDeductionsToMatch
	@PAGEINDEX INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@DEDUCTIONSERIALNO INT,
	@ORGSERIALNO INT = NULL,
	@NAME VARCHAR(75)= NULL,
	@PAN VARCHAR(10) = NULL,
	@AMTFROM NUMERIC(13,2)= NULL,
	@AMTTO NUMERIC(13,2) = NULL,
	@TAXAMTFROM NUMERIC(13,2)= NULL,
	@TAXAMTTO NUMERIC(13,2)= NULL,
	@PAIDDATEFROM SMALLDATETIME = NULL,
	@PAIDDATETO SMALLDATETIME = NULL,
	@TAXDATEFROM SMALLDATETIME = NULL,
	@TAXDATETO SMALLDATETIME = NULL,
	@NONDEDREASON INT = NULL	
AS
BEGIN	
	/* The number of rows affected by the different commands does not interest the application, so turn NOCOUNT ON*/
	SET NOCOUNT ON
	/* Determine the first record and last record */
	DECLARE @FIRSTREC INT, @LASTREC INT,@QUERY NVARCHAR(MAX), @SQLQUERY NVARCHAR(MAX);
	CREATE TABLE #DEDUCTEE(DEDUCTEEID INT, NAME VARCHAR(75), PAN VARCHAR(10), PANREFERENCE VARCHAR(10),DEDUCTEECODE INT);
	SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE
	SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);
	SET @QUERY = 'SELECT D.DEDUCTEEID, D.NAME,D.PAN,D.PANREFERENCE, '
	IF(@FORMID = 1)
		SET @QUERY = @QUERY + ' 0 AS DEDUCTEECODE '
	ELSE
		SET @QUERY = @QUERY + ' E.DEDUCTEECODE '
	SET @QUERY = @QUERY + ' FROM DEDUCTEE D WITH(NOLOCK)'
	IF(@FORMID = 1)
	    SET @QUERY = @QUERY + ' INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'
	ELSE
		SET @QUERY = @QUERY + ' INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'
	SET @QUERY = @QUERY + ' WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
	--PRINT @QUERY;
	INSERT INTO #DEDUCTEE
	EXEC SP_EXECUTESQL @QUERY
	SELECT ISNULL(DEDUCTIONID,MATCHEDID) DEDUCTIONID 
	INTO #CORRDED 	
	FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND 
	(CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4) AND (DEDUCTIONID IS NOT NULL OR MATCHEDID IS NOT NULL) AND 
	DEDUCTIONSERIALNO <> @DEDUCTIONSERIALNO
	SELECT * INTO #DEDUCTIONS FROM
	(
		SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		EXCEPT
		SELECT DEDUCTIONID FROM #CORRDED
	)DD
	SET @SQLQUERY = 'SELECT ROWNUM = IDENTITY(INT, 1,1) , * INTO #TEMP FROM
								(
									SELECT D.NAME,D.PAN,D.PANREFERENCE,D.DEDUCTEECODE, 
													 TS.SECTIONNAME,DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,DD.SERIALNO AS DEDSERIALNO,DD.DEDUCTIONID,DD.PAYMENTMADE,
													 DD.PAYMENTDATE,DD.SECTIONID,DD.ERETURNID,DD.MODE,DD.INCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.ISTAXINFOEDITABLE,DD.TAXRATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
													 DD.ISBOOKENTRY,DD.NONDEDREASON,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,CD.SERIALNO AS CHALSERIALNO,CD.CHALLANID,CD.BANKCHALLANNO,
													 CD.CHALLANPAIDDATE,CD.CHALLANTOTAL ,CD.[QUARTER] AS CHALLANQUARTER,
													 CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CD.ISCOMPANY END AS CHALLANCODE,DL.DEDCHALINKID
										FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
										INNER JOIN #DEDUCTIONS DS ON DD.DEDUCTIONID = DS.DEDUCTIONID
										INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID							
										INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID			
										LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
										LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
									WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
											  DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)
	IF(@ORGSERIALNO IS NOT NULL)
		SET @SQLQUERY = @SQLQUERY + ' AND DD.SERIALNO = ' + CAST(@ORGSERIALNO AS VARCHAR)						
    IF(@NAME IS NOT NULL)
		SET @SQLQUERY = @SQLQUERY + ' AND D.NAME LIKE ''%' + @NAME + '%''';        
    IF(@PAN IS NOT NULL)
		SET @SQLQUERY = @SQLQUERY + ' AND D.PAN LIKE ''%' + @PAN + '%''';        
    IF(@AMTFROM IS NOT NULL AND @AMTTO IS NOT NULL)
		 SET @SQLQUERY = @SQLQUERY +  ' AND DD.PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));     
	IF(@TAXAMTFROM IS NOT NULL AND @TAXAMTTO IS NOT NULL)
		 SET @SQLQUERY = @SQLQUERY +  ' AND DD.TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@TAXAMTTO AS VARCHAR(20));               
	IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)  
		 SET @SQLQUERY = @SQLQUERY + ' AND DD.PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';
	IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)  
		 SET @SQLQUERY = @SQLQUERY + ' AND DD.DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDATETO AS VARCHAR) + '''';        	 
	IF(@NONDEDREASON IS NOT NULL)
		SET @SQLQUERY = @SQLQUERY  + ' AND DD.NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)
	    SET @SQLQUERY = @SQLQUERY + ' )T; SELECT * FROM #TEMP' 
	     SET @SQLQUERY = @SQLQUERY + ' WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ROWNUM < '+ CAST(@LASTREC AS VARCHAR)
	EXEC SP_EXECUTESQL @SQLQUERY
	--PRINT @SQLQUERY
	DROP TABLE #DEDUCTEE
	--PRINT @SQLQUERY
	--SELECT TOP (@LASTREC-1) *
	--FROM TempResult
	--WHERE RowNum > @FIRSTREC 
	--AND RowNum < @LASTREC
	/* Turn NOCOUNT back OFF */
	SET NOCOUNT OFF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionsToMatchCount')
DROP PROCEDURE USP_TDS_GetDeductionsToMatchCount
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDeductionsToMatchCount] 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@DEDUCTIONSERIALNO INT,
	@ORGSERIALNO INT = NULL,
	@NAME VARCHAR(75)= NULL,
	@PAN VARCHAR(10) = NULL,
	@AMTFROM NUMERIC(13,2)= NULL,
	@AMTTO NUMERIC(13,2) = NULL,
	@TAXAMTFROM NUMERIC(13,2)= NULL,
	@TAXAMTTO NUMERIC(13,2)= NULL,
	@PAIDDATEFROM SMALLDATETIME = NULL,
	@PAIDDATETO SMALLDATETIME = NULL,
	@TAXDATEFROM SMALLDATETIME = NULL,
	@TAXDATETO SMALLDATETIME = NULL,
	@NONDEDREASON INT = NULL	
AS
	BEGIN	
		DECLARE @FIRSTREC INT, @LASTREC INT,@QUERY NVARCHAR(MAX), @SQLQUERY NVARCHAR(MAX);
		CREATE TABLE #DEDUCTEE(DEDUCTEEID INT, NAME VARCHAR(75), PAN VARCHAR(10));
		SET @QUERY = 'SELECT D.DEDUCTEEID, D.NAME,D.PAN '
		SET @QUERY = @QUERY + ' FROM DEDUCTEE D WITH(NOLOCK)'
		IF(@FORMID = 1)
			SET @QUERY = @QUERY + ' INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'
		ELSE
			SET @QUERY = @QUERY + ' INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'
		SET @QUERY = @QUERY + ' WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
	--PRINT @QUERY;
		INSERT INTO #DEDUCTEE
		EXEC SP_EXECUTESQL @QUERY
		SELECT ISNULL(DEDUCTIONID,MATCHEDID) DEDUCTIONID 
		INTO #CORRDED 	
		FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND 
		(CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4) AND (DEDUCTIONID IS NOT NULL OR MATCHEDID IS NOT NULL) AND 
		DEDUCTIONSERIALNO <> @DEDUCTIONSERIALNO
		SELECT * INTO #DEDUCTIONS FROM
		(
			SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK)
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			EXCEPT
			SELECT DEDUCTIONID FROM #CORRDED
		)DD
		SET @SQLQUERY = 'SELECT COUNT(DD.DEDUCTIONID) FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
										INNER JOIN #DEDUCTIONS DS ON DD.DEDUCTIONID = DS.DEDUCTIONID
										INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID							
										INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID			
										LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
										LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
									WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
											  DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)
	IF(@ORGSERIALNO IS NOT NULL)
		SET @SQLQUERY = @SQLQUERY + ' AND DD.SERIALNO = ' + CAST(@ORGSERIALNO AS VARCHAR)						
    IF(@NAME IS NOT NULL)
		SET @SQLQUERY = @SQLQUERY + ' AND D.NAME LIKE ''%' + @NAME + '%''';        
    IF(@PAN IS NOT NULL)
		SET @SQLQUERY = @SQLQUERY + ' AND D.PAN LIKE ''%' + @PAN + '%''';        
    IF(@AMTFROM IS NOT NULL AND @AMTTO IS NOT NULL)
		 SET @SQLQUERY = @SQLQUERY +  ' AND DD.PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));     
	IF(@TAXAMTFROM IS NOT NULL AND @TAXAMTTO IS NOT NULL)
		 SET @SQLQUERY = @SQLQUERY +  ' AND DD.TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@TAXAMTTO AS VARCHAR(20));               
	IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)  
		 SET @SQLQUERY = @SQLQUERY + ' AND DD.PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';
	IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)  
		 SET @SQLQUERY = @SQLQUERY + ' AND DD.DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDATETO AS VARCHAR) + '''';        	 
	IF(@NONDEDREASON IS NOT NULL)
		SET @SQLQUERY = @SQLQUERY  + ' AND DD.NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)
	    --SET @SQLQUERY = @SQLQUERY + ' )T; SELECT COUNT(DD.DEDUCTIONID) FROM #TEMP' 	   
	EXEC SP_EXECUTESQL @SQLQUERY
	DROP TABLE #DEDUCTEE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTIONSTOUPDATECOUNT')
DROP PROCEDURE USP_TDS_GETDEDUCTIONSTOUPDATECOUNT
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTIONSTOUPDATECOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SHOWONLYUNMATCHEDDETAILS BIT
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		IF @FORMID = 1
			BEGIN
				SET @QUERY = 'SELECT COUNT(DD.DEDUCTIONSERIALNO) DEDUCTIONCOUNT
							  FROM  CORRDEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN (
													 SELECT CNE.DEDUCTEESERIALNO,CNE.NAME,CNE.PAN FROM CORREMPLOYEE CNE INNER JOIN 
													 (
														SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS 
														FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO) UNE 
														ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS=UNE.CURRENTCORRECTIONSTATUS 
														WHERE BRANCHID = ' +CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' +CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ') AS D ON DD.DEDUCTEESERIALNO = D.DEDUCTEESERIALNO 
													LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
													LEFT JOIN (SELECT DD.DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
													LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID WHERE DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' +CAST (@FORMID AS VARCHAR) + ' AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ') O ON (DD.MATCHEDID = O.DEDUCTIONID OR DD.DEDUCTIONID = O.DEDUCTIONID)
							 WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = '+CAST(@FORMID AS VARCHAR) + ' AND DD.QUARTER = '+CAST(@QUARTER AS VARCHAR) + ' AND DD.CORRECTIONSTATUS NOT IN (1,7)';
							 IF @SHOWONLYUNMATCHEDDETAILS = 1
					BEGIN
						SET @QUERY = @QUERY + '  AND ((O.DEDUCTIONID IS NULL OR O.DEDUCTIONID = 0) OR  DD.MATCHEDID IS NOT NULL)';
					END
			END
		ELSE
			BEGIN			
				SET @QUERY = 'SELECT COUNT(DD.DEDUCTIONSERIALNO) DEDUCTIONCOUNT FROM CORRDEDUCTIONDETAIL DD INNER JOIN (SELECT CNE.DEDUCTEESERIALNO FROM CORRNONEMPLOYEE CNE INNER JOIN (SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS 
							  FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = '+ CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO
								) UNE ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS
						  WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' +CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ') AS D ON DD.DEDUCTEESERIALNO = D.DEDUCTEESERIALNO 
						  LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
						  LEFT JOIN (SELECT DD.DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
						  LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' ) O ON (DD.MATCHEDID = O.DEDUCTIONID OR DD.DEDUCTIONID = O.DEDUCTIONID)
						  WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND  DD.QUARTER = '+ CAST(@QUARTER AS VARCHAR) + ' AND DD.CORRECTIONSTATUS NOT IN (1,7)';
				IF @SHOWONLYUNMATCHEDDETAILS = 1
					BEGIN
						SET @QUERY = @QUERY + '  AND ((O.DEDUCTIONID IS NULL OR O.DEDUCTIONID = 0) OR  DD.MATCHEDID IS NOT NULL)';
					END
			END					
		EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductionUpdate')
DROP PROCEDURE USP_TDS_GetDeductionUpdate
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDeductionUpdate] 
	@PAGEINDEX INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID TINYINT,
	@QUARTER TINYINT,
	@SHOWONLYUNMATCHEDDETAILS BIT
AS
	BEGIN
		/* Determine the first record and last record */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE
		SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);
		DECLARE @QUERY NVARCHAR(MAX);
		IF(@FORMID = 1)
			BEGIN
				SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #DEDUCTIONS
							  FROM
							  (
								SELECT DD.CORRECTIONSTATUS,DD.DEDUCTIONID AS CDEDUCTIONID,
									   D.NAME AS CNAME,D.PAN AS CPAN,DD.SECTIONID AS CSECTIONID,
									   TS.SECTIONNAME AS CSECTIONNAME, DD.PAYMENTDATE AS CPAYMENTDATE, 
									   DD.DEDUCTIONSERIALNO AS CDEDUCTIONSERIALNO, 	
									   DD.PAYMENTMADE AS CPAYMENTMADE, DD.INCOMETAX AS CINCOMETAX, 
									   DD.SURCHARGE AS CSURCHARGE, DD.EDUCATIONCESS AS CEDUCATIONCESS, 
									   DD.TOTALDEDUCTED AS CTOTALDEDUCTED, DD.DEDUCTEDDATE AS CDEDUCTEDDATE,
									   DD.MATCHEDID,O.DEDUCTIONID AS ODEDUCTIONID, O.NAME AS ONAME, O.PAN AS OPAN, 
									   O.SECTIONNAME AS OSECTIONNAME, O.PAYMENTDATE AS OPAYMENTDATE, 
									   O.SERIALNO AS OSERIALNO, O.PAYMENTMADE AS OPAYMENTMADE, 
								       O.INCOMETAX AS OINCOMETAX, O.SURCHARGE AS OSURCHARGE, 
								       O.EDUCATIONCESS AS OEDUCATIONCESS, O.TOTALDEDUCTED AS OTOTALDEDUCTED, 
								       O.DEDUCTEDDATE AS ODEDUCTEDDATE			
								FROM   CORRDEDUCTIONDETAIL DD WITH(NOLOCK) 
									INNER JOIN (
													SELECT CNE.DEDUCTEESERIALNO,CNE.NAME,CNE.PAN 
													FROM CORREMPLOYEE CNE 
														INNER JOIN (
																	 SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS 
																	 FROM CORREMPLOYEE WITH(NOLOCK) 
																	 WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
																			AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
																			AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
																	 GROUP BY DEDUCTEESERIALNO
																   ) UNE 
																		ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO 
																			AND CNE.CORRECTIONSTATUS=UNE.CURRENTCORRECTIONSTATUS 
													WHERE BRANCHID = ' +CAST(@BRANCHID AS VARCHAR) + ' 
															AND FORMID = ' +CAST(@FORMID AS VARCHAR) + ' 
															AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '
											   ) AS D ON DD.DEDUCTEESERIALNO = D.DEDUCTEESERIALNO
									LEFT JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID
									LEFT JOIN	(
													 SELECT DD.DEDUCTIONID, D.NAME,D.PAN,TS.SECTIONNAME,
													 DD.PAYMENTDATE, DD.SERIALNO,DD.PAYMENTMADE,DD.INCOMETAX,
													 DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE
													 FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
														 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
														 LEFT JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID
													 WHERE DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + ' 
															AND DD.FORMID = ' +CAST (@FORMID AS VARCHAR) + ' 
															AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '
												) O
													ON (DD.MATCHEDID = O.DEDUCTIONID OR DD.DEDUCTIONID = O.DEDUCTIONID)
								WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
										AND DD.FORMID = '+CAST(@FORMID AS VARCHAR) + ' 
										AND DD.QUARTER = '+CAST(@QUARTER AS VARCHAR) + ' 
										AND DD.CORRECTIONSTATUS NOT IN (1,7)';
				IF @SHOWONLYUNMATCHEDDETAILS = 1
					BEGIN
						SET @QUERY = @QUERY + ' AND DD.CORRECTIONSTATUS NOT IN (5,7) 
									AND ((O.DEDUCTIONID IS NULL OR O.DEDUCTIONID = 0) 
									OR  DD.MATCHEDID IS NOT NULL)';
					END
			END
		ELSE
			BEGIN
				SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #DEDUCTIONS
							  FROM
							  (						  
								SELECT DD.CORRECTIONSTATUS, DD.DEDUCTIONID AS CDEDUCTIONID, D.NAME AS CNAME, 
									   D.PAN AS CPAN,DD.SECTIONID AS CSECTIONID, TS.SECTIONNAME AS CSECTIONNAME,  
									   DD.PAYMENTDATE AS CPAYMENTDATE, DD.DEDUCTIONSERIALNO AS CDEDUCTIONSERIALNO, 	
									   DD.PAYMENTMADE AS CPAYMENTMADE, DD.INCOMETAX AS CINCOMETAX, 
									   DD.SURCHARGE AS CSURCHARGE, DD.EDUCATIONCESS AS CEDUCATIONCESS, 
									   DD.TOTALDEDUCTED AS CTOTALDEDUCTED, DD.DEDUCTEDDATE AS CDEDUCTEDDATE,
									   DD.MATCHEDID,O.DEDUCTIONID AS ODEDUCTIONID, O.NAME AS ONAME, O.PAN AS OPAN, 
									   O.SECTIONNAME AS OSECTIONNAME, O.PAYMENTDATE AS OPAYMENTDATE, 
									   O.SERIALNO AS OSERIALNO, O.PAYMENTMADE AS OPAYMENTMADE, 
									   O.INCOMETAX AS OINCOMETAX, O.SURCHARGE AS OSURCHARGE, 
									   O.EDUCATIONCESS AS OEDUCATIONCESS,O.TOTALDEDUCTED AS OTOTALDEDUCTED, 
									   O.DEDUCTEDDATE AS ODEDUCTEDDATE
								FROM   CORRDEDUCTIONDETAIL DD WITH(NOLOCK) 
									INNER JOIN (
													SELECT CNE.DEDUCTEESERIALNO,CNE.NAME,CNE.PAN 
													FROM CORRNONEMPLOYEE CNE 
														INNER JOIN (
																	  SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS 
																	  FROM CORRNONEMPLOYEE WITH(NOLOCK) 
																	  WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
																			AND FORMID = '+ CAST(@FORMID AS VARCHAR) + ' 
																			AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '
																	  GROUP BY DEDUCTEESERIALNO
																	) UNE 
																		ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO 
																			AND CNE.CORRECTIONSTATUS=UNE.CURRENTCORRECTIONSTATUS 
													WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
														AND FORMID = ' +CAST(@FORMID AS VARCHAR) + ' 
														AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '
												) AS D 
													ON DD.DEDUCTEESERIALNO = D.DEDUCTEESERIALNO 
								  LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
								  LEFT JOIN	(
												SELECT DD.DEDUCTIONID, D.NAME,D.PAN,TS.SECTIONNAME,
													   DD.PAYMENTDATE, DD.SERIALNO,DD.PAYMENTMADE,
													   DD.INCOMETAX, DD.SURCHARGE,DD.EDUCATIONCESS,
													   DD.TOTALDEDUCTED,DD.DEDUCTEDDATE
												FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
													INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
													LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID =TS.SECTIONID
												WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
														AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
														AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
											) O 
												ON (DD.MATCHEDID = O.DEDUCTIONID OR DD.DEDUCTIONID = O.DEDUCTIONID)
							WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
									AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
									AND  DD.QUARTER = '+ CAST(@QUARTER AS VARCHAR) + ' 
									AND DD.CORRECTIONSTATUS NOT IN (1,7)';
				IF @SHOWONLYUNMATCHEDDETAILS = 1
					BEGIN
						SET @QUERY = @QUERY + '  AND DD.CORRECTIONSTATUS NOT IN (5,7) 
									AND ((O.DEDUCTIONID IS NULL OR O.DEDUCTIONID = 0) 
									OR  DD.MATCHEDID IS NOT NULL)';
					END
			END
		SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #DEDUCTIONS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);
		EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductorAndResponsiblePerson')
DROP PROCEDURE USP_TDS_GetDeductorAndResponsiblePerson
GO
CREATE PROCEDURE USP_TDS_GetDeductorAndResponsiblePerson
@BRANCHID INT,  
@FORMID INT = -1,
@QUARTER INT  
AS  
	BEGIN    
		DECLARE @TOKENNO VARCHAR(15);	  
		SELECT @TOKENNO = TOKENNO FROM ACKNO WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
		SELECT D.DEDUCTORID AS DEDUCTORID,D.DEDUCTORNAME AS DeductorName,D.ADDRESS1 AS DADDRESS1,D.ADDRESS2 AS DADDRESS2,D.ADDRESS3 AS DADDRESS3,  
			 D.ADDRESS4 AS DADDRESS4,D.ADDRESS5 AS DADDRESS5,D.STATEID AS DSTATEID,D.ISADDRCHANGED AS DISADDRESSCHANGED,  
			 D.FINANCIALYEAR,D.[TAN] AS DTAN,D.PAN AS DPAN,D.PINCODE AS DPINCODE,D.EMAILADDRESS AS DEMAILADDRESS,  
			 D.STDCODE AS DSTDCODE,D.PHONENO AS DPHONENUMBER,D.ISRESIDENT AS DISRESIDENT,D.ISTDSEXISTING AS DISTDSEXISTING,  
			 D.FAXNO AS DFAXNUMBER,D.RETURNTYPE AS RETURNTYPE,D.ISAOAPPROVED AS DISAOAPPROVED,D.STATUSID AS STATUSID,  
			@TOKENNO AS DAOAPPROVALNUMBER,D.AODESIGNATION AS DAODESIGNATION,D.DEDUCTORTYPEID AS DEDUCTORTYPEID,  
			D.GOVTADDSTATEID ,D.GOVTADDPAOCODE,D.GOVTADDPAOREGNNO,D.GOVTADDDDOCODE,D.GOVTADDDDOREGNNO,   
			D.GOVTADDMINISTRY,D.GOVTADDMAINMINISTRY,D.GOVTADDAIN,D.GOVTADDOTHERNAME,D.TANREGISTRATION,  
			RP.PERSONID AS RPID,RP.PERSONNAME AS RPNAME,RP.ADDRESS1 AS RPADDRESS1,RP.ADDRESS2 AS RPADDRESS2,  
			RP.ADDRESS3 AS RPADDRESS3,RP.ADDRESS4 AS RPADDRESS4,RP.ADDRESS5 AS RPADDRESS5,RP.PINCODE AS RPPINCODE,  
			RP.STATEID AS RPSTATEID,RP.ISADDRCHANGED AS RPISADDRESSCHANGED,RP.DESIGNATION AS RPDESIGNATION,  
			RP.EMAILADDRESS AS RPEMAILADDRESS,RP.STDCODE AS RPSTDCODE,RP.PHONENO AS RPPHONENUMBER,   
			RP.MOBILENO AS RPMOBILENUMBER,RP.FAXNO AS RPFAXNUMBER,RP.GENDER AS RPGENDER,RP.FATHERNAME AS RPFATHERNAME,  
			BD.[QUARTER] AS [QUARTER],BD.BRANCHID AS BRANCHID, D.ALTERNATEEMAIL AS DALTERNATEEMAIL,D.ALTERNATESTD AS DALTERNATESTD,  
			D.ALTERNATEPHONE AS DALTERNATEPHONE,RP.ALTERNATEEMAIL AS RPALTERNATEEMAIL, RP.ALTERNATESTD AS RPALTERNATESTD,  
			RP.ALTERNATEPHONE AS RPALTERNATEPHONE, DT.CATEGORYCODE, ISNULL(D.GSTIN,'') GSTIN
		FROM DEDUCTOR D WITH(NOLOCK) 
			INNER JOIN DEDUCTORTYPE DT WITH(NOLOCK) ON D.DEDUCTORTYPEID = DT.DEDUCTORTYPEID 
			LEFT JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON D.DEDUCTORID=RP.DEDUCTORID   
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID=BD.DEDUCTORID   
		WHERE BRANCHID=@BRANCHID  AND [QUARTER] =@QUARTER;  
	END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORBRANCHES')
DROP PROCEDURE USP_TDS_GETDEDUCTORBRANCHES
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORBRANCHES]
AS
BEGIN
	DECLARE @NAMES VARCHAR(MAX)
	SELECT @NAMES=COALESCE(@NAMES+',','') +CB.BRANCHCODE+'-'+CONVERT(VARCHAR,BD.QUARTER)+'-'+CONVERT(VARCHAR,D.STATEID)  FROM COMPANYBRANCH CB INNER JOIN
	BRANCHDEDUCTORS BD WITH(NOLOCK) ON CB.BRANCHID=BD.BRANCHID INNER JOIN
	DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID=D.DEDUCTORID
	SELECT ','+@NAMES+','
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORCHANGESCOUNT')
DROP PROCEDURE USP_TDS_GETDEDUCTORCHANGESCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORCHANGESCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT COUNT(DEDUCTORID)
		FROM   CORRDEDUCTOR WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDeductorContactDetails')
DROP PROCEDURE USP_TDS_GetDeductorContactDetails
GO
CREATE  PROCEDURE USP_TDS_GetDeductorContactDetails
AS
BEGIN
	SELECT CB.BRANCHCODE, CB.BRANCHNAME, 
		CASE WHEN ISNULL(DR.STDCODE, '') = '' 
			THEN 
				CASE WHEN ISNULL(R.STDCODE, '') <> '' 
					THEN R.STDCODE + '-' + R.PHONENO
					ELSE '' 
				END 
			ELSE 
				DR.STDCODE + '-' + DR.PHONENO
			END AS PHONENO, 
		R.MOBILENO, R.PERSONNAME, DR.TAN, 
		DR.TAN + '^' + SUBSTRING(DR.TAN, 0, 4) + 'xxxxx' + SUBSTRING(DR.TAN, 9, 2) 
			   + '^' + CAST(CB.BRANCHID AS VARCHAR) + '^' + BRANCHCODE TANLIST		
	FROM BRANCHDEDUCTORS BD WITH(NOLOCK)
	INNER JOIN
		(SELECT BRANCHID, MAX(QUARTER)QUARTER FROM BRANCHDEDUCTORS WITH(NOLOCK)
			GROUP BY BRANCHID) B 
		ON B.BRANCHID = BD.BRANCHID AND B.QUARTER = BD.QUARTER
	INNER JOIN DEDUCTOR DR WITH(NOLOCK) ON DR.DEDUCTORID = BD.DEDUCTORID
	INNER JOIN RESPONSIBLEPERSON R WITH(NOLOCK) ON R.DEDUCTORID = BD.DEDUCTORID
 	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORCOUNT')
DROP PROCEDURE USP_TDS_GETDEDUCTORCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORCOUNT]
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT COUNT(D.DEDUCTORID)
		FROM DEDUCTOR D INNER JOIN BRANCHDEDUCTORS BD  WITH(NOLOCK) ON D.DEDUCTORID=BD.DEDUCTORID
		WHERE  BD.BRANCHID=@BRANCHID AND BD.[QUARTER]=@QUARTER;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORCOUNTONBRANCHID')
DROP PROCEDURE USP_TDS_GETDEDUCTORCOUNTONBRANCHID
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORCOUNTONBRANCHID]
	@BRANCHID INT
AS
	BEGIN
		SELECT COUNT(D.DEDUCTORID)
		FROM   DEDUCTOR D WITH(NOLOCK) INNER JOIN DBO.BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID=BD.DEDUCTORID
		WHERE  BD.BRANCHID=@BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORDETAILS')
DROP PROCEDURE USP_TDS_GETDEDUCTORDETAILS
GO
CREATE PROCEDURE  USP_TDS_GETDEDUCTORDETAILS  
@BRANCHCODES NVARCHAR(MAX),  
@QUARTER TINYINT  
AS
BEGIN  
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON
SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')  
SELECT DISTINCT CB.BRANCHCODE, D.STATEID FROM DEDUCTOR D WITH(NOLOCK) 
INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID=BD.DEDUCTORID  
INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=BD.BRANCHID
INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE 
WHERE BD.QUARTER=@QUARTER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORDETAILSFORTIN')
DROP PROCEDURE USP_TDS_GETDEDUCTORDETAILSFORTIN
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORDETAILSFORTIN]
(
@BRANCHID INT
)
AS
SELECT TOP 1 R.PERSONNAME+','+R.DESIGNATION+','+R.FATHERNAME RPDETAILS FROM DEDUCTOR D WITH(NOLOCK)
 INNER JOIN
 (
 SELECT BRANCHID,MAX(DEDUCTORID)DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK)
 GROUP BY BRANCHID
 )BD
  ON BD.DEDUCTORID=D.DEDUCTORID
 INNER JOIN RESPONSIBLEPERSON R  WITH(NOLOCK)
  ON R.DEDUCTORID=BD.DEDUCTORID
  WHERE BD.BRANCHID=@BRANCHID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORFORIMPORT_F007')
DROP PROCEDURE USP_TDS_GETDEDUCTORFORIMPORT_F007
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORFORIMPORT_F007]
@QUARTER INT
AS
	BEGIN
			SELECT CB.BRANCHCODE FROM DEDUCTOR DD WITH(NOLOCK)
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.DEDUCTORID = BD.DEDUCTORID
			INNER JOIN COMPANYBRANCH  CB WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID
			WHERE BD.QUARTER = @QUARTER
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORID')
DROP PROCEDURE USP_TDS_GETDEDUCTORID
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORID]
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		DECLARE @DEDUCTORID INT
		IF((SELECT COUNT(DEDUCTORID)FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND [QUARTER]=@QUARTER) >0)
			BEGIN
				SELECT @DEDUCTORID=DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND [QUARTER]=@QUARTER
			END
		ELSE
			BEGIN
				SET @DEDUCTORID=-1;
			END
		SELECT @DEDUCTORID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORIDANDBRANCHCODE')
DROP PROCEDURE USP_TDS_GETDEDUCTORIDANDBRANCHCODE
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORIDANDBRANCHCODE]  
@BRANCHCODES VARCHAR(MAX),  
@QUARTER TINYINT  
AS  
 BEGIN  
	  SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')
	  SELECT BRANCHCODE FROM COMPANYBRANCH CB WITH(NOLOCK)  
	  WHERE CB.BRANCHCODE IN (SELECT * FROM #TEMP) 
		EXCEPT
	  SELECT CB.BRANCHCODE FROM BRANCHDEDUCTORS BD WITH(NOLOCK)  
	   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID  
	   WHERE CB.BRANCHCODE IN (SELECT * FROM #TEMP)  
	   AND BD.QUARTER = @QUARTER   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORLIST')
DROP PROCEDURE USP_TDS_GETDEDUCTORLIST
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORLIST]
@MONTH INT,
@ISNULL BIT
AS
BEGIN
DECLARE @SQLQUERY NVARCHAR(MAX)
SET @SQLQUERY='SELECT DISTINCT CB.BRANCHCODE,CB.BRANCHNAME FROM CHALLANDETAIL CD WITH(NOLOCK) LEFT JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CD.BRANCHID=BD.BRANCHID
                                                                   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=CD.BRANCHID
                                                                   INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID
                   INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
                   WHERE BD.DEDUCTORID IS NULL AND ISAUTOGENERATED=1 AND ISOLTASINCLUDED=0 AND MONTH(DD.DEDUCTEDDATE)='+CAST(@MONTH AS VARCHAR)
 IF(@ISNULL=1)
 SET @SQLQUERY=@SQLQUERY+' AND CD.BANKCHALLANNO IS NULL AND CD.CHALLANPAIDDATE IS NULL'
EXEC SP_EXECUTESQL @SQLQUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORPAN')
DROP PROCEDURE USP_TDS_GETDEDUCTORPAN
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORPAN]
	@BRANCHID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT D.DEDUCTORID,D.DEDUCTORNAME,D.PAN FROM DBO.DEDUCTOR D WITH(NOLOCK) INNER JOIN DBO.BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID WHERE BD.BRANCHID=@BRANCHID AND BD.[QUARTER]=@QUARTER;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORSTATE')
DROP PROCEDURE USP_TDS_GETDEDUCTORSTATE
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORSTATE]
@BRANCHCODE VARCHAR(6),
@QUARTER INT
AS
	BEGIN
			SELECT D.STATEID FROM DEDUCTOR D WITH(NOLOCK)
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID
			WHERE CB.BRANCHCODE = @BRANCHCODE AND BD.QUARTER = @QUARTER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORSTATEFORIMPORT')
DROP PROCEDURE USP_TDS_GETDEDUCTORSTATEFORIMPORT
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORSTATEFORIMPORT]
@BRANCHID INT
AS
 BEGIN
   SELECT D.STATEID FROM DEDUCTOR D  WITH(NOLOCK)
   INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID
   INNER JOIN
   (
    SELECT MAX(QUARTER) QUARTER FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
   )B
   ON BD.QUARTER = B.QUARTER
   WHERE BRANCHID = @BRANCHID
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORSTATEID')
DROP PROCEDURE USP_TDS_GETDEDUCTORSTATEID
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORSTATEID]        
(        
@BRANCHCODES NVARCHAR(MAX),        
@QUARTER TINYINT        
)        
AS        
BEGIN
SELECT * INTO #BRANCHES FROM UDF_TDS_SPLITSTRING(@BRANCHCODES,',')     
SELECT D.STATEID,CB.BRANCHCODE FROM BRANCHDEDUCTORS BD INNER JOIN         
COMPANYBRANCH CB WITH(NOLOCK) ON        
BD.BRANCHID=CB.BRANCHID        
INNER JOIN DEDUCTOR D   WITH(NOLOCK)       
ON D.DEDUCTORID=BD.DEDUCTORID
INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE
WHERE BD.QUARTER=@QUARTER        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORTAN')
DROP PROCEDURE USP_TDS_GETDEDUCTORTAN
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORTAN] 
@BRANCHID INT
AS
 BEGIN
	 SELECT ISNULL(D.TAN,'')TAN FROM DEDUCTOR D 
	 INNER JOIN
	 (
		SELECT BD.DEDUCTORID FROM BRANCHDEDUCTORS BD WITH(NOLOCK)
		 INNER JOIN 
		 (SELECT MAX(QUARTER)QUARTER, BRANCHID FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID GROUP BY BRANCHID)B
		 ON B.QUARTER = BD.QUARTER AND B.BRANCHID = BD.BRANCHID
		 WHERE BD.BRANCHID = @BRANCHID
	 )BD
	 ON D.DEDUCTORID = BD.DEDUCTORID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORTANBASEDONQUARTER')
DROP PROCEDURE USP_TDS_GETDEDUCTORTANBASEDONQUARTER
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORTANBASEDONQUARTER]  
@BRANCHID INT ,  
@QUARTER INT  
AS  
 BEGIN  
  SELECT ISNULL(D.TAN,'') FROM DEDUCTOR D  WITH(NOLOCK)  
 INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON  D.DEDUCTORID=BD.DEDUCTORID  
 WHERE BD.BRANCHID=@BRANCHID  AND BD.QUARTER=@QUARTER  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORTANFORCSI')
DROP PROCEDURE USP_TDS_GETDEDUCTORTANFORCSI
GO
CREATE PROCEDURE USP_TDS_GETDEDUCTORTANFORCSI
AS
 BEGIN
	SELECT DISTINCT (DR.TAN) TAN FROM DEDUCTOR DR
	WHERE DR.TAN NOT IN ('TANAPPLIED')
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORTANFORQUARTER')
DROP PROCEDURE USP_TDS_GETDEDUCTORTANFORQUARTER
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETDEDUCTORTANFORQUARTER]
@BRANCHID INT,
@QUARTER INT
AS
 BEGIN
	IF(@BRANCHID<>-1)
	BEGIN
		SELECT D.TAN FROM DEDUCTOR D WITH(NOLOCK)
		INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID
		WHERE BD.BRANCHID = @BRANCHID AND QUARTER = @QUARTER
	END
	ELSE
	BEGIN
		SELECT CAST(BD.BRANCHID AS VARCHAR)+'^'+D.TAN TAN FROM DEDUCTOR D WITH(NOLOCK)
		INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID
		WHERE QUARTER = @QUARTER
	END	
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDEDUCTORTYPE')
DROP PROCEDURE USP_TDS_GETDEDUCTORTYPE
GO
CREATE PROCEDURE [USP_TDS_GETDEDUCTORTYPE]
AS
	BEGIN
		SELECT DEDUCTORTYPEID AS DEDUCTORTYPEID,DEDUCTORCATEGORY AS DEDUCTORCATEGORY,ISGOVERNMENT AS ISGOVERNMENT,CATEGORYCODE AS CATEGORYCODE
		FROM   DEDUCTORTYPE WITH(NOLOCK)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDefaultSettings')
DROP PROCEDURE USP_TDS_GetDefaultSettings
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetDefaultSettings]
AS      
BEGIN      
	SELECT ID,PAN,[STATUS],DEDUCTORTYPE,ISNULL(ENABLEREFERENCE,'') AS ENABLEREFERENCE,
	MODEOFPAYMENT,ROUNDOFF,ALLOW92A92B,ISNULL(LOCKQ1, 0) LOCKQ1 , ISNULL(LOCKQ2,0) LOCKQ2, 
	ISNULL(LOCKQ3, 0) LOCKQ3, ISNULL(LOCKQ4,0)LOCKQ4,ISNULL(DEFAULTPAN,0)DEFAULTPAN,
	ISNULL(ENABLETHRESHOLD,0)ENABLETHRESHOLD, ISNULL(DEFAULTPWD,'')  DEFAULTPWD, ISNULL(PWDEXPIRYDAYS,0) PWDEXPIRYDAYS, 
	ISNULL(RETAINPREVPWD,0) RETAINPREVPWD, ISNULL(IDLETIMEOUT,0) IDLETIMEOUT,
	ISNULL(BLOCKTAXPAYMENT,0) BLOCKTAXPAYMENT, LOCKEDMONTHS, 
	ISNULL(BLOCKSALMODIFICATION,0) BLOCKSALMODIFICATION,
	ISNULL(BLOCKFORM16,0) BLOCKFORM16, ISNULL(BLOCKFORM16A,0) BLOCKFORM16A
	FROM DEFAULTSETTINGS  WITH(NOLOCK) 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDELETEDRECORDS')
DROP PROCEDURE USP_TDS_GETDELETEDRECORDS
GO
CREATE PROCEDURE USP_TDS_GETDELETEDRECORDS     
@MONTH INT    
AS    
BEGIN    
DECLARE @RESULT INT      
 SET @RESULT = 0     
BEGIN TRANSACTION       
  BEGIN TRY       
     DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
	 DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);	
	 DELETE FROM CHALLANMAKEPAYMENT      
	 DELETE FROM DEDCHALLANMAKEPAYMENT      
	INSERT INTO @NONEMPLOYEE
	SELECT D.DEDUCTEEID, NE.DEDUCTEECODE FROM DEDUCTEE D WITH(NOLOCK)
	INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
	INNER JOIN 
	(
		SELECT DISTINCT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE MONTH(DEDUCTEDDATE)=@MONTH     
	)DD ON D.DEDUCTEEID = DD.DEDUCTEEID 
	INSERT INTO @EMPLOYEE
	SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE FROM DEDUCTEE D WITH(NOLOCK)
	INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
	INNER JOIN 
	(
		SELECT DISTINCT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE MONTH(DEDUCTEDDATE)=@MONTH     
	)DD ON D.DEDUCTEEID = DD.DEDUCTEEID 
	SELECT * INTO #DEDUCTEE FROM
	   (
		 SELECT * FROM @EMPLOYEE
		 UNION 
		 SELECT * FROM @NONEMPLOYEE 
	   )DE
	SELECT  DD.BRANCHID,CB.BRANCHNAME,DD.SECTIONID,DD.QUARTER,SUM(TOTALDEDUCTED)TOTALDEDUCTED,D.DEDUCTEECODE INTO #TEMPCMP     
	FROM DEDUCTIONDETAIL DD WITH (NOLOCK)    
	INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) ON CB.BRANCHID=DD.BRANCHID    
	INNER JOIN #DEDUCTEE D WITH (NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID    
	WHERE EXCLUDEINAC=1 AND  MONTH(DEDUCTEDDATE)=@MONTH     
	GROUP BY DD.BRANCHID,CB.BRANCHNAME,DD.SECTIONID,DD.QUARTER,D.DEDUCTEECODE    
	ALTER TABLE #TEMPCMP ADD ID INT IDENTITY(1, 1)    
	INSERT INTO CHALLANMAKEPAYMENT (ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE,TOTALDEDUCTED)      
     SELECT ID, BRANCHID, QUARTER, SECTIONID, DEDUCTEECODE, TOTALDEDUCTED      
     FROM      
     (      
      SELECT T.ID,      
       T.BRANCHID, SECTIONID, DEDUCTEECODE, TOTALDEDUCTED,      
       T.QUARTER      
       FROM #TEMPCMP T       
     ) DATA     
	INSERT INTO DEDCHALLANMAKEPAYMENT(ID,DEDUCTIONID)        
	SELECT DISTINCT CHALL.ID, DD.DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
	INNER JOIN #TEMPCMP T WITH (NOLOCK) ON DD.BRANCHID=T.BRANCHID AND DD.SECTIONID=T.SECTIONID --AND (NE.DEDUCTEECODE=T.DEDUCTEECODE)      
	 INNER JOIN       
	  (      
	   SELECT ID FROM CHALLANMAKEPAYMENT      
	  ) CHALL ON CHALL.ID = T.ID        
	   WHERE  DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND ISNULL(DD.EXCLUDEINAC,0)=1    
	   ORDER BY ID    
		SET @RESULT=1      
   --END      
    COMMIT     
  END TRY       
  BEGIN CATCH      
   SET @RESULT=-1      
  ROLLBACK      
 END CATCH      
 SELECT @RESULT      
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDetailstoIdentifyError')
DROP PROCEDURE USP_TDS_GetDetailstoIdentifyError
GO
CREATE PROCEDURE [USP_TDS_GetDetailstoIdentifyError] 
@RECORDTYPE VARCHAR(10),  
@BRANCHID INT ,  
@FORMID INT ,  
@QUARTER INT ,  
@PARENTID INT=NULL,  
@CHILDID INT =NULL,  
@NAME VARCHAR(75)=NULL,  
@PAN VARCHAR(75)=NULL  
AS  
BEGIN  
 DECLARE @SQLQUERY NVARCHAR(MAX);   
  IF (@RECORDTYPE ='CD')  
       BEGIN  
         SET @SQLQUERY = 'SELECT CAST(CD.SERIALNO AS VARCHAR)+''-''+CAST(TS.SECTIONNAME AS VARCHAR)AS VALUE 
						FROM CHALLANDETAIL CD WITH(NOLOCK) 
						INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID=TS.SECTIONID 
						WHERE CD.BRANCHID='+ CAST (@BRANCHID AS VARCHAR)+' AND 
							  CD.FORMID='+CAST(@FORMID AS VARCHAR)+'AND 
							  CD.QUARTER='+CAST(@QUARTER AS VARCHAR) 
		IF(@PARENTID IS NOT NULL)
			  BEGIN
				SET @SQLQUERY = @SQLQUERY + +' AND 
						  CD.ERETURNID='+CAST(@PARENTID AS VARCHAR) 
			  END 
       END     
  ELSE IF (@RECORDTYPE = 'DD')  
      BEGIN  
         SET @SQLQUERY='SELECT CAST(DD.SERIALNO AS VARCHAR)+''-''+D.NAME+''-''+CAST(MAS.SERIALNO AS VARCHAR) 
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
			INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID   
            INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID=DCL.CHALLANID   
            INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID=D.DEDUCTEEID '  
         IF (@FORMID = 1)  
		  BEGIN
			SET @SQLQUERY = @SQLQUERY +' INNER JOIN EMPLOYEE '   
		  END
         ELSE
          BEGIN  
			SET @SQLQUERY = @SQLQUERY +' INNER JOIN NONEMPLOYEE '   
		  END
          SET @SQLQUERY= @SQLQUERY +' MAS WITH(NOLOCK) ON D.DEDUCTEEID = MAS.DEDUCTEEID 
				WHERE DD.BRANCHID='+ CAST (@BRANCHID AS VARCHAR)+'AND 
				      DD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
				      DD.QUARTER='+CAST(@QUARTER AS VARCHAR)
			IF(@CHILDID IS NOT NULL)
			  BEGIN
				SET @SQLQUERY = @SQLQUERY + 'AND 
						  DD.ERETURNID='+CAST(@CHILDID AS VARCHAR)
			  END
			IF(@PARENTID IS NOT NULL)
			  BEGIN
				SET @SQLQUERY = @SQLQUERY + +' AND 
						  CD.ERETURNID='+CAST(@PARENTID AS VARCHAR) 
			  END
      END  
  ELSE IF (@RECORDTYPE='SD' OR @RECORDTYPE='S16' OR @RECORDTYPE='C6A')  
       BEGIN  
          SET @SQLQUERY='SELECT ''NIL''+''-''+D.NAME+''-''+CAST(CASE WHEN LEN(D.REFERENCENO)>0 THEN D.REFERENCENO ELSE MAS.SERIALNO END AS VARCHAR) 
					FROM SALARYDETAIL SD WITH(NOLOCK)
					INNER JOIN DEDUCTEE D WITH(NOLOCK) ON SD.DEDUCTEEID=D.DEDUCTEEID 
					INNER JOIN EMPLOYEE MAS WITH(NOLOCK) ON D.DEDUCTEEID=MAS.DEDUCTEEID 
					WHERE SD.BRANCHID='+ CAST (@BRANCHID AS VARCHAR)
		    IF(@NAME IS NOT NULL)
		     BEGIN
				SET @SQLQUERY = @SQLQUERY  + ' AND D.NAME='''+ CAST(@NAME AS VARCHAR) + ''''
             END
            IF(@PAN IS NOT NULL)
             BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND D.PAN='''+CAST(@PAN AS VARCHAR) + ''''
             END
       END   
EXEC SP_EXECUTESQL @SQLQUERY  
--PRINT @SQLQUERY  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDifferedAmount')
DROP PROCEDURE USP_TDS_GetDifferedAmount
GO
CREATE PROCEDURE USP_TDS_GetDifferedAmount
 @MONTH INT ,
 @BRANCHID INT,
 @FORMID INT,
 @FINYEAR INT,
 @CLIENTID INT
AS  
BEGIN      
    DECLARE @VAR INT  
    IF @MONTH >9   
		SET @VAR=2  
    ELSE  
		SET @VAR=1 
	CREATE TABLE #DEDUCTIONDET (DEDUCTIONID INT,DEDUCTEEID INT,BRANCHID INT,FORMID INT,ENTRYTYPE INT,
				DEDUCTEDDATE SMALLDATETIME,SECTIONID INT,TOTALDEDUCTED NUMERIC(13,2))
    DECLARE @MONTHYEAR INT;
    DECLARE @FINANCIALYEAR INT;
    SET @FINANCIALYEAR = @FINYEAR
	IF(@MONTH < 4)
		SET @FINANCIALYEAR = @FINYEAR + 1
    SELECT @MONTHYEAR=CAST(@MONTH AS VARCHAR(8))  +  CAST(@FINANCIALYEAR AS VARCHAR(8)) 
	IF(@CLIENTID = 6 OR @CLIENTID = 14)
		BEGIN	
			EXEC USP_TDS_CHALLANSQL_PA @MONTHYEAR
			EXEC USP_TDS_CHALLANSQL_PA_KB @MONTHYEAR,@MONTH
		END
	IF(@CLIENTID = 15)
		BEGIN	
			EXEC USP_TDS_CHALLANSQL_PA @MONTHYEAR
			EXEC USP_TDS_CHALLANSQL_PA_JK @MONTHYEAR,@MONTH
		END
	SELECT @MONTHYEAR=CAST(@MONTH AS VARCHAR(8))  +  CAST(@FINYEAR AS VARCHAR(8))   
	SELECT DEDUCTIONID, DEDUCTEEID, BRANCHID, FORMID, ENTRYTYPE, DEDUCTEDDATE, SECTIONID, TOTALDEDUCTED   
	INTO #DEDTEMP 
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	WHERE MONTH(DEDUCTEDDATE) = @MONTH
	IF(@CLIENTID = 11)
		BEGIN
			INSERT INTO #DEDUCTIONDET
			SELECT * FROM #DEDTEMP
			EXCEPT
			SELECT * FROM #DEDTEMP WHERE FORMID = 2 AND ENTRYTYPE = 1 AND SECTIONID <> 5 
		END
	ELSE IF(@CLIENTID = 5)
		BEGIN
			INSERT INTO #DEDUCTIONDET 
			SELECT *
			FROM #DEDTEMP
			WHERE FORMID IN (1, 3)
				OR (FORMID = 2 AND SECTIONID = 5 AND ENTRYTYPE = 4)
				OR (FORMID = 2 AND SECTIONID <> 5 AND ENTRYTYPE <> 1)
		END	
	ELSE
		BEGIN
			INSERT INTO #DEDUCTIONDET
			SELECT * FROM #DEDTEMP
		END 
	IF OBJECT_ID('TEMPDB..#DEDTEMP') IS NOT NULL
		DROP TABLE #DEDTEMP
 IF(@BRANCHID <> 0 AND @FORMID <> 0 )
	   BEGIN         
			SELECT DISTINCT CB.BRANCHCODE AS [BRANCH CODE],CB.BRANCHNAME AS [BRANCH NAME] ,
					CB1.BRANCHNAME AS [PARENT BRANCH NAME],SUPERFINAL.FORMTYPE AS [FORM TYPE],
					SUPERFINAL.BALANCEAMOUNT AS [MISMATCH AMOUNT], SUPERFINAL.TOTALAMOUNT AS [TOTAL TDS AMOUNT]
			FROM  
				(  
					SELECT FINAL.BRANCHID,FINAL.FORMID,FINAL.PARENTBRANCHID,FINAL.FORMTYPE,
						ABS(ISNULL(AMOUNT,0)-TDS) AS BALANCEAMOUNT, TDS AS TOTALAMOUNT,
						PA.AMOUNT,PA.ACCOUNTNO  
					FROM    
						(  
							SELECT RESULT.BRANCHID,RESULT.FORMID, RESULT.PARENTBRANCHID,
									RESULT.SECTIONID AS FORMTYPE,SUM(RESULT.TDS) AS TDS 
							FROM   
								(  
									SELECT CB.BRANCHID,DD.FORMID, CB.PARENTBRANCHID,
										CASE WHEN DD.FORMID=1 THEN '24Q' 
											 WHEN DD.FORMID=3 THEN '27Q' 
											 WHEN (DD.FORMID=2 AND TS.SECTIONID=5 AND DD.ENTRYTYPE=4) THEN '26QI' 
											 ELSE '26QV' 
										END AS SECTIONID,SUM(DD.TOTALDEDUCTED) AS TDS 
									FROM COMPANYBRANCH CB WITH(NOLOCK) 
										INNER JOIN #DEDUCTIONDET DD  WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID  
										INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID  
										LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID   
										LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID  
									WHERE  DCL.DEDCHALINKID IS NULL AND MONTH(DEDUCTEDDATE)=@MONTH 
									GROUP BY CB.BRANCHID,TS.SECTIONID,DD.FORMID,CB.PARENTBRANCHID, DD.ENTRYTYPE
								) AS RESULT 
						    GROUP BY RESULT.BRANCHID,RESULT.SECTIONID,RESULT.PARENTBRANCHID,RESULT.FORMID  
						) FINAL   
						LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK) ON PA.BRANCHID=FINAL.BRANCHID AND PA.FORMTYPE=FINAL.FORMTYPE   
					WHERE FINAL.BRANCHID=@BRANCHID AND FINAL.FORMID=@FORMID AND ISNULL(AMOUNT,0)-TDS < 0 AND PA.MONTHYEAR= @MONTHYEAR
						--SUBSTRING(CAST(PA.MONTHYEAR AS VARCHAR),1,@VAR)=@MONTH  
				)SUPERFINAL  
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON SUPERFINAL.BRANCHID=CB.BRANCHID  
				INNER JOIN COMPANYBRANCH CB1  WITH(NOLOCK) ON SUPERFINAL.PARENTBRANCHID=CB1.BRANCHID ORDER BY CB1.BRANCHNAME  
			-- SELECT CAST(@MONTH AS VARCHAR(8))  +  CAST(@FINYEAR AS VARCHAR(8))
	END  
ELSE
	BEGIN
		SELECT DISTINCT CB.BRANCHCODE AS [BRANCH CODE],CB.BRANCHNAME AS [BRANCH NAME] ,
			CB1.BRANCHNAME AS [PARENT BRANCH NAME],SUPERFINAL.FORMTYPE AS [FORM TYPE],
			SUPERFINAL.BALANCEAMOUNT AS [MISMATCH AMOUNT], SUPERFINAL.TOTALAMOUNT AS [TOTAL TDS AMOUNT] 
		FROM  
			(  
				SELECT FINAL.BRANCHID,FINAL.PARENTBRANCHID,FINAL.FORMTYPE,
					ABS(ISNULL(AMOUNT,0)-TDS) AS BALANCEAMOUNT,TDS AS TOTALAMOUNT,
					PA.AMOUNT,PA.ACCOUNTNO  
				FROM    
					(  
						SELECT RESULT.BRANCHID,RESULT.PARENTBRANCHID,
							RESULT.SECTIONID AS FORMTYPE,SUM(RESULT.TDS) AS TDS 
						FROM   
							(  
								SELECT CB.BRANCHID,CB.PARENTBRANCHID,
									CASE WHEN DD.FORMID=1 THEN '24Q' 
										 WHEN DD.FORMID=3 THEN '27Q' 
										 WHEN (DD.FORMID=2 AND TS.SECTIONID=5 AND DD.ENTRYTYPE=4) THEN '26QI' 
										 ELSE '26QV' 
									END AS SECTIONID,SUM(DD.TOTALDEDUCTED) AS TDS 
								FROM COMPANYBRANCH CB  
									INNER JOIN #DEDUCTIONDET DD ON CB.BRANCHID=DD.BRANCHID  
									INNER JOIN TAXSECTIONS TS ON TS.SECTIONID=DD.SECTIONID  
									LEFT JOIN NONEMPLOYEE NE ON NE.DEDUCTEEID=DD.DEDUCTEEID   
									LEFT JOIN DEDCHALINK DCL ON DD.DEDUCTIONID=DCL.DEDUCTIONID  
								WHERE  DCL.DEDCHALINKID IS NULL AND MONTH(DEDUCTEDDATE)=@MONTH
								GROUP BY CB.BRANCHID,TS.SECTIONID,DD.FORMID,CB.PARENTBRANCHID,DD.ENTRYTYPE 
							) AS RESULT GROUP BY RESULT.BRANCHID,RESULT.SECTIONID,RESULT.PARENTBRANCHID  
					) FINAL   
					LEFT JOIN PARKEDAMOUNT PA ON PA.BRANCHID=FINAL.BRANCHID AND PA.FORMTYPE=FINAL.FORMTYPE  
				WHERE ISNULL(AMOUNT,0)-TDS < 0 AND  PA.MONTHYEAR=@MONTHYEAR
					--SUBSTRING(CAST(PA.MONTHYEAR AS VARCHAR),1,@VAR)=@MONTH  
			)SUPERFINAL  
			INNER JOIN COMPANYBRANCH CB ON SUPERFINAL.BRANCHID=CB.BRANCHID  
			INNER JOIN COMPANYBRANCH CB1 ON SUPERFINAL.PARENTBRANCHID=CB1.BRANCHID 
		ORDER BY CB1.BRANCHNAME  
	END      
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDifferedAmount05')
DROP PROCEDURE USP_TDS_GetDifferedAmount05
GO
CREATE PROCEDURE USP_TDS_GetDifferedAmount05 
 @MONTH INT ,
 @BRANCHID INT,
 @FORMID INT,
 @FINYEAR INT,
 @CLIENTID INT
AS  
	BEGIN      
		DECLARE @MONTHYEAR INT;
		DECLARE @FINANCIALYEAR INT;		
		SELECT @MONTHYEAR=CAST(@MONTH AS VARCHAR(8))  +  CAST(@FINYEAR AS VARCHAR(8))   
		IF(@BRANCHID<> 0 AND @FORMID<>0 )
			BEGIN         
				SELECT DISTINCT CB.BRANCHCODE AS [BRANCH CODE],CB.BRANCHNAME AS [BRANCH NAME] ,
						CB1.BRANCHNAME AS [PARENT BRANCH NAME],SUPERFINAL.FORMTYPE AS [FORM TYPE],
						SUPERFINAL.BALANCEAMOUNT AS [MISMATCH AMOUNT], SUPERFINAL.TOTALAMOUNT AS [TOTAL TDS AMOUNT]
				FROM  
					(  
						SELECT FINAL.BRANCHID,FINAL.FORMID,FINAL.PARENTBRANCHID,FINAL.FORMTYPE,
							ABS(ISNULL(AMOUNT,0)-TDS) AS BALANCEAMOUNT, TDS AS TOTALAMOUNT,PA.AMOUNT,PA.ACCOUNTNO  
						FROM    
						(  
							SELECT RESULT.BRANCHID,RESULT.FORMID, RESULT.PARENTBRANCHID,
								RESULT.SECTIONID AS FORMTYPE,SUM(RESULT.TDS) AS TDS 
							FROM   
								(  
									SELECT DD.RTBRANCHID AS BRANCHID,DD.FORMID, CB.PARENTBRANCHID,
										CASE WHEN DD.FORMID=1 THEN '24Q' 
											 WHEN DD.FORMID=3 THEN '27Q' 
											 WHEN (DD.FORMID=2 AND TS.SECTIONID=5 AND DD.ENTRYTYPE=4) THEN '26QI' 
											 ELSE '26QV' END AS SECTIONID,
										SUM(DD.TOTALDEDUCTED) AS TDS 
									FROM COMPANYBRANCH CB WITH(NOLOCK) 
									INNER JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK) ON CB.BRANCHID=DD.RTBRANCHID  
									INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID  
									LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID   
									LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID  
									WHERE  DCL.DEDCHALINKID IS NULL AND MONTH(DEDUCTEDDATE)=@MONTH AND ISNULL(DD.RTBRANCHID,0) <> 0
									GROUP BY DD.RTBRANCHID,TS.SECTIONID,DD.FORMID,CB.PARENTBRANCHID,DD.ENTRYTYPE
								) AS RESULT 
								GROUP BY RESULT.BRANCHID,RESULT.SECTIONID,RESULT.PARENTBRANCHID,RESULT.FORMID  
						) FINAL   
						LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK) ON PA.BRANCHID=FINAL.BRANCHID AND PA.FORMTYPE=FINAL.FORMTYPE   
						WHERE FINAL.BRANCHID=@BRANCHID AND FINAL.FORMID=@FORMID AND ISNULL(AMOUNT,0)-TDS < 0 AND PA.MONTHYEAR= @MONTHYEAR
					)SUPERFINAL  
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON SUPERFINAL.BRANCHID=CB.BRANCHID  
				INNER JOIN COMPANYBRANCH CB1  WITH(NOLOCK) ON SUPERFINAL.PARENTBRANCHID=CB1.BRANCHID 
				ORDER BY CB1.BRANCHNAME  
			END  
		ELSE
			BEGIN
				SELECT DISTINCT CB.BRANCHCODE AS [BRANCH CODE],CB.BRANCHNAME AS [BRANCH NAME] ,
						CB1.BRANCHNAME AS [PARENT BRANCH NAME],SUPERFINAL.FORMTYPE AS [FORM TYPE],
						SUPERFINAL.BALANCEAMOUNT AS [MISMATCH AMOUNT], SUPERFINAL.TOTALAMOUNT AS [TOTAL TDS AMOUNT] 
				FROM  
					(  
						SELECT FINAL.BRANCHID,FINAL.PARENTBRANCHID,FINAL.FORMTYPE,
							ABS(ISNULL(AMOUNT,0)-TDS) AS BALANCEAMOUNT,TDS AS TOTALAMOUNT,PA.AMOUNT,PA.ACCOUNTNO  
						FROM    
							(  
								SELECT RESULT.BRANCHID,RESULT.PARENTBRANCHID,
									RESULT.SECTIONID AS FORMTYPE,SUM(RESULT.TDS) AS TDS 
								FROM   
									(  
										SELECT DD.RTBRANCHID AS BRANCHID,CB.PARENTBRANCHID,
												CASE WHEN DD.FORMID=1 THEN '24Q' 
													 WHEN DD.FORMID=3 THEN '27Q' 
													 WHEN (DD.FORMID=2 AND TS.SECTIONID=5 AND DD.ENTRYTYPE=4) THEN '26QI' 
													 ELSE '26QV' END AS SECTIONID,SUM(DD.TOTALDEDUCTED) AS TDS 
										FROM COMPANYBRANCH CB  
										INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON CB.BRANCHID=DD.RTBRANCHID  
										INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID  
										LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID   
										LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID  
										WHERE  DCL.DEDCHALINKID IS NULL AND MONTH(DEDUCTEDDATE)=@MONTH AND ISNULL(DD.RTBRANCHID,0) <> 0
										GROUP BY DD.RTBRANCHID,TS.SECTIONID,DD.FORMID,CB.PARENTBRANCHID,DD.ENTRYTYPE 
									) AS RESULT 
								GROUP BY RESULT.BRANCHID,RESULT.SECTIONID,RESULT.PARENTBRANCHID  
							) FINAL   
						LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK) ON PA.BRANCHID=FINAL.BRANCHID AND PA.FORMTYPE=FINAL.FORMTYPE  
						WHERE ISNULL(AMOUNT,0)-TDS < 0 AND  PA.MONTHYEAR=@MONTHYEAR
				)SUPERFINAL  
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON SUPERFINAL.BRANCHID=CB.BRANCHID  
				INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON SUPERFINAL.PARENTBRANCHID=CB1.BRANCHID 
			ORDER BY CB1.BRANCHNAME  
			END
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetDifferentExemptionAmt')
DROP PROCEDURE USP_TDS_GetDifferentExemptionAmt
GO
CREATE PROCEDURE USP_TDS_GetDifferentExemptionAmt
	@salaryHeadID INT
AS
BEGIN
	SELECT COUNT(*) FROM SALARYHEAD SH
	INNER JOIN SALDETAIL SD WITH(NOLOCK)
	ON SD.SALARYHEADID = SH.SALARYHEADID
	WHERE SD.SALARYHEADID = @salaryHeadID AND ISNULL(SH.ISEDITABLE,0) = 1 
	AND SD.EXEMPTAMT > 0 AND SH.EXEMPTAMT > 0 
	AND SD.EXEMPTAMT <> SH.EXEMPTAMT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDIRECTTAX')
DROP PROCEDURE USP_TDS_GETDIRECTTAX
GO
CREATE PROCEDURE [USP_TDS_GETDIRECTTAX]  
@CHALLANPAIDDATE DATETIME = NULL,  
@MONTH INT = NULL,  
@FINYEAR INT = NULL,  
@ISMONTHWISE BIT = 0   
AS    
BEGIN    
      DECLARE @DIRECTTAX TABLE (CHALLANPAIDDATE DATETIME, RECIEPT NUMERIC(13,2), MAJORHEADCODE VARCHAR(5), MAJORHEAD VARCHAR(50), SCROLLNO VARCHAR(10), CHALLANCOUNT INT);
      SELECT ROW_NUMBER() OVER (ORDER BY CHALLANID ASC)  SRNO, CHALLANTOTAL  AS RECIEPT,'MAJORHEADCODE'=CASE WHEN  ISCOMPANY=1 THEN '0020' ELSE '0021' END,  
	  'MAJORHEAD'=CASE WHEN  ISCOMPANY=1 THEN 'COMPANY DEDUCTEES' ELSE 'NON COMPANY DEDUCTEES' END,'SCROLLNO'=CASE WHEN ISNULL(RTFILENO,'')='' THEN '' ELSE    
      CASE WHEN  ISCOMPANY=1 THEN 'C'+CAST(RTFILENO AS VARCHAR)ELSE 'I'+CAST(RTFILENO AS VARCHAR) END END,CHALLANPAIDDATE ,  
      0 AS CHALLANCOUNT
      INTO #TEMP    
      FROM CHALLANDETAIL CD  
      INNER JOIN REMITTINGBANK RB ON CD.BANKID = RB.BANKID   
      WHERE  FORMID <> 1 AND ISAUTOGENERATED=1 AND ISOLTASINCLUDED=1 AND ISTTUMINCLUDED=1-- AND RB.BSRCODE = '0290179'
 IF(@ISMONTHWISE = 1)  
  BEGIN  
   INSERT @DIRECTTAX  
   SELECT CHALLANPAIDDATE, RECIEPT, MAJORHEADCODE, MAJORHEAD, SCROLLNO, CHALLANCOUNT FROM #TEMP  
   SELECT CHALLANPAIDDATE , SUM(RECIEPT) AS 'RECIEPT',MAJORHEADCODE,   
   MAJORHEAD, SCROLLNO , COUNT(CHALLANPAIDDATE) AS CHALLANCOUNT FROM @DIRECTTAX   
   WHERE MONTH(CHALLANPAIDDATE) = @MONTH AND YEAR(CHALLANPAIDDATE) = @FINYEAR  
   GROUP BY MAJORHEADCODE, MAJORHEAD, SCROLLNO, CHALLANPAIDDATE  
  END  
 ELSE  
  BEGIN  
   INSERT INTO @DIRECTTAX  
   SELECT CHALLANPAIDDATE, RECIEPT, MAJORHEADCODE, MAJORHEAD, SCROLLNO, CHALLANCOUNT FROM #TEMP  
   SELECT SUM(RECIEPT) RECIEPT,MAJORHEADCODE,MAJORHEAD,MAX(SCROLLNO) SCROLLNO,COUNT(CHALLANPAIDDATE) AS CHALLANCOUNT  
   FROM @DIRECTTAX  
    WHERE CONVERT(VARCHAR,CHALLANPAIDDATE,103) = CONVERT(VARCHAR,@CHALLANPAIDDATE,103)    
   GROUP BY MAJORHEADCODE,MAJORHEAD  
   --ORDER BY ROWNO   
  END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDIRECTTAXONDATE')
DROP PROCEDURE USP_TDS_GETDIRECTTAXONDATE
GO
CREATE PROCEDURE [USP_TDS_GETDIRECTTAXONDATE]
@CHALLANPAIDDATE SMALLDATETIME = NULL,
@MONTH INT = NULL,
@FINYEAR INT = NULL,
@ISMONTHWISE BIT = 0
AS
BEGIN
	IF(@ISMONTHWISE = 1)
		BEGIN
			SELECT ROW_NUMBER() OVER (ORDER BY CHALLANPAIDDATE) AS 'SNO',CHALLANPAIDDATE AS 'DEPOSITDATE', SUM(RECIEPT) AS 'RECEIPT (RS)',MAJORHEADCODE,
			MAJORHEAD, SCROLLNO AS SCROLLNUMBER, COUNT(CHALLANPAIDDATE) AS CHALLANCOUNT FROM VW_DIRECTTAX
			WHERE MONTH(CHALLANPAIDDATE) = @MONTH AND YEAR(CHALLANPAIDDATE) = @FINYEAR
			GROUP BY MAJORHEADCODE, MAJORHEAD,SCROLLNO, CHALLANPAIDDATE
		END
	ELSE
		BEGIN
			SELECT ROW_NUMBER() OVER(ORDER BY MAJORHEADCODE) ROWNO,SUM(RECIEPT) RECIEPT,MAJORHEADCODE,MAJORHEAD,MAX(SCROLLNO) SCROLLNO,COUNT(CHALLANPAIDDATE)  FROM VW_DIRECTTAXONDATE WHERE CHALLANPAIDDATE=@CHALLANPAIDDATE
			GROUP BY MAJORHEADCODE,MAJORHEAD
			ORDER BY ROWNO
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDISPLAYLINKEDCHALLANCOUNT')
DROP PROCEDURE USP_TDS_GETDISPLAYLINKEDCHALLANCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETDISPLAYLINKEDCHALLANCOUNT]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@SECTIONID INT
AS
 BEGIN
  DECLARE @SQLQUERY NVARCHAR(MAX);
  SET @SQLQUERY='SELECT COUNT(CCD.CHALLANERETURNID) FROM CORRCHALLANDETAIL CCD  WITH(NOLOCK)
           INNER JOIN
           (
            SELECT MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS, CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE
                   BRANCHID= ' + CAST(@BRANCHID AS VARCHAR) + ' AND
                   FORMID= ' +  CAST(@FORMID AS VARCHAR) + ' AND
                   QUARTER=' + CAST(@QUARTER AS VARCHAR)+' GROUP BY CHALLANERETURNID
           )C
           ON CCD.CORRECTIONSTATUS=C.CORRECTIONSTATUS AND CCD.CHALLANERETURNID=C.CHALLANERETURNID
           WHERE CCD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '  AND CCD.FORMID = ' +  CAST(@FORMID AS VARCHAR) + ' AND CCD.QUARTER =' + CAST(@QUARTER AS VARCHAR)+' AND CCD.CHALLANTOTAL > 0'
   IF(@SECTIONID<>-1)
   BEGIN
    SET @SQLQUERY=@SQLQUERY + ' AND CCD.SECTIONID ='+ CAST(@SECTIONID AS VARCHAR)
   END
  EXECUTE SP_EXECUTESQL @SQLQUERY ;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDISPLAYLINKEDDEDUCTION')
DROP PROCEDURE USP_TDS_GETDISPLAYLINKEDDEDUCTION
GO
CREATE PROCEDURE [USP_TDS_GETDISPLAYLINKEDDEDUCTION]
@STARTINDEX INT,
@PAGESIZE INT,
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@CHALLANERETURNID INT
AS
 BEGIN
   DECLARE @FIRSTINDEX INT, @LASTINDEX INT;
   DECLARE @SQLQUERY NVARCHAR(MAX);
   SELECT @FIRSTINDEX = (@STARTINDEX -1) * @PAGESIZE;
   SELECT @LASTINDEX = (@STARTINDEX * @PAGESIZE + 1);
   IF(@FORMID=1)
    BEGIN
    SET @SQLQUERY ='SELECT ID = IDENTITY(INT,1,1),* INTO #DEDUCTIONS
             FROM
             (
               SELECT CDD.CORRECTIONSTATUS, CDD.DEDUCTIONSERIALNO , CE.NAME, CE.LASTPAN , CE.PAN, CDD.PAYMENTMADE, CDD.PAYMENTDATE,
                CDD.INCOMETAX, CDD.SURCHARGE, CDD.EDUCATIONCESS, CDD.TOTALDEDUCTED, CDD.TAXRATE, CDD.DEDUCTEDDATE , CE.CORRECTIONSTATUS AS EMPCORRSTATUS ,CE.DEDUCTEESERIALNO
                FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)
                INNER JOIN CORREMPLOYEE CE WITH(NOLOCK) ON
                  CDD.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO AND
                  CE.BRANCHID =CDD.BRANCHID AND
                  CE.FORMID=CDD.FORMID AND
                  CE.QUARTER=CDD.QUARTER
     INNER JOIN
    (
     SELECT  MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS,DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '  AND
                         FORMID='+ CAST(@FORMID AS VARCHAR) + '  AND
                         QUARTER=' + CAST(@QUARTER AS VARCHAR) + '
                         GROUP BY  DEDUCTEESERIALNO
    ) C ON C.DEDUCTEESERIALNO=CE.DEDUCTEESERIALNO AND
     C.CORRECTIONSTATUS= CE.CORRECTIONSTATUS
                  INNER JOIN
     (
     SELECT MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS, DEDUCTIONSERIALNO  FROM CORRDEDUCTIONDETAIL WHERE
     BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND
     FORMID='+ CAST(@FORMID AS VARCHAR) + '  AND
     QUARTER=' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTIONSERIALNO
     )
                CORR ON
                CORR.DEDUCTIONSERIALNO=CDD.DEDUCTIONSERIALNO AND
                CORR.CORRECTIONSTATUS=CDD.CORRECTIONSTATUS
                INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID
                INNER JOIN
                (
                 SELECT DISTINCT CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND
                                                       FORMID='+ CAST(@FORMID AS VARCHAR) + ' AND
                                                       QUARTER=' + CAST(@QUARTER AS VARCHAR) + ' AND
                                                       CHALLANERETURNID= '+ CAST(@CHALLANERETURNID AS VARCHAR) +'
                                                GROUP BY CHALLANERETURNID
                )AS
                DD ON
                DD.CHALLANERETURNID = CDD.CHALLANERETURNID
                WHERE CDD.BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + '  AND
                      CDD.FORMID='+ CAST(@FORMID AS VARCHAR) + ' AND
                      CDD.QUARTER=' + CAST(@QUARTER AS VARCHAR)
    END
   ELSE
       BEGIN
    SET @SQLQUERY='SELECT ID = IDENTITY(INT,1,1),* INTO #DEDUCTIONS
             FROM
             (
               SELECT CDD.CORRECTIONSTATUS, CDD.DEDUCTIONSERIALNO , CNE.NAME, CNE.PAN, CDD.PAYMENTMADE, CDD.PAYMENTDATE,
                    CDD.INCOMETAX, CDD.SURCHARGE, CDD.EDUCATIONCESS, CDD.TOTALDEDUCTED, CDD.TAXRATE, CDD.DEDUCTEDDATE ,CNE.CORRECTIONSTATUS AS EMPCORRSTATUS,CNE.DEDUCTEESERIALNO
               FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
               INNER JOIN CORRNONEMPLOYEE CNE WITH(NOLOCK) ON
                 CDD.DEDUCTEESERIALNO=CNE.DEDUCTEESERIALNO AND
                 CNE.BRANCHID =CDD.BRANCHID AND
                 CNE.FORMID=CDD.FORMID AND
                 CNE.QUARTER=CDD.QUARTER
                 INNER JOIN
    (
     SELECT  MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS,DEDUCTEESERIALNO FROM CORRNONEMPLOYEE  WITH(NOLOCK) WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '  AND
                         FORMID='+ CAST(@FORMID AS VARCHAR) + '  AND
                         QUARTER=' + CAST(@QUARTER AS VARCHAR) + '
                         GROUP BY  DEDUCTEESERIALNO
    ) C ON C.DEDUCTEESERIALNO=CNE.DEDUCTEESERIALNO AND
     C.CORRECTIONSTATUS= CNE.CORRECTIONSTATUS
               INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID
                 INNER JOIN
                (
                 SELECT MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS, DEDUCTIONSERIALNO  FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE
                         BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND
                         FORMID='+ CAST(@FORMID AS VARCHAR) + '  AND
                         QUARTER=' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTIONSERIALNO
       )
                CORR ON
                CORR.DEDUCTIONSERIALNO=CDD.DEDUCTIONSERIALNO AND
                CORR.CORRECTIONSTATUS=CDD.CORRECTIONSTATUS
               INNER JOIN
               (
                SELECT DISTINCT CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND
                                                      FORMID='+ CAST(@FORMID AS VARCHAR) + ' AND
                                                      QUARTER=' + CAST(@QUARTER AS VARCHAR) + ' AND
                                                      CHALLANERETURNID='+ CAST(@CHALLANERETURNID AS VARCHAR) + '
                                             GROUP BY CHALLANERETURNID
               )AS
               DD ON
               DD.CHALLANERETURNID = CDD.CHALLANERETURNID
               WHERE CDD.BRANCHID='+ CAST(@BRANCHID AS VARCHAR) + ' AND
                     CDD.FORMID='+ CAST(@FORMID AS VARCHAR) + ' AND
                     CDD.QUARTER='+ CAST(@QUARTER AS VARCHAR)
       END
       SET @SQLQUERY = @SQLQUERY + ') TEMP ORDER BY DEDUCTIONSERIALNO;SELECT * FROM #DEDUCTIONS WHERE ID > ' + CAST(@FIRSTINDEX AS VARCHAR) + ' AND ID < ' + CAST(@LASTINDEX AS VARCHAR);
EXEC SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDISPLAYLINKEDDEDUCTIONCOUNT')
DROP PROCEDURE USP_TDS_GETDISPLAYLINKEDDEDUCTIONCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETDISPLAYLINKEDDEDUCTIONCOUNT]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@CHALLANERETURNID INT
AS
 BEGIN
  DECLARE @SQLQUERY NVARCHAR(MAX);
  SET @SQLQUERY='SELECT COUNT(CDD.DEDUCTIONSERIALNO) FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
           INNER JOIN
           (
            SELECT MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS, DEDUCTIONSERIALNO FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE
                   BRANCHID= ' + CAST(@BRANCHID AS VARCHAR) + ' AND
                   FORMID= ' +  CAST(@FORMID AS VARCHAR) + ' AND
                   QUARTER=' + CAST(@QUARTER AS VARCHAR)+' GROUP BY DEDUCTIONSERIALNO
           )C
           ON CDD.CORRECTIONSTATUS=C.CORRECTIONSTATUS AND CDD.DEDUCTIONSERIALNO=C.DEDUCTIONSERIALNO
           WHERE CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '  AND CDD.FORMID = ' +  CAST(@FORMID AS VARCHAR) + ' AND CDD.QUARTER =' + CAST(@QUARTER AS VARCHAR)+'  AND CDD.CHALLANERETURNID = ' + CAST(@CHALLANERETURNID AS VARCHAR)
   EXECUTE SP_EXECUTESQL @SQLQUERY ;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDTFDETAILS')
DROP PROCEDURE USP_TDS_GETDTFDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETDTFDETAILS]  
@SCALE INT   
AS    
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED    
 SET NOCOUNT ON    
IF @SCALE =-1   
 SELECT SCALE,AMOUNT FROM SCALE    
ELSE  
  SELECT SCALE,AMOUNT FROM SCALE  WHERE SCALE=@SCALE  
 SET NOCOUNT OFF
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDUPLICATEPAN')
DROP PROCEDURE USP_TDS_GETDUPLICATEPAN
GO
CREATE PROCEDURE [USP_TDS_GETDUPLICATEPAN] 
 @BRANCHID INT,
 @VALUE BIT
 AS
 BEGIN
		SELECT BRANCHID, NAME, COUNT(NAME)NAMECOUNT 
		INTO #DED
		FROM 
			(
				SELECT DISTINCT BRANCHID, NAME, PAN FROM DEDUCTEE WITH(NOLOCK) 
				WHERE PAN NOT IN ('PANAPPLIED', 'PANNOTAVBL', 'PANINVALID') 
			)T
			GROUP BY NAME, BRANCHID
			HAVING COUNT(NAME) > 1
		IF(@VALUE=0)
				BEGIN 
				   SELECT @BRANCHID = CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID =@BRANCHID
					SELECT CB.BRANCHCODE,CB.BRANCHNAME, T.NAME, TT.PAN, TT.BRANCHID FROM 
					(
					 SELECT DISTINCT NAME, BRANCHID, PAN FROM DEDUCTEE WITH(NOLOCK)
					 GROUP BY NAME, BRANCHID, PAN
					)TT
					INNER JOIN
					#DED T ON TT.BRANCHID = T.BRANCHID AND TT.NAME = T.NAME
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=TT.BRANCHID
					WHERE CB.BRANCHID=@BRANCHID OR CB.PARENTBRANCHID = @BRANCHID
					ORDER BY T.NAME
				END
				ELSE
					BEGIN
						SELECT ISNULL((SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID IN(SELECT PARENTBRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID= TT.BRANCHID)),0) [ZONE],CB.BRANCHCODE,CB.BRANCHNAME, T.NAME, TT.PAN, TT.BRANCHID FROM 
						(
						 SELECT DISTINCT NAME, BRANCHID, PAN FROM DEDUCTEE WITH(NOLOCK)
						 GROUP BY NAME, BRANCHID, PAN
						)TT
						INNER JOIN
						#DED T ON TT.BRANCHID = T.BRANCHID AND TT.NAME = T.NAME
						INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=TT.BRANCHID
						ORDER BY T.NAME
					END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETDUPLICATERECORDS')
DROP PROCEDURE USP_TDS_GETDUPLICATERECORDS
GO
CREATE PROCEDURE [USP_TDS_GETDUPLICATERECORDS]
	AS
	BEGIN
	 SELECT DISTINCT ED3.ROWNO, ED2.BRANCHNAME, ED2.BRANCHCODE, ED2.PBRANCHNAME, ED2.PBRANCHCODE FROM USERBRANCH ED3 WITH(NOLOCK) INNER JOIN
	 	 (SELECT ED.BRANCHNAME, ED.BRANCHCODE, ED.PBRANCHCODE, ED.PBRANCHNAME FROM USERBRANCH  ED WITH(NOLOCK) INNER JOIN
		 (
		   SELECT COUNT(*)AS [COUNT],BRANCHNAME, BRANCHCODE, PBRANCHNAME, PBRANCHCODE FROM USERBRANCH WITH(NOLOCK)
						GROUP BY BRANCHNAME, BRANCHCODE, PBRANCHNAME, PBRANCHCODE  HAVING COUNT(*)>1
		 )  ED1
	ON
	    ED.BRANCHNAME =ED1.BRANCHNAME
	   AND ED.BRANCHCODE=ED1.BRANCHCODE
	   AND ED.PBRANCHNAME=ED1.PBRANCHNAME
	   AND ED.PBRANCHCODE=ED1.PBRANCHCODE
	   )ED2
	   ON
		ED3.BRANCHNAME =ED2.BRANCHNAME
	   AND ED3.BRANCHCODE=ED2.BRANCHCODE
	   AND ED3.PBRANCHNAME=ED2.PBRANCHNAME
	   AND ED3.PBRANCHCODE=ED2.PBRANCHCODE
	 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEARNINGDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETEARNINGDEDUCTIONS
GO
CREATE PROCEDURE  USP_TDS_GETEARNINGDEDUCTIONS --1
@BRANCHID INT    
AS    
SET NOCOUNT ON    
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED    
SELECT D.NAME+' ('+D.REFERENCENO +')' AS NAME, D.REFERENCENO, E.DESIGNATION, SD.MONTHID,SH.SALARYNAME,SH.ABBREVATION,SD.GROSSAMT1,       
 SD.GROSSAMT2 AS SUPPLEMENTARY,SD.RECOVERYAMT, ISNULL(SH.EARNING,0) EARNING      
 INTO #SAL      
 FROM SALDETAIL SD      
INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SH.SALARYHEADID = SD.SALARYHEADID  
INNER JOIN LINKTOTC L WITH(NOLOCK) ON L.COMID = SD.COMID 
INNER JOIN EMPWORKMONTH EW WITH(NOLOCK) ON EW.MONTHID=SD.MONTHID AND L.COMID=EW.COMID AND EW.BRANCHID=L.BRANCHID
INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = L.EMPLOYEEID      
INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
WHERE D.BRANCHID = @BRANCHID 
SELECT NAME, REFERENCENO, DESIGNATION,SALARYNAME AS ABBREVATION,EARNING, RECOVERY,ISNULL(APR,0)APR,ISNULL(MAY,0)MAY ,ISNULL(JUNE,0)JUNE, ISNULL(JUL,0)JUL,ISNULL(AUG,0)AUG,ISNULL(SEP,0)SEP,  
ISNULL(OCT,0)OCT,ISNULL(NOV,0)NOV,ISNULL([DEC],0)[DEC],ISNULL(JAN,0)JAN,ISNULL(FEB,0)FEB,ISNULL(MAR,0)MAR FROM    
(    
 SELECT NAME, REFERENCENO, DESIGNATION,LEFT(SALARYNAME,14)SALARYNAME ,'EARNING : ' AS EARNING, 0 AS RECOVERY,[4] APR,[5] MAY ,[6] JUNE,[7] JUL,[8] AUG,[9] SEP,[10] OCT,[11] NOV,[12] [DEC],    
 [1] JAN,[2] FEB, [3] MAR     
 FROM       
 (SELECT NAME, REFERENCENO, DESIGNATION, GROSSAMT1,COALESCE(ABBREVATION,SALARYNAME)SALARYNAME,MONTHID     
 FROM #SAL WHERE EARNING = 1 AND ISNULL(GROSSAMT1,0) > 0) PS      
 PIVOT      
 (      
 SUM (GROSSAMT1)      
 FOR MONTHID IN      
 ([4],[5],[6],[7],[8],[9],[10],[11],[12],[1],[2],[3])) AS PVT  
 UNION ALL    
 SELECT NAME, REFERENCENO, DESIGNATION, LEFT(SALARYNAME,10)  +' - REC' SALARYNAME,'EARNING : ' AS EARNING, 1 AS RECOVERY, [4] APR,[5] MAY ,[6] JUNE,[7] JUL,[8] AUG,[9] SEP,[10] OCT,[11] NOV,[12] [DEC],    
 [1] JAN,[2] FEB, [3] MAR     
 FROM       
 (SELECT NAME, REFERENCENO, DESIGNATION, RECOVERYAMT,COALESCE(ABBREVATION,SALARYNAME)SALARYNAME,MONTHID     
 FROM #SAL WHERE EARNING = 1 AND ISNULL(RECOVERYAMT,0) > 0) PS      
 PIVOT      
 (      
 SUM (RECOVERYAMT)      
 FOR MONTHID IN      
 ([4],[5],[6],[7],[8],[9],[10],[11],[12],[1],[2],[3])) AS PVT        
 UNION ALL  
 SELECT NAME, REFERENCENO, DESIGNATION, LEFT(SALARYNAME,10) +' - SUP' SALARYNAME,'EARNING : ' AS EARNING, 0 AS RECOVERY, [4] APR,[5] MAY ,[6] JUNE,[7] JUL,[8] AUG,[9] SEP,[10] OCT,[11] NOV,[12] [DEC],    
 [1] JAN,[2] FEB, [3] MAR     
 FROM       
 (SELECT NAME, REFERENCENO, DESIGNATION, SUPPLEMENTARY,COALESCE(ABBREVATION,SALARYNAME)SALARYNAME,MONTHID     
 FROM #SAL WHERE EARNING = 1 AND ISNULL(SUPPLEMENTARY,0) > 0) PS      
 PIVOT      
 (      
 SUM (SUPPLEMENTARY)      
 FOR MONTHID IN      
 ([4],[5],[6],[7],[8],[9],[10],[11],[12],[1],[2],[3])) AS PVT        
 UNION ALL    
 SELECT NAME, REFERENCENO, DESIGNATION,LEFT(SALARYNAME,14)SALARYNAME,'DEDUCTION : ' AS EARNING, 0 AS RECOVERY, [4] APR,[5] MAY ,[6] JUNE,[7] JUL ,[8] AUG,[9] SEP,[10] OCT,[11] NOV,[12] [DEC],    
 [1] JAN,[2] FEB, [3]  MAR     
 FROM       
 (SELECT NAME, REFERENCENO, DESIGNATION, GROSSAMT1,COALESCE(ABBREVATION,SALARYNAME)SALARYNAME,MONTHID      
 FROM #SAL WHERE EARNING = 0 AND ISNULL(GROSSAMT1,0) > 0) PS      
 PIVOT      
 (      
 SUM (GROSSAMT1)      
 FOR MONTHID IN      
 ([4],[5],[6],[7],[8],[9],[10],[11],[12],[1],[2],[3])) AS PVT      
 UNION ALL    
 SELECT NAME, REFERENCENO, DESIGNATION, LEFT(SALARYNAME,10) +' - SUP' SALARYNAME,'DEDUCTION : ' AS EARNING, 0 AS RECOVERY, [4] APR,[5] MAY ,[6] JUNE,[7] JUL ,[8] AUG,[9] SEP,[10] OCT,[11] NOV,[12] [DEC],    
 [1] JAN,[2] FEB, [3]  MAR     
 FROM       
 (SELECT NAME, REFERENCENO, DESIGNATION, SUPPLEMENTARY,COALESCE(ABBREVATION,SALARYNAME)SALARYNAME,MONTHID      
 FROM #SAL WHERE EARNING = 0 AND ISNULL(SUPPLEMENTARY,0) > 0) PS      
 PIVOT      
 (      
 SUM (SUPPLEMENTARY)      
 FOR MONTHID IN 
 ([4],[5],[6],[7],[8],[9],[10],[11],[12],[1],[2],[3])) AS PVT     
 UNION ALL  
 SELECT NAME, REFERENCENO, DESIGNATION, LEFT(SALARYNAME,10) +' - REC' SALARYNAME,'DEDUCTION : ' AS EARNING, 1 AS RECOVERY, [4] APR,[5] MAY ,[6] JUNE,[7] JUL ,[8] AUG,[9] SEP,[10] OCT,[11] NOV,[12] [DEC],    
 [1] JAN,[2] FEB, [3]  MAR     
 FROM       
 (SELECT NAME, REFERENCENO, DESIGNATION, RECOVERYAMT,COALESCE(ABBREVATION,SALARYNAME)SALARYNAME,MONTHID      
 FROM #SAL WHERE EARNING = 0 AND ISNULL(RECOVERYAMT,0) > 0) PS      
 PIVOT      
 (      
 SUM (RECOVERYAMT)      
 FOR MONTHID IN      
 ([4],[5],[6],[7],[8],[9],[10],[11],[12],[1],[2],[3])) AS PVT     
) T    
ORDER BY NAME, REFERENCENO, DESIGNATION,ABBREVATION
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEARNINGRECORDS')
DROP PROCEDURE USP_TDS_GETEARNINGRECORDS
GO
CREATE PROCEDURE [USP_TDS_GETEARNINGRECORDS]
@BRANCHID INT,
@FINYEAR SMALLDATETIME
AS
SELECT D.NAME, D.REFERENCENO, E.DESIGNATION, SD.MONTHID,SH.ABBREVATION,SD.GROSSAMT1, 
	SD.GROSSAMT2 + SD.GROSSAMT3 AS SUPPLEMENTARY, ISNULL(SH.EARNING,0) EARNING
	INTO #SAL
	FROM SALDETAIL SD
INNER JOIN SALARYHEAD SH ON SH.SALARYHEADID = SD.SALARYHEADID
INNER JOIN LINKTOTC L ON L.COMID = SD.COMID
INNER JOIN EMPLOYEE E ON E.EMPLOYEEID = L.EMPLOYEEID
INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID
WHERE D.BRANCHID=2
SELECT NAME, REFERENCENO, DESIGNATION,MONTHID,CAST(REPLACE(STR(MONTHID, 2), SPACE(1), '0') AS VARCHAR) + CAST(YEAR(@FINYEAR) AS VARCHAR) MONTHYEAR,1 AS EARNING,
 [BASIC-PAID] AS BASICPAID, [DA-PAID] AS DAPAID,[HRA] AS HRA,[CCA] AS CCA,[FPP] AS FPP,[GP-PQP] AS GP,[STGPAY] AS ST,[POST-INS] AS POST,
 [PF-LOAN] AS PFLOAN,[NE-ALL] AS NEALL,[CONVEYANCE] AS CONV,[COMP-ADJ] AS COMP,[HILL] AS HILL,[SUBSIST],[SPL] AS SPL,[PERS] AS PERS,
 [DEPTN] AS DEPT,[SPLIT] AS SPLIT,[PROJ] AS PROJ,[GOA] AS GOA,[CYCLE] AS CYCLE,[WASH] AS WASH,[ROTN] AS ROTN,[EARN-OTH]AS EARN,
  [FPP] AS FPP, [GP-PQP] AS GPPQP
FROM 
(SELECT NAME, REFERENCENO, DESIGNATION,MONTHID, GROSSAMT1,ABBREVATION--,SUPPLEMENTARY
FROM #SAL WHERE EARNING = 1) PS
PIVOT
(
SUM (GROSSAMT1)
FOR ABBREVATION IN
([BASIC-PAID], [DA-PAID],[HRA],[CCA],[FPP],[GP-PQP],[STGPAY],[POST-INS],[PF-LOAN],[NE-ALL],[CONVEYANCE],
 [COMP-ADJ],[HILL],[SUBSIST],[SPL],[PERS],[DEPTN],[SPLIT],[PROJ],[GOA],[CYCLE],[WASH],[ROTN],[EARN-OTH])
) AS PVT
UNION ALL
SELECT NAME, REFERENCENO, DESIGNATION,MONTHID,'SUP:' MONTHYEAR,1 AS EARNING,
 [BASIC-PAID] AS BASICPAID, [DA-PAID] AS DAPAID,[HRA] AS HRA,[CCA] AS CCA,[FPP] AS FPP,[GP-PQP] AS GP,[STGPAY] AS ST,[POST-INS] AS POST,
 [PF-LOAN] AS PFLOAN,[NE-ALL] AS NEALL,[CONVEYANCE] AS CONV,[COMP-ADJ] AS COMP,[HILL] AS HILL,[SUBSIST],[SPL] AS SPL,[PERS] AS PERS,
 [DEPTN] AS DEPT,[SPLIT] AS SPLIT,[PROJ] AS PROJ,[GOA] AS GOA,[CYCLE] AS CYCLE,[WASH] AS WASH,[ROTN] AS ROTN,[EARN-OTH]AS EARN,
  [FPP] AS FPP, [GP-PQP] AS GPPQP--,SUPPLEMENTARY
FROM 
(SELECT NAME, REFERENCENO, DESIGNATION,MONTHID, SUPPLEMENTARY,ABBREVATION--,SUPPLEMENTARY
FROM #SAL WHERE EARNING = 1) PS
PIVOT
(
SUM(SUPPLEMENTARY)
FOR ABBREVATION IN
([BASIC-PAID], [DA-PAID],[HRA],[CCA],[FPP],[GP-PQP],[STGPAY],[POST-INS],[PF-LOAN],[NE-ALL],[CONVEYANCE],
 [COMP-ADJ],[HILL],[SUBSIST],[SPL],[PERS],[DEPTN],[SPLIT],[PROJ],[GOA],[CYCLE],[WASH],[ROTN],[EARN-OTH])
) AS PVT
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMAILANDPHONENOFOR16AREPORT')
DROP PROCEDURE USP_TDS_GETEMAILANDPHONENOFOR16AREPORT
GO
CREATE PROCEDURE USP_TDS_GETEMAILANDPHONENOFOR16AREPORT
@BRANCHID INT,
@ISSB BIT = 0
AS
BEGIN
	IF(@ISSB = 0)
		BEGIN
			SELECT NAME, PAN, EMAILADDRESS, MOBILENO AS PHONENO
			FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE ON NE.DEDUCTEEID = D.DEDUCTEEID 
			WHERE D.BRANCHID = @BRANCHID
		END
	ELSE
		BEGIN
			SELECT NAME, PAN, EMAILADDRESS, MOBILENO AS PHONENO
			FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE ON NE.DEDUCTEEID = D.DEDUCTEEID 
			WHERE D.BRANCHID = @BRANCHID AND ISNULL(EMAILADDRESS,'') <> ''
		END
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEmailQueueRecords')
DROP PROCEDURE USP_TDS_GetEmailQueueRecords
GO
CREATE PROCEDURE USP_TDS_GetEmailQueueRecords
 AS
 BEGIN
	SELECT TOP 5000 BRANCHID, FORMID, QUARTER, DEDUCTEEPAN, EMAILURL, SMSURL, RECORDID
		FROM EMAILQUEUE WITH(NOLOCK)
	WHERE STATUS IS NULL
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEmailQueueStatus')
DROP PROCEDURE USP_TDS_GetEmailQueueStatus
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetEmailQueueStatus]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN
	DECLARE @STATUS INT;
	IF((SELECT COUNT(RECORDID) FROM EMAILQUEUE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND STATUS IS NOT NULL) > 0)
	BEGIN
		SET @STATUS = 2;
	END
	ELSE IF (EXISTS(SELECT RECORDID FROM EMAILQUEUE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER))
	BEGIN
		IF((SELECT COUNT(RECORDID) FROM EMAILQUEUE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND STATUS IS NULL) = 0)
		BEGIN
			SET @STATUS = 3;
		END
	END
	ELSE
	BEGIN
		SET @STATUS = 1;
	END
	SELECT @STATUS
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMAILSETTINGS')
DROP PROCEDURE USP_TDS_GETEMAILSETTINGS
GO
CREATE PROCEDURE [USP_TDS_GETEMAILSETTINGS] 
@BRANCHID INT 
AS 
	BEGIN
		SELECT EMAILSETTINGSID,CONNECTIONTYPE,HOST,USERNAME,PASSWORD,
		ISAUTODETECT,PORTNO,ISENABLESSL,SUBJECT,BODY
		FROM EMAILSETTINGS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEE')
DROP PROCEDURE USP_TDS_GETEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_GETEMPLOYEE]
               @BRANCHID INT
AS
BEGIN
	SELECT DEDUCTEE.DEDUCTEEID AS DEDUCTEEID,EMPLOYEE.EMPLOYEEID AS EMPLOYEEID,DEDUCTEE.BRANCHID AS BRANCHID,
	       DEDUCTEE.SALUTATION AS SALUTATION,DEDUCTEE.NAME AS DEDUCTEENAME,DEDUCTEE.PAN AS PAN,DEDUCTEE.PANREFERENCE AS PANREFERENCE,
	       DEDUCTEE.ADDRESS1 AS ADDRESS1,DEDUCTEE.ADDRESS2 AS ADDRESS2,DEDUCTEE.ADDRESS3 AS ADDRESS3,DEDUCTEE.ADDRESS4 AS ADDRESS4,
	       DEDUCTEE.ADDRESS5 AS ADDRESS5,DEDUCTEE.STATEID AS STATEID,DEDUCTEE.PINCODE AS PINCODE,DEDUCTEE.REFERENCENO AS REFERENCRNUMBER,
	       DEDUCTEE.PHONENO AS PHONENUMBER,DEDUCTEE.EMAILADDRESS AS EMAILADDRESS,EMPLOYEE.DESIGNATION AS DESIGNATION,
	       EMPLOYEE.EMPLOYMENTFROM AS EMPLOYMENTFROM,EMPLOYEE.EMPLOYMENTTO AS EMPLOYMENTTO,
	       EMPLOYEE.GENDER AS GENDER,EMPLOYEE.ISSENIORCITIZEN AS ISSENIORCITIZEN,ISNULL(EMPLOYEE.SERIALNO,'') AS SERIALNUMBER,STATEMASTER.STATENAME AS STATENAME
	FROM   DEDUCTEE  WITH(NOLOCK)
		   INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=EMPLOYEE.DEDUCTEEID
		   LEFT JOIN STATEMASTER WITH(NOLOCK) ON DEDUCTEE.STATEID=STATEMASTER.STATEID
	WHERE BRANCHID=@BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEEBASEDONREFERENCEANDBRANCH')
DROP PROCEDURE USP_TDS_GETEMPLOYEEBASEDONREFERENCEANDBRANCH
GO
CREATE PROCEDURE USP_TDS_GETEMPLOYEEBASEDONREFERENCEANDBRANCH        
	@BRANCHID NVARCHAR(MAX),      
	@REFERENCENOS NVARCHAR(MAX)        
AS        
BEGIN        
	SELECT * INTO #TEMPREF FROM  [DBO].[UDF_TDS_SPLITSTRING](@REFERENCENOS,',')      
	SELECT * INTO #TEMPBR FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHID,',')
	SELECT E.DEDUCTEEID, E.EMPLOYMENTFROM, E.EMPLOYMENTTO, E.ISSENIORCITIZEN, E.GENDER,
		D.NAME, D.PAN, D.PANREFERENCE,  
		D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.STATEID, E.DESIGNATION,  
		D.PINCODE,D.PHONENO, D.EMAILADDRESS, E.ACCOUNTNO, E.PPONUMBER  
	FROM DEDUCTEE D  WITH(NOLOCK)      
		INNER JOIN EMPLOYEE E WITH(NOLOCK) 
			ON D.DEDUCTEEID = E.DEDUCTEEID
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) 
			ON D.BRANCHID=C.BRANCHID      
		WHERE ISNULL(D.REFERENCENO,'')<>'' AND   D.REFERENCENO IN      
		 (      
		   SELECT * FROM  #TEMPREF     
		 )  AND C.BRANCHID IN    
		 (    
		 SELECT * FROM  #TEMPBR     
		 ) 				          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEmployeeCount')
DROP PROCEDURE USP_TDS_GetEmployeeCount
GO
CREATE PROCEDURE [USP_TDS_GetEmployeeCount] 
	@BranchID INT,
	@NAME VARCHAR(75),
	@PAN VARCHAR(10),
	@ISPENSIONER BIT = 0,
	@REFERENCENO VARCHAR(10)
AS
	BEGIN
		 DECLARE @QUERY NVARCHAR(MAX)
	 SET @QUERY='SELECT COUNT(DEDUCTEE.DEDUCTEEID)FROM   DEDUCTEE  WITH(NOLOCK)
						   INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=EMPLOYEE.DEDUCTEEID 
						   LEFT JOIN STATEMASTER  WITH(NOLOCK) ON DEDUCTEE.STATEID=STATEMASTER.STATEID 
						   LEFT JOIN (SELECT DISTINCT(ISNULL(DEDUCTEEID,MATCHEDID)) as DEDUCTEEID FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID ='+CAST(@BRANCHID AS VARCHAR)+' AND CORRECTIONSTATUS = 1) AS CORR ON DEDUCTEE.DEDUCTEEID = CORR.DEDUCTEEID
				  WHERE  DEDUCTEE.BRANCHID='+CAST(@BRANCHID AS VARCHAR)
	IF(@NAME<>'')
            BEGIN
				SET @QUERY = @QUERY + ' AND DEDUCTEE.NAME LIKE ''%'+@NAME+'%'''								
            END
    IF(@PAN<>'')
			BEGIN 
			    SET @QUERY = @QUERY + ' AND DEDUCTEE.PAN LIKE ''%'+@PAN+'%'''
			END 
	IF(@REFERENCENO <>'')
    BEGIN
    SET @QUERY = @QUERY +' AND DEDUCTEE.REFERENCENO LIKE ''%' + @REFERENCENO +'%'''
    END		
     SET @QUERY = @QUERY + ' AND ISNULL(EMPTYPE,0) = ' + CAST(@ISPENSIONER AS VARCHAR) 
	 EXEC SP_EXECUTESQL @QUERY          
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEEDET')
DROP PROCEDURE USP_TDS_GETEMPLOYEEDET
GO
CREATE PROCEDURE [USP_TDS_GETEMPLOYEEDET] 
@REFERENCENOS NVARCHAR(MAX)          
AS          
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED     
SET NOCOUNT  ON
SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')
SELECT D.REFERENCENO,LC.COMID,C.BRANCHCODE,E.EMPLOYEEID,C.BRANCHID          
FROM DEDUCTEE D
INNER JOIN COMPANYBRANCH C ON C.BRANCHID=D.BRANCHID
INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID          
LEFT JOIN LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID  
INNER JOIN #REFNO R ON R.DATA=D.REFERENCENO        
WHERE LC.COMID IS NULL AND ISNULL(D.REFERENCENO,'')<>''
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_GETEMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETEMPLOYEEDETAIL]        
@BRANCHID INT        
AS        
 BEGIN        
  SELECT E.DEDUCTEEID, E.EMPLOYMENTFROM, E.EMPLOYMENTTO, E.ISSENIORCITIZEN, E.GENDER,  
 D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.STATEID, E.DESIGNATION,  
 D.PINCODE,D.PHONENO, D.EMAILADDRESS, E.ACCOUNTNO, E.PPONUMBER  FROM DEDUCTEE D  WITH(NOLOCK)        
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID         
  WHERE D.BRANCHID = @BRANCHID          
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEmployeeDetailAndBranchNameForTINApp')
DROP PROCEDURE USP_TDS_GetEmployeeDetailAndBranchNameForTINApp
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetEmployeeDetailAndBranchNameForTINApp] 
 @DeducteeID INT        
AS        
 BEGIN              
  SELECT D.NAME,D.PAN, E.DESIGNATION, CB.BRANCHNAME      
  FROM DEDUCTEE D WITH(NOLOCK) 
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID         
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID        
  WHERE D.DEDUCTEEID = @DeducteeID;        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEEDETAILFORIMPORT')
DROP PROCEDURE USP_TDS_GETEMPLOYEEDETAILFORIMPORT
GO
CREATE PROCEDURE [USP_TDS_GETEMPLOYEEDETAILFORIMPORT]
@BRANCHID INT    
AS    
 BEGIN    
   SELECT D.DEDUCTEEID, D.REFERENCENO, D.PAN, D.NAME, E.GENDER, E.ISSENIORCITIZEN 
   FROM DEDUCTEE D WITH(NOLOCK)   
    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID    
    WHERE D.BRANCHID = @BRANCHID    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEmployeeDetailOnComID')
DROP PROCEDURE USP_TDS_GetEmployeeDetailOnComID
GO
CREATE PROCEDURE USP_TDS_GetEmployeeDetailOnComID  
	@COMID INT
AS  
	BEGIN 
		SELECT LTC.COMID,D.BRANCHID,D.PAN,E.ISSENIORCITIZEN,E.GENDER,D.DEDUCTEEID 
		FROM DEDUCTEE D WITH(NOLOCK)
		INNER JOIN EMPLOYEE E WITH(NOLOCK)
			ON E.DEDUCTEEID=D.DEDUCTEEID
		INNER JOIN LINKTOTC LTC WITH(NOLOCK)
			ON LTC.EMPLOYEEID=E.EMPLOYEEID
		WHERE LTC.COMID=@COMID AND ISNULL(D.EMPTYPE,0)=0
		ORDER BY LTC.COMID DESC
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEEIDBASEDONREFERENCE')
DROP PROCEDURE USP_TDS_GETEMPLOYEEIDBASEDONREFERENCE
GO
--[USP_TDS_GETEMPLOYEEIDBASEDONREFERENCE] '9911,9912,9912',0
CREATE PROCEDURE [USP_TDS_GETEMPLOYEEIDBASEDONREFERENCE] 
(        
 @BRANCHCODES NVARCHAR(MAX),        
 @ISEMPLOYEE BIT        
)        
AS        
 BEGIN    
	  SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')    
	  SELECT BRANCHID, BRANCHCODE
	   INTO #BRANCHLIST  
	  FROM COMPANYBRANCH C WITH(NOLOCK)    
	 INNER JOIN #BRANCHES B ON B.DATA = C.BRANCHCODE
  IF @ISEMPLOYEE = 1   
    BEGIN  
		SELECT MAX(D.DEDUCTEEID) DEDUCTEEID, ISNULL(D.REFERENCENO,'') REFERENCENO, B.BRANCHCODE   
		FROM DEDUCTEE D WITH(NOLOCK)   		
		INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID=D.DEDUCTEEID    
		INNER JOIN #BRANCHLIST B ON B.BRANCHID = D.BRANCHID    
		WHERE ISNULL(D.REFERENCENO,'') <> ''  
		GROUP BY D.REFERENCENO, B.BRANCHCODE    ORDER BY B.BRANCHCODE   
    END
  ELSE     
    BEGIN  
		SELECT D.DEDUCTEEID INTO #NONEMP FROM DEDUCTEE D WITH(NOLOCK)   
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID 
		INNER JOIN #BRANCHLIST B ON B.BRANCHID = D.BRANCHID
		SELECT D.DEDUCTEEID INTO #EMP FROM DEDUCTEE D WITH(NOLOCK)   
		INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID 
		INNER JOIN #BRANCHLIST B ON B.BRANCHID = D.BRANCHID    
		SELECT DEDUCTEEID INTO #DEDUCTEE FROM
		( 
			SELECT DEDUCTEEID FROM #NONEMP
			UNION
			SELECT DEDUCTEEID FROM #EMP 
		)D
		SELECT DEDUCTEEID INTO #REMAIN FROM
		(
			SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK) 
			EXCEPT
			SELECT DEDUCTEEID FROM #DEDUCTEE 
		)R
		SELECT R.DEDUCTEEID,ISNULL(D.REFERENCENO,'')REFERENCENO, B.BRANCHCODE FROM #REMAIN R
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON R.DEDUCTEEID = D.DEDUCTEEID
		INNER JOIN #BRANCHLIST B ON B.BRANCHID = D.BRANCHID    		
		WHERE ISNULL(D.REFERENCENO,'') <> ''  
   END   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEEIDBASEDONREFERENCEANDBRANCHF011')
DROP PROCEDURE USP_TDS_GETEMPLOYEEIDBASEDONREFERENCEANDBRANCHF011
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETEMPLOYEEIDBASEDONREFERENCEANDBRANCHF011]               
	@BRANCHCODES NVARCHAR(MAX),      
	@REFERENCENO NVARCHAR(MAX),    
	@ISEMPLOYEE BIT               
AS        
BEGIN      
	SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',') 
	SELECT DISTINCT * INTO #TEMPREF FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENO,',')  
	DECLARE @QUERY NVARCHAR(MAX)        
	DECLARE @JION VARCHAR(20);        
	IF @ISEMPLOYEE=1        
		SET @JION='INNER';        
	ELSE        
		SET @JION='LEFT';        
	SET @QUERY = 'SELECT MAX(D.DEDUCTEEID) DEDUCTEEID, ISNULL(D.REFERENCENO,'''') REFERENCENO,
			C.BRANCHCODE, C.BRANCHID, D.PANREFERENCE 
		FROM DEDUCTEE D WITH(NOLOCK) 
			INNER JOIN COMPANYBRANCH C WITH(NOLOCK)
				ON D.BRANCHID=C.BRANCHID '
			+ @JION + ' JOIN EMPLOYEE E WITH(NOLOCK) 
				ON E.DEDUCTEEID = D.DEDUCTEEID
			INNER JOIN #TEMPBR TB ON TB.DATA = C.BRANCHCODE
			INNER JOIN #TEMPREF TR ON TR.DATA = D.REFERENCENO
		WHERE D.REFERENCENO IS NOT NULL 
			AND D.REFERENCENO <> '''' AND D.DEDUCTEEID IN 
			(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
			EXCEPT 
			SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK))                  
		GROUP BY D.REFERENCENO, C.BRANCHCODE, C.BRANCHID, D.PANREFERENCE ORDER BY C.BRANCHCODE'	
	EXEC SP_EXECUTESQL @QUERY
	DROP TABLE #TEMPBR	              
	DROP TABLE #TEMPREF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEEIDBASEDONREFERENCEF011')
DROP PROCEDURE USP_TDS_GETEMPLOYEEIDBASEDONREFERENCEF011
GO
CREATE PROC USP_TDS_GETEMPLOYEEIDBASEDONREFERENCEF011  
(        
@BRANCHCODES NVARCHAR(MAX),        
@ISEMPLOYEE BIT        
)        
AS        
BEGIN
	SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')    
	DECLARE @QUERY NVARCHAR(MAX)        
	DECLARE @JION VARCHAR(20);        
	IF @ISEMPLOYEE=1        
		SET @JION='INNER';        
	ELSE        
		SET @JION='LEFT';        
	SET @QUERY = 'SELECT MAX(D.DEDUCTEEID) DEDUCTEEID, ISNULL(D.REFERENCENO,'''') REFERENCENO,
						C.BRANCHCODE, C.BRANCHID, D.PANREFERENCE, D.PAN, D.NAME
				  FROM DEDUCTEE D WITH(NOLOCK) 
						INNER JOIN COMPANYBRANCH C WITH(NOLOCK)        
							ON D.BRANCHID = C.BRANCHID '        
					  + @JION + ' JOIN EMPLOYEE E WITH(NOLOCK) 
							ON E.DEDUCTEEID = D.DEDUCTEEID    
						INNER JOIN #BRANCHES B ON B.DATA = C.BRANCHCODE    
				  WHERE D.REFERENCENO IS NOT NULL 
						AND D.DEDUCTEEID IN 
						(
							SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
							EXCEPT 
							SELECT DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK)
						)
				  GROUP BY D.REFERENCENO, C.BRANCHCODE, C.BRANCHID, D.PANREFERENCE, D.PAN, D.NAME 
				  ORDER BY C.BRANCHCODE '        
	EXEC SP_EXECUTESQL @QUERY    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEmployeeIDBasedonReferenceNo')
DROP PROCEDURE USP_TDS_GetEmployeeIDBasedonReferenceNo
GO
CREATE PROCEDURE [USP_TDS_GetEmployeeIDBasedonReferenceNo]          
(
@REFERENCENOS NVARCHAR(MAX),          
@BRANCHCODES NVARCHAR(MAX),          
@ISEMPLOYEE BIT          
)          
AS          
BEGIN      
 SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')
 SELECT * INTO #REFERENCES FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')      
 DECLARE @QUERY NVARCHAR(MAX)          
 DECLARE @JION VARCHAR(20);          
 IF @ISEMPLOYEE=1          
   SET @JION='INNER';          
  ELSE          
   SET @JION='LEFT';          
 SET @QUERY= 'SELECT MAX(D.DEDUCTEEID) DEDUCTEEID,ISNULL(D.REFERENCENO,'''') REFERENCENO,C.BRANCHCODE,C.BRANCHID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN COMPANYBRANCH C WITH(NOLOCK)          
 ON D.BRANCHID=C.BRANCHID '          
 +@JION+' JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID=D.DEDUCTEEID      
 INNER JOIN #BRANCHES B ON B.DATA = C.BRANCHCODE
 INNER JOIN #REFERENCES R ON R.DATA = D.REFERENCENO      
 WHERE D.REFERENCENO IS NOT NULL AND D.REFERENCENO<>''''          
 GROUP BY D.REFERENCENO, C.BRANCHCODE, C.BRANCHID ORDER BY C.BRANCHCODE '          
EXEC SP_EXECUTESQL @QUERY          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEEMAXPANREFERENCE')
DROP PROCEDURE USP_TDS_GETEMPLOYEEMAXPANREFERENCE
GO
CREATE PROCEDURE [USP_TDS_GETEMPLOYEEMAXPANREFERENCE]  
@BRANCHID NVARCHAR(MAX)
AS  
BEGIN  
 SELECT ISNULL(MAX(PANREFERENCE),'') PANREFERENCE,BRANCHID FROM DEDUCTEE D WITH(NOLOCK)  
 INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID  
 WHERE D.BRANCHID IN (SELECT * FROM  DBO.UDF_TDS_SPLITSTRING(@BRANCHID,',')) AND
 ISNULL(D.PANREFERENCE,'') <> ''
 GROUP BY BRANCHID  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEmployeeOnDeducteeID')
DROP PROCEDURE USP_TDS_GetEmployeeOnDeducteeID
GO
CREATE PROCEDURE USP_TDS_GetEmployeeOnDeducteeID 
 @DeducteeID INT        
AS        
 BEGIN        
  DECLARE @IsDeducteeUsedInCorr TINYINT;        
  SELECT @IsDeducteeUsedInCorr = CASE WHEN COUNT(DEDUCTEESERIALNO) > 0 THEN 1 ELSE 0 END FROM CORREMPLOYEE WHERE DEDUCTEEID = @DeducteeID OR MATCHEDID = @DeducteeID;        
  SELECT D.DEDUCTEEID,E.EMPLOYEEID,D.BRANCHID,D.SALUTATION,D.NAME,D.PAN,D.PANREFERENCE,        
      D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,D.PINCODE,D.REFERENCENO,D.PHONENO,D.EMAILADDRESS,E.DESIGNATION,        
      E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.GENDER,E.ISSENIORCITIZEN,E.SERIALNO,SM.STATENAME,@IsDeducteeUsedInCorr AS ISDEDUCTEEUSEDINCORRECTION,
      ISNULL(PANSTATUS,'') AS PANSTATUS, ISNULL(ACCOUNTNO,'')ACCOUNTNO, ISNULL(PPONUMBER ,'')PPONUMBER, E.DATEOFBIRTH      
  FROM DEDUCTEE D WITH(NOLOCK) 
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID         
  LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON D.STATEID = SM.STATEID         
  WHERE D.DEDUCTEEID = @DeducteeID;        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEmployeePaged')
DROP PROCEDURE USP_TDS_GetEmployeePaged
GO
CREATE PROCEDURE [USP_TDS_GetEmployeePaged] --1,100000,5201,'','',1,''
 @STARTROW INT,              
 @PAGESIZE INT,              
 @BRANCHID INT,              
 @NAME VARCHAR(75),              
 @PAN VARCHAR(10),    
 @EMPTYPE BIT = 0,  
 @REFERENCENO VARCHAR(20)                          
AS              
 BEGIN              
  /* The number of rows affected by the different commands does not interest the application, so turn NOCOUNT ON*/              
  SET NOCOUNT ON              
  /* Determine the first record and last record */              
  DECLARE @FirstRec int, @LastRec int              
  SELECT @FirstRec = (@StartRow - 1) * @PageSize              
  SELECT @LastRec = (@StartRow * @PageSize + 1);              
  DECLARE @QUERY NVARCHAR(MAX)              
  SET @QUERY = 'SELECT RowNum = IDENTITY(INT,1,1),D.DEDUCTEEID,E.EMPLOYEEID,D.BRANCHID,D.SALUTATION,D.NAME,D.PAN,D.PANREFERENCE,              
        D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,D.PINCODE,D.REFERENCENO,D.PHONENO,D.EMAILADDRESS,              
        E.DESIGNATION,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.GENDER,E.ISSENIORCITIZEN,E.SERIALNO,SM.STATENAME, C.DEDUCTEESERIALNO,              
        CASE WHEN EXISTS(SELECT ISNULL(DEDUCTEEID,MATCHEDID) AS DEDUCTEEID FROM CORREMPLOYEE WITH(NOLOCK)
           WHERE BRANCHID = '+CAST(@BRANCHID AS VARCHAR) +' AND CORRECTIONSTATUS = 1) THEN 1   
    ELSE 0 END AS ISDEDUCTEEUSEDINCORRECTION,    
        ISNULL(PANSTATUS,'''') AS PANSTATUS, ISNULL(ACCOUNTNO,'''')ACCOUNTNO, ISNULL(PPONUMBER ,'''')PPONUMBER, E.DATEOFBIRTH  
    INTO #TEMP              
    FROM DEDUCTEE D WITH(NOLOCK)   
    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID               
    INNER JOIN STATEMASTER SM WITH(NOLOCK) ON D.STATEID = SM.STATEID               
    LEFT JOIN CORREMPLOYEE C WITH(NOLOCK) ON D.DEDUCTEEID = C.DEDUCTEEID                
    WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)      
  IF(@NAME <> '')              
   BEGIN     
    SET @QUERY = @QUERY + ' AND D.NAME LIKE ''%' + @NAME + '%''';              
   END              
  IF(@PAN <> '')              
   BEGIN     
     SET @QUERY = @QUERY + ' AND D.PAN LIKE ''%' + @PAN + '%''';              
   END   
  IF(@REFERENCENO <> '')  
  BEGIN  
 SET @QUERY = @QUERY +' AND D.REFERENCENO LIKE ''%' +@REFERENCENO +'%''';  
  END            
  SET @QUERY = @QUERY + ' AND ISNULL(EMPTYPE,0) = ' + CAST(@EMPTYPE AS VARCHAR)    
  SET @QUERY = @QUERY + 'ORDER BY E.SERIALNO' ;      
  SET @QUERY = @QUERY +  ';SELECT * FROM #TEMP WHERE RowNum > ' + CAST(@FirstRec as varchar(10)) + ' AND RowNum < ' + CAST(@LastRec as varchar(10)) + ' ORDER BY NAME';                
  print @QUERY;
  EXEC SP_EXECUTESQL @QUERY;              
  /* Turn NOCOUNT back OFF */              
  SET NOCOUNT OFF              
 END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEESBASEDONPANANDBRANCH')
DROP PROCEDURE USP_TDS_GETEMPLOYEESBASEDONPANANDBRANCH
GO
CREATE PROCEDURE USP_TDS_GETEMPLOYEESBASEDONPANANDBRANCH        
	@BRANCHID NVARCHAR(MAX),      
	@PAN NVARCHAR(MAX)        
AS        
BEGIN        
	SELECT * INTO #TEMPPAN FROM  [DBO].[UDF_TDS_SPLITSTRING](@PAN,',')      
	SELECT * INTO #TEMPBR FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHID,',')
	SELECT E.DEDUCTEEID, D.REFERENCENO  
	FROM DEDUCTEE D  WITH(NOLOCK)      
		INNER JOIN EMPLOYEE E WITH(NOLOCK) 
			ON D.DEDUCTEEID = E.DEDUCTEEID
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) 
			ON D.BRANCHID=C.BRANCHID      
		WHERE ISNULL(D.REFERENCENO,'') = '' AND   D.PAN IN      
		 (      
		   SELECT * FROM  #TEMPPAN     
		 )  AND C.BRANCHID IN    
		 (    
		 SELECT * FROM  #TEMPBR     
		 ) 				          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEESBASEDONREFERENCEANDBRANCH')
DROP PROCEDURE USP_TDS_GETEMPLOYEESBASEDONREFERENCEANDBRANCH
GO
CREATE PROCEDURE USP_TDS_GETEMPLOYEESBASEDONREFERENCEANDBRANCH       
	@BRANCHID NVARCHAR(MAX),      
	@REFERENCENOS NVARCHAR(MAX)        
AS        
BEGIN        
	SELECT * INTO #TEMPREF FROM  [DBO].[UDF_TDS_SPLITSTRING](@REFERENCENOS,',')      
	SELECT * INTO #TEMPBR FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHID,',')
	SELECT E.DEDUCTEEID, E.EMPLOYMENTFROM, E.EMPLOYMENTTO, E.ISSENIORCITIZEN, E.GENDER,  
		D.NAME, D.PAN, D.PANREFERENCE,
		D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.STATEID, E.DESIGNATION,  
		D.PINCODE,D.PHONENO, D.EMAILADDRESS, E.ACCOUNTNO, E.PPONUMBER, E.WORKINGBRANCHID  
	FROM DEDUCTEE D  WITH(NOLOCK)      
		INNER JOIN EMPLOYEE E WITH(NOLOCK) 
			ON D.DEDUCTEEID = E.DEDUCTEEID
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) 
			ON D.BRANCHID=C.BRANCHID      
		WHERE ISNULL(D.REFERENCENO,'')<>'' AND   D.REFERENCENO IN      
		 (      
		   SELECT * FROM  #TEMPREF     
		 )  AND C.BRANCHID IN    
		 (    
		 SELECT * FROM  #TEMPBR     
		 ) 				          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEESCOUNTFORBULKDELETE')
DROP PROCEDURE USP_TDS_GETEMPLOYEESCOUNTFORBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_GETEMPLOYEESCOUNTFORBULKDELETE]
 @BRANCHID INT ,
@LOCKEDQUARTERS VARCHAR(50),
@ISQUARTERLOCKED BIT
AS
 BEGIN
   DECLARE @SQLQUERY NVARCHAR(MAX);
 IF(@ISQUARTERLOCKED = 0)
  BEGIN
           SELECT COUNT(D.DEDUCTEEID)  FROM   EMPLOYEE E WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
      LEFT JOIN
      (
       SELECT DISTINCT DD.DEDUCTEEID
       FROM   PARTPAYMENTDETAILS PPD WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID
       WHERE  PPD.BRANCHID = @BRANCHID AND PPD.FORMID = 1
       ) PPD ON D.DEDUCTEEID = PPD.DEDUCTEEID
          WHERE  D.BRANCHID = @BRANCHID;
  END
 ELSE
  BEGIN
   SET @SQLQUERY ='SELECT COUNT(D.DEDUCTEEID)  AS EMPCOUNT
   INTO #EMPCOUNT
   FROM EMPLOYEE  E WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
    WHERE D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+' AND D.DEDUCTEEID NOT IN
    (
        SELECT DISTINCT DD.DEDUCTEEID  FROM  DEDUCTIONDETAIL DD WITH(NOLOCK)
       LEFT JOIN PARTPAYMENTDETAILS PPD  WITH(NOLOCK) ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID
       WHERE  DD.BRANCHID ='+ CAST(@BRANCHID AS VARCHAR)+ 'AND DD.FORMID = 1 AND DD.QUARTER IN '+ '(' + CAST(@LOCKEDQUARTERS AS VARCHAR) + ')' + '
    )'
    SET @SQLQUERY =@SQLQUERY +' SELECT * FROM #EMPCOUNT'
     EXECUTE SP_EXECUTESQL @SQLQUERY;
  END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEESCOUNTFORFORM16')
DROP PROCEDURE USP_TDS_GETEMPLOYEESCOUNTFORFORM16
GO
CREATE PROCEDURE [USP_TDS_GETEMPLOYEESCOUNTFORFORM16]
 @BRANCHID INT,
 @INCLUDESALARYDETAIL BIT
AS
 BEGIN
  DECLARE @QUERY NVARCHAR(MAX);
  SET @QUERY = 'SELECT COUNT(DISTINCT D.DEDUCTEEID) AS EMPLOYEECOUNT FROM  DEDUCTEE D  WITH(NOLOCK)
            INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
            INNER JOIN FORM16 F WITH(NOLOCK) ON F.DEDUCTEEID = D.DEDUCTEEID
            LEFT JOIN SALARYDETAIL SD  WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID
            LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
              WHERE F.PRINTCERTIFICATENO IS NOT NULL AND D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
  EXEC SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEESFORBULKDELETE')
DROP PROCEDURE USP_TDS_GETEMPLOYEESFORBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_GETEMPLOYEESFORBULKDELETE]
 @PAGEINDEX INT,
 @PAGESIZE INT,
 @BRANCHID INT,
@LOCKEDQUARTERS VARCHAR(50),
@ISQUARTERLOCKED BIT
AS
 BEGIN
  /* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
  SET NOCOUNT ON
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */
  DECLARE @FIRSTREC INT, @LASTREC INT
 DECLARE @SQLQUERY NVARCHAR(MAX);
  SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE;
  SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);
   IF(@ISQUARTERLOCKED = 0)
  BEGIN
   WITH TEMPRESULT AS
     (
         SELECT ROW_NUMBER() OVER(ORDER BY D.DEDUCTEEID) AS ROWNUM,D.DEDUCTEEID,E.EMPLOYEEID,D.BRANCHID,D.SALUTATION,D.NAME,D.PAN,D.PANREFERENCE,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,SM.STATENAME,
       D.PINCODE,D.REFERENCENO,D.PHONENO,D.EMAILADDRESS,E.SERIALNO,E.DESIGNATION,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.GENDER,E.ISSENIORCITIZEN,
       CASE WHEN PPD.DEDUCTEEID IS NULL THEN 0 ELSE 1 END HASPARTPAYMENTDETAIL
      FROM   EMPLOYEE E WITH(NOLOCK)
      INNER JOIN DEDUCTEE D WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
      INNER JOIN STATEMASTER SM WITH(NOLOCK) ON D.STATEID = SM.STATEID
      LEFT JOIN
      (
      SELECT DISTINCT DD.DEDUCTEEID
      FROM   PARTPAYMENTDETAILS PPD WITH(NOLOCK)
      INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID
      WHERE  PPD.BRANCHID = @BRANCHID AND PPD.FORMID = 1) PPD ON D.DEDUCTEEID = PPD.DEDUCTEEID
            WHERE  D.BRANCHID = @BRANCHID
        )
    SELECT TOP (@LASTREC-1) * FROM TEMPRESULT
    WHERE ROWNUM > @FIRSTREC AND ROWNUM < @LASTREC
        END
    ELSE
  BEGIN
   SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER(ORDER BY D.DEDUCTEEID) AS ROWNUM,D.DEDUCTEEID,E.EMPLOYEEID,D.BRANCHID,D.SALUTATION,D.NAME,D.PAN,D.PANREFERENCE,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,SM.STATENAME,
               D.PINCODE,D.REFERENCENO,D.PHONENO,D.EMAILADDRESS,E.SERIALNO,E.DESIGNATION,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.GENDER,E.ISSENIORCITIZEN,
               0 AS HASPARTPAYMENTDETAIL
               INTO #EMP
              FROM   EMPLOYEE E  WITH(NOLOCK)
              INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
              INNER JOIN STATEMASTER SM WITH(NOLOCK) ON D.STATEID = SM.STATEID
              WHERE D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+' AND
              D.DEDUCTEEID  NOT IN
             (
              SELECT DISTINCT DD.DEDUCTEEID  FROM  DEDUCTIONDETAIL DD WITH(NOLOCK)
              LEFT JOIN PARTPAYMENTDETAILS PPD WITH(NOLOCK) ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID
              WHERE  DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID = 1 AND DD.QUARTER IN '+ '(' + CAST(@LOCKEDQUARTERS AS VARCHAR) + ')'+'
             )'
  SET @SQLQUERY = @SQLQUERY + 'SELECT  TOP('+CAST(@LASTREC AS VARCHAR)+' - 1) * FROM #EMP WHERE ROWNUM > '+ CAST(@FIRSTREC AS VARCHAR)+' AND ROWNUM< '+ CAST(@LASTREC AS VARCHAR)
         EXECUTE SP_EXECUTESQL @SQLQUERY;
  END
  /* TURN NOCOUNT BACK OFF */
  SET NOCOUNT OFF
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEESFORFORM16')
DROP PROCEDURE USP_TDS_GETEMPLOYEESFORFORM16
GO
--[USP_TDS_GETEMPLOYEESFORFORM16] 1,10,41,1,1
CREATE PROCEDURE [USP_TDS_GETEMPLOYEESFORFORM16]        
 @STARTROW INT,        
 @PAGESIZE INT,        
 @BRANCHID INT,        
 @INCLUDESALARYDETAIL BIT,
 @ISSB BIT      
AS        
 BEGIN          
  DECLARE @FIRSTREC INT, @LASTREC INT;        
  DECLARE @QUERY NVARCHAR(MAX);        
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE;        
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);          
  SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),*       
            INTO #EMPLOYEES        
          FROM        
         (        
      SELECT DISTINCT D.BRANCHID AS DEDUCTEEBRANCHID,D.DEDUCTEEID,E.SERIALNO AS EMPSERIALNO,D.NAME AS DEDUCTEENAME,D.PAN AS DEDUCTEEPAN        
                FROM FORM16 F16 WITH(NOLOCK)       
                INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = F16.DEDUCTEEID      
                INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID      
                LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID      
                LEFT JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.DEDUCTEEID = D.DEDUCTEEID'            
  SET @QUERY = @QUERY + ' WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND LEN(ISNULL(F16.PRINTCERTIFICATENO,'''')) > 0'            
 IF(@ISSB = 1)
	 SET @QUERY = @QUERY + ' AND D.EMPTYPE = 1 '
  SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #EMPLOYEES WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);        
  --PRINT @QUERY;        
 EXEC SP_EXECUTESQL @QUERY;        
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEESFORUPDATE')
DROP PROCEDURE USP_TDS_GETEMPLOYEESFORUPDATE
GO
CREATE PROCEDURE [USP_TDS_GETEMPLOYEESFORUPDATE]   
@BRANCHCODES NVARCHAR(MAX),  
@REFNOS NVARCHAR(MAX)  
AS
 BEGIN  
	 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED  
	 SET NOCOUNT ON
	 SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING( @BRANCHCODES ,',')
	 SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFNOS,',')
	 SELECT C.BRANCHID,C.BRANCHCODE, D.NAME,D.REFERENCENO,E.GENDER,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.DESIGNATION, D.DEDUCTEEID FROM DEDUCTEE D 
	 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID   
	 INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID= D.BRANCHID  
	 INNER JOIN #BRANCHES B ON B.DATA = C.BRANCHCODE 
	 INNER JOIN #REFNO R ON R.DATA = D.REFERENCENO
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPLOYEETRANSFERDATA')
DROP PROCEDURE USP_TDS_GETEMPLOYEETRANSFERDATA
GO
CREATE PROCEDURE  USP_TDS_GETEMPLOYEETRANSFERDATA    
@REFERENCENOS NVARCHAR(MAX)    
AS
BEGIN  
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON
	SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')      
	SELECT EE.EMPLOYEEID, D.BRANCHID,C.BRANCHCODE, EE.REFERENCENO    
	FROM DEDUCTEE D    
	INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID    
	INNER JOIN COMPANYBRANCH C    
	ON C.BRANCHID=D.BRANCHID    
	INNER JOIN    
	(    
	 SELECT D.REFERENCENO, MAX(E.EMPLOYEEID)EMPLOYEEID--, D.BRANCHID    
	 FROM DEDUCTEE D WITH(NOLOCK) 
	 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
	 INNER JOIN #REFNO R ON R.DATA = D.REFERENCENO    
	 GROUP BY D.REFERENCENO  
	 HAVING COUNT(EMPLOYEEID) >  1     
	)EE ON E.EMPLOYEEID = EE.EMPLOYEEID
	INNER JOIN #REFNO R ON R.DATA = D.REFERENCENO 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPMAXSRNO')
DROP PROCEDURE USP_TDS_GETEMPMAXSRNO
GO
--[USP_TDS_GETEMPMAXSRNO] '6164'
CREATE PROCEDURE [USP_TDS_GETEMPMAXSRNO] 
(      
@BRANCHCODES NVARCHAR(MAX)      
)      
AS      
BEGIN      
 DECLARE @TEMP TABLE(BRANCHID INT,BRANCHCODE NVARCHAR(MAX))
 SET NOCOUNT ON 
 SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING( @BRANCHCODES ,',')      
 INSERT INTO @TEMP      
 SELECT BRANCHID,BRANCHCODE FROM COMPANYBRANCH C WITH(NOLOCK)
 INNER JOIN #BRANCHES B ON B.DATA=C.BRANCHCODE       
 DECLARE @T TABLE(BRANCHID INT,SERIALNO INT)      
 INSERT INTO  @T      
 SELECT D.BRANCHID,MAX(E.SERIALNO) SERIALNO FROM DEDUCTEE D WITH(NOLOCK) 
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID=E.DEDUCTEEID      
  INNER JOIN @TEMP TT  ON D.BRANCHID=TT.BRANCHID      
  GROUP BY D.BRANCHID      
  UNION ALL 
 SELECT TE.BRANCHID,0 AS SERIALNO FROM @TEMP TE      
 INNER JOIN
 (
	SELECT T.BRANCHID FROM @TEMP T 
	EXCEPT
	SELECT T.BRANCHID FROM DEDUCTEE T 
	INNER JOIN EMPLOYEE E WITH(NOLOCK) ON T.DEDUCTEEID=E.DEDUCTEEID      
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID= T.BRANCHID
    INNER JOIN #BRANCHES B ON B.DATA=CB.BRANCHCODE       	
 )T
 ON TE.BRANCHID=T.BRANCHID  
SELECT T.SERIALNO, CB.BRANCHCODE FROM @T T
INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON T.BRANCHID = CB.BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPMAXSRNOBASEDONBRANCHID')
DROP PROCEDURE USP_TDS_GETEMPMAXSRNOBASEDONBRANCHID
GO
CREATE PROCEDURE USP_TDS_GETEMPMAXSRNOBASEDONBRANCHID
(        
@BRANCHID NVARCHAR(MAX)        
)        
AS        
	BEGIN
		SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID,',')
		SELECT BRANCHID,BRANCHCODE, 0 AS SERIALNO INTO #COMPANY FROM COMPANYBRANCH 
		INNER JOIN #BRANCHES B ON B.DATA = BRANCHID
		SELECT MAX(SERIALNO)SERIALNO , BRANCHCODE FROM
		(
			SELECT C.BRANCHCODE,MAX(NE.SERIALNO) SERIALNO FROM DEDUCTEE D WITH(NOLOCK) 
			INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID        
			INNER JOIN #COMPANY  C ON C.BRANCHID = D.BRANCHID
			GROUP BY C.BRANCHCODE  
			UNION ALL
			SELECT BRANCHCODE, SERIALNO FROM #COMPANY
		)D
		GROUP BY BRANCHCODE     
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPSNOS')
DROP PROCEDURE USP_TDS_GETEMPSNOS
GO
CREATE PROCEDURE [USP_TDS_GETEMPSNOS]
@BRANCHID VARCHAR(MAX)
AS
 BEGIN
  DECLARE @SQLQUERY NVARCHAR(MAX);
     SET @SQLQUERY = 'SELECT MAX(CD.SERIALNO) AS SERIALNO, CD.BRANCHID
              FROM
              (
                SELECT MAX(E.SERIALNO)  AS SERIALNO, D.BRANCHID FROM EMPLOYEE E WITH(NOLOCK)
                  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
                  WHERE BRANCHID IN (' + CAST (@BRANCHID AS VARCHAR) + ')
                  GROUP BY D.BRANCHID, D.REFERENCENO
                UNION
                SELECT 0 AS SERIALNO, BRANCHID FROM COMPANYBRANCH WITH(NOLOCK)
                  WHERE BRANCHID IN (' + CAST (@BRANCHID AS VARCHAR) + ')
              )CD
              GROUP BY BRANCHID'
 EXEC SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEMPWORKMONTHS')
DROP PROCEDURE USP_TDS_GETEMPWORKMONTHS
GO
CREATE PROCEDURE [USP_TDS_GETEMPWORKMONTHS] 
@COMID INT,
@BRANCHID INT,
@ISTRANSFERRED BIT OUTPUT
AS
  BEGIN
	IF ((SELECT DISTINCT E.ISTRANSFERED FROM LINKTOTC LC 
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON LC.COMID = EM.COMID AND LC.BRANCHID = EM.BRANCHID
	INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID 
	WHERE LC.COMID = @COMID AND LC.BRANCHID = @BRANCHID) > 0)
	 BEGIN
		SET @ISTRANSFERRED = 1 
		SELECT DISTINCT EM.MONTHID FROM LINKTOTC LC 
		INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON LC.COMID = EM.COMID AND LC.BRANCHID = EM.BRANCHID
		INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID 
		WHERE LC.COMID = @COMID AND LC.BRANCHID = @BRANCHID
	 END 
	ELSE
	 BEGIN
		SET @ISTRANSFERRED = 0 
		SELECT DISTINCT EM.MONTHID FROM LINKTOTC LC 
		INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON LC.COMID = EM.COMID AND LC.BRANCHID = EM.BRANCHID
		INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID 
		WHERE LC.COMID = @COMID AND LC.BRANCHID <> @BRANCHID
    END
   SELECT  @ISTRANSFERRED
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNANNEXUREBRANCHES')
DROP PROCEDURE USP_TDS_GETERETURNANNEXUREBRANCHES
GO
CREATE PROCEDURE [USP_TDS_GETERETURNANNEXUREBRANCHES]
	@USERID INT = NULL
AS
BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX);
	DECLARE @ISBRANCHADMIN BIT;
	SET @SQLQUERY = 'SELECT CB.BRANCHNAME + ''('' + CB.BRANCHCODE + '')'' AS BRANCHNAME,A.BRANCHID
					 FROM ACKNO A INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON A.FORMID = FD.FORMID
								  LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON A.BRANCHID = CB.BRANCHID';
	IF(@USERID<>-1)
		BEGIN
			SELECT @ISBRANCHADMIN = ISBRANCHADMIN FROM USERMASTER WITH(NOLOCK) WHERE USERID = @USERID;
			IF(@ISBRANCHADMIN = 1)
				BEGIN
					SET @SQLQUERY = @SQLQUERY + ' WHERE CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID =(SELECT BRANCHID FROM USERMASTER WHERE USERID ='+CAST(@USERID AS VARCHAR)+')) AS VARCHAR)+''%'' ORDER BY A.[QUARTER]'
				END
			ELSE
				BEGIN
					SET @SQLQUERY=@SQLQUERY+' LEFT JOIN USERMASTER UM WITH(NOLOCK) ON A.BRANCHID=UM.BRANCHID WHERE UM.USERID='+CAST(@USERID AS VARCHAR)+' ORDER BY A.[QUARTER]';
				END
		END
	ELSE
		BEGIN
			SET @SQLQUERY = @SQLQUERY + ' ORDER BY A.[QUARTER],CB.PARENTBASEID';
		END
		EXEC SP_EXECUTESQL @SQLQUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnAnnexureDetails')
DROP PROCEDURE USP_TDS_GetEReturnAnnexureDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetEReturnAnnexureDetails]
    @USERID INT,
    @SHOW15GH BIT = 0
AS  
    BEGIN 
	   DECLARE @ISSUPERADMIN BIT;
	   DECLARE @ISBRANCHADMIN BIT;
	   SELECT @ISSUPERADMIN = ISSUPERADMIN 
	   FROM USERMASTER WITH(NOLOCK) 
	   WHERE USERID = @USERID
	   IF(@ISSUPERADMIN = 1)
		  BEGIN
			 SET @USERID=1
		  END 
	   -- Preparing the Branch, Form, Quarter for all branches
	   SELECT BRANCHID, 1 AS FORMID, 1 AS QUARTER INTO #BFQ FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 1 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 1 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 1 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 2 AS FORMID, 1 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 2 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 2 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 2 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 3 AS FORMID, 1 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 3 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 3 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 3 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 4 AS FORMID, 1 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 4 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 4 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 4 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 5 AS FORMID, 1 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 5 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 5 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 5 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 6 AS FORMID, 1 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 6 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 6 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   UNION SELECT BRANCHID, 6 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   -- Getting Deduction record count based on Branch, Form and Quarter
	   SELECT BRANCHID, FORMID, QUARTER, COUNT(DEDUCTIONID) DCNT 
	   INTO #DREC
	   FROM DEDUCTIONDETAIL WITH(NOLOCK)
	   GROUP BY BRANCHID, FORMID, QUARTER
	   -- Picking up where Deduction record count is zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(D.DCNT, 0) DEDCNT
	   INTO #DEDZERO
	   FROM #BFQ CB 
		  LEFT JOIN #DREC D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID AND CB.FORMID = D.FORMID AND CB.QUARTER = D.QUARTER
	   WHERE ISNULL(D.DCNT, 0) = 0
	   -- Picking up where Deduction record count is greater than zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(D.DCNT, 0) DEDCNT
	   INTO #DEDAVAIL
	   FROM #BFQ CB 
		  LEFT JOIN #DREC D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID AND CB.FORMID = D.FORMID AND CB.QUARTER = D.QUARTER
	   WHERE ISNULL(D.DCNT, 0) > 0
	   ---Region Form 15GH
	   -- Getting 15G BASIC record count based on Branch, Quarter
	    SELECT BRANCHID, 5 AS FORMID, QUARTER, COUNT(DETAILID) GCNT 
	    INTO #15GREC
	    FROM FORM15GBASIC WITH(NOLOCK)
	    GROUP BY BRANCHID, QUARTER
	     -- Getting 15H BASIC record count based on Branch, Quarter
	    SELECT BRANCHID, 6 AS FORMID, QUARTER, COUNT(DETAILID) HCNT 
	    INTO #15HREC
	    FROM FORM15HBASIC WITH(NOLOCK)
	    GROUP BY BRANCHID, QUARTER
	      -- Picking up where 15GBASIC record count is greater than zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(G.GCNT, 0) GCNT
	   INTO #15GAVAIL
	   FROM #BFQ CB 
		  LEFT JOIN #15GREC G WITH(NOLOCK) ON CB.BRANCHID = G.BRANCHID AND CB.FORMID = G.FORMID AND CB.QUARTER = G.QUARTER
	   WHERE ISNULL(G.GCNT, 0) > 0
	   -- Picking up where 15HBASIC record count is greater than zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(H.HCNT, 0) HCNT
	   INTO #15HAVAIL
	   FROM #BFQ CB 
		  LEFT JOIN #15HREC H WITH(NOLOCK) ON CB.BRANCHID = H.BRANCHID AND CB.FORMID = H.FORMID AND CB.QUARTER = H.QUARTER
	   WHERE ISNULL(H.HCNT, 0) > 0
	   -- Picking up where 15GBASIC record count is zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(G.GCNT, 0) GCNT
	   INTO #15GZERO
	   FROM #BFQ CB 
		  LEFT JOIN #15GREC G WITH(NOLOCK) ON CB.BRANCHID = G.BRANCHID AND CB.FORMID = G.FORMID AND CB.QUARTER = G.QUARTER
	   WHERE ISNULL(G.GCNT, 0) = 0
	   -- Picking up where 15HBASIC record count is zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(H.HCNT, 0) HCNT
	   INTO #15HZERO
	   FROM #BFQ CB 
		  LEFT JOIN #15HREC H WITH(NOLOCK) ON CB.BRANCHID = H.BRANCHID AND CB.FORMID = H.FORMID AND CB.QUARTER = H.QUARTER
	   WHERE ISNULL(H.HCNT, 0) = 0
	   ---End Region Form15GH
	   -- Getting Challan record count based on Branch, Form and Quarter
	   SELECT BRANCHID, FORMID, QUARTER, COUNT(CHALLANID) CCNT 
	   INTO #CREC
	   FROM CHALLANDETAIL WITH(NOLOCK)
	   GROUP BY BRANCHID, FORMID, QUARTER
	   -- Picking up where Challan record count is greater than zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(D.CCNT, 0) CHACNT
	   INTO #CHAAVAIL
	   FROM #BFQ CB 
		  LEFT JOIN #CREC D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID AND CB.FORMID = D.FORMID AND CB.QUARTER = D.QUARTER
	   WHERE ISNULL(D.CCNT, 0) > 0
	   -- Picking up where Challan record count is greater than zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(D.CCNT, 0) CHACNT
	   INTO #CHAZERO
	   FROM #BFQ CB 
		  LEFT JOIN #CREC D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID AND CB.FORMID = D.FORMID AND CB.QUARTER = D.QUARTER
	   WHERE ISNULL(D.CCNT, 0) = 0
	   --SELECT * FROM #DEDAVAIL
	   --SELECT * FROM #CHAAVAIL
	   CREATE TABLE #BRANCHSELECTED (BRANCHID INT)
	   DECLARE @QRYUSR NVARCHAR(MAX)
	   SET @QRYUSR = 'SELECT CB.BRANCHID FROM COMPANYBRANCH CB WITH(NOLOCK)'
	   IF (@USERID <> 1)
		  BEGIN  
			 SELECT @ISBRANCHADMIN = ISBRANCHADMIN FROM USERMASTER WHERE USERID = @USERID;  
			 IF (@ISBRANCHADMIN = 1)  
				BEGIN  
				    SET @QRYUSR = @QRYUSR + ' WHERE CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = (SELECT BRANCHID FROM USERMASTER WITH(NOLOCK) WHERE USERID = ' + CAST(@USERID AS VARCHAR) + ')) AS VARCHAR) + ''%''';  				END  
			 ELSE  
				BEGIN  
				    SET @QRYUSR = @QRYUSR + ' LEFT JOIN USERMASTER UM WITH(NOLOCK) ON CB.BRANCHID = UM.BRANCHID WHERE UM.USERID = ' + CAST(@USERID AS VARCHAR);  
				END  
		  END  
	   ELSE  
		  BEGIN  
			 SET @QRYUSR = @QRYUSR + ' WHERE CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = (SELECT BRANCHID FROM USERMASTER WITH(NOLOCK) WHERE USERID = 1)) AS VARCHAR) + ''%'' ';  
		  END  
	   INSERT INTO #BRANCHSELECTED
	   EXEC SP_EXECUTESQL @QRYUSR
	   -- Selecting where valid return is generated and acknowledgement number is entered
	   SELECT BRANCHID, FORMID, QUARTER, ISVALID, ORGNUM, 15 FILENUM 
	   INTO #BFQGENFILED
	   FROM ACKNO 
	   WHERE ISVALID = 1 AND LEN(ISNULL(ORGNUM, '')) = 15
		  AND BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	   -- Selecting where valid return is generated but acknowledgement number is NOT entered
	   SELECT BRANCHID, FORMID, QUARTER, ISVALID, ORGNUM, 0 FILENUM 
	   INTO #BFQGENFILEDNOT
	   FROM ACKNO 
	   WHERE ISVALID = 1 AND LEN(ISNULL(ORGNUM, '')) <> 15
		  AND BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
		---Region Form 15GH
	   -- Selecting where valid 15G return is generated and acknowledgement number is entered
	   SELECT BRANCHID, 5 AS FORMID, QUARTER, ISVALID, ORGNUM, 15 FILENUM 
	   INTO #15GBFQGENFILED
	   FROM ACKNO15GH 
	   WHERE ISVALID = 1 AND FORMID = 1 AND LEN(ISNULL(ORGNUM, '')) = 15
		  AND BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	   -- Selecting where valid 15H return is generated and acknowledgement number is entered
	   SELECT BRANCHID, 6 AS FORMID, QUARTER, ISVALID, ORGNUM, 15 FILENUM 
	   INTO #15HBFQGENFILED
	   FROM ACKNO15GH 
	   WHERE ISVALID = 1 AND FORMID = 2 AND LEN(ISNULL(ORGNUM, '')) = 15
		  AND BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	   -- Selecting where valid 15G return is generated but acknowledgement number is NOT entered
	   SELECT BRANCHID, 5 AS FORMID , QUARTER, ISVALID, ORGNUM, 0 FILENUM 
	   INTO #15GBFQGENFILEDNOT
	   FROM ACKNO15GH 
	   WHERE ISVALID = 1 AND FORMID = 1 AND LEN(ISNULL(ORGNUM, '')) <> 15
		  AND BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	   -- Selecting where valid 15H return is generated but acknowledgement number is NOT entered
	   SELECT BRANCHID, 6 AS FORMID , QUARTER, ISVALID, ORGNUM, 0 FILENUM 
	   INTO #15HBFQGENFILEDNOT
	   FROM ACKNO15GH 
	   WHERE ISVALID = 1 AND FORMID = 2 AND LEN(ISNULL(ORGNUM, '')) <> 15
		  AND BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	    ---End Region Form15GH
	   -- Combining Branch, Form and Quarter where records are available
	   SELECT BRANCHID, FORMID, QUARTER 
	   INTO #DEDCHAAVAIL 
	   FROM #DEDAVAIL
	   WHERE BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	   UNION SELECT BRANCHID, FORMID, QUARTER 
	   FROM #CHAAVAIL
	   WHERE BRANCHID IN 
				(
				SELECT BRANCHID FROM #BRANCHSELECTED
				)
	   -- Combining Branch, Form and Quarter where records are not available
	   SELECT BRANCHID, FORMID, QUARTER 
	   INTO #EXCEPTBFQ 
	   FROM #DEDZERO 
	   WHERE BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	   UNION 
	   SELECT BRANCHID, FORMID, QUARTER 
	   FROM #CHAZERO 
	   WHERE BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	   EXCEPT 
	   SELECT BRANCHID, FORMID, QUARTER 
	   FROM #DEDAVAIL
	   WHERE BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	   -- Fetching from combined data where branch, form and quarter is not having eReturn generated.
	   -- This relates to branches where data is present but no eReturns done.
		SELECT BRANCHID, FORMID, QUARTER 
		INTO #BFQNOTGEN
		FROM #DEDCHAAVAIL 
		EXCEPT 
		SELECT BRANCHID, FORMID, QUARTER 
		FROM #EXCEPTBFQ
		UNION 
		SELECT BRANCHID, FORMID, QUARTER 
		FROM #BFQGENFILED
		UNION 
		SELECT BRANCHID, FORMID, QUARTER 
		FROM #BFQGENFILEDNOT
	   ---Region Form 15GH
	    SELECT BRANCHID, FORMID, QUARTER INTO #EXCEPT15GBFQ FROM #15GZERO WHERE BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	    SELECT BRANCHID, FORMID, QUARTER INTO #EXCEPT15HBFQ FROM #15HZERO WHERE BRANCHID IN (SELECT BRANCHID FROM #BRANCHSELECTED)
	   ---This relates to branches where data is present but no 15G eReturns done.
	   SELECT BRANCHID, FORMID, QUARTER 
	   INTO #15GBFQNOTGEN
	   FROM #15GAVAIL 
	   INTERSECT SELECT BRANCHID, FORMID, QUARTER FROM #EXCEPT15GBFQ
	   EXCEPT 
	      SELECT BRANCHID, FORMID, QUARTER FROM #15GBFQGENFILED
		  UNION SELECT BRANCHID, FORMID, QUARTER FROM #15GBFQGENFILEDNOT
	   SELECT BRANCHID, FORMID, QUARTER 
	   INTO #15HBFQNOTGEN
	   FROM #15HAVAIL
	   INTERSECT SELECT BRANCHID, FORMID, QUARTER FROM #EXCEPT15HBFQ 
	   EXCEPT 
	      SELECT BRANCHID, FORMID, QUARTER FROM #15HBFQGENFILED
		  UNION SELECT BRANCHID, FORMID, QUARTER FROM #15HBFQGENFILEDNOT
	   ---End Region Form15GH
	   -- ##############  QUARTER 1  ##############
	   -- FTQ1BRANCHESCOUNT
	   DECLARE @FT1Q1BRANCHESCOUNT INT;
	   SELECT @FT1Q1BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 1 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 1 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 1 AND QUARTER = 1
	   )F1Q1
	   DECLARE @FT2Q1BRANCHESCOUNT INT;
	   SELECT @FT2Q1BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 2 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 2 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 2 AND QUARTER = 1
	   )F2Q1
	   DECLARE @FT3Q1BRANCHESCOUNT INT;
	   SELECT @FT3Q1BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 3 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 3 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 3 AND QUARTER = 1
	   )F3Q1
	   DECLARE @FT4Q1BRANCHESCOUNT INT;
	   SELECT @FT4Q1BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 4 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 4 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 4 AND QUARTER = 1
	   )F4Q1
	   DECLARE @FT5Q1BRANCHESCOUNT INT;
	   SELECT @FT5Q1BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #15GBFQGENFILED WHERE FORMID = 5 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #15GBFQGENFILEDNOT WHERE FORMID = 5 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #15GBFQNOTGEN WHERE FORMID = 5 AND QUARTER = 1
	   )F5Q1
	   DECLARE @FT6Q1BRANCHESCOUNT INT;
	   SELECT @FT6Q1BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #15HBFQGENFILED WHERE FORMID = 6 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #15HBFQGENFILEDNOT WHERE FORMID = 6 AND QUARTER = 1
		  UNION SELECT BRANCHID FROM #15HBFQNOTGEN WHERE FORMID = 6 AND QUARTER = 1
	   )F6Q1
	   -- FTQ1FCOUNT
	   DECLARE @FT1Q1FCOUNT INT;
	   SELECT @FT1Q1FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 1 AND QUARTER = 1
	   DECLARE @FT2Q1FCOUNT INT;
	   SELECT @FT2Q1FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 2 AND QUARTER = 1
	   DECLARE @FT3Q1FCOUNT INT;
	   SELECT @FT3Q1FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 3 AND QUARTER = 1
	   DECLARE @FT4Q1FCOUNT INT;
	   SELECT @FT4Q1FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 4 AND QUARTER = 1
	   DECLARE @FT5Q1FCOUNT INT;
	   SELECT @FT5Q1FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQGENFILED WHERE FORMID = 5 AND QUARTER = 1
	   DECLARE @FT6Q1FCOUNT INT;
	   SELECT @FT6Q1FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQGENFILED WHERE FORMID = 6 AND QUARTER = 1
	   -- FTQ1NFCOUNT
	   DECLARE @FT1Q1NFCOUNT INT;
	   SELECT @FT1Q1NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 1 AND QUARTER = 1
	   DECLARE @FT2Q1NFCOUNT INT;
	   SELECT @FT2Q1NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 2 AND QUARTER = 1
	   DECLARE @FT3Q1NFCOUNT INT;
	   SELECT @FT3Q1NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 3 AND QUARTER = 1
	   DECLARE @FT4Q1NFCOUNT INT;
	   SELECT @FT4Q1NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 4 AND QUARTER = 1
	   DECLARE @FT5Q1NFCOUNT INT;
	   SELECT @FT5Q1NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQGENFILEDNOT WHERE FORMID = 5 AND QUARTER = 1
	   DECLARE @FT6Q1NFCOUNT INT;
	   SELECT @FT6Q1NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQGENFILEDNOT WHERE FORMID = 6 AND QUARTER = 1
	   -- FTQ1NGCOUNT
	   DECLARE @FT1Q1NGCOUNT INT;
	   SELECT @FT1Q1NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 1 AND QUARTER = 1
	   DECLARE @FT2Q1NGCOUNT INT;
	   SELECT @FT2Q1NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 2 AND QUARTER = 1
	   DECLARE @FT3Q1NGCOUNT INT;
	   SELECT @FT3Q1NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 3 AND QUARTER = 1
	   DECLARE @FT4Q1NGCOUNT INT;
	   SELECT @FT4Q1NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 4 AND QUARTER = 1
	   DECLARE @FT5Q1NGCOUNT INT;
	   SELECT @FT5Q1NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQNOTGEN WHERE FORMID = 5 AND QUARTER = 1
	   DECLARE @FT6Q1NGCOUNT INT;
	   SELECT @FT6Q1NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQNOTGEN WHERE FORMID = 6 AND QUARTER = 1
	   -- ##############  END OF QUARTER 1  ##############
	   -- ##############  QUARTER 2  ##############
	   -- FTQ2BRANCHESCOUNT
	   DECLARE @FT1Q2BRANCHESCOUNT INT;
	   SELECT @FT1Q2BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 1 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 1 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 1 AND QUARTER = 2
	   )F1Q2
	   DECLARE @FT2Q2BRANCHESCOUNT INT;
	   SELECT @FT2Q2BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 2 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 2 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 2 AND QUARTER = 2
	   )F2Q2
	   DECLARE @FT3Q2BRANCHESCOUNT INT;
	   SELECT @FT3Q2BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 3 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 3 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 3 AND QUARTER = 2
	   )F3Q2
	   DECLARE @FT4Q2BRANCHESCOUNT INT;
	   SELECT @FT4Q2BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 4 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 4 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 4 AND QUARTER = 2
	   )F4Q2
	   DECLARE @FT5Q2BRANCHESCOUNT INT;
	   SELECT @FT5Q2BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #15GBFQGENFILED WHERE FORMID = 5 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #15GBFQGENFILEDNOT WHERE FORMID = 5 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #15GBFQNOTGEN WHERE FORMID = 5 AND QUARTER = 2
	   )F5Q2
	   DECLARE @FT6Q2BRANCHESCOUNT INT;
	   SELECT @FT6Q2BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #15HBFQGENFILED WHERE FORMID = 6 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #15HBFQGENFILEDNOT WHERE FORMID = 6 AND QUARTER = 2
		  UNION SELECT BRANCHID FROM #15HBFQNOTGEN WHERE FORMID = 6 AND QUARTER = 2
	   )F6Q2
	   -- FTQ2FCOUNT
	   DECLARE @FT1Q2FCOUNT INT;
	   SELECT @FT1Q2FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 1 AND QUARTER = 2
	   DECLARE @FT2Q2FCOUNT INT;
	   SELECT @FT2Q2FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 2 AND QUARTER = 2
	   DECLARE @FT3Q2FCOUNT INT;
	   SELECT @FT3Q2FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 3 AND QUARTER = 2
	   DECLARE @FT4Q2FCOUNT INT;
	   SELECT @FT4Q2FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 4 AND QUARTER = 2
	   DECLARE @FT5Q2FCOUNT INT;
	   SELECT @FT5Q2FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQGENFILED WHERE FORMID = 5 AND QUARTER = 2
	   DECLARE @FT6Q2FCOUNT INT;
	   SELECT @FT6Q2FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQGENFILED WHERE FORMID = 6 AND QUARTER = 2
	   -- FTQ2NFCOUNT
	   DECLARE @FT1Q2NFCOUNT INT;
	   SELECT @FT1Q2NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 1 AND QUARTER = 2
	   DECLARE @FT2Q2NFCOUNT INT;
	   SELECT @FT2Q2NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 2 AND QUARTER = 2
	   DECLARE @FT3Q2NFCOUNT INT;
	   SELECT @FT3Q2NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 3 AND QUARTER = 2
	   DECLARE @FT4Q2NFCOUNT INT;
	   SELECT @FT4Q2NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 4 AND QUARTER = 2
	   DECLARE @FT5Q2NFCOUNT INT;
	   SELECT @FT5Q2NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQGENFILEDNOT WHERE FORMID = 5 AND QUARTER = 2
	   DECLARE @FT6Q2NFCOUNT INT;
	   SELECT @FT6Q2NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQGENFILEDNOT WHERE FORMID = 6 AND QUARTER = 2
	   -- FTQ2NGCOUNT
	   DECLARE @FT1Q2NGCOUNT INT;
	   SELECT @FT1Q2NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 1 AND QUARTER = 2
	   DECLARE @FT2Q2NGCOUNT INT;
	   SELECT @FT2Q2NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 2 AND QUARTER = 2
	   DECLARE @FT3Q2NGCOUNT INT;
	   SELECT @FT3Q2NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 3 AND QUARTER = 2
	   DECLARE @FT4Q2NGCOUNT INT;
	   SELECT @FT4Q2NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 4 AND QUARTER = 2
	   DECLARE @FT5Q2NGCOUNT INT;
	   SELECT @FT5Q2NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQNOTGEN WHERE FORMID = 5 AND QUARTER = 2
	   DECLARE @FT6Q2NGCOUNT INT;
	   SELECT @FT6Q2NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQNOTGEN WHERE FORMID = 6 AND QUARTER = 2
	   -- ##############  END OF QUARTER 2  ##############
	   -- ##############  QUARTER 3  ##############
	   -- FTQ3BRANCHESCOUNT
	   DECLARE @FT1Q3BRANCHESCOUNT INT;
	   SELECT @FT1Q3BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 1 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 1 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 1 AND QUARTER = 3
	   )F1Q3
	   DECLARE @FT2Q3BRANCHESCOUNT INT;
	   SELECT @FT2Q3BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 2 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 2 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 2 AND QUARTER = 3
	   )F2Q3
	   DECLARE @FT3Q3BRANCHESCOUNT INT;
	   SELECT @FT3Q3BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 3 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 3 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 3 AND QUARTER = 3
	   )F3Q3
	   DECLARE @FT4Q3BRANCHESCOUNT INT;
	   SELECT @FT4Q3BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 4 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 4 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 4 AND QUARTER = 3
	   )F4Q3
	   DECLARE @FT5Q3BRANCHESCOUNT INT;
	   SELECT @FT5Q3BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #15GBFQGENFILED WHERE FORMID = 5 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #15GBFQGENFILEDNOT WHERE FORMID = 5 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #15GBFQNOTGEN WHERE FORMID = 5 AND QUARTER = 3
	   )F5Q3
	   DECLARE @FT6Q3BRANCHESCOUNT INT;
	   SELECT @FT6Q3BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #15HBFQGENFILED WHERE FORMID = 6 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #15HBFQGENFILEDNOT WHERE FORMID = 6 AND QUARTER = 3
		  UNION SELECT BRANCHID FROM #15HBFQNOTGEN WHERE FORMID = 6 AND QUARTER = 3
	   )F6Q3
	   -- FTQ3FCOUNT
	   DECLARE @FT1Q3FCOUNT INT;
	   SELECT @FT1Q3FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 1 AND QUARTER = 3
	   DECLARE @FT2Q3FCOUNT INT;
	   SELECT @FT2Q3FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 2 AND QUARTER = 3
	   DECLARE @FT3Q3FCOUNT INT;
	   SELECT @FT3Q3FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 3 AND QUARTER = 3
	   DECLARE @FT4Q3FCOUNT INT;
	   SELECT @FT4Q3FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 4 AND QUARTER = 3
	   DECLARE @FT5Q3FCOUNT INT;
	   SELECT @FT5Q3FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQGENFILED WHERE FORMID = 5 AND QUARTER = 3
	   DECLARE @FT6Q3FCOUNT INT;
	   SELECT @FT6Q3FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQGENFILED WHERE FORMID = 6 AND QUARTER = 3
	   -- FTQ3NFCOUNT
	   DECLARE @FT1Q3NFCOUNT INT;
	   SELECT @FT1Q3NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 1 AND QUARTER = 3
	   DECLARE @FT2Q3NFCOUNT INT;
	   SELECT @FT2Q3NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 2 AND QUARTER = 3
	   DECLARE @FT3Q3NFCOUNT INT;
	   SELECT @FT3Q3NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 3 AND QUARTER = 3
	   DECLARE @FT4Q3NFCOUNT INT;
	   SELECT @FT4Q3NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 4 AND QUARTER = 3
	   DECLARE @FT5Q3NFCOUNT INT;
	   SELECT @FT5Q3NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQGENFILEDNOT WHERE FORMID = 5 AND QUARTER = 3
	   DECLARE @FT6Q3NFCOUNT INT;
	   SELECT @FT6Q3NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQGENFILEDNOT WHERE FORMID = 6 AND QUARTER = 3
	   -- FTQ3NGCOUNT
	   DECLARE @FT1Q3NGCOUNT INT;
	   SELECT @FT1Q3NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 1 AND QUARTER = 3
	   DECLARE @FT2Q3NGCOUNT INT;
	   SELECT @FT2Q3NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 2 AND QUARTER = 3
	   DECLARE @FT3Q3NGCOUNT INT;
	   SELECT @FT3Q3NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 3 AND QUARTER = 3
	   DECLARE @FT4Q3NGCOUNT INT;
	   SELECT @FT4Q3NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 4 AND QUARTER = 3
	   DECLARE @FT5Q3NGCOUNT INT;
	   SELECT @FT5Q3NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQNOTGEN WHERE FORMID = 5 AND QUARTER = 3
	   DECLARE @FT6Q3NGCOUNT INT;
	   SELECT @FT6Q3NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQNOTGEN WHERE FORMID = 6 AND QUARTER = 3
	   -- ##############  END OF QUARTER 3  ##############
	   -- ##############  QUARTER 4  ##############
	   -- FTQ4BRANCHESCOUNT
	   DECLARE @FT1Q4BRANCHESCOUNT INT;
	   SELECT @FT1Q4BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 1 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 1 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 1 AND QUARTER = 4
	   )F1Q4
	   DECLARE @FT2Q4BRANCHESCOUNT INT;
	   SELECT @FT2Q4BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 2 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 2 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 2 AND QUARTER = 4
	   )F2Q4
	   DECLARE @FT3Q4BRANCHESCOUNT INT;
	   SELECT @FT3Q4BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 3 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 3 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 3 AND QUARTER = 4
	   )F3Q4
	   DECLARE @FT4Q4BRANCHESCOUNT INT;
	   SELECT @FT4Q4BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #BFQGENFILED WHERE FORMID = 4 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #BFQGENFILEDNOT WHERE FORMID = 4 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #BFQNOTGEN WHERE FORMID = 4 AND QUARTER = 4
	   )F4Q4
	   DECLARE @FT5Q4BRANCHESCOUNT INT;
	   SELECT @FT5Q4BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		  SELECT BRANCHID FROM #15GBFQGENFILED WHERE FORMID = 5 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #15GBFQGENFILEDNOT WHERE FORMID = 5 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #15GBFQNOTGEN WHERE FORMID = 5 AND QUARTER = 4
	   )F5Q4
	   DECLARE @FT6Q4BRANCHESCOUNT INT;
	   SELECT @FT6Q4BRANCHESCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM
	   (
		   SELECT BRANCHID FROM #15HBFQGENFILED WHERE FORMID = 6 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #15HBFQGENFILEDNOT WHERE FORMID = 6 AND QUARTER = 4
		  UNION SELECT BRANCHID FROM #15HBFQNOTGEN WHERE FORMID = 6 AND QUARTER = 4
	   )F6Q4
	   -- FTQ4FCOUNT
	   DECLARE @FT1Q4FCOUNT INT;
	   SELECT @FT1Q4FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 1 AND QUARTER = 4
	   DECLARE @FT2Q4FCOUNT INT;
	   SELECT @FT2Q4FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 2 AND QUARTER = 4
	   DECLARE @FT3Q4FCOUNT INT;
	   SELECT @FT3Q4FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 3 AND QUARTER = 4
	   DECLARE @FT4Q4FCOUNT INT;
	   SELECT @FT4Q4FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILED WHERE FORMID = 4 AND QUARTER = 4
	   DECLARE @FT5Q4FCOUNT INT;
	   SELECT @FT5Q4FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQGENFILED WHERE FORMID = 5 AND QUARTER = 4
	   DECLARE @FT6Q4FCOUNT INT;
	   SELECT @FT6Q4FCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQGENFILED WHERE FORMID = 6 AND QUARTER = 4
	   -- FTQ4NFCOUNT
	   DECLARE @FT1Q4NFCOUNT INT;
	   SELECT @FT1Q4NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 1 AND QUARTER = 4
	   DECLARE @FT2Q4NFCOUNT INT;
	   SELECT @FT2Q4NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 2 AND QUARTER = 4
	   DECLARE @FT3Q4NFCOUNT INT;
	   SELECT @FT3Q4NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 3 AND QUARTER = 4
	   DECLARE @FT4Q4NFCOUNT INT;
	   SELECT @FT4Q4NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQGENFILEDNOT WHERE FORMID = 4 AND QUARTER = 4
	   DECLARE @FT5Q4NFCOUNT INT;
	   SELECT @FT5Q4NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQGENFILEDNOT WHERE FORMID = 5 AND QUARTER = 4
	   DECLARE @FT6Q4NFCOUNT INT;
	   SELECT @FT6Q4NFCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQGENFILEDNOT WHERE FORMID = 6 AND QUARTER = 4
	   -- FTQ4NGCOUNT
	   DECLARE @FT1Q4NGCOUNT INT;
	   SELECT @FT1Q4NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 1 AND QUARTER = 4
	   DECLARE @FT2Q4NGCOUNT INT;
	   SELECT @FT2Q4NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 2 AND QUARTER = 4
	   DECLARE @FT3Q4NGCOUNT INT;
	   SELECT @FT3Q4NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 3 AND QUARTER = 4
	   DECLARE @FT4Q4NGCOUNT INT;
	   SELECT @FT4Q4NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #BFQNOTGEN WHERE FORMID = 4 AND QUARTER = 4
	   DECLARE @FT5Q4NGCOUNT INT;
	   SELECT @FT5Q4NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15GBFQNOTGEN WHERE FORMID = 5 AND QUARTER = 4
	   DECLARE @FT6Q4NGCOUNT INT;
	   SELECT @FT6Q4NGCOUNT = ISNULL(COUNT(BRANCHID), 0) FROM #15HBFQNOTGEN WHERE FORMID = 6 AND QUARTER = 4
	   -- ##############  END OF QUARTER 4  ##############
	   -- Building the final output
	   IF(@SHOW15GH = 0)
		  BEGIN
				SELECT @FT1Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT1Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT1Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT1Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form24Q' FORMNAME,
				  @FT1Q1FCOUNT FTQ1FCOUNT, @FT1Q2FCOUNT FTQ2FCOUNT, @FT1Q3FCOUNT FTQ3FCOUNT, @FT1Q4FCOUNT FTQ4FCOUNT, 
				  @FT1Q1NFCOUNT FTQ1NFCOUNT, @FT1Q2NFCOUNT FTQ2NFCOUNT, @FT1Q3NFCOUNT FTQ3NFCOUNT, @FT1Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT1Q1BRANCHESCOUNT - @FT1Q1FCOUNT - @FT1Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT1Q2BRANCHESCOUNT - @FT1Q2FCOUNT - @FT1Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT1Q3BRANCHESCOUNT - @FT1Q3FCOUNT - @FT1Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT1Q4BRANCHESCOUNT - @FT1Q4FCOUNT - @FT1Q4NFCOUNT) FTQ4NGCOUNT
			   UNION
			   SELECT @FT2Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT2Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT2Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT2Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form26Q' FORMNAME,
				  @FT2Q1FCOUNT FTQ1FCOUNT, @FT2Q2FCOUNT FTQ2FCOUNT, @FT2Q3FCOUNT FTQ3FCOUNT, @FT2Q4FCOUNT FTQ4FCOUNT, 
				  @FT2Q1NFCOUNT FTQ1NFCOUNT, @FT2Q2NFCOUNT FTQ2NFCOUNT, @FT2Q3NFCOUNT FTQ3NFCOUNT, @FT2Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT2Q1BRANCHESCOUNT - @FT2Q1FCOUNT - @FT2Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT2Q2BRANCHESCOUNT - @FT2Q2FCOUNT - @FT2Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT2Q3BRANCHESCOUNT - @FT2Q3FCOUNT - @FT2Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT2Q4BRANCHESCOUNT - @FT2Q4FCOUNT - @FT2Q4NFCOUNT) FTQ4NGCOUNT
			   UNION
			   SELECT @FT3Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT3Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT3Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT3Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form27Q' FORMNAME,
				  @FT3Q1FCOUNT FTQ1FCOUNT, @FT3Q2FCOUNT FTQ2FCOUNT, @FT3Q3FCOUNT FTQ3FCOUNT, @FT3Q4FCOUNT FTQ4FCOUNT, 
				  @FT3Q1NFCOUNT FTQ1NFCOUNT, @FT3Q2NFCOUNT FTQ2NFCOUNT, @FT3Q3NFCOUNT FTQ3NFCOUNT, @FT3Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT3Q1BRANCHESCOUNT - @FT3Q1FCOUNT - @FT3Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT3Q2BRANCHESCOUNT - @FT3Q2FCOUNT - @FT3Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT3Q3BRANCHESCOUNT - @FT3Q3FCOUNT - @FT3Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT3Q4BRANCHESCOUNT - @FT3Q4FCOUNT - @FT3Q4NFCOUNT) FTQ4NGCOUNT
			   UNION
			   SELECT @FT4Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT4Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT4Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT4Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form27EQ' FORMNAME,
				  @FT4Q1FCOUNT FTQ1FCOUNT, @FT4Q2FCOUNT FTQ2FCOUNT, @FT4Q3FCOUNT FTQ3FCOUNT, @FT4Q4FCOUNT FTQ4FCOUNT, 
				  @FT4Q1NFCOUNT FTQ1NFCOUNT, @FT4Q2NFCOUNT FTQ2NFCOUNT, @FT4Q3NFCOUNT FTQ3NFCOUNT, @FT4Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT4Q1BRANCHESCOUNT - @FT4Q1FCOUNT - @FT4Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT4Q2BRANCHESCOUNT - @FT4Q2FCOUNT - @FT4Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT4Q3BRANCHESCOUNT - @FT4Q3FCOUNT - @FT4Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT4Q4BRANCHESCOUNT - @FT4Q4FCOUNT - @FT4Q4NFCOUNT) FTQ4NGCOUNT   
		  END
	   ELSE
	      BEGIN
				SELECT @FT1Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT1Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT1Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT1Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form24Q' FORMNAME,
				  @FT1Q1FCOUNT FTQ1FCOUNT, @FT1Q2FCOUNT FTQ2FCOUNT, @FT1Q3FCOUNT FTQ3FCOUNT, @FT1Q4FCOUNT FTQ4FCOUNT, 
				  @FT1Q1NFCOUNT FTQ1NFCOUNT, @FT1Q2NFCOUNT FTQ2NFCOUNT, @FT1Q3NFCOUNT FTQ3NFCOUNT, @FT1Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT1Q1BRANCHESCOUNT - @FT1Q1FCOUNT - @FT1Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT1Q2BRANCHESCOUNT - @FT1Q2FCOUNT - @FT1Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT1Q3BRANCHESCOUNT - @FT1Q3FCOUNT - @FT1Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT1Q4BRANCHESCOUNT - @FT1Q4FCOUNT - @FT1Q4NFCOUNT) FTQ4NGCOUNT
			   UNION
			   SELECT @FT2Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT2Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT2Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT2Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form26Q' FORMNAME,
				  @FT2Q1FCOUNT FTQ1FCOUNT, @FT2Q2FCOUNT FTQ2FCOUNT, @FT2Q3FCOUNT FTQ3FCOUNT, @FT2Q4FCOUNT FTQ4FCOUNT, 
				  @FT2Q1NFCOUNT FTQ1NFCOUNT, @FT2Q2NFCOUNT FTQ2NFCOUNT, @FT2Q3NFCOUNT FTQ3NFCOUNT, @FT2Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT2Q1BRANCHESCOUNT - @FT2Q1FCOUNT - @FT2Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT2Q2BRANCHESCOUNT - @FT2Q2FCOUNT - @FT2Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT2Q3BRANCHESCOUNT - @FT2Q3FCOUNT - @FT2Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT2Q4BRANCHESCOUNT - @FT2Q4FCOUNT - @FT2Q4NFCOUNT) FTQ4NGCOUNT
			   UNION
			   SELECT @FT3Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT3Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT3Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT3Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form27Q' FORMNAME,
				  @FT3Q1FCOUNT FTQ1FCOUNT, @FT3Q2FCOUNT FTQ2FCOUNT, @FT3Q3FCOUNT FTQ3FCOUNT, @FT3Q4FCOUNT FTQ4FCOUNT, 
				  @FT3Q1NFCOUNT FTQ1NFCOUNT, @FT3Q2NFCOUNT FTQ2NFCOUNT, @FT3Q3NFCOUNT FTQ3NFCOUNT, @FT3Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT3Q1BRANCHESCOUNT - @FT3Q1FCOUNT - @FT3Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT3Q2BRANCHESCOUNT - @FT3Q2FCOUNT - @FT3Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT3Q3BRANCHESCOUNT - @FT3Q3FCOUNT - @FT3Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT3Q4BRANCHESCOUNT - @FT3Q4FCOUNT - @FT3Q4NFCOUNT) FTQ4NGCOUNT
			   UNION
			   SELECT @FT4Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT4Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT4Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT4Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form27EQ' FORMNAME,
				  @FT4Q1FCOUNT FTQ1FCOUNT, @FT4Q2FCOUNT FTQ2FCOUNT, @FT4Q3FCOUNT FTQ3FCOUNT, @FT4Q4FCOUNT FTQ4FCOUNT, 
				  @FT4Q1NFCOUNT FTQ1NFCOUNT, @FT4Q2NFCOUNT FTQ2NFCOUNT, @FT4Q3NFCOUNT FTQ3NFCOUNT, @FT4Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT4Q1BRANCHESCOUNT - @FT4Q1FCOUNT - @FT4Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT4Q2BRANCHESCOUNT - @FT4Q2FCOUNT - @FT4Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT4Q3BRANCHESCOUNT - @FT4Q3FCOUNT - @FT4Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT4Q4BRANCHESCOUNT - @FT4Q4FCOUNT - @FT4Q4NFCOUNT) FTQ4NGCOUNT
			   UNION
			   SELECT @FT5Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT5Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT5Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT5Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form15G' FORMNAME,
				  @FT5Q1FCOUNT FTQ1FCOUNT, @FT5Q2FCOUNT FTQ2FCOUNT, @FT5Q3FCOUNT FTQ3FCOUNT, @FT5Q4FCOUNT FTQ4FCOUNT, 
				  @FT5Q1NFCOUNT FTQ1NFCOUNT, @FT5Q2NFCOUNT FTQ2NFCOUNT, @FT5Q3NFCOUNT FTQ3NFCOUNT, @FT5Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT5Q1BRANCHESCOUNT - @FT5Q1FCOUNT - @FT5Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT5Q2BRANCHESCOUNT - @FT5Q2FCOUNT - @FT5Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT5Q3BRANCHESCOUNT - @FT5Q3FCOUNT - @FT5Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT5Q4BRANCHESCOUNT - @FT5Q4FCOUNT - @FT5Q4NFCOUNT) FTQ4NGCOUNT
			   UNION
			   SELECT @FT6Q1BRANCHESCOUNT FTQ1BRANCHESCOUNT, @FT6Q2BRANCHESCOUNT FTQ2BRANCHESCOUNT, 
				  @FT6Q3BRANCHESCOUNT FTQ3BRANCHESCOUNT, @FT6Q4BRANCHESCOUNT FTQ4BRANCHESCOUNT, 'Form15H' FORMNAME,
				  @FT6Q1FCOUNT FTQ1FCOUNT, @FT6Q2FCOUNT FTQ2FCOUNT, @FT6Q3FCOUNT FTQ3FCOUNT, @FT6Q4FCOUNT FTQ4FCOUNT, 
				  @FT6Q1NFCOUNT FTQ1NFCOUNT, @FT6Q2NFCOUNT FTQ2NFCOUNT, @FT6Q3NFCOUNT FTQ3NFCOUNT, @FT6Q4NFCOUNT FTQ4NFCOUNT, 
				  (@FT6Q1BRANCHESCOUNT - @FT6Q1FCOUNT - @FT6Q1NFCOUNT) FTQ1NGCOUNT, 
				  (@FT6Q2BRANCHESCOUNT - @FT6Q2FCOUNT - @FT6Q2NFCOUNT) FTQ2NGCOUNT, 
				  (@FT6Q3BRANCHESCOUNT - @FT6Q3FCOUNT - @FT6Q3NFCOUNT) FTQ3NGCOUNT, 
				  (@FT6Q4BRANCHESCOUNT - @FT6Q4FCOUNT - @FT6Q4NFCOUNT) FTQ4NGCOUNT
	      END
	   IF OBJECT_ID('tempdb..#DEDCHAAVAIL') is not null
		  DROP TABLE #DEDCHAAVAIL
	   IF OBJECT_ID('tempdb..#BFQNOTGEN') is not null
		  DROP TABLE #BFQNOTGEN
	   IF OBJECT_ID('tempdb..#BFQGENFILED') is not null
		  DROP TABLE #BFQGENFILED
	   IF OBJECT_ID('tempdb..#BFQGENFILEDNOT') is not null
		  DROP TABLE #BFQGENFILEDNOT
	   IF OBJECT_ID('tempdb..#15GHBFQGENFILED') is not null
		  DROP TABLE #15GHBFQGENFILED
	   IF OBJECT_ID('tempdb..#15GHBFQGENFILEDNOT') is not null
		  DROP TABLE #15GHBFQGENFILEDNOT  
	   IF OBJECT_ID('tempdb..#CHAAVAIL') is not null
		  DROP TABLE #CHAAVAIL
	   IF OBJECT_ID('tempdb..#CREC') is not null
		  DROP TABLE #CREC
	   IF OBJECT_ID('tempdb..#DEDAVAIL') is not null
		  DROP TABLE #DEDAVAIL
	   IF OBJECT_ID('tempdb..#DREC') is not null
		  DROP TABLE #DREC
	   IF OBJECT_ID('tempdb..#BFQ') is not null
		  DROP TABLE #BFQ
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNANNEXUREFILEDSUMMARYDETAILS')
DROP PROCEDURE USP_TDS_GETERETURNANNEXUREFILEDSUMMARYDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETERETURNANNEXUREFILEDSUMMARYDETAILS]
	@USERID INT,
	@IS15GH BIT 
AS  
	BEGIN  
		DECLARE @ISSUPERADMIN BIT;  
		SELECT @ISSUPERADMIN=ISSUPERADMIN FROM USERMASTER WHERE USERID=@USERID 
		IF(@ISSUPERADMIN = 1)  
		BEGIN  
			SET @USERID = 1  
		END
		IF(@IS15GH = 1)
			BEGIN
				SELECT CB.BRANCHNAME + '(' + CB.BRANCHCODE + ')' AS BRANCHNAME,ISNULL(CB1.BRANCHNAME,'') AS PARENTBRANCHNAME, FD.FORMNAME + 'Q' AS FORMNAME,A.BRANCHID,  
					CASE WHEN A.[QUARTER] = 1  
						THEN 'QUARTER1'  
						ELSE CASE WHEN A.[QUARTER]=2  
							THEN 'QUARTER2'  
							ELSE CASE WHEN A.[QUARTER]=3  
								THEN 'QUARTER3'  
								ELSE CASE WHEN A.[QUARTER]=4  
									THEN 'QUARTER4'  
								ELSE ''  
								END  
							END  
						END  
					END AS [QUARTER], A.ERETURNGENDATE, A.ORGNUM, A.ORGFILEDDATE  
				FROM ACKNO A 
					INNER JOIN FORMDETAILS FD WITH(NOLOCK) 
						ON A.FORMID = FD.FORMID  
					LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) 
						ON A.BRANCHID = CB.BRANCHID  
					LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) 
						ON CB1.BRANCHID = CB.PARENTBRANCHID
				WHERE LEN(ORGNUM) > 0 
					AND A.ISVALID = 1 
					AND A.ISNILLRETURN <> 1  
					AND CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID 
													FROM COMPANYBRANCH WITH(NOLOCK) 
													WHERE BRANCHID = (SELECT BRANCHID 
																		FROM USERMASTER 
																		WHERE USERID = @USERID
																	)
													) AS VARCHAR) + '%'  
				UNION
				SELECT CB.BRANCHNAME + '(' + CB.BRANCHCODE + ')' AS BRANCHNAME,ISNULL(CB1.BRANCHNAME,'') AS PARENTBRANCHNAME, CASE WHEN A.FORMID = 1 THEN 'Form15G' ELSE 'Form15H' END AS FORMNAME,A.BRANCHID,  
					CASE WHEN A.[QUARTER] = 1  
						THEN 'QUARTER1'  
						ELSE CASE WHEN A.[QUARTER]=2  
							THEN 'QUARTER2'  
							ELSE CASE WHEN A.[QUARTER]=3  
								THEN 'QUARTER3'  
								ELSE CASE WHEN A.[QUARTER]=4  
									THEN 'QUARTER4'  
								ELSE ''  
								END  
							END  
						END  
					END AS [QUARTER], A.ERETURNGENDATE, A.ORGNUM, A.ORGFILEDATE AS ORGFILEDDATE  
				FROM ACKNO15GH A  
					LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) 
						ON A.BRANCHID = CB.BRANCHID  
					LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) 
						ON CB1.BRANCHID = CB.PARENTBRANCHID
				WHERE LEN(ORGNUM) > 0 
					AND A.ISVALID = 1   
					AND CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID 
													FROM COMPANYBRANCH WITH(NOLOCK) 
													WHERE BRANCHID = (SELECT BRANCHID 
																		FROM USERMASTER 
																		WHERE USERID = @USERID
																	)
													) AS VARCHAR) + '%'
			END   
		ELSE
			BEGIN
				SELECT CB.BRANCHNAME + '(' + CB.BRANCHCODE + ')' AS BRANCHNAME,ISNULL(CB1.BRANCHNAME,'') AS PARENTBRANCHNAME, FD.FORMNAME + 'Q' AS FORMNAME,A.BRANCHID,  
					CASE WHEN A.[QUARTER] = 1  
						THEN 'QUARTER1'  
						ELSE CASE WHEN A.[QUARTER]=2  
							THEN 'QUARTER2'  
							ELSE CASE WHEN A.[QUARTER]=3  
								THEN 'QUARTER3'  
								ELSE CASE WHEN A.[QUARTER]=4  
									THEN 'QUARTER4'  
								ELSE ''  
								END  
							END  
						END  
					END AS [QUARTER], A.ERETURNGENDATE, A.ORGNUM, A.ORGFILEDDATE  
				FROM ACKNO A 
					INNER JOIN FORMDETAILS FD WITH(NOLOCK) 
						ON A.FORMID = FD.FORMID  
					LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) 
						ON A.BRANCHID = CB.BRANCHID  
					LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) 
						ON CB1.BRANCHID = CB.PARENTBRANCHID
				WHERE LEN(ORGNUM) > 0 
					AND A.ISVALID = 1 
					AND A.ISNILLRETURN <> 1  
					AND CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID 
													FROM COMPANYBRANCH WITH(NOLOCK) 
													WHERE BRANCHID = (SELECT BRANCHID 
																		FROM USERMASTER 
																		WHERE USERID = @USERID
																	)
													) AS VARCHAR) + '%'  
				ORDER BY A.[QUARTER],CB.BRANCHNAME,FD.FORMNAME
			END  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnAnnexureNilReturntFiledSummaryDetails')
DROP PROCEDURE USP_TDS_GetEReturnAnnexureNilReturntFiledSummaryDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetEReturnAnnexureNilReturntFiledSummaryDetails]
	@USERID INT
AS
	BEGIN
		SELECT CB.BRANCHNAME + '(' + CB.BRANCHCODE + ')' AS BRANCHNAME,ISNULL(CB1.BRANCHNAME,'') AS PARENTBRANCHNAME,FD.FORMNAME+'Q' AS FORMNAME,A.BRANCHID,
		   CASE WHEN A.[QUARTER] = 1 
				THEN 'Quarter1' 
				ELSE CASE WHEN A.[QUARTER]=2 
						  THEN 'Quarter2' 
						  ELSE CASE WHEN A.[QUARTER]=3 
									THEN 'Quarter3'
									ELSE CASE WHEN A.[QUARTER]=4 
											  THEN 'Quarter4' 
											  ELSE '' 
										 END
							   END
					 END
			END AS [QUARTER],A.ERETURNGENDATE,A.ORGNUM,A.ORGFILEDDATE 
		FROM ACKNO A INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON A.FORMID = FD.FORMID
					 LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON A.BRANCHID = CB.BRANCHID
					 LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON CB1.BRANCHID = CB.PARENTBRANCHID 
		WHERE LEN(ORGNUM) > 0 AND A.ISVALID = 1 AND A.ISNILLRETURN = 1 
							  AND CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID =(SELECT BRANCHID FROM USERMASTER WITH(NOLOCK) WHERE USERID = @USERID)) AS VARCHAR)+'%' 
		ORDER BY A.[QUARTER],CB.BRANCHNAME,FD.FORMNAME;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnAnnexureNotFiledSummaryDetails')
DROP PROCEDURE USP_TDS_GetEReturnAnnexureNotFiledSummaryDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetEReturnAnnexureNotFiledSummaryDetails]
	@USERID INT,
	@IS15GH BIT	
AS
BEGIN
	IF(@IS15GH = 1)
		BEGIN
			SELECT CB.BRANCHNAME + '(' + CB.BRANCHCODE + ')' AS BRANCHNAME,ISNULL(CB1.BRANCHNAME,'') AS PARENTBRANCHNAME,
				   FD.FORMNAME+'Q' AS FORMNAME,A.BRANCHID,
				   CASE WHEN A.[QUARTER] = 1 
						THEN 'Quarter1' 
						ELSE CASE WHEN A.[QUARTER]=2 
								  THEN 'Quarter2' 
								  ELSE CASE WHEN A.[QUARTER]=3 
											THEN 'Quarter3'
											ELSE CASE WHEN A.[QUARTER]=4 
													  THEN 'Quarter4' 
													  ELSE '' 
												 END
									   END
							 END
					END AS [QUARTER],A.ERETURNGENDATE,A.ORGNUM,A.ORGFILEDDATE 
			FROM ACKNO A INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON A.FORMID = FD.FORMID
						 LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON A.BRANCHID = CB.BRANCHID
						 LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON CB1.BRANCHID = CB.PARENTBRANCHID				 
			WHERE LEN(ISNULL(ORGNUM,'')) = 0 AND A.ISVALID = 1
			AND CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) 
			WHERE BRANCHID =(SELECT BRANCHID FROM USERMASTER WITH(NOLOCK) WHERE USERID = @USERID)) AS VARCHAR)+'%'
			UNION
			SELECT CB.BRANCHNAME + '(' + CB.BRANCHCODE + ')' AS BRANCHNAME,ISNULL(CB1.BRANCHNAME,'') AS PARENTBRANCHNAME,
				   CASE WHEN A.FORMID = 1 
						THEN 'Form15G' 
						ELSE 'Form15H' 
				   END AS FORMNAME,A.BRANCHID,
				   CASE WHEN A.[QUARTER] = 1 
						THEN 'Quarter1' 
						ELSE CASE WHEN A.[QUARTER]=2 
								  THEN 'Quarter2' 
								  ELSE CASE WHEN A.[QUARTER]=3 
											THEN 'Quarter3'
											ELSE CASE WHEN A.[QUARTER]=4 
													  THEN 'Quarter4' 
													  ELSE '' 
												 END
									   END
							 END
					END AS [QUARTER],A.ERETURNGENDATE,A.ORGNUM,A.ORGFILEDATE AS ORGFILEDDATE
			FROM ACKNO15GH A 
				 LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON A.BRANCHID = CB.BRANCHID
				 LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON CB1.BRANCHID = CB.PARENTBRANCHID				 
			WHERE LEN(ISNULL(ORGNUM,'')) = 0 AND A.ISVALID = 1
			AND CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID 
										   FROM COMPANYBRANCH WITH(NOLOCK) 
										   WHERE BRANCHID =(SELECT BRANCHID 
															FROM USERMASTER WITH(NOLOCK) 
															WHERE USERID = @USERID)
										) AS VARCHAR)+'%'
		END
	ELSE
		BEGIN	
			SELECT CB.BRANCHNAME + '(' + CB.BRANCHCODE + ')' AS BRANCHNAME,ISNULL(CB1.BRANCHNAME,'') AS PARENTBRANCHNAME,
				   FD.FORMNAME+'Q' AS FORMNAME,A.BRANCHID,
				   CASE WHEN A.[QUARTER] = 1 
						THEN 'Quarter1' 
						ELSE CASE WHEN A.[QUARTER]=2 
								  THEN 'Quarter2' 
								  ELSE CASE WHEN A.[QUARTER]=3 
											THEN 'Quarter3'
											ELSE CASE WHEN A.[QUARTER]=4 
													  THEN 'Quarter4' 
													  ELSE '' 
												 END
									   END
							 END
					END AS [QUARTER],A.ERETURNGENDATE,A.ORGNUM,A.ORGFILEDDATE,A.ISVALID 
			FROM ACKNO A INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON A.FORMID = FD.FORMID
						 LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON A.BRANCHID = CB.BRANCHID
						 LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON CB1.BRANCHID = CB.PARENTBRANCHID				 
			WHERE LEN(ISNULL(ORGNUM,'')) = 0 AND A.ISVALID = 1
			AND CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID 
										   FROM COMPANYBRANCH WITH(NOLOCK) 
										   WHERE BRANCHID =(SELECT BRANCHID 
															FROM USERMASTER WITH(NOLOCK) 
															WHERE USERID = @USERID)
										) AS VARCHAR)+'%' 
			ORDER BY A.[QUARTER],CB.BRANCHNAME,FD.FORMNAME;
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnAnnexureNotGeneratedSummaryDetails')
DROP PROCEDURE USP_TDS_GetEReturnAnnexureNotGeneratedSummaryDetails
GO
CREATE PROCEDURE USP_TDS_GetEReturnAnnexureNotGeneratedSummaryDetails
	@USERID INT,
	@IS15GH BIT
AS
    BEGIN
		SELECT BRANCHID, 1 AS FORMID, 1 AS QUARTER INTO #BFQ FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 1 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 1 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 1 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 2 AS FORMID, 1 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 2 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 2 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 2 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 3 AS FORMID, 1 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 3 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 3 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 3 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 4 AS FORMID, 1 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 4 AS FORMID, 2 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 4 AS FORMID, 3 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
		UNION SELECT BRANCHID, 4 AS FORMID, 4 AS QUARTER FROM COMPANYBRANCH WITH(NOLOCK)
	   SELECT BRANCHID, FORMID, QUARTER, COUNT(DEDUCTIONID) DCNT 
	   INTO #DREC
	   FROM DEDUCTIONDETAIL WITH(NOLOCK)
	   GROUP BY BRANCHID, FORMID, QUARTER
	   IF(@IS15GH = 1)
		   BEGIN
			   SELECT BRANCHID, 1 AS FORMID, QUARTER, COUNT(DETAILID) DCNT 
			   INTO #BASIC15G
			   FROM FORM15GBASIC WITH(NOLOCK)
			   GROUP BY BRANCHID, QUARTER
			   SELECT BRANCHID, 1 AS FORMID, QUARTER, COUNT(DETAILID) DCNT 
			   INTO #BASIC15H
			   FROM FORM15GBASIC WITH(NOLOCK)
			   GROUP BY BRANCHID, QUARTER
			   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(D.DCNT, 0) DEDCNT
			   INTO #BASIC15GZERO
			   FROM #BFQ CB 
				  LEFT JOIN #BASIC15G D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID AND CB.FORMID = D.FORMID AND CB.QUARTER = D.QUARTER
			   WHERE ISNULL(D.DCNT, 0) = 0
			   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(D.DCNT, 0) DEDCNT
			   INTO #BASIC15HZERO
			   FROM #BFQ CB 
				  LEFT JOIN #BASIC15H D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID AND CB.FORMID = D.FORMID AND CB.QUARTER = D.QUARTER
			   WHERE ISNULL(D.DCNT, 0) = 0
	   			SELECT BRANCHID, FORMID, QUARTER INTO #EXCEPTBFQ15GH FROM ACKNO15GH WHERE ISVALID = 1
			   UNION SELECT BRANCHID, FORMID, QUARTER FROM #BASIC15GZERO
			   UNION SELECT BRANCHID, FORMID, QUARTER FROM #BASIC15HZERO
		END
	    -- Picking up where Deduction record count is greater than zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(D.DCNT, 0) DEDCNT
	   INTO #DEDAVAIL
	   FROM #BFQ CB 
		  LEFT JOIN #DREC D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID AND CB.FORMID = D.FORMID AND CB.QUARTER = D.QUARTER
	   WHERE ISNULL(D.DCNT, 0) > 0
	   -- Picking up where Deduction record count is zero
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(D.DCNT, 0) DEDCNT
	   INTO #DEDZERO
	   FROM #BFQ CB 
		  LEFT JOIN #DREC D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID AND CB.FORMID = D.FORMID AND CB.QUARTER = D.QUARTER
	   WHERE ISNULL(D.DCNT, 0) = 0
	   SELECT BRANCHID, FORMID, QUARTER, COUNT(CHALLANID) CCNT 
	   INTO #CREC
	   FROM CHALLANDETAIL WITH(NOLOCK)
	   GROUP BY BRANCHID, FORMID, QUARTER
	   SELECT CB.BRANCHID, CB.FORMID, CB.QUARTER, ISNULL(D.CCNT, 0) CHACNT
	   INTO #CHAZERO
	   FROM #BFQ CB 
		  LEFT JOIN #CREC D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID AND CB.FORMID = D.FORMID AND CB.QUARTER = D.QUARTER
	   WHERE ISNULL(D.CCNT, 0) = 0
	   SELECT BRANCHID, FORMID, QUARTER INTO #DEDAVAILWITHOUTACK FROM #DEDAVAIL 
	   EXCEPT
	   SELECT BRANCHID, FORMID, QUARTER FROM ACKNO WHERE ISVALID = 1
	   SELECT BRANCHID, FORMID, QUARTER INTO #EXCEPTBFQ FROM ACKNO WHERE ISVALID = 1
	   UNION SELECT BRANCHID, FORMID, QUARTER FROM #DEDZERO
	   UNION SELECT BRANCHID, FORMID, QUARTER FROM #CHAZERO
	   EXCEPT SELECT BRANCHID, FORMID, QUARTER FROM #DEDAVAILWITHOUTACK
	   SELECT 1 FORMID, 1 QUARTER INTO #FQ UNION SELECT 1 FORMID, 2 QUARTER UNION SELECT 1 FORMID, 3 QUARTER UNION SELECT 1 FORMID, 4 QUARTER
	   UNION 
	   SELECT 2 FORMID, 1 QUARTER UNION SELECT 2 FORMID, 2 QUARTER UNION SELECT 2 FORMID, 3 QUARTER UNION SELECT 2 FORMID, 4 QUARTER 
	   UNION 
	   SELECT 3 FORMID, 1 QUARTER UNION SELECT 3 FORMID, 2 QUARTER UNION SELECT 3 FORMID, 3 QUARTER UNION SELECT 3 FORMID, 4 QUARTER
		IF(@IS15GH = 1)
		   BEGIN
				SELECT CB1.BRANCHNAME, CBP.BRANCHNAME PARENTBRANCHNAME,
				  FD.FORMNAME + 'Q' AS FORMNAME, MAINTABLE.BRANCHID,
				  CASE WHEN MAINTABLE.[QUARTER] = 1 THEN 'Quarter1' 
				  ELSE CASE WHEN MAINTABLE.[QUARTER] = 2 THEN 'Quarter2'
					 ELSE CASE WHEN MAINTABLE.[QUARTER] = 3 THEN 'Quarter3'
						ELSE 'Quarter4' END
					 END
				  END AS [QUARTER]
			   FROM	 (
						SELECT BRANCHID, TB.FORMID, TB.QUARTER
						FROM COMPANYBRANCH CB WITH(NOLOCK)
						FULL JOIN
						(
							SELECT 1 FORMID, 1 QUARTER UNION SELECT 1 FORMID, 2 QUARTER UNION SELECT 1 FORMID, 3 QUARTER UNION SELECT 1 FORMID, 4 QUARTER
							UNION 
							SELECT 2 FORMID, 1 QUARTER UNION SELECT 2 FORMID, 2 QUARTER UNION SELECT 2 FORMID, 3 QUARTER UNION SELECT 2 FORMID, 4 QUARTER 
							UNION 
							SELECT 3 FORMID, 1 QUARTER UNION SELECT 3 FORMID, 2 QUARTER UNION SELECT 3 FORMID, 3 QUARTER UNION SELECT 3 FORMID, 4 QUARTER
						) AS TB ON 1 = 1 
						WHERE CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = (SELECT BRANCHID FROM USERMASTER WHERE USERID = @USERID)) AS VARCHAR) + '%'
						EXCEPT
						SELECT BRANCHID, FORMID, QUARTER FROM #EXCEPTBFQ
					 )
					 AS MAINTABLE JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON MAINTABLE.BRANCHID = CB1.BRANCHID
							   JOIN FORMDETAILS FD WITH(NOLOCK) ON MAINTABLE.FORMID = FD.FORMID
							   LEFT JOIN COMPANYBRANCH CBP WITH(NOLOCK) ON CB1.PARENTBRANCHID = CBP.BRANCHID
					 WHERE MAINTABLE.BRANCHID <> 1
				UNION
				SELECT CB1.BRANCHNAME, CBP.BRANCHNAME PARENTBRANCHNAME,
				  CASE WHEN MAINTABLE.FORMID = 1 THEN 'Form15G' ELSE 'Form15H' END AS FORMNAME
				  , MAINTABLE.BRANCHID,
				  CASE WHEN MAINTABLE.[QUARTER] = 1 THEN 'Quarter1' 
				  ELSE CASE WHEN MAINTABLE.[QUARTER] = 2 THEN 'Quarter2'
					 ELSE CASE WHEN MAINTABLE.[QUARTER] = 3 THEN 'Quarter3'
						ELSE 'Quarter4' END
					 END
				  END AS [QUARTER]
			   FROM	 (
						SELECT BRANCHID, TB.FORMID, TB.QUARTER
						FROM COMPANYBRANCH CB WITH(NOLOCK)
						FULL JOIN
						(
							SELECT 1 FORMID, 1 QUARTER UNION SELECT 1 FORMID, 2 QUARTER UNION SELECT 1 FORMID, 3 QUARTER UNION SELECT 1 FORMID, 4 QUARTER
							UNION 
							SELECT 2 FORMID, 1 QUARTER UNION SELECT 2 FORMID, 2 QUARTER UNION SELECT 2 FORMID, 3 QUARTER UNION SELECT 2 FORMID, 4 QUARTER 
						) AS TB ON 1 = 1 
						WHERE CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = (SELECT BRANCHID FROM USERMASTER WHERE USERID = @USERID)) AS VARCHAR) + '%'
						EXCEPT
						SELECT BRANCHID, FORMID, QUARTER FROM #EXCEPTBFQ15GH
					 )
					 AS MAINTABLE JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON MAINTABLE.BRANCHID = CB1.BRANCHID
							   LEFT JOIN COMPANYBRANCH CBP WITH(NOLOCK) ON CB1.PARENTBRANCHID = CBP.BRANCHID
					 WHERE MAINTABLE.BRANCHID <> 1
		   END	
	   ELSE
		   BEGIN
			   SELECT CB1.BRANCHNAME, CBP.BRANCHNAME PARENTBRANCHNAME,
				  FD.FORMNAME + 'Q' AS FORMNAME, MAINTABLE.BRANCHID,
				  CASE WHEN MAINTABLE.[QUARTER] = 1 THEN 'Quarter1' 
				  ELSE CASE WHEN MAINTABLE.[QUARTER] = 2 THEN 'Quarter2'
					 ELSE CASE WHEN MAINTABLE.[QUARTER] = 3 THEN 'Quarter3'
						ELSE 'Quarter4' END
					 END
				  END AS [QUARTER]
			   FROM	 (
						SELECT BRANCHID, TB.FORMID, TB.QUARTER
						FROM COMPANYBRANCH CB WITH(NOLOCK)
						FULL JOIN
						(
							SELECT 1 FORMID, 1 QUARTER UNION SELECT 1 FORMID, 2 QUARTER UNION SELECT 1 FORMID, 3 QUARTER UNION SELECT 1 FORMID, 4 QUARTER
							UNION 
							SELECT 2 FORMID, 1 QUARTER UNION SELECT 2 FORMID, 2 QUARTER UNION SELECT 2 FORMID, 3 QUARTER UNION SELECT 2 FORMID, 4 QUARTER 
							UNION 
							SELECT 3 FORMID, 1 QUARTER UNION SELECT 3 FORMID, 2 QUARTER UNION SELECT 3 FORMID, 3 QUARTER UNION SELECT 3 FORMID, 4 QUARTER
						) AS TB ON 1 = 1 
						WHERE CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = (SELECT BRANCHID FROM USERMASTER WHERE USERID = @USERID)) AS VARCHAR) + '%'
						EXCEPT
						SELECT BRANCHID, FORMID, QUARTER FROM #EXCEPTBFQ
					 )
					 AS MAINTABLE JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON MAINTABLE.BRANCHID = CB1.BRANCHID
							   JOIN FORMDETAILS FD WITH(NOLOCK) ON MAINTABLE.FORMID = FD.FORMID
							   LEFT JOIN COMPANYBRANCH CBP WITH(NOLOCK) ON CB1.PARENTBRANCHID = CBP.BRANCHID
					 WHERE MAINTABLE.BRANCHID <> 1
				ORDER BY FORMNAME
			END
	   IF OBJECT_ID('tempdb..#EXCEPTBFQ') is not null
		  DROP TABLE #EXCEPTBFQ
	   IF OBJECT_ID('tempdb..#CREC') is not null
		  DROP TABLE #CREC
	   IF OBJECT_ID('tempdb..#CHAZERO') is not null
		  DROP TABLE #CHAZERO
	   IF OBJECT_ID('tempdb..#DREC') is not null
		  DROP TABLE #DREC
	   IF OBJECT_ID('tempdb..#DEDAVAIL') is not null
		  DROP TABLE #DEDAVAIL
	   IF OBJECT_ID('tempdb..#DEDZERO') is not null
		  DROP TABLE #DEDZERO
	   IF OBJECT_ID('tempdb..#FQ') is not null
		  DROP TABLE #FQ
	   IF OBJECT_ID('tempdb..#BFQ') is not null
		  DROP TABLE #BFQ
	   IF OBJECT_ID('tempdb..#BASIC15G') is not null
		  DROP TABLE #BASIC15G
	   IF OBJECT_ID('tempdb..#BASIC15H') is not null
		  DROP TABLE #BASIC15H
	   IF OBJECT_ID('tempdb..#BASIC15GZERO') is not null
		  DROP TABLE #BASIC15GZERO
	   IF OBJECT_ID('tempdb..#BASIC15HZERO') is not null
		  DROP TABLE #BASIC15HZERO
	   IF OBJECT_ID('tempdb..#EXCEPTBFQ15GH') is not null
		  DROP TABLE #EXCEPTBFQ15GH
	   IF OBJECT_ID('tempdb..#DEDAVAILWITHOUTACK') is not null
		  DROP TABLE #DEDAVAILWITHOUTACK  
    END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNANNEXURESUBREPORTDETAILS')
DROP PROCEDURE USP_TDS_GETERETURNANNEXURESUBREPORTDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETERETURNANNEXURESUBREPORTDETAILS] 
	@USERID INT,
	@SHOW15GH BIT = 0   
AS    
	BEGIN    
		DECLARE @BASEIDLENGTH INT;    
		IF((SELECT ISSUPERADMIN FROM USERMASTER WHERE USERID=@USERID)=1)
		BEGIN    
			SELECT @BASEIDLENGTH = 10;    
		END    
		ELSE    
		BEGIN    
			SELECT @BASEIDLENGTH = LEN(PARENTBASEID) FROM COMPANYBRANCH CB WITH(NOLOCK) JOIN USERMASTER UM WITH(NOLOCK) ON CB.BRANCHID = UM.BRANCHID    
			WHERE  UM.USERID = @USERID;    
		END    
		IF (@SHOW15GH = 0)
		BEGIN
			SELECT FINALTABLE.*,    
				/*NOT GENERATED*/    
				(SELECT FINALTABLE.BRANCHCOUNT - FINALTABLE.FQ1 - FINALTABLE.NFQ1) AS NGQ1,    
				(SELECT FINALTABLE.BRANCHCOUNT - FINALTABLE.FQ2 - FINALTABLE.NFQ2) AS NGQ2,    
				(SELECT FINALTABLE.BRANCHCOUNT - FINALTABLE.FQ3 - FINALTABLE.NFQ3) AS NGQ3,    
				(SELECT FINALTABLE.BRANCHCOUNT - FINALTABLE.FQ4 - FINALTABLE.NFQ4) AS NGQ4    
			FROM     
			(    
				SELECT MAINTABLE.*,    
					/*FILLED*/ 
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN (SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND  QUARTER = 1 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1) 
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND  QUARTER = 1 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1) 
							ELSE 	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 1 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)
						END 
					END AS FQ1, 
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND  QUARTER = 2 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND  QUARTER = 2 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)
							ELSE 	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK)  WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 2 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)     
						END
					END	AS FQ2,
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND  QUARTER = 3 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)    
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND  QUARTER = 3 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)    
							ELSE    (SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 3 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)     
						END
					END AS FQ3,	
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND  QUARTER = 4 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)   
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND  QUARTER = 4 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)   
							ELSE	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 4 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)    
						END
					END	AS FQ4,
					/*NOT FILLED*/ 
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND QUARTER = 1 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)    
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND QUARTER = 1 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)    
							ELSE    (SELECT COUNT(ACKID) FROM ACKNO  WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK)  WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 1 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1) 
						END
					END	AS NFQ1, 
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND QUARTER = 2 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)     			
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND QUARTER = 2 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)     			
							ELSE	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 2 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1) 
						END
					END	AS NFQ2,
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND QUARTER = 3 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)     
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND QUARTER = 3 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)     
							ELSE    (SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 3 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)  
						END
					END	AS NFQ3,
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND QUARTER = 4 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1) 	 		
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND QUARTER = 4 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1) 	 		
							ELSE 	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 4 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)  
						END
					END	AS NFQ4   
					FROM      
					(
						SELECT BRANCHID,BRANCHNAME,PARENTBASEID ,FORMNAME,FORMID,    
						(SELECT COUNT(BRANCHID) FROM COMPANYBRANCH WITH(NOLOCK)  WHERE PARENTBASEID LIKE CB.PARENTBASEID + '%') AS BRANCHCOUNT    
						FROM COMPANYBRANCH CB   WITH(NOLOCK)   
						FULL JOIN    
						(    
							SELECT FORMNAME, FORMID FROM FORMDETAILS  
						) AS AA    
						ON 1 = 1    
						WHERE     
							PARENTBASEID <> '00001' AND     
							LEN(PARENTBASEID) <= @BASEIDLENGTH AND    
							PARENTBASEID LIKE 
								(SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) 
									WHERE BRANCHID = (SELECT BRANCHID FROM USERMASTER WHERE USERID = @USERID)) + '%'    
					) AS MAINTABLE    
			) AS FINALTABLE
			WHERE FORMID NOT IN (5, 6)
			ORDER BY BRANCHID,FORMID  
		END
		ELSE
		BEGIN
			SELECT FINALTABLE.*,    
				/*NOT GENERATED*/    
				(SELECT FINALTABLE.BRANCHCOUNT - FINALTABLE.FQ1 - FINALTABLE.NFQ1) AS NGQ1,    
				(SELECT FINALTABLE.BRANCHCOUNT - FINALTABLE.FQ2 - FINALTABLE.NFQ2) AS NGQ2,    
				(SELECT FINALTABLE.BRANCHCOUNT - FINALTABLE.FQ3 - FINALTABLE.NFQ3) AS NGQ3,    
				(SELECT FINALTABLE.BRANCHCOUNT - FINALTABLE.FQ4 - FINALTABLE.NFQ4) AS NGQ4    
			FROM     
			(    
				SELECT MAINTABLE.*,    
					/*FILLED*/ 
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN (SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND  QUARTER = 1 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1) 
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND  QUARTER = 1 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1) 
							ELSE 	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 1 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)
						END 
					END AS FQ1, 
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND  QUARTER = 2 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND  QUARTER = 2 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)
							ELSE 	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK)  WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 2 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)     
						END
					END	AS FQ2,
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND  QUARTER = 3 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)    
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND  QUARTER = 3 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)    
							ELSE    (SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 3 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)     
						END
					END AS FQ3,	
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND  QUARTER = 4 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)   
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND  QUARTER = 4 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)   
							ELSE	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 4 AND ORGNUM IS NOT NULL AND ORGNUM <> '' AND ISVALID = 1)    
						END
					END	AS FQ4,
					/*NOT FILLED*/ 
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND QUARTER = 1 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)    
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND QUARTER = 1 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)    
							ELSE    (SELECT COUNT(ACKID) FROM ACKNO  WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK)  WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 1 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1) 
						END
					END	AS NFQ1, 
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND QUARTER = 2 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)     			
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND QUARTER = 2 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)     			
							ELSE	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 2 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1) 
						END
					END	AS NFQ2,
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND QUARTER = 3 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)     
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND QUARTER = 3 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)     
							ELSE    (SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 3 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)  
						END
					END	AS NFQ3,
					CASE WHEN MAINTABLE.FORMID IN(5) 
						THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 1 AND QUARTER = 4 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1) 	 		
						ELSE CASE WHEN MAINTABLE.FORMID IN(6) 
							THEN	(SELECT COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = 2 AND QUARTER = 4 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1) 	 		
							ELSE 	(SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID IN (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE MAINTABLE.PARENTBASEID+'%') AND FORMID = MAINTABLE.FORMID AND QUARTER = 4 AND (ORGNUM IS NULL OR ORGNUM = '') AND ISVALID = 1)  
						END
					END	AS NFQ4   
					FROM      
					(
						SELECT BRANCHID,BRANCHNAME,PARENTBASEID ,FORMNAME,FORMID,    
						(SELECT COUNT(BRANCHID) FROM COMPANYBRANCH WITH(NOLOCK)  WHERE PARENTBASEID LIKE CB.PARENTBASEID + '%') AS BRANCHCOUNT    
						FROM COMPANYBRANCH CB   WITH(NOLOCK)   
						FULL JOIN    
						(    
							SELECT FORMNAME, FORMID FROM FORMDETAILS  
						) AS AA    
						ON 1 = 1    
						WHERE     
							PARENTBASEID <> '00001' AND     
							LEN(PARENTBASEID) <= @BASEIDLENGTH AND    
							PARENTBASEID LIKE 
								(SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) 
									WHERE BRANCHID = (SELECT BRANCHID FROM USERMASTER WHERE USERID = @USERID)) + '%'    
					) AS MAINTABLE    
			) AS FINALTABLE
			ORDER BY BRANCHID,FORMID  
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNBULKDETAILS')
DROP PROCEDURE USP_TDS_GETERETURNBULKDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETERETURNBULKDETAILS] 
 @USERID INT = 1,      
 @QUARTER INT = 1,      
 @COUNT INT = 0      
AS  
 BEGIN      
 DECLARE @SQLQUERY NVARCHAR(MAX);      
    SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER (ORDER BY MAINTABLE.BRANCHID)ROW_NUM, MAINTABLE.BRANCHID, MAINTABLE.FORMID ,      
    MAINTABLE.QUARTER, CB1.BRANCHNAME, CB1.BRANCHCODE      
    INTO #TEMP      
    FROM      
  (      
   SELECT BRANCHID,TB.FORMID,TB.QUARTER      
   FROM COMPANYBRANCH CB WITH(NOLOCK)      
   FULL JOIN      
   (      
    SELECT 1 FORMID,1 QUARTER UNION SELECT 1 FORMID,2 QUARTER UNION SELECT 1 FORMID,3 QUARTER UNION SELECT 1 FORMID,4 QUARTER      
    UNION      
    SELECT 2 FORMID,1 QUARTER UNION SELECT 2 FORMID,2 QUARTER UNION SELECT 2 FORMID,3 QUARTER UNION SELECT 2 FORMID,4 QUARTER      
    UNION      
    SELECT 3 FORMID,1 QUARTER UNION SELECT 3 FORMID,2 QUARTER UNION SELECT 3 FORMID,3 QUARTER UNION SELECT 3 FORMID,4 QUARTER      
   ) AS TB ON 1=1      
   WHERE CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = (SELECT BRANCHID FROM USERMASTER WHERE USERID = '+ CAST(@USERID AS VARCHAR)+')) AS VARCHAR)+''%''      
   EXCEPT      
   SELECT BRANCHID,FORMID,QUARTER FROM ACKNO
  )AS MAINTABLE      
    INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON MAINTABLE.BRANCHID = CB1.BRANCHID      
    INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON MAINTABLE.FORMID = FD.FORMID      
    INNER JOIN      
    (      
	SELECT DISTINCT BRANCHID, FORMID, QUARTER FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE QUARTER = '+ CAST(@QUARTER AS VARCHAR)+'  --WHERE ISNULL(TOTALDEDUCTED,0) = 0      
    )DD ON MAINTABLE.BRANCHID = DD.BRANCHID AND DD.FORMID = MAINTABLE.FORMID AND DD.QUARTER = MAINTABLE.QUARTER      
    WHERE MAINTABLE.BRANCHID <> 1 AND MAINTABLE.QUARTER = '+ CAST(@QUARTER AS VARCHAR)+'      
    ORDER BY MAINTABLE.BRANCHID'      
   SET @SQLQUERY =   @SQLQUERY + ';SELECT * FROM #TEMP'      
   IF(@COUNT > 0)  
    BEGIN      
  SET @SQLQUERY =   @SQLQUERY + ' WHERE ROW_NUM > 0 AND ROW_NUM <= '+ CAST(@COUNT AS VARCHAR)      
    END  
   EXEC SP_EXECUTESQL @SQLQUERY;      
  -- PRINT @SQLQUERY    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNCHALLANCOUNTANDAMOUNT')
DROP PROCEDURE USP_TDS_GETERETURNCHALLANCOUNTANDAMOUNT
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETERETURNCHALLANCOUNTANDAMOUNT]
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,  
 @ISAUDITTRIAL BIT      
AS    
 BEGIN    
  DECLARE @CHALLANCOUNT TABLE(ID INT IDENTITY(1,1),BRANCHID INT,CHALLANID INT,TOTAL NUMERIC(16,2),CHALLANTOTAL NUMERIC(16,2))
  SELECT FORMID,BRANCHID,[QUARTER],DEDUCTIONID,TRANSSTATUS
	INTO #DEDUCTIONDETAIL
	FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID 
		AND FORMID = @FORMID 
		AND [QUARTER] = @QUARTER
	SELECT DL.BRANCHID,DL.DEDUCTIONID,DL.CHALLANID
	INTO #DEDCHALINK
	FROM DEDCHALINK DL WITH(NOLOCK)
	INNER JOIN #DEDUCTIONDETAIL DD
		ON DD.DEDUCTIONID = DL.DEDUCTIONID
		AND DD.BRANCHID = DL.BRANCHID
	SELECT BRANCHID,CHALLANID,CHALLANTOTAL,FORMID,QUARTER
	INTO #CHALLANDETAIL
	FROM CHALLANDETAIL WITH(NOLOCK)
	WHERE BRANCHID = @BRANCHID 
		AND FORMID = @FORMID 
		AND [QUARTER] = @QUARTER
  /*INSERTING LINKED CHALLAN*/    
  IF(@ISAUDITTRIAL = 0)  
   BEGIN  
      INSERT INTO @CHALLANCOUNT   
      SELECT CD.BRANCHID, CD.CHALLANID,CD.CHALLANTOTAL AS CHALLANTOTAL,CD.CHALLANTOTAL     
       FROM #CHALLANDETAIL CD WITH (NOLOCK)    
	   INNER JOIN     
       (  
		  SELECT CHALLANID FROM #DEDCHALINK L WITH (NOLOCK)     
		   INNER JOIN #DEDUCTIONDETAIL DD WITH (NOLOCK) ON L.DEDUCTIONID=DD.DEDUCTIONID AND L.BRANCHID=DD.BRANCHID                                        
		   WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER 
		  GROUP BY CHALLANID    
       ) DCL             
       ON CD.CHALLANID=DCL.CHALLANID    
   END  
 ELSE  
   BEGIN  
	   INSERT INTO @CHALLANCOUNT   
	   SELECT CD.BRANCHID, CD.CHALLANID,CD.CHALLANTOTAL AS CHALLANTOTAL,CD.CHALLANTOTAL     
		 FROM #CHALLANDETAIL CD WITH (NOLOCK)   
		INNER JOIN     
		   (  
			  SELECT CHALLANID FROM #DEDCHALINK L WITH (NOLOCK)    
			   INNER JOIN #DEDUCTIONDETAIL DD WITH (NOLOCK) ON L.DEDUCTIONID=DD.DEDUCTIONID AND L.BRANCHID=DD.BRANCHID                                        
			   WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND ISNULL(DD.TRANSSTATUS,2) = 2  
			  GROUP BY CHALLANID     
		   ) DCL             
		ON CD.CHALLANID=DCL.CHALLANID  
    END       
  /*INSERTING UNLINKED CHALLAN AND CHALLAN LINKED TO OTHER QUARTER*/    
    INSERT INTO @CHALLANCOUNT   
    SELECT CD.BRANCHID,CD.CHALLANID,CD.CHALLANTOTAL AS TOTAL, CD.CHALLANTOTAL    
	FROM #CHALLANDETAIL CD WITH (NOLOCK)    
    WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.QUARTER = @QUARTER
    EXCEPT 
    SELECT CD.BRANCHID, CD.CHALLANID,TOTAL,CD.CHALLANTOTAL 
    FROM @CHALLANCOUNT CD    
  SELECT COUNT(CHALLANID) AS CHALLANCOUNT,ISNULL(SUM(TOTAL),0) AS TOTALAMOUNT,ISNULL(SUM(CHALLANTOTAL),0) AS CHALLANTOTAL FROM @CHALLANCOUNT    
  IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
			DROP TABLE #DEDCHALINK
  IF OBJECT_ID('TEMPDB..#CHALLANDETAIL') IS NOT NULL
			DROP TABLE #CHALLANDETAIL
  IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
			DROP TABLE #DEDUCTIONDETAIL
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnChapterVIADetails')
DROP PROCEDURE USP_TDS_GetEReturnChapterVIADetails
GO
CREATE PROCEDURE USP_TDS_GetEReturnChapterVIADetails
 @SALARYDETAILID INT,  
 @FINYEAR INT = 2012 
AS    
	BEGIN    
		DECLARE @CHAPTERVIA TABLE(ID INT IDENTITY(1,1),SECTIONNAME VARCHAR(10),TOTALAMOUNT NUMERIC(12,2))   
		DECLARE @80CCESEC VARCHAR(MAX), @80CCFSEC VARCHAR(MAX), @80CCGSEC VARCHAR(MAX), @80OTHERS VARCHAR(MAX);   
		SET @80CCFSEC = '';   
		SET @80CCGSEC = '';  
    
		IF(@FINYEAR < 2010)  
		BEGIN   
			SET @80CCESEC = '80C,80CCC,80CCD';       
			SET @80OTHERS = '80D,80DD,80DDB,80E,80GG,80QQB,80RRB,80G,80U,80GGA,80GGC,80TTA,80CCG,80EE'  
		END   
		ELSE IF(@FINYEAR < 2011)  
		BEGIN   
			SET @80CCESEC = '80C,80CCC,80CCD';  
			SET @80CCFSEC = '80CCF';   
			SET @80OTHERS = '80D,80DD,80DDB,80E,80GG,80QQB,80RRB,80G,80U,80GGA,80GGC,80TTA,80CCG,80EE'   
		END  
		ELSE IF(@FINYEAR = 2011)  
		BEGIN   
			SET @80CCESEC = '80C,80CCC,80CCD(1)';  
			SET @80CCFSEC = '80CCF';   
			SET @80OTHERS = '80D,80DD,80DDB,80E,80GG,80QQB,80RRB,80G,80U,80GGA,80GGC,80TTA,80CCD(2),80EE'    
		END  
		ELSE IF(@FINYEAR = 2012)  
		BEGIN   
			SET @80CCESEC = '80C,80CCC,80CCD(1)';  
			SET @80CCGSEC = '80CCG';   
			SET @80OTHERS = '80D,80DD,80DDB,80E,80GG,80QQB,80RRB,80G,80U,80GGA,80GGC,80TTA,80CCD(2),80EE'    
		END  
		ELSE IF(@FINYEAR > 2012 AND @FINYEAR < 2017)  
		BEGIN  
			SET @80CCESEC = '80C,80CCC,80CCD(1)';  
			SET @80CCGSEC = '80CCG';    
			SET @80OTHERS = '80D,80DD,80DDB,80E,80GG,80QQB,80RRB,80G,80U,80GGA,80GGC,80TTA,80CCD(2),80EE,80CCD(1B)'    
		END 
		ELSE IF(@FINYEAR > 2017)  
		BEGIN  
			SET @80CCESEC = '80C,80CCC,80CCD(1)';  
			SET @80CCGSEC = '80CCG';    
			SET @80OTHERS = '80D,80DD,80DDB,80E,80GG,80QQB,80RRB,80G,80U,80GGA,80GGC,80TTA,80CCD(2),80EE,80CCD(1B),80TTB'    
		END   
     
		INSERT INTO @CHAPTERVIA SELECT '80CCE',SUM(DEDUCTIBLEAMOUNT) FROM CHAPTERVIADETAIL CD WITH(NOLOCK)		
		INNER JOIN SALARYSECTIONS SS WITH(NOLOCK) ON SS.SALARYSECTIONID = CD.SALARYSECTIONID    
		WHERE SALARYDETAILID = @SALARYDETAILID AND SS.SECTIONNAME IN (SELECT * FROM UDF_TDS_SPLITSTRING(@80CCESEC,','))  

		INSERT INTO @CHAPTERVIA SELECT '80CCF',SUM(DEDUCTIBLEAMOUNT) FROM CHAPTERVIADETAIL CD WITH(NOLOCK)    
		INNER JOIN SALARYSECTIONS SS WITH(NOLOCK) ON SS.SALARYSECTIONID = CD.SALARYSECTIONID    
		WHERE SALARYDETAILID = @SALARYDETAILID AND SS.SECTIONNAME IN (SELECT * FROM UDF_TDS_SPLITSTRING(@80CCFSEC,','))    

		INSERT INTO @CHAPTERVIA SELECT '80CCG',SUM(DEDUCTIBLEAMOUNT) FROM CHAPTERVIADETAIL CD WITH(NOLOCK)    
		INNER JOIN SALARYSECTIONS SS WITH(NOLOCK) ON SS.SALARYSECTIONID = CD.SALARYSECTIONID    
		WHERE SALARYDETAILID = @SALARYDETAILID AND SS.SECTIONNAME IN (SELECT * FROM UDF_TDS_SPLITSTRING(@80CCGSEC,','))     

		INSERT INTO @CHAPTERVIA SELECT 'OTHERS',SUM(DEDUCTIBLEAMOUNT) FROM CHAPTERVIADETAIL CD WITH(NOLOCK)    
		INNER JOIN SALARYSECTIONS SS WITH(NOLOCK) ON SS.SALARYSECTIONID = CD.SALARYSECTIONID    
		WHERE SALARYDETAILID = @SALARYDETAILID AND SS.SECTIONNAME IN (SELECT * FROM UDF_TDS_SPLITSTRING(@80OTHERS,','))    

		SELECT SECTIONNAME,TOTALAMOUNT FROM @CHAPTERVIA WHERE TOTALAMOUNT > 0
		ORDER BY SECTIONNAME    
	END  
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNCOUNT')
DROP PROCEDURE USP_TDS_GETERETURNCOUNT
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETERETURNCOUNT]
AS
 BEGIN
  SELECT
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=1 AND [QUARTER]=1 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F24Q1COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=1 AND [QUARTER]=2 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F24Q2COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=1 AND [QUARTER]=3 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F24Q3COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=1 AND [QUARTER]=4 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F24Q4COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=2 AND [QUARTER]=1 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F26Q1COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=2 AND [QUARTER]=2 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F26Q2COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=2 AND [QUARTER]=3 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F26Q3COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=2 AND [QUARTER]=4 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F26Q4COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=3 AND [QUARTER]=1 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F27Q1COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=3 AND [QUARTER]=2 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F27Q2COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=3 AND [QUARTER]=3 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F27Q3COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=3 AND [QUARTER]=4 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F27Q4COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=4 AND [QUARTER]=1 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F27EQ1COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=4 AND [QUARTER]=2 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F27EQ2COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=4 AND [QUARTER]=3 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F27EQ3COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE FORMID=4 AND [QUARTER]=4 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F27EQ4COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE FORMID=1 AND [QUARTER]=1 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F15GQ1COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE FORMID=1 AND [QUARTER]=2 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F15GQ2COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE FORMID=1 AND [QUARTER]=3 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F15GQ3COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE FORMID=1 AND [QUARTER]=4 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F15GQ4COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE FORMID=2 AND [QUARTER]=1 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F15HQ1COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE FORMID=2 AND [QUARTER]=2 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F15HQ2COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE FORMID=2 AND [QUARTER]=3 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F15HQ3COUNT,
  (SELECT  COUNT(ACKID) FROM ACKNO15GH WITH(NOLOCK) WHERE FORMID=2 AND [QUARTER]=4 AND LEN(ORGNUM)>0 AND ISVALID=1) AS F15HQ4COUNT
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnDeducteeCountAndAmount')
DROP PROCEDURE USP_TDS_GetEReturnDeducteeCountAndAmount
GO
-- [USP_TDS_GetEReturnDeducteeCountAndAmount] 5273, 2, 1, 1, 2018, 0, 1   
CREATE PROCEDURE [dbo].[USP_TDS_GetEReturnDeducteeCountAndAmount] 
 @BRANCHID INT,      
 @FORMID INT,      
 @QUARTER INT,      
 @ISEXCLUDED BIT,      
 @FINANCIALYEAR INT=NULL  ,      
 @ISIB BIT,      
 @ISAUDITTRIAL BIT = 0      
AS      
 BEGIN      
  DECLARE @TABLEDEDDUCTEECOUNT TABLE(ID INT IDENTITY(1,1),DEDUCTEEID INT,DEDUCTIONID INT,BRANCHID INT,FORMID INT,QUARTER INT,TAXDEDUCTED NUMERIC(16,2),PAYMENTMADE NUMERIC(16,2), TRANSSTATUS INT)      
  DECLARE @SQLQUERY NVARCHAR(MAX);     
  SELECT DEDUCTIONID, BRANCHID, FORMID, QUARTER, DEDUCTEEID, INCOMETAXRATE, TAXRATE, TRANSSTATUS, PAYMENTMADE, TOTALDEDUCTED, NONDEDREASON  
  INTO #DEDUCTIONDETAIL  
  FROM DEDUCTIONDETAIL WITH(NOLOCK)  
  WHERE BRANCHID = @BRANCHID   
   AND FORMID = @FORMID   
   AND QUARTER = @QUARTER  
  SELECT DL.BRANCHID, DL.DEDUCTIONID, CHALLANID  
  INTO #DEDCHALINK  
  FROM DEDCHALINK DL WITH(NOLOCK)  
  INNER JOIN #DEDUCTIONDETAIL DD  
  ON DL.DEDUCTIONID = DD.DEDUCTIONID  
  SELECT DISTINCT D.DEDUCTEEID,   
   CASE WHEN @FORMID <> 1 THEN   
     CASE WHEN D.PAN LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 1     
     ELSE 0  END  
    WHEN @FORMID = 1 THEN   
     CASE WHEN D.PAN LIKE '[A-Z][A-Z][A-Z][P][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 1     
     ELSE 0 END     
   END AS ISVALID    
  INTO #DEDUCTEE  
  FROM DEDUCTEE D WITH(NOLOCK)    
  INNER JOIN #DEDUCTIONDETAIL DD    
  ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID     
    SELECT DD.DEDUCTIONID, DD.DEDUCTEEID, BRANCHID, FORMID, QUARTER, ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS, TOTALDEDUCTED,   
     NONDEDREASON, PAYMENTMADE, TAXRATE, INCOMETAXRATE  
  INTO #REQDEDUCTIONS  
  FROM #DEDUCTIONDETAIL DD                 
  WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER  
  IF(@ISEXCLUDED = 1)      
   BEGIN        
    SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.[QUARTER],  
     DD.TOTALDEDUCTED,DD.PAYMENTMADE,ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS      
    INTO #TEMP1  
    FROM #REQDEDUCTIONS DD     
     INNER JOIN #DEDUCTEE D WITH(NOLOCK)   
      ON D.DEDUCTEEID =DD.DEDUCTEEID     
     INNER JOIN #DEDCHALINK DCL WITH(NOLOCK)   
      ON DD.DEDUCTIONID=DCL.DEDUCTIONID  AND DD.BRANCHID = DCL.BRANCHID    
    WHERE DD.FORMID = 1   
     AND ((ISNULL(D.ISVALID, 0) = 1) OR NOT (ISNULL(D.ISVALID, 0) = 0 AND DD.NONDEDREASON = 3   
     AND DD.PAYMENTMADE > DD.TOTALDEDUCTED))  
     AND NOT (ISNULL(D.ISVALID, 0) = 0 AND DD.NONDEDREASON <> 3)  
    SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.[QUARTER],  
     DD.TOTALDEDUCTED,DD.PAYMENTMADE,ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS      
    INTO #TEMP2  
    FROM #REQDEDUCTIONS DD     
     INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID     
    WHERE DD.FORMID = 1   
     AND ((D.ISVALID = 0 AND DD.NONDEDREASON = 3) OR D.ISVALID = 1)   
     AND DD.TOTALDEDUCTED = 0  
    SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.[QUARTER],  
     DD.TOTALDEDUCTED,DD.PAYMENTMADE,ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS      
    INTO #TEMP3  
    FROM #REQDEDUCTIONS DD     
     INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID     
    WHERE DD.FORMID IN (2, 3)   
     AND ((D.ISVALID = 0 AND DD.NONDEDREASON = 3) OR D.ISVALID = 1)   
     AND DD.TOTALDEDUCTED = 0  
    SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.[QUARTER],  
     DD.TOTALDEDUCTED,DD.PAYMENTMADE,ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS      
    INTO #TEMP4  
    FROM #REQDEDUCTIONS DD     
     INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID     
    WHERE DD.FORMID IN (2, 3)   
     AND ((ISNULL(D.ISVALID, 0) = 1) OR NOT (ISNULL(D.ISVALID, 0) = 0 AND DD.NONDEDREASON = 3  
     AND DD.INCOMETAXRATE = 20   
     AND (((DD.PAYMENTMADE * (DD.INCOMETAXRATE / 100)) * 0.9)   
       - (CASE WHEN (DD.TOTALDEDUCTED <= 3 AND DD.PAYMENTMADE <= 20) THEN 0 ELSE 2 END))  
      > DD.TOTALDEDUCTED))  
     AND NOT (ISNULL(D.ISVALID, 0) = 0 AND DD.NONDEDREASON <> 3)  
    SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.[QUARTER],  
     DD.TOTALDEDUCTED,DD.PAYMENTMADE,ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS      
    INTO #TEMP5  
    FROM #REQDEDUCTIONS DD     
     INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID     
    WHERE DD.FORMID IN (2, 3)   
     AND ((ISNULL(D.ISVALID, 0) = 1) OR (ISNULL(D.ISVALID, 0) = 0 AND DD.NONDEDREASON = 3 AND DD.INCOMETAXRATE <> 20))  
    INSERT INTO @TABLEDEDDUCTEECOUNT       
    SELECT * FROM #TEMP1  
    UNION   
    SELECT * FROM #TEMP2  
    UNION   
    SELECT * FROM #TEMP3  
    UNION   
    SELECT * FROM #TEMP4  
    UNION   
    SELECT * FROM #TEMP5  
   END      
  ELSE      
   BEGIN    
    SET @SQLQUERY = '  
     SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.TOTALDEDUCTED,DD.PAYMENTMADE,      
      ISNULL(DD.TRANSSTATUS,0)TRANSSTATUS      
     INTO #TEMP1  
     FROM #REQDEDUCTIONS DD WITH(NOLOCK)    
      INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID       
      INNER JOIN #DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID AND DD.BRANCHID=DCL.BRANCHID      
     WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +   
      ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) +   
      ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +   
      ' AND DD.TOTALDEDUCTED > 0'     
    IF(@FORMID <> 1)  
     BEGIN   
      IF @ISIB = 1      
       BEGIN      
        SET @SQLQUERY = @SQLQUERY + ' AND ((D.ISVALID = 0 AND DD.NONDEDREASON = 3) OR D.ISVALID = 1)'            
        SET @SQLQUERY = @SQLQUERY + '     
         SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.TOTALDEDUCTED,DD.PAYMENTMADE, DD.TRANSSTATUS      
         INTO #TEMP2  
         FROM #REQDEDUCTIONS DD WITH(NOLOCK)      
          INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID       
         WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +   
          ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) +   
          ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +   
          ' AND D.ISVALID = 1 ' +   
          ' AND DD.NONDEDREASON IN (0,1,2,4,6)   
            AND DD.TOTALDEDUCTED = 0   
          SELECT * FROM #TEMP1  
          UNION   
          SELECT * FROM #TEMP2'      
       END   
      ELSE  
       BEGIN  
        SET @SQLQUERY = @SQLQUERY + '     
         SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.TOTALDEDUCTED,DD.PAYMENTMADE, DD.TRANSSTATUS      
         INTO #TEMP2  
         FROM #REQDEDUCTIONS DD WITH(NOLOCK)      
          INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID       
         WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +   
          ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) +   
          ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +   
          ' AND DD.TOTALDEDUCTED = 0   
         SELECT * FROM #TEMP1  
         UNION   
         SELECT * FROM #TEMP2'      
       END  
     END     
    ELSE  
     BEGIN  
      SET @SQLQUERY = @SQLQUERY + '    
       SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.TOTALDEDUCTED,DD.PAYMENTMADE,      
        ISNULL(DD.TRANSSTATUS,0)TRANSSTATUS      
       INTO #TEMP2  
       FROM #REQDEDUCTIONS DD WITH(NOLOCK)    
       INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID       
       WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +   
        ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) +   
        ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +   
        ' AND DD.TOTALDEDUCTED = 0   
       SELECT * FROM #TEMP1  
       UNION   
       SELECT * FROM #TEMP2'  
     END       
    INSERT INTO @TABLEDEDDUCTEECOUNT      
    EXECUTE SP_EXECUTESQL @SQLQUERY      
   END    
  IF(@ISAUDITTRIAL = 0)      
   BEGIN      
    SELECT COUNT(DISTINCT DEDUCTIONID) AS DEDUCTEECOUNT,  
     ISNULL(SUM(TAXDEDUCTED),0) AS TAXDEDUCTED,  
     ISNULL(SUM(PAYMENTMADE),0) AS PAYMENTMADE      
    FROM @TABLEDEDDUCTEECOUNT      
   END      
  ELSE      
   BEGIN      
    SELECT COUNT(DISTINCT DEDUCTIONID) AS DEDUCTEECOUNT,  
     ISNULL(SUM(TAXDEDUCTED),0) AS TAXDEDUCTED,  
     ISNULL(SUM(PAYMENTMADE),0) AS PAYMENTMADE      
    FROM @TABLEDEDDUCTEECOUNT WHERE ISNULL(TRANSSTATUS,2) = 2      
   END  
  IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL  
  DROP TABLE #DEDUCTIONDETAIL  
  IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL   
  DROP TABLE #DEDUCTEE  
  IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL  
  DROP TABLE #DEDCHALINK  
  IF OBJECT_ID('TEMPDB..#REQDEDUCTIONS') IS NOT NULL  
  DROP TABLE #REQDEDUCTIONS  
  IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL  
  DROP TABLE #TEMP1  
  IF OBJECT_ID('TEMPDB..#TEMP2') IS NOT NULL  
  DROP TABLE #TEMP2  
  IF OBJECT_ID('TEMPDB..#TEMP3') IS NOT NULL  
  DROP TABLE #TEMP3  
  IF OBJECT_ID('TEMPDB..#TEMP4') IS NOT NULL  
  DROP TABLE #TEMP4  
  IF OBJECT_ID('TEMPDB..#TEMP5') IS NOT NULL  
  DROP TABLE #TEMP5  
 END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNDETAILEDSUMMARY')
DROP PROCEDURE USP_TDS_GETERETURNDETAILEDSUMMARY
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETERETURNDETAILEDSUMMARY]
	@USERID INT,
	@FILTER VARCHAR(MAX)
AS
	BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX);
	DECLARE @ISBRANCHADMIN BIT;
	SELECT CD.BRANCHID,CD.FORMID,CD.QUARTER,SUM(CD.CHALLANTOTAL) AS BFQCHALLANTOTAL
	INTO #CHALLANTOTAL
	FROM CHALLANDETAIL CD WITH(NOLOCK)
	INNER JOIN ACKNO A WITH(NOLOCK)
	ON CD.BRANCHID=A.BRANCHID AND CD.FORMID=A.FORMID AND CD.QUARTER=A.QUARTER
	GROUP BY CD.BRANCHID,CD.FORMID,CD.QUARTER
	SELECT DD.BRANCHID,DD.FORMID,DD.QUARTER,SUM(DD.TOTALDEDUCTED) AS BFQTOTALDEDUCTED
	INTO #TOTALDEDUCTED
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN ACKNO A WITH(NOLOCK)
	ON DD.BRANCHID=A.BRANCHID AND DD.FORMID=A.FORMID AND DD.QUARTER=A.QUARTER
	GROUP BY DD.BRANCHID,DD.FORMID,DD.QUARTER
	SET @SQLQUERY = '
	SELECT CB.BRANCHNAME + ''('' + CB.BRANCHCODE + '')'' AS BRANCHNAME, 
	ISNULL(CB1.BRANCHNAME,'''') AS PARENTBRANCHNAME, FD.FORMNAME + ''Q'' AS FORMNAME,
	CASE WHEN A.[QUARTER] = 1 THEN ''Q1'' 
	ELSE CASE WHEN A.[QUARTER] = 2 THEN ''Q2'' 
		ELSE CASE WHEN A.[QUARTER] = 3 THEN ''Q3'' 
		   ELSE CASE WHEN A.[QUARTER] = 4 THEN ''Q4'' 
			  ELSE '''' 
			  END
		   END
		END
	END AS [QUARTER],
	CASE WHEN (LEN(A.ORGNUM) > 0) THEN ''Filed''
	ELSE CASE WHEN (A.ISVALID IS NULL) THEN ''''
		ELSE CASE WHEN (A.ISVALID = 1) THEN ''Validated''
		   ELSE CASE WHEN (A.ISVALID = 0) THEN ''Invalid''
		   END 
		END 
	END 
	END AS ERETURNSTATUS, 
	A.ERETURNGENDATE, A.ORGNUM, A.ORGFILEDDATE, SUM(BFQTOTALDEDUCTED) AS TOTALDEDUCTED, SUM(BFQCHALLANTOTAL) AS CHALLANTOTAL 
	FROM ACKNO A WITH(NOLOCK)
	INNER JOIN #TOTALDEDUCTED DD WITH(NOLOCK)
	ON A.BRANCHID=DD.BRANCHID AND A.QUARTER = DD.QUARTER AND A.FORMID=DD.FORMID
	INNER JOIN #CHALLANTOTAL CD WITH(NOLOCK)
	ON A.BRANCHID=CD.BRANCHID AND A.QUARTER = CD.QUARTER AND A.FORMID=CD.FORMID
	INNER JOIN FORMDETAILS FD WITH(NOLOCK) 
	ON A.FORMID = FD.FORMID
	LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) 
	ON A.BRANCHID = CB.BRANCHID
	LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) 
	ON CB1.BRANCHID = CB.PARENTBRANCHID
	';
	IF(@USERID <> -1)
		BEGIN
			SET @ISBRANCHADMIN = (SELECT ISBRANCHADMIN FROM USERMASTER WITH(NOLOCK) WHERE USERID = @USERID);
			IF(@ISBRANCHADMIN = 1)
			BEGIN							
				SET @SQLQUERY = @SQLQUERY + ' WHERE CB.PARENTBASEID LIKE 
					   CAST((SELECT PARENTBASEID 
							 FROM COMPANYBRANCH WITH(NOLOCK) 
							 WHERE BRANCHID = (SELECT BRANCHID FROM USERMASTER WITH(NOLOCK) 
									   WHERE USERID = ' + CAST(@USERID AS VARCHAR) + ')) AS VARCHAR) + ''%'' AND '	
				SET @SQLQUERY = @SQLQUERY + @FILTER;
				SET @SQLQUERY = @SQLQUERY + ' GROUP BY CB.BRANCHNAME, CB.PARENTBASEID, CB.BRANCHCODE, CB1.BRANCHNAME, FD.FORMNAME, A.[QUARTER], A.ORGNUM, A.ISVALID, A.ERETURNGENDATE, A.ORGNUM, A.ORGFILEDDATE';
				SET @SQLQUERY = @SQLQUERY + ' ORDER BY A.[QUARTER]';
			END
			ELSE
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' LEFT JOIN USERMASTER UM WITH(NOLOCK) 
					   ON A.BRANCHID = UM.BRANCHID 
					WHERE UM.USERID = ' + CAST(@USERID AS VARCHAR) + ' AND ';
				SET @SQLQUERY = @SQLQUERY + @FILTER;
				SET @SQLQUERY = @SQLQUERY + ' GROUP BY CB.BRANCHNAME, CB.PARENTBASEID, CB.BRANCHCODE, CB1.BRANCHNAME, FD.FORMNAME, A.[QUARTER], A.ORGNUM, A.ISVALID, A.ERETURNGENDATE, A.ORGNUM, A.ORGFILEDDATE';
				SET @SQLQUERY = @SQLQUERY + ' ORDER BY A.[QUARTER]';
			END	
		END
	ELSE
		BEGIN				
			SET @SQLQUERY = @SQLQUERY + ' WHERE ' + @FILTER;
			SET @SQLQUERY = @SQLQUERY + ' GROUP BY CB.BRANCHNAME, CB.PARENTBASEID, CB.BRANCHCODE, CB1.BRANCHNAME, FD.FORMNAME, A.[QUARTER], A.ORGNUM, A.ISVALID, A.ERETURNGENDATE, A.ORGNUM, A.ORGFILEDDATE';
			SET @SQLQUERY = @SQLQUERY + ' ORDER BY CB.PARENTBASEID, A.[QUARTER]';
		END
	EXEC SP_EXECUTESQL @SQLQUERY;
	DROP TABLE #TOTALDEDUCTED
	DROP TABLE #CHALLANTOTAL				
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNDETAILS')
DROP PROCEDURE USP_TDS_GETERETURNDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETERETURNDETAILS]      
 @BRANCHID INT,  
 @F24ACK INT = -1,  
 @F26ACK INT = -1,  
 @F27ACK INT = -1,  
 @F27EACK INT = -1,  
 @F24ERETURN INT = -1,  
 @F26ERETURN INT = -1,  
 @F27ERETURN INT = -1,  
 @F27EERETURN INT = -1    
AS    
  BEGIN    
  SELECT CASE WHEN TT.FORMID = 1 THEN 'FORM24'      
      WHEN TT.FORMID = 2 THEN 'FORM26'      
      WHEN TT.FORMID = 3 THEN 'FORM27'      
      ELSE 'FORM27E' END AS FORM,       
    CASE WHEN TT.QUARTER = 1 THEN 'QUARTER 1'      
         WHEN TT.QUARTER = 2 THEN 'QUARTER 2'      
      WHEN TT.QUARTER = 3 THEN 'QUARTER 3'      
      ELSE 'QUARTER 4' END AS QUARTER,     
    CASE WHEN (A.ACKID IS NULL OR ISVALID = 0) THEN 'E-RETURN IS NOT DONE'       
      WHEN LEN(ISNULL(ORGNUM,'')) = 0 THEN 'ACKNOWLEDGEMENT NO. IS NOT ENTERED'     
  END AS REMARKS INTO #WARNBRANCH FROM     
  (    
   SELECT * FROM     
   (    
    SELECT DD.BRANCHID, DD.FORMID, DD.QUARTER    
    FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
    LEFT JOIN ACKNO A WITH(NOLOCK) ON A.BRANCHID = DD.BRANCHID   
      AND A.FORMID = DD.FORMID AND A.QUARTER = DD.QUARTER      
    WHERE DD.BRANCHID = @BRANCHID      
    GROUP BY DD.BRANCHID, DD.FORMID, DD.QUARTER, A.ACKID, A.ORGNUM    
   )T    
  EXCEPT    
   SELECT DD.BRANCHID ,DD.FORMID, DD.QUARTER    
   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)      
   INNER JOIN ACKNO A WITH(NOLOCK) ON A.BRANCHID = DD.BRANCHID AND A.FORMID = DD.FORMID AND A.QUARTER = DD.QUARTER      
   WHERE DD.BRANCHID = @BRANCHID AND A.ISVALID = 1 AND LEN(ISNULL(A.ORGNUM,'')) = 15    
   GROUP BY DD.BRANCHID, DD.FORMID, DD.QUARTER, A.ACKID, A.ORGNUM    
  )TT    
  LEFT JOIN ACKNO A WITH(NOLOCK) ON A.BRANCHID = TT.BRANCHID AND A.FORMID = TT.FORMID AND A.QUARTER = TT.QUARTER     
  IF @F24ACK = 0 DELETE FROM #WARNBRANCH WHERE FORM ='FORM24' AND REMARKS='ACKNOWLEDGEMENT NO. IS NOT ENTERED'  
  IF @F26ACK = 0 DELETE FROM #WARNBRANCH WHERE FORM ='FORM26' AND REMARKS='ACKNOWLEDGEMENT NO. IS NOT ENTERED'  
  IF @F27ACK = 0 DELETE FROM #WARNBRANCH WHERE FORM ='FORM27' AND REMARKS='ACKNOWLEDGEMENT NO. IS NOT ENTERED'  
  IF @F27EACK = 0 DELETE FROM #WARNBRANCH WHERE FORM ='FORM27E' AND REMARKS='ACKNOWLEDGEMENT NO. IS NOT ENTERED'  
  IF @F24ERETURN = 0 DELETE FROM #WARNBRANCH WHERE FORM ='FORM24' AND REMARKS='E-RETURN IS NOT DONE'  
  IF @F26ERETURN = 0 DELETE FROM #WARNBRANCH WHERE FORM ='FORM26' AND REMARKS='E-RETURN IS NOT DONE'  
  IF @F27ERETURN = 0 DELETE FROM #WARNBRANCH WHERE FORM ='FORM27' AND REMARKS='E-RETURN IS NOT DONE'  
  IF @F27EERETURN = 0 DELETE FROM #WARNBRANCH WHERE FORM ='FORM27E' AND REMARKS='E-RETURN IS NOT DONE'  
  SELECT * FROM #WARNBRANCH WHERE LEN(REMARKS) > 0    
  END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnDummyChallanCountAndAmount')
DROP PROCEDURE USP_TDS_GetEReturnDummyChallanCountAndAmount
GO
CREATE PROCEDURE [USP_TDS_GetEReturnDummyChallanCountAndAmount] 
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @ISEXCLUDED BIT, 
 @ISIB BIT = 0,  
 @ISAUDITTRIAL BIT = 0  
AS    
 BEGIN    
	 DECLARE @SQLQUERY NVARCHAR(MAX);  
		 SELECT D.DEDUCTEEID,
			   CASE WHEN D.PAN LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 1          
						 ELSE 0     
				END AS ISVALID  
				INTO #DEDUCTEE
			 FROM DEDUCTEE D WITH (NOLOCK)
			 INNER JOIN
			 (
				SELECT DEDUCTEEID FROM DEDUCTIONDETAIL WITH (NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
				GROUP BY DEDUCTEEID
			 )DD ON D.DEDUCTEEID = DD.DEDUCTEEID 
			GROUP BY D.DEDUCTEEID, D.PAN
		SELECT DEDUCTIONID INTO #DEDUCTION FROM DEDUCTIONDETAIL DD WITH (NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
   		SELECT DEDUCTIONID INTO #DEDCHA FROM DEDCHALINK DCL WITH (NOLOCK) WHERE BRANCHID = @BRANCHID 
   	    SELECT DEDUCTIONID INTO #DEDUCTIONID FROM
		(
			SELECT DEDUCTIONID FROM #DEDUCTION D WHERE
			NOT EXISTS
			(
				SELECT DEDUCTIONID FROM #DEDCHA DC WHERE D.DEDUCTIONID = DC.DEDUCTIONID
			)
		)DE   
	 SET @SQLQUERY='SELECT DISTINCT DD.SECTIONID
							  INTO #DUMMY
							  FROM DEDUCTIONDETAIL DD   WITH (NOLOCK)	
							  INNER JOIN #DEDUCTIONID DE ON DD.DEDUCTIONID = DE.DEDUCTIONID          				  
							  INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID    
							  WHERE DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND
	   									DD.[QUARTER]='+CAST(@QUARTER AS VARCHAR)+' AND DD.TOTALDEDUCTED = 0'    
	  IF(@ISAUDITTRIAL = 1)
	   BEGIN  
		 SET @SQLQUERY = @SQLQUERY+' AND ISNULL(DD.TRANSSTATUS,1) = 2'
	   END  
	  IF(@ISIB = 1)
		BEGIN
			SET @SQLQUERY = @SQLQUERY+ ' AND DD.NONDEDREASON IN (0,1,2,4,6) '
		END
	  IF(@ISEXCLUDED=1)   
		BEGIN  
			SET @SQLQUERY = @SQLQUERY+' AND D.ISVALID = 1'  
		END   
	   SET @SQLQUERY= @SQLQUERY + ' SELECT COUNT(SECTIONID) AS CHALLANCOUNT, 0 AS TOTALAMOUNT, 0 AS CHALLANTOTAL FROM #DUMMY'  
	   EXEC SP_EXECUTESQL @SQLQUERY    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNFILEDSUMMARY')
DROP PROCEDURE USP_TDS_GETERETURNFILEDSUMMARY
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETERETURNFILEDSUMMARY]
@WITH15GH BIT
AS
 BEGIN
 IF(@WITH15GH = 1)
 BEGIN
  SELECT CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')' AS BRANCHNAME,ISNULL(CB1.BRANCHNAME,'') AS PARENTBRANCHNAME,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=1),'') F24Q1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=2),'') F24Q2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=3),'') F24Q3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=4),'') F24Q4,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=1),'') F26Q1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=2),'') F26Q2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK)  WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=3),'') F26Q3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=4),'') F26Q4,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 3 AND  QUARTER=1),'') F27Q1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 3 AND  QUARTER=2),'') F27Q2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 3 AND  QUARTER=3),'') F27Q3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 3 AND  QUARTER=4),'') F27Q4,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 4 AND  QUARTER=1),'') F27EQ1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 4 AND  QUARTER=2),'') F27EQ2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 4 AND  QUARTER=3),'') F27EQ3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 4 AND  QUARTER=4),'') F27EQ4,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO15GH WITH(NOLOCK) WHERE ACKNO15GH.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=1),'') F15GQ1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO15GH WITH(NOLOCK) WHERE ACKNO15GH.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=2),'') F15GQ2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO15GH WITH(NOLOCK) WHERE ACKNO15GH.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=3),'') F15GQ3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO15GH WITH(NOLOCK) WHERE ACKNO15GH.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=4),'') F15GQ4,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO15GH WITH(NOLOCK) WHERE ACKNO15GH.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=1),'') F15HQ1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO15GH WITH(NOLOCK) WHERE ACKNO15GH.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=2),'') F15HQ2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO15GH WITH(NOLOCK)  WHERE ACKNO15GH.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=3),'') F15HQ3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO15GH WITH(NOLOCK) WHERE ACKNO15GH.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=4),'') F15HQ4
  FROM COMPANYBRANCH CB WITH(NOLOCK)
  LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON CB1.BRANCHID = CB.PARENTBRANCHID
  ORDER BY CB.PARENTBASEID
 END
 ELSE
 BEGIN
  SELECT CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')' AS BRANCHNAME,ISNULL(CB1.BRANCHNAME,'') AS PARENTBRANCHNAME,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=1),'') F24Q1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=2),'') F24Q2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=3),'') F24Q3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 1 AND  QUARTER=4),'') F24Q4,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=1),'') F26Q1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=2),'') F26Q2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK)  WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=3),'') F26Q3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 2 AND  QUARTER=4),'') F26Q4,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 3 AND  QUARTER=1),'') F27Q1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 3 AND  QUARTER=2),'') F27Q2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 3 AND  QUARTER=3),'') F27Q3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 3 AND  QUARTER=4),'') F27Q4,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 4 AND  QUARTER=1),'') F27EQ1,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 4 AND  QUARTER=2),'') F27EQ2,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 4 AND  QUARTER=3),'') F27EQ3,
   ISNULL((SELECT CASE WHEN LEN(ORGNUM)>0 THEN 'FILED' ELSE '' END FROM ACKNO WITH(NOLOCK) WHERE ACKNO.BRANCHID=CB.BRANCHID AND FORMID = 4 AND  QUARTER=4),'') F27EQ4
  FROM COMPANYBRANCH CB WITH(NOLOCK)
  LEFT JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON CB1.BRANCHID = CB.PARENTBRANCHID
  ORDER BY CB.PARENTBASEID
 END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNHISTORY')
DROP PROCEDURE USP_TDS_GETERETURNHISTORY
GO
CREATE PROCEDURE USP_TDS_GETERETURNHISTORY            
@BRANCHID INT,            
@FORMID INT,            
@QUARTER INT          
AS            
BEGIN            
DECLARE @SQLQUERY NVARCHAR(MAX)            
SET @SQLQUERY = 'SELECT A.ACKID,A.BRANCHID,A.FORMID,A.QUARTER,RECEIPTNO,ORGNUM,        
CASE WHEN FILEDDATE IS NULL THEN ORGFILEDDATE ELSE FILEDDATE        
                 END AS FILEDDATE,        
                 ISVALID,ISREQACTIVE,QUEUEID FROM ACKNO A WITH(NOLOCK)       
LEFT JOIN CORRECTIONDETAILS CD WITH(NOLOCK) ON A.BRANCHID = CD.BRANCHID AND A.FORMID = CD.FORMID AND A.QUARTER = CD.QUARTER        
INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON A.BRANCHID = CB.BRANCHID             
WHERE A.BRANCHID ='+CAST(@BRANCHID AS VARCHAR) +' AND ISVALID = 1 AND (REVISENUMBER IS NULL OR REVISENUMBER = 1)';            
IF(@FORMID <> -1)            
SET @SQLQUERY = @SQLQUERY + 'AND A.FORMID ='+CAST(@FORMID AS VARCHAR);            
IF(@QUARTER <> -1)            
SET @SQLQUERY = @SQLQUERY + 'AND A.QUARTER ='+CAST(@QUARTER AS VARCHAR);            
END            
EXEC SP_EXECUTESQL @SQLQUERY
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnLinkedChallan')
DROP PROCEDURE USP_TDS_GetEReturnLinkedChallan
GO
CREATE PROCEDURE [USP_TDS_GetEReturnLinkedChallan] 
 @BRANCHID INT,        
 @FORMID INT,        
 @QUARTER INT,        
 @ISAUDITTRIAL BIT = 0      
AS        
 BEGIN        
   DECLARE @SQLQUERY NVARCHAR(MAX);    
   SET @SQLQUERY = 'SELECT CD.BRANCHID AS BRANCHID,CD.CHALLANID AS CHALLANID,CD.FORMID AS FORMTYPE,CD.[QUARTER] AS [QUARTER],CD.ERETURNID AS ERETURNID,        
									 LINKDEDCOUNT AS LINKDEDUCTIONCOUNT,ISNILCHALLAN AS ISNILLCHALLAN,ISUPDATECHALLAN AS ISUPDATECHALLAN,        
									 MODEOFPAYMENT AS MODEOFPAYMENT,BANKCHALLANNO AS BANKCHALLANNUMBER,LASTBANKCHALLANNO AS LASTBANKCHALLANNUMBER,        
									 TRNVOUCHERNO AS TRANSFERVOUCHERNUMBER,LASTTRNVOUCHERNO AS LASTTRANSFERVOUCHERNUMBER,CD.BANKID AS BANKID,        
									 LASTBANKID AS LASTBANKID,CHALLANPAIDDATE AS CHALLANPAIDDATE,LASTCHALLANPAIDDATE AS LASTCHALLANPAIDDATE,        
									 DATEOFDEBIT AS DATEOFDEBIT,CD.SECTIONID AS SECTIONID,TAXSECTIONS.SECTIONNAME AS SECTIONNAME,        
									 REMITTINGBANK.BSRCODE AS BANKCODE,CD.INCOMETAX AS INCOMETAX,CD.SURCHARGE AS SURCHARGE,CD.EDUCATIONCESS AS EDUCATIONCESS,        
									 INTEREST AS INTEREST,OTHERS AS OTHERS,PENALTY AS PENALTY,CHALLANTOTAL AS CHALLANTOTALAMOUNT,        
									 LASTCHALLANTOTAL AS LASTCHALLANTOTALAMOUNT,ISCOMPANY AS ISCOMPANY,CASE WHEN ISNULL(CHEQUENO,'''') <> '''' THEN CHEQUENO ELSE '''' END AS CHEQUENUMBER,CHEQUEDATE AS CHEQUEDATE,        
									 CHEQUEDRAWNON AS CHEQUEDRAWNON,TRANREFNO AS TRANSFERREFERENCENUMBER,ISNULL(CD.TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER,  
									 CD.FEE,CASE WHEN ISNULL(CD.MINORHEAD,-1) = -1 THEN 200 ELSE CD.MINORHEAD END AS MINORHEAD
								   FROM CHALLANDETAIL CD WITH (NOLOCK)        
								   INNER JOIN         
								   (      
										SELECT DISTINCT CHALLANID FROM DEDCHALINK L WITH (NOLOCK)        
										INNER JOIN DEDUCTIONDETAIL DD WITH (NOLOCK) ON L.DEDUCTIONID=DD.DEDUCTIONID AND L.BRANCHID=DD.BRANCHID        
										WHERE DD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = '+ CAST(@FORMID AS VARCHAR) + ' AND 
												  DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) 
  IF(@ISAUDITTRIAL = 1)      
   BEGIN  
	     SET @SQLQUERY = @SQLQUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'
   END  
		SET @SQLQUERY = @SQLQUERY + ' ) DCL ON CD.CHALLANID=DCL.CHALLANID        
									 INNER JOIN TAXSECTIONS WITH (NOLOCK) ON  CD.SECTIONID = TAXSECTIONS.SECTIONID         
									 LEFT JOIN REMITTINGBANK WITH (NOLOCK) ON CD.BANKID=REMITTINGBANK.BANKID         
									 WHERE CD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR) + '  AND CD.FORMID = '+ CAST(@FORMID AS VARCHAR) 
   EXEC SP_EXECUTESQL @SQLQUERY  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnLinkedDeduction')
DROP PROCEDURE USP_TDS_GetEReturnLinkedDeduction
GO
CREATE PROCEDURE USP_TDS_GetEReturnLinkedDeduction 
    @BRANCHID INT ,          
    @FORMID INT,          
    @QUARTER INT,          
    @CHALLANID INT,          
    @ISEXCLUDED BIT,    
    @ISAUDITTRIAL BIT = 0          
AS          
    BEGIN          
	   IF(@FORMID = 1)
		  BEGIN 
			 EXEC USP_TDS_GetEReturnLinkedDeductionEmployee @BRANCHID ,@FORMID ,@QUARTER ,@CHALLANID ,@ISEXCLUDED ,@ISAUDITTRIAL  
		  END  
	   ELSE
		  BEGIN 
			  EXEC USP_TDS_GetEReturnLinkedDeductionNonEmployee @BRANCHID ,@FORMID ,@QUARTER ,@CHALLANID ,@ISEXCLUDED ,@ISAUDITTRIAL  
		  END  
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnLinkedDeductionEmployee')
DROP PROCEDURE USP_TDS_GetEReturnLinkedDeductionEmployee
GO
CREATE PROCEDURE USP_TDS_GetEReturnLinkedDeductionEmployee 
    @BRANCHID INT ,          
    @FORMID INT,          
    @QUARTER INT,          
    @CHALLANID INT,          
    @ISEXCLUDED BIT,    
    @ISAUDITTRIAL BIT = 0          
AS          
    BEGIN          
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SELECT D.DEDUCTEEID, E.SERIALNO, D.NAME, D.PAN, D.PANREFERENCE, 
			CASE WHEN PAN LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 1 ELSE 0 END AS ISVALID, 
			0 AS DEDUCTEECODE
		INTO #DEDUCTEE
		FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		WHERE D.BRANCHID = @BRANCHID
	   SELECT CHALLANID, DEDUCTIONID 
	   INTO #DEDCHA 
	   FROM DEDCHALINK WITH(NOLOCK) 
	   WHERE BRANCHID = @BRANCHID
	   SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, DD.[QUARTER], DD.BRANCHID, DD.FORMID,
			DD.ERETURNID, DD.MODE, DD.INCOMETAX, DD.SURCHARGE, DD.EDUCATIONCESS, DD.TOTALDEDUCTED, DD.PAYMENTMADE,
			DD.PAYMENTDATE, DD.DEDUCTEDDATE, DD.SECTIONID, 
			DD.INCOMETAXRATE, DD.SURCHARGERATE, DD.EDUCATIONCESSRATE, DD.TAXRATE, DD.ISTAXINFOEDITABLE, 
			DD.NONDEDREASON, DD.ISBOOKENTRY, DD.ISGROSSINGUP, DD.UTN, DD.ISPANVALIDBYITD,
			DD.TOTALPURCHASEVALUE, DD.TRANSSTATUS, DD.SERIALNO,
			DD.CERTNO, DD.TDSRATEASPER, DD.REMITTANCEID, DD.ACKNO, DD.COUNTRYID, 
			DD.EMAILDED, DD.CONTACTNODED, DD.ADDRESSDED, DD.IDENTNUMDED, DD.REMARKS1, DD.REMARKS3 
	   INTO #DEDUCTION 
	   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	   WHERE DD.BRANCHID = @BRANCHID 
		  AND DD.FORMID = @FORMID 
		  AND DD.[QUARTER] = @QUARTER
	   SET @SQLQUERY = 'SELECT DD.DEDUCTEEID, D.NAME, D.PAN, D.PANREFERENCE, DD.DEDUCTIONID, DD.[QUARTER], DD.BRANCHID, DD.FORMID,
						   DD.ERETURNID, DD.MODE, DD.INCOMETAX, DD.SURCHARGE, DD.EDUCATIONCESS, DD.TOTALDEDUCTED, DD.PAYMENTMADE,
						   DD.PAYMENTDATE, DD.DEDUCTEDDATE, DD.SECTIONID, 
						   CASE WHEN TS.TAXNAME = ''4LA'' THEN ''94L'' ELSE TS.TAXNAME END AS SECTIONNAME, 
						   DD.INCOMETAXRATE, DD.SURCHARGERATE, DD.EDUCATIONCESSRATE, DD.TAXRATE, DD.ISTAXINFOEDITABLE, 
						   DD.NONDEDREASON, DD.ISBOOKENTRY, DD.ISGROSSINGUP, DD.UTN, DD.ISPANVALIDBYITD, DCL.CHALLANID, 
						   D.SERIALNO, ISNULL(DD.TOTALPURCHASEVALUE,0) TOTALVALUEOFPURCHASE, 
						   DD.CERTNO, ISNULL(DD.TDSRATEASPER,'''') TDSRATEASPER, DD.REMITTANCEID, DD.ACKNO, DD.COUNTRYID, D.DEDUCTEECODE,
						   ISNULL(DD.EMAILDED,'''') EMAILDED, ISNULL(DD.CONTACTNODED,'''') CONTACTNODED, ISNULL(DD.ADDRESSDED,'''') ADDRESSDED, 
						   ISNULL(DD.IDENTNUMDED,'''') IDENTNUMDED, ISNULL(DD.REMARKS1,'''') REMARKS1, ISNULL(DD.REMARKS3,'''') REMARKS3
					   FROM #DEDUCTION DD 
					   INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID' 
	   SET @SQLQUERY = @SQLQUERY + '
					   INNER JOIN #DEDCHA DCL WITH (NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID           
					   INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON DD.SECTIONID = TS.SECTIONID     
				    WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND
					   DCL.CHALLANID = ' + CAST(@CHALLANID AS VARCHAR) + ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)
		IF (@ISEXCLUDED = 1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND ((ISNULL(D.ISVALID, 0) = 1)'
				SET @SQLQUERY = @SQLQUERY + 'OR (ISNULL(D.ISVALID, 0) = 0 AND DD.NONDEDREASON = 3))'
			END
	   IF (@ISAUDITTRIAL = 1)
		  SET @SQLQUERY = @SQLQUERY + ' AND ISNULL(DD.TRANSSTATUS, 1) = 2'
	   SET @SQLQUERY = @SQLQUERY + ' ORDER BY DD.SERIALNO'
	   EXEC SP_EXECUTESQL @SQLQUERY;
	   IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL 
		  DROP TABLE #DEDUCTEE 
	   IF OBJECT_ID('TEMPDB..#DEDCHA') IS NOT NULL 
		  DROP TABLE #DEDCHA
	   IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL 
		  DROP TABLE #DEDUCTION
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnLinkedDeductionNonEmployee')
DROP PROCEDURE USP_TDS_GetEReturnLinkedDeductionNonEmployee
GO
CREATE PROCEDURE USP_TDS_GetEReturnLinkedDeductionNonEmployee 
    @BRANCHID INT ,          
    @FORMID INT,          
    @QUARTER INT,          
    @CHALLANID INT,          
    @ISEXCLUDED BIT,    
    @ISAUDITTRIAL BIT = 0          
AS          
    BEGIN          
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SELECT D.DEDUCTEEID, E.SERIALNO, D.NAME, D.PAN, D.PANREFERENCE, 
			CASE WHEN PAN LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 1 ELSE 0 END AS ISVALID,
			E.DEDUCTEECODE
		INTO #DEDUCTEE
		FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		WHERE D.BRANCHID = @BRANCHID
	   SELECT CHALLANID, DEDUCTIONID 
	   INTO #DEDCHA 
	   FROM DEDCHALINK WITH(NOLOCK) 
	   WHERE BRANCHID = @BRANCHID
	   SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, DD.[QUARTER], DD.BRANCHID, DD.FORMID,
			DD.ERETURNID, DD.MODE, DD.INCOMETAX, DD.SURCHARGE, DD.EDUCATIONCESS, DD.TOTALDEDUCTED, DD.PAYMENTMADE,
			DD.PAYMENTDATE, DD.DEDUCTEDDATE, DD.SECTIONID, 
			DD.INCOMETAXRATE, DD.SURCHARGERATE, DD.EDUCATIONCESSRATE, DD.TAXRATE, DD.ISTAXINFOEDITABLE, 
			DD.NONDEDREASON, DD.ISBOOKENTRY, DD.ISGROSSINGUP, DD.UTN, DD.ISPANVALIDBYITD,
			DD.TOTALPURCHASEVALUE, DD.TRANSSTATUS, DD.SERIALNO,
			DD.CERTNO, DD.TDSRATEASPER, DD.REMITTANCEID, DD.ACKNO, DD.COUNTRYID, 
			DD.EMAILDED, DD.CONTACTNODED, DD.ADDRESSDED, DD.IDENTNUMDED, DD.REMARKS1, DD.REMARKS3
	   INTO #DEDUCTION 
	   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	   WHERE DD.BRANCHID = @BRANCHID 
		  AND DD.FORMID = @FORMID 
		  AND DD.[QUARTER] = @QUARTER
	   SET @SQLQUERY = 'SELECT DD.DEDUCTEEID, D.NAME, D.PAN, D.PANREFERENCE, DD.DEDUCTIONID, DD.[QUARTER], DD.BRANCHID, DD.FORMID,
						   DD.ERETURNID, DD.MODE, DD.INCOMETAX, DD.SURCHARGE, DD.EDUCATIONCESS, DD.TOTALDEDUCTED, DD.PAYMENTMADE,
						   DD.PAYMENTDATE, DD.DEDUCTEDDATE, DD.SECTIONID, 
						   CASE WHEN TS.TAXNAME = ''4LA'' THEN ''94L'' ELSE TS.TAXNAME END AS SECTIONNAME, 
						   DD.INCOMETAXRATE, DD.SURCHARGERATE, DD.EDUCATIONCESSRATE, DD.TAXRATE, DD.ISTAXINFOEDITABLE, 
						   DD.NONDEDREASON, DD.ISBOOKENTRY, DD.ISGROSSINGUP, DD.UTN, DD.ISPANVALIDBYITD, DCL.CHALLANID, 
						   D.SERIALNO, ISNULL(DD.TOTALPURCHASEVALUE,0) TOTALVALUEOFPURCHASE, 
						   DD.CERTNO, ISNULL(DD.TDSRATEASPER,'''') TDSRATEASPER, DD.REMITTANCEID, DD.ACKNO, DD.COUNTRYID, D.DEDUCTEECODE,
						   ISNULL(DD.EMAILDED,'''') EMAILDED, ISNULL(DD.CONTACTNODED,'''') CONTACTNODED, ISNULL(DD.ADDRESSDED,'''') ADDRESSDED, 
						   ISNULL(DD.IDENTNUMDED,'''') IDENTNUMDED, ISNULL(DD.REMARKS1,'''') REMARKS1, ISNULL(DD.REMARKS3,'''') REMARKS3
					   FROM #DEDUCTION DD 
					   INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID' 
	   SET @SQLQUERY = @SQLQUERY + '
					   INNER JOIN #DEDCHA DCL WITH (NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID           
					   INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON DD.SECTIONID = TS.SECTIONID     
				    WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND
					   DCL.CHALLANID = ' + CAST(@CHALLANID AS VARCHAR) + ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)
		IF (@ISEXCLUDED = 1)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + ' AND ((ISNULL(D.ISVALID, 0) = 1)'
				SET @SQLQUERY = @SQLQUERY + ' OR NOT (
													  ISNULL(D.ISVALID, 0) = 0 
													  AND DD.NONDEDREASON = 3 AND DD.INCOMETAXRATE = 20 
													  AND (((DD.PAYMENTMADE * (DD.TAXRATE / 100)) * .9) 
													  - (CASE WHEN (DD.TOTALDEDUCTED <= 3 AND DD.PAYMENTMADE <= 20) THEN 0 ELSE 2 END))
													  > DD.TOTALDEDUCTED 
													  )
													 ) 
											AND NOT (ISNULL(D.ISVALID, 0) = 0 AND DD.NONDEDREASON <> 3)'
			END
	   IF (@ISAUDITTRIAL = 1)
		  SET @SQLQUERY = @SQLQUERY + ' AND ISNULL(DD.TRANSSTATUS, 1) = 2'
	   SET @SQLQUERY = @SQLQUERY + ' ORDER BY DD.SERIALNO'
	   EXEC SP_EXECUTESQL @SQLQUERY;
	   IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL 
		  DROP TABLE #DEDUCTEE 
	   IF OBJECT_ID('TEMPDB..#DEDCHA') IS NOT NULL 
		  DROP TABLE #DEDCHA
	   IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL 
		  DROP TABLE #DEDUCTION
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNSALARYDETAIL')
DROP PROCEDURE USP_TDS_GETERETURNSALARYDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETERETURNSALARYDETAIL] 
 @BRANCHID INT   
AS  
 BEGIN  
  SELECT SAL.SALARYDETAILID,SAL.DEDUCTEEID,SAL.BRANCHID,SAL.GROSSSALARY,SAL.DEDUCTIONUS16,SAL.INCOMEFROMSALARIES,  
		  SAL.OTHERINCOME,SAL.GROSSTOTALINCOME,SAL.SALARYFROMPREVEMP, ISNULL(SAL.PREVEMPCESS,0) + ISNULL(SAL.PREVEMPINCOMETAX,0) + ISNULL(SAL.PREVEMPSURCHARGE,0) AS PREVTOTAL,  
		  SAL.TOTALDEDUNDERCHAPTERVIA,SAL.TOTALTAXABLEINCOME,SAL.TAXONTOTALINCOME,SAL.SURCHARGE,SAL.EDUCATIONCESS,SAL.TOTALINCOMETAXPAYABLE,SAL.RELIEFUS89,  
		  SAL.NETTAXPAYABLE,SAL.TOTALTDS - (ISNULL(SAL.PREVEMPCESS,0) + ISNULL(SAL.PREVEMPINCOMETAX,0) + ISNULL(SAL.PREVEMPSURCHARGE,0)) AS TOTALTDS,SAL.TAXPAYABLE,EMP.SERIALNO,  
		  EMP.EMPLOYMENTFROM,EMP.EMPLOYMENTTO,EMP.GENDER,EMP.ISSENIORCITIZEN,D.NAME,D.PAN,ISNULL(SAL.MANUALINCOMETAX,0) + ISNULL(SAL.MANUALSURCHARGE,0) + ISNULL(SAL.MANUALCESS,0) AS MANUALTOTAL,
		  D.PANREFERENCE, CASE WHEN (SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = D.DEDUCTEEID AND NONDEDREASON = 3) > 0 OR D.PAN IN ('PANAPPLIED', 'PANINVALID', 'PANNOTAVBL') THEN 0   
             ELSE 1              
            END AS ISVALIDPAN, SAL.CREDITUS87A, ISNULL(PANLL1,'') PANLL1, ISNULL(NAMELL1,'') NAMELL1, ISNULL(PANLL2,'') PANLL2, ISNULL(NAMELL2,'') NAMELL2, ISNULL(PANLL3,'') PANLL3, ISNULL(NAMELL3,'') NAMELL3, 
		   ISNULL(PANLL4,'') PANLL4, ISNULL(NAMELL4,'') NAMELL4, ISNULL(PANLEND1,'') PANLEND1, ISNULL(NAMELEND1,'') NAMELEND1, ISNULL(PANLEND2,'') PANLEND2, 
		   ISNULL(NAMELEND2,'') NAMELEND2, ISNULL(PANLEND3,'') PANLEND3, ISNULL(NAMELEND3,'') NAMELEND3, ISNULL(PANLEND4,'') PANLEND4, ISNULL(NAMELEND4,'') NAMELEND4, 
		   ISNULL(SAFNAME,'') SAFNAME, ISNULL(SAFFROMDATE,'') SAFFROMDATE, ISNULL(SAFTODATE,'') SAFTODATE, ISNULL(AMTREPAID,0) AMTREPAID, ISNULL(SAFTAXRATE,0) SAFTAXRATE, 
		   ISNULL(SAFTAXDEDUCTED,0) SAFTAXDEDUCTED  
  FROM  SALARYDETAIL SAL WITH(NOLOCK)   
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON SAL.DEDUCTEEID=D.DEDUCTEEID      
  INNER JOIN EMPLOYEE EMP WITH(NOLOCK) ON  SAL.DEDUCTEEID=EMP.DEDUCTEEID    
  WHERE  SAL.BRANCHID= @BRANCHID AND (D.PAN LIKE '[A-Z][A-Z][A-Z][P][A-Z][0-9][0-9][0-9][0-9][A-Z]' OR D.PAN IN ('PANAPPLIED', 'PANINVALID', 'PANNOTAVBL'))  
  ORDER BY EMP.SERIALNO;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNSECTION16DETAILS')
DROP PROCEDURE USP_TDS_GETERETURNSECTION16DETAILS
GO
CREATE PROCEDURE [USP_TDS_GETERETURNSECTION16DETAILS]
	@SALARYDETAILID INT
AS
	BEGIN
		SELECT SECTION16DETAIL.SECTION16DETAILID,SECTION16DETAIL.SALARYDETAILID,SECTION16DETAIL.SALARYSECTIONID,
		       SECTION16DETAIL.AMOUNT,SALARYSECTIONS.SECTIONNAME
		FROM   SECTION16DETAIL WITH(NOLOCK) INNER JOIN SALARYSECTIONS WITH(NOLOCK) ON SECTION16DETAIL.SALARYSECTIONID=SALARYSECTIONS.SALARYSECTIONID
		WHERE  SALARYDETAILID=@SALARYDETAILID AND SECTION16DETAIL.AMOUNT>0
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERETURNUNLINKEDCHALLAN')
DROP PROCEDURE USP_TDS_GETERETURNUNLINKEDCHALLAN
GO
CREATE PROCEDURE [USP_TDS_GETERETURNUNLINKEDCHALLAN]    
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT     
AS    
 BEGIN      
  SELECT CD.BRANCHID AS BRANCHID,CD.CHALLANID AS CHALLANID,CD.FORMID AS FORMTYPE,CD.[QUARTER] AS [QUARTER],    
      CD.ERETURNID AS ERETURNID,CD.LINKDEDCOUNT AS LINKDEDUCTIONCOUNT,ISNILCHALLAN AS ISNILLCHALLAN,ISUPDATECHALLAN AS ISUPDATECHALLAN,    
      MODEOFPAYMENT AS MODEOFPAYMENT,BANKCHALLANNO AS BANKCHALLANNUMBER,LASTBANKCHALLANNO AS LASTBANKCHALLANNUMBER,    
      TRNVOUCHERNO AS TRANSFERVOUCHERNUMBER,LASTTRNVOUCHERNO AS LASTTRANSFERVOUCHERNUMBER,CD.BANKID AS BANKID,    
      LASTBANKID AS LASTBANKID,CHALLANPAIDDATE AS CHALLANPAIDDATE,LASTCHALLANPAIDDATE AS LASTCHALLANPAIDDATE,DATEOFDEBIT AS DATEOFDEBIT,    
      CD.SECTIONID AS SECTIONID,TS.SECTIONNAME AS SECTIONNAME,RB.BSRCODE AS BANKCODE,    
      CD.INCOMETAX AS INCOMETAX,CD.SURCHARGE AS SURCHARGE,CD.EDUCATIONCESS AS EDUCATIONCESS,INTEREST AS INTEREST,    
      OTHERS AS OTHERS,PENALTY AS PENALTY,CHALLANTOTAL AS CHALLANTOTALAMOUNT,LASTCHALLANTOTAL AS LASTCHALLANTOTALAMOUNT,    
      ISCOMPANY AS ISCOMPANY,CHEQUENO AS CHEQUENUMBER,CHEQUEDATE AS CHEQUEDATE,CHEQUEDRAWNON AS CHEQUEDRAWNON,    
      TRANREFNO AS TRANSFERREFERENCENUMBER,ISNULL(TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER ,  
       CD.FEE,CD.MINORHEAD        
   FROM  CHALLANDETAIL CD WITH (NOLOCK)  
   LEFT JOIN     
      (  
        SELECT DISTINCT CHALLANID,QUARTER FROM DEDCHALINK L WITH (NOLOCK)    
          INNER JOIN DEDUCTIONDETAIL DD WITH (NOLOCK)   
          ON L.DEDUCTIONID=DD.DEDUCTIONID AND L.BRANCHID=DD.BRANCHID                               
    WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER    
       ) DCL             
    ON CD.CHALLANID=DCL.CHALLANID    
    INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON CD.SECTIONID = TS.SECTIONID     
    LEFT JOIN REMITTINGBANK RB WITH (NOLOCK) ON CD.BANKID=RB.BANKID     
 WHERE CD.BRANCHID =@BRANCHID AND CD.FORMID=@FORMID AND CD.[QUARTER]=@QUARTER     
    AND DCL.CHALLANID IS NULL   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnUnlinkedDeductionCount')
DROP PROCEDURE USP_TDS_GetEReturnUnlinkedDeductionCount
GO
CREATE PROCEDURE [USP_TDS_GetEReturnUnlinkedDeductionCount]
@BRANCHID INT,  
@FORMID SMALLINT,  
@QUARTER SMALLINT,
@ISAUDITTRIAL BIT = 0  
AS  
BEGIN  
	 DECLARE  @SQLQUERY1 NVARCHAR(MAX), @SQLQUERY2 NVARCHAR(MAX);--@DEDCOUNT INT,
	 DECLARE @ALLDED TABLE(DEDUCTIONID INT);
	 DECLARE @LINKEDDED TABLE(DEDUCTIONID INT);  
	 --SET @DEDCOUNT = 0; 
	 SET @SQLQUERY1 = 'SELECT DD.DEDUCTIONID 
								INTO #TEMP1
								FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
								WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND 
										  DD.FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND 
										  QUARTER=' + CAST(@QUARTER AS VARCHAR) + ' AND DD.TOTALDEDUCTED > 0 '
	IF(@ISAUDITTRIAL = 1)
	 SET @SQLQUERY1 = @SQLQUERY1 + ' AND ISNULL(DD.TRANSSTATUS,1) = 2 '
	SET @SQLQUERY1 = @SQLQUERY1 + 'SELECT DD.DEDUCTIONID
								INTO #TEMP2
								FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
								INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID AND DD.BRANCHID=DCL.BRANCHID  
								WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND 
										  DD.FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND 
										  QUARTER=' + CAST(@QUARTER AS VARCHAR) + ' AND DD.TOTALDEDUCTED > 0 '
	 IF(@ISAUDITTRIAL = 1)
	 SET @SQLQUERY1 = @SQLQUERY1 + ' AND ISNULL(DD.TRANSSTATUS,1) = 2 '
	 SET @SQLQUERY1 = @SQLQUERY1 + ' SELECT COUNT(DEDUCTIONID) FROM
		(
			SELECT * FROM #TEMP1 A WHERE
			NOT EXISTS
			(
				SELECT * FROM #TEMP2 L WHERE A.DEDUCTIONID = L.DEDUCTIONID
			)
		)T;'										  
	  --INSERT INTO @ALLDED
	  EXEC SP_EXECUTESQL @SQLQUERY1 
	 --PRINT  @SQLQUERY1 
	  --INSERT INTO @LINKEDDED
	  --EXEC SP_EXECUTESQL @SQLQUERY2
	 -- SELECT @DEDCOUNT = COUNT(DEDUCTIONID) FROM
		--(
		--	SELECT * FROM #TEMP1 A WHERE
		--	NOT EXISTS
		--	(
		--		SELECT * FROM #TEMP2 L WHERE A.DEDUCTIONID = L.DEDUCTIONID
		--	)
		--)T	 
	 --SELECT @DEDCOUNT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetEReturnUnlinkedDeductions')
DROP PROCEDURE USP_TDS_GetEReturnUnlinkedDeductions
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetEReturnUnlinkedDeductions]
@BRANCHID INT,      
@FORMID INT,      
@QUARTER INT,      
@ISEXCLUDED BIT,      
@ISIB BIT,      
@ISAUDITTRIAL BIT = 0      
AS      
 BEGIN      
    DECLARE @SQLQUERY NVARCHAR(MAX); 
   	DECLARE @SQLQUERY1 NVARCHAR(MAX); 
   	CREATE TABLE #DEDUCTEE(BRANCHID INT, DEDUCTEEID INT , NAME VARCHAR(75), PAN VARCHAR(10), PANREFERENCE VARCHAR(10), SERIALNO INT, ISVALID BIT);
   	SELECT DD.DEDUCTIONID INTO #TEMP1 FROM DEDUCTIONDETAIL DD WITH (NOLOCK) 
		INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
		WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		SELECT DEDUCTIONID INTO #TEMP2 FROM DEDCHALINK DCL WITH (NOLOCK) WHERE BRANCHID = @BRANCHID
		SELECT DD.DEDUCTIONID INTO #TEMP3 FROM DEDUCTIONDETAIL DD WITH (NOLOCK) 
		WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND TOTALDEDUCTED = 0 
   	SELECT DEDUCTIONID 
		INTO #TEMPDEDUCTIONID 
		FROM
		(
				SELECT * FROM #TEMP1
				UNION
				SELECT * FROM #TEMP3
		)DE
		SELECT DEDUCTIONID
		INTO #DEDUCTIONID 
		FROM  #TEMPDEDUCTIONID DD WHERE 
		NOT EXISTS
		(
			SELECT DEDUCTIONID FROM #TEMP2 DCL WITH (NOLOCK) WHERE DCL.DEDUCTIONID = DD.DEDUCTIONID 
		)   
	--SELECT DEDUCTIONID INTO #DEDUCTIONID FROM
	--(
	--	SELECT DD.DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH (NOLOCK) 
	--	INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
	--	WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
	--	UNION 
	--	SELECT DD.DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH (NOLOCK) 
	--	WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND TOTALDEDUCTED = 0
	--	EXCEPT
	--	SELECT DEDUCTIONID FROM DEDCHALINK WITH (NOLOCK) WHERE BRANCHID = @BRANCHID 
	--)DE 
	SELECT BRANCHID, D.DEDUCTEEID, NAME, PAN, PANREFERENCE
	INTO #DEDUCTEE1
	FROM DEDUCTEE D WHERE BRANCHID = @BRANCHID
   	SET @SQLQUERY1 = 'SELECT BRANCHID, D.DEDUCTEEID, NAME, PAN, PANREFERENCE, SERIALNO,  
                 CASE WHEN ' +  CAST(@FORMID AS VARCHAR)  + ' = 1 
						THEN 
							CASE WHEN PAN LIKE ''[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]''   
									THEN 1   
							ELSE 0 END
						 WHEN ' +  CAST(@FORMID AS VARCHAR)  + ' <> 1 
						THEN 
							CASE WHEN PAN LIKE ''[A-Z][A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9][A-Z]''   
									THEN 1   
							ELSE 0 END
			END AS ISVALID    
          FROM #DEDUCTEE1 D WITH(NOLOCK) '      
  IF(@FORMID = 1)    
    BEGIN       
   SET @SQLQUERY1 = @SQLQUERY1 + '       
         INNER JOIN EMPLOYEE E WITH (NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID '        
    END    
  ELSE    
    BEGIN    
    SET @SQLQUERY1 = @SQLQUERY1 + '       
         INNER JOIN NONEMPLOYEE E WITH (NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID '     
    END
    --SET @SQLQUERY1 = @SQLQUERY1 + 'WHERE BRANCHID = '+  CAST(@BRANCHID AS VARCHAR)     
   INSERT INTO #DEDUCTEE
   EXEC SP_EXECUTESQL @SQLQUERY1  
  DROP TABLE #DEDUCTEE1
  SELECT DD.DEDUCTEEID,DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,    
       DD.ERETURNID,DD.MODE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.PAYMENTMADE,    
       DD.PAYMENTDATE,DD.DEDUCTEDDATE,DD.SECTIONID,DD.INCOMETAXRATE,DD.SURCHARGERATE,    
       DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,    
       DD.UTN,DD.ISPANVALIDBYITD,NULL AS CHALLANID,ISNULL(DD.TOTALPURCHASEVALUE,0)TOTALPURCHASEVALUE,      
       ISNULL(DD.TRANSSTATUS,1)TRANSSTATUS,  CASE WHEN (@FORMID = 1) THEN 0   
		ELSE (SELECT DEDUCTEECODE FROM NONEMPLOYEE WHERE DEDUCTEEID = DD.DEDUCTEEID) END AS DEDUCTEECODE ,
		DD.CERTNO,ISNULL(DD.TDSRATEASPER,'''')TDSRATEASPER,DD.REMITTANCEID,DD.ACKNO,DD.COUNTRYID, DD.EMAILDED,
		DD.CONTACTNODED, DD.ADDRESSDED, DD.IDENTNUMDED        
        INTO #DEDUCTION FROM DEDUCTIONDETAIL DD WITH (NOLOCK)
        INNER JOIN #DEDUCTIONID DE ON DD.DEDUCTIONID = DE.DEDUCTIONID
  SET @SQLQUERY = 'SELECT DD.DEDUCTEEID,D.NAME,D.PAN,D.PANREFERENCE,DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,    
       DD.ERETURNID,DD.MODE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.PAYMENTMADE,    
       DD.PAYMENTDATE,DD.DEDUCTEDDATE,DD.SECTIONID,CASE WHEN TS.TAXNAME = ''4LA'' THEN ''94L'' ELSE TS.TAXNAME END AS SECTIONNAME,DD.INCOMETAXRATE,DD.SURCHARGERATE,    
       DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,    
       DD.UTN,DD.ISPANVALIDBYITD,NULL AS CHALLANID,D.SERIALNO,ISNULL(DD.TOTALPURCHASEVALUE,0)TOTALVALUEOFPURCHASE,      
       ISNULL(DD.TRANSSTATUS,1)TRANSSTATUS,  CASE WHEN (' + CAST(@FORMID AS VARCHAR) + ' = 1) THEN 0   
		ELSE (SELECT DEDUCTEECODE FROM NONEMPLOYEE WHERE DEDUCTEEID = DD.DEDUCTEEID) END AS DEDUCTEECODE ,
		DD.CERTNO,ISNULL(DD.TDSRATEASPER,'''')TDSRATEASPER,DD.REMITTANCEID,DD.ACKNO,DD.COUNTRYID, ISNULL(DD.EMAILDED,'''') EMAILDED, 
		ISNULL(DD.CONTACTNODED,'''') CONTACTNODED, ISNULL(DD.ADDRESSDED,'''') ADDRESSDED, ISNULL(DD.IDENTNUMDED,'''') IDENTNUMDED          
        FROM #DEDUCTION DD        
        INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID'
  SET @SQLQUERY = @SQLQUERY + '     
        INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON DD.SECTIONID = TS.SECTIONID    
        WHERE DD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR) + ' AND     
                      DD.FORMID = ' + CAST(@FORMID  AS VARCHAR)+' AND    
             DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) 
  IF(@ISEXCLUDED = 1 AND @ISIB = 0)    
   BEGIN    
 SET @SQLQUERY = @SQLQUERY + ' AND (D.ISVALID = 1 OR (D.ISVALID = 0 AND DD.NONDEDREASON = 3))'     
   END    
  IF(@ISIB = 1)                 
   SET @SQLQUERY = @SQLQUERY + ' AND (D.ISVALID = 1 AND DD.NONDEDREASON IN (0,1,2,4,6,7))'        
  IF(@ISAUDITTRIAL = 1)    
   BEGIN    
  SET @SQLQUERY = @SQLQUERY + ' AND TRANSSTATUS = 2'     
   END       
    SET @SQLQUERY = @SQLQUERY + ' ORDER BY DD.SECTIONID;'    
   --PRINT @SQLQUERY    
   EXECUTE SP_EXECUTESQL @SQLQUERY
   DROP TABLE #DEDUCTEE  
   DROP TABLE #TEMPDEDUCTIONID
   DROP TABLE #DEDUCTIONID
   DROP TABLE #TEMP1
   DROP TABLE #TEMP2
   DROP TABLE #TEMP3  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETERRORLIST')
DROP PROCEDURE USP_TDS_GETERRORLIST
GO
CREATE PROCEDURE [USP_TDS_GETERRORLIST]
AS
 BEGIN
	SELECT ED.BRANCHNAME, ED.BRANCHCODE, ED.PBRANCHNAME, ED.PBRANCHCODE, ED.ROWNO, ED.USERNAME, ED.PASSWORD, ED.ISBRANCHADMIN FROM USERBRANCH ED WITH(NOLOCK) INNER JOIN 
	(
	   SELECT BRANCHNAME, BRANCHCODE
	   FROM USERBRANCH WITH(NOLOCK)
	   WHERE PBRANCHNAME<>'ADMIN'
	)  ED1
	ON 
	   ED.PBRANCHCODE=ED1.BRANCHCODE
	   AND ED.BRANCHNAME =ED1.BRANCHNAME
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXCELUSERBRANCH')
DROP PROCEDURE USP_TDS_GETEXCELUSERBRANCH
GO
CREATE PROCEDURE [USP_TDS_GETEXCELUSERBRANCH]
AS
BEGIN
	 WITH USERBRANCHPARENT(ROWNO,BRANCHNAME, BRANCHCODE, PBRANCHNAME,PBRANCHCODE,USERNAME,PASSWORD,ISBRANCHADMIN ,TREELEVEL) AS
	(
		SELECT ROWNO, BRANCHNAME, BRANCHCODE, PBRANCHNAME, PBRANCHCODE,USERNAME,PASSWORD,ISBRANCHADMIN ,1 AS TREELEVEL FROM USERBRANCH WITH(NOLOCK) WHERE PBRANCHNAME =  'ADMIN'
		UNION ALL
		SELECT E.ROWNO, E.BRANCHNAME, E.BRANCHCODE, E.PBRANCHNAME, E.PBRANCHCODE,E.USERNAME,E.PASSWORD,E.ISBRANCHADMIN ,TREELEVEL + 1
		FROM USERBRANCH E WITH(NOLOCK) INNER JOIN USERBRANCHPARENT P ON E.PBRANCHNAME = P.BRANCHNAME AND E.PBRANCHCODE = P.BRANCHCODE
	)
SELECT * FROM USERBRANCHPARENT ORDER BY TREELEVEL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXCLUDEDDEDDETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETEXCLUDEDDEDDETAILSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETEXCLUDEDDEDDETAILSCOUNT] 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@NAME VARCHAR(75)
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		SET @QUERY = 'SELECT  COUNT(DD.DEDUCTIONID) AS DEDCOUNT FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
						INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID 
						LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID
						LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DCL.CHALLANID = CD.CHALLANID
					  WHERE   DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
					  DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND (ISNULL(DD.ERETURNID,0) = 0) AND ((DCL.DEDCHALINKID IS NULL AND DD.TOTALDEDUCTED = 0) OR (DCL.DEDCHALINKID IS NOT NULL))'
		IF @SECTIONID <> -1
			BEGIN
				SET @QUERY = @QUERY + ' AND DD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR) ;
			END
		IF @NAME <> ''
			BEGIN
				SET @QUERY = @QUERY + ' AND D.NAME LIKE ''' + @NAME + '%''';
			END
		EXEC SP_EXECUTESQL @QUERY;			
		--PRINT @QUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXCLUDEDDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_GETEXCLUDEDDEDUCTIONDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETEXCLUDEDDEDUCTIONDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTIONSLNO INT
AS
	BEGIN
		IF @FORMID = 1
			BEGIN
				SELECT D.NAME,D.PAN,'' AS LASTPAN,D.PANREFERENCE,'' AS LASTPANREFERENCE,-1 AS CODE,E.SERIALNO AS DEDUCTEESERIALNO,TS.SECTIONNAME,
						DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,DD.SERIALNO AS DEDUCTIONSERIALNO,DD.DEDUCTIONID,DD.PAYMENTMADE,
						DD.PAYMENTDATE,DD.SECTIONID,DD.ERETURNID AS DEDUCTIONERETURNID,DD.MODE,DD.INCOMETAX,0 AS LASTINCOMETAX,DD.INCOMETAXRATE,
						DD.SURCHARGE,0 AS LASTSURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,
						DD.ISTAXINFOEDITABLE,DD.TAXRATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,DD.DEDUCTEDDATE,DD.ISBOOKENTRY,DD.NONDEDREASON,
						DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD, E.ISSENIORCITIZEN,E.GENDER,DD.CERTNO, DD.ACKNO, DD.REMITTANCEID, DD.COUNTRYID,
						ISNULL(DD.TDSRATEASPER,' ' )TDSRATEASPER,CD.SERIALNO AS CHALLANSERIALNO,CD.ERETURNID AS CHALLANERETURNID,CD.CHALLANTOTAL,
						5 AS CORRECTIONSTATUS, CD.SECTIONID AS CHALLANSECTION
				FROM  DEDUCTIONDETAIL DD WITH(NOLOCK) 
						 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
						 INNER JOIN  EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
						 INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID			
						 LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
						 LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
				WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.SERIALNO = @DEDUCTIONSLNO ;
			END
		ELSE
			BEGIN
				SELECT  D.NAME,D.PAN,'' AS LASTPAN,D.PANREFERENCE,'' AS LASTPANREFERENCE,NE.DEDUCTEECODE AS CODE,NE.SERIALNO AS DEDUCTEESERIALNO,
						TS.SECTIONNAME,DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,DD.SERIALNO AS DEDUCTIONSERIALNO,DD.DEDUCTIONID,
						DD.PAYMENTMADE,DD.PAYMENTDATE,DD.SECTIONID,DD.ERETURNID AS DEDUCTIONERETURNID,DD.MODE,DD.INCOMETAX,0 AS LASTINCOMETAX,
						DD.INCOMETAXRATE,DD.SURCHARGE,0 AS LASTSURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,
						DD.EDUCATIONCESSRATE,DD.ISTAXINFOEDITABLE,DD.TAXRATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,DD.DEDUCTEDDATE,
						DD.ISBOOKENTRY,DD.NONDEDREASON,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,DD.CERTNO, DD.ACKNO, DD.REMITTANCEID, DD.COUNTRYID,
						ISNULL(DD.TDSRATEASPER,' ' )TDSRATEASPER,CD.SERIALNO AS CHALLANSERIALNO,CD.ERETURNID AS CHALLANERETURNID,CD.CHALLANTOTAL,
						5 AS CORRECTIONSTATUS, CD.SECTIONID AS CHALLANSECTION,DD.EMAILDED,DD.CONTACTNODED,DD.ADDRESSDED,DD.IDENTNUMDED
				FROM DEDUCTIONDETAIL DD 
						INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
						INNER JOIN  NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
						INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID			
						LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
						LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
				WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.SERIALNO = @DEDUCTIONSLNO ;
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXCLUDEDNONEMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_GETEXCLUDEDNONEMPLOYEEDETAIL
GO
CREATE PROCEDURE USP_TDS_GETEXCLUDEDNONEMPLOYEEDETAIL
@BRANCHID INT,
@DEDUCTEESLNO INT
AS
   BEGIN
		SELECT D.DEDUCTEEID , NE.NONEMPLOYEEID, D.BRANCHID, D.SALUTATION, D.NAME AS DEDUCTEENAME, D.PAN, D.PANREFERENCE,
				   D.ADDRESS1, D.ADDRESS2, D.ADDRESS3, D.ADDRESS4, D.ADDRESS5, D.STATEID, D.PINCODE,D.REFERENCENO AS REFERENCRNUMBER,
				   D.PHONENO AS PHONENUMBER,D.EMAILADDRESS ,NE.DEDUCTEECODE, NE.ISAPPLICABLE26, NE.ISAPPLICABLE27, SM.STATENAME,
				  NE.SERIALNO AS SERIALNUMBER,NE.ISTRANSPORTER  
					 FROM DEDUCTEE D WITH(NOLOCK)
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
		INNER JOIN STATEMASTER SM WITH(NOLOCK) ON D.STATEID = SM.STATEID
		WHERE BRANCHID = @BRANCHID AND D.ISEXCLUDED = 1 AND NE.SERIALNO = @DEDUCTEESLNO
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetExcludedRecords')
DROP PROCEDURE USP_TDS_GetExcludedRecords
GO
CREATE PROCEDURE USP_TDS_GetExcludedRecords ---USP_TDS_GetExcludedRecords 1672,3,1
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT * 
		INTO #DEDDETAIL
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE 
			BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND [QUARTER]= @QUARTER  
		DECLARE @ISERETURNDONE INT;
		SELECT @ISERETURNDONE = (CASE WHEN LEN(ISNULL(ORGNUM, '')) > 0 THEN 1 ELSE 0 END)
		FROM ACKNO WITH(NOLOCK)
		WHERE
			BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND [QUARTER]= @QUARTER
		IF(ISNULL(@ISERETURNDONE,0) = 0)
			SET @ISERETURNDONE = 0   
		SELECT DISTINCT D.DEDUCTEEID,D.NAME,D.PAN, 
			CASE WHEN @ISERETURNDONE = 0 THEN 
					(CASE WHEN D.PAN LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 1   
						ELSE 0 
					END)
				WHEN @ISERETURNDONE = 1 THEN 
					(CASE WHEN ISNULL(DD.ERETURNID, 0) = 0 THEN 0 
						ELSE 1
					END)
			END AS ISVALID, D.REFERENCENO  
		INTO #DEDUCTEE
		FROM DEDUCTEE D WITH(NOLOCK)  
		INNER JOIN #DEDDETAIL DD  
			ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID 
		SELECT DEDUCTIONID 
		INTO #DEDCHA 
		FROM DEDCHALINK WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID
		SELECT DEDUCTEEID, NAME, PAN,  REFERENCENO
		INTO #INVALIDPAN 
		FROM #DEDUCTEE 
		WHERE ISVALID = 0 
		SELECT DD.SERIALNO, DD.DEDUCTIONID, DD.DEDUCTEEID, DD.TOTALDEDUCTED, DD.PAYMENTMADE, DD.PAYMENTDATE, DD.DEDUCTEDDATE 
		INTO #DEDUCTION 
		FROM #DEDDETAIL DD 
		WHERE 
			BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND [QUARTER] =  @QUARTER 
			AND ISNULL(DD.NONDEDREASON, 0) <> 3
		SELECT DD.SERIALNO, DE.NAME, DE.PAN, DD.TOTALDEDUCTED, DD.PAYMENTMADE, CONVERT(VARCHAR(10),DD.PAYMENTDATE,103) PAYMENTDATE, 
			CONVERT(VARCHAR(10),DEDUCTEDDATE ,103) DEDUCTEDDATE, REFERENCENO 
		INTO #TEMP1
		FROM #DEDUCTION DD WITH(NOLOCK)  
			INNER JOIN #INVALIDPAN DE WITH(NOLOCK) ON DE.DEDUCTEEID = DD.DEDUCTEEID     
			INNER JOIN #DEDCHA DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID
		SELECT DD.SERIALNO, D.NAME, D.PAN, DD.TOTALDEDUCTED, DD.PAYMENTMADE, CONVERT(VARCHAR(10),DD.PAYMENTDATE,103) PAYMENTDATE,
			CONVERT(VARCHAR(10),DEDUCTEDDATE ,103) DEDUCTEDDATE, DE.REFERENCENO 
		INTO #TEMP2
		FROM #DEDDETAIL DD WITH(NOLOCK)  
			INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID 
			INNER JOIN #DEDUCTEE DE WITH(NOLOCK) ON DE.DEDUCTEEID = DD.DEDUCTEEID     
		WHERE 
			DD.BRANCHID = @BRANCHID 
			AND DD.FORMID = @FORMID 
			AND TOTALDEDUCTED = 0 
			AND DD.[QUARTER] = @QUARTER 
			AND (DE.ISVALID = 0 AND ISNULL(DD.NONDEDREASON,0) <> 3)
		SELECT DD.SERIALNO, D.NAME, D.PAN, DD.TOTALDEDUCTED, DD.PAYMENTMADE, CONVERT(VARCHAR(10),DD.PAYMENTDATE,103) PAYMENTDATE,
			CONVERT(VARCHAR(10),DEDUCTEDDATE ,103) DEDUCTEDDATE, DE.REFERENCENO 
		INTO #TEMP3
		FROM #DEDDETAIL DD WITH(NOLOCK)
			INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID 
			INNER JOIN #DEDUCTEE DE WITH(NOLOCK) ON DE.DEDUCTEEID = DD.DEDUCTEEID 
		WHERE 
			DD.BRANCHID = @BRANCHID 
			AND DD.FORMID = @FORMID 
			AND DD.[QUARTER] = @QUARTER 
			AND DE.ISVALID = 0 AND ISNULL(DD.NONDEDREASON, 0) = 3 
			AND DD.TAXRATE >= 20 
			AND (((DD.PAYMENTMADE * (DD.INCOMETAXRATE / 100)) * 0.9) 
					- (CASE WHEN (DD.TOTALDEDUCTED <= 3 AND DD.PAYMENTMADE <= 20) THEN 0 ELSE 2 END))
				> DD.TOTALDEDUCTED
		IF(@FORMID = 1)
			BEGIN
				SELECT DD.SERIALNO, D.NAME, D.PAN, DD.TOTALDEDUCTED, DD.PAYMENTMADE, 
						CONVERT(VARCHAR(10),DD.PAYMENTDATE,103) PAYMENTDATE,
						CONVERT(VARCHAR(10),DEDUCTEDDATE ,103) DEDUCTEDDATE, DE.REFERENCENO 
				INTO #TEMP4
				FROM #DEDDETAIL DD WITH(NOLOCK)
					INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID 
					INNER JOIN #DEDUCTEE DE WITH(NOLOCK) ON DE.DEDUCTEEID = DD.DEDUCTEEID 
				WHERE 
					DD.BRANCHID = @BRANCHID 
					AND DD.FORMID = @FORMID 
					AND DD.[QUARTER] = @QUARTER 
					AND DE.ISVALID = 0 AND ISNULL(DD.NONDEDREASON, 0) = 3 
					AND DD.PAYMENTMADE  > DD.TOTALDEDUCTED
			END
		IF(@FORMID = 1)
			BEGIN
				SELECT * FROM #TEMP1
				UNION
				SELECT * FROM #TEMP2
				UNION
				SELECT * FROM #TEMP3
				UNION
				SELECT * FROM #TEMP4
			END
		ELSE
			BEGIN
				SELECT * FROM #TEMP1
				UNION
				SELECT * FROM #TEMP2
				UNION
				SELECT * FROM #TEMP3
			END
		IF OBJECT_ID('tempdb..#DEDDETAIL') IS NOT NULL
			DROP TABLE #DEDDETAIL 
		IF OBJECT_ID('tempdb..#DEDUCTION') IS NOT NULL
			DROP TABLE #DEDUCTION 
		IF OBJECT_ID('tempdb..#TEMP1') IS NOT NULL
			DROP TABLE #TEMP1 
		IF OBJECT_ID('tempdb..#TEMP2') IS NOT NULL
			DROP TABLE #TEMP2 
		IF OBJECT_ID('tempdb..#TEMP3') IS NOT NULL
			DROP TABLE #TEMP3 
		IF OBJECT_ID('tempdb..#TEMP4') IS NOT NULL
			DROP TABLE #TEMP4 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGACKNO')
DROP PROCEDURE USP_TDS_GETEXISTINGACKNO
GO
CREATE PROCEDURE USP_TDS_GETEXISTINGACKNO       
	@BRANCHCODES NVARCHAR(MAX)        
AS      
BEGIN 
	SELECT * INTO #BRANCHCODES FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')  
	SELECT AK.BRANCHID, FORMID, QUARTER, ORGNUM, ORGFILEDDATE, ISVALID, RECEIPTNO  
	FROM ACKNO AK WITH(NOLOCK) 
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) 
				ON C.BRANCHID=AK.BRANCHID 
	WHERE ISVALID = 1 AND
			C.BRANCHCODE IN    
			(    
				SELECT * FROM  #BRANCHCODES     
			)   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGBRANCHESHAVINGDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETEXISTINGBRANCHESHAVINGDEDUCTIONS
GO
CREATE PROCEDURE USP_TDS_GETEXISTINGBRANCHESHAVINGDEDUCTIONS     
@MONTHID INT    
AS    
 BEGIN    
  SELECT DD.BRANCHID, CB.BRANCHCODE,DD.FORMID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID    
  WHERE SECTIONID IN (5, 17) AND MONTH(PAYMENTDATE) = @MONTHID AND ENTRYTYPE = 4   
  GROUP BY DD.BRANCHID, CB.BRANCHCODE, DD.FORMID    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGBRANCHESHAVINGDEDUCTIONSF005')
DROP PROCEDURE USP_TDS_GETEXISTINGBRANCHESHAVINGDEDUCTIONSF005
GO
CREATE PROCEDURE USP_TDS_GETEXISTINGBRANCHESHAVINGDEDUCTIONSF005   
@MONTHID INT ,
@ISTDSDATA BIT   
AS    
 BEGIN 
 IF(@ISTDSDATA = 1)
 BEGIN
  SELECT DD.BRANCHID, CB.BRANCHCODE,DD.FORMID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID    
  WHERE SECTIONID IN (5) AND MONTH(PAYMENTDATE) = @MONTHID AND TOTALDEDUCTED <> 0 AND ENTRYTYPE = 4
  GROUP BY DD.BRANCHID, CB.BRANCHCODE, DD.FORMID  
  END
  ELSE 
  BEGIN
  SELECT DD.BRANCHID, CB.BRANCHCODE,DD.FORMID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID    
  WHERE SECTIONID IN (5) AND QUARTER = @MONTHID AND TOTALDEDUCTED = 0 AND ENTRYTYPE = 4
  GROUP BY DD.BRANCHID, CB.BRANCHCODE, DD.FORMID  
  END 
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGBRANCHID24G')
DROP PROCEDURE USP_TDS_GETEXISTINGBRANCHID24G
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGBRANCHID24G]       
  @FINANCIALYEAR INT,  
  @GOVTADDAIN VARCHAR(10) = NULL,  
  @QUARTER INT  
  AS  
  BEGIN  
   DECLARE @BRANCHID INT;  
   SET @BRANCHID = -1;  
   IF EXISTS(SELECT BD.BRANCHID FROM DEDUCTOR D WITH(NOLOCK) INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID  
      WHERE GOVTADDAIN = @GOVTADDAIN AND BD.QUARTER=@QUARTER AND FINANCIALYEAR = @FINANCIALYEAR)  
    BEGIN  
       SELECT @BRANCHID = BD.BRANCHID FROM DEDUCTOR D WITH(NOLOCK) INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID  
       WHERE GOVTADDAIN = @GOVTADDAIN AND BD.QUARTER=@QUARTER AND FINANCIALYEAR = @FINANCIALYEAR  
    END  
   SELECT @BRANCHID  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetExistingDedSerNos')
DROP PROCEDURE USP_TDS_GetExistingDedSerNos
GO
CREATE PROCEDURE USP_TDS_GetExistingDedSerNos
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@NAME VARCHAR(75),
	@SERIALNO_FROM INT
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @TABLENAME VARCHAR(25);
		SET @TABLENAME = CASE WHEN @FORMID = 1 THEN 'CORREMPLOYEE' ELSE 'CORRNONEMPLOYEE' END   
		SELECT DEDUCTIONSERIALNO 
		INTO #DEDSERNO
		FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE 
			BRANCHID = @BRANCHID
			AND FORMID = @FORMID
			AND QUARTER = @QUARTER
			AND (CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4 OR CORRECTIONSTATUS = 5 OR CORRECTIONSTATUS = 7)
		IF(@FORMID = 1)
			BEGIN
				SET @SQLQUERY='SELECT TOP 10000 CDD.DEDUCTIONSERIALNO 
							   FROM   CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK) 
								   INNER JOIN 
										(
											SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEEID,CE.DEDUCTEESERIALNO 
											FROM   CORREMPLOYEE CE  WITH(NOLOCK) 
												INNER JOIN 
													(
														SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS
														FROM   CORREMPLOYEE  WITH(NOLOCK) 
														WHERE BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' 
															AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
															AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
														GROUP BY DEDUCTEESERIALNO
													) UE 
												ON CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS 
											WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
													AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
													AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) +' 
										) CEMP 
									ON CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID 
										AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER
									INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID
							   WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
									AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' 
									AND CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' 
									AND CDD.CORRECTIONSTATUS = 1 
									AND CDD.DEDUCTIONSERIALNO NOT IN (SELECT DEDUCTIONSERIALNO FROM #DEDSERNO)';--AND CEMP.DEDUCTEEID IS NOT NULL';
			END
		ELSE
			BEGIN
				SET @SQLQUERY='SELECT TOP 10000 CDD.DEDUCTIONSERIALNO
							   FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK) 
									INNER JOIN 
										(
											SELECT CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,CNE.DEDUCTEEID,CNE.DEDUCTEESERIALNO,CNE.CODE 
											FROM CORRNONEMPLOYEE CNE 
												INNER JOIN 
													(
														SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS
														FROM  CORRNONEMPLOYEE  WITH(NOLOCK)  
														WHERE BRANCHID ='	+ CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND
														QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
														GROUP BY DEDUCTEESERIALNO
													) UNE 
												ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS 
												WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
													QUARTER = ' + CAST(@QUARTER AS VARCHAR) +' 
										) CN 
									ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND CN.BRANCHID = CDD.BRANCHID AND CN.FORMID = CDD.FORMID AND CN.QUARTER = CDD.QUARTER							
							   WHERE CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' 
								   AND CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND CDD.CORRECTIONSTATUS = 1
								   AND CDD.DEDUCTIONSERIALNO NOT IN (SELECT DEDUCTIONSERIALNO FROM #DEDSERNO)';
			END
		IF(@SECTIONID <> -1)
			BEGIN
				SET @SQLQUERY=@SQLQUERY + ' AND SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);
			END
		IF(@NAME <> '')
			BEGIN
				SET @SQLQUERY=@SQLQUERY + ' AND NAME LIKE '''+@NAME+'%''';
			END
		IF(@SERIALNO_FROM <> 0)
			BEGIN
				SET @SQLQUERY=@SQLQUERY + ' AND CDD.DEDUCTIONSERIALNO > = ' + CAST(@SERIALNO_FROM AS VARCHAR);
			END
		SET @SQLQUERY=@SQLQUERY + ' ORDER BY CDD.DEDUCTIONSERIALNO';
		EXEC SP_EXECUTESQL @SQLQUERY;
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTEEDETAIL')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGDEDUCTEEDETAIL]
@BRANCHID INT,
@FORMID INT
AS
  BEGIN
  IF(@FORMID = 1)
    BEGIN
   SELECT D.BRANCHID, E.SERIALNO,D.NAME, D.PAN,D.SALUTATION, D.PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5,
       STATEID, PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, DESIGNATION, EMPLOYMENTFROM, EMPLOYMENTTO,
       GENDER, ISSENIORCITIZEN
    FROM DEDUCTEE D  WITH(NOLOCK)
   INNER JOIN EMPLOYEE E  WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
   WHERE D.BRANCHID = @BRANCHID
    END
  ELSE
    BEGIN
   SELECT D.BRANCHID , E.SERIALNO, D.NAME, D.PAN, D.SALUTATION,D.PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5,
       STATEID, PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, DEDUCTEECODE, ISAPPLICABLE26, ISAPPLICABLE27,
       ISTRANSPORTER
    FROM DEDUCTEE D  WITH(NOLOCK)
   INNER JOIN NONEMPLOYEE E WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID
   WHERE D.BRANCHID = @BRANCHID
    END
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTEEDETAILFOREXCEL')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTEEDETAILFOREXCEL
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGDEDUCTEEDETAILFOREXCEL] 
@BRANCHID INT,      
@FORMID INT      
AS      
 BEGIN      
  DECLARE @SQLQUERY NVARCHAR(MAX);      
  SET @SQLQUERY = 'SELECT D.DEDUCTEEID, E.SERIALNO, ISNULL(D.REFERENCENO,'''')REFERENCENO FROM DEDUCTEE D WITH(NOLOCK)';      
  IF(@FORMID = 1)      
  BEGIN      
   SET @SQLQUERY = @SQLQUERY + ' INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'      
  END      
  ELSE      
    BEGIN      
     SET @SQLQUERY = @SQLQUERY + ' INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'      
    END      
  SET @SQLQUERY = @SQLQUERY + ' WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)         
  EXEC SP_EXECUTESQL @SQLQUERY;       
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTEEDETAILPENSIONER')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTEEDETAILPENSIONER
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGDEDUCTEEDETAILPENSIONER]    
@BRANCHID INT    
AS    
  BEGIN    
   SELECT D.BRANCHID, E.SERIALNO, D.NAME, D.PAN, D.DEDUCTEEID,D.SALUTATION, D.PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5,    
       STATEID, PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, DESIGNATION, EMPLOYMENTFROM, EMPLOYMENTTO,    
       GENDER, ISSENIORCITIZEN,E.ACCOUNTNO,E.PPONUMBER    
    FROM DEDUCTEE D  WITH(NOLOCK)    
   INNER JOIN EMPLOYEE E  WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID    
   WHERE D.BRANCHID = @BRANCHID AND D.EMPTYPE = 1      
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetExistingDeducteeIDs')
DROP PROCEDURE USP_TDS_GetExistingDeducteeIDs
GO
CREATE PROCEDURE USP_TDS_GetExistingDeducteeIDs
	@DeducteeIDs VARCHAR(MAX)
AS
BEGIN
	SELECT * INTO #TEMP FROM UDF_TDS_SPLITSTRING(@DeducteeIDs,',')
	SELECT E.DEDUCTEEID FROM EMPLOYEE E WITH(NOLOCK)
	INNER JOIN #TEMP T
	ON T.DATA=E.DEDUCTEEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTEES')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTEES
GO
CREATE PROCEDURE USP_TDS_GETEXISTINGDEDUCTEES
	@STARTROW INT,  
	@PAGESIZE INT,  
	@BRANCHID INT,  
	@FORMID INT,  
	@QUARTER INT,  
	@NAME NVARCHAR(75)  
AS  
	BEGIN  
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */  
		DECLARE @FIRSTREC INT, @LASTREC INT;  
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
		DECLARE @QUERY NVARCHAR(MAX);
		SELECT DEDUCTEESERIALNO
		INTO #CORRDEDSRNO 
		FROM CORRNONEMPLOYEE WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND QUARTER = @QUARTER 
			AND UPDATEINDICATOR = 1 
			AND CORRECTIONSTATUS = 3 
		SELECT DEDUCTEESERIALNO
		INTO #CORRDEDDETSR
		FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID  
			AND QUARTER = @QUARTER 
			AND CORRECTIONSTATUS = 5
		SELECT *
		INTO #CORRNONEMP
		FROM CORRNONEMPLOYEE WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID  
			AND QUARTER = @QUARTER 
			AND CORRECTIONSTATUS = 1
		SET @QUERY = N'SELECT ID = IDENTITY(INT,1,1),* INTO #DEDUCTEES  
					FROM  
					(  
						SELECT CNE.BRANCHID,CNE.FORMID,CNE.[QUARTER],CNE.DEDUCTEESERIALNO,
							   CNE.SALUTATION,CNE.NAME,CNE.ADDRESS1,CNE.ADDRESS2,CNE.ADDRESS3,
							   CNE.ADDRESS4,CNE.ADDRESS5,CNE.STATEID,SM.STATENAME,  
							   CNE.PINCODE,CNE.ISAPPLICABLE26,CNE.ISAPPLICABLE27,CNE.PHONENO,
							   CNE.EMAILADDRESS,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.CODE,
							   CNE.ISTRANSPORTER,CNE.CORRECTIONSTATUS 
						FROM #CORRNONEMP CNE WITH(NOLOCK)
							LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON CNE.STATEID = SM.STATEID  
						WHERE CNE.DEDUCTEESERIALNO NOT IN (
											 SELECT DEDUCTEESERIALNO 
											 FROM #CORRDEDSRNO WITH(NOLOCK)
											)
								AND CNE.DEDUCTEESERIALNO NOT IN (
											 SELECT DEDUCTEESERIALNO 
											 FROM #CORRDEDDETSR WITH(NOLOCK)
											 )';  
	IF(@NAME <> '')  
		BEGIN  
			SET @QUERY = @QUERY + N' AND CNE.NAME LIKE ''' + @NAME + N'%''';  
		END  
	SET @QUERY = @QUERY + N') TEMP;SELECT * FROM #DEDUCTEES WITH(NOLOCK) WHERE ID > ' 
				+ CAST(@FIRSTREC AS NVARCHAR) + N' AND ID < ' + CAST(@LASTREC AS NVARCHAR);  
	EXEC SP_EXECUTESQL @QUERY;
	IF OBJECT_ID('tempdb..#CORRDEDSRNO') IS NOT NULL
		DROP TABLE #CORRDEDSRNO
	IF OBJECT_ID('tempdb..#CORRDEDDETSR') IS NOT NULL
		DROP TABLE #CORRDEDDETSR
	IF OBJECT_ID('tempdb..#CORRNONEMP') IS NOT NULL
		DROP TABLE #CORRNONEMP
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTEESCOUNT')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTEESCOUNT
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETEXISTINGDEDUCTEESCOUNT]	
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @NAME NVARCHAR(75)
AS
 BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX)
	CREATE TABLE #CORRDEDSRNO (DEDUCTEESERIALNO INT NULL);
	CREATE TABLE #CORRDEDSRNO1 (DEDUCTEESERIALNO INT NULL,NAME VARCHAR(75) NULL);
	IF @FORMID = 1
		BEGIN
			INSERT INTO #CORRDEDSRNO
			SELECT DEDUCTEESERIALNO 
			FROM CORREMPLOYEE WITH(NOLOCK) 
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
				AND QUARTER = @QUARTER AND  UPDATEINDICATOR = 1 
				AND CORRECTIONSTATUS = 3
			INSERT INTO #CORRDEDSRNO1
			SELECT DEDUCTEESERIALNO,NAME
			FROM CORREMPLOYEE WITH(NOLOCK) 
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
				AND QUARTER = @QUARTER 
				AND CORRECTIONSTATUS = 1
		END
	ELSE
		BEGIN
			INSERT INTO #CORRDEDSRNO
			SELECT DEDUCTEESERIALNO 
			FROM CORRNONEMPLOYEE WITH(NOLOCK) 
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
				AND QUARTER = @QUARTER AND  UPDATEINDICATOR = 1 
				AND CORRECTIONSTATUS = 3
			INSERT INTO #CORRDEDSRNO1
			SELECT DEDUCTEESERIALNO,NAME 
			FROM CORRNONEMPLOYEE WITH(NOLOCK) 
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
				AND QUARTER = @QUARTER 
				AND CORRECTIONSTATUS = 1
		END
	SELECT DEDUCTEESERIALNO 
	INTO #CORRDEDDETSRNO
    FROM CORRDEDUCTIONDETAIL 
    WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
		AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 5
	SET @SQLQUERY = N'SELECT COUNT(DEDUCTEESERIALNO) AS RECORDCOUNT 
				   FROM  #CORRDEDSRNO1 
			       WHERE DEDUCTEESERIALNO NOT IN (
												SELECT DEDUCTEESERIALNO 
												FROM #CORRDEDSRNO WITH(NOLOCK)
											  )
				 AND DEDUCTEESERIALNO NOT IN (
												SELECT DEDUCTEESERIALNO 
												FROM #CORRDEDDETSRNO WITH(NOLOCK)
											  )';
	IF(@NAME <> '')
		BEGIN
			SET @SQLQUERY = @SQLQUERY + N' AND NAME LIKE ''' + @NAME + N'%''';
		END
	EXEC SP_EXECUTESQL @SQLQUERY;
	IF OBJECT_ID('tempdb..#CORRDEDSRNO') IS NOT NULL
		DROP TABLE #CORRDEDSRNO
	IF OBJECT_ID('tempdb..#CORRDEDSRNO1') IS NOT NULL
		DROP TABLE #CORRDEDSRNO1
	IF OBJECT_ID('tempdb..#CORRDEDDETSRNO') IS NOT NULL
		DROP TABLE #CORRDEDDETSRNO
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTEESFORRST')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTEESFORRST
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGDEDUCTEESFORRST]
@BRANCHID INT,
@ISEMPLOYEE BIT,
@VALUE INT
AS
  BEGIN
       DECLARE @QUERY NVARCHAR(MAX);
       SET @QUERY = 'SELECT ISNULL(MAX(D.REFERENCENO),'''')REFERENCENO, MAX(D.NAME)NAME, MAX(D.PAN)PAN, MAX(D.DEDUCTEEID)DEDUCTEEID, D.BRANCHID, NE.SERIALNO , 0 AS STATUS FROM DEDUCTEE D WITH(NOLOCK) ';
  IF(@ISEMPLOYEE = 1)
   BEGIN
    SET @QUERY = @QUERY  + ' INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID'
   END
     ELSE IF(@ISEMPLOYEE = 0)
   BEGIN
    SET @QUERY = @QUERY  + ' INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID'
   END
  SET @QUERY = @QUERY  + ' WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
  IF(@VALUE = 0)
  BEGIN
   SET @QUERY = @QUERY  + ' AND ISNULL(D.REFERENCENO,'''') <> '''''
  END
  ELSE IF(@VALUE = 2)
    BEGIN
  SET @QUERY = @QUERY  + ' AND ISNULL(D.REFERENCENO,'''') = '''''
    END
	SET @QUERY =  @QUERY + ' AND CODE <> -1 GROUP BY NE.SERIALNO, D.BRANCHID '
	EXEC SP_EXECUTESQL @QUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTIONCOUNT')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTIONCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGDEDUCTIONCOUNT]
@BRANCHID INT,
@MONTH INT
AS
	BEGIN
			SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTH(PAYMENTDATE) = @MONTH
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTIONDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGDEDUCTIONDETAIL]	 
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT 
AS 
BEGIN 
	SELECT DD.SERIALNO,DD.DEDUCTIONID 
	INTO #DEDBFQ 
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  
	SELECT * FROM #DEDBFQ  
	WHERE DEDUCTIONID NOT IN(SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE BRANCHID = @BRANCHID) 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTIONS
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGDEDUCTIONS]   
@BRANCHID INT,        
@FORMID INT,        
@QUARTER INT        
AS        
  BEGIN  
  SELECT BRANCHID, FORMID, QUARTER,SERIALNO, ERETURNID,PAYMENTMADE,PAYMENTDATE,SECTIONID,INCOMETAX,EDUCATIONCESS,SURCHARGE,DEDUCTIONID,        
   INCOMETAXRATE, EDUCATIONCESSRATE, SURCHARGERATE,DEDUCTIONID,CERTNO,TDSRATEASPER,ACKNO,REMITTANCEID,COUNTRYID,        
   TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON        
  FROM DEDUCTIONDETAIL WITH(NOLOCK)       
  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGDEDUCTIONSERIALNO')
DROP PROCEDURE USP_TDS_GETEXISTINGDEDUCTIONSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGDEDUCTIONSERIALNO]  
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT  
AS  
  BEGIN  
 DECLARE @QUERY NVARCHAR(MAX);  
 SET @QUERY = 'SELECT DD.SERIALNO FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
      INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID'  
 IF(@FORMID = 1)  
  BEGIN  
  SET @QUERY = @QUERY + ' INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID'  
  END  
 ELSE  
  BEGIN  
    SET @QUERY = @QUERY + ' INNER JOIN NONEMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID'  
  END  
  SET @QUERY = @QUERY  + ' WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = '+ CAST(@FORMID AS VARCHAR) + ' AND QUARTER = '+ CAST(@QUARTER AS VARCHAR)  
  EXEC SP_EXECUTESQL @QUERY;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGEMPLOYEES')
DROP PROCEDURE USP_TDS_GETEXISTINGEMPLOYEES
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGEMPLOYEES]   
 @STARTROW INT,  
 @PAGESIZE INT,  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @NAME VARCHAR(75)  
AS  
 BEGIN  
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */  
  DECLARE @FIRSTREC INT, @LASTREC INT  
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
  DECLARE @QUERY NVARCHAR(MAX);  
  SET @QUERY='SELECT ID = IDENTITY(INT,1,1),* INTO #EMPLOYEES  
     FROM  
     (  
      SELECT  CE.BRANCHID,CE.FORMID,CE.[QUARTER],CE.DEDUCTEESERIALNO,CE.SALUTATION,CE.NAME,CE.ADDRESS1,CE.ADDRESS2,CE.ADDRESS3,CE.ADDRESS4,CE.ADDRESS5,CE.STATEID,SM.STATENAME,  
        CE.PINCODE,CE.GENDER,ISNULL(CE.ISSENIORCITIZEN,0) ISSENIORCITIZEN,CE.DESIGNATION,CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO,CE.PHONENO,CE.EMAILADDRESS,CE.PAN,CE.PANREFERENCE,CE.LASTPAN,CE.UPDATEINDICATOR,
        CE.CORRECTIONSTATUS  
      FROM    CORREMPLOYEE CE  WITH(NOLOCK) LEFT JOIN STATEMASTER SM  WITH(NOLOCK) ON CE.STATEID = SM.STATEID  
      WHERE   CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND
       CE.CORRECTIONSTATUS = 1   
      AND CE.DEDUCTEESERIALNO NOT IN (SELECT DEDUCTEESERIALNO FROM CORREMPLOYEE  WITH(NOLOCK) WHERE BRANCHID = ' +CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
      QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND  UPDATEINDICATOR = 1 AND CORRECTIONSTATUS = 3)';  
 -- SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #EMPLOYEES WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);  
   IF(@NAME <> '')    
   BEGIN    
    SET @QUERY = @QUERY + 'AND CE.NAME LIKE ''' + @NAME + '%''';    
   END    
  SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #EMPLOYEES WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);    
  EXEC SP_EXECUTESQL @QUERY;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGEMPLOYEESLNOFORSALARY')
DROP PROCEDURE USP_TDS_GETEXISTINGEMPLOYEESLNOFORSALARY
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGEMPLOYEESLNOFORSALARY]  
@BRANCHID INT 
AS 
BEGIN 
	SELECT E.SERIALNO,SD.DEDUCTEEID FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN EMPLOYEE E WITH(NOLOCK)
	ON SD.DEDUCTEEID=E.DEDUCTEEID 
	WHERE SD.BRANCHID=@BRANCHID; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGREFERENCENUMBER')
DROP PROCEDURE USP_TDS_GETEXISTINGREFERENCENUMBER
GO
-- Author:  <Author,,Name>  
-- Create date: <Create Date,,>  
-- Description: <Description,,>  
-- =============================================  
CREATE PROCEDURE USP_TDS_GETEXISTINGREFERENCENUMBER   
 @REFERENCENO VARCHAR(15),  
 @BRANCHID INT  
AS  
BEGIN  
 SELECT PANREFERENCE FROM DEDUCTEE WITH(NOLOCK)   
 WHERE REFERENCENO=@REFERENCENO AND BRANCHID=@BRANCHID  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetExistingSalaryDetails')
DROP PROCEDURE USP_TDS_GetExistingSalaryDetails
GO
CREATE PROCEDURE USP_TDS_GetExistingSalaryDetails
	@BranchID INT
AS
BEGIN
	SELECT D.REFERENCENO FROM DEDUCTEE D WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON D.DEDUCTEEID=SD.DEDUCTEEID
	WHERE D.BRANCHID=@BranchID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTINGSECTION16DETAILS')
DROP PROCEDURE USP_TDS_GETEXISTINGSECTION16DETAILS
GO
CREATE PROCEDURE [USP_TDS_GETEXISTINGSECTION16DETAILS]  
@BRANCHCODES NVARCHAR(MAX),      
@MONTHID INT,    
@REFNOS NVARCHAR(MAX)    
AS    
  BEGIN    
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
 SET NOCOUNT ON
 SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING( @BRANCHCODES ,',')  
 SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFNOS,',')        
 SELECT DISTINCT SALARYHEADID, GROSSAMT2, GROSSAMT3, D.REFERENCENO FROM SALDETAIL SD    
 INNER JOIN LINKTOTC LC ON LC.COMID = SD.COMID    
 INNER JOIN EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID    
 INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID    
 INNER JOIN COMPANYBRANCH C ON C.BRANCHID=D.BRANCHID  
 INNER JOIN #BRANCHES B ON B.DATA=C.BRANCHCODE   
  INNER JOIN #REFNO R ON R.DATA=D.REFERENCENO     
 WHERE  SD.MONTHID = @MONTHID    
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETEXISTSALEMPTABLE')
DROP PROCEDURE USP_TDS_GETEXISTSALEMPTABLE
GO
CREATE PROCEDURE  USP_TDS_GETEXISTSALEMPTABLE    
@REFERENCENOS NVARCHAR(MAX),  
@SALHEADIDS NVARCHAR(MAX),    
@MONTHID INT    
AS    
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
 SET NOCOUNT ON 
 SELECT * INTO #SALHEAD FROM DBO.UDF_TDS_SPLITSTRING( @SALHEADIDS ,',')
 SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')           
 SELECT DISTINCT D.REFERENCENO, SAL.MONTHID,LC.COMID,SAL.SALARYHEADID FROM DEDUCTEE D INNER JOIN EMPLOYEE E    
 ON E.DEDUCTEEID=D.DEDUCTEEID    
 INNER JOIN LINKTOTC LC     
 ON LC.EMPLOYEEID=E.EMPLOYEEID AND LC.BRANCHID=D.BRANCHID    
 INNER  JOIN    
 (    
    SELECT DISTINCT COMID,MONTHID,SALARYHEADID FROM SALDETAIL S
    INNER JOIN #SALHEAD SL ON SL.DATA=S.SALARYHEADID
     WHERE MONTHID=@MONTHID  
 ) SAL    
  ON   SAL.COMID=LC.COMID    
 INNER JOIN  #REFNO R
ON R.DATA=D.REFERENCENO 
 WHERE  ISNULL(D.REFERENCENO,'')<>''
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFEATURESOFROLE')
DROP PROCEDURE USP_TDS_GETFEATURESOFROLE
GO
CREATE PROCEDURE [USP_TDS_GETFEATURESOFROLE]
(
@ROLEID INT
)
AS
BEGIN
 SELECT F.FEATUREID,F.FEATURENAME,CASE WHEN TEMP.FEATUREID IS NULL THEN 0 ELSE 1 END ASSIGNED  FROM FEATURE F  WITH(NOLOCK) LEFT JOIN
 (
  SELECT RF.FEATUREID FROM ROLES R   WITH(NOLOCK)
  INNER JOIN ROLEFEATURE RF  WITH(NOLOCK)
  ON R.ROLEID=RF.ROLEID
  WHERE R.ROLEID=@ROLEID
 ) TEMP
 ON TEMP.FEATUREID=F.FEATUREID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFILESUMMARYINFO')
DROP PROCEDURE USP_TDS_GETFILESUMMARYINFO
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETFILESUMMARYINFO]
@WITH15GH BIT
AS
BEGIN
	IF(@WITH15GH = 1)
	BEGIN
		SELECT
		(SELECT COUNT(BRANCHID) FROM COMPANYBRANCH  WITH(NOLOCK)) AS BRANCHCOUNT,
		(SELECT COUNT(USERID) FROM USERMASTER  WITH(NOLOCK) WHERE ISACTIVE = 1) AS ACTIVEUSERCOUNT,
		(SELECT COUNT(USERID) FROM USERMASTER  WITH(NOLOCK) WHERE ISACTIVE = 0) AS NONACTIVEUSERCOUNT,
		(ISNULL((SELECT COUNT(ACKID) FROM ACKNO  WITH(NOLOCK) WHERE LEN(ORGNUM)>0),0)  
		+ ISNULL((SELECT COUNT(ACKID) FROM ACKNO15GH  WITH(NOLOCK) WHERE LEN(ORGNUM)>0),0)) AS ERETURNFILEDCOUNT
	END
	ELSE
	BEGIN
		SELECT
		(SELECT COUNT(BRANCHID) FROM COMPANYBRANCH  WITH(NOLOCK)) AS BRANCHCOUNT,
		(SELECT COUNT(USERID) FROM USERMASTER  WITH(NOLOCK) WHERE ISACTIVE = 1) AS ACTIVEUSERCOUNT,
		(SELECT COUNT(USERID) FROM USERMASTER  WITH(NOLOCK) WHERE ISACTIVE = 0) AS NONACTIVEUSERCOUNT,
		(SELECT COUNT(ACKID) FROM ACKNO  WITH(NOLOCK) WHERE LEN(ORGNUM)>0) AS ERETURNFILEDCOUNT
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFINACLEBRANCHES')
DROP PROCEDURE USP_TDS_GETFINACLEBRANCHES
GO
CREATE PROCEDURE [USP_TDS_GETFINACLEBRANCHES]
@MONTH INT
AS
BEGIN
	SELECT DISTINCT CB.BRANCHID,BRANCHCODE FROM COMPANYBRANCH CB WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.BRANCHID=CB.BRANCHID
	WHERE MONTH(DD.DEDUCTEDDATE)=@MONTH AND DD.SECTIONID IN (5,17) AND ENTRYTYPE=4
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFLATFILEREPORT')
DROP PROCEDURE USP_TDS_GETFLATFILEREPORT
GO
CREATE PROCEDURE [USP_TDS_GETFLATFILEREPORT]   
	@BRANCHID INT,      
	@FORMID INT,      
	@QUARTER INT,      
	@PAYMENTDATE SMALLDATETIME      
AS      
	BEGIN     
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED     
		SELECT DD.SERIALNO, DD.DEDUCTIONID, R.BRANCHCODE, TR.BGLCODE, DD.RPAMOUNT1 AS EXCLUDESERVICETAX, DD.RPAMOUNT2 AS SERVICETAX, 
		ISNULL(DD.RPSBCESS, 0) AS SBCESS, ISNULL(DD.RPKKCESS, 0) AS KKCESS, DD.TOTALDEDUCTED,((DD.RPAMOUNT1 + DD.RPAMOUNT2) - DD.TOTALDEDUCTED + ISNULL(DD.RPSBCESS,0) + ISNULL(DD.RPKKCESS, 0)) AS NETAMOUNTPAYABLE, 
		TR.DESCRIPTION,REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE
		(D.NAME,'~',''),'!',''),'@',''),'#',''),'$',''),'%',''),'^',''),'*',''),'|',''),'\',''),'\',''),'"',''),'''',''),'&','')NAME,       
			 (SELECT BRANCHCODE 
			  FROM COMPANYBRANCH 
			  WHERE BRANCHID = @BRANCHID) 
			 PARENTBRANCHCODE,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.INCOMETAXRATE,DD.TOTALDEDUCTED, 
			 CAST(ISNULL(CONVERT(NVARCHAR, DD.DEDUCTEDDATE,103),'') AS NVARCHAR)DEDUCTEDDATE,NE.BANKNAME,
			  NE.BRANCHNAME,TS.SECTIONNAME,NE.STREGNO,NE.ACCOUNTNUMBER,NE.IFSCCODE,
			 (
			  SELECT ISZORO 
			  FROM COMPANYBRANCH 
			  WHERE BRANCHID = R.BRANCHID
			 ) ISZORO      
		FROM DEDUCTIONDETAIL DD  
			INNER JOIN COMPANYBRANCH CB  ON CB.BRANCHID = DD.BRANCHID      
			INNER JOIN DEDUCTEE D  ON DD.DEDUCTEEID = D.DEDUCTEEID      
			INNER JOIN NONEMPLOYEE NE  ON D.DEDUCTEEID = NE.DEDUCTEEID      
			INNER JOIN TDSRATE TR  ON TR.BGLCODEID = DD.BGLCODEID      
			INNER JOIN REPORTPAYMENT RP  ON RP.ID = DD.REPORTPAYMENTID  
			INNER JOIN TAXSECTIONS TS ON TS.SECTIONID=DD.SECTIONID      
			INNER JOIN      
				(      
			     SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID 
			     FROM REPORTPAYMENT RP        
					  INNER JOIN COMPANYBRANCH CB  ON CB.BRANCHID = RP.BRANCHID      
			     WHERE RP.PARENTBRANCHID = @BRANCHID      
				)R ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID      
		WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.PAYMENTDATE = @PAYMENTDATE AND DD.QUARTER = @QUARTER AND    
			  LEFT(TR.BGLCODE, 1)<>'1' 
		ORDER BY R.BRANCHCODE         
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ACERTIFICATENODETAILS')
DROP PROCEDURE USP_TDS_GETFORM16ACERTIFICATENODETAILS
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ACERTIFICATENODETAILS]
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT ,
	@FORMID INT,
	@SECTIONID INT
AS
	BEGIN
		DECLARE @FIRSTREC INT, @LASTREC INT;
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE;
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		DECLARE @QUERY NVARCHAR(MAX);
		SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #FORM16ACERTIFICATENODETAILS
					  FROM (
								SELECT DISTINCT F16A.BRANCHID,NE.SERIALNO,TS.SECTIONNAME,F16A.SECTIONID,F16A.TDSCERTIFICATENO,F16A.PRINTCERTIFICATENO,F16A.CERTIFICATEDATE,F16A.ISCERTIFICATEGIVEN
								FROM   FORM16A F16A  WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK) ON F16A.DEDUCTIONID = DD.DEDUCTIONID
													LEFT  JOIN DEDCHALINK DL  WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
													INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
													INNER JOIN NONEMPLOYEE NE  WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
													INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON F16A.SECTIONID = TS.SECTIONID
								WHERE  F16A.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND (DD.TOTALDEDUCTED=0 OR DL.DEDCHALINKID IS NOT NULL) AND F16A.PRINTCERTIFICATENO IS NOT NULL AND LEN(F16A.PRINTCERTIFICATENO) > 0 ';
		IF @SECTIONID <> -1
			BEGIN
				SET @QUERY = @QUERY + ' AND DD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);
			END
		SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #FORM16ACERTIFICATENODETAILS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);
		EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ACERTIFICATENODETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETFORM16ACERTIFICATENODETAILSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ACERTIFICATENODETAILSCOUNT]  
 @BRANCHID INT ,  
 @FORMID INT,  
 @SECTIONID INT  
AS  
 BEGIN  
  DECLARE @COUNT TABLE(COUNTREC INT)
  DECLARE @QUERY1 NVARCHAR(MAX),@QUERY2 NVARCHAR(MAX); 
  DECLARE @QUERY3 NVARCHAR(MAX),@QUERY4 NVARCHAR(MAX);   
  SET @QUERY1 = 'SELECT DISTINCT F16A.TDSCERTIFICATENO,F16A.SECTIONID  
        FROM   FORM16A F16A  WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK) ON F16A.DEDUCTIONID = DD.DEDUCTIONID  
             INNER  JOIN DEDCHALINK DL  WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND  DL.BRANCHID=DD.BRANCHID 
        WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.TOTALDEDUCTED >0
                     AND F16A.TDSCERTIFICATENO <> 0 AND F16A.PRINTCERTIFICATENO IS NOT NULL AND LEN(F16A.PRINTCERTIFICATENO) > 0';  
  IF @SECTIONID <> -1  
   BEGIN  
    SET @QUERY1 = @QUERY1 + ' AND DD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);  
   END  
  SET @QUERY2 = 'SELECT COUNT(T.TDSCERTIFICATENO) AS RECORD_COUNT FROM (' + @QUERY1 +  ' GROUP BY F16A.SECTIONID,F16A.TDSCERTIFICATENO) T';  
  SET @QUERY3 = 'SELECT DISTINCT F16A.TDSCERTIFICATENO,F16A.SECTIONID  
        FROM   FORM16A F16A  WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK) ON F16A.DEDUCTIONID = DD.DEDUCTIONID            
        WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.TOTALDEDUCTED =0
                     AND F16A.TDSCERTIFICATENO <> 0 AND F16A.PRINTCERTIFICATENO IS NOT NULL AND LEN(F16A.PRINTCERTIFICATENO) > 0';  
  IF @SECTIONID <> -1  
   BEGIN  
    SET @QUERY3 = @QUERY3 + ' AND DD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);  
   END  
  SET @QUERY4 = 'SELECT COUNT(T.TDSCERTIFICATENO) AS RECORD_COUNT FROM (' + @QUERY3 +  ' GROUP BY F16A.SECTIONID,F16A.TDSCERTIFICATENO) T';  
  INSERT INTO  @COUNT
  EXEC SP_EXECUTESQL @QUERY2
   INSERT INTO  @COUNT
  EXEC SP_EXECUTESQL @QUERY4
  SELECT SUM(COUNTREC) FROM @COUNT
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ADEDSCOUNT')
DROP PROCEDURE USP_TDS_GETFORM16ADEDSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ADEDSCOUNT]
	@BRANCHID INT ,
	@FORMID INT,
	@SECTIONID INT,
	@DEDUCTEESLNO INT,
	@PRINTCERTIFICATENO VARCHAR(50)
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		SET @QUERY = 'SELECT COUNT(DD.DEDUCTIONID) DEDUCTION_COUNT
					  FROM DEDUCTIONDETAIL DD  WITH(NOLOCK) INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
											  INNER JOIN NONEMPLOYEE NE  WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID
											  LEFT JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID
											  LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK)  ON DL.CHALLANID = CD.CHALLANID
											  LEFT JOIN FORM16A F  WITH(NOLOCK)  ON DD.DEDUCTIONID = F.DEDUCTIONID
					  WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' +  CAST(@FORMID AS VARCHAR) + ' AND (CD.CHALLANID IS NOT NULL OR (CD.CHALLANID IS NULL AND DD.TOTALDEDUCTED = 0))';
		IF @SECTIONID <> -1
			BEGIN
				SET @QUERY = @QUERY + ' AND DD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);
			END
		IF @DEDUCTEESLNO <> -1
			BEGIN
				SET @QUERY = @QUERY + ' AND NE.SERIALNO = ' + CAST(@DEDUCTEESLNO AS VARCHAR);
			END
		IF @PRINTCERTIFICATENO <> ''
			BEGIN
				SET @QUERY = @QUERY + ' AND F.PRINTCERTIFICATENO = ''' + @PRINTCERTIFICATENO + '''';
			END
		EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ADETAILS')
DROP PROCEDURE USP_TDS_GETFORM16ADETAILS
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ADETAILS]
	@BRANCHID INT,
	@DEDUCTIONID INT
AS
	BEGIN
		SELECT DD.BRANCHID,DD.SECTIONID,NE.SERIALNO,DD.DEDUCTIONID, TS.SECTIONNAME,F16A.TDSCERTIFICATENO,F16A.PRINTCERTIFICATENO,F16A.CERTIFICATEDATE,F16A.ISCERTIFICATEGIVEN
		FROM   DEDUCTIONDETAIL DD  WITH(NOLOCK)  LEFT JOIN DEDUCTEE D  WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
								  LEFT JOIN NONEMPLOYEE NE  WITH(NOLOCK)  ON D.DEDUCTEEID=NE.DEDUCTEEID
								  INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON DD.SECTIONID=TS.SECTIONID
							      LEFT JOIN FORM16A F16A  WITH(NOLOCK)  ON DD.DEDUCTIONID=F16A.DEDUCTIONID
		WHERE  DD.BRANCHID=@BRANCHID AND DD.DEDUCTIONID=@DEDUCTIONID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ADETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETFORM16ADETAILSFORGRID
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ADETAILSFORGRID] 
@BRANCHID INT, 
@FORMID INT,
@QUARTER INT
AS 
BEGIN 
	SELECT DISTINCT D.DEDUCTEEID,NE.SERIALNO,TS.SECTIONNAME,D.NAME,CAST(NE.SERIALNO AS VARCHAR)+'/'+TS.SECTIONNAME+'/' AS CERTPREFIX, 
	F16A.PRINTCERTIFICATENO,F16A.CERTIFICATEDATE, 
	CASE WHEN F16A.ISCERTIFICATEGIVEN <> 1 OR F16A.ISCERTIFICATEGIVEN IS NULL THEN 'NO' ELSE 'YES' END ISCERTGIVEN,TS.SECTIONID 
	FROM DEDUCTEE D WITH(NOLOCK)
	INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID 
	INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID 
	LEFT JOIN FORM16A F16A WITH(NOLOCK) ON DD.DEDUCTIONID=F16A.DEDUCTIONID 
	INNER JOIN DEDCHALINK DC WITH(NOLOCK) ON DC.DEDUCTIONID=DD.DEDUCTIONID 
	INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID=TS.SECTIONID 
	WHERE D.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER ORDER BY NE.SERIALNO; 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ADETAILSFORPDF')
DROP PROCEDURE USP_TDS_GETFORM16ADETAILSFORPDF
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ADETAILSFORPDF] 
    @BRANCHID INT,        
    @FORMID SMALLINT,        
    @QUARTER SMALLINT=NULL,        
    @FROMDATE SMALLDATETIME=NULL,        
    @TODATE SMALLDATETIME=NULL,        
    @SECTIONID INT=NULL,        
    @BANKCHALLANNO VARCHAR(10)=NULL,        
    @DEDUCTEEID INT=NULL,        
    @TDSCERTIFICATNO VARCHAR(50)=NULL                    
AS        
BEGIN          
  DECLARE @SQLQUERY NVARCHAR(MAX)          
  SET @SQLQUERY='SELECT DISTINCT DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.QUARTER,D.DEDUCTEEID,D.NAME,ISNULL(CD.CHALLANID,-1)CHALLANID,      
        D.PAN,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,SM.STATENAME,D.PINCODE,ISNULL(D.REFERENCENO,'''') REFERENCENO,      
        TS.SECTIONNAME,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,CD.MODEOFPAYMENT,CD.CHALLANPAIDDATE,D.SALUTATION,        
        	CASE WHEN MODEOFPAYMENT <> 3 THEN  REPLICATE(''0'', 5 - LEN(BANKCHALLANNO)) + BANKCHALLANNO    
		        ELSE REPLICATE(''0'', 5 - LEN(TRNVOUCHERNO)) + TRNVOUCHERNO    
         END        
         AS CHALLANNUMBER,
         CASE WHEN MODEOFPAYMENT <> 3 THEN  REPLICATE(''0'', 7 - LEN(BSRCODE)) + BSRCODE      
          ELSE REPLICATE(''0'', 7 - LEN(TVRECEIPTNUMBER)) + TVRECEIPTNUMBER      
         END          
         AS BSRCODE,
         F16A.PRINTCERTIFICATENO,'''' AS EMPLOYMENTFROM,'''' AS EMPLOYMENTTO,'''' AS DESIGNATION          
            FROM DEDUCTIONDETAIL DD WITH(NOLOCK)        
            LEFT JOIN DEDCHALINK DCL WITH(NOLOCK)        
           ON DD.DEDUCTIONID=DCL.DEDUCTIONID        
            LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK)       
           ON DCL.CHALLANID=CD.CHALLANID        
            INNER JOIN FORM16A F16A WITH(NOLOCK)      
           ON DD.DEDUCTIONID=F16A.DEDUCTIONID        
            INNER JOIN DEDUCTEE D WITH(NOLOCK)       
           ON DD.DEDUCTEEID=D.DEDUCTEEID        
            INNER JOIN STATEMASTER SM WITH(NOLOCK)       
           ON D.STATEID=SM.STATEID        
            INNER JOIN TAXSECTIONS TS WITH(NOLOCK)       
           ON DD.SECTIONID=TS.SECTIONID        
            LEFT JOIN REMITTINGBANK RB WITH(NOLOCK)       
           ON CD.BANKID=RB.BANKID       
            INNER JOIN ACKNO ACK WITH(NOLOCK)   
           ON ACK.BRANCHID=DD.BRANCHID AND ACK.QUARTER=DD.QUARTER AND ACK.ISVALID=1          
     WHERE DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)+ '         
        AND (DD.TOTALDEDUCTED=0 OR DCL.DEDCHALINKID IS NOT NULL) AND ISNULL(F16A.PRINTCERTIFICATENO,'''')<>'''''       
  IF @QUARTER IS NOT NULL        
  BEGIN        
   SET @SQLQUERY=@SQLQUERY+' AND DD.QUARTER='+CAST(@QUARTER AS VARCHAR)        
  END        
  ELSE        
  BEGIN         
   IF(@FROMDATE IS NOT NULL)        
   BEGIN        
    SET @SQLQUERY=@SQLQUERY+' AND DD.PAYMENTDATE>='''+ CAST(@FROMDATE AS VARCHAR) +''''        
   END        
   IF(@TODATE IS NOT NULL)        
   BEGIN        
    SET @SQLQUERY=@SQLQUERY+' AND DD.PAYMENTDATE<='''+ CAST(@TODATE AS VARCHAR) +''''        
   END         
  END         
  IF(@SECTIONID IS NOT NULL)        
  BEGIN        
   SET @SQLQUERY=@SQLQUERY+' AND DD.SECTIONID='+CAST(@SECTIONID AS VARCHAR)        
  END        
  IF(@BANKCHALLANNO IS NOT NULL)        
  BEGIN        
   SET @SQLQUERY=@SQLQUERY+' AND (CD.BANKCHALLANNO='''+CAST(@BANKCHALLANNO AS VARCHAR)+''' OR CD.TRNVOUCHERNO='''+CAST(@BANKCHALLANNO AS VARCHAR)+''')';        
  END         
  IF(@DEDUCTEEID IS NOT NULL)        
  BEGIN        
   SET @SQLQUERY=@SQLQUERY+' AND DD.DEDUCTEEID='+CAST(@DEDUCTEEID AS VARCHAR)        
  END        
  IF(@TDSCERTIFICATNO IS NOT NULL)        
  BEGIN        
   SET @SQLQUERY=@SQLQUERY+' AND F16A.PRINTCERTIFICATENO='''+CAST(@TDSCERTIFICATNO AS VARCHAR)+''''        
  END        
  SET @SQLQUERY=@SQLQUERY+' ORDER BY DD.QUARTER,F16A.PRINTCERTIFICATENO'    
 --PRINT @SQLQUERY         
EXECUTE SP_EXECUTESQL @SQLQUERY        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ADETAILSFORREPORTS')
DROP PROCEDURE USP_TDS_GETFORM16ADETAILSFORREPORTS
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ADETAILSFORREPORTS]
@BRANCHID INT,
@QUARTER INT,
@FORMID INT
AS
BEGIN
SELECT * FROM VWFORM16A
WHERE BRANCHID=@BRANCHID AND [QUARTER]=@QUARTER AND FORMID=@FORMID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ADETAILSFORTANACCOUNT')
DROP PROCEDURE USP_TDS_GETFORM16ADETAILSFORTANACCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ADETAILSFORTANACCOUNT]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN
     SELECT TOP 3 D.PAN,ISNULL(DD.TOTALDEDUCTED,0) FROM DEDUCTEE D LEFT JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK)  ON DD.DEDUCTEEID=D.DEDUCTEEID
                                                          LEFT JOIN DEDCHALINK DCL  WITH(NOLOCK)  ON DCL.DEDUCTIONID=DD.DEDUCTIONID
							  WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
							   AND D.PAN<>'PANAPPLIED' AND D.PAN<>'PANINVALID' AND D.PAN<>'PANNOTAVBL'
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ADETAILSFORTREE')
DROP PROCEDURE USP_TDS_GETFORM16ADETAILSFORTREE
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ADETAILSFORTREE]
AS
BEGIN
	SELECT SECTIONID,SECTIONNAME FROM TAXSECTIONS  WITH(NOLOCK)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16AREPORTS')
DROP PROCEDURE USP_TDS_GETFORM16AREPORTS
GO
CREATE PROCEDURE [USP_TDS_GETFORM16AREPORTS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@BANKCHALLANNO VARCHAR(5),
	@DEDUCTEEID INT,
	@TDSCERTNO VARCHAR(50),
	@FROMDATE SMALLDATETIME=NULL,
	@TODATE SMALLDATETIME=NULL
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY='SELECT QUARTER,PAYMENTMADE,PAYMENTDATE,CHALLANDATE,CHALLANPAIDDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,DEDUCTEDDATE,TOTALDEDUCTED,TOTALAMNTPAID,TOTALTAXDEDUCTED,DEDUCTORNAME,DEDADDR1,DEDADDR2,DEDADDR3,DEDADDR4,DEDADDR5 + ''-'' + DEDPINCODE AS DEDADDR5,DEDUCTORSTATENAME,
							  DCOUNT,DEDPINCODE,DEDTAN,DEDPAN,PERSONNAME,DESIGNATION,DEDUCTEEID,NAME,DEDUCTEEADDR1,DEDUCTEEADDR2,DEDUCTEEADDR3,DEDUCTEEADDR4,DEDUCTEEADDR5,DEDUCTEEPINCODE,GENDERTITLE,FATHERNAME,ASSESSMENTYEAR,
							  DEDUCTEEPAN,SECTIONNAME,DESCRIPTION,DEDUCTEESTATENAME,CHEQUENO,BANKCHALLANNO,BSRCODE,PRINTCERTIFICATENO,VOUCHERDATE,VOUCHERTOTALDEDUCTED,TRNVOUCHERNO,TVRECEIPTNUMBER,
							  CASE WHEN '+ CAST(@QUARTER AS VARCHAR) +'=-1 THEN ACKNO1 ELSE CASE WHEN '+ CAST(@QUARTER AS VARCHAR) +'=1 THEN ACKNO1 ELSE '''' END END AS ACKNO1,
							  CASE WHEN '+ CAST(@QUARTER AS VARCHAR) +'=-1 THEN ACKNO2 ELSE CASE WHEN '+ CAST(@QUARTER AS VARCHAR) +'=2 THEN ACKNO2 ELSE '''' END END AS ACKNO2,
							  CASE WHEN '+ CAST(@QUARTER AS VARCHAR) +'=-1 THEN ACKNO3 ELSE CASE WHEN '+ CAST(@QUARTER AS VARCHAR) +'=3 THEN ACKNO3 ELSE '''' END END AS ACKNO3,
							  CASE WHEN '+ CAST(@QUARTER AS VARCHAR) +'=-1 THEN ACKNO4 ELSE CASE WHEN '+ CAST(@QUARTER AS VARCHAR) +'=4 THEN ACKNO4 ELSE '''' END END AS ACKNO4,RECEIPTNO				  
					   FROM	  VWFORM16A WHERE PRINTCERTIFICATENO IS NOT NULL AND LEN(LTRIM(PRINTCERTIFICATENO))>0  AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+ ' AND FORMID='+CAST(@FORMID AS VARCHAR);
		IF(@QUARTER<>5)
			BEGIN
				SET @SQLQUERY=@SQLQUERY+' AND QUARTER='+CAST(@QUARTER AS VARCHAR);
			END
		IF(@SECTIONID<>-1)
			BEGIN
				SET @SQLQUERY=@SQLQUERY+' AND SECTIONID='+CAST(@SECTIONID AS VARCHAR);
			END
		IF(@BANKCHALLANNO<>'')
			BEGIN
				SET @SQLQUERY=@SQLQUERY+' AND BANKCHALLANNO='+ ''''+@BANKCHALLANNO+'''';
			END						
		IF(@DEDUCTEEID<>-1)
			BEGIN
				SET @SQLQUERY=@SQLQUERY+' AND DEDUCTEEID='+CAST(@DEDUCTEEID AS VARCHAR);
			END
		IF(@TDSCERTNO<>'')
			BEGIN
				SET @SQLQUERY=@SQLQUERY+' AND PRINTCERTIFICATENO='+''''+@TDSCERTNO+'''';
			END
		IF(@FROMDATE<>'')
			BEGIN
				SET @SQLQUERY=@SQLQUERY+' AND PAYMENTDATE>='''+ CAST(@FROMDATE AS VARCHAR) +'''';
			END
		IF(@TODATE<>'')
			BEGIN
				SET @SQLQUERY=@SQLQUERY+' AND PAYMENTDATE<='''+ CAST(@TODATE AS VARCHAR) +'''';
			END
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ATINL2')
DROP PROCEDURE USP_TDS_GETFORM16ATINL2
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ATINL2] 
@BRANCHID INT, 
@CERTCOUNTS VARCHAR(MAX)
AS
BEGIN
	SELECT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@CERTCOUNTS,',');
	SELECT CERTCOUNT,QUARTER,RECIEPT,TDSMADE,TDSPAID,BOOKING FROM FORM16TINL2 F16 WITH(NOLOCK)
		INNER JOIN #TEMP T ON F16.CERTCOUNT=T.DATA 
	WHERE BRANCHID=@BRANCHID AND FORMTYPE=2
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16ATINL4')
DROP PROCEDURE USP_TDS_GETFORM16ATINL4
GO
CREATE PROCEDURE [USP_TDS_GETFORM16ATINL4] 
@BRANCHID INT, 
@CERTCOUNTS VARCHAR(MAX) 
AS
BEGIN
	SELECT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@CERTCOUNTS,',');
	SELECT F16.LINETYPE,F16.SLNO,F16.CERTCOUNT,F16.TAX,LEFT(F16.BINCIN,7) BSRCODE, 
	SUBSTRING(F16.BINCIN,LEN(LEFT(F16.BINCIN,9)),10) TDSDATE,RIGHT(F16.BINCIN,5) CHASLNO , F16.BOOKING 
	FROM FORM16TINDDR F16  WITH(NOLOCK)
	INNER JOIN #TEMP T ON F16.CERTCOUNT=T.DATA
	WHERE F16.BRANCHID=44 AND F16.FORMTYPE=2
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16AUTOCOMPLETEDEDUCTEEFORSB')
DROP PROCEDURE USP_TDS_GETFORM16AUTOCOMPLETEDEDUCTEEFORSB
GO
CREATE PROCEDURE [USP_TDS_GETFORM16AUTOCOMPLETEDEDUCTEEFORSB] 
 @BRANCHID INT,
 @PREFIXTEXT VARCHAR(MAX),  
 @RECCOUNT INT     
AS                      
 BEGIN   
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED                 
     DECLARE @QUERY NVARCHAR(MAX);  
   SET @QUERY = 'SELECT DISTINCT TOP ' + CAST(@RECCOUNT AS VARCHAR) + ' SERIALNO,NAME + ''('' + CAST(SERIALNO AS VARCHAR) + '')'' AS DEDUCTEENAME  
 FROM 
 (  
   SELECT DISTINCT E.SERIALNO,D.NAME       
       FROM DEDUCTEE D WITH(NOLOCK)                      
    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID                
    INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID         
    INNER JOIN DEDUCTIONDETAIL  DD WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID      
    LEFT JOIN FORM16 F WITH(NOLOCK) ON D.DEDUCTEEID = F.DEDUCTEEID                    
    WHERE D.BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = 1 AND DD.TOTALDEDUCTED = 0 AND ISNULL(E.ISTRANSFERED,0) = 0   
   AND ISNULL(DD.TRANSSTATUS,1) = 2     
    UNION       
    SELECT DISTINCT E.SERIALNO, D.NAME       
    FROM DEDUCTEE D WITH(NOLOCK)                      
    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID                      
    INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID     
    INNER JOIN DEDUCTIONDETAIL  DD WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID                                   
    INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID=DD.DEDUCTIONID AND DL.BRANCHID=DD.BRANCHID                                                    
    LEFT JOIN FORM16 F WITH(NOLOCK) ON D.DEDUCTEEID = F.DEDUCTEEID                    
    WHERE DD.TOTALDEDUCTED > 0 AND DD.BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = 1 AND ISNULL(E.ISTRANSFERED,0) = 0      
            AND ISNULL(DD.TRANSSTATUS,1) = 2  
    UNION       
    SELECT DISTINCT E.SERIALNO, D.NAME  
    FROM SALARYDETAIL SD WITH(NOLOCK)      
    INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID      
    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID       
    INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID     
    LEFT JOIN FORM16 F WITH(NOLOCK) ON D.DEDUCTEEID = F.DEDUCTEEID       
     WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND ISNULL(E.ISTRANSFERED,0) = 0 
     ) TEMP  WHERE NAME + ''('' + CAST(SERIALNO AS VARCHAR) + '')'' LIKE ''%' + @PREFIXTEXT + '%'''  
    --PRINT @QUERY
    EXEC SP_EXECUTESQL  @QUERY 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16CERTIFICATENODETAIL')
DROP PROCEDURE USP_TDS_GETFORM16CERTIFICATENODETAIL
GO
CREATE PROCEDURE [USP_TDS_GETFORM16CERTIFICATENODETAIL]
 @BRANCHID INT,
 @DEDUCTIONID INT,
@HASDEDUCTION BIT
AS
 BEGIN
   DECLARE @SQLQUERY NVARCHAR(MAX);
   SET @SQLQUERY = 'SELECT DD.DEDUCTIONID, E.SERIALNO,TS.SECTIONNAME,F16.TDSCERTIFICATENO,F16.PRINTCERTIFICATENO,F16.CERTIFICATEDATE,
             F16.ISCERTIFICATEGIVEN FROM DEDUCTEE D WITH(NOLOCK)
            INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID'
   IF(@HASDEDUCTION = 1)
    BEGIN
     SET @SQLQUERY = @SQLQUERY + ' INNER JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
                  INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID  '
    END
   ELSE
    BEGIN
     SET @SQLQUERY = @SQLQUERY + ' LEFT JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
                  LEFT JOIN TAXSECTIONS TS  WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID'
    END
   SET @SQLQUERY =@SQLQUERY + ' LEFT JOIN FORM16 F16   WITH(NOLOCK)  ON D.DEDUCTEEID = F16.DEDUCTEEID
            WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
    IF(@HASDEDUCTION = 1)
    BEGIN
    SET @SQLQUERY = @SQLQUERY + ' AND DD.DEDUCTIONID = '+ CAST(@DEDUCTIONID AS VARCHAR)
    END
   ELSE
 BEGIN
  SET @SQLQUERY = @SQLQUERY + ' AND D.DEDUCTEEID = '+ CAST(@DEDUCTIONID AS VARCHAR)
 END
  EXEC SP_EXECUTESQL @SQLQUERY  ;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DEDUCTEEFORSB')
DROP PROCEDURE USP_TDS_GETFORM16DEDUCTEEFORSB
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DEDUCTEEFORSB]                      
 @BRANCHID INT   
AS                      
 BEGIN   
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED                 
     SELECT DISTINCT E.SERIALNO,D.NAME       
       FROM DEDUCTEE D                       
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                
    INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID         
    INNER JOIN DEDUCTIONDETAIL  DD ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID      
    LEFT JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID                    
    WHERE D.BRANCHID = @BRANCHID AND DD.FORMID = 1 AND DD.TOTALDEDUCTED = 0 AND ISNULL(E.ISTRANSFERED,0) = 0   
   AND (DD.TRANSSTATUS IS NULL OR DD.TRANSSTATUS = 2)     
    UNION       
    SELECT DISTINCT E.SERIALNO, D.NAME       
    FROM DEDUCTEE D                       
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                      
    INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID     
    INNER JOIN DEDUCTIONDETAIL  DD ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID                                   
    INNER JOIN DEDCHALINK DL ON DL.DEDUCTIONID=DD.DEDUCTIONID AND DL.BRANCHID=DD.BRANCHID                                                    
    LEFT JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID                    
    WHERE DD.TOTALDEDUCTED > 0 AND DD.BRANCHID = @BRANCHID AND DD.FORMID = 1 AND ISNULL(E.ISTRANSFERED,0) = 0      
            AND (DD.TRANSSTATUS IS NULL OR DD.TRANSSTATUS = 2)  
    UNION       
    SELECT DISTINCT E.SERIALNO, D.NAME  
    FROM SALARYDETAIL SD      
    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID      
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID       
    INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID     
    LEFT JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID       
     WHERE D.BRANCHID = @BRANCHID AND ISNULL(E.ISTRANSFERED,0) = 0   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DEDUCTEES')
DROP PROCEDURE USP_TDS_GETFORM16DEDUCTEES
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DEDUCTEES] 
 @BRANCHID INT,
 @FORMID INT,
 @ISAUDITTRIAL BIT = 0
AS
 BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX);
	SET @SQLQUERY = 'SELECT DISTINCT D.NAME, E.SERIALNO FROM DEDUCTEE D WITH(NOLOCK)
			  INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID
			  LEFT JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
			  LEFT JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DL.DEDUCTIONID = DD.DEDUCTIONID
			  LEFT JOIN SALARYDETAIL SD  WITH(NOLOCK)  ON SD.DEDUCTEEID=D.DEDUCTEEID
			  WHERE D.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND
					(DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL OR SD.SALARYDETAILID IS NOT NULL)'
	IF(@ISAUDITTRIAL = 1)
	 BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'
	 END
	SET @SQLQUERY = @SQLQUERY + ' ORDER BY E.SERIALNO'
	EXEC SP_EXECUTESQL @SQLQUERY;
	--PRINT  @SQLQUERY
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DEDUCTIONDETAILS')
DROP PROCEDURE USP_TDS_GETFORM16DEDUCTIONDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DEDUCTIONDETAILS]  
 @STARTROW INT,              
 @PAGESIZE INT,              
 @BRANCHID INT,              
 @FORMID INT,              
 @DEDUCTEESLNO INT,              
 @PRINTCERTIFICATENO VARCHAR(50),
 @ISAUDITTRIAL BIT =0               
AS              
 BEGIN              
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */              
  DECLARE @FIRSTREC INT, @LASTREC INT              
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE              
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);              
  DECLARE @QUERY NVARCHAR(MAX);              
  SET @QUERY = 'SELECT ID = IDENTITY (INT,1,1),* INTO #FORM162010DEDUCTIONS              
       FROM (              
       SELECT DISTINCT E.SERIALNO, D.NAME,D.DEDUCTEEID,ISNULL(DD.DEDUCTIONID,D.DEDUCTEEID)DEDUCTIONID,DD.[QUARTER] AS DEDQUARTER,DD.SERIALNO AS DEDSLNO,
			  DD.PAYMENTDATE,DD.PAYMENTMADE,DD.DEDUCTEDDATE,DD.TOTALDEDUCTED,ISNULL(DD.SECTIONID,2) SECTIONID,F.TDSCERTIFICATENO,F.PRINTCERTIFICATENO,
			  F.CERTIFICATEDATE,F.ISCERTIFICATEGIVEN,ISNULL(TS.SECTIONNAME,''192'')SECTIONNAME, DL.DEDCHALINKID, CD.CHALLANPAIDDATE,CD.BANKCHALLANNO,
			  CD.[QUARTER] AS CHAQUARTER,CD.SERIALNO AS CHALSLNO,RB.BSRCODE,          
			  CASE WHEN DD.DEDUCTIONID IS NULL 
						THEN 0 
				  ELSE 1 
		      END AS HASDEDUCTION          
           FROM DEDUCTEE D  WITH(NOLOCK)             
		   INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID            
		   LEFT JOIN DEDUCTIONDETAIL  DD ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID            
		   LEFT JOIN SALARYDETAIL  SD   WITH(NOLOCK) ON SD.DEDUCTEEID = D.DEDUCTEEID AND SD.BRANCHID = D.BRANCHID            
		   LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID                 
		   LEFT JOIN DEDCHALINK DL WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID              
		   LEFT JOIN CHALLANDETAIL CD   WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID              
		   LEFT JOIN REMITTINGBANK RB  WITH(NOLOCK)  ON CD.BANKID = RB.BANKID              
		   LEFT JOIN FORM16 F  WITH(NOLOCK)  ON D.DEDUCTEEID = F.DEDUCTEEID AND D.BRANCHID = F.BRANCHID 
		   WHERE D.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND (CD.CHALLANID IS NOT NULL OR (CD.CHALLANID IS NULL AND DD.TOTALDEDUCTED = 0) OR SD.SALARYDETAILID IS NOT NULL)'              
  IF(@ISAUDITTRIAL = 1)
	BEGIN
		SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'
	END		   
  IF @DEDUCTEESLNO <> -1              
   BEGIN              
    SET @QUERY = @QUERY + ' AND E.SERIALNO = ' + CAST(@DEDUCTEESLNO AS VARCHAR);              
   END              
  IF @PRINTCERTIFICATENO <> ''              
   BEGIN                 
    SET @QUERY = @QUERY + ' AND F.PRINTCERTIFICATENO = ''' + @PRINTCERTIFICATENO + '''';              
   END              
  SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #FORM162010DEDUCTIONS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);              
 EXEC SP_EXECUTESQL @QUERY;              
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DEDUCTIONDETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETFORM16DEDUCTIONDETAILSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DEDUCTIONDETAILSCOUNT]
 @BRANCHID INT ,
 @FORMID INT,
 @DEDUCTEESLNO INT,
 @PRINTCERTIFICATENO VARCHAR(50),
 @ISAUDITTRIAL BIT = 0
AS
 BEGIN
  DECLARE @QUERY NVARCHAR(MAX);
  SET @QUERY = 'SELECT COUNT(DISTINCT ISNULL(DD.DEDUCTIONID,0)) AS DEDUCTEE_COUNT
       FROM  DEDUCTEE D  WITH(NOLOCK)
            INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID
            LEFT JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK)   ON DD.DEDUCTEEID = D.DEDUCTEEID
            LEFT JOIN DEDCHALINK DL  WITH(NOLOCK)   ON DD.DEDUCTIONID = DL.DEDUCTIONID
            LEFT JOIN CHALLANDETAIL CD   WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
            LEFT JOIN FORM16 F  WITH(NOLOCK)  ON D.DEDUCTEEID = F.DEDUCTEEID
            LEFT JOIN SALARYDETAIL SD  WITH(NOLOCK)  ON SD.DEDUCTEEID = D.DEDUCTEEID
       WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND ISNULL(DD.FORMID,1) = ' + CAST(@FORMID AS VARCHAR) + ' AND (CD.CHALLANID IS NOT NULL OR (CD.CHALLANID IS NULL AND DD.TOTALDEDUCTED = 0) OR SD.SALARYDETAILID IS NOT NULL)';
  IF(@ISAUDITTRIAL = 1)
	BEGIN
		SET @QUERY = @QUERY + ' AND ISNULL(DD.TRANSSTATUS,1) = 2'
	END
  IF (@DEDUCTEESLNO <> -1)
   BEGIN
    SET @QUERY = @QUERY + ' AND E.SERIALNO = ' + CAST(@DEDUCTEESLNO AS VARCHAR);
   END
  IF @PRINTCERTIFICATENO <> ''
   BEGIN
    SET @QUERY = @QUERY + ' AND F.PRINTCERTIFICATENO = ''' + @PRINTCERTIFICATENO + '''';
   END
	EXEC SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DEDUCTIONDETAILSCOUNTFORSB')
DROP PROCEDURE USP_TDS_GETFORM16DEDUCTIONDETAILSCOUNTFORSB
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DEDUCTIONDETAILSCOUNTFORSB]                                     
 @BRANCHID INT,                                     
 @DEDUCTEESLNO INT,                      
 @PRINTCERTIFICATENO VARCHAR(50)         
AS                      
 BEGIN    
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED                    
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */                              
  DECLARE @QUERY NVARCHAR(MAX);                      
  SET @QUERY = 'SELECT COUNT(T.SERIALNO) FROM     
       (                         
   SELECT DISTINCT E.SERIALNO,F.PRINTCERTIFICATENO        
       FROM DEDUCTEE D                     
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                    
    INNER JOIN DEDUCTIONDETAIL  DD ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID    
    LEFT JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID                  
    WHERE  (DD.TRANSSTATUS IS NULL OR DD.TRANSSTATUS = 2) AND  D.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID = 1 AND DD.TOTALDEDUCTED = 0 AND ISNULL(E.ISTRANSFERED,0) = 0    
    UNION     
    SELECT  DISTINCT E.SERIALNO,F.PRINTCERTIFICATENO        
    FROM DEDUCTEE D                     
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                    
    INNER JOIN DEDUCTIONDETAIL  DD ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID                                 
    INNER JOIN DEDCHALINK DL ON DL.DEDUCTIONID=DD.DEDUCTIONID AND DL.BRANCHID=DD.BRANCHID                                                  
    LEFT JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID                  
    WHERE  (DD.TRANSSTATUS IS NULL OR DD.TRANSSTATUS = 2) AND  DD.TOTALDEDUCTED > 0 AND DD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID = 1 AND ISNULL(E.ISTRANSFERED,0) = 0    
    UNION     
    SELECT DISTINCT E.SERIALNO,F.PRINTCERTIFICATENO  FROM SALARYDETAIL SD    
    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID    
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID     
    LEFT JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID     
     WHERE D.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND ISNULL(E.ISTRANSFERED,0) = 0    
  )T WHERE 1 = 1'     
  IF @DEDUCTEESLNO <> -1                      
   BEGIN                      
    SET @QUERY = @QUERY + ' AND SERIALNO = ' + CAST(@DEDUCTEESLNO AS VARCHAR);                      
   END                      
  IF @PRINTCERTIFICATENO <> ''                      
   BEGIN                         
    SET @QUERY = @QUERY + ' AND PRINTCERTIFICATENO = ''' + @PRINTCERTIFICATENO + '''';                      
   END                                   
 EXEC SP_EXECUTESQL @QUERY;        
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DEDUCTIONDETAILSFORSB')
DROP PROCEDURE USP_TDS_GETFORM16DEDUCTIONDETAILSFORSB
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DEDUCTIONDETAILSFORSB]                        
 @STARTROW INT,                        
 @PAGESIZE INT,                        
 @BRANCHID INT,                                         
 @DEDUCTEESLNO INT,                        
 @PRINTCERTIFICATENO VARCHAR(50)                        
AS                        
 BEGIN     
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED                     
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */                        
  DECLARE @FIRSTREC INT, @LASTREC INT                        
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                        
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);                        
  DECLARE @QUERY NVARCHAR(MAX);                        
  SET @QUERY = 'SELECT ID = IDENTITY (INT,1,1),* INTO #FORM162010DEDUCTIONS                        
       FROM (      
       SELECT * FROM       
       (                           
   SELECT DISTINCT LC.COMID,D.DEDUCTEEID,E.SERIALNO,D.NAME,''192'' AS SECTIONNAME, ISNULL(F.TDSCERTIFICATENO,0)TDSCERTIFICATENO,F.PRINTCERTIFICATENO,          
    F.CERTIFICATEDATE,ISNULL(F.ISCERTIFICATEGIVEN,0)ISCERTIFICATEGIVEN           
       FROM DEDUCTEE D                       
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                
    INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID         
    INNER JOIN DEDUCTIONDETAIL  DD ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID      
    LEFT JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID                    
    WHERE ISNULL(DD.TRANSSTATUS,2) = 2 AND D.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID = 1 AND DD.TOTALDEDUCTED = 0 AND ISNULL(E.ISTRANSFERED,0) = 0      
    UNION       
    SELECT DISTINCT LC.COMID,D.DEDUCTEEID,E.SERIALNO, D.NAME,''192'' AS SECTIONNAME, ISNULL(F.TDSCERTIFICATENO,0)TDSCERTIFICATENO,F.PRINTCERTIFICATENO,          
    F.CERTIFICATEDATE,ISNULL(F.ISCERTIFICATEGIVEN,0)ISCERTIFICATEGIVEN        
    FROM DEDUCTEE D                       
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                      
    INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID     
    INNER JOIN DEDUCTIONDETAIL  DD ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID                                   
    INNER JOIN DEDCHALINK DL ON DL.DEDUCTIONID=DD.DEDUCTIONID AND DL.BRANCHID=DD.BRANCHID                                                    
    LEFT JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID                    
    WHERE ISNULL(DD.TRANSSTATUS,2) = 2 AND DD.TOTALDEDUCTED > 0 AND DD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID = 1 AND ISNULL(E.ISTRANSFERED,0) = 0      
    UNION       
    SELECT DISTINCT LC.COMID,D.DEDUCTEEID,E.SERIALNO, D.NAME,''192'' SECTIONNAME,ISNULL(F.TDSCERTIFICATENO,0)TDSCERTIFICATENO,F.PRINTCERTIFICATENO,          
    F.CERTIFICATEDATE,ISNULL(F.ISCERTIFICATEGIVEN,0)ISCERTIFICATEGIVEN  FROM SALARYDETAIL SD      
    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID      
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID       
    INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID     
    LEFT JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID       
    WHERE D.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND ISNULL(E.ISTRANSFERED,0) = 0      
  )T WHERE 1 = 1 '       
  IF @DEDUCTEESLNO <> -1                        
   BEGIN                        
    SET @QUERY = @QUERY + ' AND SERIALNO = ' + CAST(@DEDUCTEESLNO AS VARCHAR);                        
   END                        
  IF @PRINTCERTIFICATENO <> ''                        
   BEGIN                           
    SET @QUERY = @QUERY + ' AND PRINTCERTIFICATENO = ''' + @PRINTCERTIFICATENO + '''';                        
   END                        
  SET @QUERY = @QUERY + ') TEMP ORDER BY SERIALNO  ;SELECT * FROM #FORM162010DEDUCTIONS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);                        
 EXEC SP_EXECUTESQL @QUERY;        
 --PRINT @QUERY                      
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DETAILONCOMID')
DROP PROCEDURE USP_TDS_GETFORM16DETAILONCOMID
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DETAILONCOMID]    
@COMID INT    
AS 
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED   
 SELECT T.TAN, DD.PAYMENTMADE,DD.PAYMENTDATE,0 AS TOTALDEDUCTED,NULL AS CHALLANPAIDDATE,NULL AS CHALLANNO,NULL AS BANKCODE,    
 DD.SERIALNO,DD.QUARTER,NULL AS CHALLANSERIALNO FROM DEDUCTEE D    
 INNER JOIN EMPLOYEE E     
 ON E.DEDUCTEEID=D.DEDUCTEEID    
 INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID AND D.BRANCHID=LC.BRANCHID    
 INNER JOIN     
 (    
   SELECT D.TAN, BD.BRANCHID FROM DEDUCTOR D     
   INNER JOIN    
   (    
    SELECT MAX(QUARTER) QUARTER, BRANCHID, MAX(DEDUCTORID)DEDUCTORID FROM BRANCHDEDUCTORS     
    GROUP BY BRANCHID      
   )BD    
   ON BD.DEDUCTORID = D.DEDUCTORID    
 )T ON T.BRANCHID = D.BRANCHID    
 INNER JOIN DEDUCTIONDETAIL DD ON DD.DEDUCTEEID=D.DEDUCTEEID AND DD.BRANCHID=D.BRANCHID    
 WHERE DD.FORMID=1 AND DD.TOTALDEDUCTED=0 AND LC.COMID=@COMID    
        UNION    
 SELECT T.TAN, DD.PAYMENTMADE,DD.PAYMENTDATE, DD.TOTALDEDUCTED,CD.CHALLANPAIDDATE,CD.BANKCHALLANNO,RB.BSRCODE,    
 DD.SERIALNO,DD.QUARTER,CD.SERIALNO FROM DEDUCTEE D    
 INNER JOIN EMPLOYEE E     
 ON E.DEDUCTEEID=D.DEDUCTEEID    
 INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID AND D.BRANCHID=LC.BRANCHID    
 INNER JOIN     
 (    
   SELECT D.TAN, BD.BRANCHID FROM DEDUCTOR D     
   INNER JOIN    
   (    
    SELECT MAX(QUARTER) QUARTER, BRANCHID, MAX(DEDUCTORID)DEDUCTORID FROM BRANCHDEDUCTORS     
    GROUP BY BRANCHID      
   )BD    
   ON BD.DEDUCTORID = D.DEDUCTORID    
 )T ON T.BRANCHID = D.BRANCHID    
 INNER JOIN DEDUCTIONDETAIL DD ON DD.DEDUCTEEID=D.DEDUCTEEID AND DD.BRANCHID=D.BRANCHID    
 INNER JOIN DEDCHALINK DL ON DL.BRANCHID=DD.BRANCHID AND DD.DEDUCTIONID=DL.DEDUCTIONID    
 INNER JOIN CHALLANDETAIL CD ON CD.CHALLANID=DL.CHALLANID AND CD.BRANCHID=DL.BRANCHID    
 INNER JOIN REMITTINGBANK RB ON RB.BANKID=CD.BANKID    
 WHERE DD.FORMID=1 AND DD.TOTALDEDUCTED>0 AND LC.COMID=@COMID  AND DL.CHALLANID IN  
 (  
  SELECT DISTINCT CHALLANID FROM DEDCHALINK D WHERE D.BRANCHID=LC.BRANCHID  
 )
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DETAILS')
DROP PROCEDURE USP_TDS_GETFORM16DETAILS
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DETAILS]
 @BRANCHID INT,
 @DEDUCTEEID VARCHAR(MAX),
 @ISREVISEDFORM16 BIT  ,
@FINYEAR INT
AS
 BEGIN
  DECLARE @QUERY NVARCHAR(MAX);
  IF @ISREVISEDFORM16 = 1
   BEGIN
    SET @QUERY = 'SELECT '+ CAST(@FINYEAR AS VARCHAR)+ 'AS FINYEAR, BRANCHID,INCOMETAX,SURCHARGE,EDUCATIONCESS,DEDUCTEDDATE,ISNULL(TOTALDEDUCTED,0)TOTALDEDUCTED,
            DEDUCTORNAME,DEDADDR1,DEDADDR2,DEDADDR3,DEDADDR4,DEDADDR5 + '' - '' + DEDPINCODE AS DEDADDR5,STATENAME,
            DEDTAN,DEDPAN,ASSYEAR,PERSONNAME,RESPDESIGNATION,GENDERTITLE,FATHERNAME,DEDUCTEEID,NAME,DEDUCTEEPAN,SERIALNO,DESIGNATION,
            EMPLOYMENTFROM,EMPLOYMENTTO,CHEQUENO,BANKCHALLANNO,CHALLANPAIDDATE,BSRCODE,PRINTCERTIFICATENO,GROSSSALARY,
            TAXABLEPERQUISITES,TOTALSUM,INCOMEFROMSALARIES,DEDUCTIONUS16,SALARYFROMPREVEMP,INCOMEFROMHOUSEPROPERTY,INCOMEFROMBUSINESS,CAPITALGAINS,
            INCOMEFROMOTHERSOURCES,OTHERINCOME,GROSSTOTALINCOME,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,TAXONTOTALINCOME,SALDETSURCHARGE,SALDETEDUCESS,
            TOTALINCOMETAXPAYABLE,RELIEFUS89,NETTAXPAYABLE,TAXPAYABLE,TOTALTDS,PREVEMPTOTAL,ET,PT,Q1RECEIPTNO,Q2RECEIPTNO,Q3RECEIPTNO,Q4RECEIPTNO,
            Q1TOTALDEDUCTED,Q2TOTALDEDUCTED,Q3TOTALDEDUCTED,Q4TOTALDEDUCTED,GROSSAMOUNT80C,
            QUALIFYINGAMOUNT80C,DEDUCTIBLEAMOUNT80C,GROSSAMOUNT80CCC,QUALIFYINGAMOUNT80CCC,DEDUCTIBLEAMOUNT80CCC,GROSSAMOUNT80CCD,QUALIFYINGAMOUNT80CCD,
            DEDUCTIBLEAMOUNT80CCD,GROSSAMOUNT80D,QUALIFYINGAMOUNT80D,DEDUCTIBLEAMOUNT80D,GROSSAMOUNT80DD,QUALIFYINGAMOUNT80DD,DEDUCTIBLEAMOUNT80DD,
            GROSSAMOUNT80DDB,QUALIFYINGAMOUNT80DDB,DEDUCTIBLEAMOUNT80DDB,GROSSAMOUNT80E,QUALIFYINGAMOUNT80E,DEDUCTIBLEAMOUNT80E,GROSSAMOUNT80G,
            QUALIFYINGAMOUNT80G,DEDUCTIBLEAMOUNT80G,GROSSAMOUNT80GG,QUALIFYINGAMOUNT80GG,DEDUCTIBLEAMOUNT80GG,GROSSAMOUNT80QQB,QUALIFYINGAMOUNTQQB,
            DEDUCTIBLEAMOUNT80QQB,GROSSAMOUNT80RRB,QUALIFYINGAMOUNT80RRB,DEDUCTIBLEAMOUNT80RRB,GROSSAMOUNT80U,QUALIFYINGAMOUNT80U,DEDUCTIBLEAMOUNT80U,GROSSAMOUNT80CCF,QUALIFYINGAMOUNT80CCF,DEDUCTIBLEAMOUNT80CCF,
           GROSSAMOUNT80GGA,QUALIFYINGAMOUNT80GGA,DEDUCTIBLEAMOUNT80GGA,GROSSAMOUNT80GGC,QUALIFYINGAMOUNT80GGC,DEDUCTIBLEAMOUNT80GGC,
           GROSSAMOUNT80TTA, QUALIFYINGAMOUNT80TTA, DEDUCTIBLEAMOUNT80TTA, GROSSAMOUNT80CCG, QUALIFYINGAMOUNT80CCG, DEDUCTIBLEAMOUNT80CCG,
           GROSSAMOUNT80CCD1, QUALIFYINGAMOUNT80CCD1, DEDUCTIBLEAMOUNT80CCD1,GROSSAMOUNT80CCD2,QUALIFYINGAMOUNT80CCD2, DEDUCTIBLEAMOUNT80CCD2,
           TOTALDEDUCTEDAMOUNT
           FROM GETREVISEDFORM16DETAILS WITH(NOLOCK)
           WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND
              DEDUCTEEID IN ( ' + CAST(@DEDUCTEEID AS VARCHAR(MAX)) + ') AND
              PRINTCERTIFICATENO IS NOT NULL AND
              (TOTALDEDUCTED=0 OR DEDCHALINKID IS NOT NULL OR SALARYDETAILID IS NOT NULL) AND
               LEN(LTRIM(PRINTCERTIFICATENO))>0 ';
   END
  ELSE
   BEGIN
    SET @QUERY = 'SELECT SERIALNO,BRANCHID,DEDUCTORNAME,DEDADDR1,DEDADDR2,DEDADDR3,DEDADDR4,DEDADDR5,DEDPAN,DEDTAN,ASSYEAR,PERSONNAME,
          RESPDESIGNATION,NAME,DEDUCTEEPAN,GENDERTITLE,FATHERNAME,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,CHEQUENO,BANKCHALLANNO,
          CHALLANPAIDDATE,BSRCODE, INCOMETAX,SURCHARGE,EDUCATIONCESS,DEDUCTEDDATE,TOTALDEDUCTED,GROSSSALARY,TAXABLEPERQUISITES,TOTALSUM,ET,PT,
           ACKNO1,ACKNO2,ACKNO3,ACKNO4,INCOMEFROMSALARIES,DEDUCTIONUS16,SALARYFROMPREVEMP,INCOMEFROMHOUSEPROPERTY,INCOMEFROMBUSINESS,
 CAPITALGAINS,INCOMEFROMOTHERSOURCES,GROSSTOTALINCOME,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,TAXONTOTALINCOME,SALDETSURCHARGE,
           SALDETEDUCESS,TOTALINCOMETAXPAYABLE,RELIEFUS89,NETTAXPAYABLE,TAXPAYABLE,TOTALTDS,PREVEMPTOTAL,TOTALDEDUCTEDAMOUNT,GROSSAMOUNT80C,
          QUALIFYINGAMOUNT80C,DEDUCTIBLEAMOUNT80C,GROSSAMOUNT80CCC,QUALIFYINGAMOUNT80CCC,DEDUCTIBLEAMOUNT80CCC,GROSSAMOUNT80CCD,
            QUALIFYINGAMOUNT80CCD,DEDUCTIBLEAMOUNT80CCD,GROSSAMOUNT80D,QUALIFYINGAMOUNT80D,DEDUCTIBLEAMOUNT80D,GROSSAMOUNT80DD,
            QUALIFYINGAMOUNT80DD,DEDUCTIBLEAMOUNT80DD,GROSSAMOUNT80DDB,QUALIFYINGAMOUNT80DDB,DEDUCTIBLEAMOUNT80DDB, GROSSAMOUNT80E,
            QUALIFYINGAMOUNT80E,DEDUCTIBLEAMOUNT80E,GROSSAMOUNT80G,QUALIFYINGAMOUNT80G,DEDUCTIBLEAMOUNT80G,GROSSAMOUNT80GG,QUALIFYINGAMOUNT80GG,
            DEDUCTIBLEAMOUNT80GG, GROSSAMOUNT80QQB,QUALIFYINGAMOUNTQQB,DEDUCTIBLEAMOUNT80QQB,GROSSAMOUNT80RRB,QUALIFYINGAMOUNT80RRB,
            DEDUCTIBLEAMOUNT80RRB, GROSSAMOUNT80U,QUALIFYINGAMOUNT80U,DEDUCTIBLEAMOUNT80U,GROSSAMOUNT80CCF,QUALIFYINGAMOUNT80CCF,
            DEDUCTIBLEAMOUNT80CCF ,GROSSAMOUNT80GGA,QUALIFYINGAMOUNT80GGA,DEDUCTIBLEAMOUNT80GGA, GROSSAMOUNT80GGC,QUALIFYINGAMOUNT80GGC,
            DEDUCTIBLEAMOUNT80GGC,GROSSAMOUNT80TTA,QUALIFYINGAMOUNT80TTA,DEDUCTIBLEAMOUNT80TTA ,
              GROSSAMOUNT80CCG,QUALIFYINGAMOUNT80CCG,DEDUCTIBLEAMOUNT80CCG, GROSSAMOUNT80CCD1,QUALIFYINGAMOUNT80CCD1,DEDUCTIBLEAMOUNT80CCD1 ,
              GROSSAMOUNT80CCD2,QUALIFYINGAMOUNT80CCD2,DEDUCTIBLEAMOUNT80CCD2
          FROM  VWFORM16 WITH(NOLOCK)
          WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND
              DEDUCTEEID IN (' + CAST(@DEDUCTEEID AS VARCHAR(MAX)) + ') AND
              SALDEDUCTEEID IN (' + CAST(@DEDUCTEEID AS VARCHAR(MAX)) + ')';
   END
  EXECUTE SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DETAILSFORPDF')
DROP PROCEDURE USP_TDS_GETFORM16DETAILSFORPDF
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DETAILSFORPDF]  
    @BRANCHID INT,          
    @DEDUCTEEID VARCHAR(MAX)=NULL,          
    @FINANCIALYEAR INT          
AS          
BEGIN          
  DECLARE @SQLQUERY NVARCHAR(MAX)          
  IF(@FINANCIALYEAR<>2009)  
  BEGIN          
   SET @SQLQUERY=' SELECT DISTINCT DD.DEDUCTIONID,D.BRANCHID,ISNULL(DD.FORMID,1)FORMID,ISNULL(DD.QUARTER,1)QUARTER,D.DEDUCTEEID,D.NAME,          
           D.PAN,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,SM.STATENAME,D.PINCODE,D.REFERENCENO,           
           ISNULL(TS.SECTIONNAME,''192'')SECTIONNAME,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,CD.MODEOFPAYMENT,CD.CHALLANPAIDDATE,D.SALUTATION,          
           CASE WHEN MODEOFPAYMENT<>3 THEN RB.BSRCODE ELSE CD.TVRECEIPTNUMBER END AS BSRCODE,CD.CHALLANID,         
             CASE WHEN MODEOFPAYMENT<>3 THEN RIGHT(REPLICATE(''0'',LEN(BANKCHALLANNO)) + BANKCHALLANNO,LEN(BANKCHALLANNO))       
										ELSE RIGHT(REPLICATE(''0'',LEN(TRNVOUCHERNO)) + TRNVOUCHERNO,LEN(TRNVOUCHERNO))         
            END          
            AS CHALLANNUMBER,
            F16.PRINTCERTIFICATENO,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.DESIGNATION          
               FROM  DEDUCTEE D   WITH(NOLOCK)                         
               INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID=E.DEDUCTEEID          
               LEFT JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK)   ON DD.DEDUCTEEID=D.DEDUCTEEID          
               LEFT JOIN DEDCHALINK DCL   WITH(NOLOCK)  ON DD.DEDUCTIONID=DCL.DEDUCTIONID          
               LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK)  ON DCL.CHALLANID=CD.CHALLANID          
               INNER JOIN FORM16 F16  WITH(NOLOCK)   ON D.DEDUCTEEID = F16.DEDUCTEEID AND D.BRANCHID = F16.BRANCHID                       
               LEFT JOIN STATEMASTER SM   WITH(NOLOCK)  ON D.STATEID=SM.STATEID          
               LEFT JOIN TAXSECTIONS TS  WITH(NOLOCK)   ON DD.SECTIONID=TS.SECTIONID          
               LEFT JOIN REMITTINGBANK RB  WITH(NOLOCK)  ON CD.BANKID=RB.BANKID          
        WHERE D.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND ISNULL(DD.FORMID,1)=1         
           AND (DD.TOTALDEDUCTED = 0 OR DCL.DEDCHALINKID IS NOT NULL OR DD.TOTALDEDUCTED IS NULL)           
           AND ISNULL(F16.PRINTCERTIFICATENO,'''')<>'''''          
        --ORDER BY DD.DEDUCTEEID,DD.QUARTER          
  END          
  ELSE          
  BEGIN          
   SET @SQLQUERY='SELECT DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.QUARTER,D.DEDUCTEEID,D.NAME,          
           D.PAN,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,SM.STATENAME,D.PINCODE,          
           TS.SECTIONNAME,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,CD.MODEOFPAYMENT,CD.CHALLANPAIDDATE,D.SALUTATION,          
           CASE WHEN MODEOFPAYMENT<>3 THEN RB.BSRCODE ELSE CD.TVRECEIPTNUMBER END AS BSRCODE, CD.CHALLANID,         
             CASE WHEN MODEOFPAYMENT<>3 THEN          
           CASE WHEN LEN(BANKCHALLANNO) = 4           
          THEN ''0''+BANKCHALLANNO          
           ELSE CASE WHEN LEN(BANKCHALLANNO)= 3          
               THEN ''00''+ BANKCHALLANNO          
               ELSE CASE WHEN LEN(BANKCHALLANNO)= 2          
                THEN ''000''+ BANKCHALLANNO          
                ELSE CASE WHEN LEN(BANKCHALLANNO)= 1          
                    THEN ''0000''+BANKCHALLANNO          
                    ELSE BANKCHALLANNO           
                  END          
                 END          
            END          
            END          
            ELSE          
            CASE WHEN LEN(TRNVOUCHERNO) = 4           
           THEN ''0''+TRNVOUCHERNO          
           ELSE CASE WHEN LEN(TRNVOUCHERNO)= 3          
               THEN ''00''+ TRNVOUCHERNO          
               ELSE CASE WHEN LEN(TRNVOUCHERNO)= 2          
          THEN ''000''+ TRNVOUCHERNO     
                ELSE CASE WHEN LEN(TRNVOUCHERNO)= 1          
                    THEN ''0000''+TRNVOUCHERNO          
                    ELSE TRNVOUCHERNO           
                  END          
                 END          
            END           
            END          
            END          
            AS CHALLANNUMBER,'' AS PRINTCERTIFICATENO,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.DESIGNATION            
               FROM DEDUCTIONDETAIL DD WITH(NOLOCK)           
               LEFT JOIN DEDCHALINK DCL WITH(NOLOCK)           
              ON DD.DEDUCTIONID=DCL.DEDUCTIONID          
               LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK)          
              ON DCL.CHALLANID=CD.CHALLANID          
               INNER JOIN SALARYDETAIL SD WITH(NOLOCK)          
              ON DD.DEDUCTEEID=SD.DEDUCTEEID                        
               INNER JOIN DEDUCTEE D WITH(NOLOCK)          
              ON DD.DEDUCTEEID=D.DEDUCTEEID          
               INNER JOIN EMPLOYEE E WITH(NOLOCK)          
              ON D.DEDUCTEEID=E.DEDUCTEEID          
               LEFT JOIN STATEMASTER SM WITH(NOLOCK)         
              ON D.STATEID=SM.STATEID          
               INNER JOIN TAXSECTIONS TS WITH(NOLOCK)         
              ON DD.SECTIONID=TS.SECTIONID          
               LEFT JOIN REMITTINGBANK RB WITH(NOLOCK)         
              ON CD.BANKID=RB.BANKID          
        WHERE DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID=1 --AND DD.QUARTER=1           
           AND (DD.TOTALDEDUCTED=0 OR DCL.DEDCHALINKID IS NOT NULL) '          
           --AND F16.PRINTCERTIFICATENO IS NOT NULL          
        --ORDER BY DD.DEDUCTEEID,DD.QUARTER          
  END          
  IF(@DEDUCTEEID IS NOT NULL)          
  BEGIN          
   SET @SQLQUERY=@SQLQUERY+' AND D.DEDUCTEEID IN( '+@DEDUCTEEID+ ')'          
  END          
  SET @SQLQUERY=@SQLQUERY+' ORDER BY D.DEDUCTEEID, DD.DEDUCTEDDATE'          
  EXECUTE SP_EXECUTESQL @SQLQUERY          
--PRINT @SQLQUERY          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16DETAILSFORPDFMERGE')
DROP PROCEDURE USP_TDS_GETFORM16DETAILSFORPDFMERGE
GO
CREATE PROCEDURE [USP_TDS_GETFORM16DETAILSFORPDFMERGE] 
    @BRANCHID INT, 
    @DEDUCTEEID VARCHAR(MAX)=NULL
AS 
BEGIN 
  DECLARE @SQLQUERY NVARCHAR(MAX) 
   SET @SQLQUERY=' SELECT DISTINCT DD.DEDUCTIONID,D.BRANCHID,ISNULL(DD.FORMID,1)FORMID,ISNULL(DD.QUARTER,1)QUARTER,D.DEDUCTEEID,D.NAME, 
           D.PAN,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,SM.STATENAME,D.PINCODE, 
           ISNULL(TS.SECTIONNAME,''192'')SECTIONNAME,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,CD.MODEOFPAYMENT,CD.CHALLANPAIDDATE,D.SALUTATION, 
           CASE WHEN MODEOFPAYMENT<>3 THEN RB.BSRCODE ELSE CD.TVRECEIPTNUMBER END AS BSRCODE,CD.CHALLANID, 
             CASE WHEN MODEOFPAYMENT<>3 THEN 
           CASE WHEN LEN(BANKCHALLANNO) = 4 
           THEN ''0''+BANKCHALLANNO 
           ELSE CASE WHEN LEN(BANKCHALLANNO)= 3 
               THEN ''00''+ BANKCHALLANNO 
               ELSE CASE WHEN LEN(BANKCHALLANNO)= 2 
                THEN ''000''+ BANKCHALLANNO 
                ELSE CASE WHEN LEN(BANKCHALLANNO)= 1 
                    THEN ''0000''+BANKCHALLANNO 
                    ELSE BANKCHALLANNO 
                  END 
                 END 
            END 
            END 
            ELSE 
            CASE WHEN LEN(TRNVOUCHERNO) = 4 
           THEN ''0''+TRNVOUCHERNO 
           ELSE CASE WHEN LEN(TRNVOUCHERNO)= 3 
               THEN ''00''+ TRNVOUCHERNO 
               ELSE CASE WHEN LEN(TRNVOUCHERNO)= 2 
                THEN ''000''+ TRNVOUCHERNO 
                ELSE CASE WHEN LEN(TRNVOUCHERNO)= 1 
                    THEN ''0000''+TRNVOUCHERNO 
                    ELSE TRNVOUCHERNO 
                  END 
                 END 
            END 
            END 
            END 
            AS CHALLANNUMBER,'''' AS PRINTCERTIFICATENO,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.DESIGNATION 
               FROM  DEDUCTEE D   WITH(NOLOCK) 
               INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID=E.DEDUCTEEID 
               LEFT JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK)   ON DD.DEDUCTEEID=D.DEDUCTEEID 
               LEFT JOIN DEDCHALINK DCL   WITH(NOLOCK)  ON DD.DEDUCTIONID=DCL.DEDUCTIONID 
               LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK)  ON DCL.CHALLANID=CD.CHALLANID
               LEFT JOIN STATEMASTER SM   WITH(NOLOCK)  ON D.STATEID=SM.STATEID 
               LEFT JOIN TAXSECTIONS TS  WITH(NOLOCK)   ON DD.SECTIONID=TS.SECTIONID 
               LEFT JOIN REMITTINGBANK RB  WITH(NOLOCK)  ON CD.BANKID=RB.BANKID 
        WHERE D.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND ISNULL(DD.FORMID,1)=1 
           AND (DD.TOTALDEDUCTED = 0 OR DCL.DEDCHALINKID IS NOT NULL OR DD.TOTALDEDUCTED IS NULL)' 
  IF(@DEDUCTEEID IS NOT NULL) 
  BEGIN 
   SET @SQLQUERY=@SQLQUERY+' AND D.DEDUCTEEID IN( '+@DEDUCTEEID+ ')' 
  END 
  SET @SQLQUERY=@SQLQUERY+' ORDER BY D.DEDUCTEEID' 
  EXECUTE SP_EXECUTESQL @SQLQUERY 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16PRINTCERTIFICATENOS')
DROP PROCEDURE USP_TDS_GETFORM16PRINTCERTIFICATENOS
GO
CREATE PROCEDURE [USP_TDS_GETFORM16PRINTCERTIFICATENOS]
 @BRANCHID INT,
 @FORMID INT,
 @DEDUCTEESLNO INT
AS
 BEGIN
  DECLARE @QUERY NVARCHAR(MAX);
  SET @QUERY = 'SELECT DISTINCT F16.PRINTCERTIFICATENO
   FROM FORM16 F16
            INNER JOIN DEDUCTEE D   WITH(NOLOCK) ON D.DEDUCTEEID = F16.DEDUCTEEID
            INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID
            LEFT JOIN DEDUCTIONDETAIL DD   WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
            LEFT  JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID
           LEFT JOIN SALARYDETAIL SD  WITH(NOLOCK)   ON SD.DEDUCTEEID = D.DEDUCTEEID
       WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND ISNULL(DD.FORMID,1) = ' + CAST(@FORMID AS VARCHAR) + ' AND (DD.TOTALDEDUCTED = 0 OR DL.DEDCHALINKID IS NOT NULL OR SD.SALARYDETAILID IS NOT NULL)';
  IF(@DEDUCTEESLNO <> -1)
   BEGIN
    SET @QUERY = @QUERY + ' AND E.SERIALNO = ' + CAST(@DEDUCTEESLNO AS VARCHAR)  + ' AND F16.PRINTCERTIFICATENO IS NOT NULL AND F16.PRINTCERTIFICATENO <> ''''';
   END
  SET @QUERY = @QUERY + ' AND F16.TDSCERTIFICATENO <> 0 AND F16.PRINTCERTIFICATENO IS NOT NULL';
EXECUTE SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16REPORTDEDUCTEES')
DROP PROCEDURE USP_TDS_GETFORM16REPORTDEDUCTEES
GO
CREATE PROCEDURE  USP_TDS_GETFORM16REPORTDEDUCTEES 
@STARTROW INT,                          
@PAGESIZE INT,  
@BRANCHID INT    
AS    
   SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED      
   DECLARE @FIRSTREC INT, @LASTREC INT        
   SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                          
   SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);                 
   SELECT ID = IDENTITY (INT,1,1),* INTO #TEMP FROM         
       (    
		   SELECT LC.COMID, D.DEDUCTEEID,E.SERIALNO,D.NAME,D.PAN,F.PRINTCERTIFICATENO           
			 FROM DEDUCTEE D                       
		  INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                    
		  INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID = LC.BRANCHID             
		  INNER JOIN 
		  (
			SELECT DEDUCTEEID FROM DEDUCTIONDETAIL
			WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND TOTALDEDUCTED = 0 AND (TRANSSTATUS IS NULL OR TRANSSTATUS = 2)
			GROUP BY DEDUCTEEID
		  ) DD ON DD.DEDUCTEEID = D.DEDUCTEEID 
		  INNER JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID                        
		  WHERE D.BRANCHID = @BRANCHID AND ISNULL(E.ISTRANSFERED,0) = 0 AND F.PRINTCERTIFICATENO IS NOT NULL AND ISNULL(D.EMPTYPE,0) = 0
		  UNION           
		  SELECT LC.COMID,D.DEDUCTEEID,E.SERIALNO, D.NAME,D.PAN,F.PRINTCERTIFICATENO             
		  FROM DEDUCTEE D                           
		  INNER JOIN EMPLOYEE E  ON D.DEDUCTEEID = E.DEDUCTEEID                          
		  INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID         
		  INNER JOIN 
		  (
			SELECT DEDUCTEEID FROM DEDUCTIONDETAIL DD
			INNER JOIN DEDCHALINK DL ON DD.DEDUCTIONID = DL.DEDUCTIONID
			WHERE DD.BRANCHID = @BRANCHID AND FORMID = 1 AND TOTALDEDUCTED > 0 AND (TRANSSTATUS IS NULL OR TRANSSTATUS = 2)
			GROUP BY DEDUCTEEID
		  ) DD ON DD.DEDUCTEEID = D.DEDUCTEEID                                                 
		  INNER JOIN FORM16 F  ON D.DEDUCTEEID = F.DEDUCTEEID                         
		  WHERE D.BRANCHID = @BRANCHID AND ISNULL(E.ISTRANSFERED,0) = 0 AND F.PRINTCERTIFICATENO IS NOT NULL AND ISNULL(D.EMPTYPE,0) = 0 
		  UNION           
		  SELECT LC.COMID,D.DEDUCTEEID,E.SERIALNO, D.NAME,D.PAN,F.PRINTCERTIFICATENO         
		  FROM SALARYDETAIL SD
		  INNER JOIN DEDUCTEE D  ON D.DEDUCTEEID = SD.DEDUCTEEID
		  INNER JOIN EMPLOYEE E  ON D.DEDUCTEEID = E.DEDUCTEEID           
		  INNER JOIN LINKTOTC LC  ON LC.EMPLOYEEID = E.EMPLOYEEID AND D.BRANCHID=LC.BRANCHID         
		  INNER JOIN FORM16 F  ON D.DEDUCTEEID = F.DEDUCTEEID           
		   WHERE D.BRANCHID = @BRANCHID AND ISNULL(E.ISTRANSFERED,0) = 0  AND F.PRINTCERTIFICATENO IS NOT NULL  AND ISNULL(D.EMPTYPE,0) = 0
     ) TEMP ORDER BY SERIALNO  ;  
     SELECT * FROM #TEMP WHERE ID > @FIRSTREC AND ID < @LASTREC;
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16REPORTDEDUCTEESCOUNT')
DROP PROCEDURE USP_TDS_GETFORM16REPORTDEDUCTEESCOUNT
GO
CREATE PROCEDURE  USP_TDS_GETFORM16REPORTDEDUCTEESCOUNT    
@BRANCHID INT    
AS    
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED                     
   SELECT COUNT(COMID) FROM  
   (  
   SELECT DISTINCT LC.COMID       
     FROM DEDUCTEE D                           
  INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                    
  INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID             
  INNER JOIN DEDUCTIONDETAIL  DD ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID          
  INNER JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID                        
  WHERE D.BRANCHID = @BRANCHID AND DD.FORMID = 1 AND DD.TOTALDEDUCTED = 0 AND ISNULL(E.ISTRANSFERED,0) = 0       
           AND (DD.TRANSSTATUS IS NULL OR DD.TRANSSTATUS = 2)  AND  F.PRINTCERTIFICATENO IS NOT NULL AND ISNULL(D.EMPTYPE,0) = 0        
  UNION           
  SELECT DISTINCT LC.COMID          
  FROM DEDUCTEE D                           
  INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                          
  INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID         
  INNER JOIN DEDUCTIONDETAIL  DD ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID                                       
  INNER JOIN DEDCHALINK DL ON DL.DEDUCTIONID=DD.DEDUCTIONID AND DL.BRANCHID=DD.BRANCHID                                                        
  INNER JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID                        
  WHERE DD.TOTALDEDUCTED > 0 AND DD.BRANCHID = @BRANCHID AND DD.FORMID = 1 AND ISNULL(E.ISTRANSFERED,0) = 0          
     AND (DD.TRANSSTATUS IS NULL OR DD.TRANSSTATUS = 2)  AND  F.PRINTCERTIFICATENO IS NOT NULL AND ISNULL(D.EMPTYPE,0) = 0  
  UNION           
  SELECT DISTINCT LC.COMID  
  FROM SALARYDETAIL SD          
  INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID          
  INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID           
  INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID=E.EMPLOYEEID  AND D.BRANCHID=LC.BRANCHID         
  INNER JOIN FORM16 F ON D.DEDUCTEEID = F.DEDUCTEEID           
   WHERE D.BRANCHID = @BRANCHID AND ISNULL(E.ISTRANSFERED,0) = 0 AND  F.PRINTCERTIFICATENO IS NOT NULL AND ISNULL(D.EMPTYPE,0) = 0    
     )TEMP
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16TINDETAILS')
DROP PROCEDURE USP_TDS_GETFORM16TINDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETFORM16TINDETAILS]    
@STARTROW INT,              
@PAGESIZE INT,           
@BRANCHID INT,
@ISPENSIONER BIT          
AS        
 BEGIN       
   DECLARE @FIRSTREC INT;                
   DECLARE @LASTREC INT;            
   SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE                
   SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);      
   WITH TEMP AS      
   (        
  SELECT  ROW_NUMBER() OVER(ORDER BY (F16.NAME)) ROWNUMBER, F16.NAME,F16.PAN,F16.CERTNUM,F16.LASTDATE,F16.CERTCOUNT,         
  CASE WHEN SD.DEDUCTEEID IS NULL THEN 'NO' ELSE 'YES' END HASSALARY,        
  CASE WHEN D.PAN IS NULL THEN 0 ELSE 1 END HASDEDUCTEE,ISNULL(D.DEDUCTEEID,-1) DEDUCTEEID         
  FROM FORM16TINMST F16  WITH(NOLOCK)         
  LEFT JOIN DEDUCTEE D  WITH(NOLOCK)         
   ON D.PAN=F16.PAN AND D.BRANCHID=F16.BRANCHID        
  LEFT  JOIN EMPLOYEE E   WITH(NOLOCK)       
   ON E.DEDUCTEEID=D.DEDUCTEEID        
  LEFT JOIN SALARYDETAIL SD   WITH(NOLOCK)        
   ON SD.BRANCHID=D.BRANCHID AND SD.DEDUCTEEID=D.DEDUCTEEID        
  WHERE F16.BRANCHID=@BRANCHID  AND ISNULL(D.EMPTYPE,0) = @ISPENSIONER      
  )    
     SELECT  T.* INTO #TEMP  FROM TEMP T  
  LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK)    
 ON T.DEDUCTEEID=NE.DEDUCTEEID     
 WHERE NE.DEDUCTEEID IS NULL        
  SELECT TOP (@LASTREC-1) *                
        FROM #TEMP                
       WHERE ROWNUMBER > @FIRSTREC AND ROWNUMBER < @LASTREC          
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16TINL2')
DROP PROCEDURE USP_TDS_GETFORM16TINL2
GO
CREATE PROCEDURE [USP_TDS_GETFORM16TINL2]
@BRANCHID INT,
@CERTCOUNTS VARCHAR(MAX)
AS
DECLARE @QUERY NVARCHAR(MAX)
 SET @QUERY='SELECT D.DEDUCTEEID,MST.PAN,MST.CERTCOUNT,F16.QUARTER,F16.RECIEPT,F16.TDSMADE,F16.TDSPAID,F16.BOOKING FROM FORM16TINL2 F16
    INNER JOIN FORM16TINMST MST   WITH(NOLOCK)
    ON MST.CERTCOUNT=F16.CERTCOUNT AND MST.BRANCHID=F16.BRANCHID
   INNER JOIN DEDUCTEE D WITH(NOLOCK)
    ON D.PAN=MST.PAN AND D.BRANCHID=MST.BRANCHID
   INNER JOIN EMPLOYEE E  WITH(NOLOCK)
    ON E.DEDUCTEEID=D.DEDUCTEEID
    WHERE F16.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND F16.CERTCOUNT
    IN('+CAST(@CERTCOUNTS AS VARCHAR(MAX))+')'
EXEC SP_EXECUTESQL @QUERY
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM16TINL4')
DROP PROCEDURE USP_TDS_GETFORM16TINL4
GO
CREATE PROCEDURE   [DBO].[USP_TDS_GETFORM16TINL4]    
(    
@BRANCHID INT,    
@CERTCOUNTS VARCHAR(MAX)    
)    
AS    
BEGIN    
 DECLARE @QUERY NVARCHAR(MAX)    
 SET @QUERY='SELECT D.DEDUCTEEID,F16.TAX,SUBSTRING(F16.BINCIN,CHARINDEX(''^'',F16.BINCIN)-7,7) BSRCODE,F16.LINETYPE,    
 SUBSTRING(F16.BINCIN,CHARINDEX(''^'',F16.BINCIN)+1,10) TDSDATE,    
 REVERSE(LEFT(REVERSE(F16.BINCIN),CHARINDEX(''^'',REVERSE(F16.BINCIN))-1)) CHALSRNO,F16.BOOKING    
 FROM FORM16TINDDR F16 WITH(NOLOCK)    
 INNER JOIN FORM16TINMST MST WITH(NOLOCK)    
  ON MST.CERTCOUNT=F16.CERTCOUNT AND MST.BRANCHID=F16.BRANCHID    
 INNER JOIN DEDUCTEE D   WITH(NOLOCK)    
  ON D.PAN=MST.PAN AND D.BRANCHID=MST.BRANCHID    
 INNER JOIN EMPLOYEE E    WITH(NOLOCK)    
  ON E.DEDUCTEEID=D.DEDUCTEEID    
 WHERE F16.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND F16.CERTCOUNT IN('+CAST(@CERTCOUNTS AS VARCHAR(MAX))+')'    
 EXEC SP_EXECUTESQL @QUERY    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM24CORRUPDATEDDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETFORM24CORRUPDATEDDEDUCTIONS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETFORM24CORRUPDATEDDEDUCTIONS]    
 @STARTROW INT,    
 @PAGESIZE INT,    
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @UPDATEITEMS VARCHAR(MAX),     
 @DELETEITEMS VARCHAR(MAX)    
AS    
 BEGIN    
  DECLARE @FIRSTREC INT, @LASTREC INT    
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE    
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);    
  DECLARE @QUERY NVARCHAR(MAX);    
  SET @QUERY='SELECT ID = IDENTITY(INT,1,1),* INTO #FORM24UPDATEDDEDS FROM    
        (           
		   SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,
			   CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,TS.SECTIONNAME,    
			   CEMP.PAN,CEMP.LASTPAN,CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,
			   CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,
			   CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,
			   CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,
			   CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO, CEMP.GENDER, CEMP.ISSENIORCITIZEN, CDD.CERTNO, CDD.ACKNO,CDD.REMITTANCEID, 
			   CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER    
		   FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) 
		   INNER JOIN     
			  (    
					SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEESERIALNO,CE.GENDER, CE.ISSENIORCITIZEN,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,CE.LASTPANREFERENCE    
					FROM   CORREMPLOYEE CE  WITH(NOLOCK)     
					INNER JOIN
					 (    
							 SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
								FROM  CORREMPLOYEE WITH(NOLOCK)  
							 WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
										 QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
					 ) UE ON CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS 
					 WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
							   CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '     
			   ) CEMP ON  CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER    
			INNER JOIN TAXSECTIONS TS   WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID    
			LEFT JOIN 
		     (
					SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL FROM CORRCHALLANDETAIL WITH(NOLOCK)     
					   WHERE  CORRECTIONSTATUS = 1 AND CHALLANERETURNID NOT IN 
					   (
						 SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL  WITH(NOLOCK)  
								 WHERE CORRECTIONSTATUS <> 1 AND BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND 
										   FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND [QUARTER]='+CAST(@QUARTER AS VARCHAR) + '
					    ) AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
								[QUARTER]='+CAST(@QUARTER AS VARCHAR)+ '    
                   UNION    
                   SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL    
                   FROM   CORRCHALLANDETAIL  WITH(NOLOCK)    
                   WHERE  CORRECTIONSTATUS <> 1 AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND
							  [QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + '
		  ) CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
		WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND 
				   CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND
				   (CDD.CORRECTIONSTATUS = 2 OR CDD.CORRECTIONSTATUS = 4 OR CDD.CORRECTIONSTATUS = 5)';  
  IF(@UPDATEITEMS <> '')    
   BEGIN    
    SET @QUERY = @QUERY + ' UNION
				  SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,
					         CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,TS.SECTIONNAME,    
							CEMP.PAN,CEMP.LASTPAN,CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,
							CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,    
							CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,
							CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,
							CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,2 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO, CEMP.GENDER, 
							CEMP.ISSENIORCITIZEN, CDD.CERTNO, CDD.ACKNO,CDD.REMITTANCEID,CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER        
						 FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) 
						 INNER JOIN     
						 (    
							  SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEESERIALNO,CE.GENDER, CE.ISSENIORCITIZEN,CE.PAN,CE.LASTPAN,
										 CE.PANREFERENCE,CE.LASTPANREFERENCE     
							   FROM CORREMPLOYEE CE  WITH(NOLOCK)  
							   INNER JOIN     
								 (    
									SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
									FROM CORREMPLOYEE  WITH(NOLOCK)  
									WHERE BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND
											  QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
									GROUP BY DEDUCTEESERIALNO    
								 ) UE ON 
								CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS 
								WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND
										  CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) +'     
						 ) CEMP ON CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID 
								 AND CEMP.QUARTER = CDD.QUARTER    
						 INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID    
						 LEFT JOIN (SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL FROM CORRCHALLANDETAIL     
                        WHERE  CORRECTIONSTATUS = 1 AND CHALLANERETURNID NOT IN 
                         (
							SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL 
							WHERE CORRECTIONSTATUS <> 1 AND BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND 
							     FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND [QUARTER]='+CAST(@QUARTER AS VARCHAR) + '
						 ) AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
							 [QUARTER]='+CAST(@QUARTER AS VARCHAR)+ '    
                        UNION    
                        SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL FROM  CORRCHALLANDETAIL WITH(NOLOCK)    
                        WHERE  CORRECTIONSTATUS <> 1 AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID = ' + CAST(@FORMID AS VARCHAR)+' AND 
								 [QUARTER]='+CAST(@QUARTER AS VARCHAR)+'
				 ) CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
              WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND CDD.[QUARTER]='+CAST(@QUARTER AS VARCHAR)+ ' AND CDD.CORRECTIONSTATUS = 1 AND CDD.DEDUCTIONSERIALNO IN ('+CAST(@UPDATEITEMS AS VARCHAR(MAX))+')' ;    
   END    
  IF(@DELETEITEMS <> '')    
   BEGIN    
    SET @QUERY = @QUERY + ' UNION SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,TS.SECTIONNAME,               CEMP.PAN,CEMP.LASTPAN,CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,    
              CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,    
              CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,    
              CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,4 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO,CEMP.GENDER, 
              CEMP.ISSENIORCITIZEN, CDD.CERTNO, CDD.ACKNO,CDD.REMITTANCEID,CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER    
             FROM   CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK) INNER JOIN     
                     (    
                      SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEESERIALNO,CE.GENDER, CE.ISSENIORCITIZEN,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,CE.LASTPANREFERENCE    
                      FROM   CORREMPLOYEE CE  WITH(NOLOCK)  INNER JOIN     
                      (    
                       SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
                       FROM   CORREMPLOYEE  WITH(NOLOCK)  WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
                      ) UE ON    CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) +'     
                     ) CEMP ON CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER    
                     INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID    
                     LEFT JOIN (SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL FROM CORRCHALLANDETAIL     
                       WHERE  CORRECTIONSTATUS = 1 AND CHALLANERETURNID NOT IN (SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL WHERE CORRECTIONSTATUS <> 1 AND BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND [QUARTER]='+CAST(@QUARTER AS VARCHAR) + ') AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+' AND FORMID = '+CAST(@FORMID AS VARCHAR)+' AND [QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + '    
                       UNION    
                       SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL    
                       FROM   CORRCHALLANDETAIL  WITH(NOLOCK)    
                       WHERE  CORRECTIONSTATUS <> 1 AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND [QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+') CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
              WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND CDD.CORRECTIONSTATUS = 1 AND CDD.DEDUCTIONSERIALNO IN (' + CAST(@DELETEITEMS AS VARCHAR(MAX)) + ')' ;    
   END    
  SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #FORM24UPDATEDDEDS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR) + ' ORDER BY CORRECTIONSTATUS';      
  EXEC SP_EXECUTESQL @QUERY;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetForm24DeductionForExport')
DROP PROCEDURE USP_TDS_GetForm24DeductionForExport
GO
CREATE PROCEDURE [USP_TDS_GetForm24DeductionForExport]  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT  
 AS   
  BEGIN   
   SELECT DD.SERIALNO AS DEDUCTIONSERIANNO,DD.DEDUCTEEID,E.SERIALNO AS EMPLOYEESERIALNO,D.REFERENCENO, D.SALUTATION,D.NAME,D.PAN,  
       E.DESIGNATION,E.GENDER,E.ISSENIORCITIZEN,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,  
       D.ADDRESS4,D.ADDRESS5,D.STATEID,S.STATENAME,D.PINCODE,D.PHONENO,D.EMAILADDRESS,DD.SECTIONID,  
       SECTIONNAME + '-' + TAXNAME SECTIONNAME,ISNULL(DD.CERTNO,'')CERTNO, 
       D.REFERENCENO,DD.PAYMENTMADE,  
       DD.PAYMENTDATE,DD.INCOMETAX,DD.EDUCATIONCESSRATE,DD.EDUCATIONCESS,DD.DEDUCTEDDATE,ISNULL(DD.NONDEDREASON,0)NONDEDREASON,  
       ISNULL(CD.SERIALNO,'0') AS CHALLANSERIALNO  
	FROM  DEDUCTIONDETAIL DD   WITH(NOLOCK) 
			 INNER JOIN DEDUCTEE D  WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID  
             INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON E.DEDUCTEEID = D.DEDUCTEEID  
             INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID
             INNER JOIN STATEMASTER S   WITH(NOLOCK)  ON S.STATEID = D.STATEID  
             LEFT JOIN DEDCHALINK DCL  WITH(NOLOCK)  ON DD.DEDUCTIONID=DCL.DEDUCTIONID  
             LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK)  ON DCL.CHALLANID=CD.CHALLANID AND DD.QUARTER = CD.QUARTER  
   WHERE  DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetForm24DeductionRegisterMIS')
DROP PROCEDURE USP_TDS_GetForm24DeductionRegisterMIS
GO
CREATE PROCEDURE USP_TDS_GetForm24DeductionRegisterMIS
AS
BEGIN
	SELECT TOP 2 E.SERIALNO,D.NAME + '(' + CAST(E.SERIALNO AS VARCHAR) +')' AS NAME,PAN,
		   DD.FORMID,DD.BRANCHID,DD.[QUARTER],DD.SECTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
		   CASE WHEN DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'
									     ELSE 
											 CASE WHEN DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197' 
																		   ELSE 
																				CASE WHEN DD.NONDEDREASON = 3 THEN 'PAN NOT AVAILABLE - HIGHER RATE (20%)' 
																											  ELSE '' END END END AS NONDEDREASON,
    REFERENCENO																									
	FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) 
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID 
	INNER JOIN EMPLOYEE E WITH(NOLOCK) ON  D.DEDUCTEEID = E.DEDUCTEEID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetForm24DeductionRegisterMISAB')
DROP PROCEDURE USP_TDS_GetForm24DeductionRegisterMISAB
GO
CREATE PROCEDURE USP_TDS_GetForm24DeductionRegisterMISAB
AS
BEGIN
	SELECT TOP 2 E.SERIALNO,D.NAME + '(' + CAST(E.SERIALNO AS VARCHAR) +')' AS NAME,PAN,
		   DD.FORMID,DD.BRANCHID,DD.[QUARTER],DD.SECTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,
		   DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
		   CASE WHEN DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'
			ELSE 
				CASE WHEN DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197' 
					ELSE 
						CASE WHEN DD.NONDEDREASON = 3 THEN 'PAN NOT AVAILABLE - HIGHER RATE (20%)' 
							ELSE '' END END END AS NONDEDREASON,
		   CB.BRANCHCODE
	FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) 
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID 
		INNER JOIN EMPLOYEE E WITH(NOLOCK) ON  D.DEDUCTEEID = E.DEDUCTEEID
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON  CB.BRANCHID = DD.RTBRANCHID
	WHERE DD.RTBRANCHID IS NOT NULL
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM24EXISTINGDEDS')
DROP PROCEDURE USP_TDS_GETFORM24EXISTINGDEDS
GO
CREATE PROCEDURE [USP_TDS_GETFORM24EXISTINGDEDS]
 @STARTROW INT,  
 @PAGESIZE INT,  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @SECTIONID INT,  
 @NAME VARCHAR(75),
 @SHOWALL BIT = 0 
AS  
 BEGIN    
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */  
  DECLARE @FIRSTREC INT, @LASTREC INT  
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
  DECLARE @QUERY NVARCHAR(MAX);    
  IF(@SHOWALL = 0)
    BEGIN   
	  SET @QUERY = 'SELECT ID = IDENTITY (INT,1,1),* INTO #FORM24EXISTINGDEDS   
		   FROM (  
					SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,
							   CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,
							   TS.SECTIONNAME + '' (''+ TS.TAXNAME + '')'' AS SECTIONNAME, CEMP.PAN,CEMP.LASTPAN,CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,
							   CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,
							   CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,
							   CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,
							   CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO, 0 AS ISSENIORCITIZEN,0 AS GENDER,
							   CDD.CERTNO, CDD.ACKNO,CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER,CCD.SECTIONID AS CHALLANSECTION     
					FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) 
					INNER JOIN   
					 (
						SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEEID,CE.DEDUCTEESERIALNO,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,
								   CE.LASTPANREFERENCE  
							 FROM CORREMPLOYEE CE  WITH(NOLOCK) 
							 INNER JOIN   
								(  
									SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS  
									FROM   CORREMPLOYEE  WITH(NOLOCK) WHERE BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO  
								 ) UE 
								 ON CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS 
						 WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
								   QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '
					 ) CEMP ON 
					 CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND 
					 CEMP.QUARTER = CDD.QUARTER  
					INNER JOIN TAXSECTIONS TS   WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID  
					LEFT JOIN 
					(
						SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID FROM   CORRCHALLANDETAIL  WITH(NOLOCK)   
						WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND 
						QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 1
					) CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID  
					WHERE  CDD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +' AND CDD.FORMID = '+ CAST(@FORMID AS VARCHAR) +' AND 
							   CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND CDD.CORRECTIONSTATUS = 1';
	END
  ELSE
    BEGIN
		 SET @QUERY = 'SELECT ID = IDENTITY (INT,1,1),* INTO #FORM24EXISTINGDEDS   
		   FROM (  
					SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.SERIALNO AS DEDUCTIONSERIALNO,-1 AS DEDUCTIONERETURNID,NE.SERIALNO AS DEDUCTEESERIALNO,
							   CN.NAME+''(''+CAST(NE.SERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,
							   TS.SECTIONNAME + ''(''+ TS.TAXNAME + '')'' AS SECTIONNAME, CN.PAN,CN.PAN AS LASTPAN,CN.PANREFERENCE,CN.PANREFERENCE AS LASTPANREFERENCE,
							   CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.TOTALDEDUCTED AS LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,
							   CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.INCOMETAX AS LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.SURCHARGE AS LASTSURCHARGE,
							   CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.EDUCATIONCESS AS LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,-1 AS CHALLANERETURNID,
							   CDD.ISBOOKENTRY,
							   CDD.ISGROSSINGUP,7 AS CORRECTIONSTATUS,CD.CHALLANTOTAL,CD.SERIALNO AS CHALLANSERIALNO, 0 AS ISSENIORCITIZEN,0 AS GENDER,
							   CDD.CERTNO, CDD.ACKNO,CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'''')TDSRATEASPER,CD.SECTIONID AS CHALLANSECTION     
					FROM DEDUCTIONDETAIL CDD WITH(NOLOCK) 
					INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = CDD.SECTIONID
					INNER JOIN DEDUCTEE CN WITH(NOLOCK) ON CDD.DEDUCTEEID = CN.DEDUCTEEID
					INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON CN.DEDUCTEEID = NE.DEDUCTEEID
					INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON CDD.DEDUCTIONID = DL.DEDUCTIONID
					INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
					WHERE CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND CDD.FORMID=' + CAST(@FORMID AS VARCHAR) +' AND 
						 CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND TOTALDEDUCTED > 0
			 UNION
			 SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.SERIALNO AS DEDUCTIONSERIALNO,-1 AS DEDUCTIONERETURNID,NE.SERIALNO AS DEDUCTEESERIALNO,
							   CN.NAME+''(''+CAST(NE.SERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,
							   TS.SECTIONNAME + ''(''+ TS.TAXNAME + '')'' AS SECTIONNAME, CN.PAN,CN.PAN AS LASTPAN,CN.PANREFERENCE,CN.PANREFERENCE AS LASTPANREFERENCE,
							   CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.TOTALDEDUCTED LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,
							   CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.INCOMETAX LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.SURCHARGE LASTSURCHARGE,
							   CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.EDUCATIONCESS AS LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,-1 AS CHALLANERETURNID,
							   CDD.ISBOOKENTRY,
							   CDD.ISGROSSINGUP,7 AS CORRECTIONSTATUS,0 AS CHALLANTOTAL,-1 CHALLANSERIALNO, 0 AS ISSENIORCITIZEN,0 AS GENDER,
							   CDD.CERTNO, CDD.ACKNO,CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'''')TDSRATEASPER , -1 AS CHALLANSECTION  
					FROM DEDUCTIONDETAIL CDD WITH(NOLOCK) 
					INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = CDD.SECTIONID
					INNER JOIN DEDUCTEE CN WITH(NOLOCK) ON CDD.DEDUCTEEID = CN.DEDUCTEEID
					INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON CN.DEDUCTEEID = NE.DEDUCTEEID
			  WHERE CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND CDD.FORMID=' + CAST(@FORMID AS VARCHAR) +' AND 
						 CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND TOTALDEDUCTED = 0 '
    END
  SET @QUERY = @QUERY + ')TEMP' 	
   IF(@SECTIONID <> -1 OR @NAME <> '')  
  	 SET @QUERY = @QUERY + ' WHERE '
  IF(@SECTIONID <> -1)  
   BEGIN  
    SET @QUERY = @QUERY + '  SECTIONID='+CAST(@SECTIONID AS VARCHAR);  
   END  
    IF(@SECTIONID <> -1 AND @NAME <> '')  
  	 SET @QUERY = @QUERY + ' AND '
  IF(@NAME <> '')  
   BEGIN  
    SET @QUERY = @QUERY + ' NAME LIKE ''' + @NAME + '%''';  
   END  
  SET @QUERY = @QUERY + ';SELECT * FROM #FORM24EXISTINGDEDS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);  
EXEC SP_EXECUTESQL @QUERY;  
 --PRINT @QUERY 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM24EXISTINGDEDSCOUNT')
DROP PROCEDURE USP_TDS_GETFORM24EXISTINGDEDSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETFORM24EXISTINGDEDSCOUNT] 
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @SECTIONID INT,  
 @NAME VARCHAR(75)=NULL,  
 @SHOWALL BIT = 0  
AS  
 BEGIN  
  DECLARE @SQLQUERY NVARCHAR(MAX);  
  DECLARE @TABLENAME VARCHAR(25);  
  SET @TABLENAME = CASE WHEN @FORMID = 1 THEN 'CORREMPLOYEE' ELSE 'CORRNONEMPLOYEE' END  
  IF(@SHOWALL = 0)  
    BEGIN  
   SET @SQLQUERY='SELECT COUNT(CDD.DEDUCTIONSERIALNO)   
         FROM   CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK) INNER JOIN   
                (  
                SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEEID,CE.DEDUCTEESERIALNO   
                FROM   CORREMPLOYEE CE  WITH(NOLOCK) INNER JOIN   
                        (  
                       SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS  
                       FROM   CORREMPLOYEE  WITH(NOLOCK) WHERE BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO  
                        ) UE   
                ON     CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) +' ) CEMP   
                      ON     CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER  
                INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID  
         WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND CDD.CORRECTIONSTATUS = 1 ';--AND CEMP.DEDUCTEEID IS NOT NULL';  
    END  
  ELSE  
    BEGIN  
   SET @SQLQUERY = 'SELECT COUNT(DISTINCT CDD.DEDUCTIONID)  FROM DEDUCTIONDETAIL CDD  
          INNER JOIN   
          (  
           SELECT DD.DEDUCTIONID, DEDUCTEEID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
            INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID  
            INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID  
            WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND   
               DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +' AND DD.TOTALDEDUCTED > 0  
              UNION  
           SELECT DEDUCTIONID, DEDUCTEEID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
            WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND   
               DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +' AND DD.TOTALDEDUCTED = 0  
           EXCEPT  
            SELECT DD.DEDUCTIONID, DEDUCTEEID FROM CORRDEDUCTIONDETAIL DD WITH(NOLOCK)  
           INNER JOIN ' + CAST(@TABLENAME AS VARCHAR) + ' T ON T.DEDUCTEESERIALNO = DD.DEDUCTEESERIALNO AND T.BRANCHID = DD.BRANCHID AND T.FORMID = DD.FORMID AND T.QUARTER = DD.QUARTER                              
            WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND   
                DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +' AND DD.CORRECTIONSTATUS = 7  
          )DE  
          ON CDD.DEDUCTIONID = DE.DEDUCTIONID  
          INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DE.DEDUCTEEID = D.DEDUCTEEID  
          INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID  
          WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)   
    END  
  IF(@SECTIONID <> -1)  
   BEGIN  
    SET @SQLQUERY=@SQLQUERY + ' AND CDD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);  
   END  
  IF(@NAME <> '')  
   BEGIN  
    SET @SQLQUERY=@SQLQUERY + ' AND NAME LIKE '''+@NAME+'%''';  
END  
  EXEC SP_EXECUTESQL @SQLQUERY;  
  --PRINT @SQLQUERY  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM24PENSIONERDEDUCTIONFOREXPORT')
DROP PROCEDURE USP_TDS_GETFORM24PENSIONERDEDUCTIONFOREXPORT
GO
CREATE PROCEDURE [USP_TDS_GETFORM24PENSIONERDEDUCTIONFOREXPORT]  
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT    
 AS     
  BEGIN     
   SELECT DD.SERIALNO AS DEDUCTIONSERIANNO,DD.DEDUCTEEID,E.SERIALNO AS EMPLOYEESERIALNO,D.REFERENCENO, E.PPONUMBER, E.ACCOUNTNO, D.SALUTATION,D.NAME,D.PAN,    
       E.DESIGNATION,E.GENDER,E.ISSENIORCITIZEN,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,    
       D.ADDRESS4,D.ADDRESS5,D.STATEID,S.STATENAME,D.PINCODE,D.PHONENO,D.EMAILADDRESS,DD.SECTIONID,    
       SECTIONNAME + '-' + TAXNAME SECTIONNAME,DD.CERTNO,   
       D.REFERENCENO,DD.PAYMENTMADE,    
       DD.PAYMENTDATE,DD.INCOMETAX,DD.EDUCATIONCESSRATE,DD.EDUCATIONCESS,DD.DEDUCTEDDATE,DD.NONDEDREASON,    
       ISNULL(CD.SERIALNO,'0') AS CHALLANSERIALNO    
 FROM  DEDUCTIONDETAIL DD   WITH(NOLOCK)   
    INNER JOIN DEDUCTEE D  WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID    
             INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON E.DEDUCTEEID = D.DEDUCTEEID    
             INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID  
             INNER JOIN STATEMASTER S   WITH(NOLOCK)  ON S.STATEID = D.STATEID    
             LEFT JOIN DEDCHALINK DCL  WITH(NOLOCK)  ON DD.DEDUCTIONID=DCL.DEDUCTIONID    
             LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK)  ON DCL.CHALLANID=CD.CHALLANID AND DD.QUARTER = CD.QUARTER    
   WHERE  DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND ISNULL(D.EMPTYPE,0) = 1;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetForm24TDSPaymentRegister')
DROP PROCEDURE USP_TDS_GetForm24TDSPaymentRegister
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetForm24TDSPaymentRegister]
AS
BEGIN
	SELECT D.NAME + '(' + CAST(E.SERIALNO AS VARCHAR) + ')' AS NAME,E.SERIALNO,TS.SECTIONNAME,
		   DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SECTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
		   DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
		   CD.CHALLANPAIDDATE,CD.CHEQUENO,RB.BSRCODE + REPLACE(CONVERT(VARCHAR,CD.CHALLANPAIDDATE,103),'/','') + CD.BANKCHALLANNO AS CIN,
		   RB.BRANCHNAME,D.PAN,ISNULL(D.REFERENCENO,'') AS REFERENCENO
	FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
							  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
							  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
							  INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID
							  INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DCL.CHALLANID = CD.CHALLANID
							  LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM24UPDATEDDEDSCOUNT')
DROP PROCEDURE USP_TDS_GETFORM24UPDATEDDEDSCOUNT
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetForm24UpdatedDedsCount]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @UPDATEITEMS VARCHAR(MAX),
 @DELETEITEMS VARCHAR(MAX),
 @EXCLUDEDITEMS VARCHAR(MAX),
 @UNLINKEDDEDITEMS VARCHAR(MAX),
 @SERIALNO INT = 0,
 @SECTIONID VARCHAR(MAX) = '',   
 @NAME VARCHAR(75) = '', 
 @PAN INT = -1,
 @AMTFROM NUMERIC(13,2) = 0,                                  
 @AMTTO NUMERIC(13,2) = 0,                                  
 @PAIDDATEFROM SMALLDATETIME = NULL,                                  
 @PAIDDATETO SMALLDATETIME = NULL,                                  
 @TAXAMTFROM NUMERIC(13,2) = 0,                                  
 @TAXAMTTO NUMERIC(13,2) = 0,                                  
 @TAXDATEFROM SMALLDATETIME = NULL,                                  
 @TAXDATETO SMALLDATETIME = NULL,
 @NONDEDREASON INT = -1
AS
	BEGIN	
		DECLARE @QUERY NVARCHAR(MAX);    
  SET @QUERY='SELECT * INTO #FORM24UPDATEDDEDS FROM    
      (           
          SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,  
          CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,TS.SECTIONNAME, CEMP.PAN,  
          CEMP.LASTPAN,CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,
          CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE, CDD.INCOMETAX,CDD.LASTINCOMETAX,
          CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,
          CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,
          CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO,ISNULL(CEMP.ISSENIORCITIZEN,0) ISSENIORCITIZEN,CEMP.GENDER,CDD.CERTNO, CDD.ACKNO,
          CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER , CCD.SECTIONID AS CHALLANSECTION  
          FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)  
         INNER JOIN     
         (    
          SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEESERIALNO,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,CE.LASTPANREFERENCE,
			ISSENIORCITIZEN,GENDER    
          FROM CORREMPLOYEE CE  WITH(NOLOCK)  
          INNER JOIN   
          (    
           SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
           FROM CORREMPLOYEE  WITH(NOLOCK)   
           WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
           FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
           QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
          ) UE   
          ON   
          CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS   
          WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
          CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
          CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '     
         ) CEMP   
         ON 
         CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER    
         INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID    
         LEFT JOIN   
         (   
          SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID FROM CORRCHALLANDETAIL     
          WHERE  CORRECTIONSTATUS IN (1,7) AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND 
					  FORMID='+CAST(@FORMID AS VARCHAR)+' AND [QUARTER]='+CAST(@QUARTER AS VARCHAR)+ '  AND   
          CHALLANERETURNID NOT IN   
          (  
           SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK)   
            WHERE CORRECTIONSTATUS <> 1 AND   
            BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND   
            FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND   
            [QUARTER]='+CAST(@QUARTER AS VARCHAR) + '  
          ) 
          UNION    
           SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID  FROM  CORRCHALLANDETAIL  WITH(NOLOCK)    
           WHERE  CORRECTIONSTATUS <> 1 AND   
           BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
           FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND   
             [QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + '  
      )CCD   
      ON   
      CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
      WHERE CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND   
      CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND   
      CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND   
         (CDD.CORRECTIONSTATUS = 2 OR CDD.CORRECTIONSTATUS = 4 OR CDD.CORRECTIONSTATUS = 5 OR CORRECTIONSTATUS = 7)';    
  IF(@UPDATEITEMS <> '')    
   BEGIN    
    SET @QUERY = @QUERY + ' UNION SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,  
           CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,TS.SECTIONNAME, CEMP.PAN,CEMP.LASTPAN,  
           CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,  
           CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE, CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,  
           CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,  
           CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,2 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO ,
           ISNULL(CEMP.ISSENIORCITIZEN,0) ISSENIORCITIZEN,CEMP.GENDER,CDD.CERTNO, CDD.ACKNO,
          CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER , CCD.SECTIONID AS CHALLANSECTION          
            FROM CORRDEDUCTIONDETAIL CDD   WITH(NOLOCK)   
            INNER JOIN     
            (    
           SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEESERIALNO,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,CE.LASTPANREFERENCE,ISSENIORCITIZEN,GENDER     
            FROM CORREMPLOYEE CE   WITH(NOLOCK)   
            INNER JOIN     
            (    
              SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
             FROM CORREMPLOYEE CE  WITH(NOLOCK)   
                             WHERE BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND   
              FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
              QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
            ) UE  
            ON      
            CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS   
            WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
            CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
            CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) +'     
           ) CEMP   
          ON       
         CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER    
        INNER JOIN TAXSECTIONS TS   WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID    
         LEFT JOIN 
         (
				 SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID FROM CORRCHALLANDETAIL  WITH(NOLOCK)      
				  WHERE CORRECTIONSTATUS IN (1,7) AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
					 [QUARTER]='+CAST(@QUARTER AS VARCHAR)+ '     
					AND CHALLANERETURNID NOT IN   
					  (  
					   SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
					   WHERE CORRECTIONSTATUS <> 1 AND   
					   BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND   
					   FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND   
					   [QUARTER]='+CAST(@QUARTER AS VARCHAR) + '  
					   )   
                 UNION    
				SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID  FROM  CORRCHALLANDETAIL  WITH(NOLOCK)     
				WHERE  CORRECTIONSTATUS <> 1 AND   
				BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND   
				FORMID = ' + CAST(@FORMID AS VARCHAR)+' AND  
				[QUARTER]='+CAST(@QUARTER AS VARCHAR)+'  
		 ) CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
              WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND   
        CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND   
        CDD.[QUARTER]='+CAST(@QUARTER AS VARCHAR)+ ' AND   
        CDD.CORRECTIONSTATUS IN (1,7) AND CDD.DEDUCTIONSERIALNO IN ('+CAST(@UPDATEITEMS AS VARCHAR(MAX))+')' ;    
   END    
  IF(@DELETEITEMS <> '')    
   BEGIN    
    SET @QUERY = @QUERY + ' UNION SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,  
              CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,TS.SECTIONNAME, CEMP.PAN,  
              CEMP.LASTPAN,CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,  
              CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,  CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,  
              CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,  
              CDD.ISGROSSINGUP,4 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO ,ISNULL(CEMP.ISSENIORCITIZEN,0) ISSENIORCITIZEN,
              CEMP.GENDER,CDD.CERTNO, CDD.ACKNO, CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER ,CCD.SECTIONID AS CHALLANSECTION        
             FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)    
             INNER JOIN     
             (    
                SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEESERIALNO,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,CE.LASTPANREFERENCE,ISSENIORCITIZEN ,GENDER   
                FROM CORREMPLOYEE CE  WITH(NOLOCK)    
                INNER JOIN     
                (    
                  SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS  FROM CORREMPLOYEE  WITH(NOLOCK)    
                  WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
                  FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
                  QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
                                                                ) UE ON  
                                                                CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS   
                                                                WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
                                                                CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
                                                                CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) +'     
           ) CEMP ON CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER    
           INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID    
           LEFT JOIN
            (
			 SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID FROM CORRCHALLANDETAIL  WITH(NOLOCK)      
			  WHERE  CORRECTIONSTATUS IN (1,7) AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+' AND FORMID = '+CAST(@FORMID AS VARCHAR)+' AND [QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + '  AND   
			  CHALLANERETURNID NOT IN   
			  (  
			   SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
			   WHERE CORRECTIONSTATUS <> 1 AND   
			   BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND   
			   FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND   
			   [QUARTER]='+CAST(@QUARTER AS VARCHAR) + '  
			  )   
       UNION    
				SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL , SECTIONID   
				FROM   CORRCHALLANDETAIL  WITH(NOLOCK)     
				WHERE  CORRECTIONSTATUS <> 1 AND   
				BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
				FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
				[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+'  
            ) CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
          WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND   
          CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND   
          CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND   
          CDD.CORRECTIONSTATUS = 1 AND   
          CDD.DEDUCTIONSERIALNO IN (' + CAST(@DELETEITEMS AS VARCHAR(MAX)) + ')' ;    
   END    
  IF @EXCLUDEDITEMS <> ''    
   BEGIN    
    SET @QUERY = @QUERY + 'UNION SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,DD.ERETURNID,E.SERIALNO AS DEDUCTEESERIALNO,D.NAME,  
           -1 AS CODE,DD.SECTIONID,TS.SECTIONNAME,  D.PAN,'''' AS LASTPAN,D.PANREFERENCE,'''' AS LASTPANREFERENCE,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,  
           0 AS LASTTOTALDEDUCTED,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE, DD.INCOMETAX,0 AS LASTINCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,  
           0 AS LASTSURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,CD.SERIALNO AS CHALSERIALNO,  
           DD.ISBOOKENTRY,DD.ISGROSSINGUP,5 AS CORRECTIONSTATUS,CD.CHALLANTOTAL,CD.SERIALNO,ISNULL(E.ISSENIORCITIZEN,0) ISSENIORCITIZEN,CD.SECTIONID AS CHALLANSECTION
           GENDER,DD.CERTNO, DD.ACKNO,
          DD.REMITTANCEID, DD.COUNTRYID, ISNULL(DD.TDSRATEASPER,'' '' )TDSRATEASPER, CD.SECTIONID AS CHALLANSECTION     
          FROM DEDUCTIONDETAIL DD   WITH(NOLOCK) INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID    
        INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID    
        INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID       
        LEFT JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID    
        LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK)  ON DL.CHALLANID = CD.CHALLANID    
        WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
        DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
        DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+ ' AND   
        DD.SERIALNO IN (' + CAST(@EXCLUDEDITEMS AS VARCHAR(MAX))+')';    
   END    
    IF @UNLINKEDDEDITEMS <> ''    
   BEGIN    
    SET @QUERY = @QUERY + 'UNION SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,DD.ERETURNID,E.DEDUCTEESERIALNO,D.NAME,-1 AS CODE,DD.SECTIONID,  
           TS.SECTIONNAME, D.PAN,'''' AS LASTPAN,D.PANREFERENCE,'''' AS LASTPANREFERENCE,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,DD.TAXRATE,  
           DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE, DD.INCOMETAX,0 AS LASTINCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,0 AS LASTSURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,  
           0 AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,CD.SERIALNO AS CHALSERIALNO,DD.ISBOOKENTRY,DD.ISGROSSINGUP,5 AS CORRECTIONSTATUS,CD.CHALLANTOTAL,  
           CD.SERIALNO,ISNULL(E.ISSENIORCITIZEN,0) ISSENIORCITIZEN,GENDER,CDD.CERTNO, CDD.ACKNO,
          CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER , -1 AS CHALLANSECTION    
          FROM   DEDUCTIONDETAIL DD  WITH(NOLOCK)  
          INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID    
          INNER JOIN CORREMPLOYEE E  WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID    
         INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID       
         LEFT JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DL.BRANCHID=D.BRANCHID    
         LEFT JOIN CHALLANDETAIL CD   WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID    
         WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
         DD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND   
         DL.DEDUCTIONID IS NULL'+ ' AND   
         DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+ ' AND  
         DD.SERIALNO IN (' + CAST(@UNLINKEDDEDITEMS AS VARCHAR(MAX))+')';    
   END   
     SET @QUERY = @QUERY + ') TEMP;'    
     SET @QUERY = @QUERY + ' SELECT ID = IDENTITY(INT,1,1),* INTO #FORM24TEMP
							FROM #FORM24UPDATEDDEDS 
						  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
		IF(@NAME <> '')                                  
		BEGIN                  
			SET @QUERY = @QUERY + ' AND NAME LIKE ''%' + @NAME + '%''';                                  
		END    
		IF(@SERIALNO <> 0)  
		BEGIN   
			SET @QUERY = @QUERY + ' AND DEDUCTIONSERIALNO = ' + CAST(@SERIALNO AS VARCHAR)  
		END
		IF(@PAN = 1)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')'               
		END                
		ELSE IF(@PAN = 2)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND PAN = ''PANAPPLIED'''              
		END                
		ELSE IF(@PAN = 3)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND PAN = ''PANINVALID'''              
		END                
		ELSE IF(@PAN = 4)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND PAN = ''PANNOTAVBL'''              
		END                
		IF(@SECTIONID <> '')                                  
		BEGIN    
			SET @QUERY = @QUERY + ' AND SECTIONNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS NVARCHAR(MAX))+''','',''))'                          
		END                                
		IF(@AMTFROM <> 0 OR @AMTTO <> 0)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));      
		END                  
		IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)                                  
		BEGIN                   
			SET @QUERY = @QUERY + ' AND PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';                                  
		END                         
		IF(@TAXAMTFROM <> 0 OR @TAXAMTTO <> 0)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR) + ' AND ' + CAST(@TAXAMTTO AS VARCHAR);                                  
		END                                   
		IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDATETO AS VARCHAR ) + ''''                                  
		END                                           
		IF(@NONDEDREASON <> -1)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)       
		END	
		SET @QUERY = @QUERY + ' SELECT COUNT(DEDUCTIONSERIALNO) AS DEDUCTIONSERIALNO FROM #FORM24TEMP';
		EXEC SP_EXECUTESQL @QUERY;
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM24UPDATEDDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETFORM24UPDATEDDEDUCTIONS
GO
 CREATE PROCEDURE [dbo].[USP_TDS_GetForm24UpdatedDeductions] --1,10,103,1,1,'','','',''
 @STARTROW INT,    
 @PAGESIZE INT,    
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @UPDATEITEMS VARCHAR(MAX),     
 @DELETEITEMS VARCHAR(MAX),    
 @EXCLUDEDITEMS VARCHAR(MAX),    
 @UNLINKEDDEDITEMS VARCHAR(MAX),
 @SERIALNO INT = 0,
 @SECTIONID VARCHAR(MAX) = '',   
 @NAME VARCHAR(75) = '', 
 @PAN INT = -1,
 @AMTFROM NUMERIC(13,2) = 0,                                  
 @AMTTO NUMERIC(13,2) = 0,                                  
 @PAIDDATEFROM SMALLDATETIME = NULL,                                  
 @PAIDDATETO SMALLDATETIME = NULL,                                  
 @TAXAMTFROM NUMERIC(13,2) = 0,                                  
 @TAXAMTTO NUMERIC(13,2) = 0,                                  
 @TAXDATEFROM SMALLDATETIME = NULL,                                  
 @TAXDATETO SMALLDATETIME = NULL,
 @NONDEDREASON INT = -1     
AS    
 BEGIN    
  /* Determine the first record and last record */    
  DECLARE @FIRSTREC INT, @LASTREC INT    
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE    
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);    
  DECLARE @QUERY NVARCHAR(MAX);    
  SET @QUERY='SELECT * INTO #FORM24UPDATEDDEDS FROM    
      (           
          SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,  
          CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,TS.SECTIONNAME, CEMP.PAN,  
          CEMP.LASTPAN,CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,
          CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE, CDD.INCOMETAX,CDD.LASTINCOMETAX,
          CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,
          CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,
          CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO,ISNULL(CEMP.ISSENIORCITIZEN,0) ISSENIORCITIZEN,CEMP.GENDER,CDD.CERTNO, CDD.ACKNO,
          CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER , CCD.SECTIONID AS CHALLANSECTION  
          FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)  
         INNER JOIN     
         (    
          SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEESERIALNO,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,CE.LASTPANREFERENCE,
			ISSENIORCITIZEN,GENDER    
          FROM CORREMPLOYEE CE  WITH(NOLOCK)  
          INNER JOIN   
          (    
           SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
           FROM CORREMPLOYEE  WITH(NOLOCK)   
           WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
           FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
           QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
          ) UE   
          ON   
          CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS   
          WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
          CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
          CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '     
         ) CEMP   
         ON 
         CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER    
         INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID    
         LEFT JOIN   
         (   
          SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID FROM CORRCHALLANDETAIL     
          WHERE  CORRECTIONSTATUS IN (1,7) AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND 
					  FORMID='+CAST(@FORMID AS VARCHAR)+' AND [QUARTER]='+CAST(@QUARTER AS VARCHAR)+ '  AND   
          CHALLANERETURNID NOT IN   
       (  
           SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK)   
            WHERE CORRECTIONSTATUS <> 1 AND   
            BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND   
            FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND   
            [QUARTER]='+CAST(@QUARTER AS VARCHAR) + '  
          )  
          UNION    
           SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID  FROM  CORRCHALLANDETAIL  WITH(NOLOCK)    
           WHERE  CORRECTIONSTATUS <> 1 AND   
           BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
           FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND   
             [QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + '  
      )CCD   
      ON   
      CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
      WHERE CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND   
      CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND   
      CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND   
         (CDD.CORRECTIONSTATUS = 2 OR CDD.CORRECTIONSTATUS = 4 OR CDD.CORRECTIONSTATUS = 5 OR CORRECTIONSTATUS = 7)';    
  IF(@UPDATEITEMS <> '')    
   BEGIN    
    SET @QUERY = @QUERY + ' UNION SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,  
           CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,TS.SECTIONNAME, CEMP.PAN,CEMP.LASTPAN,  
           CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,  
           CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE, CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,  
           CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,  
           CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,2 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO ,
           ISNULL(CEMP.ISSENIORCITIZEN,0) ISSENIORCITIZEN,CEMP.GENDER,CDD.CERTNO, CDD.ACKNO,
          CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER , CCD.SECTIONID AS CHALLANSECTION          
            FROM CORRDEDUCTIONDETAIL CDD   WITH(NOLOCK)   
            INNER JOIN     
            (    
           SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEESERIALNO,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,CE.LASTPANREFERENCE,ISSENIORCITIZEN,GENDER     
            FROM CORREMPLOYEE CE   WITH(NOLOCK)   
            INNER JOIN     
            (    
              SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
             FROM CORREMPLOYEE CE  WITH(NOLOCK)   
                             WHERE BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND   
              FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
              QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
            ) UE  
            ON      
            CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS   
            WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
            CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
            CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) +'     
           ) CEMP   
          ON       
         CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER    
        INNER JOIN TAXSECTIONS TS   WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID    
         LEFT JOIN 
         (
				 SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID FROM CORRCHALLANDETAIL  WITH(NOLOCK)      
				  WHERE CORRECTIONSTATUS IN (1,7) AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID='+CAST(@FORMID AS VARCHAR)+' AND 
					 [QUARTER]='+CAST(@QUARTER AS VARCHAR)+ '     
					AND CHALLANERETURNID NOT IN   
					  (  
					   SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
					   WHERE CORRECTIONSTATUS <> 1 AND   
					   BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND   
					   FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND   
					   [QUARTER]='+CAST(@QUARTER AS VARCHAR) + '  
					   )   
                 UNION    
				SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID  FROM  CORRCHALLANDETAIL  WITH(NOLOCK)     
				WHERE  CORRECTIONSTATUS <> 1 AND   
				BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND   
				FORMID = ' + CAST(@FORMID AS VARCHAR)+' AND  
				[QUARTER]='+CAST(@QUARTER AS VARCHAR)+'  
		 ) CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
              WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND   
        CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND   
        CDD.[QUARTER]='+CAST(@QUARTER AS VARCHAR)+ ' AND   
        CDD.CORRECTIONSTATUS IN (1,7) AND CDD.DEDUCTIONSERIALNO IN ('+CAST(@UPDATEITEMS AS VARCHAR(MAX))+')' ;    
   END    
  IF(@DELETEITEMS <> '')    
   BEGIN    
    SET @QUERY = @QUERY + ' UNION SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,  
              CEMP.NAME+''(''+CAST(CEMP.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS CODE,CDD.SECTIONID,TS.SECTIONNAME, CEMP.PAN,  
              CEMP.LASTPAN,CEMP.PANREFERENCE,CEMP.LASTPANREFERENCE,CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,  
              CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,  CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,  
              CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,  
              CDD.ISGROSSINGUP,4 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO ,ISNULL(CEMP.ISSENIORCITIZEN,0) ISSENIORCITIZEN,
              CEMP.GENDER,CDD.CERTNO, CDD.ACKNO, CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER ,CCD.SECTIONID AS CHALLANSECTION        
             FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)    
             INNER JOIN     
             (    
                SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.NAME,CE.DEDUCTEESERIALNO,CE.PAN,CE.LASTPAN,CE.PANREFERENCE,CE.LASTPANREFERENCE,ISSENIORCITIZEN ,GENDER   
                FROM CORREMPLOYEE CE  WITH(NOLOCK)    
                INNER JOIN     
                (    
                  SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS  FROM CORREMPLOYEE  WITH(NOLOCK)    
                  WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
                  FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
                  QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
                                                                ) UE ON  
                                                                CE.DEDUCTEESERIALNO = UE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UE.CURRENTCORRECTIONSTATUS   
                                                                WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
                                                                CE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
                                                                CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) +'     
           ) CEMP ON CDD.DEDUCTEESERIALNO = CEMP.DEDUCTEESERIALNO AND CEMP.BRANCHID = CDD.BRANCHID AND CEMP.FORMID = CDD.FORMID AND CEMP.QUARTER = CDD.QUARTER    
           INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID    
           LEFT JOIN
            (
			 SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID FROM CORRCHALLANDETAIL  WITH(NOLOCK)      
			  WHERE  CORRECTIONSTATUS IN (1,7) AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+' AND FORMID = '+CAST(@FORMID AS VARCHAR)+' AND [QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + '  AND   
			  CHALLANERETURNID NOT IN   
			  (  
			   SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
			   WHERE CORRECTIONSTATUS <> 1 AND   
			   BRANCHID=' + CAST(@BRANCHID AS VARCHAR) + ' AND   
			   FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND   
			   [QUARTER]='+CAST(@QUARTER AS VARCHAR) + '  
			  )   
            UNION    
				SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL , SECTIONID   
				FROM   CORRCHALLANDETAIL  WITH(NOLOCK)     
				WHERE  CORRECTIONSTATUS <> 1 AND   
				BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
				FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
				[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+'  
            ) CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
          WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND   
          CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND   
          CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND   
          CDD.CORRECTIONSTATUS = 1 AND   
          CDD.DEDUCTIONSERIALNO IN (' + CAST(@DELETEITEMS AS VARCHAR(MAX)) + ')' ;    
   END    
  IF @EXCLUDEDITEMS <> ''    
   BEGIN    
    SET @QUERY = @QUERY + 'UNION SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,DD.ERETURNID,E.SERIALNO AS DEDUCTEESERIALNO,D.NAME,  
           -1 AS CODE,DD.SECTIONID,TS.SECTIONNAME,  D.PAN,'''' AS LASTPAN,D.PANREFERENCE,'''' AS LASTPANREFERENCE,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,  
           0 AS LASTTOTALDEDUCTED,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE, DD.INCOMETAX,0 AS LASTINCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,  
           0 AS LASTSURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,CD.SERIALNO AS CHALSERIALNO,  
           DD.ISBOOKENTRY,DD.ISGROSSINGUP,5 AS CORRECTIONSTATUS,CD.CHALLANTOTAL,CD.SERIALNO,ISNULL(E.ISSENIORCITIZEN,0) ISSENIORCITIZEN,CD.SECTIONID AS CHALLANSECTION
           GENDER,DD.CERTNO, DD.ACKNO,
          DD.REMITTANCEID, DD.COUNTRYID, ISNULL(DD.TDSRATEASPER,'' '' )TDSRATEASPER, CD.SECTIONID AS CHALLANSECTION     
          FROM DEDUCTIONDETAIL DD   WITH(NOLOCK) INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID    
        INNER JOIN EMPLOYEE E  WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID    
        INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID       
        LEFT JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID    
        LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK)  ON DL.CHALLANID = CD.CHALLANID    
        WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
        DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
        DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+ ' AND   
        DD.SERIALNO IN (' + CAST(@EXCLUDEDITEMS AS VARCHAR(MAX))+')';    
   END    
    IF @UNLINKEDDEDITEMS <> ''    
   BEGIN    
    SET @QUERY = @QUERY + 'UNION SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,DD.ERETURNID,E.DEDUCTEESERIALNO,D.NAME,-1 AS CODE,DD.SECTIONID,  
           TS.SECTIONNAME, D.PAN,'''' AS LASTPAN,D.PANREFERENCE,'''' AS LASTPANREFERENCE,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,DD.TAXRATE,  
           DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE, DD.INCOMETAX,0 AS LASTINCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,0 AS LASTSURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,  
           0 AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,CD.SERIALNO AS CHALSERIALNO,DD.ISBOOKENTRY,DD.ISGROSSINGUP,5 AS CORRECTIONSTATUS,CD.CHALLANTOTAL,  
           CD.SERIALNO,ISNULL(E.ISSENIORCITIZEN,0) ISSENIORCITIZEN,GENDER,CDD.CERTNO, CDD.ACKNO,
          CDD.REMITTANCEID, CDD.COUNTRYID, ISNULL(CDD.TDSRATEASPER,'' '' )TDSRATEASPER , -1 AS CHALLANSECTION    
          FROM   DEDUCTIONDETAIL DD  WITH(NOLOCK)  
          INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID    
          INNER JOIN CORREMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID    
         INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID       
         LEFT JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DL.BRANCHID=D.BRANCHID    
         LEFT JOIN CHALLANDETAIL CD   WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID    
         WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
         DD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND   
         DL.DEDUCTIONID IS NULL'+ ' AND   
         DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+ ' AND  
         DD.SERIALNO IN (' + CAST(@UNLINKEDDEDITEMS AS VARCHAR(MAX))+')';    
   END    
	 SET @QUERY = @QUERY + ') TEMP;'  
     SET @QUERY = @QUERY + ' SELECT ID = IDENTITY(INT,1,1),* INTO #FORM24TEMP
							FROM #FORM24UPDATEDDEDS 
						  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
		IF(@NAME <> '')                                  
		BEGIN                  
			SET @QUERY = @QUERY + ' AND NAME LIKE ''%' + @NAME + '%''';                                  
		END    
		IF(@SERIALNO <> 0)  
		BEGIN   
			SET @QUERY = @QUERY + ' AND DEDUCTIONSERIALNO = ' + CAST(@SERIALNO AS VARCHAR)  
		END
		IF(@PAN = 1)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')'               
		END                
		ELSE IF(@PAN = 2)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND PAN = ''PANAPPLIED'''              
		END                
		ELSE IF(@PAN = 3)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND PAN = ''PANINVALID'''              
		END                
		ELSE IF(@PAN = 4)              
		BEGIN              
			SET @QUERY = @QUERY + ' AND PAN = ''PANNOTAVBL'''              
		END                
		IF(@SECTIONID <> '')                                  
		BEGIN    
			SET @QUERY = @QUERY + ' AND SECTIONNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS NVARCHAR(MAX))+''','',''))'                          
		END                                
		IF(@AMTFROM <> 0 OR @AMTTO <> 0)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));      
		END                  
		IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)                                  
		BEGIN                   
			SET @QUERY = @QUERY + ' AND PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';                                  
		END                         
		IF(@TAXAMTFROM <> 0 OR @TAXAMTTO <> 0)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR) + ' AND ' + CAST(@TAXAMTTO AS VARCHAR);                                  
		END                                   
		IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)                                  
		BEGIN                                  
			SET @QUERY = @QUERY + ' AND DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDATETO AS VARCHAR ) + ''''                                  
		END                                           
		IF(@NONDEDREASON <> -1)  
		BEGIN  
			SET @QUERY = @QUERY + ' AND NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)       
		END           					          
  SET @QUERY = @QUERY + ' SELECT * FROM #FORM24TEMP WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR) + ' ORDER BY CORRECTIONSTATUS';      
  EXEC SP_EXECUTESQL @QUERY;    
 --print  @QUERY;    
 END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM2627DEDUCTIONFOREXPORT')
DROP PROCEDURE USP_TDS_GETFORM2627DEDUCTIONFOREXPORT
GO
CREATE PROCEDURE [USP_TDS_GETFORM2627DEDUCTIONFOREXPORT]  
   @BRANCHID INT,        
   @FORMID INT,        
   @QUARTER INT,    
   @ISCHILDBRANCH BIT = 0    
AS         
 BEGIN        
  DECLARE @SQLQUERY NVARCHAR(MAX);    
  SET  @SQLQUERY = 'SELECT DD.SERIALNO AS DEDUCTIONSERIANNO,DD.DEDUCTEEID,NE.SERIALNO AS NONEMPLOYEESERIALNO,D.REFERENCENO, D.NAME,D.SALUTATION,D.PAN,        
             NE.DEDUCTEECODE,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,S.STATENAME,D.PINCODE, D.PHONENO,    
             D.EMAILADDRESS,D.REFERENCENO,DD.SECTIONID,SEC.SECTIONNAME,ISNULL(TOTALPURCHASEVALUE,0)VALUEOFPURCHASE,DD.PAYMENTMADE,    
             DD.PAYMENTDATE,DD.INCOMETAXRATE, DD.INCOMETAX,DD.SURCHARGERATE,DD.SURCHARGE,DD.EDUCATIONCESSRATE,DD.EDUCATIONCESS,    
             DD.DEDUCTEDDATE,DD.ISBOOKENTRY, DD.CERTIFICATEDATE,DD.NONDEDREASON,DD.ISGROSSINGUP,ISNULL(CD.SERIALNO,''0'') AS CHALLANSERIALNO,    
             NE.ISTRANSPORTER, DD.ENTRYTYPE, R.PARTICULARS, CM.COUNTRYNAME, DD.CERTNO, ISNULL(DD.TDSRATEASPER,'''')TDSRATEASPER, DD.ACKNO    
               FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)  INNER JOIN DEDUCTEE D   WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID        
              INNER JOIN NONEMPLOYEE NE  WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID        
              INNER JOIN TAXSECTIONS SEC  WITH(NOLOCK)  ON DD.SECTIONID=SEC.SECTIONID        
              LEFT JOIN DEDCHALINK DCL  WITH(NOLOCK)  ON DD.DEDUCTIONID=DCL.DEDUCTIONID        
              LEFT JOIN CHALLANDETAIL CD   WITH(NOLOCK) ON DCL.CHALLANID=CD.CHALLANID AND DD.QUARTER = CD.QUARTER       
              LEFT JOIN COUNTRYMASTER CM ON CM.COUNTRYCODE = DD.COUNTRYID  
              LEFT JOIN REMITTANCES R ON R.ID = DD.REMITTANCEID                 
            INNER JOIN STATEMASTER S  WITH(NOLOCK)  ON S.STATEID = D.STATEID        
            WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+ ' AND DD.FORMID =  ' + CAST(@FORMID AS VARCHAR)+' AND DD.QUARTER =  ' + CAST(@QUARTER AS VARCHAR)    
  IF(@ISCHILDBRANCH = 1)    
   BEGIN    
    SET @SQLQUERY = @SQLQUERY + ' AND DD.ENTRYTYPE <> 4'    
   END    
   EXEC SP_EXECUTESQL @SQLQUERY;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetFORM2627DeductionRegisterMIS')
DROP PROCEDURE USP_TDS_GetFORM2627DeductionRegisterMIS
GO
CREATE PROCEDURE USP_TDS_GetFORM2627DeductionRegisterMIS	
AS
BEGIN
SELECT TOP 1 NE.SERIALNO,D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME, PAN, REFERENCENO,    
     DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
     DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
     TS.SECTIONNAME,DL.CHALLANID,PO.ORDERNO,PO.ORDERDATE,  
     CASE WHEN DD.FORMID = 2
      THEN    
        CASE  DD.NONDEDREASON     
        WHEN  1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'     
        WHEN  2 THEN 'NO DEDUCTION U/S 197A'    
        WHEN  3 THEN 'PAN Not available - Higher Rate (20%)'    
        WHEN  4 THEN 'Transporter with valid PAN (0%)'    
		WHEN  5 THEN 'Amount Paid/Credited is Under Threshold'
		WHEN  6 THEN 'Software Vendor Transaction'
		WHEN  7 THEN 'NO DEDUCTION U/S 197A(1F)'
		WHEN  8 THEN 'Deduction on Interest Income for Senior Citizens'
        ELSE ''
        END    
         WHEN DD.FORMID = 3  
      THEN    
          CASE DD.NONDEDREASON    
         WHEN 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'     
           WHEN 2 THEN 'NO DEDUCTION U/S 197A'    
           WHEN 3 THEN 'PAN Not available - Higher Rate (20%)'    
           WHEN 6 THEN 'Software Vendor Transaction' 
         ELSE ''     
          END    
  WHEN DD.FORMID = 4  
      THEN    
          CASE DD.NONDEDREASON    
         WHEN 1 THEN 'AS PER SECTION 206C(9)'     
           WHEN 2 THEN 'ANY OTHER REASON'    
         ELSE ''     
          END        
   END AS NONDEDREASON,
   CASE WHEN NE.DEDUCTEECODE = 1 THEN 'Companies' ELSE 'Non Companies' END AS DEDCODE    
   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
   INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID    
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON  D.DEDUCTEEID = NE.DEDUCTEEID    
   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
   LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
   LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetFORM2627DeductionRegisterMISAB')
DROP PROCEDURE USP_TDS_GetFORM2627DeductionRegisterMISAB
GO
CREATE PROCEDURE USP_TDS_GetFORM2627DeductionRegisterMISAB	
AS
BEGIN
	SELECT TOP 1 NE.SERIALNO,D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME, PAN, REFERENCENO,    
		 DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
		 DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
		 TS.SECTIONNAME,DL.CHALLANID,PO.ORDERNO,PO.ORDERDATE,  
		 CASE WHEN DD.FORMID = 2
		  THEN    
			CASE  DD.NONDEDREASON     
			WHEN  1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'     
			WHEN  2 THEN 'NO DEDUCTION U/S 197A'    
			WHEN  3 THEN 'PAN Not available - Higher Rate (20%)'    
			WHEN  4 THEN 'Transporter with valid PAN (0%)'    
			WHEN  5 THEN 'Amount Paid/Credited is Under Threshold'
			WHEN  6 THEN 'Software Vendor Transaction'
			WHEN  7 THEN 'NO DEDUCTION U/S 197A(1F)'
			WHEN  8 THEN 'Deduction on Interest Income for Senior Citizens'
			ELSE ''
			END    
			 WHEN DD.FORMID = 3  
		  THEN    
			  CASE DD.NONDEDREASON    
			 WHEN 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'     
			   WHEN 2 THEN 'NO DEDUCTION U/S 197A'    
			   WHEN 3 THEN 'PAN Not available - Higher Rate (20%)'    
			   WHEN 6 THEN 'Software Vendor Transaction' 
			 ELSE ''     
			  END    
	  WHEN DD.FORMID = 4  
		  THEN    
			  CASE DD.NONDEDREASON    
			 WHEN 1 THEN 'AS PER SECTION 206C(9)'     
			   WHEN 2 THEN 'ANY OTHER REASON'    
			 ELSE ''     
			  END        
	   END AS NONDEDREASON,
	   CASE WHEN NE.DEDUCTEECODE = 1 THEN 'Companies' ELSE 'Non Companies' END AS DEDCODE,CB.BRANCHCODE    
	   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	   INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID    
	   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON  D.DEDUCTEEID = NE.DEDUCTEEID    
	   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
	   LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
	   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
	   LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID
	   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON  CB.BRANCHID = DD.RTBRANCHID
	WHERE DD.RTBRANCHID IS NOT NULL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetFORM2627DeductionRegisterMISCBI')
DROP PROCEDURE USP_TDS_GetFORM2627DeductionRegisterMISCBI
GO
CREATE PROCEDURE USP_TDS_GetFORM2627DeductionRegisterMISCBI	
AS
BEGIN
SELECT TOP 1 NE.SERIALNO,D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME, PAN,   
     DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
     DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
     TS.SECTIONNAME,DL.CHALLANID,PO.ORDERNO,PO.ORDERDATE,ISNULL(TR.BGLCODE,'')BGLCODE,  
     CASE WHEN DD.FORMID = 2
      THEN    
        CASE  DD.NONDEDREASON     
        WHEN  1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'     
        WHEN  2 THEN 'NO DEDUCTION U/S 197A'    
        WHEN  3 THEN 'PAN Not available - Higher Rate (20%)'    
        WHEN  4 THEN 'Transporter with valid PAN (0%)'    
		WHEN  5 THEN 'Amount Paid/Credited is Under Threshold'
		WHEN  6 THEN 'Software Vendor Transaction'
		WHEN  7 THEN 'NO DEDUCTION U/S 197A(1F)'
		WHEN  8 THEN 'Deduction on Interest Income for Senior Citizens'
        ELSE ''
        END    
          WHEN DD.FORMID = 3  
      THEN    
        CASE DD.NONDEDREASON    
        WHEN 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'     
        WHEN 2 THEN 'NO DEDUCTION U/S 197A'    
        WHEN 3 THEN 'PAN Not available - Higher Rate (20%)'    
        WHEN 6 THEN 'Software Vendor Transaction' 
        ELSE ''     
        END    
		  WHEN DD.FORMID = 4  
      THEN    
        CASE DD.NONDEDREASON    
        WHEN 1 THEN 'AS PER SECTION 206C(9)'     
        WHEN 2 THEN 'ANY OTHER REASON'    
        ELSE ''     
        END        
   END AS NONDEDREASON,
   CASE WHEN NE.DEDUCTEECODE = 1 THEN 'Companies' ELSE 'Non Companies' END AS DEDCODE    
   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
   INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID    
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON  D.DEDUCTEEID = NE.DEDUCTEEID    
   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
   LEFT JOIN TDSRATE TR ON  DD.BGLCODEID = TR.BGLCODEID 
   LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
   LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM2627EXISTINGDEDS')
DROP PROCEDURE USP_TDS_GETFORM2627EXISTINGDEDS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETFORM2627EXISTINGDEDS] 
 @STARTROW INT,  
 @PAGESIZE INT,  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @SECTIONID INT,  
 @NAME VARCHAR(75),
 @SHOWALL BIT = 0 
AS  
 BEGIN    
	  /* DETERMINE THE FIRST RECORD AND LAST RECORD */  
	  DECLARE @FIRSTREC INT, @LASTREC INT, @QUERY NVARCHAR(MAX);    
	  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
	  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);    
	  IF(@SHOWALL = 0)
		 BEGIN  
				SELECT MAX(CORRECTIONSTATUS) CORRECTIONSTATUS,DEDUCTEESERIALNO 
				INTO #CORRNON
				FROM CORRNONEMPLOYEE  WITH(NOLOCK) 
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
				GROUP BY DEDUCTEESERIALNO
				SELECT CNE.NAME+'('+CAST(CNE.DEDUCTEESERIALNO AS VARCHAR)+')' AS NAME,CNE.CODE,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.LASTPANREFERENCE, CNE.DEDUCTEESERIALNO
				INTO #CORRNONEMPLOYEE
				FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)
				INNER JOIN #CORRNON CN ON CNE.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = CN.CORRECTIONSTATUS
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
				SELECT CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO,CCD.CHALLANERETURNID, CCD.SECTIONID 
				INTO #CORRCHALLAN
				FROM CORRCHALLANDETAIL CCD WITH(NOLOCK) 
				WHERE CCD.BRANCHID = @BRANCHID AND CCD.FORMID=@FORMID AND CCD.[QUARTER] = @QUARTER AND CCD.CORRECTIONSTATUS = 1 
				SET @QUERY = 'SELECT * INTO #FORM2627EXISTINGDEDS FROM
					(
						SELECT ROW_NUMBER() OVER(ORDER BY DEDUCTIONSERIALNO) AS ROWNO,CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,
									CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,CNE.NAME, CNE.CODE,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.LASTPANREFERENCE, 
									CDD.SECTIONID,TS.SECTIONNAME,CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,
									CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,
									CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,
									CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,CC.CHALLANTOTAL,CC.CHALLANSERIALNO,
									CDD.CERTNO, CDD.ACKNO,CDD.REMITTANCEID, CDD.COUNTRYID,ISNULL(CDD.TDSRATEASPER,'''')TDSRATEASPER, 0 AS ISSENIORCITIZEN, 0 AS GENDER,CC.SECTIONID AS CHALLANSECTION,
									ISNULL(CDD.EMAILDED,'''') EMAILDED, ISNULL(CDD.CONTACTNODED,'''') CONTACTNODED, ISNULL(CDD.ADDRESSDED,'''') ADDRESSDED, ISNULL(CDD.IDENTNUMDED,'''') IDENTNUMDED,
									ISNULL(CDD.REMARKS1,'''') REMARKS1,ISNULL(CDD.REMARKS3,'''') REMARKS3 
						FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) 
							INNER JOIN #CORRNONEMPLOYEE CNE ON CDD.DEDUCTEESERIALNO = CNE.DEDUCTEESERIALNO
							INNER JOIN #CORRCHALLAN CC ON CC.CHALLANERETURNID = CDD.CHALLANERETURNID
							INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID  
						WHERE CDD.CORRECTIONSTATUS = 1 AND BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +' AND CDD.FORMID = '+CAST(@FORMID AS VARCHAR) +' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR)
		 END
	  ELSE
		 BEGIN  
			SET @QUERY  = 'SELECT ROWNO = IDENTITY(INT,1,1),* INTO #FORM2627EXISTINGDEDS  
				   FROM  
				   (  
						SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,
							-1 AS DEDUCTIONERETURNID,NE.SERIALNO AS DEDUCTEESERIALNO,
							CN.NAME+''(''+CAST(NE.SERIALNO AS VARCHAR)+'')'' AS NAME,CN.CODE,DD.SECTIONID,
							TS.SECTIONNAME,CN.PAN,CN.PAN AS LASTPAN,CN.PANREFERENCE,CN.PANREFERENCE AS LASTPANREFERENCE,
							DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.TOTALDEDUCTED AS LASTTOTALDEDUCTED,
							DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE,DD.INCOMETAX,DD.INCOMETAX AS LASTINCOMETAX,
							DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGE AS LASTSURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,
							DD.EDUCATIONCESS AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,-1 AS CHALLANERETURNID,
							DD.ISBOOKENTRY,DD.ISGROSSINGUP, 7 AS CORRECTIONSTATUS,CD.CHALLANTOTAL,CD.SERIALNO AS CHALLANSERIALNO,
							DD.CERTNO, DD.ACKNO,DD.REMITTANCEID, DD.COUNTRYID,ISNULL(DD.TDSRATEASPER,'''' )TDSRATEASPER, 
							0 AS ISSENIORCITIZEN, 0 AS GENDER,CD.SECTIONID AS CHALLANSECTION,
							ISNULL(DD.EMAILDED,'''') EMAILDED, ISNULL(DD.CONTACTNODED,'''') CONTACTNODED, 
							ISNULL(DD.ADDRESSDED,'''') ADDRESSDED, ISNULL(DD.IDENTNUMDED,'''') IDENTNUMDED,
							ISNULL(DD.REMARKS1,'''') REMARKS1, ISNULL(DD.REMARKS3,'''') REMARKS3 
						FROM DEDUCTIONDETAIL DD 
							INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
							INNER JOIN DEDUCTEE CN WITH(NOLOCK) ON DD.DEDUCTEEID = CN.DEDUCTEEID
							INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON CN.DEDUCTEEID = NE.DEDUCTEEID
							INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
							INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
						WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND DD.FORMID=' + CAST(@FORMID AS VARCHAR) +' AND 
							 DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND TOTALDEDUCTED > 0
					UNION
						SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,
							-1 AS DEDUCTIONERETURNID,NE.SERIALNO AS DEDUCTEESERIALNO,
							CN.NAME+''(''+CAST(NE.SERIALNO AS VARCHAR)+'')'' AS NAME,CN.CODE,
							DD.SECTIONID,TS.SECTIONNAME,CN.PAN,CN.PAN AS LASTPAN,CN.PANREFERENCE,
							CN.PANREFERENCE AS LASTPANREFERENCE,DD.PAYMENTMADE,DD.PAYMENTDATE,
							DD.TOTALDEDUCTED,DD.TOTALDEDUCTED AS LASTTOTALDEDUCTED,DD.TAXRATE,
							DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE,DD.INCOMETAX,DD.INCOMETAX AS LASTINCOMETAX,
							DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGE AS LASTSURCHARGE,DD.SURCHARGERATE,
							DD.EDUCATIONCESS,DD.EDUCATIONCESS AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,
							DD.NONDEDREASON,-1 AS CHALLANERETURNID,DD.ISBOOKENTRY,DD.ISGROSSINGUP, 7 AS CORRECTIONSTATUS,
							0 AS CHALLANTOTAL,-1 AS CHALLANSERIALNO,DD.CERTNO, DD.ACKNO,DD.REMITTANCEID, DD.COUNTRYID, 
							ISNULL(DD.TDSRATEASPER,'''' )TDSRATEASPER, 0 AS ISSENIORCITIZEN, 0 AS GENDER, -1 AS CHALLANSECTION,
							ISNULL(DD.EMAILDED,'''') EMAILDED, ISNULL(DD.CONTACTNODED,'''') CONTACTNODED, 
							ISNULL(DD.ADDRESSDED,'''') ADDRESSDED, ISNULL(DD.IDENTNUMDED,'''') IDENTNUMDED,
							ISNULL(DD.REMARKS1,'''') REMARKS1,ISNULL(DD.REMARKS3,'''') REMARKS3  
				  FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
						INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
						INNER JOIN DEDUCTEE CN WITH(NOLOCK) ON DD.DEDUCTEEID = CN.DEDUCTEEID
						INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON CN.DEDUCTEEID = NE.DEDUCTEEID
				  WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND DD.FORMID=' + CAST(@FORMID AS VARCHAR) +' AND 
							 DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND TOTALDEDUCTED = 0 ' 
		 END  
	  IF(@SECTIONID <> -1)
			SET @QUERY = @QUERY  + '  AND TS.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR)
	  IF(@NAME <> '')
			SET @QUERY = @QUERY  + '  AND NAME LIKE ''' + @NAME + '%''';  
			SET @QUERY = @QUERY  +  ')T; SELECT * FROM #FORM2627EXISTINGDEDS WHERE ROWNO > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ROWNO < ' + CAST(@LASTREC AS VARCHAR)
		EXEC SP_EXECUTESQL @QUERY
		--PRINT @QUERY
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM2627EXISTINGDEDSCOUNT')
DROP PROCEDURE USP_TDS_GETFORM2627EXISTINGDEDSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETFORM2627EXISTINGDEDSCOUNT]   
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @SECTIONID INT,  
 @NAME VARCHAR(75),  
 @SHOWALL BIT = 1  
AS  
 BEGIN  
  DECLARE @SQLQUERY NVARCHAR(MAX);  
  DECLARE @TABLENAME VARCHAR(25); 
  SET @TABLENAME = CASE WHEN @FORMID = 1 THEN 'CORREMPLOYEE' ELSE 'CORRNONEMPLOYEE' END   
  IF(@SHOWALL = 0)  
    BEGIN  
   SET @SQLQUERY='SELECT COUNT(CDD.DEDUCTIONSERIALNO)   
        FROM   CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)   
        INNER JOIN   
        (  
       SELECT CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,CNE.DEDUCTEEID,CNE.DEDUCTEESERIALNO,CNE.CODE   
        FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)  
        INNER JOIN   
        (  
         SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS  
           FROM  CORRNONEMPLOYEE  WITH(NOLOCK)    
         WHERE BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND  
             QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '   
         GROUP BY DEDUCTEESERIALNO  
        ) UNE   
       ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS   
       WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
           QUARTER = ' + CAST(@QUARTER AS VARCHAR) +'   
      ) CN   
      ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND CN.BRANCHID = CDD.BRANCHID AND CN.FORMID = CDD.FORMID AND CN.QUARTER = CDD.QUARTER         
         WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND   
           CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND CDD.CORRECTIONSTATUS = 1';  
    END  
  ELSE  
    BEGIN  
   SET @SQLQUERY = 'SELECT COUNT(DISTINCT DD.DEDUCTIONID)  FROM DEDUCTIONDETAIL DD  
          INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID  
          INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
          INNER JOIN   
          (  
           SELECT DD.DEDUCTIONID, DEDUCTEEID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
            INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID  
            INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID  
            WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND   
               DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +' AND DD.TOTALDEDUCTED > 0  
              UNION  
           SELECT DEDUCTIONID, DEDUCTEEID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
            WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND   
               DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +' AND DD.TOTALDEDUCTED = 0  
             EXCEPT  
              SELECT DD.DEDUCTIONID, DEDUCTEEID FROM CORRDEDUCTIONDETAIL DD WITH(NOLOCK)  
           INNER JOIN ' + CAST(@TABLENAME AS VARCHAR) + ' T ON T.DEDUCTEESERIALNO = DD.DEDUCTEESERIALNO AND T.BRANCHID = DD.BRANCHID AND T.FORMID = DD.FORMID AND T.QUARTER = DD.QUARTER                              
            WHERE DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND   
                DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) +' AND DD.CORRECTIONSTATUS = 7  
          )DE  
          ON DD.DEDUCTIONID = DE.DEDUCTIONID  
          WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)   
    END  
  IF(@SECTIONID <> -1)  
   BEGIN  
    SET @SQLQUERY=@SQLQUERY + ' AND SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);  
   END  
  IF(@NAME <> '')  
   BEGIN  
    SET @SQLQUERY=@SQLQUERY + ' AND NAME LIKE '''+@NAME+'%''';  
   END  
  EXEC SP_EXECUTESQL @SQLQUERY;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetForm2627TDSPaymentRegister')
DROP PROCEDURE USP_TDS_GetForm2627TDSPaymentRegister
GO
CREATE PROCEDURE USP_TDS_GetForm2627TDSPaymentRegister
AS
BEGIN
	SELECT D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME,PAN,NE.SERIALNO,  
     TS.SECTIONNAME,DD.SECTIONID,  
     DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,  
     CD.CHALLANPAIDDATE,CD.CHEQUENO,RB.BSRCODE + REPLACE(CONVERT(VARCHAR,CD.CHALLANPAIDDATE,103),'/','') + CD.BANKCHALLANNO AS CIN,  
     RB.BRANCHNAME,ISNULL(D.REFERENCENO,'') AS REFERENCENO  
 FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) 
		 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID  
         INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
         INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID  
         INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID  
         INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DCL.CHALLANID = CD.CHALLANID  
         LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID;
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetForm2627UpdatedDedsCount')
DROP PROCEDURE USP_TDS_GetForm2627UpdatedDedsCount
GO
CREATE PROCEDURE USP_TDS_GetForm2627UpdatedDedsCount
 @BRANCHID INT,      
 @FORMID INT,      
 @QUARTER INT,      
 @UPDATEITEMS VARCHAR(MAX),      
 @DELETEITEMS VARCHAR(MAX),      
 @EXCLUDEDITEMS VARCHAR(MAX),      
 @UNLINKEDDEDITEMS VARCHAR(MAX),
 @SERIALNO INT = 0,
 @SECTIONID VARCHAR(MAX) = '',   
 @NAME VARCHAR(75) = '', 
 @PAN INT = -1,
 @AMTFROM NUMERIC(13,2) = 0,                                  
 @AMTTO NUMERIC(13,2) = 0,                                  
 @PAIDDATEFROM SMALLDATETIME = NULL,                                  
 @PAIDDATETO SMALLDATETIME = NULL,                                  
 @TAXAMTFROM NUMERIC(13,2) = 0,                                  
 @TAXAMTTO NUMERIC(13,2) = 0,                                  
 @TAXDATEFROM SMALLDATETIME = NULL,                                  
 @TAXDATETO SMALLDATETIME = NULL,
 @NONDEDREASON INT = -1         
AS      
	BEGIN
		SET NOCOUNT ON
		DECLARE @QUERY NVARCHAR(MAX);      
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */      
		DECLARE @FIRSTREC INT, @LASTREC INT
		CREATE TABLE #DEDCHA(BRANCHID INT,DEDUCTIONID INT,CHALLANID INT);   		
		IF(@UNLINKEDDEDITEMS <> '' OR @EXCLUDEDITEMS <> '')
			INSERT INTO #DEDCHA SELECT BRANCHID,DEDUCTIONID,CHALLANID FROM DEDCHALINK WHERE BRANCHID = @BRANCHID
		SELECT * INTO #UPDATEITEMS FROM UDF_TDS_SPLITSTRING(@UPDATEITEMS,','); 
		SELECT * 
		INTO #CORRDEDUCTIONDETAIL
		FROM CORRDEDUCTIONDETAIL 
		WHERE BRANCHID = @BRANCHID AND FORMID =@FORMID AND [QUARTER]=@QUARTER 
		SELECT CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,CNE.DEDUCTEESERIALNO,
			CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.LASTPANREFERENCE,CNE.CODE
		INTO #CORRNONEMP  
		FROM CORRNONEMPLOYEE CNE  WITH(NOLOCK)     
				INNER JOIN      
					(      
						SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS      
						FROM CORRNONEMPLOYEE  WITH(NOLOCK)  
						WHERE     
							BRANCHID = @BRANCHID AND     
							FORMID = @FORMID AND     
							QUARTER = @QUARTER  
						GROUP BY DEDUCTEESERIALNO      
					) UNE     
					ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND     
						CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS    
		WHERE 
			BRANCHID = @BRANCHID AND     
			FORMID = @FORMID AND     
			QUARTER = @QUARTER
		SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID 
		INTO #CORRCHADET
		FROM CORRCHALLANDETAIL WITH(NOLOCK)       
		WHERE  CORRECTIONSTATUS = 1 AND     
			BRANCHID = @BRANCHID AND     
			FORMID = @FORMID AND     
			QUARTER = @QUARTER AND 
			CHALLANERETURNID NOT IN    
								(    
									SELECT CHALLANERETURNID 
									FROM CORRCHALLANDETAIL     
									WHERE CORRECTIONSTATUS <> 1 AND     
										BRANCHID = @BRANCHID AND     
										FORMID = @FORMID AND     
										QUARTER = @QUARTER     
								)     
		UNION      
		SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID     
		FROM  CORRCHALLANDETAIL  WITH(NOLOCK)       
		WHERE  CORRECTIONSTATUS <> 1 AND     
			BRANCHID = @BRANCHID AND     
			FORMID = @FORMID AND     
			QUARTER = @QUARTER           
		SET @QUERY = 'SELECT * INTO #FORM2627UPDATEDDEDS      
					  FROM (      
							SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,
								CDD.DEDUCTEESERIALNO,CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,  
								CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,CN.CODE,CDD.SECTIONID,    
								TS.SECTIONNAME,  CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,
								CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX, 
								CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,
								CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,
								CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO ,
								0 AS ISSENIORCITIZEN,0 AS GENDER, ISNULL(CDD.CERTNO, '''')CERTNO,ISNULL(CDD.ACKNO,'''')ACKNO,
								ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER,ISNULL(CDD.COUNTRYID,-1)COUNTRYID, 
								ISNULL(CDD.REMITTANCEID,-1) REMITTANCEID, CCD.SECTIONID AS CHALLANSECTION,
								ISNULL(CDD.EMAILDED,'''') EMAILDED,ISNULL(CDD.CONTACTNODED,'''') CONTACTNODED, 
								ISNULL(CDD.ADDRESSDED,'''') ADDRESSDED, ISNULL(CDD.IDENTNUMDED,'''') IDENTNUMDED 
							FROM #CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)     
								INNER JOIN #CORRNONEMP CN     
									ON  CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND 
										CN.BRANCHID = CDD.BRANCHID AND 
										CN.FORMID = CDD.FORMID AND 
										CN.QUARTER = CDD.QUARTER      
								INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID      
								LEFT JOIN #CORRCHADET CCD     
									ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID      
							WHERE  
								CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND     
								CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND     
								CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND     
								(CDD.CORRECTIONSTATUS = 2 OR CDD.CORRECTIONSTATUS = 4 
									OR CDD.CORRECTIONSTATUS = 5 OR CDD.CORRECTIONSTATUS = 7)
							';   
		IF(@UPDATEITEMS <> '')      
			BEGIN      
				SET @QUERY = @QUERY + ' UNION       
							SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,
								CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,    
								CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,
								CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,CN.CODE,
								CDD.SECTIONID,TS.SECTIONNAME, CDD.PAYMENTMADE,CDD.PAYMENTDATE,
								CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,
								CDD.DEDUCTEDDATE, CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,
								CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,
								CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,
								CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,2 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,
								CCD.CHALLANSERIALNO ,0 AS ISSENIORCITIZEN,0 AS GENDER, ISNULL(CDD.CERTNO, '''')CERTNO,
								ISNULL(CDD.ACKNO,'''')ACKNO, ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER,
								ISNULL(CDD.COUNTRYID,-1)COUNTRYID, ISNULL(CDD.REMITTANCEID,-1) REMITTANCEID,
								CCD.SECTIONID AS CHALLANSECTION,ISNULL(CDD.EMAILDED,'''') EMAILDED,
								ISNULL(CDD.CONTACTNODED,'''') CONTACTNODED, ISNULL(CDD.ADDRESSDED,'''') ADDRESSDED,
								ISNULL(CDD.IDENTNUMDED,'''') IDENTNUMDED    
							FROM #CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)     
								INNER JOIN #CORRNONEMP CN 
									ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND 
										CN.BRANCHID = CDD.BRANCHID AND 
										CN.FORMID = CDD.FORMID AND 
										CN.QUARTER = CDD.QUARTER      
								INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID      
								LEFT JOIN #CORRCHADET CCD 
									ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID 
								INNER JOIN #UPDATEITEMS UI ON UI.DATA = CDD.DEDUCTIONSERIALNO      
							WHERE  
								CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND     
								CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND     
								CDD.[QUARTER]=' + CAST(@QUARTER AS VARCHAR)+ ' AND     
								CDD.CORRECTIONSTATUS = 1';                            
			END       
		IF(@DELETEITEMS <> '')      
			BEGIN      
				SET @QUERY = @QUERY + ' UNION       
							SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,
								CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,    
								CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,
								CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,CN.CODE,    
								CDD.SECTIONID,TS.SECTIONNAME, CDD.PAYMENTMADE,CDD.PAYMENTDATE,
								CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,
								CDD.DEDUCTEDDATE, CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,
								CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,
								CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,
								CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,4 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,
								CCD.CHALLANSERIALNO ,0  AS ISSENIORCITIZEN,0 AS GENDER, ISNULL(CDD.CERTNO, '''')CERTNO,
								ISNULL(CDD.ACKNO,'''')ACKNO, ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER,
								ISNULL(CDD.COUNTRYID,-1)COUNTRYID, ISNULL(CDD.REMITTANCEID,-1) REMITTANCEID,
								CCD.SECTIONID AS CHALLANSECTION,ISNULL(CDD.EMAILDED,'''') EMAILDED,
								ISNULL(CDD.CONTACTNODED,'''') CONTACTNODED, ISNULL(CDD.ADDRESSDED,'''') ADDRESSDED,
								ISNULL(CDD.IDENTNUMDED,'''') IDENTNUMDED    
							FROM #CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)      
							INNER JOIN #CORRNONEMP CN     
								ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND 
									CN.BRANCHID = CDD.BRANCHID AND 
									CN.FORMID = CDD.FORMID AND 
									CN.QUARTER = CDD.QUARTER      
							INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID      
							LEFT JOIN #CORRCHADET CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID      
						WHERE  
							CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND     
							CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND     
							CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND    
							CN.[QUARTER] = ' +CAST(@QUARTER AS VARCHAR) + ' AND     
							CDD.CORRECTIONSTATUS = 1 AND 
							CDD.DEDUCTIONSERIALNO IN (' + CAST(@DELETEITEMS AS VARCHAR(MAX))+')'      
			END      
		IF @EXCLUDEDITEMS <> ''      
			BEGIN      
				SET @QUERY = @QUERY + 'UNION      
							SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,
								DD.ERETURNID,NE.SERIALNO AS DEDUCTEESERIALNO,D.NAME,D.PAN,'''' AS LASTPAN,    
								D.PANREFERENCE,'''' AS LASTPANREFERENCE,NE.DEDUCTEECODE,DD.SECTIONID,TS.SECTIONNAME,  
								DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,    
								DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE, DD.INCOMETAX,0 AS LASTINCOMETAX,
								DD.INCOMETAXRATE,DD.SURCHARGE,0 AS LASTSURCHARGE,DD.SURCHARGERATE,    
								DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,
								CD.SERIALNO AS CHALSERIALNO,DD.ISBOOKENTRY,DD.ISGROSSINGUP,    
								5 AS CORRECTIONSTATUS,CD.CHALLANTOTAL,CD.SERIALNO ,0 AS ISSENIORCITIZEN,
								0 AS GENDER, ISNULL(DD.CERTNO, '''')CERTNO,ISNULL(DD.ACKNO,'''')ACKNO, 
								ISNULL(DD.TDSRATEASPER,'' '')TDSRATEASPER,ISNULL(DD.COUNTRYID,-1)COUNTRYID, 
								ISNULL(DD.REMITTANCEID,-1) REMITTANCEID, CD.SECTIONID AS CHALLANSECTION,
								ISNULL(DD.EMAILDED,'''') EMAILDED, ISNULL(DD.CONTACTNODED,'''') CONTACTNODED,
								ISNULL(DD.ADDRESSDED,'''') ADDRESSDED, ISNULL(DD.IDENTNUMDED,'''') IDENTNUMDED      
							FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
								INNER JOIN DEDUCTEE D  WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID      
								INNER JOIN NONEMPLOYEE NE  WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID      
								INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID         
								LEFT JOIN #DEDCHA DL  WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID      
								LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID      
							WHERE  
								DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND     
								DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND     
								DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+ ' AND     
								DD.SERIALNO IN (' + CAST(@EXCLUDEDITEMS AS VARCHAR(MAX))+')';      
			END       
		IF @UNLINKEDDEDITEMS <> ''      
			BEGIN      
				SET @QUERY = @QUERY + 'UNION      
				SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,
					DD.ERETURNID,NE.SERIALNO AS DEDUCTEESERIALNO,D.NAME,D.PAN,'''' AS LASTPAN,    
					D.PANREFERENCE,'''' AS LASTPANREFERENCE,NE.DEDUCTEECODE,DD.SECTIONID,
					TS.SECTIONNAME, DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,    
					DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE, DD.INCOMETAX,0 AS LASTINCOMETAX,
					DD.INCOMETAXRATE,DD.SURCHARGE,0 AS LASTSURCHARGE,DD.SURCHARGERATE,    
					DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,
					CD.SERIALNO AS CHALSERIALNO,DD.ISBOOKENTRY,DD.ISGROSSINGUP,5 AS CORRECTIONSTATUS,
					CD.CHALLANTOTAL,CD.SERIALNO,0 AS ISSENIORCITIZEN,,0 AS GENDER, 
					ISNULL(CDD.CERTNO, '''')CERTNO,ISNULL(CDD.ACKNO,'''')ACKNO,
					ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER, ISNULL(CDD.COUNTRYID,-1)COUNTRYID, 
					ISNULL(CDD.REMITTANCEID,-1) REMITTANCEID, CD.SECTIONID AS CHALLANSECTION,
					ISNULL(DD.EMAILDED,'''') EMAILDED, ISNULL(DD.CONTACTNODED,'''') CONTACTNODED, 
					ISNULL(DD.ADDRESSDED,'''') ADDRESSDED, ISNULL(DD.IDENTNUMDED,'''') IDENTNUMDED            
				FROM   DEDUCTIONDETAIL DD  WITH(NOLOCK)     
					INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID      
					INNER JOIN NONEMPLOYEE NE   WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID      
					INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID         
					LEFT JOIN #DEDCHA DL  WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DL.BRANCHID=D.BRANCHID      
					LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID      
				WHERE  
					DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND     
					DD.NONDEDREASON=0 AND     
					DD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND     
					DL.DEDUCTIONID IS NULL'+ ' AND     
					DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+ ' AND     
					DD.SERIALNO IN (' + CAST(@UNLINKEDDEDITEMS AS VARCHAR(MAX))+')';      
			END  
		SET @QUERY = @QUERY + ') TEMP ORDER BY DEDUCTIONSERIALNO;'
		SET @QUERY = @QUERY + ' SELECT ID = IDENTITY(INT,1,1),* 
							INTO #FORM2627TEMP
							FROM #FORM2627UPDATEDDEDS 
							WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
		IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND NAME LIKE ''%' + @NAME + '%''';                                  
			END    
		IF(@SERIALNO <> 0)  
			BEGIN   
				SET @QUERY = @QUERY + ' AND DEDUCTIONSERIALNO = ' + CAST(@SERIALNO AS VARCHAR)  
			END
		IF(@PAN = 1)              
			BEGIN              
				SET @QUERY = @QUERY + ' AND PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')'               
			END                
		ELSE IF(@PAN = 2)              
			BEGIN              
				SET @QUERY = @QUERY + ' AND PAN = ''PANAPPLIED'''              
			END                
		ELSE IF(@PAN = 3)              
			BEGIN              
				SET @QUERY = @QUERY + ' AND PAN = ''PANINVALID'''              
			END                
		ELSE IF(@PAN = 4)              
			BEGIN              
				SET @QUERY = @QUERY + ' AND PAN = ''PANNOTAVBL'''              
			END                
		IF(@SECTIONID <> '')                                  
			BEGIN    
				SET @QUERY = @QUERY + ' AND SECTIONNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS NVARCHAR(MAX))+''','',''))'                          
			END                                
		IF(@AMTFROM <> 0 OR @AMTTO <> 0)                                  
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));      
			END                  
		IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)                                  
			BEGIN                   
				SET @QUERY = @QUERY + ' AND PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';                                  
			END                         
		IF(@TAXAMTFROM <> 0 OR @TAXAMTTO <> 0)                                  
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR) + ' AND ' + CAST(@TAXAMTTO AS VARCHAR);                                  
			END                                   
		IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)                                  
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDATETO AS VARCHAR ) + ''''                                  
			END                                           
		IF(@NONDEDREASON <> -1)  
			BEGIN  
				SET @QUERY = @QUERY + ' AND NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)       
			END           						     
		SET @QUERY = @QUERY + ' SELECT COUNT(DEDUCTIONSERIALNO) AS DEDUCTIONSERIALNO FROM #FORM2627TEMP';  
		EXEC SP_EXECUTESQL @QUERY; 
		IF OBJECT_ID('TEMPDB..#CORRDEDUCTIONDETAIL') IS NOT NULL  
			DROP TABLE #CORRDEDUCTIONDETAIL    
		IF OBJECT_ID('TEMPDB..#CORRNONEMP') IS NOT NULL  
			DROP TABLE #CORRNONEMP  
		IF OBJECT_ID('TEMPDB..#CORRCHADET') IS NOT NULL  
			DROP TABLE #CORRCHADET  
		IF OBJECT_ID('TEMPDB..#DEDCHA') IS NOT NULL  
			DROP TABLE #DEDCHA
		SET NOCOUNT OFF
	END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM2627UPDATEDDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETFORM2627UPDATEDDEDUCTIONS
GO
CREATE PROCEDURE USP_TDS_GETFORM2627UPDATEDDEDUCTIONS
 @STARTROW INT,      
 @PAGESIZE INT,      
 @BRANCHID INT,      
 @FORMID INT,      
 @QUARTER INT,      
 @UPDATEITEMS VARCHAR(MAX),       
 @DELETEITEMS VARCHAR(MAX),      
 @EXCLUDEDITEMS VARCHAR(MAX),      
 @UNLINKEDDEDITEMS VARCHAR(MAX),
 @SERIALNO INT = 0,
 @SECTIONID VARCHAR(MAX) = '',   
 @NAME VARCHAR(75) = '', 
 @PAN INT = -1,
 @AMTFROM NUMERIC(13,2) = 0,                                  
 @AMTTO NUMERIC(13,2) = 0,                                  
 @PAIDDATEFROM SMALLDATETIME = NULL,                                  
 @PAIDDATETO SMALLDATETIME = NULL,                                  
 @TAXAMTFROM NUMERIC(13,2) = 0,                                  
 @TAXAMTTO NUMERIC(13,2) = 0,                                  
 @TAXDATEFROM SMALLDATETIME = NULL,                                  
 @TAXDATETO SMALLDATETIME = NULL,
 @NONDEDREASON INT = -1     
AS      
	BEGIN
		SET NOCOUNT ON
		DECLARE @QUERY NVARCHAR(MAX);      
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */      
		DECLARE @FIRSTREC INT, @LASTREC INT      
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE      
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		CREATE TABLE #DEDCHA(BRANCHID INT,DEDUCTIONID INT,CHALLANID INT);   		
		IF(@UNLINKEDDEDITEMS <> '' OR @EXCLUDEDITEMS <> '')
			INSERT INTO #DEDCHA SELECT BRANCHID,DEDUCTIONID,CHALLANID FROM DEDCHALINK WHERE BRANCHID = @BRANCHID
		SELECT * INTO #UPDATEITEMS FROM UDF_TDS_SPLITSTRING(@UPDATEITEMS,','); 
		SELECT * 
		INTO #CORRDEDUCTIONDETAIL
		FROM CORRDEDUCTIONDETAIL 
		WHERE BRANCHID = @BRANCHID AND FORMID =@FORMID AND [QUARTER]=@QUARTER 
		SELECT CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,CNE.DEDUCTEESERIALNO,
			CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.LASTPANREFERENCE,CNE.CODE
		INTO #CORRNONEMP  
		FROM CORRNONEMPLOYEE CNE  WITH(NOLOCK)     
				INNER JOIN      
					(      
						SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS      
						FROM CORRNONEMPLOYEE  WITH(NOLOCK)  
						WHERE     
							BRANCHID = @BRANCHID AND     
							FORMID = @FORMID AND     
							QUARTER = @QUARTER  
						GROUP BY DEDUCTEESERIALNO      
					) UNE     
					ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND     
						CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS    
		WHERE 
			BRANCHID = @BRANCHID AND     
			FORMID = @FORMID AND     
			QUARTER = @QUARTER
	SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID 
	INTO #CORRCHADET
	FROM CORRCHALLANDETAIL WITH(NOLOCK)       
	WHERE  CORRECTIONSTATUS = 1 AND     
		BRANCHID = @BRANCHID AND     
		FORMID = @FORMID AND     
		QUARTER = @QUARTER AND 
		CHALLANERETURNID NOT IN    
							(    
								SELECT CHALLANERETURNID 
								FROM CORRCHALLANDETAIL     
								WHERE CORRECTIONSTATUS <> 1 AND     
									BRANCHID = @BRANCHID AND     
									FORMID = @FORMID AND     
									QUARTER = @QUARTER     
							)     
	UNION      
	SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL, SECTIONID     
	FROM  CORRCHALLANDETAIL  WITH(NOLOCK)       
	WHERE  CORRECTIONSTATUS <> 1 AND     
		BRANCHID = @BRANCHID AND     
		FORMID = @FORMID AND     
		QUARTER = @QUARTER           
		SET @QUERY = 'SELECT * INTO #FORM2627UPDATEDDEDS      
					  FROM (      
								SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,
									CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,
									CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,  
									CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,CN.CODE,
									CDD.SECTIONID,TS.SECTIONNAME,  CDD.PAYMENTMADE,CDD.PAYMENTDATE,
									CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,
									CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX, CDD.INCOMETAXRATE,CDD.SURCHARGE,
									CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,    
									CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,
									CDD.ISGROSSINGUP,CDD.CORRECTIONSTATUS,CCD.CHALLANTOTAL,    
									CCD.CHALLANSERIALNO ,0 AS ISSENIORCITIZEN,0 AS GENDER, ISNULL(CDD.CERTNO, '''')CERTNO,
									ISNULL(CDD.ACKNO,'''')ACKNO, ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER,
									ISNULL(CDD.COUNTRYID,-1)COUNTRYID, ISNULL(CDD.REMITTANCEID,-1) REMITTANCEID, 
									CCD.SECTIONID AS CHALLANSECTION,ISNULL(CDD.EMAILDED,'''') EMAILDED,
									ISNULL(CDD.CONTACTNODED,'''') CONTACTNODED, ISNULL(CDD.ADDRESSDED,'''') ADDRESSDED, 
									ISNULL(CDD.IDENTNUMDED,'''') IDENTNUMDED, 
									ISNULL(CDD.REMARKS1,'''') REMARKS1, ISNULL(CDD.REMARKS3,'''') REMARKS3   
								FROM #CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)     
									INNER JOIN #CORRNONEMP CN 
										ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND 
											CN.BRANCHID = CDD.BRANCHID AND 
											CN.FORMID = CDD.FORMID AND 
											CN.QUARTER = CDD.QUARTER      
									INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID      
									LEFT JOIN #CORRCHADET CCD     
										ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID      
								WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND     
									CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND     
									CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND     
									(CDD.CORRECTIONSTATUS = 2 OR CDD.CORRECTIONSTATUS = 4 
										OR CDD.CORRECTIONSTATUS = 5 OR CDD.CORRECTIONSTATUS = 7)
								';            
		IF(@UPDATEITEMS <> '')      
			BEGIN      
				SET @QUERY = @QUERY + ' UNION       
						SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,
							CDD.DEDUCTEESERIALNO,CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,
							CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,CN.CODE,CDD.SECTIONID,TS.SECTIONNAME, 
							CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,
							CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE, CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,
							CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,
							CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,
							2 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO ,0 AS ISSENIORCITIZEN,0 AS GENDER, 
							ISNULL(CDD.CERTNO, '''')CERTNO,ISNULL(CDD.ACKNO,'''')ACKNO, ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER,
							ISNULL(CDD.COUNTRYID,-1)COUNTRYID, ISNULL(CDD.REMITTANCEID,-1) REMITTANCEID,
							CCD.SECTIONID AS CHALLANSECTION,ISNULL(CDD.EMAILDED,'''') EMAILDED,ISNULL(CDD.CONTACTNODED,'''') CONTACTNODED, 
							ISNULL(CDD.ADDRESSDED,'''') ADDRESSDED,ISNULL(CDD.IDENTNUMDED,'''') IDENTNUMDED, 
							ISNULL(CDD.REMARKS1,'''') REMARKS1, ISNULL(CDD.REMARKS3,'''') REMARKS3      
						FROM #CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)     
							INNER JOIN #CORRNONEMP CN 
								ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND 
									CN.BRANCHID = CDD.BRANCHID AND 
									CN.FORMID = CDD.FORMID AND 
									CN.QUARTER = CDD.QUARTER      
							INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID      
							LEFT JOIN #CORRCHADET CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID 
							INNER JOIN #UPDATEITEMS UI ON UI.DATA = CDD.DEDUCTIONSERIALNO    
						WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND     
							CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND     
							CDD.[QUARTER]=' + CAST(@QUARTER AS VARCHAR)+ ' AND     
							CDD.CORRECTIONSTATUS = 1';                            
			END       
		IF(@DELETEITEMS <> '')      
			BEGIN      
				SET @QUERY = @QUERY + ' UNION       
						SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,
							CDD.DEDUCTEESERIALNO,CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,
							CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,CN.CODE,CDD.SECTIONID,TS.SECTIONNAME, 
							CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,    
							CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE, CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,
							CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,
							CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,    
							CDD.ISGROSSINGUP,4 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO ,
							0  AS ISSENIORCITIZEN,0 AS GENDER, ISNULL(CDD.CERTNO, '''')CERTNO,ISNULL(CDD.ACKNO,'''')ACKNO, 
							ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER,ISNULL(CDD.COUNTRYID,-1)COUNTRYID, 
							ISNULL(CDD.REMITTANCEID,-1) REMITTANCEID,CCD.SECTIONID AS CHALLANSECTION,
							ISNULL(CDD.EMAILDED,'''') EMAILDED,ISNULL(CDD.CONTACTNODED,'''') CONTACTNODED, 
							ISNULL(CDD.ADDRESSDED,'''') ADDRESSDED,ISNULL(CDD.IDENTNUMDED,'''') IDENTNUMDED, 
							ISNULL(CDD.REMARKS1,'''') REMARKS1, ISNULL(CDD.REMARKS3,'''') REMARKS3      
						FROM #CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)      
							INNER JOIN #CORRNONEMP CN     
								ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND 
									CN.BRANCHID = CDD.BRANCHID AND 
									CN.FORMID = CDD.FORMID AND 
									CN.QUARTER = CDD.QUARTER      
							INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID      
							LEFT JOIN #CORRCHADET CCD 
								ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID      
						WHERE  
							CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND     
							CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND     
							CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND    
							CN.[QUARTER] = ' +CAST(@QUARTER AS VARCHAR) + ' AND     
							CDD.CORRECTIONSTATUS = 1 AND 
							CDD.DEDUCTIONSERIALNO IN (' + CAST(@DELETEITEMS AS VARCHAR(MAX))+')'      
			END      
		IF @EXCLUDEDITEMS <> ''      
			BEGIN      
				SET @QUERY = @QUERY + 'UNION      
						SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,DD.ERETURNID,
							NE.SERIALNO AS DEDUCTEESERIALNO,D.NAME,D.PAN,'''' AS LASTPAN,D.PANREFERENCE,
							'''' AS LASTPANREFERENCE,NE.DEDUCTEECODE,DD.SECTIONID,TS.SECTIONNAME,  DD.PAYMENTMADE,
							DD.PAYMENTDATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,DD.TAXRATE,DD.ISTAXINFOEDITABLE,
							DD.DEDUCTEDDATE, DD.INCOMETAX,0 AS LASTINCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,0 AS LASTSURCHARGE,
							DD.SURCHARGERATE,DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,
							CD.SERIALNO AS CHALSERIALNO,DD.ISBOOKENTRY,DD.ISGROSSINGUP,5 AS CORRECTIONSTATUS,CD.CHALLANTOTAL,
							CD.SERIALNO ,0 AS ISSENIORCITIZEN,0 AS GENDER, ISNULL(DD.CERTNO, '''')CERTNO,ISNULL(DD.ACKNO,'''')ACKNO, 
							ISNULL(DD.TDSRATEASPER,'' '')TDSRATEASPER,ISNULL(DD.COUNTRYID,-1)COUNTRYID, 
							ISNULL(DD.REMITTANCEID,-1) REMITTANCEID, CD.SECTIONID AS CHALLANSECTION,ISNULL(DD.EMAILDED,'''') EMAILDED, 
							ISNULL(DD.CONTACTNODED,'''') CONTACTNODED, ISNULL(DD.ADDRESSDED,'''') ADDRESSDED, 
							ISNULL(DD.IDENTNUMDED,'''') IDENTNUMDED, 
							ISNULL(CDD.REMARKS1,'''') REMARKS1, ISNULL(CDD.REMARKS3,'''') REMARKS3        
				FROM  DEDUCTIONDETAIL DD WITH(NOLOCK)     
					INNER JOIN DEDUCTEE D  WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID      
					INNER JOIN NONEMPLOYEE NE  WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID      
					INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID         
					LEFT JOIN #DEDCHA DL  WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID      
					LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID      
				WHERE  
					DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND     
					DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND     
					DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+ ' AND     
					DD.SERIALNO IN (' + CAST(@EXCLUDEDITEMS AS VARCHAR(MAX))+')';      
			END       
		IF @UNLINKEDDEDITEMS <> ''      
			BEGIN      
				SET @QUERY = @QUERY + 'UNION      
						SELECT DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDUCTIONSERIALNO,DD.ERETURNID,
							NE.SERIALNO AS DEDUCTEESERIALNO,D.NAME,D.PAN,'''' AS LASTPAN,D.PANREFERENCE,
							'''' AS LASTPANREFERENCE,NE.DEDUCTEECODE,DD.SECTIONID,TS.SECTIONNAME, DD.PAYMENTMADE,
							DD.PAYMENTDATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,DD.TAXRATE,DD.ISTAXINFOEDITABLE,
							DD.DEDUCTEDDATE, DD.INCOMETAX,0 AS LASTINCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,0 AS LASTSURCHARGE,
							DD.SURCHARGERATE,DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,
							CD.SERIALNO AS CHALSERIALNO,DD.ISBOOKENTRY,DD.ISGROSSINGUP,5 AS CORRECTIONSTATUS,CD.CHALLANTOTAL,
							CD.SERIALNO,0 AS ISSENIORCITIZEN,,0 AS GENDER, ISNULL(CDD.CERTNO, '''')CERTNO,ISNULL(CDD.ACKNO,'''')ACKNO,
							ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER, ISNULL(CDD.COUNTRYID,-1)COUNTRYID, 
							ISNULL(CDD.REMITTANCEID,-1) REMITTANCEID, CD.SECTIONID AS CHALLANSECTION,ISNULL(DD.EMAILDED,'''') EMAILDED, 
							ISNULL(DD.CONTACTNODED,'''') CONTACTNODED, ISNULL(DD.ADDRESSDED,'''') ADDRESSDED, 
							ISNULL(DD.IDENTNUMDED,'''') IDENTNUMDED, 
							ISNULL(CDD.REMARKS1,'''') REMARKS1, ISNULL(CDD.REMARKS3,'''') REMARKS3              
						FROM   DEDUCTIONDETAIL DD  WITH(NOLOCK)     
							INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID      
							INNER JOIN NONEMPLOYEE NE   WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID      
							INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID         
							LEFT JOIN #DEDCHA DL  WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DL.BRANCHID=D.BRANCHID      
							LEFT JOIN CHALLANDETAIL CD  WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID      
						WHERE  
							DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND     
							DD.NONDEDREASON=0 AND     
							DD.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND     
							DL.DEDUCTIONID IS NULL'+ ' AND     
							DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR)+ ' AND     
							DD.SERIALNO IN (' + CAST(@UNLINKEDDEDITEMS AS VARCHAR(MAX))+')';      
			END 
		SET @QUERY = @QUERY + ') TEMP ORDER BY DEDUCTIONSERIALNO;'
		SET @QUERY = @QUERY + ' SELECT ID = IDENTITY(INT,1,1),* 
							INTO #FORM2627TEMP
							FROM #FORM2627UPDATEDDEDS 
							WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
		IF(@NAME <> '')                                  
			BEGIN                  
				SET @QUERY = @QUERY + ' AND NAME LIKE ''%' + @NAME + '%''';                                  
			END    
		IF(@SERIALNO <> 0)  
			BEGIN   
				SET @QUERY = @QUERY + ' AND DEDUCTIONSERIALNO = ' + CAST(@SERIALNO AS VARCHAR)  
			END
		IF(@PAN = 1)              
			BEGIN              
				SET @QUERY = @QUERY + ' AND PAN NOT IN(''PANINVALID'', ''PANAPPLIED'',''PANNOTAVBL'')'               
			END                
		ELSE IF(@PAN = 2)              
			BEGIN              
				SET @QUERY = @QUERY + ' AND PAN = ''PANAPPLIED'''              
			END                
		ELSE IF(@PAN = 3)              
			BEGIN              
				SET @QUERY = @QUERY + ' AND PAN = ''PANINVALID'''              
			END    
		ELSE IF(@PAN = 4)              
			BEGIN              
				SET @QUERY = @QUERY + ' AND PAN = ''PANNOTAVBL'''              
			END                
		IF(@SECTIONID <> '')                                  
			BEGIN    
				SET @QUERY = @QUERY + ' AND SECTIONNAME IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@SECTIONID AS NVARCHAR(MAX))+''','',''))'                          
			END                                
		IF(@AMTFROM <> 0 OR @AMTTO <> 0)                                  
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND PAYMENTMADE BETWEEN ' + CAST(@AMTFROM AS VARCHAR(20)) + ' AND ' + CAST(@AMTTO AS VARCHAR(20));      
			END                  
		IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)                                  
			BEGIN                   
				SET @QUERY = @QUERY + ' AND PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';                                  
			END                         
		IF(@TAXAMTFROM <> 0 OR @TAXAMTTO <> 0)                                  
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND TOTALDEDUCTED BETWEEN ' + CAST(@TAXAMTFROM AS VARCHAR) + ' AND ' + CAST(@TAXAMTTO AS VARCHAR);                                  
			END                                   
		IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)                                  
			BEGIN                                  
				SET @QUERY = @QUERY + ' AND DEDUCTEDDATE BETWEEN ''' + CAST(@TAXDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@TAXDATETO AS VARCHAR ) + ''''                                  
			END                                           
		IF(@NONDEDREASON <> -1)  
			BEGIN  
				SET @QUERY = @QUERY + ' AND NONDEDREASON = ' + CAST(@NONDEDREASON AS VARCHAR)       
			END  
		SET @QUERY = @QUERY + 'ORDER BY DEDUCTIONSERIALNO;' 
		SET @QUERY = @QUERY + ' SELECT * 
						FROM #FORM2627TEMP 
						WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) 
						+ ' AND ID < ' + CAST(@LASTREC AS VARCHAR) 
						+ ' ORDER BY DEDUCTIONSERIALNO, CORRECTIONSTATUS';     
		--SET @QUERY = @QUERY + ' SELECT COUNT(ID) 
		--				FROM #FORM2627TEMP'; 
		EXEC SP_EXECUTESQL @QUERY;
		IF OBJECT_ID('TEMPDB..#CORRDEDUCTIONDETAIL') IS NOT NULL  
			DROP TABLE #CORRDEDUCTIONDETAIL    
		IF OBJECT_ID('TEMPDB..#CORRNONEMP') IS NOT NULL  
			DROP TABLE #CORRNONEMP  
		IF OBJECT_ID('TEMPDB..#CORRCHADET') IS NOT NULL  
			DROP TABLE #CORRCHADET  
		IF OBJECT_ID('TEMPDB..#DEDCHA') IS NOT NULL  
			DROP TABLE #DEDCHA
		SET NOCOUNT OFF
	END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM2627UPDATEDDEDUCTIONSDELETEBULK')
DROP PROCEDURE USP_TDS_GETFORM2627UPDATEDDEDUCTIONSDELETEBULK
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETFORM2627UPDATEDDEDUCTIONSDELETEBULK]
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DELETEITEMS VARCHAR(MAX)
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
			/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
	IF(@DELETEITEMS <> '')
			BEGIN
				SET @QUERY =  '
										SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,CN.CODE,CDD.SECTIONID,TS.SECTIONNAME,
											 CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,
											   CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,2 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO
										FROM   CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)  INNER JOIN
																	   (
																			SELECT CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,CNE.DEDUCTEESERIALNO,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.LASTPANREFERENCE,CNE.CODE
																			FROM   CORRNONEMPLOYEE CNE  WITH(NOLOCK)  INNER JOIN
																									   (
																											SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS
																											FROM   CORRNONEMPLOYEE  WITH(NOLOCK)  WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO
																									   ) UNE ON    CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '
																		) CN ON    CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND CN.BRANCHID = CDD.BRANCHID AND CN.FORMID = CDD.FORMID AND CN.QUARTER = CDD.QUARTER
																	   INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID=TS.SECTIONID
																       LEFT JOIN (SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL FROM CORRCHALLANDETAIL
																				  WHERE  CORRECTIONSTATUS = 1 AND CHALLANERETURNID NOT IN (SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL WHERE CORRECTIONSTATUS <> 1 AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND [QUARTER] = '+CAST(@QUARTER AS VARCHAR) + ') AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND [QUARTER] =' + CAST(@QUARTER AS VARCHAR)+'
																				  UNION
																				  SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL
																				  FROM   CORRCHALLANDETAIL WITH(NOLOCK)
																				  WHERE  CORRECTIONSTATUS <> 1 AND BRANCHID =' + CAST(@BRANCHID AS VARCHAR)+' AND FORMID='+CAST(@FORMID AS VARCHAR)+' AND [QUARTER]='+CAST(@QUARTER AS VARCHAR)+') CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID
										WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND CDD.[QUARTER]=' + CAST(@QUARTER AS VARCHAR)+ ' AND CDD.CORRECTIONSTATUS = 1 AND CDD.DEDUCTIONSERIALNO IN (' + CAST(@DELETEITEMS AS VARCHAR(MAX)) + ')';
			END
			EXEC SP_EXECUTESQL @QUERY;
			END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM2627UPDATEDDEDUCTIONSUPDATEDELETEBULK')
DROP PROCEDURE USP_TDS_GETFORM2627UPDATEDDEDUCTIONSUPDATEDELETEBULK
GO
CREATE PROCEDURE [USP_TDS_GETFORM2627UPDATEDDEDUCTIONSUPDATEDELETEBULK]    
 @STARTROW INT,    
 @PAGESIZE INT,    
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @UPDATEITEMS VARCHAR(MAX),    
 @DELETEITEMS VARCHAR(MAX)    
AS    
BEGIN    
  DECLARE @QUERY NVARCHAR(MAX);    
   /* DETERMINE THE FIRST RECORD AND LAST RECORD */    
  DECLARE @FIRSTREC INT, @LASTREC INT    
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE    
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);    
    SET @QUERY =  'SELECT ID = IDENTITY(INT,1,1),* INTO #FORM2627UPDATEDDEDS    
            FROM (    
     SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,  
         CDD.DEDUCTEESERIALNO,CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,  
         CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,CN.CODE,CDD.SECTIONID,TS.SECTIONNAME,    
         CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,  
         CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,  
         CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,  
         CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,  
         CDD.CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO,0 AS GENDER, 0 AS ISSENIORCITIZEN, ISNULL(CDD.CERTNO,'''')CERTNO,
         ISNULL(CDD.ACKNO,'''')ACKNO, ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER, ISNULL(CDD.COUNTRYID,-1)COUNTRYID, ISNULL(CDD.REMITTANCEID,-1)REMITTANCEID     
     FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)   
      INNER JOIN    
                  (    
      SELECT CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,CNE.DEDUCTEESERIALNO,CNE.PAN,CNE.LASTPAN,  
             CNE.PANREFERENCE,CNE.LASTPANREFERENCE,CNE.CODE    
       FROM CORRNONEMPLOYEE CNE  WITH(NOLOCK)   
     INNER JOIN    
                    (    
                        SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
                            FROM CORRNONEMPLOYEE WITH(NOLOCK)  
                        WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
         QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
                    ) UNE   
                    ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS   
                     WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
                           QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '    
                  ) CN   
                  ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND CN.BRANCHID = CDD.BRANCHID AND   
      CN.FORMID = CDD.FORMID AND CN.QUARTER = CDD.QUARTER    
                INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID    
                LEFT JOIN   
                (   
                  SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
       WHERE CORRECTIONSTATUS = 1 AND CHALLANERETURNID NOT IN   
       (  
         SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE CORRECTIONSTATUS <> 1 AND   
         BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + '   
         AND [QUARTER]='+CAST(@QUARTER AS VARCHAR) + '  
       ) AND BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID=' + CAST(@FORMID AS VARCHAR) + ' AND   
       [QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + '    
                  UNION    
                  SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
                    WHERE  CORRECTIONSTATUS <> 1 AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+' AND   
      FORMID = ' + CAST(@FORMID AS VARCHAR)+' AND [QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+'  
       ) CCD   
       ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
       WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
       CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + ' AND   
       (CDD.CORRECTIONSTATUS = 2 OR CDD.CORRECTIONSTATUS = 4 OR CDD.CORRECTIONSTATUS = 5)';    
IF(@UPDATEITEMS <> '')    
   BEGIN    
    SET @QUERY = @QUERY + ' UNION    
      SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,CDD.DEDUCTEESERIALNO,  
       CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,CN.PAN,CN.LASTPAN,CN.PANREFERENCE,  
       CN.LASTPANREFERENCE,CN.CODE,CDD.SECTIONID,TS.SECTIONNAME, CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,  
       CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,  
       CDD.INCOMETAXRATE,CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,  
       CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,  
       2 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO, 0 AS GENDER, 0 AS ISSENIORCITIZEN, ISNULL(CDD.CERTNO,'''')CERTNO,
         ISNULL(CDD.ACKNO,'''')ACKNO, ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER, ISNULL(CDD.COUNTRYID,-1)COUNTRYID, ISNULL(CDD.REMITTANCEID,-1)REMITTANCEID     
    FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)   
    INNER JOIN    
             (    
                  SELECT CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,CNE.DEDUCTEESERIALNO,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,  
       CNE.LASTPANREFERENCE,CNE.CODE    
     FROM CORRNONEMPLOYEE CNE  WITH(NOLOCK)    
     INNER JOIN    
                    (    
                         SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
                           FROM CORRNONEMPLOYEE WITH(NOLOCK)    
                         WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + '   
        AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
                    ) UNE   
                    ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS   
                    WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + '   
                          AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '    
              ) CN   
              ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND CN.BRANCHID = CDD.BRANCHID AND CN.FORMID = CDD.FORMID AND   
     CN.QUARTER = CDD.QUARTER    
            INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON CDD.SECTIONID=TS.SECTIONID    
            LEFT JOIN   
            (  
    SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
                      WHERE CORRECTIONSTATUS = 1 AND CHALLANERETURNID NOT IN   
                      (  
                        SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL   
       WHERE CORRECTIONSTATUS <> 1 AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND   
        FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND [QUARTER] = '+CAST(@QUARTER AS VARCHAR) + '  
       ) AND   
      BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND [QUARTER] =' + CAST(@QUARTER AS VARCHAR)+'    
                      UNION    
                      SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL    
                      FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
                      WHERE CORRECTIONSTATUS <> 1 AND BRANCHID =' + CAST(@BRANCHID AS VARCHAR)+' AND   
          FORMID='+CAST(@FORMID AS VARCHAR)+' AND [QUARTER]='+CAST(@QUARTER AS VARCHAR)+'  
    ) CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
             WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
     CDD.[QUARTER]=' + CAST(@QUARTER AS VARCHAR)+ ' AND CDD.CORRECTIONSTATUS = 1 AND   
     CDD.DEDUCTIONSERIALNO IN (' + CAST(@UPDATEITEMS AS VARCHAR(MAX)) + ')';    
   END    
IF(@DELETEITEMS <> '')    
   BEGIN    
    SET @QUERY = @QUERY + ' UNION    
                     SELECT CDD.BRANCHID,CDD.FORMID,CDD.[QUARTER],CDD.DEDUCTIONSERIALNO,CDD.DEDUCTIONERETURNID,  
       CDD.DEDUCTEESERIALNO,CN.NAME+''(''+CAST(CN.DEDUCTEESERIALNO AS VARCHAR)+'')'' AS NAME,  
       CN.PAN,CN.LASTPAN,CN.PANREFERENCE,CN.LASTPANREFERENCE,CN.CODE,CDD.SECTIONID,TS.SECTIONNAME,    
       CDD.PAYMENTMADE,CDD.PAYMENTDATE,CDD.TOTALDEDUCTED,CDD.LASTTOTALDEDUCTED,CDD.TAXRATE,  
       CDD.ISTAXINFOEDITABLE,CDD.DEDUCTEDDATE,CDD.INCOMETAX,CDD.LASTINCOMETAX,CDD.INCOMETAXRATE,  
       CDD.SURCHARGE,CDD.LASTSURCHARGE,CDD.SURCHARGERATE,CDD.EDUCATIONCESS,CDD.LASTEDUCATIONCESS,  
       CDD.EDUCATIONCESSRATE,CDD.NONDEDREASON,CDD.CHALLANERETURNID,CDD.ISBOOKENTRY,CDD.ISGROSSINGUP,  
       4 AS CORRECTIONSTATUS,CCD.CHALLANTOTAL,CCD.CHALLANSERIALNO,0 AS GENDER, 0 AS ISSENIORCITIZEN, ISNULL(CDD.CERTNO,'''')CERTNO,
         ISNULL(CDD.ACKNO,'''')ACKNO, ISNULL(CDD.TDSRATEASPER,'' '')TDSRATEASPER, ISNULL(CDD.COUNTRYID,-1)COUNTRYID, ISNULL(CDD.REMITTANCEID,-1)REMITTANCEID     
      FROM CORRDEDUCTIONDETAIL CDD  WITH(NOLOCK)    
      INNER JOIN    
                     (    
       SELECT CNE.BRANCHID,CNE.FORMID,CNE.QUARTER,CNE.NAME,CNE.DEDUCTEESERIALNO,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.LASTPANREFERENCE,CNE.CODE    
       FROM CORRNONEMPLOYEE CNE  WITH(NOLOCK)    
      INNER JOIN    
                        (    
                           SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS    
                           FROM CORRNONEMPLOYEE  WITH(NOLOCK)    
                           WHERE BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + '   
         AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' GROUP BY DEDUCTEESERIALNO    
                         ) UNE   
                         ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS   
                         WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND  
          QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '    
                     ) CN   
                     ON CDD.DEDUCTEESERIALNO = CN.DEDUCTEESERIALNO AND CN.BRANCHID = CDD.BRANCHID AND CN.FORMID = CDD.FORMID   
       AND CN.QUARTER = CDD.QUARTER    
                    INNER JOIN TAXSECTIONS TS   WITH(NOLOCK) ON CDD.SECTIONID = TS.SECTIONID    
                    LEFT JOIN   
                    (  
                       SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
      WHERE  CORRECTIONSTATUS = 1 AND CHALLANERETURNID NOT IN   
      (  
       SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL WHERE CORRECTIONSTATUS <> 1 AND   
        BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND   
        [QUARTER] = '+CAST(@QUARTER AS VARCHAR) + '  
          ) AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID='+CAST(@FORMID AS VARCHAR)+' AND   
       [QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+'    
                      UNION    
                      SELECT CHALLANERETURNID,CHALLANSERIALNO,CHALLANTOTAL    
                      FROM CORRCHALLANDETAIL  WITH(NOLOCK)    
                      WHERE CORRECTIONSTATUS <> 1 AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)+' AND   
      FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND [QUARTER] = ' + CAST(@QUARTER AS VARCHAR) + '  
        ) CCD ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID    
     WHERE  CDD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) +'   
   AND CDD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR)+ ' AND CN.[QUARTER] = ' +CAST(@QUARTER AS VARCHAR) + ' AND   
      CDD.CORRECTIONSTATUS = 1 AND CDD.DEDUCTIONSERIALNO IN (' + CAST(@DELETEITEMS AS VARCHAR(MAX))+')'    
   END   
 SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #FORM2627UPDATEDDEDS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR) + ' ORDER BY CORRECTIONSTATUS';    
 EXEC SP_EXECUTESQL @QUERY;    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetFORM26DeductionRegisterMISCBI')
DROP PROCEDURE USP_TDS_GetFORM26DeductionRegisterMISCBI
GO
CREATE PROCEDURE [USP_TDS_GetFORM26DeductionRegisterMISCBI]	
AS
BEGIN
SELECT TOP 1 NE.SERIALNO,CB.BRANCHNAME,BRANCHCODE,D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME, PAN,   
     DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
     DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
     TS.SECTIONNAME,DL.CHALLANID,PO.ORDERNO,PO.ORDERDATE,ISNULL(TR.BGLCODE,'')BGLCODE,  
     CASE WHEN DD.FORMID = 2
      THEN    
        CASE  DD.NONDEDREASON     
        WHEN  1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'     
        WHEN  2 THEN 'NO DEDUCTION U/S 197A'    
        WHEN  3 THEN 'PAN Not available - Higher Rate (20%)'    
        WHEN  4 THEN 'Transporter with valid PAN (0%)'    
        WHEN  5 THEN 'Amount Paid/Credited is Under Threshold'
        ELSE ''
        END    
          WHEN DD.FORMID = 3  
      THEN    
        CASE DD.NONDEDREASON    
        WHEN 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'     
        WHEN 2 THEN 'NO DEDUCTION U/S 197A'    
        WHEN 3 THEN 'PAN Not available - Higher Rate (20%)'    
        WHEN 6 THEN 'Software Vendor Transaction' 
        ELSE ''     
        END    
		  WHEN DD.FORMID = 4  
      THEN    
        CASE DD.NONDEDREASON    
        WHEN 1 THEN 'AS PER SECTION 206C(9)'     
        WHEN 2 THEN 'ANY OTHER REASON'    
        ELSE ''     
        END        
   END AS NONDEDREASON,
   CASE WHEN NE.DEDUCTEECODE = 1 THEN 'Companies' ELSE 'Non Companies' END AS DEDCODE    
   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
   INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID    
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON  D.DEDUCTEEID = NE.DEDUCTEEID    
   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID
   LEFT JOIN TDSRATE TR ON  DD.BGLCODEID = TR.BGLCODEID 
   LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
   LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM26QAAACDETAILS')
DROP PROCEDURE USP_TDS_GETFORM26QAAACDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETFORM26QAAACDETAILS] 
@ALLACCNOS NVARCHAR(MAX)
AS    
	BEGIN 
		SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ALLACCNOS,',')         
		SELECT TDACCNO, BRANCHID, OPENINGDATE, DEPOSITEDAMOUNT,CLOSUREDATE
		FROM TERMDEPOSIT26QAA TD WITH (NOLOCK)
			INNER JOIN #TEMP T ON T.DATA = TD.TDACCNO  
		ORDER BY SERIALNO		
	END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM26QAABRANCHIDS')
DROP PROCEDURE USP_TDS_GETFORM26QAABRANCHIDS
GO
CREATE PROCEDURE USP_TDS_GETFORM26QAABRANCHIDS
	 @BRANCHCODES VARCHAR(MAX)
AS    
	BEGIN     
		SELECT * INTO #UPDATEITEMS FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES, ',') 	
		SELECT BRANCHID FROM COMPANYBRANCH CB WITH (NOLOCK) 			        
		WHERE BRANCHCODE IN (SELECT DATA FROM #UPDATEITEMS) 
		DROP TABLE #UPDATEITEMS
	END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM26QAADETAILS')
DROP PROCEDURE USP_TDS_GETFORM26QAADETAILS
GO
CREATE PROCEDURE USP_TDS_GETFORM26QAADETAILS
	@TRANID INT
AS  
	BEGIN 
		SELECT TD.TRANID, TD.SERIALNO, TD.BRANCHID, CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')' AS BRANCHCODE,
			   TD.TDACCNO, TD.OPENINGDATE, TD.DEPOSITEDAMOUNT, TD.CLOSUREDATE 
		FROM TERMDEPOSIT26QAA TD WITH (NOLOCK) 
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = TD.BRANCHID
		WHERE TRANID = @TRANID	
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM26QAADETAILSPAGED')
DROP PROCEDURE USP_TDS_GETFORM26QAADETAILSPAGED
GO
CREATE PROCEDURE USP_TDS_GETFORM26QAADETAILSPAGED
	 @STARTROW DECIMAL,  
	 @PAGESIZE DECIMAL,  
	 @BRANCHID VARCHAR(MAX),  
	 @ACCOUNTNO VARCHAR(50),  
	 @OPDATEFROM VARCHAR(50),  
	 @OPDATETO VARCHAR(50),  
	 @DEPOSITAMTFROM DECIMAL,  
	 @DEPOSITAMTTO DECIMAL,  
	 @CLOSUREDATEFROM VARCHAR(50),
	 @CLOSUREDATETO VARCHAR(50)    
AS    
	BEGIN     
		DECLARE @FIRSTREC INT, @LASTREC INT    
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE    
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);    
		IF(@BRANCHID = '-1' AND @ACCOUNTNO ='-1' AND @OPDATEFROM = '-1' AND @OPDATETO = '-1' AND 
		   @DEPOSITAMTFROM = -1 AND @DEPOSITAMTTO = -1 AND @CLOSUREDATEFROM  = '-1' AND @CLOSUREDATETO  = '-1')  
			BEGIN  
				SELECT * FROM 
				(
					SELECT ROW_NUMBER() OVER (ORDER BY SERIALNO ASC) AS ROWNO, TD.TRANID, TD.SERIALNO, TD.BRANCHID, 
								CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')' AS BRANCHCODE,
								TD.TDACCNO, TD.OPENINGDATE, TD.DEPOSITEDAMOUNT, TD.CLOSUREDATE  
					FROM TERMDEPOSIT26QAA TD WITH (NOLOCK)  
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = TD.BRANCHID
				)T
				WHERE T.ROWNO > @FIRSTREC AND T.ROWNO < @LASTREC 
				ORDER BY T.SERIALNO   
			END  
		ELSE  
			BEGIN  
				DECLARE @QUERY NVARCHAR(MAX)  
				DECLARE @ZERO VARCHAR(1)  
				SET @ZERO = '0';  
				SELECT * INTO #UPDATEITEMS FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID, ',') 				        
				SET @QUERY='SELECT * FROM 
				(SELECT ROW_NUMBER() OVER (ORDER BY SERIALNO ASC) AS ROWNO, 
								   TD.TRANID, TD.SERIALNO, TD.BRANCHID, 
								   CB.BRANCHNAME + '' ('' + CB.BRANCHCODE + '')'' AS BRANCHCODE,
								   TD.TDACCNO, TD.OPENINGDATE, TD.DEPOSITEDAMOUNT, TD.CLOSUREDATE 
							FROM TERMDEPOSIT26QAA TD WITH (NOLOCK) 
							INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = TD.BRANCHID
							WHERE TD.SERIALNO >= ' + CAST(@ZERO AS VARCHAR) + ''  
				IF(@BRANCHID <> '-1')  
					SET @QUERY = @QUERY + ' AND TD.BRANCHID IN (SELECT DATA FROM #UPDATEITEMS)';  
				IF(@ACCOUNTNO <> -1)  
					SET @QUERY = @QUERY + ' AND TD.TDACCNO LIKE ''%' + CAST(@ACCOUNTNO AS VARCHAR) + '%''';          
				IF(@OPDATEFROM <> '-1' OR @OPDATETO <> '-1')  
					SET @QUERY = @QUERY + ' AND TD.OPENINGDATE BETWEEN ''' + CAST(@OPDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@OPDATETO AS VARCHAR) + ''''; 
				IF(@DEPOSITAMTFROM <> -1 OR @DEPOSITAMTTO <> -1)  
					SET @QUERY = @QUERY + ' AND TD.DEPOSITEDAMOUNT >= ' + CAST(@DEPOSITAMTFROM AS VARCHAR) + ' AND TD.DEPOSITEDAMOUNT <= ' + CAST(@DEPOSITAMTTO AS VARCHAR);          
				IF(@CLOSUREDATEFROM <> '-1' OR @CLOSUREDATETO <> '-1')    
					SET @QUERY = @QUERY + ' AND TD.CLOSUREDATE BETWEEN ''' + CAST(@CLOSUREDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@CLOSUREDATETO AS VARCHAR) + '''';
				SET @QUERY = @QUERY + ' ) T WHERE T.ROWNO > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND T.ROWNO < ' + CAST(@LASTREC AS VARCHAR(10))  
				SET @QUERY = @QUERY + ' ORDER BY T.SERIALNO'
			    EXEC SP_EXECUTESQL @QUERY; 
				DROP TABLE #UPDATEITEMS    
		   END  
	 END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM26QAADETAILSPAGEDCOUNT')
DROP PROCEDURE USP_TDS_GETFORM26QAADETAILSPAGEDCOUNT
GO
CREATE PROCEDURE USP_TDS_GETFORM26QAADETAILSPAGEDCOUNT
	 @BRANCHID VARCHAR(MAX),  
	 @ACCOUNTNO VARCHAR(50),  
	 @OPDATEFROM VARCHAR(50),  
	 @OPDATETO VARCHAR(50),  
	 @DEPOSITAMTFROM DECIMAL,  
	 @DEPOSITAMTTO DECIMAL,  
	 @CLOSUREDATEFROM VARCHAR(50),
	 @CLOSUREDATETO VARCHAR(50)    
AS    
	BEGIN     
		IF(@BRANCHID = '-1' AND @ACCOUNTNO ='-1' AND @OPDATEFROM = '-1' AND @OPDATETO = '-1' AND 
		   @DEPOSITAMTFROM = -1 AND @DEPOSITAMTTO = -1 AND @CLOSUREDATEFROM  = '-1' AND @CLOSUREDATETO  = '-1')  
			BEGIN  
				SELECT COUNT(TRANID) AS RECORDCOUNT FROM TERMDEPOSIT26QAA TD WITH (NOLOCK)  
			END  
		ELSE  
			BEGIN  
				DECLARE @QUERY NVARCHAR(MAX)  
				DECLARE @ZERO VARCHAR(1)  
				SET @ZERO = '0';  
				SELECT * INTO #UPDATEITEMS FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID, ',') 				        
				SET @QUERY='SELECT COUNT(TRANID) AS RECORDCOUNT
							FROM TERMDEPOSIT26QAA TD WITH (NOLOCK) 
							INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = TD.BRANCHID
							WHERE TD.SERIALNO >= ' + CAST(@ZERO AS VARCHAR) + ''  
				IF(@BRANCHID <> '-1')  
					SET @QUERY = @QUERY + ' AND TD.BRANCHID IN (SELECT DATA FROM #UPDATEITEMS)';  
				IF(@ACCOUNTNO <> -1)  
					SET @QUERY = @QUERY + ' AND TD.TDACCNO LIKE ''%' + CAST(@ACCOUNTNO AS VARCHAR) + '%''';          
				IF(@OPDATEFROM <> '-1' OR @OPDATETO <> '-1')  
					SET @QUERY = @QUERY + ' AND TD.OPENINGDATE BETWEEN ''' + CAST(@OPDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@OPDATETO AS VARCHAR) + ''''; 
				IF(@DEPOSITAMTFROM <> -1 OR @DEPOSITAMTTO <> -1)  
					SET @QUERY = @QUERY + ' AND TD.DEPOSITEDAMOUNT >= ' + CAST(@DEPOSITAMTFROM AS VARCHAR) + ' AND TD.DEPOSITEDAMOUNT <= ' + CAST(@DEPOSITAMTTO AS VARCHAR);          
				IF(@CLOSUREDATEFROM <> '-1' OR @CLOSUREDATETO <> '-1')    
					SET @QUERY = @QUERY + ' AND TD.CLOSUREDATE BETWEEN ''' + CAST(@CLOSUREDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@CLOSUREDATETO AS VARCHAR) + '''';
			    EXEC SP_EXECUTESQL @QUERY; 
				DROP TABLE #UPDATEITEMS    
		   END  
	 END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM26QAAMAXSERIALNO')
DROP PROCEDURE USP_TDS_GETFORM26QAAMAXSERIALNO
GO
CREATE PROCEDURE USP_TDS_GETFORM26QAAMAXSERIALNO 
AS    
	BEGIN     
		SELECT MAX(SERIALNO)
		FROM TERMDEPOSIT26QAA TD WITH (NOLOCK)  		
	END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM27ADETAILS')
DROP PROCEDURE USP_TDS_GETFORM27ADETAILS
GO
CREATE PROCEDURE [USP_TDS_GETFORM27ADETAILS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT FORM27AID,BRANCHID,FORMID,[QUARTER],DEDCOUNT,DEDAMOUNTPAID,DEDTDSAMOUNT,CHACOUNT,CHAAMOUNT,TOTALCHAAMOUNT,MEDIAUSED,
			   NUMOFMEDIA,PLACEFILED,DATEFILED
		FROM   FORM27A   WITH(NOLOCK)
		WHERE  BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM27ADETAILSFORREPORTS')
DROP PROCEDURE USP_TDS_GETFORM27ADETAILSFORREPORTS
GO
CREATE PROCEDURE [USP_TDS_GETFORM27ADETAILSFORREPORTS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT * FROM VW_GETFORM27ADETAILS
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM3CD34A')
DROP PROCEDURE USP_TDS_GETFORM3CD34A
GO
--DROP PROCEDURE [dbo].[USP_TDS_GETFORM3CD34A]
CREATE PROCEDURE [USP_TDS_GETFORM3CD34A]
AS
	BEGIN
		SELECT DEDUCTEEID, SUM(TOTALDEDUCTED) TDSMADE
		INTO #DEDWITHTDS
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		GROUP BY DEDUCTEEID
		SELECT D.BRANCHID, DD.SECTIONID, DTR.TAN, T.SECTIONNAME, T.TAXNAME, DD.TAXRATE INCOMETAXRATE, DD.PAYMENTMADE, DD.TOTALDEDUCTED, D.PAN,
			CASE 
				WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'						-- A	spec
				WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197'							-- B	spec
				WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'			-- A	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 4 THEN 'Transporter with valid PAN (0%)'				-- T	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 5 THEN 'Amount Paid/Credited is Under Threshold'		-- Y	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'					-- S	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 7 THEN 'NO DEDUCTION U/S 197A(1F)'						-- Z	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'		-- A	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'					-- S	spec
				WHEN DD.FORMID = 4 AND DD.NONDEDREASON = 1 THEN 'AS PER SECTION 206C(9)'						-- A	spec
				WHEN DD.FORMID = 4 AND DD.NONDEDREASON = 2 THEN 'AS PER SECTION 206C(1A)'						-- B	spec
				ELSE ''
			END DEDREMARK,
			CASE 
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 2 THEN 1
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 2 THEN 1
				ELSE 0
			END DEDEXCLUDE, DD.DEDUCTIONID
		INTO #TOSUMMARISE
		FROM
			DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND DD.QUARTER = BD.QUARTER 
			INNER JOIN DEDUCTOR DTR WITH(NOLOCK) ON BD.DEDUCTORID = DTR.DEDUCTORID 
			INNER JOIN TAXSECTIONS T WITH(NOLOCK) ON DD.SECTIONID = T.SECTIONID 
		WHERE
			DD.DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDWITHTDS)
		ORDER BY DTR.TAN, T.SECTIONNAME 
		SELECT BRANCHID, SECTIONID, TAN, PAN, SECTIONNAME, TAXNAME, INCOMETAXRATE, DEDREMARK, SUM(PAYMENTMADE) [PAID AMOUNT], SUM(TOTALDEDUCTED) [DEDUCTED AMOUNT]
		INTO #TOORGANISE
		FROM #TOSUMMARISE
		GROUP BY BRANCHID, SECTIONID, TAN, PAN, SECTIONNAME, TAXNAME, INCOMETAXRATE, DEDREMARK
		ORDER BY TAN, SECTIONNAME
		-- DETAILS OF SHORT DEDUCTIONS
		SELECT DEDUCTIONID,
			CASE 
				WHEN SECTIONNAME = '192' 
					THEN 1
				WHEN LEN(DEDREMARK) > 0 
					THEN 1
				WHEN SECTIONNAME = '194C' AND LEN(DEDREMARK) = 0 AND INCOMETAXRATE = 1 AND (PAN <> 'PANAPPLIED' OR PAN <> 'PANNOTAVBL' OR PAN <> 'PANINVALID') AND (SUBSTRING(PAN,4,1) <> 'P' AND SUBSTRING(PAN,4,1) <> 'H')
					THEN 2
				WHEN SECTIONNAME = '194C' AND LEN(DEDREMARK) = 0 AND (INCOMETAXRATE = 1 OR INCOMETAXRATE = 2)
					THEN 1
				WHEN SECTIONNAME = '195' AND LEN(DEDREMARK) = 0 AND (INCOMETAXRATE >= 10 OR INCOMETAXRATE >= 15 OR INCOMETAXRATE >= 20 OR INCOMETAXRATE >= 30 OR INCOMETAXRATE >= 50)
					THEN 1
				WHEN LEN(DEDREMARK) = 0 
						AND (SELECT COUNT(SECTIONID) FROM TAXSECTIONS WITH(NOLOCK) WHERE TAXNAME = T.TAXNAME AND TAXRATE <= T.INCOMETAXRATE) > 0
					THEN 1
				WHEN INCOMETAXRATE >= 20 AND UPPER(DEDREMARK) = 'PAN NOT AVAILABLE - HIGHER RATE (20%)'
					THEN 1
				WHEN INCOMETAXRATE = 0 AND UPPER(DEDREMARK) = 'AMOUNT PAID/CREDITED IS UNDER THRESHOLD'
					THEN 1
			ELSE 2 
			END RATEGROUP
		INTO #SHORTDED
		FROM #TOSUMMARISE T
		DROP TABLE #TOSUMMARISE
		SELECT * INTO #SHORTSHOW FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #SHORTDED WHERE RATEGROUP = 2)
		DROP TABLE #SHORTDED
		DROP TABLE #SHORTSHOW
		SELECT *,
			CASE 
				WHEN SECTIONNAME = '192' 
					THEN 1
				WHEN LEN(DEDREMARK) > 0 
					THEN 1
				WHEN SECTIONNAME = '194C' AND LEN(DEDREMARK) = 0 AND INCOMETAXRATE = 1 AND (PAN <> 'PANAPPLIED' OR PAN <> 'PANNOTAVBL' OR PAN <> 'PANINVALID') AND (SUBSTRING(PAN,4,1) <> 'P' AND SUBSTRING(PAN,4,1) <> 'H')
					THEN 2
				WHEN SECTIONNAME = '194C' AND LEN(DEDREMARK) = 0 AND (INCOMETAXRATE = 1 OR INCOMETAXRATE = 2)
					THEN 1
				WHEN SECTIONNAME = '195' AND LEN(DEDREMARK) = 0 AND (INCOMETAXRATE >= 10 OR INCOMETAXRATE >= 15 OR INCOMETAXRATE >= 20 OR INCOMETAXRATE >= 30 OR INCOMETAXRATE >= 50)
					THEN 1
				WHEN LEN(DEDREMARK) = 0 
						AND (SELECT COUNT(SECTIONID) FROM TAXSECTIONS WITH(NOLOCK) WHERE TAXNAME = T.TAXNAME AND TAXRATE <= T.INCOMETAXRATE) > 0
					THEN 1
				WHEN INCOMETAXRATE >= 20 AND UPPER(DEDREMARK) = 'PAN NOT AVAILABLE - HIGHER RATE (20%)'
					THEN 1
				WHEN INCOMETAXRATE = 0 AND UPPER(DEDREMARK) = 'AMOUNT PAID/CREDITED IS UNDER THRESHOLD'
					THEN 1
			ELSE 2 
			END RATEGROUP
		INTO #RTGRP
		FROM #TOORGANISE T
		DROP TABLE #TOORGANISE
		SELECT BRANCHID, SECTIONID, TAN, SECTIONNAME, TAXNAME, RATEGROUP, SUM([PAID AMOUNT]) [PAID], SUM([DEDUCTED AMOUNT]) [DEDUCTED]
		INTO #FINAL
		FROM #RTGRP
		GROUP BY BRANCHID, SECTIONID, TAN, SECTIONNAME, TAXNAME, RATEGROUP
		DROP TABLE #RTGRP
		SELECT DISTINCT BRANCHID, SECTIONID, TAN, SECTIONNAME, TAXNAME,
			(SELECT SUM(PAID) FROM #FINAL WHERE RATEGROUP = 1 AND TAN = F.TAN AND SECTIONNAME = F.SECTIONNAME AND TAXNAME = F.TAXNAME) [PAIDSPECIFIEDRATE],
			(SELECT SUM(DEDUCTED) FROM #FINAL WHERE RATEGROUP = 1 AND TAN = F.TAN AND SECTIONNAME = F.SECTIONNAME AND TAXNAME = F.TAXNAME) [DEDUCTEDSPECIFIEDRATE],
			(SELECT SUM(PAID) FROM #FINAL WHERE RATEGROUP = 2 AND TAN = F.TAN AND SECTIONNAME = F.SECTIONNAME AND TAXNAME = F.TAXNAME) [PAIDOTHRATE],
			(SELECT SUM(DEDUCTED) FROM #FINAL WHERE RATEGROUP = 2 AND TAN = F.TAN AND SECTIONNAME = F.SECTIONNAME AND TAXNAME = F.TAXNAME) [DEDUCTEDOTHRATE]
		INTO #RPTDATA
		FROM #FINAL F
		ORDER BY TAN
		DROP TABLE #FINAL
		SELECT 
			TAN, SECTIONID, TAXNAME, 
			(SELECT SUM(PAYMENTMADE) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = R.BRANCHID AND SECTIONID = R.SECTIONID) PAYMADE,
			(ISNULL([PAIDSPECIFIEDRATE],0) + ISNULL([PAIDOTHRATE],0)) PAYFORDED,
			[PAIDSPECIFIEDRATE], [DEDUCTEDSPECIFIEDRATE],
			[PAIDOTHRATE], [DEDUCTEDOTHRATE],
			(SELECT SUM(TOTALDEDUCTED) FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
				WHERE NOT EXISTS (SELECT DEDUCTIONID FROM DEDCHALINK DCL WITH(NOLOCK) WHERE DCL.DEDUCTIONID = DD.DEDUCTIONID) 
												AND BRANCHID = R.BRANCHID AND SECTIONID = R.SECTIONID) NOTPAID
		INTO #GRPDATA
		FROM #RPTDATA R
		ORDER BY TAN
		DROP TABLE #RPTDATA
		SELECT 
			TAN,
			CASE 
				WHEN (SECTIONID = 23 OR SECTIONID = 24) THEN 15
				WHEN (SECTIONID > 28 AND SECTIONID < 40) THEN 99
			ELSE SECTIONID
			END SECTION,
			PAYMADE, PAYFORDED, [PAIDSPECIFIEDRATE], [DEDUCTEDSPECIFIEDRATE],
			[PAIDOTHRATE], [DEDUCTEDOTHRATE], NOTPAID
		INTO #FDATA
		FROM #GRPDATA
		DROP TABLE #GRPDATA
		SELECT TAN [TAN (1)], CASE WHEN SECTION = 99 THEN '206C' ELSE  SECTIONNAME END [Section (2)], TAXSECTIONS.DESCRIPTION [Nature of Payment (3)],
			ISNULL(SUM(PAYMADE), 0) [Total Paid (4)], ISNULL(SUM(PAYFORDED), 0) [Paid considered for Deduction (5)], 
			ISNULL(SUM([PAIDSPECIFIEDRATE]), 0) [Paid deducted at Specified Rate (6)], ISNULL(SUM([DEDUCTEDSPECIFIEDRATE]), 0) [Deducted at Specified Rate (7)],
			ISNULL(SUM([PAIDOTHRATE]), 0) [Paid deducted at Less Rate (8)], ISNULL(SUM([DEDUCTEDOTHRATE]), 0) [Deducted at Less Rate (9)], 
			ISNULL(SUM(NOTPAID), 0) [TDS not Deposited (10)]
		FROM #FDATA
		LEFT JOIN TAXSECTIONS ON #FDATA.SECTION = TAXSECTIONS.SECTIONID 
		GROUP BY TAN, SECTIONNAME, SECTION, TAXSECTIONS.DESCRIPTION 
		ORDER BY TAN
		DROP TABLE #FDATA
		IF OBJECT_ID('tempdb..#QTR') is not null
			DROP TABLE #QTR
		IF OBJECT_ID('tempdb..#DEDWITHTDS') is not null
			DROP TABLE #DEDWITHTDS
		IF OBJECT_ID('tempdb..#DEDEXCLUDE') is not null
			DROP TABLE #DEDEXCLUDE
		IF OBJECT_ID('tempdb..#SHORTDED') is not null
			DROP TABLE #SHORTDED
		IF OBJECT_ID('tempdb..#SHORTSHOW') is not null
			DROP TABLE #SHORTSHOW
		IF OBJECT_ID('tempdb..#TOSUMMARISE') is not null
			DROP TABLE #TOSUMMARISE
		IF OBJECT_ID('tempdb..#TOORGANISE') is not null
			DROP TABLE #TOORGANISE
		IF OBJECT_ID('tempdb..#RTGRP') is not null
			DROP TABLE #RTGRP
		IF OBJECT_ID('tempdb..#FINAL') is not null
			DROP TABLE #FINAL
		IF OBJECT_ID('tempdb..#RPTDATA') is not null
			DROP TABLE #RPTDATA
		IF OBJECT_ID('tempdb..#GRPDATA') is not null
			DROP TABLE #GRPDATA
		IF OBJECT_ID('tempdb..#FDATA') is not null
			DROP TABLE #FDATA
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFORM3CD34B')
DROP PROCEDURE USP_TDS_GETFORM3CD34B
GO
CREATE PROCEDURE [USP_TDS_GETFORM3CD34B]
AS
	BEGIN
		DECLARE @YEARINDB INT
		SELECT TOP 1 @YEARINDB=FINANCIALYEAR FROM DEDUCTOR 
		SELECT 
			1 QUARTER, '15/Jul/' + CAST(@YEARINDB AS VARCHAR(4)) DUEDATE
		INTO #DUEDATE
		UNION SELECT 2 QUARTER, '15/Oct/' + CAST(@YEARINDB AS VARCHAR(4)) DUEDATE
		UNION SELECT 3 QUARTER, '15/Jan/' + CAST((@YEARINDB + 1) AS VARCHAR(4)) DUEDATE
		UNION SELECT 4 QUARTER, '15/May/' + CAST((@YEARINDB + 1) AS VARCHAR(4)) DUEDATE
		--SELECT * FROM #DUEDATE
		SELECT DTR.TAN, 
			CB.BRANCHCODE, CB.BRANCHNAME, D.QUARTER, A.FORMID,	
			CONVERT(VARCHAR, A.ORGFILEDDATE, 103) FILEDDATE, A.ORGNUM 
		INTO #FINALDATA
		FROM ACKNO A WITH(NOLOCK)
			INNER JOIN #DUEDATE D ON A.QUARTER = D.QUARTER
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON A.BRANCHID = BD.BRANCHID AND A.QUARTER = BD.QUARTER 
			INNER JOIN DEDUCTOR DTR WITH(NOLOCK) ON BD.DEDUCTORID = DTR.DEDUCTORID 
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID 
		ORDER BY DTR.TAN, D.QUARTER, A.FORMID
		--SELECT * FROM #FINALDATA
		SELECT TAN, BRANCHCODE, BRANCHNAME, QUARTER, FORMID, FILEDDATE, ORGNUM
		INTO #F1
		FROM #FINALDATA WHERE FORMID = 1
		SELECT TAN, BRANCHCODE, BRANCHNAME, QUARTER, FORMID, FILEDDATE, ORGNUM
		INTO #F2
		FROM #FINALDATA WHERE FORMID = 2
		SELECT TAN, BRANCHCODE, BRANCHNAME, QUARTER, FORMID, FILEDDATE, ORGNUM
		INTO #F3
		FROM #FINALDATA WHERE FORMID = 3
		SELECT F2.TAN, F2.BRANCHCODE, F2.BRANCHNAME, F2.QUARTER,
			ISNULL(F1.FILEDDATE, '') [24Q Filed Date], ISNULL(F1.ORGNUM, '') [24Q Token No], 
			ISNULL(F2.FILEDDATE, '') [26Q Filed Date], ISNULL(F2.ORGNUM, '') [26Q Token No], 
			ISNULL(F3.FILEDDATE, '') [27Q Filed Date], ISNULL(F3.ORGNUM, '') [27Q Token No]
		FROM #F2 F2 LEFT OUTER JOIN #F1 F1
				ON F2.TAN = F1.TAN AND F2.BRANCHCODE = F1.BRANCHCODE AND F2.QUARTER = F1.QUARTER
			LEFT OUTER JOIN #F3 F3
				ON F2.TAN = F3.TAN AND F2.BRANCHCODE = F3.BRANCHCODE AND F2.QUARTER = F3.QUARTER
		IF OBJECT_ID('tempdb..#DUEDATE') is not null
			DROP TABLE #DUEDATE
		IF OBJECT_ID('tempdb..#FINALDATA') is not null
			DROP TABLE #FINALDATA
		IF OBJECT_ID('tempdb..#F1') is not null
			DROP TABLE #F1
		IF OBJECT_ID('tempdb..#F2') is not null
			DROP TABLE #F2
		IF OBJECT_ID('tempdb..#F3') is not null
			DROP TABLE #F3
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetForm3CDBranchwise')
DROP PROCEDURE USP_TDS_GetForm3CDBranchwise
GO
CREATE PROCEDURE USP_TDS_GetForm3CDBranchwise
	@Q1 BIT, 
	@Q2 BIT,
	@Q3 BIT, 
	@Q4 BIT, 
	@BRANCHID INT 
AS
	BEGIN
		CREATE TABLE #QTR ([QUARTER] INT)
		IF (@Q1 = 1)
			BEGIN
				INSERT INTO #QTR VALUES (1)
			END
		IF (@Q2 = 1) 
			BEGIN
				INSERT INTO #QTR VALUES (2)
			END
		IF (@Q3 = 1)
			BEGIN
				INSERT INTO #QTR VALUES (3)
			END
		IF (@Q4 = 1)
			BEGIN
				INSERT INTO #QTR VALUES (4)
			END
		SELECT DEDUCTEEID, SUM(TOTALDEDUCTED) TDSMADE
		INTO #DEDWITHTDS
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
		GROUP BY DEDUCTEEID
		SELECT D.BRANCHID, DD.SECTIONID, DTR.TAN, T.SECTIONNAME, T.TAXNAME, DD.TAXRATE INCOMETAXRATE, DD.PAYMENTMADE, DD.TOTALDEDUCTED, D.PAN,
			CASE 
				WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'						-- A	spec
				WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197'							-- B	spec
				WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'			-- A	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 4 THEN 'Transporter with valid PAN (0%)'				-- T	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 5 THEN 'Amount Paid/Credited is Under Threshold'		-- Y	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'					-- S	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 7 THEN 'NO DEDUCTION U/S 197A(1F)'						-- Z	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'		-- A	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'					-- S	spec
				WHEN DD.FORMID = 4 AND DD.NONDEDREASON = 1 THEN 'AS PER SECTION 206C(9)'						-- A	spec
				WHEN DD.FORMID = 4 AND DD.NONDEDREASON = 2 THEN 'AS PER SECTION 206C(1A)'						-- B	spec
				ELSE ''
			END DEDREMARK,
			CASE 
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 2 THEN 1
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 2 THEN 1
				ELSE 0
			END DEDEXCLUDE, DD.DEDUCTIONID
		INTO #TOSUMMARISE
		FROM
			DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND DD.QUARTER = BD.QUARTER 
			INNER JOIN DEDUCTOR DTR WITH(NOLOCK) ON BD.DEDUCTORID = DTR.DEDUCTORID 
			INNER JOIN TAXSECTIONS T WITH(NOLOCK) ON DD.SECTIONID = T.SECTIONID 
		WHERE
			DD.BRANCHID = @BRANCHID
			AND DD.DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDWITHTDS)
			AND DD.QUARTER IN (SELECT QUARTER FROM #QTR)
		ORDER BY DTR.TAN, T.SECTIONNAME 
		--DROP TABLE #DEDEXCLUDE
		--DROP TABLE #DEDWITHTDS
		--SELECT * FROM #TOSUMMARISE
		SELECT BRANCHID, SECTIONID, TAN, PAN, SECTIONNAME, TAXNAME, INCOMETAXRATE, DEDREMARK, SUM(PAYMENTMADE) [PAID AMOUNT], SUM(TOTALDEDUCTED) [DEDUCTED AMOUNT]
		INTO #TOORGANISE
		FROM #TOSUMMARISE
		GROUP BY BRANCHID, SECTIONID, TAN, PAN, SECTIONNAME, TAXNAME, INCOMETAXRATE, DEDREMARK
		ORDER BY TAN, SECTIONNAME
		-- DETAILS OF SHORT DEDUCTIONS
		SELECT DEDUCTIONID,
			CASE 
				WHEN SECTIONNAME = '192' 
					THEN 1
				WHEN LEN(DEDREMARK) > 0 
					THEN 1
				WHEN SECTIONNAME = '194C' AND LEN(DEDREMARK) = 0 AND INCOMETAXRATE = 1 AND (PAN <> 'PANAPPLIED' OR PAN <> 'PANNOTAVBL' OR PAN <> 'PANINVALID') AND (SUBSTRING(PAN,4,1) <> 'P' AND SUBSTRING(PAN,4,1) <> 'H')
					THEN 2
				WHEN SECTIONNAME = '194C' AND LEN(DEDREMARK) = 0 AND (INCOMETAXRATE = 1 OR INCOMETAXRATE = 2)
					THEN 1
				WHEN SECTIONNAME = '195' AND LEN(DEDREMARK) = 0 AND (INCOMETAXRATE >= 10 OR INCOMETAXRATE >= 15 OR INCOMETAXRATE >= 20 OR INCOMETAXRATE >= 30 OR INCOMETAXRATE >= 50)
					THEN 1
				WHEN LEN(DEDREMARK) = 0 
						AND (SELECT SECTIONID FROM TAXSECTIONS WITH(NOLOCK) WHERE TAXNAME = T.TAXNAME AND TAXRATE <= T.INCOMETAXRATE) > 0
					THEN 1
				WHEN INCOMETAXRATE >= 20 AND UPPER(DEDREMARK) = 'PAN NOT AVAILABLE - HIGHER RATE (20%)'
					THEN 1
				WHEN INCOMETAXRATE = 0 AND UPPER(DEDREMARK) = 'AMOUNT PAID/CREDITED IS UNDER THRESHOLD'
					THEN 1
			ELSE 2 
			END RATEGROUP
		INTO #SHORTDED
		FROM #TOSUMMARISE T
		DROP TABLE #TOSUMMARISE
		SELECT * INTO #SHORTSHOW FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #SHORTDED WHERE RATEGROUP = 2)
		DROP TABLE #SHORTDED
		SELECT DTR.TAN, D.NAME, D.PAN,
			TS.SECTIONNAME,
			CONVERT(VARCHAR, DD.PAYMENTDATE, 103) PAIDDATE, CONVERT(VARCHAR,DD.DEDUCTEDDATE, 103) [DEDUCTEDDATE], 
			DD.PAYMENTMADE, DD.INCOMETAX, DD.TOTALDEDUCTED, DD.TAXRATE, 
			CASE 
				WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'						-- A	spec
				WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197'							-- B	spec
				WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'			-- A	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 4 THEN 'Transporter with valid PAN (0%)'				-- T	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 5 THEN 'Amount Paid/Credited is Under Threshold'		-- Y	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'					-- S	spec
				WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 7 THEN 'NO DEDUCTION U/S 197A(1F)'						-- Z	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'		-- A	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
				WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'					-- S	spec
				WHEN DD.FORMID = 4 AND DD.NONDEDREASON = 1 THEN 'AS PER SECTION 206C(9)'						-- A	spec
				WHEN DD.FORMID = 4 AND DD.NONDEDREASON = 2 THEN 'AS PER SECTION 206C(1A)'						-- B	spec
				ELSE ''
			END DEDREMARK
		FROM #SHORTSHOW DD 
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID 
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID 
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND DD.QUARTER = BD.QUARTER 
			INNER JOIN DEDUCTOR DTR WITH(NOLOCK) ON BD.DEDUCTORID = DTR.DEDUCTORID 
		WHERE
			D.DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDWITHTDS)
		ORDER BY CB.BRANCHCODE 
		DROP TABLE #SHORTSHOW
		SELECT *,
			CASE 
				WHEN SECTIONNAME = '192' 
					THEN 1
				WHEN LEN(DEDREMARK) > 0 
					THEN 1
				WHEN SECTIONNAME = '194C' AND LEN(DEDREMARK) = 0 AND INCOMETAXRATE = 1 AND (PAN <> 'PANAPPLIED' OR PAN <> 'PANNOTAVBL' OR PAN <> 'PANINVALID') AND (SUBSTRING(PAN,4,1) <> 'P' AND SUBSTRING(PAN,4,1) <> 'H')
					THEN 2
				WHEN SECTIONNAME = '194C' AND LEN(DEDREMARK) = 0 AND (INCOMETAXRATE = 1 OR INCOMETAXRATE = 2)
					THEN 1
				WHEN SECTIONNAME = '195' AND LEN(DEDREMARK) = 0 AND (INCOMETAXRATE >= 10 OR INCOMETAXRATE >= 15 OR INCOMETAXRATE >= 20 OR INCOMETAXRATE >= 30 OR INCOMETAXRATE >= 50)
					THEN 1
				WHEN LEN(DEDREMARK) = 0 
						AND (SELECT SECTIONID FROM TAXSECTIONS WITH(NOLOCK) WHERE TAXNAME = T.TAXNAME AND TAXRATE <= T.INCOMETAXRATE) > 0
					THEN 1
				WHEN INCOMETAXRATE >= 20 AND UPPER(DEDREMARK) = 'PAN NOT AVAILABLE - HIGHER RATE (20%)'
					THEN 1
				WHEN INCOMETAXRATE = 0 AND UPPER(DEDREMARK) = 'AMOUNT PAID/CREDITED IS UNDER THRESHOLD'
					THEN 1
			ELSE 2 
			END RATEGROUP
		INTO #RTGRP
		FROM #TOORGANISE T
		DROP TABLE #TOORGANISE
		SELECT BRANCHID, SECTIONID, TAN, SECTIONNAME, TAXNAME, RATEGROUP, SUM([PAID AMOUNT]) [PAID], SUM([DEDUCTED AMOUNT]) [DEDUCTED]
		INTO #FINAL
		FROM #RTGRP
		GROUP BY BRANCHID, SECTIONID, TAN, SECTIONNAME, TAXNAME, RATEGROUP
		DROP TABLE #RTGRP
		--SELECT * FROM #FINAL 
		SELECT DISTINCT BRANCHID, SECTIONID, TAN, SECTIONNAME, TAXNAME,
			(SELECT SUM(PAID) FROM #FINAL WHERE RATEGROUP = 1 AND TAN = F.TAN AND SECTIONNAME = F.SECTIONNAME AND TAXNAME = F.TAXNAME) [PAIDSPECIFIEDRATE],
			(SELECT SUM(DEDUCTED) FROM #FINAL WHERE RATEGROUP = 1 AND TAN = F.TAN AND SECTIONNAME = F.SECTIONNAME AND TAXNAME = F.TAXNAME) [DEDUCTEDSPECIFIEDRATE],
			(SELECT SUM(PAID) FROM #FINAL WHERE RATEGROUP = 2 AND TAN = F.TAN AND SECTIONNAME = F.SECTIONNAME AND TAXNAME = F.TAXNAME) [PAIDOTHRATE],
			(SELECT SUM(DEDUCTED) FROM #FINAL WHERE RATEGROUP = 2 AND TAN = F.TAN AND SECTIONNAME = F.SECTIONNAME AND TAXNAME = F.TAXNAME) [DEDUCTEDOTHRATE]
		INTO #RPTDATA
		FROM #FINAL F
		ORDER BY TAN
		DROP TABLE #FINAL
		SELECT 
			TAN, SECTIONID, TAXNAME, 
			(SELECT SUM(PAYMENTMADE) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = R.BRANCHID AND SECTIONID = R.SECTIONID) PAYMADE,
			(ISNULL([PAIDSPECIFIEDRATE],0) + ISNULL([PAIDOTHRATE],0)) PAYFORDED,
			[PAIDSPECIFIEDRATE], [DEDUCTEDSPECIFIEDRATE],
			[PAIDOTHRATE], [DEDUCTEDOTHRATE],
			(SELECT SUM(TOTALDEDUCTED) FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
				WHERE NOT EXISTS (SELECT DEDUCTIONID FROM DEDCHALINK DCL WITH(NOLOCK) WHERE DCL.DEDUCTIONID = DD.DEDUCTIONID AND BRANCHID = @BRANCHID) 
												AND BRANCHID = R.BRANCHID AND SECTIONID = R.SECTIONID 
												AND QUARTER IN (SELECT QUARTER FROM #QTR)) NOTPAID
		INTO #GRPDATA
		FROM #RPTDATA R
		ORDER BY TAN
		DROP TABLE #RPTDATA
		--SELECT * FROM #GRPDATA
		SELECT 
			TAN,
			CASE 
				WHEN (SECTIONID = 23 OR SECTIONID = 24) THEN 15
				WHEN (SECTIONID > 28 AND SECTIONID < 40) THEN 99
			ELSE SECTIONID
			END SECTION,
			PAYMADE, PAYFORDED, [PAIDSPECIFIEDRATE], [DEDUCTEDSPECIFIEDRATE],
			[PAIDOTHRATE], [DEDUCTEDOTHRATE], NOTPAID
		INTO #FDATA
		FROM #GRPDATA
		DROP TABLE #GRPDATA
		SELECT TAN [TAN (1)], CASE WHEN SECTION = 99 THEN '206C' ELSE  SECTIONNAME END [Section (2)], TAXSECTIONS.DESCRIPTION [Nature of Payment (3)],
			'' [Total Paid (4)], ISNULL(SUM(PAYFORDED), 0) [Paid considered for Deduction (5)], 
			ISNULL(SUM([PAIDSPECIFIEDRATE]), 0) [Paid deducted at Specified Rate (6)], ISNULL(SUM([DEDUCTEDSPECIFIEDRATE]), 0) [Deducted at Specified Rate (7)],
			ISNULL(SUM([PAIDOTHRATE]), 0) [Paid deducted at Less Rate (8)], ISNULL(SUM([DEDUCTEDOTHRATE]), 0) [Deducted at Less Rate (9)], 
			ISNULL(SUM(NOTPAID), 0) [TDS not Deposited (10)]
		FROM #FDATA
		LEFT JOIN TAXSECTIONS ON #FDATA.SECTION = TAXSECTIONS.SECTIONID 
		GROUP BY TAN, SECTIONNAME, SECTION, TAXSECTIONS.DESCRIPTION 
		ORDER BY TAN
		DROP TABLE #FDATA
		IF OBJECT_ID('tempdb..#QTR') is not null
			DROP TABLE #QTR
		IF OBJECT_ID('tempdb..#DEDWITHTDS') is not null
			DROP TABLE #DEDWITHTDS
		IF OBJECT_ID('tempdb..#DEDEXCLUDE') is not null
			DROP TABLE #DEDEXCLUDE
		IF OBJECT_ID('tempdb..#SHORTDED') is not null
			DROP TABLE #SHORTDED
		IF OBJECT_ID('tempdb..#SHORTSHOW') is not null
			DROP TABLE #SHORTSHOW
		IF OBJECT_ID('tempdb..#TOSUMMARISE') is not null
			DROP TABLE #TOSUMMARISE
		IF OBJECT_ID('tempdb..#TOORGANISE') is not null
			DROP TABLE #TOORGANISE
		IF OBJECT_ID('tempdb..#RTGRP') is not null
			DROP TABLE #RTGRP
		IF OBJECT_ID('tempdb..#FINAL') is not null
			DROP TABLE #FINAL
		IF OBJECT_ID('tempdb..#RPTDATA') is not null
			DROP TABLE #RPTDATA
		IF OBJECT_ID('tempdb..#GRPDATA') is not null
			DROP TABLE #GRPDATA
		IF OBJECT_ID('tempdb..#FDATA') is not null
			DROP TABLE #FDATA
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETFURNISHEDTDSREGISTERDETAILS')
DROP PROCEDURE USP_TDS_GETFURNISHEDTDSREGISTERDETAILS
GO
CREATE PROCEDURE USP_TDS_GETFURNISHEDTDSREGISTERDETAILS
	@BRANCHID INT,
	@FORMID INT,
	@FROMDATE SMALLDATETIME=NULL,
	@TODATE SMALLDATETIME=NULL,	
	@SECTIONID VARCHAR(MAX)=NULL,
	@DEDUCTEEID INT=NULL
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		DECLARE @RTBRANCHID INT,@ISZORO INT;
		SET @RTBRANCHID = @BRANCHID
		IF((SELECT TOP 1 DEDUCTORID FROM DEDUCTOR WITH(NOLOCK) WHERE TAN = 'HYDA08387B') <> '')
			BEGIN
				SELECT @ISZORO = ISZORO FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID
				IF(@ISZORO = 0)
					BEGIN
						IF(@FORMID <> 1)
							BEGIN
								SET @BRANCHID = (SELECT PARENTBRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @RTBRANCHID)
							END
					END
			END
		SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTIONID,',')
		SELECT DD.BRANCHID,DD.FORMID,DD.QUARTER,DD.TAXRATE,DD.TOTALDEDUCTED,DD.SECTIONID,DD.PAYMENTDATE,DD.DEDUCTEDDATE,  
		D.NAME,D.DEDUCTEEID,D.PAN,  
		TS.SECTIONNAME,      
		CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL,  
		FM.PRINTCERTIFICATENO,FM.CERTIFICATEDATE,CASE WHEN FM.ISCERTIFICATEGIVEN=1 THEN 'YES' ELSE 'NO' END AS ISCERTIFICATEGIVEN,
		DD.RTBRANCHID
		INTO #TEMP  
		FROM   DEDUCTIONDETAIL DD  
		INNER JOIN BRANCHDEDUCTORS BD ON DD.BRANCHID = BD.BRANCHID AND DD.QUARTER=BD.QUARTER     
		INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID  
		INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = DD.SECTIONID  
		INNER JOIN FORMDETAILS FD ON FD.FORMID=DD.FORMID     
		LEFT JOIN DEDCHALINK DL ON DL.DEDUCTIONID=DD.DEDUCTIONID  
		LEFT JOIN CHALLANDETAIL CD ON CD.CHALLANID = DL.CHALLANID   
		LEFT JOIN FORM16A FM ON FM.DEDUCTIONID = DD.DEDUCTIONID    
		WHERE  DD.FORMID IN (2,3,4) AND (DL.DEDCHALINKID IS NOT NULL)
		IF(@SECTIONID <> '-1')
			BEGIN
				SET @QUERY = 'SELECT NAME,PAN,DEDUCTEEID,PAN,CERTIFICATEDATE,PRINTCERTIFICATENO,TOTALDEDUCTED,SS.SECTIONNAME
					  FROM   #TEMP SS
					  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = SS.SECTIONID
					  INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME
					  WHERE  BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
					  AND PRINTCERTIFICATENO IS NOT NULL AND LEN(LTRIM(PRINTCERTIFICATENO)) > 0 AND ISCERTIFICATEGIVEN = ''YES''';
			END
		ELSE
			BEGIN
				SET @QUERY = 'SELECT NAME,PAN,DEDUCTEEID,PAN,CERTIFICATEDATE,PRINTCERTIFICATENO,TOTALDEDUCTED,SECTIONNAME
					  FROM   #TEMP
					  WHERE  BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' 
					  AND PRINTCERTIFICATENO IS NOT NULL AND LEN(LTRIM(PRINTCERTIFICATENO)) > 0 AND ISCERTIFICATEGIVEN = ''YES''';
			END
		--IF(@SECTIONID <> -1)
		--	BEGIN
		--		SET @QUERY = @QUERY + ' AND SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);
		--	END				
		IF(@DEDUCTEEID <> -1)
			BEGIN
				SET @QUERY = @QUERY + ' AND DEDUCTEEID = ' + CAST(@DEDUCTEEID AS VARCHAR);
			END				
		IF(@FROMDATE <> '')
			BEGIN
				SET @QUERY = @QUERY + ' AND CHALLANPAIDDATE >= ''' + CAST(@FROMDATE AS VARCHAR) + '''';
			END				
        IF(@TODATE <> '')
			BEGIN
				SET @QUERY = @QUERY+' AND CHALLANPAIDDATE <=''' + CAST(@TODATE AS VARCHAR) + '''';
			END	
		IF(@RTBRANCHID <> @BRANCHID)
			BEGIN
                SET @QUERY = @QUERY + ' AND RTBRANCHID = ' + CAST(@RTBRANCHID AS VARCHAR);  
			END			
		EXEC SP_EXECUTESQL @QUERY;
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETGROSSRECOVERYAMOUNT')
DROP PROCEDURE USP_TDS_GETGROSSRECOVERYAMOUNT
GO
CREATE PROCEDURE [USP_TDS_GETGROSSRECOVERYAMOUNT]
@COMID INT,
@MONTHID INT
AS
  SELECT SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0))GROSSAMT, SUM(ISNULL(RECOVERYAMT,0))RECOVERYAMT, EARNING FROM SALDETAIL SD WITH(NOLOCK)
	INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SH.SALARYHEADID = SD.SALARYHEADID  
	WHERE COMID = @COMID AND MONTHID = @MONTHID
	GROUP BY EARNING
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETGROSSTOTALINCOME')
DROP PROCEDURE USP_TDS_GETGROSSTOTALINCOME
GO
CREATE PROCEDURE [USP_TDS_GETGROSSTOTALINCOME]
@COMID INT,
@BRANCHID INT
AS
 BEGIN
	SELECT ISNULL(GROSSTOTALINCOME,0)GROSSTOTALINCOME FROM SALARYDETAIL SD WITH (NOLOCK)
	INNER JOIN DEDUCTEE D WITH (NOLOCK) ON SD.DEDUCTEEID = D.DEDUCTEEID
	INNER JOIN EMPLOYEE E WITH (NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
	INNER JOIN LINKTOTC LT WITH (NOLOCK) ON LT.EMPLOYEEID = E.EMPLOYEEID
	WHERE COMID = @COMID AND LT.BRANCHID = @BRANCHID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETHRAAMOUNT')
DROP PROCEDURE USP_TDS_GETHRAAMOUNT
GO
CREATE PROCEDURE [USP_TDS_GETHRAAMOUNT]          
@COMID INT,          
@MONTHID INT,
@BRANCHID INT        
AS          
 BEGIN          
  SELECT GROSSAMT1 , GROSSAMT2, ISNULL(ISMETRORESIDENT,0)ISMETRORESIDENT, ISNULL(RENTPAID,0)RENTPAID, ISNULL(EXEMPTAMT,0)EXEMPTAMT FROM SALDETAIL SD WITH(NOLOCK)
  INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID   
  LEFT JOIN RENTDETAILS RS WITH(NOLOCK) ON RS.SALDETAILID = SD.SALDETAILID      
  WHERE SD.COMID = @COMID AND SD.MONTHID = @MONTHID AND SALARYHEADID = 3 AND EM.BRANCHID = @BRANCHID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETIMPORTSTATUS')
DROP PROCEDURE USP_TDS_GETIMPORTSTATUS
GO
CREATE PROCEDURE [USP_TDS_GETIMPORTSTATUS]  
@BRANCHID INT,  
@MONTHID INT
AS  
 BEGIN  
   SELECT BRANCHID,MONTHID,ISVALID,ISREQACTIVE,QUEUEID FROM IMPORTSTATUS WITH(NOLOCK) 
   WHERE BRANCHID=@BRANCHID AND MONTHID=@MONTHID 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETINTERESTPAID')
DROP PROCEDURE USP_TDS_GETINTERESTPAID
GO
Create  PROCEDURE [dbo].[USP_TDS_GETINTERESTPAID]  
	@REFERENCENO VARCHAR(MAX)
AS
	BEGIN
		SELECT * 
		INTO #DED 
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE SECTIONID IN (5, 17) 
			AND ENTRYTYPE = 4 
			AND DEDUCTEEID IN (SELECT DEDUCTEEID FROM DEDUCTEE WITH (NOLOCK) WHERE REFERENCENO = @REFERENCENO)
		SELECT D.REFERENCENO, D.PAN, D.NAME, CB.BRANCHCODE, CB.BRANCHNAME, DTR.TAN, 
			(SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) 
				WHERE BRANCHID = CB.PARENTBRANCHID) REGION, 
			DD.PAYMENTMADE, DD.TOTALDEDUCTED, DD.PAYMENTDATE, DD.DEDUCTEDDATE
		FROM 
			DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
			INNER JOIN #DED DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID 
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID AND DD.QUARTER = BD.QUARTER 
			INNER JOIN DEDUCTOR DTR WITH(NOLOCK) ON BD.DEDUCTORID = DTR.DEDUCTORID
			ORDER BY D.REFERENCENO, D.PAN, CB.BRANCHCODE
		DROP TABLE #DED
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETINVALIDDEDUCTIONCOUNT')
DROP PROCEDURE USP_TDS_GETINVALIDDEDUCTIONCOUNT
GO
CREATE PROCEDURE USP_TDS_GETINVALIDDEDUCTIONCOUNT 
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS 
 BEGIN
  DECLARE @SQLQUERY NVARCHAR(MAX);
  DECLARE @NONDED VARCHAR(5);
  IF(@FORMID = 1)
   BEGIN
	SET @NONDED ='1,2'
   END 
  ELSE
   BEGIN
	SET @NONDED ='1'
   END 
  SET @SQLQUERY = 'SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK)
							  WHERE BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + ' AND
										FORMID = '+ CAST(@FORMID AS VARCHAR) + ' AND 
										QUARTER = '+ CAST(@QUARTER AS VARCHAR) + ' AND     
										ISNULL(CERTNO,'''') = '''' AND NONDEDREASON IN ('+ CAST(@NONDED AS VARCHAR) + ')'	
	EXEC SP_EXECUTESQL @SQLQUERY
	--PRINT @SQLQUERY
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETINVALIDERETURNBRANCHES')
DROP PROCEDURE USP_TDS_GETINVALIDERETURNBRANCHES
GO
CREATE PROCEDURE [USP_TDS_GETINVALIDERETURNBRANCHES]
 @STARTROW INT,  
 @PAGESIZE INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @ROWNO NVARCHAR(MAX) =  NULL,  
 @BRANCH VARCHAR(82),
 @BRANCHID INT 
AS  
 BEGIN  
  DECLARE @FIRSTREC INT;  
  DECLARE @LASTREC INT;  
  DECLARE @SQLQUERY NVARCHAR(MAX);  
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1)  
  SET @SQLQUERY = 'SELECT ROW_NUM = IDENTITY (INT, 1, 1),CB.BRANCHID, CB.BRANCHNAME+'' (''+ CB.BRANCHCODE+'')'' BRANCHNAME,ISNULL(CB.EMAILADDRESS,'''')EMAILADDRESS, C.BRANCHNAME+'' (''+ C.BRANCHCODE+'')''PARENTBRANCHNAME,CASE WHEN TB.FORMID = 1 THEN ''FORM 24Q ''  
          WHEN TB.FORMID =2 THEN ''FORM 26Q''  
          WHEN TB.FORMID = 3 THEN ''FORM 27Q''  
          END AS FORMTYPE,CASE WHEN TB.QUARTER = 1 THEN ''QUARTER 1''  
          WHEN TB.QUARTER  = 2 THEN ''QUARTER 2''  
          WHEN TB.QUARTER  = 3 THEN ''QUARTER 3''  
          WHEN TB.QUARTER  = 4 THEN ''QUARTER 4''  
          END AS QUARTER  
        INTO #EMAIL  
    FROM COMPANYBRANCH CB WITH(NOLOCK)  
    FULL JOIN  
    (  
     SELECT 1 FORMID,1 QUARTER UNION SELECT 1 FORMID,2 QUARTER UNION SELECT 1 FORMID,3 QUARTER UNION SELECT 1 FORMID,4 QUARTER  
     UNION  
     SELECT 2 FORMID,1 QUARTER UNION SELECT 2 FORMID,2 QUARTER UNION SELECT 2 FORMID,3 QUARTER UNION SELECT 2 FORMID,4 QUARTER  
     UNION  
     SELECT 3 FORMID,1 QUARTER UNION SELECT 3 FORMID,2 QUARTER UNION SELECT 3 FORMID,3 QUARTER UNION SELECT 3 FORMID,4 QUARTER  
    ) AS TB ON 1=1  
    LEFT JOIN ACKNO A WITH(NOLOCK) ON A.BRANCHID = CB.BRANCHID AND A.FORMID = TB.FORMID AND A.QUARTER = TB.QUARTER  
    INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID = CB.PARENTBRANCHID  
    WHERE (A.ISVALID = 0 OR A.ACKID IS NULL OR LEN(ISNULL(A.ORGNUM,'''')) = 0) AND C.BRANCHID='+CAST(@BRANCHID AS VARCHAR) +''   
  IF(@FORMID<>-1)  
 BEGIN  
       SET @SQLQUERY =  @SQLQUERY+ '  AND TB.FORMID= '+CAST(@FORMID AS VARCHAR) +''  
     END  
  IF(@QUARTER<>-1)  
   BEGIN  
    SET @SQLQUERY =  @SQLQUERY+ ' AND TB.QUARTER='+CAST(@QUARTER AS VARCHAR) +''  
   END  
   IF(@BRANCH<>'')  
 BEGIN  
  SET @SQLQUERY  = @SQLQUERY + ' AND (CB.BRANCHNAME LIKE ''%' + @BRANCH + '%'' OR CB.BRANCHCODE LIKE ''%' + @BRANCH + '%'')';  
 END  
    SET @SQLQUERY = @SQLQUERY + ' ORDER BY BRANCHNAME'  
    SET @SQLQUERY =  @SQLQUERY+ ' SELECT * INTO #T FROM #EMAIL WHERE ROW_NUM >' +CAST(@FIRSTREC AS VARCHAR) +' AND ROW_NUM < '+CAST(@LASTREC AS VARCHAR)+''  
 SET @SQLQUERY  = @SQLQUERY + ' SELECT * FROM #T'  
    IF(@ROWNO IS NOT NULL)  
  BEGIN  
  SET @SQLQUERY  = @SQLQUERY + ' WHERE ROW_NUM IN (SELECT * FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@ROWNO AS NVARCHAR(MAX))+''','',''))'  
     END  
  SET @SQLQUERY  = @SQLQUERY +' ORDER BY BRANCHNAME';  
        EXEC SP_EXECUTESQL @SQLQUERY;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETINVALIDERETURNBRANCHESCOUNT')
DROP PROCEDURE USP_TDS_GETINVALIDERETURNBRANCHESCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETINVALIDERETURNBRANCHESCOUNT] 
 @FORMID INT,    
 @QUARTER INT,    
 @BRANCH VARCHAR(82),  
 @BRANCHID INT     
AS    
 BEGIN    
   DECLARE @SQLQUERY NVARCHAR(MAX);    
 SET @SQLQUERY = '    
  SELECT * INTO #TEMP FROM    
  (    
    SELECT 1 FORMID,1 QUARTER UNION SELECT 1 FORMID,2 QUARTER UNION SELECT 1 FORMID,3 QUARTER UNION SELECT 1 FORMID,4 QUARTER    
    UNION    
    SELECT 2 FORMID,1 QUARTER UNION SELECT 2 FORMID,2 QUARTER UNION SELECT 2 FORMID,3 QUARTER UNION SELECT 2 FORMID,4 QUARTER    
    UNION    
    SELECT 3 FORMID,1 QUARTER UNION SELECT 3 FORMID,2 QUARTER UNION SELECT 3 FORMID,3 QUARTER UNION SELECT 3 FORMID,4 QUARTER    
 )T    
 SELECT COUNT(CB.BRANCHID)    
    FROM COMPANYBRANCH CB   WITH(NOLOCK)    
 INNER JOIN    
 #TEMP TB ON 1=1    
    LEFT JOIN ACKNO A  WITH(NOLOCK)  ON A.BRANCHID = CB.BRANCHID AND A.FORMID = TB.FORMID AND A.QUARTER = TB.QUARTER    
    INNER JOIN COMPANYBRANCH C  WITH(NOLOCK)  ON C.BRANCHID = CB.PARENTBRANCHID    
    WHERE (A.ISVALID = 0 OR A.ACKID IS NULL OR LEN(ISNULL(A.ORGNUM,'''')) = 0) AND C.BRANCHID='+CAST(@BRANCHID AS VARCHAR) +''    
  IF(@FORMID<>-1)    
 BEGIN    
       SET @SQLQUERY =  @SQLQUERY+ '  AND TB.FORMID= '+CAST(@FORMID AS VARCHAR) +''    
     END    
  IF(@QUARTER<>-1)    
   BEGIN    
    SET @SQLQUERY =  @SQLQUERY+ ' AND TB.QUARTER='+CAST(@QUARTER AS VARCHAR) +''    
   END    
    IF(@BRANCH<>'')    
 BEGIN    
  SET @SQLQUERY  = @SQLQUERY + ' AND (CB.BRANCHNAME LIKE ''%' + @BRANCH + '%'' OR CB.BRANCHCODE LIKE ''%' + @BRANCH + '%'')';    
 END    
   EXEC SP_EXECUTESQL @SQLQUERY;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetInvalidPANList')
DROP PROCEDURE USP_TDS_GetInvalidPANList
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetInvalidPANList] 
	@USERID INT
AS
	BEGIN
		DECLARE @PERCNT VARCHAR(1);
		DECLARE @ISSUPERADMIN BIT;   
		DECLARE @ISBRANCHADMIN BIT;
		SELECT @ISSUPERADMIN = ISSUPERADMIN, @ISBRANCHADMIN = ISBRANCHADMIN 
		FROM USERMASTER WITH(NOLOCK) WHERE USERID = @USERID;
		IF @ISSUPERADMIN = 1 OR @ISBRANCHADMIN = 1
			SET @PERCNT = '%'
		SELECT BRANCHID, BRANCHNAME, BRANCHCODE, PARENTBRANCHID, PARENTBASEID  
		INTO #BRANCHTOUSE
		FROM COMPANYBRANCH WITH(NOLOCK)   
		WHERE PARENTBASEID LIKE 
			(SELECT CB.PARENTBASEID    
				FROM COMPANYBRANCH CB WITH(NOLOCK) 
					INNER JOIN USERMASTER UM WITH(NOLOCK) 
						ON CB.BRANCHID = UM.BRANCHID    
				WHERE UM.USERID = @USERID) + @PERCNT
		ORDER BY BRANCHID       
		SELECT DEDUCTEEID 
		INTO #DEDTOUSE
		FROM DEDUCTEE
		WHERE PAN NOT LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]'
			AND PAN IN ('PANNOTAVBL','PANINVALID','PANAPPLIED')
		SELECT CB.BRANCHCODE, CB.BRANCHNAME, D.NAME, D.PAN, D.REFERENCENO 
		FROM COMPANYBRANCH CB WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID
		WHERE CB.BRANCHID IN (SELECT BRANCHID FROM #BRANCHTOUSE)
			AND D.DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDTOUSE)
		ORDER BY CB.BRANCHID 
		DROP TABLE #DEDTOUSE
		DROP TABLE #BRANCHTOUSE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetInvalidRemittanceList')
DROP PROCEDURE USP_TDS_GetInvalidRemittanceList
GO
CREATE PROCEDURE USP_TDS_GetInvalidRemittanceList
@BRANCHID INT,
@QUARTER INT = 4
AS
	BEGIN
		SELECT DD.SERIALNO,D.NAME,D.PAN,PAYMENTMADE,CONVERT(VARCHAR(10),DD.PAYMENTDATE,103)PAYMENTDATE,R.PARTICULARS FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
		INNER JOIN REMITTANCES R WITH(NOLOCK) ON DD.REMITTANCEID = R.ID
		WHERE DD.BRANCHID = @BRANCHID AND FORMID = 3 AND QUARTER = @QUARTER AND R.ISAPPLICABLE = 0  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETINVALIDSTATUSDEDUCTIONCOUNT')
DROP PROCEDURE USP_TDS_GETINVALIDSTATUSDEDUCTIONCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETINVALIDSTATUSDEDUCTIONCOUNT]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
  BEGIN
 SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL  WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER
        AND ISNULL(TRANSSTATUS,1) <> 2
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetInvalidTaxDeductedRecords')
DROP PROCEDURE USP_TDS_GetInvalidTaxDeductedRecords
GO
CREATE PROCEDURE USP_TDS_GetInvalidTaxDeductedRecords --1573,2,1
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS 
	BEGIN
		CREATE TABLE #INVALIDTAXDED(SERIALNO INT, NAME VARCHAR(100), PAN VARCHAR(10), SECTIONNAME VARCHAR(10),PAYMENTMADE NUMERIC(17,2) ,INCOMETAX NUMERIC(17,2), INCOMETAXRATE NUMERIC(5,3))
		SELECT DEDUCTIONID,DEDUCTEEID,SERIALNO,BRANCHID,FORMID,QUARTER,SECTIONID,PAYMENTMADE,INCOMETAXRATE,INCOMETAX,NONDEDREASON,CERTNO 
		INTO #DEDUCTION 
		FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
		SELECT DEDUCTEEID, NAME, PAN INTO #DEDUCTEE FROM DEDUCTEE D WITH(NOLOCK) WHERE BRANCHID = @BRANCHID 
		INSERT INTO #INVALIDTAXDED
		SELECT DD.SERIALNO,D.NAME,D.PAN,TS.SECTIONNAME,PAYMENTMADE,DD.INCOMETAX,INCOMETAXRATE FROM #DEDUCTION DD
		INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID
		INNER JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID 
		WHERE DD.FORMID = @FORMID AND DD.INCOMETAXRATE < TS.TAXRATE AND ISNULL(NONDEDREASON,0) = 0 AND DD.SECTIONID <> 8 AND BRANCHID = @BRANCHID AND QUARTER = @QUARTER
		INSERT INTO #INVALIDTAXDED
		SELECT DD.SERIALNO,D.NAME,D.PAN,TS.SECTIONNAME,PAYMENTMADE,DD.INCOMETAX,INCOMETAXRATE FROM #DEDUCTION DD
		INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID
		INNER JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID 
		WHERE DD.FORMID = @FORMID AND DD.INCOMETAXRATE < TS.TAXRATE AND ISNULL(NONDEDREASON,0) = 1 AND ISNULL(CERTNO,'') = '' AND DD.SECTIONID <> 8 AND BRANCHID = @BRANCHID AND QUARTER = @QUARTER
		INSERT INTO #INVALIDTAXDED
		SELECT DD.SERIALNO,D.NAME,D.PAN,TS.SECTIONNAME,PAYMENTMADE,DD.INCOMETAX,INCOMETAXRATE FROM #DEDUCTION DD
		INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID
		INNER JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID 
		WHERE DD.FORMID = @FORMID AND DD.SECTIONID = 8 AND DD.INCOMETAXRATE < (1.000) AND ISNULL(NONDEDREASON,0) = 0 AND BRANCHID = @BRANCHID AND QUARTER = @QUARTER
		INSERT INTO #INVALIDTAXDED
		SELECT DD.SERIALNO,D.NAME,D.PAN,TS.SECTIONNAME,PAYMENTMADE,DD.INCOMETAX,INCOMETAXRATE FROM #DEDUCTION DD
		INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID
		INNER JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID  
		WHERE DD.FORMID = @FORMID AND DD.SECTIONID = 8 AND DD.INCOMETAXRATE < (1.000) AND ISNULL(NONDEDREASON,0) = 1 AND ISNULL(CERTNO,'') = '' AND BRANCHID = @BRANCHID AND QUARTER = @QUARTER
		IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
			DROP TABLE #DEDUCTION
		IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
			DROP TABLE #DEDUCTEE
		SELECT * FROM #INVALIDTAXDED
		IF OBJECT_ID('TEMPDB..#INVALIDTAXDED') IS NOT NULL
			DROP TABLE #INVALIDTAXDED
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetLastDeducteeID')
DROP PROCEDURE USP_TDS_GetLastDeducteeID
GO
CREATE PROCEDURE USP_TDS_GetLastDeducteeID
	@COMID INT
AS
BEGIN
	SELECT BRANCHID,CASE WHEN MONTHID<4 THEN MONTHID + 12 ELSE MONTHID END MONTHID 
	INTO #EMPWORKMONTH
	FROM EMPWORKMONTH WHERE COMID = @COMID
	SELECT * 
	INTO #LINKTOTC
	FROM LINKTOTC WITH(NOLOCK)
	WHERE COMID = @COMID
	SELECT E.DEDUCTEEID,LTC.BRANCHID
	INTO #EMPLOYEE
	FROM EMPLOYEE E WITH(NOLOCK)
	INNER JOIN #LINKTOTC LTC
	ON LTC.EMPLOYEEID = E.EMPLOYEEID
	DECLARE @MAXMONTHID INT;
	DECLARE @BRANCHID INT;
	SET @MAXMONTHID = (SELECT MAX(MONTHID) FROM #EMPWORKMONTH)
	SET @BRANCHID = (SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID = @MAXMONTHID)
	SELECT DEDUCTEEID FROM #EMPLOYEE WHERE BRANCHID = @BRANCHID
	DROP TABLE #EMPWORKMONTH
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLATESTACKNO')
DROP PROCEDURE USP_TDS_GETLATESTACKNO
GO
CREATE PROCEDURE [USP_TDS_GETLATESTACKNO] 
@BRANCHID INT ,
@FORMID INT,
@QUARTER INT
AS
BEGIN
	IF EXISTS(SELECT * FROM ACKNOREV   WITH(NOLOCK) INNER JOIN ACKNO  WITH(NOLOCK) ON ACKNO.ACKID=ACKNOREV.ACKID  WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER)
	BEGIN
		 --SELECT TOP 1 REVNUM FROM ACKNOREV  WITH(NOLOCK) INNER JOIN ACKNO  WITH(NOLOCK)  ON ACKNO.ACKID=ACKNOREV.ACKID  WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER ORDER BY REVISENUMBER DESC
		 SELECT TOP 1 REVNUM,ACKNO.ORGNUM FROM ACKNOREV  WITH(NOLOCK) INNER JOIN ACKNO  WITH(NOLOCK)  ON ACKNO.ACKID=ACKNOREV.ACKID  WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER ORDER BY REVISENUMBER DESC
	END
	ELSE
	BEGIN
	   SELECT ORGNUM FROM ACKNO   WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLINKEDCHALLANS')
DROP PROCEDURE USP_TDS_GETLINKEDCHALLANS
GO
CREATE PROCEDURE [USP_TDS_GETLINKEDCHALLANS]
	@BRANCHID INT,
	@FORMID TINYINT,
	@QUARTER TINYINT
AS
	BEGIN
		SELECT  BRANCHID AS BRANCHID,CHALLANID AS CHALLANID,CHALLANDETAIL.FORMID AS FORMTYPE,[QUARTER] AS [QUARTER],ERETURNID AS ERETURNID,LINKDEDCOUNT AS LINKDEDUCTIONCOUNT,
				ISNILCHALLAN AS ISNILLCHALLAN,ISUPDATECHALLAN AS ISUPDATECHALLAN,MODEOFPAYMENT AS MODEOFPAYMENT,BANKCHALLANNO AS BANKCHALLANNUMBER,LASTBANKCHALLANNO AS LASTBANKCHALLANNUMBER,
				TRNVOUCHERNO AS TRANSFERVOUCHERNUMBER,LASTTRNVOUCHERNO AS LASTTRANSFERVOUCHERNUMBER,CHALLANDETAIL.BANKID AS BANKID,LASTBANKID AS LASTBANKID,
				CHALLANPAIDDATE AS CHALLANPAIDDATE,LASTCHALLANPAIDDATE AS LASTCHALLANPAIDDATE,DATEOFDEBIT AS DATEOFDEBIT,CHALLANDETAIL.SECTIONID AS SECTIONID,TAXSECTIONS.SECTIONNAME AS SECTIONNAME,
				INCOMETAX AS INCOMETAX,SURCHARGE AS SURCHARGE,EDUCATIONCESS AS EDUCATIONCESS,INTEREST AS INTEREST,OTHERS AS OTHERS,PENALTY AS PENALTY,CHALLANTOTAL AS CHALLANTOTALAMOUNT,
				LASTCHALLANTOTAL AS LASTCHALLANTOTALAMOUNT,ISCOMPANY AS ISCOMPANY,CHEQUENO AS CHEQUENUMBER,CHEQUEDATE AS CHEQUEDATE,CHEQUEDRAWNON AS CHEQUEDRAWNON,TRANREFNO AS TRANSFERREFERENCENUMBER,
				ISNULL(CHALLANDETAIL.SERIALNO,'') AS SERIALNUMBER,REMITTINGBANK.BSRCODE AS BANKBSRCODE,CASE WHEN(LINKEDCHALLANID IS NULL) THEN 'FALSE' ELSE 'TRUE' END AS ISLINKED,
				ISNULL(TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER
		FROM   CHALLANDETAIL  WITH(NOLOCK)  LEFT JOIN (SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID FROM DEDCHALINK  WITH(NOLOCK) ) AS LINKTABLE ON CHALLANDETAIL.CHALLANID = LINKTABLE.LINKEDCHALLANID
							 INNER JOIN TAXSECTIONS  WITH(NOLOCK)  ON  CHALLANDETAIL.SECTIONID = TAXSECTIONS.SECTIONID
							 LEFT JOIN REMITTINGBANK  WITH(NOLOCK) ON CHALLANDETAIL.BANKID=REMITTINGBANK.BANKID
		WHERE  BRANCHID=@BRANCHID AND CHALLANDETAIL.FORMID=@FORMID AND [QUARTER]=@QUARTER AND LINKEDCHALLANID IS NOT NULL
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLINKEDDEDUCTION')
DROP PROCEDURE USP_TDS_GETLINKEDDEDUCTION
GO
CREATE PROCEDURE USP_TDS_GETLINKEDDEDUCTION --360176
	@DEDUCTIONID INT
AS
BEGIN
	SELECT COUNT(*) FROM DEDCHALINK WITH(NOLOCK)
	WHERE DEDUCTIONID=@DEDUCTIONID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLINKEDDEDUCTIONFORIMPORT')
DROP PROCEDURE USP_TDS_GETLINKEDDEDUCTIONFORIMPORT
GO
CREATE PROCEDURE [USP_TDS_GETLINKEDDEDUCTIONFORIMPORT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
			SELECT	DD.SERIALNO,DD.SECTIONID,SEC.SECTIONNAME
			FROM    DEDUCTIONDETAIL DD  WITH(NOLOCK)
					INNER JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID=DL.DEDUCTIONID AND DD.BRANCHID=DL.BRANCHID
					INNER JOIN TAXSECTIONS SEC  WITH(NOLOCK)  ON DD.SECTIONID =SEC.SECTIONID
			WHERE	DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLINKEDDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETLINKEDDEDUCTIONS
GO
CREATE PROCEDURE [USP_TDS_GETLINKEDDEDUCTIONS]
    @CHALLANID INT
AS
	BEGIN
		SELECT D.NAME,D.PAN,D.PANREFERENCE,
			   NE.DEDUCTEECODE,
			   TS.SECTIONNAME,
			   DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,DD.SERIALNO AS DEDSERIALNO,DD.DEDUCTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.SECTIONID,DD.ERETURNID,DD.MODE,
			   DD.INCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.ISTAXINFOEDITABLE,DD.TAXRATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
			   DD.ISBOOKENTRY,DD.NONDEDREASON,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,
			   CD.SERIALNO AS CHALSERIALNO,CD.CHALLANID,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL ,CD.[QUARTER] AS CHALLANQUARTER,CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CD.ISCOMPANY END AS CHALLANCODE,
			   DL.DEDCHALINKID
		FROM   DEDUCTIONDETAIL DD  WITH(NOLOCK)  INNER JOIN DEDUCTEE D   WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
								  LEFT JOIN  NONEMPLOYEE NE  WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID
								  INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID
								  INNER JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID
								  INNER JOIN CHALLANDETAIL CD   WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
		WHERE  DL.CHALLANID = @CHALLANID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLINKEDDEDUCTIONSAMOUNT')
DROP PROCEDURE USP_TDS_GETLINKEDDEDUCTIONSAMOUNT
GO
CREATE PROCEDURE [USP_TDS_GETLINKEDDEDUCTIONSAMOUNT]  
    @CHALLANID INT   
AS  
 BEGIN   
  SELECT ISNULL(SUM(DD.INCOMETAX),0) AS INCOMETAX,ISNULL(SUM(DD.SURCHARGE),0) AS SURCHARGE,  
    ISNULL(SUM(DD.EDUCATIONCESS),0) AS EDUCATIONCESS,ISNULL(SUM(DD.TOTALDEDUCTED),0) AS TOTALDEDUCTED,0 AS DEDUCTEECODE,
    SUM(ISNULL(CD.FEE,0))FEE,
    --1 AS ISSECTIONSAME  
    CD.SECTIONID  
  FROM   DEDUCTIONDETAIL DD  WITH(NOLOCK)      
    INNER JOIN   
      DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID  
    INNER JOIN   
      CHALLANDETAIL CD  WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID  
  WHERE  DL.CHALLANID =@CHALLANID GROUP BY CD.SECTIONID;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLINKEDDEDUCTIONSFORGRID')
DROP PROCEDURE USP_TDS_GETLINKEDDEDUCTIONSFORGRID
GO
CREATE PROCEDURE [USP_TDS_GETLINKEDDEDUCTIONSFORGRID]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@CHALLANID INT
AS
BEGIN
	SELECT DD.QUARTER,DD.SERIALNO,DD.DEDUCTIONID,D.NAME,D.PAN,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
	DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DCL.CHALLANID 
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID
	WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND DCL.CHALLANID=@CHALLANID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLISTFORINTERESTRECALCULATION')
DROP PROCEDURE USP_TDS_GETLISTFORINTERESTRECALCULATION
GO
CREATE PROCEDURE USP_TDS_GETLISTFORINTERESTRECALCULATION
@QUARTER INT
AS
BEGIN
	SELECT CB.BRANCHCODE, DD.SERIALNO, D.NAME, D.PAN, D.REFERENCENO, TS.SECTIONNAME, PAYMENTMADE, DD.INCOMETAXRATE, INCOMETAX, 
		CAST(((INCOMETAX / INCOMETAXRATE) * 100) AS NUMERIC(17,2)) AS CALCULATEDPAYMENTAMOUNT 
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID 
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
	INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
	WHERE DD.FORMID IN (2,3) AND DD.SECTIONID IN (5,17) AND QUARTER = @QUARTER AND (((PAYMENTMADE / 100) * INCOMETAXRATE) > INCOMETAX) AND INCOMETAXRATE <> 0 
	UNION
	SELECT CB.BRANCHCODE, DD.SERIALNO, D.NAME, D.PAN, D.REFERENCENO, TS.SECTIONNAME, PAYMENTMADE, DD.INCOMETAXRATE, INCOMETAX, 
		CAST(((INCOMETAX / INCOMETAXRATE) * 100) AS NUMERIC(17,2))AS CALCULATEDPAYMENTAMOUNT 
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID 
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
	INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
	WHERE DD.FORMID IN (2,3) AND DD.SECTIONID IN (5,17) AND QUARTER = @QUARTER AND ((INCOMETAX - ((PAYMENTMADE / 100) * INCOMETAXRATE)) > 10) AND INCOMETAXRATE <> 0
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLOAN')
DROP PROCEDURE USP_TDS_GETLOAN
GO
CREATE PROCEDURE [USP_TDS_GETLOAN]    
@ID INT    
AS    
 BEGIN    
 SELECT LOANID, NAME FROM LOAN WITH(NOLOCK) WHERE LOANID = @ID    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLOANDETAILS')
DROP PROCEDURE USP_TDS_GETLOANDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETLOANDETAILS]      
@COMID INT,      
@MONTHID INT,
@LOANID INT      
AS        
 BEGIN        
 DECLARE @SQLQUERY NVARCHAR(MAX);      
 SET @SQLQUERY = 'SELECT LD.LOANDETAILID, LD.LOANID, L.NAME, LD.GROSSAMT, LD.EXEMPTAMT FROM LOANDETAIL LD WITH(NOLOCK)    
	INNER JOIN LOAN L WITH(NOLOCK) ON L.LOANID = LD.LOANID    
    INNER JOIN TAXABLEPERQUISITE T WITH(NOLOCK) ON LD.TAXABLEPERKID = T.TAXABLEPERKID      
    WHERE T.PERKID = 6 AND T.COMID = ' + CAST(@COMID AS VARCHAR) + ' AND MONTHID = ' + CAST(@MONTHID AS VARCHAR)      
 IF(@LOANID <> -1)      
   BEGIN      
	 SET @SQLQUERY = @SQLQUERY + ' AND LD.LOANDETAILID = ' + CAST(@LOANID AS VARCHAR)      
   END      
  EXEC SP_EXECUTESQL @SQLQUERY;      
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETLOCKEDDEDDEATILS')
DROP PROCEDURE USP_TDS_GETLOCKEDDEDDEATILS
GO
CREATE PROCEDURE [USP_TDS_GETLOCKEDDEDDEATILS]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT
AS
BEGIN
 DECLARE @LOCKED INT;
 DECLARE @ALLOW92A92B INT;
 SELECT @LOCKED = FLAG FROM LOCKQUARTER WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
 SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS
 SELECT SECTIONID,SECTIONNAME,DEDUCTEECODE,HASPARTPAYMENT,LOCKED,CASE WHEN LOCKED = 0 THEN 0 ELSE INCOMETAX END AS INCOMETAX,
		CASE WHEN LOCKED = 0 THEN 0 ELSE SURCHARGE END AS SURCHARGE,CASE WHEN LOCKED = 0 THEN 0 ELSE EDUCATIONCESS END AS EDUCATIONCESS,
        CASE WHEN LOCKED = 0 THEN 0 ELSE TOTALDEDUCTED END AS TOTALDEDUCTED,TRANSSTATUS
		 FROM
		 (
			SELECT SECTIONID,SECTIONNAME,DEDUCTEECODE,INCOMETAX,SURCHARGE,
				EDUCATIONCESS,TOTALDEDUCTED, HASPARTPAYMENT,LOCKED,TRANSSTATUS
			  FROM
			  (
			   SELECT DD.SECTIONID,CASE WHEN @ALLOW92A92B = 1 AND @FORMID=1 THEN TS.SECTIONNAME + '('+ TS.TAXNAME + ')' ELSE TS.SECTIONNAME  END AS SECTIONNAME,
					  NE.DEDUCTEECODE,SUM(DD.INCOMETAX) INCOMETAX,SUM(DD.SURCHARGE) SURCHARGE,SUM(DD.EDUCATIONCESS) EDUCATIONCESS,
					  SUM(TOTALDEDUCTED) TOTALDEDUCTED,0 HASPARTPAYMENT,LOCKED, ISNULL(DD.TRANSSTATUS,1) TRANSSTATUS
			   FROM DEDUCTIONDETAIL DD   WITH(NOLOCK)
			   LEFT JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID
			   LEFT JOIN DEDUCTEE D  WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
			   LEFT JOIN NONEMPLOYEE NE  WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
			   INNER JOIN TAXSECTIONS TS   WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID AND TS.FORMID = DD.FORMID
			   LEFT JOIN
				(
				 SELECT ISNULL(LQ.FLAG,0) LOCKED
				 FROM (SELECT 2 COL1) R
				 LEFT JOIN
				 LOCKQUARTER LQ ON BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
				)LQ ON 1 = 1
			   WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.TOTALDEDUCTED>0 AND  DL.DEDCHALINKID IS NULL
			   GROUP BY DD.SECTIONID,SECTIONNAME,DEDUCTEECODE,LQ.LOCKED,TAXNAME,TRANSSTATUS
			   UNION
			   SELECT DD.SECTIONID,CASE WHEN @ALLOW92A92B = 1 AND @FORMID=1 THEN TS.SECTIONNAME + '('+ TS.TAXNAME + ')' ELSE TS.SECTIONNAME  END AS SECTIONNAME,
						 NE.DEDUCTEECODE,REMINCOMETAX INCOMETAX,REMSURCHARGE SURCHARGE,REMEDUCATIONCESS EDUCATIONCESS,REMTOTALDEDUCTED TOTALDEDUCTED,
						 1 HASPARTPAYMENT,@LOCKED LOCKED,DD.TRANSSTATUS
			   FROM PARTPAYMENTDETAILS PPD   WITH(NOLOCK)
			   INNER JOIN
			   (
				SELECT PARTPAYMENTID,DEDUCTEEID,MIN(SECTIONID) SECTIONID, ISNULL(TRANSSTATUS,1) TRANSSTATUS
				FROM DEDUCTIONDETAIL   WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
				GROUP BY PARTPAYMENTID,DEDUCTEEID ,TRANSSTATUS
			   ) DD ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID
			   INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID AND PPD.FORMID = TS.FORMID
			   LEFT JOIN DEDUCTEE D  WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND PPD.BRANCHID = D.BRANCHID
			   LEFT JOIN NONEMPLOYEE NE  WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID
			   WHERE PPD.BRANCHID = @BRANCHID AND PPD.FORMID = @FORMID AND QUARTER = @QUARTER AND (REMPAYMENTMADE <> 0 OR REMINCOMETAX <> 0 OR REMEDUCATIONCESS <> 0 OR REMSURCHARGE <> 0 OR REMTOTALDEDUCTED <> 0)
			  ) RESULT
		 ) Q
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAINMINISTRY')
DROP PROCEDURE USP_TDS_GETMAINMINISTRY
GO
CREATE PROCEDURE [USP_TDS_GETMAINMINISTRY]
AS
 BEGIN
  SELECT MAINMINISTRYID AS MAINMINISTRYID,MAINMINISTRYNAME AS MAINMINISTRYNAME,MAINMINISTRYCODE AS MAINMINISTRYCODE FROM MAINMINISTRYLIST WITH(NOLOCK);
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMasterDetails')
DROP PROCEDURE USP_TDS_GetMasterDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetMasterDetails] 
@BRANCHID INT,
@ISEMPLOYEE BIT
AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX)
IF(@ISEMPLOYEE=1)
	BEGIN 
		  SET @QUERY='SELECT E.SERIALNO,D.SALUTATION AS TITLE,D.NAME,D.PAN,ISNULL(D.REFERENCENO,'''') AS REFERENCENO,E.DESIGNATION,CASE WHEN E.GENDER=0 THEN ''Male'' ELSE ''Female'' END GENDER, CASE WHEN E.ISSENIORCITIZEN=1 THEN ''YES'' ELSE ''NO'' END [SENIOR CITIZEN] ,CONVERT(VARCHAR,E.EMPLOYMENTFROM,105) [EMPLOYMENT FROM] ,CONVERT(VARCHAR,E.EMPLOYMENTTO,105)[EMPLOYMENT TO],D.ADDRESS1 AS [FLAT NO],D.ADDRESS2 AS [NAME OF BUILDING],
                             D.ADDRESS3 AS [STREET NAME],D.ADDRESS4 AS AREA,D.ADDRESS5 AS CITY,SM.STATENAME AS STATE,D.PINCODE,D.PHONENO,D.EMAILADDRESS
                      FROM DEDUCTEE D  WITH(NOLOCK)  INNER JOIN EMPLOYEE E  WITH(NOLOCK) ON D.DEDUCTEEID=E.DEDUCTEEID 
									  INNER JOIN STATEMASTER SM  WITH(NOLOCK) ON D.STATEID=SM.STATEID
                      WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+'  ORDER BY SERIALNO'
	END
ELSE 
	BEGIN
		  SET @QUERY='SELECT NE.SERIALNO,D.SALUTATION AS TITLE,D.NAME,D.PAN,ISNULL(D.REFERENCENO,'''') AS REFERENCENO,CASE WHEN NE.DEDUCTEECODE=1 THEN ''Companies'' ELSE ''Other than Companies'' END CODE,D.ADDRESS1 AS [FLAT NO],D.ADDRESS2 AS [NAME OF BUILDING],						     D.ADDRESS3 AS [STREET NAME],D.ADDRESS4 AS AREA,D.ADDRESS5 AS CITY,SM.STATENAME AS STATE,D.PINCODE,D.PHONENO,D.EMAILADDRESS 
					  FROM DEDUCTEE D  WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE  WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID 
					                  INNER JOIN STATEMASTER SM  WITH(NOLOCK) ON D.STATEID=SM.STATEID
					  WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+'  ORDER BY SERIALNO'
	END	
	 EXEC SP_EXECUTESQL @QUERY 
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAXCHALLANSERIALNO')
DROP PROCEDURE USP_TDS_GETMAXCHALLANSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETMAXCHALLANSERIALNO]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
    SELECT ISNULL(MAX(CD.SERIALNO),0) +1  FROM CHALLANDETAIL CD   WITH(NOLOCK)
    WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID= @FORMID AND CD.QUARTER = @QUARTER
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAXCOMID')
DROP PROCEDURE USP_TDS_GETMAXCOMID
GO
CREATE PROCEDURE [USP_TDS_GETMAXCOMID]  
AS  
SELECT ISNULL(MAX(COMID),0)COMID FROM LINKTOTC WITH(NOLOCK)
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMaxDeductionID')
DROP PROCEDURE USP_TDS_GetMaxDeductionID
GO
CREATE PROCEDURE [USP_TDS_GetMaxDeductionID]
AS
	BEGIN
		SELECT ISNULL(MAX(DEDUCTIONID),0) FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAXDEDUCTIONSERIALNO')
DROP PROCEDURE USP_TDS_GETMAXDEDUCTIONSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETMAXDEDUCTIONSERIALNO]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
    SELECT ISNULL(MAX(DD.SERIALNO),0) AS SERIALNO, ISNULL(MAX(DD.PARTPAYMENTID),0) + 1 AS PARTPAYMENTID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
    WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID= @FORMID AND DD.QUARTER = @QUARTER
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAXDEDUCTIONSERIALNOBRANCHWISE')
DROP PROCEDURE USP_TDS_GETMAXDEDUCTIONSERIALNOBRANCHWISE
GO
CREATE PROCEDURE [USP_TDS_GETMAXDEDUCTIONSERIALNOBRANCHWISE]      
@QUARTER INT,     
@BRANCHID NVARCHAR(MAX)      
AS      
BEGIN      
  SELECT ISNULL(MAX(SERIALNO),0)AS SERIALNO,DD.QUARTER,DD.BRANCHID,DD.FORMID      
  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)     
  WHERE DD.QUARTER=@QUARTER AND DD.BRANCHID IN (SELECT * FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID,','))     
  AND DD.FORMID = 1     
  GROUP BY DD.BRANCHID,DD.FORMID,DD.QUARTER       
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAXEMPSERAILNO')
DROP PROCEDURE USP_TDS_GETMAXEMPSERAILNO
GO
CREATE PROCEDURE [USP_TDS_GETMAXEMPSERAILNO]     
@BRANCHID NVARCHAR(MAX)    
AS    
   BEGIN    
	 SELECT ISNULL(MAX(E.SERIALNO),0)  AS SERIALNO, D.BRANCHID FROM    
		DEDUCTEE D WITH(NOLOCK)
		INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID       
		WHERE BRANCHID IN (SELECT * FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID,','))    
		GROUP BY D.BRANCHID    
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAXRTFILENO')
DROP PROCEDURE USP_TDS_GETMAXRTFILENO
GO
CREATE PROCEDURE [USP_TDS_GETMAXRTFILENO]
    @DBNAME VARCHAR(50)
AS
BEGIN
    EXEC('SELECT MAX(RTNO.RTNO) FROM ( SELECT ISNULL(MAX(RTFILENO), 5999) + 1 [RTNO] FROM CHALLANDETAIL UNION ' +
                    'SELECT ISNULL(MAX(RTFILENO), 5999) + 1 [RTNO] FROM ' + @DBNAME + '.[DBO].[CHALLANDETAIL] ' +
                    ')RTNO')
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAXSERIALNO')
DROP PROCEDURE USP_TDS_GETMAXSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETMAXSERIALNO]
@BRANCHCODE VARCHAR(10)
AS
	BEGIN
		SELECT ISNULL(MAX(N.SERIALNO),0)+ 1 AS SERIALNO FROM NONEMPLOYEE N  WITH(NOLOCK)
		INNER JOIN DEDUCTEE  D  WITH(NOLOCK)  ON D.DEDUCTEEID = N.DEDUCTEEID
		INNER JOIN COMPANYBRANCH CD  WITH(NOLOCK)  ON CD.BRANCHID = D.BRANCHID
		WHERE CD.BRANCHCODE = @BRANCHCODE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAXSERIALNOFORCORRCHALLAN')
DROP PROCEDURE USP_TDS_GETMAXSERIALNOFORCORRCHALLAN
GO
CREATE PROCEDURE [USP_TDS_GETMAXSERIALNOFORCORRCHALLAN] 
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
   DECLARE @CORRCHALLANSERIALNO INT, @MASTERCHALLANSERIALNO INT, @CHALLANSERIALNO INT;
   SELECT @CORRCHALLANSERIALNO=ISNULL(MAX(CHALLANSERIALNO),0)+1 FROM CORRCHALLANDETAIL WITH(NOLOCK)
                   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
       SELECT @MASTERCHALLANSERIALNO=ISNULL(MAX(SERIALNO),0)+1 FROM CHALLANDETAIL WITH(NOLOCK)
                   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
      IF(@MASTERCHALLANSERIALNO > @CORRCHALLANSERIALNO)
    BEGIN
    SET @CHALLANSERIALNO=@MASTERCHALLANSERIALNO
    END
      ELSE
    BEGIN
     SET @CHALLANSERIALNO=@CORRCHALLANSERIALNO
    END
 SELECT @CHALLANSERIALNO     ;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMAXSERIALNOFORDEDUCTION')
DROP PROCEDURE USP_TDS_GETMAXSERIALNOFORDEDUCTION
GO
CREATE PROCEDURE [USP_TDS_GETMAXSERIALNOFORDEDUCTION]
@BRANCHCODE VARCHAR(10)
AS
	BEGIN
		SELECT ISNULL(MAX(DD.SERIALNO),0)+1 AS SERIALNO FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CD  WITH(NOLOCK) ON CD.BRANCHID = DD.BRANCHID
			WHERE CD.BRANCHCODE= @BRANCHCODE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMEDICALREIMBURSEMENT')
DROP PROCEDURE USP_TDS_GETMEDICALREIMBURSEMENT
GO
CREATE PROCEDURE [USP_TDS_GETMEDICALREIMBURSEMENT]
@COMID INT,
@MONTHID INT
AS  
  BEGIN  
	 DECLARE @TAXABLEPERKID INT;  
	 SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK) WHERE COMID = @COMID AND PERKID = 16 AND MONTHID = @MONTHID;     
	 SELECT MEDICALREMID, GROSSAMT, EXEMPTAMT, NETAMT FROM MEDICALREIMBURSEMENT WITH (NOLOCK) WHERE TAXABLEPERKID = @TAXABLEPERKID;  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMINISTRY')
DROP PROCEDURE USP_TDS_GETMINISTRY
GO
CREATE PROCEDURE [USP_TDS_GETMINISTRY]
AS
	BEGIN
		SELECT MINISTRYID AS MINISTRYID,MINISTRYNAME AS MINISTRYNAME,MINISTRYCODE AS MINISTRYCODE FROM MINISTRYLIST  WITH(NOLOCK);
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMISChallanRegister')
DROP PROCEDURE USP_TDS_GetMISChallanRegister
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetMISChallanRegister]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTION VARCHAR(MAX),
	@FROMDATE SMALLDATETIME = NULL,
	@TODATE SMALLDATETIME = NULL       
AS 
	BEGIN 
		DECLARE @QUERY NVARCHAR(MAX);
		SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTION,',')
		SELECT CD.BRANCHID,CD.FORMID,CD.QUARTER,CD.SERIALNO,
		CAST(CD.SERIALNO AS VARCHAR)+':Q'+CAST(CD.QUARTER AS VARCHAR) AS CHALLANSLNO,
		CD.SECTIONID,TS.SECTIONNAME,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,
		CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,
		CASE WHEN CD.MODEOFPAYMENT=3 THEN CD.TRNVOUCHERNO ELSE  CD.BANKCHALLANNO END BANKCHALLANNO,
		CD.CHALLANPAIDDATE,CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.BANKID,RB.BSRCODE,
		CASE WHEN CD.MINORHEAD = 200 THEN CAST(CD.MINORHEAD AS VARCHAR)+'-'+'Payable by Taxpayer' 
		ELSE CAST(CD.MINORHEAD AS VARCHAR)+'-'+'Regular Assessment' END MINORHEAD, 
		CASE WHEN CD.ISCOMPANY = 1 THEN 'Company' ELSE 'Non Company' END ISCOMPANY
		INTO #TEMP
		FROM   CHALLANDETAIL CD WITH(NOLOCK) 
		INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID = TS.SECTIONID
		INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID = CD.BANKID
		IF(@SECTION <> '-1')
		 BEGIN
			SET @QUERY = 'SELECT BRANCHID,SS.FORMID,QUARTER,SERIALNO,CHALLANSLNO,SS.SECTIONID,SS.SECTIONNAME,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
								 CHALLANTOTAL,BANKCHALLANNO,CHALLANPAIDDATE,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,BSRCODE,MINORHEAD,ISCOMPANY
						  FROM   #TEMP SS
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = SS.SECTIONID
						  INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME 													 
						  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);
         END
        ELSE
         BEGIN
			SET @QUERY = 'SELECT BRANCHID,FORMID,QUARTER,SERIALNO,CHALLANSLNO,SECTIONID,SECTIONNAME,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
								 CHALLANTOTAL,BANKCHALLANNO,CHALLANPAIDDATE,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,BSRCODE,MINORHEAD,ISCOMPANY
						  FROM   #TEMP WITH(NOLOCK)													 
						  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);
         END
		--IF (@SECTION <> -1)
		--	SET @QUERY = @QUERY + ' AND SECTIONID = ' + CAST(@SECTION AS VARCHAR);
		IF (@QUARTER <> -1)
			SET @QUERY = @QUERY + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR);
		IF(@FROMDATE <> '')
			SET @QUERY = @QUERY+ '  AND CHALLANPAIDDATE >= ''' + CAST(@FROMDATE AS VARCHAR) + '''';
		IF(@TODATE <> '')
			SET @QUERY = @QUERY + ' AND CHALLANPAIDDATE <= ''' + CAST(@TODATE AS VARCHAR) + '''';
		 EXECUTE SP_EXECUTESQL @QUERY;       
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMISChallanRegisterCBI')
DROP PROCEDURE USP_TDS_GetMISChallanRegisterCBI
GO
CREATE PROCEDURE USP_TDS_GetMISChallanRegisterCBI --'-1','-1',08,'-1',1359
	@BRANCHID INT,
	@FORMID INT,
	@MONTH INT,
	@SECTION VARCHAR(MAX),
	@USERID INT
AS 
	BEGIN 
		DECLARE @QUERY NVARCHAR(MAX);
		DECLARE @BRANCH INT;
		SELECT @BRANCH = BRANCHID FROM USERMASTER WHERE USERID = @USERID
		SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTION,',')
		SELECT CD.BRANCHID,CD.FORMID,CD.QUARTER,CD.SERIALNO,
		CAST(CD.SERIALNO AS VARCHAR)+':Q'+CAST(CD.QUARTER AS VARCHAR) AS CHALLANSLNO,
		CD.SECTIONID,TS.SECTIONNAME,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,
		CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,
		CASE WHEN CD.MODEOFPAYMENT=3 THEN CD.TRNVOUCHERNO ELSE  CD.BANKCHALLANNO END BANKCHALLANNO,
		CD.CHALLANPAIDDATE,CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON 
		INTO #TEMP
		FROM   CHALLANDETAIL CD WITH(NOLOCK) 
		INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID = TS.SECTIONID
		WHERE MONTH(CHALLANPAIDDATE) = @MONTH
		IF(@SECTION <> '-1')
		 BEGIN
			SET @QUERY = 'SELECT CB.BRANCHNAME,CB.BRANCHCODE,SS.BRANCHID,SS.FORMID,QUARTER,SERIALNO,CHALLANSLNO,SS.SECTIONID,SS.SECTIONNAME,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
								 CHALLANTOTAL,BANKCHALLANNO,CHALLANPAIDDATE,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON
						  FROM   #TEMP SS
						  INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = SS.BRANCHID
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = SS.SECTIONID
						  INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME
						  WHERE PARENTBASEID LIKE ( SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK)    
								WHERE BRANCHID = '+ CAST(@BRANCH AS VARCHAR) +')+''%''' 													 
						  --WHERE SS.FORMID = ' + CAST(@FORMID AS VARCHAR);
			IF(@BRANCHID <> '-1')
				BEGIN
					SET @QUERY = @QUERY + ' AND SS.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
				END
         END
        ELSE
         BEGIN
			SET @QUERY = 'SELECT CB.BRANCHNAME,CB.BRANCHCODE,SS.BRANCHID,FORMID,QUARTER,SERIALNO,CHALLANSLNO,SECTIONID,SECTIONNAME,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
								 CHALLANTOTAL,BANKCHALLANNO,CHALLANPAIDDATE,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON
						  FROM   #TEMP SS WITH(NOLOCK)
						  INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = SS.BRANCHID
						  WHERE PARENTBASEID LIKE ( SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK)    
								WHERE BRANCHID = '+ CAST(@BRANCH AS VARCHAR) +')+''%'''													 
						  --WHERE  FORMID = ' + CAST(@FORMID AS VARCHAR);
			IF(@BRANCHID <> '-1')
				BEGIN
					SET @QUERY = @QUERY + ' AND SS.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
				END
         END
		 EXECUTE SP_EXECUTESQL @QUERY;       
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMISDeductionRegisterDetails')
DROP PROCEDURE USP_TDS_GetMISDeductionRegisterDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetMISDeductionRegisterDetails] 
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @NAME VARCHAR(75),  
 @SECTION VARCHAR(MAX),           
 @FROMDATE SMALLDATETIME = NULL,  
 @TODATE SMALLDATETIME = NULL,
 @SHOWUNLINKEDCHALLANS BIT = 0,
 @ISSB BIT = 0
AS  
 BEGIN  
	DECLARE @SQLQUERY NVARCHAR(MAX);
	CREATE TABLE #DEDUCTIONDETAIL(FORMID INT,BRANCHID INT,QUARTER INT,SECTIONID INT,PAYMENTMADE NUMERIC(13,2),PAYMENTDATE SMALLDATETIME,INCOMETAX NUMERIC(13,2),SURCHARGE NUMERIC(13,2),
		EDUCATIONCESS NUMERIC(13,2),TOTALDEDUCTED NUMERIC(13,2),DEDUCTEDDATE SMALLDATETIME,NONDEDREASON INT,DEDUCTEEID INT,TAXRATE NUMERIC(7,4),DEDUCTIONID INT,ORDERID INT, RTBRANCHID INT)
	DECLARE @RTBRANCHID INT,@ISZORO INT;
	SET @RTBRANCHID = @BRANCHID
	IF((SELECT TOP 1 DEDUCTORID FROM DEDUCTOR WITH(NOLOCK) WHERE TAN = 'HYDA08387B') <> '')
		BEGIN
			SELECT @ISZORO = ISZORO FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID
			IF(@ISZORO = 0)
				BEGIN
					IF(@FORMID <> 1)
						BEGIN
							SET @BRANCHID = (SELECT PARENTBRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @RTBRANCHID)
						END
				END
		END	
	IF (@ISSB = 1)
	BEGIN
		INSERT INTO #DEDUCTIONDETAIL
		SELECT FORMID,BRANCHID,[QUARTER],SECTIONID,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,
			EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON,DEDUCTEEID,TAXRATE,DEDUCTIONID,ORDERID,RTBRANCHID
		FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID
			AND ISNULL(TRANSSTATUS,2) = 2 
	END
	ELSE
	BEGIN
		INSERT INTO #DEDUCTIONDETAIL
		SELECT FORMID,BRANCHID,[QUARTER],SECTIONID,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,
			EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON,DEDUCTEEID,TAXRATE,DEDUCTIONID,ORDERID,RTBRANCHID
		FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID
	END
	SELECT DL.BRANCHID,DL.DEDUCTIONID,DL.CHALLANID
	INTO #DEDCHALINK
	FROM DEDCHALINK DL WITH(NOLOCK)
	INNER JOIN #DEDUCTIONDETAIL DD
		ON DD.DEDUCTIONID = DL.DEDUCTIONID
		AND DD.BRANCHID = DL.BRANCHID
	SELECT BRANCHID,CHALLANID
	INTO #CHALLANDETAIL
	FROM CHALLANDETAIL WITH(NOLOCK)
	WHERE BRANCHID = @BRANCHID 
		AND FORMID = @FORMID 
	SELECT NAME,PAN,DEDUCTEEID,REFERENCENO 
	INTO #DEDUCTEE
	FROM DEDUCTEE WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID
	IF(@FORMID = 1)
	BEGIN
		SELECT SERIALNO,E.DEDUCTEEID 
		INTO #EMPLOYEE
		FROM EMPLOYEE E WITH(NOLOCK)
		INNER JOIN #DEDUCTEE D
		ON D.DEDUCTEEID = E.DEDUCTEEID
		SELECT E.SERIALNO,D.NAME + '(' + CAST(E.SERIALNO AS VARCHAR) +')' AS NAME,PAN,
		DD.FORMID,DD.BRANCHID,DD.[QUARTER],DD.SECTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
		CASE WHEN DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'
			ELSE 
				CASE WHEN DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197' 
					ELSE 
						CASE WHEN DD.NONDEDREASON = 3 THEN 'PAN NOT AVAILABLE - HIGHER RATE (20%)' 
							ELSE '' END END END AS NONDEDREASON,D.REFERENCENO,
		DD.RTBRANCHID
		INTO #TEMP24
		FROM   #DEDUCTIONDETAIL DD WITH(NOLOCK) 
		INNER JOIN #DEDUCTEE D WITH(NOLOCK) 
		ON  DD.DEDUCTEEID = D.DEDUCTEEID 
		INNER JOIN #EMPLOYEE E WITH(NOLOCK) 
		ON  D.DEDUCTEEID = E.DEDUCTEEID
	END
	ELSE
	BEGIN  
		SELECT SERIALNO,NE.DEDUCTEEID,DEDUCTEECODE 
		INTO #NONEMPLOYEE
		FROM NONEMPLOYEE NE WITH(NOLOCK)
		INNER JOIN #DEDUCTEE D
		ON D.DEDUCTEEID = NE.DEDUCTEEID
		SELECT NE.SERIALNO,D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME, PAN,   
			DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
			DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
			TS.SECTIONNAME,DL.CHALLANID,PO.ORDERNO,PO.ORDERDATE,  
			CASE WHEN DD.FORMID = 2
				THEN    
					CASE  DD.NONDEDREASON     
					WHEN  1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'     
					WHEN  2 THEN 'NO DEDUCTION U/S 197A'   
					WHEN  3 THEN 'PAN Not available - Higher Rate (20%)'    
					WHEN  4 THEN 'Transporter with valid PAN (0%)'    
					WHEN  5 THEN 'Amount Paid/Credited is Under Threshold'
					WHEN  6 THEN 'Software Vendor Transaction'
					WHEN  7 THEN 'NO DEDUCTION U/S 197A(1F)'
					WHEN  8 THEN 'Deduction on Interest Income for Senior Citizens'
					ELSE ''
					END    
				WHEN DD.FORMID = 3  
				THEN    
					CASE DD.NONDEDREASON    
					WHEN 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'     
					WHEN 2 THEN 'NO DEDUCTION U/S 197A'    
					WHEN 3 THEN 'PAN Not available - Higher Rate (20%)'    
					WHEN 6 THEN 'Software Vendor Transaction' 
					ELSE ''     
					END    
				WHEN DD.FORMID = 4  
				THEN    
					CASE DD.NONDEDREASON    
					WHEN 1 THEN 'AS PER SECTION 206C(9)'     
					WHEN 2 THEN 'ANY OTHER REASON'    
					ELSE ''     
					END        
		   END AS NONDEDREASON,
		   CASE WHEN NE.DEDUCTEECODE = 1 THEN 'Companies' ELSE 'Non Companies' END AS DEDCODE,D.REFERENCENO,
		   DD.RTBRANCHID
		   INTO #TEMP26    
		   FROM #DEDUCTIONDETAIL DD
		   INNER JOIN #DEDUCTEE D  ON  DD.DEDUCTEEID = D.DEDUCTEEID    
		   INNER JOIN #NONEMPLOYEE NE ON  D.DEDUCTEEID = NE.DEDUCTEEID    
		   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
		   LEFT JOIN #DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
		   LEFT JOIN #CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
		   LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID
	END
	IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
			DROP TABLE #DEDUCTEE
	IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
			DROP TABLE #DEDUCTIONDETAIL
	IF OBJECT_ID('TEMPDB..#NONEMPLOYEE') IS NOT NULL
			DROP TABLE #NONEMPLOYEE
	IF OBJECT_ID('TEMPDB..#EMPLOYEE') IS NOT NULL
			DROP TABLE #EMPLOYEE
	IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
			DROP TABLE #DEDCHALINK
	IF OBJECT_ID('TEMPDB..#CHALLANDETAIL') IS NOT NULL
			DROP TABLE #CHALLANDETAIL	
	SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTION,',')  
	IF @SECTION <> '-1'
	BEGIN
	  IF @FORMID = 1  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN,REFERENCENO,SS.FORMID,BRANCHID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON  
				 FROM   #TEMP24 SS
				 INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = SS.SECTIONID
				 INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
		   END  
	  ELSE  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN,REFERENCENO, BRANCHID,SS.FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									TOTALDEDUCTED,DEDUCTEDDATE,SS.TAXRATE,SS.SECTIONID,SS.SECTIONNAME,NONDEDREASON,ISNULL(ORDERNO,'''')ORDERNO,
									ORDERDATE,DEDCODE  
				 FROM #TEMP26 SS
				 INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = SS.SECTIONID
				 INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
		   END  
	   END
	  ELSE
	BEGIN
	   IF @FORMID = 1  
		BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN,REFERENCENO, FORMID,BRANCHID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON  
				 FROM   #TEMP24   
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
		END  
	  ELSE  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN,REFERENCENO, BRANCHID,FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									TOTALDEDUCTED,DEDUCTEDDATE,TAXRATE,SECTIONID,SECTIONNAME,NONDEDREASON,ISNULL(ORDERNO,'''')ORDERNO,
									ORDERDATE,DEDCODE   
				 FROM #TEMP26  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
	   END  
	END 
	IF(@SHOWUNLINKEDCHALLANS = 1)
	SET @SQLQUERY = @SQLQUERY + ' AND CHALLANID IS NULL'  
	IF (@NAME <> '')  
		SET @SQLQUERY = @SQLQUERY + ' AND NAME LIKE ''' + CAST(@NAME AS VARCHAR(75)) + '%''';  
	IF(@FROMDATE <> '')  
		SET @SQLQUERY = @SQLQUERY + ' AND PAYMENTDATE >= ''' + CAST(@FROMDATE AS VARCHAR) + '''';  
	IF(@TODATE <> '')  
		SET @SQLQUERY = @SQLQUERY + ' AND PAYMENTDATE <= ''' + CAST(@TODATE AS VARCHAR) + '''';   
	IF (@QUARTER <> -1)  
		SET @SQLQUERY = @SQLQUERY + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR);
	IF(@RTBRANCHID <> @BRANCHID)
		SET @SQLQUERY = @SQLQUERY + ' AND RTBRANCHID = ' + CAST(@RTBRANCHID AS VARCHAR);      
	EXEC SP_EXECUTESQL @SQLQUERY;
	IF OBJECT_ID('TEMPDB..#SECTIONS') IS NOT NULL
			DROP TABLE #SECTIONS
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMISDeductionRegisterDetailsAB')
DROP PROCEDURE USP_TDS_GetMISDeductionRegisterDetailsAB
GO
CREATE PROCEDURE USP_TDS_GetMISDeductionRegisterDetailsAB
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @NAME VARCHAR(75),  
 @SECTION VARCHAR(MAX),           
 @FROMDATE SMALLDATETIME = NULL,  
 @TODATE SMALLDATETIME = NULL,
 @SHOWUNLINKEDCHALLANS BIT = 0,
 @ISSB BIT = 0
AS  
 BEGIN	 
	DECLARE @SQLQUERY NVARCHAR(MAX),@RTBRANCHID INT,@ISZORO INT,@RTBRANCHCODE VARCHAR(5);
	SET @RTBRANCHID = @BRANCHID
	SELECT @ISZORO = ISZORO FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID
	SELECT @RTBRANCHCODE = BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID = @RTBRANCHID
	IF(@ISZORO = 0)
	BEGIN
		IF(@FORMID = 1)
			BEGIN
				SET @BRANCHID = @BRANCHID
			END
		ELSE
			BEGIN
				SET @BRANCHID = (SELECT PARENTBRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @RTBRANCHID)
			END
	END
	CREATE TABLE #DEDUCTIONDETAIL(FORMID INT,BRANCHID INT,QUARTER INT,SECTIONID INT,PAYMENTMADE NUMERIC(13,2),
					PAYMENTDATE SMALLDATETIME,INCOMETAX NUMERIC(13,2),SURCHARGE NUMERIC(13,2),EDUCATIONCESS NUMERIC(13,2),
					TOTALDEDUCTED NUMERIC(13,2),DEDUCTEDDATE SMALLDATETIME,NONDEDREASON INT,DEDUCTEEID INT,TAXRATE NUMERIC(7,4),
					DEDUCTIONID INT,ORDERID INT,RTBRANCHID INT)
	INSERT INTO #DEDUCTIONDETAIL
	SELECT FORMID,BRANCHID,[QUARTER],SECTIONID,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,
		EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON,DEDUCTEEID,TAXRATE,DEDUCTIONID,ORDERID,RTBRANCHID
	FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID 
		AND FORMID = @FORMID
	SELECT DL.BRANCHID,DL.DEDUCTIONID,DL.CHALLANID
	INTO #DEDCHALINK
	FROM DEDCHALINK DL WITH(NOLOCK)
	INNER JOIN #DEDUCTIONDETAIL DD
		ON DD.DEDUCTIONID = DL.DEDUCTIONID
		AND DD.BRANCHID = DL.BRANCHID
	SELECT BRANCHID,CHALLANID
	INTO #CHALLANDETAIL
	FROM CHALLANDETAIL WITH(NOLOCK)
	WHERE BRANCHID = @BRANCHID 
		AND FORMID = @FORMID 
	SELECT NAME,PAN,DEDUCTEEID 
	INTO #DEDUCTEE
	FROM DEDUCTEE WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID
	IF(@FORMID = 1)
		BEGIN
			SELECT SERIALNO,E.DEDUCTEEID 
			INTO #EMPLOYEE
			FROM EMPLOYEE E WITH(NOLOCK)
			INNER JOIN #DEDUCTEE D
			ON D.DEDUCTEEID = E.DEDUCTEEID
			SELECT E.SERIALNO,D.NAME + '(' + CAST(E.SERIALNO AS VARCHAR) +')' AS NAME,PAN,
			DD.FORMID,DD.BRANCHID,DD.[QUARTER],DD.SECTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,
			DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
			CASE WHEN DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'
				ELSE 
					CASE WHEN DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197' 
						ELSE 
							CASE WHEN DD.NONDEDREASON = 3 THEN 'PAN NOT AVAILABLE - HIGHER RATE (20%)' 
								ELSE '' END END END AS NONDEDREASON,CB.BRANCHCODE
			INTO #TEMP24
			FROM   #DEDUCTIONDETAIL DD WITH(NOLOCK) 
			INNER JOIN #DEDUCTEE D WITH(NOLOCK) 
				ON  DD.DEDUCTEEID = D.DEDUCTEEID 
			INNER JOIN #EMPLOYEE E WITH(NOLOCK) 
				ON  D.DEDUCTEEID = E.DEDUCTEEID
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
				ON  CB.BRANCHID = DD.RTBRANCHID
			WHERE DD.RTBRANCHID IS NOT NULL
		END
	ELSE
		BEGIN  
			SELECT SERIALNO,NE.DEDUCTEEID,DEDUCTEECODE 
			INTO #NONEMPLOYEE
			FROM NONEMPLOYEE NE WITH(NOLOCK)
			INNER JOIN #DEDUCTEE D
			ON D.DEDUCTEEID = NE.DEDUCTEEID
			SELECT NE.SERIALNO,D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME, PAN,   
				DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
				DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
				TS.SECTIONNAME,DL.CHALLANID,PO.ORDERNO,PO.ORDERDATE,  
				CASE WHEN DD.FORMID = 2
					THEN    
						CASE  DD.NONDEDREASON     
						WHEN  1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'     
						WHEN  2 THEN 'NO DEDUCTION U/S 197A'    
						WHEN  3 THEN 'PAN Not available - Higher Rate (20%)'    
						WHEN  4 THEN 'Transporter with valid PAN (0%)'    
						WHEN  5 THEN 'Amount Paid/Credited is Under Threshold'
						WHEN  6 THEN 'Software Vendor Transaction'
						WHEN  7 THEN 'NO DEDUCTION U/S 197A(1F)'
						WHEN  8 THEN 'Deduction on Interest Income for Senior Citizens'
						ELSE ''
						END    
					WHEN DD.FORMID = 3  
					THEN    
						CASE DD.NONDEDREASON    
						WHEN 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'     
						WHEN 2 THEN 'NO DEDUCTION U/S 197A'    
						WHEN 3 THEN 'PAN Not available - Higher Rate (20%)'    
						WHEN 6 THEN 'Software Vendor Transaction' 
						ELSE ''   
						END    
					WHEN DD.FORMID = 4  
					THEN    
						CASE DD.NONDEDREASON    
						WHEN 1 THEN 'AS PER SECTION 206C(9)'     
						WHEN 2 THEN 'ANY OTHER REASON'    
						ELSE ''     
						END        
			   END AS NONDEDREASON,
			   CASE WHEN NE.DEDUCTEECODE = 1 THEN 'Companies' ELSE 'Non Companies' END AS DEDCODE,CB.BRANCHCODE
			   INTO #TEMP26    
			   FROM #DEDUCTIONDETAIL DD
			   INNER JOIN #DEDUCTEE D  ON  DD.DEDUCTEEID = D.DEDUCTEEID    
			   INNER JOIN #NONEMPLOYEE NE ON  D.DEDUCTEEID = NE.DEDUCTEEID    
			   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
			   LEFT JOIN #DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
			   LEFT JOIN #CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
			   LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID
			   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON  CB.BRANCHID = DD.RTBRANCHID
			WHERE DD.RTBRANCHID IS NOT NULL
		END
	IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
			DROP TABLE #DEDUCTEE
	IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
			DROP TABLE #DEDUCTIONDETAIL
	IF OBJECT_ID('TEMPDB..#NONEMPLOYEE') IS NOT NULL
			DROP TABLE #NONEMPLOYEE
	IF OBJECT_ID('TEMPDB..#EMPLOYEE') IS NOT NULL
			DROP TABLE #EMPLOYEE
	IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
			DROP TABLE #DEDCHALINK
	IF OBJECT_ID('TEMPDB..#CHALLANDETAIL') IS NOT NULL
			DROP TABLE #CHALLANDETAIL	
	SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTION,',')  
	IF @SECTION <> '-1'
	BEGIN
	  IF @FORMID = 1  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN,SS.FORMID,BRANCHID,[QUARTER],PAYMENTMADE,
							 PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,
							 NONDEDREASON,BRANCHCODE  
				 FROM   #TEMP24 SS
				 INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = SS.SECTIONID
				 INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
		   END  
	  ELSE  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN, BRANCHID,SS.FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									TOTALDEDUCTED,DEDUCTEDDATE,SS.TAXRATE,SS.SECTIONID,SS.SECTIONNAME,NONDEDREASON,ISNULL(ORDERNO,'''')ORDERNO,
									ORDERDATE,DEDCODE,BRANCHCODE   
				 FROM #TEMP26 SS
				 INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = SS.SECTIONID
				 INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
		   END  
	   END
	  ELSE
	BEGIN
	   IF @FORMID = 1  
		BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN, FORMID,BRANCHID,[QUARTER],PAYMENTMADE,
									PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,
									DEDUCTEDDATE,NONDEDREASON,BRANCHCODE  
				 FROM   #TEMP24   
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
		END  
	  ELSE  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN, BRANCHID,FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									TOTALDEDUCTED,DEDUCTEDDATE,TAXRATE,SECTIONID,SECTIONNAME,NONDEDREASON,ISNULL(ORDERNO,'''')ORDERNO,
									ORDERDATE,DEDCODE,BRANCHCODE   
				 FROM #TEMP26  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
	   END  
	END 
	IF(@SHOWUNLINKEDCHALLANS = 1)
	SET @SQLQUERY = @SQLQUERY + ' AND CHALLANID IS NULL'  
	IF (@NAME <> '')  
	SET @SQLQUERY = @SQLQUERY + ' AND NAME LIKE ''' + CAST(@NAME AS VARCHAR(75)) + '%''';  
	IF(@FROMDATE <> '')  
	SET @SQLQUERY = @SQLQUERY + ' AND PAYMENTDATE >= ''' + CAST(@FROMDATE AS VARCHAR) + '''';  
	IF(@TODATE <> '')  
	SET @SQLQUERY = @SQLQUERY + ' AND PAYMENTDATE <= ''' + CAST(@TODATE AS VARCHAR) + '''';   
	IF (@QUARTER <> -1)  
	SET @SQLQUERY = @SQLQUERY + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR);
	IF(@RTBRANCHID <> @BRANCHID)
	SET @SQLQUERY = @SQLQUERY + ' AND  BRANCHCODE = ' + CAST(@RTBRANCHCODE AS VARCHAR);   
	EXEC SP_EXECUTESQL @SQLQUERY;
	IF OBJECT_ID('TEMPDB..#SECTIONS') IS NOT NULL
			DROP TABLE #SECTIONS
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMISDeductionRegisterDetailsCBI')
DROP PROCEDURE USP_TDS_GetMISDeductionRegisterDetailsCBI
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetMISDeductionRegisterDetailsCBI]  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @NAME VARCHAR(75),  
 @SECTION VARCHAR(MAX),           
 @FROMDATE SMALLDATETIME = NULL,  
 @TODATE SMALLDATETIME = NULL,
 @SHOWUNLINKEDCHALLANS BIT = 0  
AS  
 BEGIN  
  DECLARE @SQLQUERY NVARCHAR(MAX);
  SELECT * 
  INTO #DEDUCTIONDETAIL
  FROM DEDUCTIONDETAIL WITH(NOLOCK) 
  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID --AND [QUARTER] = @QUARTER
  SELECT * 
  INTO #DEDUCTEE
  FROM DEDUCTEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
  IF(@FORMID = 1)
	  BEGIN
		SELECT E.* 
		  INTO #EMPLOYEE
		  FROM EMPLOYEE E WITH(NOLOCK)
		  INNER JOIN #DEDUCTEE D
		  ON D.DEDUCTEEID = E.DEDUCTEEID
		SELECT E.SERIALNO,D.NAME + '(' + CAST(E.SERIALNO AS VARCHAR) +')' AS NAME,PAN,
			   DD.FORMID,DD.BRANCHID,DD.[QUARTER],DD.SECTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
			   CASE WHEN DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'
											 ELSE 
												 CASE WHEN DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197' 
																			   ELSE 
																					CASE WHEN DD.NONDEDREASON = 3 THEN 'PAN NOT AVAILABLE - HIGHER RATE (20%)' 
																												  ELSE '' END END END AS NONDEDREASON
		INTO #TEMP24
		FROM   #DEDUCTIONDETAIL DD WITH(NOLOCK) 
		INNER JOIN #DEDUCTEE D WITH(NOLOCK) 
		ON  DD.DEDUCTEEID = D.DEDUCTEEID 
		INNER JOIN #EMPLOYEE E WITH(NOLOCK) 
		ON  D.DEDUCTEEID = E.DEDUCTEEID
	  END
  ELSE
	  BEGIN
		SELECT NE.* 
			INTO #NONEMPLOYEE
			FROM NONEMPLOYEE NE WITH(NOLOCK)
			INNER JOIN #DEDUCTEE D
			ON D.DEDUCTEEID = NE.DEDUCTEEID
		SELECT NE.SERIALNO,D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME, PAN,   
			 DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
			 DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
			 TS.SECTIONNAME,DL.CHALLANID,PO.ORDERNO,PO.ORDERDATE,  
			 CASE WHEN DD.FORMID = 2
			  THEN    
				CASE  DD.NONDEDREASON     
				WHEN  1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'     
				WHEN  2 THEN 'NO DEDUCTION U/S 197A'    
				WHEN  3 THEN 'PAN Not available - Higher Rate (20%)'    
				WHEN  4 THEN 'Transporter with valid PAN (0%)'    
				WHEN  5 THEN 'Amount Paid/Credited is Under Threshold'
				WHEN  6 THEN 'Software Vendor Transaction'
				WHEN  7 THEN 'NO DEDUCTION U/S 197A(1F)'
				WHEN  8 THEN 'Deduction on Interest Income for Senior Citizens'
				ELSE ''
				END    
				 WHEN DD.FORMID = 3  
			  THEN    
				  CASE DD.NONDEDREASON    
				 WHEN 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'     
				   WHEN 2 THEN 'NO DEDUCTION U/S 197A'    
				   WHEN 3 THEN 'PAN Not available - Higher Rate (20%)'    
				   WHEN 6 THEN 'Software Vendor Transaction' 
				 ELSE ''     
				  END    
		  WHEN DD.FORMID = 4  
			  THEN    
				  CASE DD.NONDEDREASON    
				 WHEN 1 THEN 'AS PER SECTION 206C(9)'     
				   WHEN 2 THEN 'ANY OTHER REASON'    
				 ELSE ''     
				  END        
		   END AS NONDEDREASON,
		   CASE WHEN NE.DEDUCTEECODE = 1 THEN 'Companies' ELSE 'Non Companies' END AS DEDCODE,BGLCODEID
		   INTO #TEMP26    
		   FROM #DEDUCTIONDETAIL DD WITH(NOLOCK)
		   INNER JOIN #DEDUCTEE D  WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID    
		   INNER JOIN #NONEMPLOYEE NE WITH(NOLOCK) ON  D.DEDUCTEEID = NE.DEDUCTEEID    
		   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
		   LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
		   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
		   LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID
	  END
   IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
			DROP TABLE #DEDUCTEE
   IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
			DROP TABLE #DEDUCTIONDETAIL
   IF OBJECT_ID('TEMPDB..#NONEMPLOYEE') IS NOT NULL
			DROP TABLE #NONEMPLOYEE
   IF OBJECT_ID('TEMPDB..#EMPLOYEE') IS NOT NULL
			DROP TABLE #EMPLOYEE
  SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTION,',')  
  IF @SECTION <> '-1'
  BEGIN
  	  IF @FORMID = 1  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN,SS.FORMID,BRANCHID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON  
				 FROM   #TEMP24 SS
				 INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = SS.SECTIONID
				 INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
		   END  
	  ELSE  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN, BRANCHID,SS.FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									TOTALDEDUCTED,DEDUCTEDDATE,SS.TAXRATE,SS.SECTIONID,SS.SECTIONNAME,NONDEDREASON,ISNULL(ORDERNO,'''')ORDERNO,
									ORDERDATE,DEDCODE,ISNULL(BGLCODE,'''')BGLCODE  
				 FROM #TEMP26 SS
				 LEFT JOIN TDSRATE TR ON TR.BGLCODEID = SS.BGLCODEID
				 INNER JOIN #SECTIONS S ON S.DATA = TR.BGLCODE  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
		   END  
	   END
	  ELSE
  BEGIN
	   IF @FORMID = 1  
	    BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN, FORMID,BRANCHID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON  
				 FROM   #TEMP24   
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
	    END  
	  ELSE  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN, BRANCHID,FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									TOTALDEDUCTED,DEDUCTEDDATE,TAXRATE,SS.SECTIONID,SECTIONNAME,NONDEDREASON,ISNULL(ORDERNO,'''')ORDERNO,
									ORDERDATE,DEDCODE,ISNULL(BGLCODE,'''')BGLCODE   
				 FROM #TEMP26 SS
				 LEFT JOIN TDSRATE TR ON TR.BGLCODEID = SS.BGLCODEID
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
	   END  
  END 
  IF(@SHOWUNLINKEDCHALLANS = 1)
   SET @SQLQUERY = @SQLQUERY + ' AND CHALLANID IS NULL'  
  IF (@NAME <> '')  
   SET @SQLQUERY = @SQLQUERY + ' AND NAME LIKE ''' + CAST(@NAME AS VARCHAR(75)) + '%''';  
  IF(@FROMDATE <> '')  
   SET @SQLQUERY = @SQLQUERY + ' AND PAYMENTDATE >= ''' + CAST(@FROMDATE AS VARCHAR) + '''';  
  IF(@TODATE <> '')  
   SET @SQLQUERY = @SQLQUERY + ' AND PAYMENTDATE <= ''' + CAST(@TODATE AS VARCHAR) + '''';  
  --IF (@SECTION <> -1)  
  -- SET @SQLQUERY = @SQLQUERY + ' AND SECTIONID = ' + CAST(@SECTION AS VARCHAR);  
  IF (@QUARTER <> -1)  
   SET @SQLQUERY = @SQLQUERY + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR);      
  EXEC SP_EXECUTESQL @SQLQUERY;  
  PRINT @SQLQUERY
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMISDeductionRegisterDetailsForm24QCBI')
DROP PROCEDURE USP_TDS_GetMISDeductionRegisterDetailsForm24QCBI
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetMISDeductionRegisterDetailsForm24QCBI]
 @BRANCHID INT,  
 @FORMID INT,  
 @MONTH INT,  
 @SECTION VARCHAR(MAX),
 @USERID INT          
AS  
	BEGIN  
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @BRANCH INT;
		DECLARE @QUERY NVARCHAR(MAX);
		SELECT @BRANCH = BRANCHID FROM USERMASTER WHERE USERID = @USERID
		CREATE TABLE #TEMP24(SERIALNO INT,NAME VARCHAR(100), PAN VARCHAR(10),BRANCHID INT,FORMID INT,QUARTER INT,PAYMENTMADE NUMERIC(15,2),PAYMENTDATE SMALLDATETIME,
							 INCOMETAX NUMERIC(15,2),SURCHARGE NUMERIC(15,2),EDUCATIONCESS NUMERIC(15,2),TOTALDEDUCTED NUMERIC(15,2),DEDUCTEDDATE SMALLDATETIME,
							 TAXRATE NUMERIC(5,3),SECTIONID INT,SECTIONNAME VARCHAR(25),NONDEDREASON VARCHAR(50),BGLCODEID INT);
		SET @QUERY= 'SELECT * 
					INTO #DEDUCTIONDETAIL
					FROM DEDUCTIONDETAIL WITH(NOLOCK) 
					WHERE MONTH(PAYMENTDATE) = ' + CAST(@MONTH AS VARCHAR) + ' AND FORMID = '+ CAST(@FORMID AS VARCHAR)
					IF(@BRANCHID <> '-1')
					BEGIN
						SET @QUERY = @QUERY + ' AND BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)
					END
					SET @QUERY = @QUERY + ';SELECT * 
											INTO #DEDUCTEE
											FROM DEDUCTEE WITH(NOLOCK)'
					IF(@BRANCHID <> '-1')
					BEGIN
						SET @QUERY = @QUERY + ' WHERE BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)
					END
					SET @QUERY = @QUERY + ';SELECT E.* 
										   INTO #EMPLOYEE
										   FROM EMPLOYEE E WITH(NOLOCK)
										   INNER JOIN #DEDUCTEE D
										   ON D.DEDUCTEEID = E.DEDUCTEEID;'
					SET @QUERY = @QUERY + 'SELECT E.SERIALNO,D.NAME + ''('' + CAST(E.SERIALNO AS VARCHAR) + '')'' AS NAME, PAN,   
									   DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
									   DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
									   TS.SECTIONNAME,     
									   CASE  DD.NONDEDREASON     
									   WHEN  1 THEN ''LOWER DEDUCTION/NO DEDUCTION U/S 197''     
									   WHEN  2 THEN ''NO DEDUCTION U/S 197A''    
									   WHEN  3 THEN ''PAN Not available - Higher Rate (20%)''    
									   ELSE ''''
									   END AS NONDEDREASON,
									   BGLCODEID   
									   FROM #DEDUCTIONDETAIL DD WITH(NOLOCK)
									   INNER JOIN #DEDUCTEE D  WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID    
									   INNER JOIN #EMPLOYEE E WITH(NOLOCK) ON  D.DEDUCTEEID = E.DEDUCTEEID    
									   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID;
										DROP TABLE #DEDUCTEE;
										DROP TABLE #DEDUCTIONDETAIL;
										DROP TABLE #EMPLOYEE;'
		INSERT INTO #TEMP24
		EXEC SP_EXECUTESQL @QUERY;
		--PRINT @QUERY;
		SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTION,',')  
		IF @SECTION <> '-1'
		BEGIN
				SET @SQLQUERY = 'SELECT (CAST(SERIALNO AS VARCHAR) + CAST(BRANCHCODE AS VARCHAR)) AS SERIALNO,BRANCHNAME,BRANCHCODE,NAME,PAN,SS.BRANCHID,SS.FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
								 TOTALDEDUCTED,DEDUCTEDDATE,SS.TAXRATE,SS.SECTIONID,SS.SECTIONNAME,NONDEDREASON  
								 FROM #TEMP24 SS
								 INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = SS.BRANCHID
								 LEFT JOIN TDSRATE TR ON TR.BGLCODEID = SS.BGLCODEID
								 INNER JOIN #SECTIONS S ON S.DATA = TR.BGLCODE  
								 WHERE SS.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
								 PARENTBASEID LIKE ( SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK)    
								 WHERE BRANCHID = '+ CAST(@BRANCH AS VARCHAR) +')+''%'''
				IF(@BRANCHID <> '-1')
					BEGIN
						SET @SQLQUERY = @SQLQUERY + ' AND SS.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
					END
		END
		ELSE
		BEGIN
			SET @SQLQUERY = 'SELECT (CAST(SERIALNO AS VARCHAR) + CAST(BRANCHCODE AS VARCHAR)) AS SERIALNO,BRANCHNAME,BRANCHCODE,NAME,PAN,SS.BRANCHID,FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
							TOTALDEDUCTED,DEDUCTEDDATE,TAXRATE,SS.SECTIONID,SECTIONNAME,NONDEDREASON,ISNULL(BGLCODE,'''')BGLCODE   
							FROM #TEMP24 SS
							INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = SS.BRANCHID
							LEFT JOIN TDSRATE TR ON TR.BGLCODEID = SS.BGLCODEID
							WHERE FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
							PARENTBASEID LIKE ( SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK)    
							WHERE BRANCHID = '+ CAST(@BRANCH AS VARCHAR) +')+''%'''  
			IF(@BRANCHID <> '-1')
				BEGIN
					SET @SQLQUERY = @SQLQUERY + ' AND SS.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
				END
		END  
		--END 
		EXEC SP_EXECUTESQL @SQLQUERY;  
		--PRINT @SQLQUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMISDeductionRegisterDetailsForm26QCBI')
DROP PROCEDURE USP_TDS_GetMISDeductionRegisterDetailsForm26QCBI
GO
CREATE PROCEDURE [USP_TDS_GetMISDeductionRegisterDetailsForm26QCBI] 
 @BRANCHID INT,  
 @FORMID INT,  
 @MONTH INT,  
 @SECTION VARCHAR(MAX),
 @USERID INT          
AS  
	BEGIN  
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @BRANCH INT;
		DECLARE @QUERY NVARCHAR(MAX);
		SELECT @BRANCH = BRANCHID FROM USERMASTER WHERE USERID = @USERID
		CREATE TABLE #TEMP26(SERIALNO INT,NAME VARCHAR(100), PAN VARCHAR(10),BRANCHID INT,FORMID INT,QUARTER INT,PAYMENTMADE NUMERIC(15,2),PAYMENTDATE SMALLDATETIME,
							 INCOMETAX NUMERIC(15,2),SURCHARGE NUMERIC(15,2),EDUCATIONCESS NUMERIC(15,2),TOTALDEDUCTED NUMERIC(15,2),DEDUCTEDDATE SMALLDATETIME,
							 TAXRATE NUMERIC(5,3),SECTIONID INT,SECTIONNAME VARCHAR(25),NONDEDREASON VARCHAR(50),DEDCODE VARCHAR(25),BGLCODEID INT);
		SET @QUERY= 'SELECT * 
					INTO #DEDUCTIONDETAIL
					FROM DEDUCTIONDETAIL WITH(NOLOCK) 
					WHERE MONTH(PAYMENTDATE) = ' + CAST(@MONTH AS VARCHAR) + ' AND FORMID = '+ CAST(@FORMID AS VARCHAR)
					IF(@BRANCHID <> '-1')
					BEGIN
						SET @QUERY = @QUERY + ' AND BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)
					END
					SET @QUERY = @QUERY + ';SELECT * 
											INTO #DEDUCTEE
											FROM DEDUCTEE WITH(NOLOCK)'
					IF(@BRANCHID <> '-1')
					BEGIN
						SET @QUERY = @QUERY + ' WHERE BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)
					END
					SET @QUERY = @QUERY + ';SELECT NE.* 
										   INTO #NONEMPLOYEE
										   FROM NONEMPLOYEE NE WITH(NOLOCK)
										   INNER JOIN #DEDUCTEE D
										   ON D.DEDUCTEEID = NE.DEDUCTEEID;'
					SET @QUERY = @QUERY + 'SELECT NE.SERIALNO,D.NAME + ''('' + CAST(NE.SERIALNO AS VARCHAR) + '')'' AS NAME, PAN,   
									   DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
									   DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
									   TS.SECTIONNAME,  
									   CASE WHEN DD.FORMID = 2
									   THEN    
									   CASE  DD.NONDEDREASON     
									   WHEN  1 THEN ''LOWER DEDUCTION/NO DEDUCTION U/S 197''     
									   WHEN  2 THEN ''NO DEDUCTION U/S 197A''    
									   WHEN  3 THEN ''PAN Not available - Higher Rate (20%)''    
									   WHEN  4 THEN ''Transporter with valid PAN (0%)''   
									   WHEN  5 THEN ''Amount Paid/Credited is Under Threshold''
									   ELSE ''''
									   END    
									   WHEN DD.FORMID = 3  
									   THEN    
									   CASE DD.NONDEDREASON    
									   WHEN 1 THEN ''LOWER DEDUCTION/NO DEDUCTION U/S 195/197''     
									   WHEN 2 THEN ''NO DEDUCTION U/S 197A''
									   WHEN 3 THEN ''PAN Not available - Higher Rate (20%)''
									   WHEN 6 THEN ''Software Vendor Transaction''
									   ELSE ''''     
									   END    
									   WHEN DD.FORMID = 4  
									   THEN    
									   CASE DD.NONDEDREASON    
									   WHEN 1 THEN ''AS PER SECTION 206C(9)''    
									   WHEN 2 THEN ''ANY OTHER REASON''    
									   ELSE ''''     
									   END        
									   END AS NONDEDREASON,
									   CASE WHEN NE.DEDUCTEECODE = 1 THEN ''Companies'' ELSE ''Non Companies'' END AS DEDCODE,BGLCODEID   
									   FROM #DEDUCTIONDETAIL DD WITH(NOLOCK)
									   INNER JOIN #DEDUCTEE D  WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID    
									   INNER JOIN #NONEMPLOYEE NE WITH(NOLOCK) ON  D.DEDUCTEEID = NE.DEDUCTEEID    
									   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID;
										DROP TABLE #DEDUCTEE;
										DROP TABLE #DEDUCTIONDETAIL;
										DROP TABLE #NONEMPLOYEE;'
		INSERT INTO #TEMP26
		EXEC SP_EXECUTESQL @QUERY;
		--PRINT @QUERY;
		SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTION,',')  
		IF @SECTION <> '-1'
			BEGIN
				SET @SQLQUERY = 'SELECT (CAST(SERIALNO AS VARCHAR) + CAST(BRANCHCODE AS VARCHAR)) AS SERIALNO,BRANCHNAME,BRANCHCODE,NAME,PAN,SS.BRANCHID,SS.FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
								 TOTALDEDUCTED,DEDUCTEDDATE,SS.TAXRATE,SS.SECTIONID,SS.SECTIONNAME,NONDEDREASON,DEDCODE  
								 FROM #TEMP26 SS
								 INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = SS.BRANCHID
								 LEFT JOIN TDSRATE TR ON TR.BGLCODEID = SS.BGLCODEID
								 INNER JOIN #SECTIONS S ON S.DATA = TR.BGLCODE  
								 WHERE SS.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
								 PARENTBASEID LIKE ( SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK)    
								 WHERE BRANCHID = '+ CAST(@BRANCH AS VARCHAR) +')+''%'''
				IF(@BRANCHID <> '-1')
					BEGIN
						SET @SQLQUERY = @SQLQUERY + ' AND SS.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
					END
				END
				ELSE
				BEGIN
				SET @SQLQUERY = 'SELECT (CAST(SERIALNO AS VARCHAR) + CAST(BRANCHCODE AS VARCHAR)) AS SERIALNO,BRANCHNAME,BRANCHCODE,NAME,PAN,SS.BRANCHID,FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
								TOTALDEDUCTED,DEDUCTEDDATE,TAXRATE,SS.SECTIONID,SECTIONNAME,NONDEDREASON,DEDCODE,ISNULL(BGLCODE,'''')BGLCODE   
								FROM #TEMP26 SS
								INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = SS.BRANCHID
								LEFT JOIN TDSRATE TR ON TR.BGLCODEID = SS.BGLCODEID
								WHERE FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
								PARENTBASEID LIKE ( SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK)    
								WHERE BRANCHID = '+ CAST(@BRANCH AS VARCHAR) +')+''%'''  
				IF(@BRANCHID <> '-1')
					BEGIN
						SET @SQLQUERY = @SQLQUERY + ' AND SS.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
					END
			END  
		--END 
		EXEC SP_EXECUTESQL @SQLQUERY;  
		--PRINT @SQLQUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMISDeductionRegisterDetailsIB')
DROP PROCEDURE USP_TDS_GetMISDeductionRegisterDetailsIB
GO
CREATE PROCEDURE USP_TDS_GetMISDeductionRegisterDetailsIB
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @NAME VARCHAR(75),  
 @SECTION VARCHAR(MAX),           
 @FROMDATE SMALLDATETIME = NULL,  
 @TODATE SMALLDATETIME = NULL,
 @SHOWUNLINKEDCHALLANS BIT = 0  
AS  
 BEGIN  
  DECLARE @SQLQUERY NVARCHAR(MAX);
  SELECT * 
  INTO #DEDUCTIONDETAIL
  FROM DEDUCTIONDETAIL WITH(NOLOCK) 
  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID --AND [QUARTER] = @QUARTER
	SELECT * 
	INTO #DEDUCTEE
	FROM DEDUCTEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
  IF(@FORMID = 1)
	BEGIN
	  SELECT E.* 
		  INTO #EMPLOYEE
		  FROM EMPLOYEE E WITH(NOLOCK)
		  INNER JOIN #DEDUCTEE D
		  ON D.DEDUCTEEID = E.DEDUCTEEID
	  SELECT E.SERIALNO,D.NAME + '(' + CAST(E.SERIALNO AS VARCHAR) +')' AS NAME,PAN,
		  DD.FORMID,DD.BRANCHID,DD.[QUARTER],DD.SECTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
		  CASE WHEN DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'
				ELSE 
					CASE WHEN DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197' 
							ELSE 
								CASE WHEN DD.NONDEDREASON = 3 THEN 'PAN NOT AVAILABLE - HIGHER RATE (20%)' 
										ELSE '' END END END AS NONDEDREASON
		INTO #TEMP24
		FROM   #DEDUCTIONDETAIL DD WITH(NOLOCK) 
		INNER JOIN #DEDUCTEE D WITH(NOLOCK) 
		ON  DD.DEDUCTEEID = D.DEDUCTEEID 
		INNER JOIN #EMPLOYEE E WITH(NOLOCK) 
		ON  D.DEDUCTEEID = E.DEDUCTEEID
	END
  ELSE
	BEGIN  
		SELECT NE.* 
		  INTO #NONEMPLOYEE
		  FROM NONEMPLOYEE NE WITH(NOLOCK)
		  INNER JOIN #DEDUCTEE D
		  ON D.DEDUCTEEID = NE.DEDUCTEEID
		SELECT NE.SERIALNO,D.NAME + '(' + CAST(NE.SERIALNO AS VARCHAR) + ')' AS NAME, PAN,   
			 DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,
			 DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,
			 TS.SECTIONNAME,DL.CHALLANID,PO.ORDERNO,PO.ORDERDATE,  
			 CASE WHEN DD.FORMID = 2
			  THEN    
				CASE  DD.NONDEDREASON     
				WHEN  1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'     
				WHEN  2 THEN 'NO DEDUCTION U/S 197A'    
				WHEN  3 THEN 'PAN Not available - Higher Rate (20%)'    
				WHEN  4 THEN 'Transporter with valid PAN (0%)'    
				WHEN  5 THEN 'Amount Paid/Credited is Under Threshold'
				WHEN  6 THEN 'Software Vendor Transaction'
				WHEN  7 THEN 'NO DEDUCTION U/S 197A(1F)'
				WHEN  8 THEN 'Deduction on Interest Income for Senior Citizens'
				ELSE ''
				END    
				 WHEN DD.FORMID = 3  
			  THEN    
				  CASE DD.NONDEDREASON    
				 WHEN 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'     
				   WHEN 2 THEN 'NO DEDUCTION U/S 197A'    
				   WHEN 3 THEN 'PAN Not available - Higher Rate (20%)'    
				   WHEN 6 THEN 'Software Vendor Transaction' 
				 ELSE ''     
				  END    
		  WHEN DD.FORMID = 4  
			  THEN    
				  CASE DD.NONDEDREASON    
				 WHEN 1 THEN 'AS PER SECTION 206C(9)'     
				   WHEN 2 THEN 'ANY OTHER REASON'    
				 ELSE ''     
				  END        
		   END AS NONDEDREASON,
		   CASE WHEN NE.DEDUCTEECODE = 1 THEN 'Companies' ELSE 'Non Companies' END AS DEDCODE, DD.ADDITIONALFIELD1 AS ACCOUNTNO
		   INTO #TEMP26    
		   FROM #DEDUCTIONDETAIL DD WITH(NOLOCK)
		   INNER JOIN #DEDUCTEE D  WITH(NOLOCK) ON  DD.DEDUCTEEID = D.DEDUCTEEID    
		   INNER JOIN #NONEMPLOYEE NE WITH(NOLOCK) ON  D.DEDUCTEEID = NE.DEDUCTEEID    
		   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
		   LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
		   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
		   LEFT JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID
	END
   IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
			DROP TABLE #DEDUCTEE
   IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
			DROP TABLE #DEDUCTIONDETAIL
   IF OBJECT_ID('TEMPDB..#NONEMPLOYEE') IS NOT NULL
			DROP TABLE #NONEMPLOYEE
   IF OBJECT_ID('TEMPDB..#EMPLOYEE') IS NOT NULL
			DROP TABLE #EMPLOYEE	
  SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTION,',')  
  IF @SECTION <> '-1'
  BEGIN
  	  IF @FORMID = 1  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN,SS.FORMID,BRANCHID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON  
				 FROM   #TEMP24 SS
				 INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = SS.SECTIONID
				 INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
		   END  
	  ELSE  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN, BRANCHID,SS.FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									TOTALDEDUCTED,DEDUCTEDDATE,SS.TAXRATE,SS.SECTIONID,SS.SECTIONNAME,NONDEDREASON,ISNULL(ORDERNO,'''')ORDERNO,
									ORDERDATE,DEDCODE, ACCOUNTNO  
				 FROM #TEMP26 SS
				 INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = SS.SECTIONID
				 INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
		   END  
	   END
	  ELSE
  BEGIN
	   IF @FORMID = 1  
	    BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN, FORMID,BRANCHID,[QUARTER],PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,NONDEDREASON  
				 FROM   #TEMP24   
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
	    END  
	  ELSE  
	   BEGIN  
			SET @SQLQUERY = 'SELECT SERIALNO,NAME,PAN, BRANCHID,FORMID,QUARTER,PAYMENTMADE,PAYMENTDATE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
									TOTALDEDUCTED,DEDUCTEDDATE,TAXRATE,SECTIONID,SECTIONNAME,NONDEDREASON,ISNULL(ORDERNO,'''')ORDERNO,
									ORDERDATE,DEDCODE, ACCOUNTNO   
				 FROM #TEMP26  
				 WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
	   END  
  END 
  IF(@SHOWUNLINKEDCHALLANS = 1)
   SET @SQLQUERY = @SQLQUERY + ' AND CHALLANID IS NULL'  
  IF (@NAME <> '')  
   SET @SQLQUERY = @SQLQUERY + ' AND NAME LIKE ''' + CAST(@NAME AS VARCHAR(75)) + '%''';  
  IF(@FROMDATE <> '')  
   SET @SQLQUERY = @SQLQUERY + ' AND PAYMENTDATE >= ''' + CAST(@FROMDATE AS VARCHAR) + '''';  
  IF(@TODATE <> '')  
   SET @SQLQUERY = @SQLQUERY + ' AND PAYMENTDATE <= ''' + CAST(@TODATE AS VARCHAR) + '''';  
  --IF (@SECTION <> -1)  
  -- SET @SQLQUERY = @SQLQUERY + ' AND SECTIONID = ' + CAST(@SECTION AS VARCHAR);  
  IF (@QUARTER <> -1)  
   SET @SQLQUERY = @SQLQUERY + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR);      
  EXEC SP_EXECUTESQL @SQLQUERY;  
  PRINT @SQLQUERY
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMISFORM24DEDUCTIONREGISTER')
DROP PROCEDURE USP_TDS_GETMISFORM24DEDUCTIONREGISTER
GO
CREATE PROCEDURE [USP_TDS_GETMISFORM24DEDUCTIONREGISTER]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT=NULL,
	@SECTION INT=NULL,
	@FROMDATE SMALLDATETIME=NULL,
	@TODATE SMALLDATETIME=NULL,
	@NAME VARCHAR(75)=NULL
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX)
        SET @SQLQUERY='SELECT E.SERIALNO,D.NAME,CAST(D.NAME AS VARCHAR)+''(''+CAST(E.SERIALNO AS VARCHAR)+'')'' AS NAMESERIALNO,DD.FORMID,DD.BRANCHID, DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.PAYMENTMADE,DD.PAYMENTDATE,
							  DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,(CASE WHEN DD.NONDEDREASON =1 THEN ''LOWER DEDUCTION U/S 197''
																							 ELSE
																								CASE WHEN DD.NONDEDREASON=2 THEN ''NO DEDUCTION U/S 197'' ELSE
																								CASE WHEN DD.NONDEDREASON=3 THEN ''PAN NOT AVAILABLE - HIGHER RATE (20%)'' ELSE
																								'''' END END
																								END) AS NONDEDREASON
					   FROM  DEDUCTIONDETAIL DD  WITH(NOLOCK)  INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON  DD.DEDUCTEEID=D.DEDUCTEEID
											    INNER JOIN EMPLOYEE E  WITH(NOLOCK) ON  D.DEDUCTEEID=E.DEDUCTEEID
					   WHERE DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR(5))+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR(2))
		IF(@FROMDATE IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.DEDUCTEDDATE>='''+CAST(@FROMDATE AS VARCHAR(20))+''''
		IF(@TODATE IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.DEDUCTEDDATE<='''+CAST(@TODATE AS VARCHAR(20))+''''
		IF (@SECTION IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.SECTIONID='+CAST(@SECTION AS VARCHAR(5))
		IF (@QUARTER IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.QUARTER='+CAST(@QUARTER AS VARCHAR(5))
		IF (@NAME IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND D.NAME LIKE '''+CAST(@NAME AS VARCHAR(75))+'%'''
		EXECUTE SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMISFORM24TDSPAYMENTREGISTER')
DROP PROCEDURE USP_TDS_GETMISFORM24TDSPAYMENTREGISTER
GO
CREATE PROCEDURE [USP_TDS_GETMISFORM24TDSPAYMENTREGISTER]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT=NULL,
	@SECTION INT=NULL,
	@FROMDATE SMALLDATETIME=NULL,
	@TODATE SMALLDATETIME=NULL,
	@NAME VARCHAR(75)=NULL
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY='SELECT TS.SECTIONNAME,D.NAME,E.SERIALNO,CAST(D.NAME AS VARCHAR)+''(''+CAST(E.SERIALNO AS VARCHAR)+'')'' AS NAMESERIALNO,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,
							  DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,CD.CHALLANPAIDDATE,CD.BANKCHALLANNO,CAST(RB.BSRCODE AS VARCHAR)+REPLACE(CONVERT(VARCHAR, CD.CHALLANPAIDDATE,103),''/'','''')+CD.BANKCHALLANNO AS CIN,RB.BRANCHNAME
					   FROM  DEDCHALINK DCL  WITH(NOLOCK)  INNER JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK)  ON DCL.DEDUCTIONID=DD.DEDUCTIONID
											INNER JOIN CHALLANDETAIL CD  WITH(NOLOCK) ON DCL.CHALLANID=CD.CHALLANID
											INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON DD.SECTIONID=TS.SECTIONID
											INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON DD.DEDUCTEEID=D.DEDUCTEEID
											INNER JOIN EMPLOYEE E  WITH(NOLOCK) ON DD.DEDUCTEEID=E.DEDUCTEEID
											INNER JOIN REMITTINGBANK RB  WITH(NOLOCK) ON CD.BANKID= RB.BANKID WHERE DCL.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)
		IF (@QUARTER IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.QUARTER='+CAST(@QUARTER AS VARCHAR(5))
		IF (@SECTION IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.SECTIONID='+CAST(@SECTION AS VARCHAR(5))
		IF(@FROMDATE IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.DEDUCTEDDATE>='''+CAST(@FROMDATE AS VARCHAR(20))+''''
		IF(@TODATE IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.DEDUCTEDDATE<='''+CAST(@TODATE AS VARCHAR(20))+''''
		IF (@NAME IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND D.NAME LIKE '''+CAST(@NAME AS VARCHAR(75))+'%'''
		EXECUTE SP_EXECUTESQL @SQLQUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMISFORM2627DEDUCTIONREGISTER')
DROP PROCEDURE USP_TDS_GETMISFORM2627DEDUCTIONREGISTER
GO
CREATE PROCEDURE [USP_TDS_GETMISFORM2627DEDUCTIONREGISTER]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT=NULL,
	@SECTION INT=NULL,
	@FROMDATE SMALLDATETIME=NULL,
	@TODATE SMALLDATETIME=NULL,
	@NAME VARCHAR(75)=NULL
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX)
		SET @SQLQUERY='SELECT NE.SERIALNO,D.NAME,CAST(D.NAME AS VARCHAR)+''(''+CAST(NE.SERIALNO AS VARCHAR)+'')'' AS NAMESERIALNO,DD.FORMID,DD.BRANCHID, DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,
							  DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.TAXRATE,DD.SECTIONID,TS.SECTIONNAME,DD.PAYMENTMADE,DD.PAYMENTDATE,
							CASE WHEN DD.FORMID = 2 THEN
												     CASE WHEN DD.NONDEDREASON=1 THEN ''LOWER DEDUCTION/NO DEDUCTION U/S 197''
																				 ELSE  CASE WHEN DD.NONDEDREASON=2 THEN ''NO DEDUCTION U/S 197A''
																												   ELSE  CASE WHEN DD.NONDEDREASON=3 THEN ''PAN NOT AVAILABLE - HIGHER RATE (20%)''
																																			         ELSE CASE WHEN DD.NONDEDREASON = 4 THEN ''TRANSPORTER WITH VALID PAN (0%)''
																																												        ELSE '''' END
																														 END
																					   END END
													ELSE CASE WHEN DD.NONDEDREASON=1 THEN ''LOWER DEDUCTION/NO DEDUCTION U/S 195/197''
																					  ELSE
																					 CASE WHEN DD.NONDEDREASON=2 THEN ''LOWER DEDUCTION/NO DEDUCTION CERTIFICATE ISSUED BY THE CA''
																					 ELSE CASE WHEN DD.NONDEDREASON = 3 THEN ''PAN NOT AVAILABLE - HIGHER RATE (20%)'' ELSE '''' END END
														  END
							 END AS NONDEDREASON
						FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)  INNER JOIN DEDUCTEE D  WITH(NOLOCK)   ON  DD.DEDUCTEEID=D.DEDUCTEEID
												INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON  D.DEDUCTEEID=NE.DEDUCTEEID
												INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DD.SECTIONID=TS.SECTIONID
						WHERE DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR(5))+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR(2))
		IF(@FROMDATE IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.DEDUCTEDDATE>='''+CAST(@FROMDATE AS VARCHAR(20))+''''
		IF(@TODATE IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.DEDUCTEDDATE<='''+CAST(@TODATE AS VARCHAR(20))+''''
		IF (@SECTION IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.SECTIONID='+CAST(@SECTION AS VARCHAR(5))
		IF (@QUARTER IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.QUARTER='+CAST(@QUARTER AS VARCHAR(5))
		IF (@NAME IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND D.NAME LIKE '''+CAST(@NAME AS VARCHAR(75))+'%'''
	EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMISFORM2627TDSPAYMENTREGISTER')
DROP PROCEDURE USP_TDS_GETMISFORM2627TDSPAYMENTREGISTER
GO
CREATE PROCEDURE [USP_TDS_GETMISFORM2627TDSPAYMENTREGISTER]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT=NULL,
	@SECTION INT=NULL,
	@FROMDATE SMALLDATETIME=NULL,
	@TODATE SMALLDATETIME=NULL,
	@NAME VARCHAR(75)=NULL
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX)
		SET @SQLQUERY='SELECT TS.SECTIONNAME,D.NAME,NE.SERIALNO,CAST(D.NAME AS VARCHAR)+''(''+CAST(NE.SERIALNO AS VARCHAR)+'')'' AS NAMESERIALNO,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,
							  DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,CD.CHALLANPAIDDATE,CD.BANKCHALLANNO,
							  CAST(RB.BSRCODE AS VARCHAR)+REPLACE(CONVERT(VARCHAR, CD.CHALLANPAIDDATE,103),''/'','''')+CD.BANKCHALLANNO AS CIN,RB.BRANCHNAME
					   FROM  DEDCHALINK DCL WITH(NOLOCK)  INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DCL.DEDUCTIONID=DD.DEDUCTIONID
										    INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DCL.CHALLANID=CD.CHALLANID
										    INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DD.SECTIONID=TS.SECTIONID
											INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID=D.DEDUCTEEID
										    INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON DD.DEDUCTEEID=NE.DEDUCTEEID
										    INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID= RB.BANKID WHERE DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)
		IF (@QUARTER IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.QUARTER='+CAST(@QUARTER AS VARCHAR(5))
		IF (@SECTION IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.SECTIONID='+CAST(@SECTION AS VARCHAR(5))
		IF(@FROMDATE IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.DEDUCTEDDATE>='''+CAST(@FROMDATE AS VARCHAR(20))+''''
		IF(@TODATE IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND DD.DEDUCTEDDATE<='''+CAST(@TODATE AS VARCHAR(20))+''''
		IF (@NAME IS NOT NULL)
			SET @SQLQUERY=@SQLQUERY+' AND D.NAME LIKE '''+CAST(@NAME AS VARCHAR(75))+'%'''
		EXECUTE SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMISINTERESTCALCULATION')
DROP PROCEDURE USP_TDS_GETMISINTERESTCALCULATION
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETMISINTERESTCALCULATION]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT = -1,
 @DEDEMPID INT = -1,
 @SECID INT = -1,
 @PAIDDATEFROM SMALLDATETIME = NULL,
 @PAIDDATETO SMALLDATETIME = NULL,
 @DEDTYPE BIT = 0
 /* DEDTYPE -> 0 (DEDUCTOR TYPE IS OTHERS)
	DEDTYPE -> 1 (DEDUCTOR TYPE IS GOVERNMENT)
 */
AS
 BEGIN
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
  DECLARE @SQLQUERY NVARCHAR(MAX);
  /*FINDING THE DUE DATE OF EACH DEDUCTION, BASED ON BRANCH, FORM ID, QUARTER*/  
  SELECT M.BRANCHID, DD.QUARTER, M.DEDUCTEEID, M.[NAME], M.REFERENCENO, DD.DEDUCTIONID, DD.SECTIONID, M.CODE, TS.SECTIONNAME,
					DD.PAYMENTMADE, DD.PAYMENTDATE, DD.DEDUCTEDDATE, C.CHALLANPAIDDATE, DD.TOTALDEDUCTED,
					(CASE WHEN @DEDTYPE = 1 AND C.MODEOFPAYMENT <> 3 THEN CAST(SUBSTRING(CONVERT(VARCHAR(12),(DATEADD(M,1,DD.PAYMENTDATE)),103),7,4) + '-' + SUBSTRING(CONVERT(VARCHAR(12),(DATEADD(M,1,DD.PAYMENTDATE)),103),4,2) + '-07' AS DATETIME)
					      WHEN @DEDTYPE = 1 AND C.MODEOFPAYMENT = 3 THEN CAST(DD.PAYMENTDATE AS DATETIME)
						ELSE 
							(CASE MONTH(DD.PAYMENTDATE)
								WHEN 3 THEN CAST(SUBSTRING(CONVERT(VARCHAR(12),(DATEADD(M,1,DD.PAYMENTDATE)),103),7,4) + '-' + SUBSTRING(CONVERT(VARCHAR(12),(DATEADD(M,1,DD.PAYMENTDATE)),103),4,2) + (CASE WHEN @FORMID = 4 THEN '07' ELSE '30' END) AS DATETIME)
								ELSE CAST(SUBSTRING(CONVERT(VARCHAR(12),(DATEADD(M,1,DD.PAYMENTDATE)),103),7,4) + '-' + SUBSTRING(CONVERT(VARCHAR(12),(DATEADD(M,1,DD.PAYMENTDATE)),103),4,2) + '-07' AS DATETIME)
							END)
					END) AS DUEDATE
				  INTO #DEDDUEDATE
				  FROM DEDUCTIONDETAIL AS DD
				  INNER JOIN DEDUCTEE AS M ON DD.BRANCHID = M.BRANCHID AND DD.DEDUCTEEID = M.DEDUCTEEID
				  INNER JOIN TAXSECTIONS AS TS ON TS.SECTIONID = DD.SECTIONID AND TS.FORMID = DD.FORMID
				  INNER JOIN DEDCHALINK DL ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DL.BRANCHID = DD.BRANCHID
				  INNER JOIN CHALLANDETAIL AS C ON DL.CHALLANID = C.CHALLANID AND DL.BRANCHID = C.BRANCHID
				  WHERE DD.BRANCHID = @BRANCHID  AND DD.FORMID = @FORMID
				  ORDER BY DD.DEDUCTIONID
  /* END OF FINDING THE DUE DATE OF EACH DEDUCTION, BASED ON BRANCH, FORM ID, QUARTER*/
  SET @SQLQUERY = 'SELECT DE.*,
					(CASE WHEN DATEDIFF(D,(CASE WHEN DE.DUEDATE >= DD.DEDUCTEDDATE THEN DD.DEDUCTEDDATE ELSE DE.DUEDATE END), DE.CHALLANPAIDDATE) <=30 THEN 1 
						ELSE DATEDIFF(D,(CASE WHEN DE.DUEDATE >= DD.DEDUCTEDDATE THEN DD.DEDUCTEDDATE ELSE DE.DUEDATE END), DE.CHALLANPAIDDATE)/30 + 
							CASE WHEN DATEDIFF(D,(CASE WHEN DE.DUEDATE >= DD.DEDUCTEDDATE THEN DD.DEDUCTEDDATE ELSE DE.DUEDATE END), DE.CHALLANPAIDDATE)%30 > 0 THEN 1 
								ELSE 0 
							END 
						END
					)AS [MONTHDELAY],
					(CASE WHEN DE.DUEDATE >= DD.DEDUCTEDDATE THEN 0 
						ELSE 
							CASE WHEN DATEDIFF(D,DE.DUEDATE, DD.PAYMENTDATE) <=30 THEN 1 
								ELSE DATEDIFF(D,DE.DUEDATE, DD.PAYMENTDATE)/30 + 
									CASE WHEN DATEDIFF(D,DE.DUEDATE, DD.PAYMENTDATE)%30 > 0 THEN 1 
										ELSE 0 
									END 
							END 
						END
					) AS [MONTHDELAYLATETDS] 
				  FROM DEDUCTIONDETAIL DD
				  INNER JOIN #DEDDUEDATE DE ON DD.DEDUCTIONID = DE.DEDUCTIONID AND DD.BRANCHID = DE.BRANCHID';
  IF (@QUARTER <> -1)
   SET @SQLQUERY = @SQLQUERY + ' AND DE.QUARTER = ' + CAST(@QUARTER AS VARCHAR);
  IF (@DEDEMPID <> -1)
   SET @SQLQUERY = @SQLQUERY + ' AND DE.DEDUCTEEID = ' + CAST(@DEDEMPID AS VARCHAR);
  IF (@SECID <> -1)
   SET @SQLQUERY = @SQLQUERY + ' AND DE.SECTIONID = ' + CAST(@SECID AS VARCHAR);
  IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)                                
    SET @SQLQUERY = @SQLQUERY + ' AND DD.PAYMENTDATE BETWEEN ''' + CAST(@PAIDDATEFROM AS VARCHAR) + ''' AND ''' + CAST(@PAIDDATETO AS VARCHAR) + '''';                                
  --PRINT @SQLQUERY
  EXECUTE SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMISMATCHAMOUNT')
DROP PROCEDURE USP_TDS_GETMISMATCHAMOUNT
GO
CREATE PROCEDURE [USP_TDS_GETMISMATCHAMOUNT]
@MONTH INT ,
@BRANCHID INT,
 @FORMID INT
AS
BEGIN
    DECLARE @VAR INT
    IF @MONTH >9
    SET @VAR=2
    ELSE
    SET @VAR=1
 IF(@BRANCHID<> 0 AND @FORMID<>0 )
   BEGIN
SELECT DISTINCT CB.BRANCHCODE AS [BRANCH CODE] ,SUPERFINAL.BALANCEAMOUNT AS [MISMATCH AMOUNT], SUPERFINAL.TOTALAMOUNT AS [TOTAL TDS AMOUNT],SUPERFINAL.AMOUNT FROM
 (
 SELECT FINAL.BRANCHID,FINAL.FORMID,FINAL.PARENTBRANCHID,FINAL.FORMTYPE,ABS(ISNULL(AMOUNT,0)-TDS) AS BALANCEAMOUNT, TDS AS TOTALAMOUNT, PA.AMOUNT  FROM
 (
  SELECT RESULT.BRANCHID,RESULT.FORMID, RESULT.PARENTBRANCHID,RESULT.SECTIONID AS FORMTYPE,SUM(RESULT.TDS) AS TDS FROM
  (
    SELECT CB.BRANCHID,DD.FORMID, CB.PARENTBRANCHID,CASE WHEN DD.FORMID=1 THEN '24Q' WHEN DD.FORMID=3 THEN '27Q' WHEN (DD.FORMID=2 AND TS.SECTIONID=5) THEN '26QI' ELSE '26QV' END AS SECTIONID,SUM(DD.TOTALDEDUCTED) AS TDS FROM COMPANYBRANCH CB  INNER JOIN DEDUCTIONDETAIL DD ON CB.BRANCHID=DD.BRANCHID
        INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON TS.SECTIONID=DD.SECTIONID
        LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON NE.DEDUCTEEID=DD.DEDUCTEEID
        LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
    WHERE  DCL.DEDCHALINKID IS NULL AND MONTH(DEDUCTEDDATE)=@MONTH
    GROUP BY CB.BRANCHID,TS.SECTIONID,DD.FORMID,CB.PARENTBRANCHID
  ) AS RESULT GROUP BY RESULT.BRANCHID,RESULT.SECTIONID,RESULT.PARENTBRANCHID,RESULT.FORMID
 ) FINAL
        LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK)  ON PA.BRANCHID=FINAL.BRANCHID AND PA.FORMTYPE=FINAL.FORMTYPE
        WHERE FINAL.BRANCHID=@BRANCHID AND FINAL.FORMID=@FORMID  AND SUBSTRING(CAST(PA.MONTHYEAR AS VARCHAR),1,@VAR)=@MONTH
  )SUPERFINAL
        INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON SUPERFINAL.BRANCHID=CB.BRANCHID
        END
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMismatchDetailsSB')
DROP PROCEDURE USP_TDS_GetMismatchDetailsSB
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetMismatchDetailsSB]
@ISHO BIT,
@ISRO BIT,
@MONTH INT,
@BRANCHID INT
AS
BEGIN
	CREATE TABLE #DEDUCTIONDETAIL (BRANCHID INT, TOTALDEDUCTED NUMERIC(13,2), DEDUCTEDDATE SMALLDATETIME, FORMID INT, SECTIONID INT)
	CREATE TABLE #PARKEDAMOUNT (BRANCHID INT, AMOUNT NUMERIC(13,2), FORMTYPE VARCHAR(10), MONTH INT)
	DECLARE @SQLQUERY NVARCHAR(MAX);
	IF(@ISHO = 1)
	BEGIN
		SET @SQLQUERY = 'INSERT INTO #DEDUCTIONDETAIL
		SELECT BRANCHID, TOTALDEDUCTED, DEDUCTEDDATE, FORMID, SECTIONID 
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE MONTH(DEDUCTEDDATE) = ' + CAST(@MONTH AS VARCHAR) + ' 
		IF(LEN('+ CAST(@MONTH AS VARCHAR) +') = 1)
		BEGIN
		INSERT INTO #PARKEDAMOUNT
		SELECT BRANCHID, AMOUNT, FORMTYPE, SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,1) MONTH
		FROM PARKEDAMOUNT WITH(NOLOCK)
		WHERE SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,1) = ' + CAST(@MONTH AS VARCHAR) +'
		END
		ELSE
		BEGIN
		INSERT INTO #PARKEDAMOUNT
		SELECT BRANCHID, AMOUNT, FORMTYPE, SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,2) MONTH
		FROM PARKEDAMOUNT WITH(NOLOCK)
		WHERE SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,2) = ' + CAST(@MONTH AS VARCHAR) +'
		END'
	END
	ELSE IF(@ISRO = 1)
	BEGIN
		SET @SQLQUERY = 'INSERT INTO #DEDUCTIONDETAIL
		SELECT DD.BRANCHID, TOTALDEDUCTED, DEDUCTEDDATE, FORMID, SECTIONID 
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN
		COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID
		WHERE MONTH(DEDUCTEDDATE) = ' + CAST(@MONTH AS VARCHAR) + 'AND CB.PARENTBRANCHID = ' +CAST(@BRANCHID AS VARCHAR)+ ' 
		IF(LEN( '+ CAST(@MONTH AS VARCHAR) +') = 1)
		BEGIN
		INSERT INTO #PARKEDAMOUNT
		SELECT P.BRANCHID, AMOUNT, FORMTYPE, SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,1) MONTH
		FROM PARKEDAMOUNT P WITH(NOLOCK)
		INNER JOIN
		COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = P.BRANCHID
		WHERE SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,1) = ' + CAST(@MONTH AS VARCHAR)+ 'AND CB.PARENTBRANCHID = ' +CAST(@BRANCHID AS VARCHAR)+ '
		END
		ELSE
		BEGIN
		INSERT INTO #PARKEDAMOUNT
		SELECT P.BRANCHID, AMOUNT, FORMTYPE, SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,2) MONTH
		FROM PARKEDAMOUNT P WITH(NOLOCK)
		INNER JOIN
		COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = P.BRANCHID
		WHERE SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,2) = ' + CAST(@MONTH AS VARCHAR)+ 'AND CB.PARENTBRANCHID = ' +CAST(@BRANCHID AS VARCHAR) +'
		END'
	END
	ELSE
	BEGIN
		SET @SQLQUERY = 'INSERT INTO #DEDUCTIONDETAIL
		SELECT DD.BRANCHID, TOTALDEDUCTED, DEDUCTEDDATE, FORMID, SECTIONID 
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN
		COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID
		WHERE MONTH(DEDUCTEDDATE) = ' + CAST(@MONTH AS VARCHAR) + 'AND CB.BRANCHID = ' +CAST(@BRANCHID AS VARCHAR) + ' 
		IF(LEN('+ CAST(@MONTH AS VARCHAR) +') = 1)
		BEGIN
		INSERT INTO #PARKEDAMOUNT
		SELECT P.BRANCHID, AMOUNT, FORMTYPE, SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,1) MONTH
		FROM PARKEDAMOUNT P WITH(NOLOCK)
		INNER JOIN
		COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = P.BRANCHID
		WHERE SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,1) = ' + CAST(@MONTH AS VARCHAR)+ 'AND CB.BRANCHID = ' +CAST(@BRANCHID AS VARCHAR)+ '
		END
		ELSE
		BEGIN
		INSERT INTO #PARKEDAMOUNT
		SELECT P.BRANCHID, AMOUNT, FORMTYPE, SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,2) MONTH
		FROM PARKEDAMOUNT P WITH(NOLOCK)
		INNER JOIN
		COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = P.BRANCHID
		WHERE SUBSTRING(CAST(MONTHYEAR AS VARCHAR) ,1,2) = ' + CAST(@MONTH AS VARCHAR)+ 'AND CB.BRANCHID = ' +CAST(@BRANCHID AS VARCHAR) +'
		END'
	END
	EXECUTE SP_EXECUTESQL @SQLQUERY;
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM24Q_A 
	INTO #FORM24Q_A
	FROM #DEDUCTIONDETAIL
	WHERE FORMID = 1 AND MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(AMOUNT) AS FORM24Q_B 
	INTO #FORM24Q_B
	FROM #PARKEDAMOUNT 
	WHERE FORMTYPE = '24Q' AND MONTH = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26QI_A 
	INTO #FORM26QI_A 
	FROM #DEDUCTIONDETAIL
	WHERE  SECTIONID = 5 AND  MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(AMOUNT) AS FORM26QI_B 
	INTO #FORM26QI_B
	FROM #PARKEDAMOUNT
	WHERE FORMTYPE = '26QI' AND MONTH = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26QV_194C 
	INTO #FORM26QV_194C
	FROM #DEDUCTIONDETAIL
	WHERE  SECTIONID = 8 AND  MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26QV_194H 
	INTO #FORM26QV_194H
	FROM #DEDUCTIONDETAIL
	WHERE  SECTIONID = 14 AND  MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26QV_194IA 
	INTO #FORM26QV_194IA
	FROM #DEDUCTIONDETAIL
	WHERE  SECTIONID = 23 AND  MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26QV_194IB 
	INTO #FORM26QV_194IB
	FROM #DEDUCTIONDETAIL
	WHERE  SECTIONID = 24 AND  MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM26QV_194J
	INTO #FORM26QV_194J
	FROM #DEDUCTIONDETAIL
	WHERE  SECTIONID = 16 AND  MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(AMOUNT) AS FORM26QV_B 
	INTO #FORM26QV_B
	FROM #PARKEDAMOUNT
	WHERE FORMTYPE = '26QV' AND MONTH = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(TOTALDEDUCTED) AS FORM27Q_A 
	INTO #FORM27Q_A
	FROM #DEDUCTIONDETAIL
	WHERE  FORMID = 3 AND MONTH(DEDUCTEDDATE) = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHID, SUM(AMOUNT) AS FORM27Q_B
	INTO #FORM27Q_B 
	FROM #PARKEDAMOUNT
	WHERE FORMTYPE = '27Q' AND MONTH = @MONTH
	GROUP BY BRANCHID
	SELECT BRANCHNAME, BRANCHID
	INTO #PARENTBRANCH
	FROM COMPANYBRANCH WITH(NOLOCK) 
	SELECT SLNO = IDENTITY(INT,1,1), CB.BRANCHID, CB.PARENTBRANCHID, BRANCHCODE, CB.BRANCHNAME, ISNULL(PB.BRANCHNAME,'') PARENTBRANCHNAME, ISNULL(FORM24Q_A,0) FORM24Q_A, ISNULL(FORM24Q_B,0) FORM24Q_B, 
		(ISNULL(FORM24Q_A,0) - ISNULL(FORM24Q_B,0)) AS FORM24QDIFF, ISNULL(FORM26QI_A,0) FORM26QI_A, ISNULL(FORM26QI_B,0) FORM26QI_B, 
		(ISNULL(FORM26QI_A,0) - ISNULL(FORM26QI_B,0)) AS FORM26QIDIFF,ISNULL(FORM26QV_194C,0) FORM26QV_194C, ISNULL(FORM26QV_194H,0) FORM26QV_194H, 
		ISNULL(FORM26QV_194IA,0) FORM26QV_194IA, ISNULL(FORM26QV_194IB,0) FORM26QV_194IB, ISNULL(FORM26QV_194J,0) FORM26QV_194J, 
		(ISNULL(FORM26QV_194C,0) + ISNULL(FORM26QV_194H,0) + ISNULL(FORM26QV_194IA,0) + ISNULL(FORM26QV_194IB,0) + ISNULL(FORM26QV_194J,0)) AS FORM26QV_A,
		ISNULL(FORM26QV_B,0) FORM26QV_B, 
		((ISNULL(FORM26QV_194C,0) + ISNULL(FORM26QV_194H,0) + ISNULL(FORM26QV_194IA,0) + ISNULL(FORM26QV_194IB,0) + ISNULL(FORM26QV_194J,0)) - ISNULL(FORM26QV_B,0)) AS FROM26QVDIFF, 
		ISNULL(FORM27Q_A,0) FORM27Q_A, ISNULL(FORM27Q_B,0) FORM27Q_B, (ISNULL(FORM27Q_A,0) - ISNULL(FORM27Q_B,0)) AS FORM27QDIFF
		INTO #FINAL
		FROM
		COMPANYBRANCH CB WITH(NOLOCK) 
		LEFT JOIN
		#PARENTBRANCH PB ON CB.PARENTBRANCHID = PB.BRANCHID
		LEFT JOIN
		#FORM24Q_A F24QA  ON CB.BRANCHID = F24QA.BRANCHID
		LEFT JOIN
		#FORM24Q_B F24QB ON CB.BRANCHID = F24QB.BRANCHID
		LEFT JOIN
		#FORM26QI_A F26IA  ON CB.BRANCHID = F26IA.BRANCHID
		LEFT JOIN
		#FORM26QI_B F26IB ON CB.BRANCHID = F26IB.BRANCHID
		LEFT JOIN
		#FORM26QV_194C F26194C ON CB.BRANCHID = F26194C.BRANCHID
		LEFT JOIN
		#FORM26QV_194H F26194H ON CB.BRANCHID = F26194H.BRANCHID
		LEFT JOIN
		#FORM26QV_194IA F26194IA ON CB.BRANCHID = F26194IA.BRANCHID
		LEFT JOIN
		#FORM26QV_194IB F26194IB ON CB.BRANCHID = F26194IB.BRANCHID
		LEFT JOIN
		#FORM26QV_194J F26194J ON CB.BRANCHID = F26194J.BRANCHID
		LEFT JOIN
		#FORM26QV_B F26VB ON CB.BRANCHID = F26VB.BRANCHID
		LEFT JOIN
		#FORM27Q_A F27QA ON CB.BRANCHID = F27QA.BRANCHID
		LEFT JOIN
		#FORM27Q_B F27QB ON CB.BRANCHID = F27QB.BRANCHID
	IF(@ISHO = 1)
	BEGIN	
		SELECT SLNO, BRANCHCODE, BRANCHNAME, PARENTBRANCHNAME, FORM24Q_A, FORM24Q_B, FORM24QDIFF, FORM26QI_A, FORM26QI_B, FORM26QIDIFF,
		FORM26QV_194C, FORM26QV_194H, FORM26QV_194IA, FORM26QV_194IB, FORM26QV_194J, FORM26QV_A, FORM26QV_B, FROM26QVDIFF, 
		FORM27Q_A, FORM27Q_B, FORM27QDIFF FROM #FINAL
	END
	ELSE IF(@ISRO = 1)
	BEGIN
		SELECT SLNO, BRANCHCODE, BRANCHNAME, PARENTBRANCHNAME, FORM24Q_A, FORM24Q_B, FORM24QDIFF, FORM26QI_A, FORM26QI_B, FORM26QIDIFF,
		FORM26QV_194C, FORM26QV_194H, FORM26QV_194IA, FORM26QV_194IB, FORM26QV_194J, FORM26QV_A, FORM26QV_B, FROM26QVDIFF, 
		FORM27Q_A, FORM27Q_B, FORM27QDIFF FROM #FINAL WHERE PARENTBRANCHID = @BRANCHID
	END
	ELSE
	BEGIN
		SELECT SLNO, BRANCHCODE, BRANCHNAME, PARENTBRANCHNAME, FORM24Q_A, FORM24Q_B, FORM24QDIFF, FORM26QI_A, FORM26QI_B, FORM26QIDIFF,
		FORM26QV_194C, FORM26QV_194H, FORM26QV_194IA, FORM26QV_194IB, FORM26QV_194J, FORM26QV_A, FORM26QV_B, FROM26QVDIFF, 
		FORM27Q_A, FORM27Q_B, FORM27QDIFF FROM #FINAL WHERE BRANCHID = @BRANCHID
	END
	DROP TABLE #FORM24Q_A
	DROP TABLE #FORM24Q_B
	DROP TABLE #FORM26QI_A
	DROP TABLE #FORM26QI_B
	DROP TABLE #FORM26QV_194C
	DROP TABLE #FORM26QV_194H
	DROP TABLE #FORM26QV_194IA
	DROP TABLE #FORM26QV_194IB
	DROP TABLE #FORM26QV_194J
	DROP TABLE #FORM26QV_B
	DROP TABLE #FORM27Q_A
	DROP TABLE #FORM27Q_B
	DROP TABLE #PARENTBRANCH
	DROP TABLE #FINAL
	DROP TABLE #DEDUCTIONDETAIL
	DROP TABLE #PARKEDAMOUNT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetMISTDSPaymentRegisterDetails')
DROP PROCEDURE USP_TDS_GetMISTDSPaymentRegisterDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetMISTDSPaymentRegisterDetails] 
	@BRANCHID INT,  
	@FORMID INT,  
	@QUARTER INT,  
	@NAME VARCHAR(75),  
	@SECTION VARCHAR(MAX),  
	@FROMDATE SMALLDATETIME = NULL,  
	@TODATE SMALLDATETIME = NULL   
AS   
	BEGIN  
		DECLARE @QUERY NVARCHAR(MAX);
		CREATE TABLE #EMPNONEMP (SERIALNO INT, DEDUCTEEID INT);
		DECLARE @RTBRANCHID INT,@ISZORO INT;
		SET @RTBRANCHID = @BRANCHID
		IF((SELECT TOP 1 DEDUCTORID FROM DEDUCTOR WITH(NOLOCK) WHERE TAN = 'HYDA08387B') <> '')
			BEGIN
				SELECT @ISZORO = ISZORO FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID
				IF(@ISZORO = 0)
					BEGIN
						IF(@FORMID <> 1)
							BEGIN
								SET @BRANCHID = (SELECT PARENTBRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @RTBRANCHID)
							END
					END
			END
		SELECT DEDUCTEEID, NAME, BRANCHID, PAN, REFERENCENO 
		INTO #DEDUCTEE 
		FROM DEDUCTEE WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID
		IF(@FORMID = 1)
			BEGIN
				INSERT INTO #EMPNONEMP
				SELECT SERIALNO, DEDUCTEEID  
				FROM EMPLOYEE WITH(NOLOCK) 
				WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDUCTEE)
			END
		ELSE
			BEGIN		
				INSERT INTO #EMPNONEMP
				SELECT SERIALNO, DEDUCTEEID
				FROM NONEMPLOYEE WITH(NOLOCK) 
				WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDUCTEE)
			END
		SELECT DEDUCTIONID, DEDUCTEEID, BRANCHID, FORMID, QUARTER, SECTIONID, PAYMENTMADE, PAYMENTDATE, INCOMETAX, SURCHARGE, 
			EDUCATIONCESS, TOTALDEDUCTED, DEDUCTEDDATE,RTBRANCHID 
		INTO #DEDUCTIONDETAIL 
		FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
		SELECT BRANCHID,DEDUCTIONID, CHALLANID 
		INTO #DEDCHALINK 
		FROM DEDCHALINK WITH(NOLOCK) 
		WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #DEDUCTIONDETAIL)
		SELECT CHALLANID, BRANCHID, CHALLANPAIDDATE, CHEQUENO, BANKCHALLANNO, BANKID 
		INTO #CHALLANDETAIL 
		FROM CHALLANDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
		SELECT D.NAME + '(' + CAST(E.SERIALNO AS VARCHAR) + ')' AS NAME,E.SERIALNO, TS.SECTIONNAME,
			DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SECTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,
			DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
			CD.CHALLANPAIDDATE,CD.CHEQUENO,RB.BSRCODE + REPLACE(CONVERT(VARCHAR,CD.CHALLANPAIDDATE,103),'/','') + CD.BANKCHALLANNO AS CIN,
			RB.BRANCHNAME, D.PAN,DD.RTBRANCHID,D.REFERENCENO
		INTO #TEMP
		FROM   #DEDUCTIONDETAIL DD INNER JOIN #DEDUCTEE D  ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
			INNER JOIN #EMPNONEMP E  ON D.DEDUCTEEID = E.DEDUCTEEID
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
			INNER JOIN #DEDCHALINK DCL ON DD.DEDUCTIONID = DCL.DEDUCTIONID AND DD.BRANCHID = DCL.BRANCHID
			INNER JOIN #CHALLANDETAIL CD ON DCL.CHALLANID = CD.CHALLANID AND CD.BRANCHID = DCL.BRANCHID
			INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID
		SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTION,',')
		IF(@SECTION <> '-1')
		BEGIN
			IF @FORMID = 1  
			BEGIN  
				SET @QUERY = 'SELECT BRANCHNAME,NAME,PAN,SERIALNO,SS.SECTIONNAME,PAYMENTMADE,PAYMENTDATE,INCOMETAX,
						SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,  
						CHALLANPAIDDATE,CHEQUENO,CIN,REFERENCENO  
					FROM #TEMP SS WITH(NOLOCK)
						INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = SS.SECTIONID
						INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME 		
					WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
						+ ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
			END  
			ELSE  
			BEGIN  
				SET @QUERY = 'SELECT BRANCHNAME,NAME,PAN,SERIALNO,SS.SECTIONNAME,PAYMENTMADE,PAYMENTDATE,INCOMETAX,
						SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,  
						CHALLANPAIDDATE,CHEQUENO,CIN,REFERENCENO  
					FROM  #TEMP SS WITH(NOLOCK)
						INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = SS.SECTIONID
						INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME 		
					WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
						+ ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR);  
			END
		END
		ELSE
		BEGIN 
			IF @FORMID = 1  
			BEGIN  
				SET @QUERY = 'SELECT BRANCHNAME,NAME,PAN,SERIALNO,SECTIONNAME,PAYMENTMADE,PAYMENTDATE,INCOMETAX,
						SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,  
						CHALLANPAIDDATE,CHEQUENO,CIN,REFERENCENO  
					FROM   #TEMP WITH(NOLOCK) 
					WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
						+ ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
			END  
			ELSE  
			BEGIN  
				SET @QUERY = 'SELECT BRANCHNAME,NAME,PAN,SERIALNO,SECTIONNAME,PAYMENTMADE,PAYMENTDATE,
						INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,  
						CHALLANPAIDDATE,CHEQUENO,CIN,REFERENCENO    
					FROM #TEMP WITH(NOLOCK) 
					WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
						+ ' AND FORMID = ' + CAST(@FORMID AS VARCHAR);  
			END
		END  
		IF (@QUARTER <> -1)  
			SET @QUERY = @QUERY + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR(5));     
		IF(@FROMDATE <> '')  
			SET @QUERY = @QUERY + ' AND PAYMENTDATE >= ''' + CAST(@FROMDATE AS VARCHAR) + ''''   
		IF(@TODATE <> '')  
			SET @QUERY = @QUERY + ' AND PAYMENTDATE <= ''' + CAST(@TODATE AS VARCHAR) + ''''   
		IF (@NAME <> '')  
			SET @QUERY = @QUERY + ' AND NAME LIKE ''' + CAST(@NAME AS VARCHAR(75)) + '%''';
		IF(@RTBRANCHID <> @BRANCHID)
			  SET @QUERY = @QUERY + ' AND RTBRANCHID = ' + CAST(@RTBRANCHID AS VARCHAR);     
		EXECUTE SP_EXECUTESQL @QUERY;
		IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
		DROP TABLE #TEMP  
		IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
		DROP TABLE #DEDUCTIONDETAIL
		IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
		DROP TABLE #DEDUCTEE  
		IF OBJECT_ID('TEMPDB..#EMPNONEMP') IS NOT NULL
		DROP TABLE #EMPNONEMP
		IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
		DROP TABLE #DEDCHALINK  
		IF OBJECT_ID('TEMPDB..#CHALLANDETAIL') IS NOT NULL
		DROP TABLE #CHALLANDETAIL
		IF OBJECT_ID('TEMPDB..#SECTIONS') IS NOT NULL
		DROP TABLE #SECTIONS						  
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMONTHLYSTINPUTCREDIT')
DROP PROCEDURE USP_TDS_GETMONTHLYSTINPUTCREDIT
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETMONTHLYSTINPUTCREDIT]   
	@BRANCHID INT,  
	@MONTHID INT  
AS        
	BEGIN  
		SET NOCOUNT ON         
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED       
		SELECT (SELECT BRANCHCODE 
				FROM COMPANYBRANCH 
			    WHERE BRANCHID = @BRANCHID) BRANCHCODE,
				MAX(R.BRANCHNAME)BRANCHNAME,(SELECT BRANCHNAME 
											 FROM COMPANYBRANCH 
											 WHERE BRANCHID = @BRANCHID) PARENTBRANCHNAME,
				MAX(BILLNUM)BILLNUM,MAX(BILLDATE)BILLDATE,MAX(D.NAME)NAME,
			   (   ISNULL(CASE MAX(D.ADDRESS1) WHEN '' THEN NULL ELSE MAX(D.ADDRESS1) + ',' END , '')
				 + ISNULL(CASE MAX(D.ADDRESS2) WHEN '' THEN NULL ELSE MAX(D.ADDRESS2) + ',' END , '')
				 + ISNULL(CASE MAX(D.ADDRESS3) WHEN '' THEN NULL ELSE MAX(D.ADDRESS3) + ',' END , '') 
			     + ISNULL(CASE MAX(D.ADDRESS4) WHEN '' THEN NULL ELSE MAX(D.ADDRESS4) + ',' END , '')
				 + ISNULL(CASE MAX(D.ADDRESS5) WHEN '' THEN NULL ELSE MAX(D.ADDRESS5) + ',' END , '')  
			   )ADDRESS,    
				MAX(NE.STREGNO)STREGNO,MAX(RP.NATOFSERVICE)NATOFSERVICE,SUM(DD.RPAMOUNT1)EXCLUDESERVICETAX,  
				SUM(DD.RPAMOUNT2)SERVICETAX,MAX(DD.PAYMENTDATE)PAYMENTDATE ,SUM(DD.RPSBCESS) SBCESS, SUM(DD.RPKKCESS) KKCESS 
		FROM DEDUCTIONDETAIL DD     
				INNER JOIN COMPANYBRANCH CB  ON CB.BRANCHID = DD.BRANCHID        
				INNER JOIN DEDUCTEE D  ON DD.DEDUCTEEID = D.DEDUCTEEID        
				INNER JOIN NONEMPLOYEE NE  ON D.DEDUCTEEID = NE.DEDUCTEEID        
				INNER JOIN TDSRATE TR  ON TR.BGLCODEID = DD.BGLCODEID        
				INNER JOIN TAXSECTIONS TS  ON TS.SECTIONID = TR.SECTIONID        
				INNER JOIN REPORTPAYMENT RP  ON RP.ID = DD.REPORTPAYMENTID        
				INNER JOIN        
						(        
							SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID FROM REPORTPAYMENT RP          
								   INNER JOIN COMPANYBRANCH CB  ON CB.BRANCHID = RP.BRANCHID        
							WHERE RP.PARENTBRANCHID = @BRANCHID        
						)R ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID  
		WHERE DD.BRANCHID = @BRANCHID AND   MONTH(DD.PAYMENTDATE) = @MONTHID   
		GROUP BY DD.REPORTPAYMENTID         
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMONTHRANGEDEDREMITTED')
DROP PROCEDURE USP_TDS_GETMONTHRANGEDEDREMITTED
GO
CREATE PROCEDURE [USP_TDS_GETMONTHRANGEDEDREMITTED]
(
@FROMDATE SMALLDATETIME,
@TODATE SMALLDATETIME
)
AS
BEGIN
SET NOCOUNT ON
	SELECT BRANCHCODE+'|'+BRANCHNAME+'|'+ISNULL(PARENT_BRANCHCODE,'NOT AVAILABLE')+'|'+ MONTHYEAR_D +'|'+ CAST(ISNULL([26QI],0.00) AS VARCHAR)+'|'+CAST(ISNULL([26QV],0.00) AS VARCHAR)+'|'+CAST(ISNULL([27Q],0.00) AS VARCHAR)+'|'+
		   CAST(ISNULL([26QV],0.00) + ISNULL([26QI],0.00)+ISNULL([27Q],0.00) AS VARCHAR) TEXTFILE
	FROM
	(
			SELECT BRANCHCODE,BRANCHNAME,PARENT_BRANCHCODE,FORMTYPE,MONTHYEAR_D,SUM(TDS_AMOUNT) TDS_AMOUNT FROM
	(
		SELECT CB.BRANCHCODE, CB.BRANCHNAME,
		(SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK)  WHERE BRANCHID = CB.PARENTBRANCHID) [PARENT_BRANCHCODE],
		FINDATA.FORMTYPE, FINDATA.MONTHYEAR_D, FINDATA.TDS_COUNT, FINDATA.TDS_AMOUNT FROM
		(
		SELECT D.BRANCHID, CASE
					WHEN (D.FORMID = 2 AND D.SECTIONID = 5 AND D.ENTRYTYPE = 4) THEN '26QI'
		   WHEN (D.FORMID = 2 AND ((D.SECTIONID = 5 AND D.ENTRYTYPE <> 4 AND D.ENTRYTYPE = 1) OR (D.SECTIONID <> 5 AND D.ENTRYTYPE = 1 ) OR D.ENTRYTYPE <> 1)) THEN '26QV'
		   WHEN (D.FORMID = 3) THEN '27Q' END  FORMTYPE,
		DATENAME(MONTH, D.DEDUCTEDDATE) + ' ' + DATENAME(YEAR, D.DEDUCTEDDATE) [MONTHYEAR_D], COUNT(D.DEDUCTIONID) [TDS_COUNT], SUM(D.TOTALDEDUCTED) [TDS_AMOUNT]
		FROM DEDUCTIONDETAIL D WITH(NOLOCK)
		WHERE
		 D.FORMID IN(2,3) AND D.TOTALDEDUCTED > 0 AND D.DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM DEDCHALINK)
		 AND CONVERT(VARCHAR, D.DEDUCTEDDATE, 112)>=@FROMDATE AND CONVERT(VARCHAR, D.DEDUCTEDDATE, 112)<=@TODATE
		GROUP BY D.BRANCHID,D.FORMID, D.SECTIONID, D.ENTRYTYPE,DATENAME(MONTH, D.DEDUCTEDDATE) + ' ' + DATENAME(YEAR, D.DEDUCTEDDATE)
		) FINDATA INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON FINDATA.BRANCHID = CB.BRANCHID
	)TEMP
	GROUP BY BRANCHCODE,BRANCHNAME,PARENT_BRANCHCODE,FORMTYPE,MONTHYEAR_D
	) UP
	PIVOT (SUM(TDS_AMOUNT) FOR FORMTYPE IN ([26QI],[26QV] ,[27Q])) AS PVT
	ORDER BY BRANCHCODE
SET NOCOUNT OFF
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETMONTHS')
DROP PROCEDURE USP_TDS_GETMONTHS
GO
CREATE PROCEDURE [USP_TDS_GETMONTHS]  
 @BRANCHID INT,  
 @FORMID INT  
AS  
 BEGIN  
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED    
  SELECT DISTINCT SUBSTRING(CONVERT(VARCHAR(MAX),PAYMENTDATE,106),3,10) AS PAYMENTDATE,MONTH(PAYMENTDATE) AS [MONTH]  
  FROM   DEDUCTIONDETAIL DD  
  INNER JOIN DEDCHALINK DCL ON DD.DEDUCTIONID=DCL.DEDUCTIONID  AND DD.BRANCHID=DCL.BRANCHID
  WHERE  DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.TOTALDEDUCTED>0 
  UNION
    SELECT DISTINCT SUBSTRING(CONVERT(VARCHAR(MAX),PAYMENTDATE,106),3,10) AS PAYMENTDATE,MONTH(PAYMENTDATE) AS [MONTH]  
  FROM   DEDUCTIONDETAIL DD
  WHERE  DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.TOTALDEDUCTED=0 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETNEDEDUCTIONDETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETNEDEDUCTIONDETAILSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETNEDEDUCTIONDETAILSCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@NAME VARCHAR(75),
	@SECTIONID INT,
	@AMTFROM NUMERIC(13,2),
	@AMTTO NUMERIC(13,2),
	@PAIDDATEFROM SMALLDATETIME=NULL,
	@PAIDDATETO SMALLDATETIME=NULL,
	@TAXAMTFROM NUMERIC(13,2),
	@TAXAMTTO DECIMAL(13,2),
	@TAXDATEFROM SMALLDATETIME=NULL,
	@TAXDATETO SMALLDATETIME=NULL
AS
	BEGIN
		/* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
		SET NOCOUNT ON
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
	    DECLARE @QUERY NVARCHAR(MAX)
		SET @QUERY='
			SELECT COUNT(DD.DEDUCTEEID)
			FROM   DEDUCTIONDETAIL DD INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
									  INNER JOIN  NONEMPLOYEE NE WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID
									  INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID
									  LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
									  LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK)  ON DL.CHALLANID = CD.CHALLANID
			WHERE  DD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID = '+CAST(@FORMID AS VARCHAR)+' AND DD.[QUARTER] = '+CAST(@QUARTER AS VARCHAR)
		IF(@NAME<>'')
		BEGIN
		SET @QUERY = @QUERY + ' AND D.NAME LIKE ''%'+@NAME+'%'''
		END
		IF(@SECTIONID<>-1)
		BEGIN
		SET @QUERY = @QUERY +' AND DD.SECTIONID='+CAST(@SECTIONID AS VARCHAR)
		END
		IF(@AMTFROM<>0.00 OR @AMTTO<>0.00)
		BEGIN
		SET @QUERY = @QUERY +' AND DD.PAYMENTMADE BETWEEN '+CAST(@AMTFROM AS VARCHAR(20))+' AND '+CAST(@AMTTO AS VARCHAR(20))
		END
		IF(@PAIDDATEFROM IS NOT NULL AND @PAIDDATETO IS NOT NULL)
		BEGIN
		SET @QUERY = @QUERY + ' AND DD.PAYMENTDATE BETWEEN '''+CAST(@PAIDDATEFROM AS VARCHAR)+''' AND '''+CAST(@PAIDDATETO AS VARCHAR)+''''
		END
		IF(@TAXAMTFROM<>0.00 OR @TAXAMTTO<>0.00)
		BEGIN
		SET @QUERY = @QUERY +' AND DD.TOTALDEDUCTED BETWEEN '+CAST(@TAXAMTFROM AS VARCHAR)+' AND '+CAST(@TAXAMTTO AS VARCHAR)
		END
		IF(@TAXDATEFROM IS NOT NULL AND @TAXDATETO IS NOT NULL)
		BEGIN
		SET @QUERY = @QUERY +' AND DD.DEDUCTEDDATE BETWEEN '''+CAST(@TAXDATEFROM AS VARCHAR)+''' AND '''+CAST(@TAXDATETO AS VARCHAR)+''''
		END
		EXEC SP_EXECUTESQL @QUERY
		/* TURN NOCOUNT BACK OFF */
		SET NOCOUNT OFF
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETNILRETURNDETAILS')
DROP PROCEDURE USP_TDS_GETNILRETURNDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETNILRETURNDETAILS]
	@USERID INT,
	@FILTER VARCHAR(MAX)
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @ISBRANCHADMIN BIT;
		SET @SQLQUERY='SELECT CB.BRANCHNAME + ''('' + CB.BRANCHCODE + '')'' AS BRANCHNAME,FD.FORMNAME+''Q'' AS FORMNAME,
					   CASE WHEN A.[QUARTER]=1 
								THEN ''Q1'' 
								ELSE CASE WHEN A.[QUARTER]=2 
											THEN ''Q2''
											ELSE CASE WHEN A.[QUARTER]=3 
														THEN ''Q3''
														ELSE CASE WHEN A.[QUARTER]=4 
																  THEN ''Q4'' 
																  ELSE '''' 
															 END
												 END
									 END
						END AS [QUARTER],A.ERETURNGENDATE,A.ORGNUM,A.ORGFILEDDATE 
						FROM ACKNO A WITH(NOLOCK)  INNER JOIN FORMDETAILS  FD WITH(NOLOCK)  ON A.FORMID=FD.FORMID
									 LEFT JOIN COMPANYBRANCH CB  WITH(NOLOCK) ON A.BRANCHID=CB.BRANCHID';
			IF(@USERID<>-1)
				BEGIN
					SET @ISBRANCHADMIN=(SELECT ISBRANCHADMIN FROM USERMASTER WITH(NOLOCK) WHERE USERID=@USERID);
					IF(@ISBRANCHADMIN=1)
						BEGIN							
							SET @SQLQUERY=@SQLQUERY+' WHERE CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID =(SELECT BRANCHID FROM USERMASTER WHERE USERID ='+CAST(@USERID AS VARCHAR)+')) AS VARCHAR)+''%'' AND A.ISNILLRETURN=1 AND LEN(A.ORGNUM)>0  '	
							IF(@FILTER<>'')
							BEGIN
								SET @SQLQUERY = @SQLQUERY+' AND ' + @FILTER;
							END	
							SET @SQLQUERY = @SQLQUERY + ' ORDER BY A.[QUARTER]';
						END
					ELSE
						BEGIN
							SET @SQLQUERY=@SQLQUERY+' LEFT JOIN USERMASTER UM WITH(NOLOCK)  ON A.BRANCHID=UM.BRANCHID WHERE UM.USERID='+CAST(@USERID AS VARCHAR)+' AND A.ISNILLRETURN=1 AND LEN(A.ORGNUM)>0  ';
							IF(@FILTER<>'')
							BEGIN
								SET @SQLQUERY = @SQLQUERY+' AND ' + @FILTER;
							END	
							SET @SQLQUERY = @SQLQUERY + ' ORDER BY A.[QUARTER]';
						END	
				END
			ELSE
				BEGIN				
					SET @SQLQUERY=@SQLQUERY + ' WHERE A.ISNILLRETURN=1 AND LEN(A.ORGNUM)>0  ';
					IF(@FILTER<>'')
							BEGIN
								SET @SQLQUERY = @SQLQUERY+' AND ' + @FILTER;
							END	
					SET @SQLQUERY=@SQLQUERY+' ORDER BY A.[QUARTER]';
				END		
		--		PRINT 		@SQLQUERY		
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetNoChallanPay')
DROP PROCEDURE USP_TDS_GetNoChallanPay
GO
CREATE PROCEDURE USP_TDS_GetNoChallanPay
	@BRANCHID INT
AS
BEGIN
	SELECT ISNULL(NOCHALLANPAY,0) NOCHALLANPAY 
	FROM COMPANYBRANCH WITH(NOLOCK)
	WHERE BRANCHID=@BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETNONDEDUCTORBRANCHES')
DROP PROCEDURE USP_TDS_GETNONDEDUCTORBRANCHES
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETNONDEDUCTORBRANCHES]
@ROBRANCHID INT
AS
 BEGIN
   SET NOCOUNT ON
     DECLARE @TEMPBRANCH TABLE (BRANCHID INT);
     DECLARE @SQLQUERY NVARCHAR(MAX);
     DECLARE @QUARTER INT,@BRANCHID INT;
     DECLARE @TEMP TABLE ( BRANCHID INT,QUARTER TINYINT );
     SET @SQLQUERY = 'SELECT  BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) '
     INSERT INTO @TEMPBRANCH
     EXEC SP_EXECUTESQL @SQLQUERY;
     SET @QUARTER=0;
     WHILE(@QUARTER<4  AND  EXISTS(SELECT TOP 1 * FROM @TEMPBRANCH))
      BEGIN
       SELECT TOP 1 @BRANCHID=BRANCHID FROM @TEMPBRANCH
       SET @QUARTER=@QUARTER+1
       INSERT INTO @TEMP
       SELECT @BRANCHID,@QUARTER
       IF(@QUARTER=4)
        BEGIN
        SET @QUARTER=0
        DELETE TOP (1) FROM @TEMPBRANCH
        END
      END
     SELECT  (SELECT BRANCHNAME + ' [' + BRANCHCODE + ']' FROM COMPANYBRANCH WHERE BRANCHID = C.PARENTBRANCHID) AS [PARENT BRANCH], C.BRANCHNAME, C.BRANCHCODE,
          'QUARTER'+CAST( T.QUARTER AS VARCHAR(1)) AS QUARTER
         FROM @TEMP T
         LEFT JOIN  BRANCHDEDUCTORS BD  WITH(NOLOCK) ON T.BRANCHID=BD.BRANCHID AND T.QUARTER=BD.QUARTER
        INNER JOIN COMPANYBRANCH C WITH(NOLOCK)   ON C.BRANCHID=T.BRANCHID
        WHERE BD.BRANCHID IS NULL ORDER BY BD.BRANCHID
   SET NOCOUNT OFF
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETNONDEDUCTORFINACLE')
DROP PROCEDURE USP_TDS_GETNONDEDUCTORFINACLE
GO
CREATE PROCEDURE [USP_TDS_GETNONDEDUCTORFINACLE]
(
@FROMDATE SMALLDATETIME,
@TODATE SMALLDATETIME
)
AS
 SET NOCOUNT ON
 DECLARE @TEMPBRANCH TABLE (BRANCHID INT)
 INSERT INTO @TEMPBRANCH
 SELECT  BRANCHID FROM COMPANYBRANCH
  DECLARE @QUARTER INT,@BRANCHID INT;
 DECLARE @TEMP TABLE ( BRANCHID INT,QUARTER TINYINT )
 SET @QUARTER=0;
 WHILE(@QUARTER<4  AND  EXISTS(SELECT TOP 1 * FROM @TEMPBRANCH))
 BEGIN
 SELECT TOP 1 @BRANCHID=BRANCHID FROM @TEMPBRANCH
 SET @QUARTER=@QUARTER+1
 INSERT INTO @TEMP
 SELECT @BRANCHID,@QUARTER
 IF(@QUARTER=4)
 BEGIN
 SET @QUARTER=0
 DELETE TOP (1) FROM @TEMPBRANCH
 END
 END
 DECLARE @TT TABLE(BRANCHID INT,QUARTER INT)
INSERT INTO  @TT
SELECT DISTINCT TT.BRANCHID,TT.QUARTER FROM
(
SELECT *  FROM @TEMP
EXCEPT
SELECT B.BRANCHID,B.QUARTER FROM BRANCHDEDUCTORS B
) TT
INNER JOIN COMPANYBRANCH C WITH(NOLOCK)
ON TT.BRANCHID=C.BRANCHID
DECLARE @T TABLE(BRANCHID INT)
INSERT INTO  @T
SELECT DISTINCT T.BRANCHID FROM DEDUCTIONDETAIL D WITH(NOLOCK)
INNER JOIN @TT T ON T.BRANCHID=D.BRANCHID AND T.QUARTER=D.QUARTER
WHERE D.SECTIONID IN(5,17)   AND CONVERT(SMALLDATETIME,D.DEDUCTEDDATE ,103) BETWEEN @FROMDATE AND @TODATE
SELECT (SELECT BRANCHNAME + ' [' + BRANCHCODE + ']'
		FROM COMPANYBRANCH WITH(NOLOCK)  WHERE BRANCHID = OCB.PARENTBRANCHID) AS [PARENT BRANCH], BRANCHNAME, BRANCHCODE
FROM COMPANYBRANCH OCB WITH(NOLOCK)
WHERE OCB.BRANCHID IN
(
SELECT CB.BRANCHID FROM @TT CB
INTERSECT
SELECT * FROM @T DD
)
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetNonEmpAutoComplete')
DROP PROCEDURE USP_TDS_GetNonEmpAutoComplete
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetNonEmpAutoComplete]
	@BRANCHID INT,
	@ISAPPLICABLE INT,
	@PREFIXTEXT NVARCHAR(MAX),
	@RECORDCOUNT INT
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);		
		SET @QUERY ='SELECT DEDUCTEE.DEDUCTEEID,DEDUCTEE.NAME +'' (''+ CAST(NONEMPLOYEE.SERIALNO AS VARCHAR)+'')''+''-''+DEDUCTEE.PAN AS DEDUCTEENAME,DEDUCTEE.PANREFERENCE,NONEMPLOYEE.ISTRANSPORTER,ISNULL(NONEMPLOYEE.STATUS,0) STATUS,DEDUCTEE.PAN, ISNULL(NONEMPLOYEE.GSTIN,'''') GSTIN
					 FROM   DEDUCTEE WITH(NOLOCK)  INNER JOIN NONEMPLOYEE WITH(NOLOCK)  ON DEDUCTEE.DEDUCTEEID=NONEMPLOYEE.DEDUCTEEID								 	       
					 WHERE  DEDUCTEE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND'	 
		IF (@ISAPPLICABLE = 2)
			BEGIN
				SET @QUERY = @QUERY + '( NONEMPLOYEE.ISAPPLICABLE26 = 1 or NONEMPLOYEE.ISAPPLICABLE27 = 1 ) AND ';
			END
		ELSE
			BEGIN
				SET @QUERY = @QUERY + ' NONEMPLOYEE.ISAPPLICABLE27 = 1 AND ';
			END
		SET @QUERY = @QUERY + 'DEDUCTEE.NAME +'' (''+ CAST(NONEMPLOYEE.SERIALNO AS VARCHAR) +'')'' LIKE ''%'+@PREFIXTEXT+'%''';
		--print @QUERY;
		EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetNonEmployee')
DROP PROCEDURE USP_TDS_GetNonEmployee
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetNonEmployee]      --[USP_TDS_GetNonEmployee]  5117    
 @BranchID INT      
AS      
 BEGIN      
  SELECT DEDUCTEE.DEDUCTEEID AS DeducteeID,NONEMPLOYEE.NONEMPLOYEEID AS NonEmployeeID,DEDUCTEE.BRANCHID AS BranchID,      
      DEDUCTEE.SALUTATION AS Salutation,DEDUCTEE.NAME AS DeducteeName,DEDUCTEE.PAN AS Pan,DEDUCTEE.PANREFERENCE AS PanReference,      
      DEDUCTEE.ADDRESS1 AS Address1,DEDUCTEE.ADDRESS2 AS Address2,DEDUCTEE.ADDRESS3 AS Address3,DEDUCTEE.ADDRESS4 AS Address4,      
      DEDUCTEE.ADDRESS5 AS Address5,DEDUCTEE.STATEID AS StateID,DEDUCTEE.PINCODE AS PinCode,DEDUCTEE.REFERENCENO AS ReferencrNumber,      
      DEDUCTEE.PHONENO AS PhoneNumber,DEDUCTEE.EMAILADDRESS AS EmailAddress,NONEMPLOYEE.DEDUCTEECODE AS DeducteeCode,      
      NONEMPLOYEE.ISAPPLICABLE26 AS IsApplicable26,NONEMPLOYEE.ISAPPLICABLE27 AS IsApplicable27,      
      ISNULL(NONEMPLOYEE.SERIALNO,'') AS SerialNumber,STATEMASTER.STATENAME AS StateName,NONEMPLOYEE.ISTRANSPORTER,ISNULL(PANSTATUS,'') AS PANSTATUS,
      ISNULL(ACCOUNTNUMBER,'') ACCOUNTNUMBER,ISNULL(IFSCCODE,'') IFSCCODE,ISNULL(STATUS,0) STATUS, 
      ISNULL(CONTAXRATE,0)CONTAXRATE, ISNULL(CONLIMIT,0)CONLIMIT,ISNULL(MAKETDSFROMFIRSTPAYMENT,0)MAKETDSFROMFIRSTPAYMENT             
  FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK)  ON DEDUCTEE.DEDUCTEEID=NONEMPLOYEE.DEDUCTEEID      
      LEFT JOIN STATEMASTER WITH(NOLOCK)  ON DEDUCTEE.STATEID=  STATEMASTER.STATEID               
  WHERE  BranchID=@BranchID order by DEDUCTEE.NAME;      
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETNONEMPLOYEEBYDEDUCTEEID')
DROP PROCEDURE USP_TDS_GETNONEMPLOYEEBYDEDUCTEEID
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETNONEMPLOYEEBYDEDUCTEEID]    
 @DEDUCTEEID INT    
AS    
 BEGIN    
  DECLARE @ISDEDUCTEEUSEDINCORR TINYINT    
  SELECT @ISDEDUCTEEUSEDINCORR = CASE WHEN COUNT(DEDUCTEESERIALNO) > 0 THEN 1 ELSE 0 END FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID OR MATCHEDID = @DEDUCTEEID    
  SELECT D.DEDUCTEEID,NE.NONEMPLOYEEID,D.BRANCHID,D.SALUTATION,D.NAME,D.PAN,D.PANREFERENCE,    
      D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,D.PINCODE,D.PHONENO,D.EMAILADDRESS,NE.DEDUCTEECODE,    
      NE.ISAPPLICABLE26,NE.ISAPPLICABLE27,NE.ISAPPLICABLE27E,NE.SERIALNO,SM.STATENAME,NE.ISTRANSPORTER,@ISDEDUCTEEUSEDINCORR AS ISDEDUCTEEUSEDINCORRECTION,    
      D.REFERENCENO, ISNULL(D.PANSTATUS,'') AS PANSTATUS,ISNULL(NE.ACCOUNTNUMBER,'') ACCOUNTNUMBER,ISNULL(NE.IFSCCODE,'') IFSCCODE,ISNULL(NE.STATUS,0) STATUS,    
      ISNULL(NE.CONTAXRATE,-1)CONTAXRATE, ISNULL(NE.CONLIMIT,-1)CONLIMIT,ISNULL(NE.MAKETDSFROMFIRSTPAYMENT,0)MAKETDSFROMFIRSTPAYMENT,ISNULL(NE.BANKNAME,'') BANKNAME,ISNULL(NE.BRANCHNAME,'') BRANCHNAME,    
      ISNULL(BL.ID,-1) BANKID,ISNULL(NE.STREGNO,'')STREGNO, ISNULL(NE.GSTIN,'')GSTIN,ISNULL((SELECT BRANCHNAME+'('+BRANCHCODE+')' FROM COMPANYBRANCH WHERE BRANCHID= D.ENTRYBRANCHID),'')ENTRYBRANCH,ISNULL(D.ENTRYDATE,GETDATE())ENTRYDATE,  
      ISNULL(NE.MOBILENO ,'') MOBILENO,ISNULL(NE.FAX,'')FAX,ISNULL(NE.CONTACTPERSONNAME,'')CONTACTPERSONNAME,ISNULL(NE.PERSONDESIGNATION,'')PERSONDESIGNATION      
  FROM  DEDUCTEE D WITH(NOLOCK)
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID    
		LEFT JOIN STATEMASTER SM WITH(NOLOCK)  ON D.STATEID=  SM.STATEID    
		LEFT JOIN BANKLIST BL WITH(NOLOCK) ON BL.BANKNAME=NE.BANKNAME    
  WHERE  D.DEDUCTEEID=@DEDUCTEEID ;    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetNonEmployeeCount')
DROP PROCEDURE USP_TDS_GetNonEmployeeCount
GO
CREATE PROCEDURE [USP_TDS_GetNonEmployeeCount]
	@BranchID INT,
	@NAME VARCHAR(75),
	@PAN VARCHAR(10),
	@REFERENCENO VARCHAR(20)
AS
	BEGIN	
	DECLARE @QUERY NVARCHAR(MAX)
	SET @QUERY='
			SELECT COUNT(DEDUCTEE.DEDUCTEEID)
			FROM   DEDUCTEE WITH(NOLOCK)  INNER JOIN NONEMPLOYEE WITH(NOLOCK)  ON DEDUCTEE.DEDUCTEEID=NONEMPLOYEE.DEDUCTEEID
							LEFT JOIN STATEMASTER WITH(NOLOCK)  ON DEDUCTEE.STATEID= STATEMASTER.STATEID	       
							LEFT JOIN (SELECT DISTINCT(ISNULL(DEDUCTEEID,MATCHEDID)) AS DEDUCTEEID 
										FROM CORRNONEMPLOYEE  WITH(NOLOCK) 
										WHERE BRANCHID ='+CAST(@BranchID AS VARCHAR)+' AND CORRECTIONSTATUS = 1) AS CORR ON DEDUCTEE.DEDUCTEEID = CORR.DEDUCTEEID
			WHERE  BranchID='+CAST(@BranchID AS VARCHAR)	
			IF(@NAME<>'')
			BEGIN
			SET @QUERY = @QUERY + 'AND DEDUCTEE.NAME LIKE ''%'+@NAME+'%'''
			END			
			IF(@PAN<>'')
			BEGIN
			SET @QUERY = @QUERY + 'AND DEDUCTEE.PAN LIKE ''%'+@PAN+'%'''
			END
			IF(@REFERENCENO <> '')
			BEGIN
			SET @QUERY = @QUERY + ' AND DEDUCTEE.REFERENCENO LIKE ''%' + @REFERENCENO+'%'''
			END
		EXEC SP_EXECUTESQL @QUERY	
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETNONEMPLOYEESCOUNTFORBULKDELETE')
DROP PROCEDURE USP_TDS_GETNONEMPLOYEESCOUNTFORBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_GETNONEMPLOYEESCOUNTFORBULKDELETE]
 @BRANCHID INT,
@LOCKEDQUARTERS VARCHAR(50),
@ISQUARTERLOCKED BIT
AS
 BEGIN
 DECLARE @SQLQUERY NVARCHAR(MAX);
 IF(@ISQUARTERLOCKED = 0)
  BEGIN
   SELECT COUNT(D.DEDUCTEEID)
     FROM NONEMPLOYEE NE WITH(NOLOCK)  INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON NE.DEDUCTEEID = D.DEDUCTEEID
       LEFT JOIN
       (
       SELECT DISTINCT DD.DEDUCTEEID
       FROM   PARTPAYMENTDETAILS PPD WITH(NOLOCK)  INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)  ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID
       WHERE  PPD.BRANCHID = @BRANCHID AND PPD.FORMID IN (2,3)
      ) PPD ON D.DEDUCTEEID = PPD.DEDUCTEEID
     WHERE  D.BRANCHID = @BRANCHID
  END
 ELSE
  BEGIN
   SET @SQLQUERY= 'SELECT COUNT(D.DEDUCTEEID) AS NONEMPCOUNT
              FROM NONEMPLOYEE NE WITH(NOLOCK)
              INNER JOIN DEDUCTEE D WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
          WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND D.DEDUCTEEID NOT IN
           (
           SELECT DISTINCT DD.DEDUCTEEID
           FROM  DEDUCTIONDETAIL DD WITH(NOLOCK)  LEFT JOIN PARTPAYMENTDETAILS PPD  WITH(NOLOCK) ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID
           WHERE  DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + 'AND DD.FORMID IN (2,3) AND DD.QUARTER IN ( ' + CAST(@LOCKEDQUARTERS AS VARCHAR) + ')
          ) '
   EXECUTE SP_EXECUTESQL @SQLQUERY;
  END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETNONEMPLOYEESFORBULKDELETE')
DROP PROCEDURE USP_TDS_GETNONEMPLOYEESFORBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_GETNONEMPLOYEESFORBULKDELETE]
 @PAGEINDEX INT,
 @PAGESIZE INT,
 @BRANCHID INT ,
@LOCKEDQUARTERS VARCHAR(50),
@ISQUARTERLOCKED BIT
AS
 BEGIN
  /* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
  SET NOCOUNT ON
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */
  DECLARE @FIRSTREC INT, @LASTREC INT
  DECLARE @SQLQUERY NVARCHAR(MAX);
  SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE;
  SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);
   IF(@ISQUARTERLOCKED = 0)
 BEGIN
    WITH TEMPRESULT AS
    (
     SELECT ROW_NUMBER() OVER(ORDER BY D.DEDUCTEEID) AS ROWNUM,D.DEDUCTEEID,NE.NONEMPLOYEEID,D.BRANCHID,D.SALUTATION,D.NAME,D.PAN,D.PANREFERENCE,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,SM.STATENAME,
      D.PINCODE,D.REFERENCENO,D.PHONENO,D.EMAILADDRESS,NE.SERIALNO,NE.DEDUCTEECODE,NE.ISAPPLICABLE26,NE.ISAPPLICABLE27,NE.ISTRANSPORTER,
      CASE WHEN PPD.DEDUCTEEID IS NULL THEN 0 ELSE 1 END HASPARTPAYMENTDETAIL
      FROM NONEMPLOYEE NE WITH(NOLOCK)
     INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
     INNER JOIN STATEMASTER SM WITH(NOLOCK)  ON D.STATEID = SM.STATEID
     LEFT JOIN
     (
     SELECT DISTINCT DD.DEDUCTEEID
     FROM   PARTPAYMENTDETAILS PPD INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)  ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID
     WHERE  PPD.BRANCHID = @BRANCHID AND PPD.FORMID IN (2,3)) PPD ON D.DEDUCTEEID = PPD.DEDUCTEEID
          WHERE  D.BRANCHID = @BRANCHID
    )
   SELECT TOP (@LASTREC-1) * FROM TEMPRESULT
   WHERE ROWNUM > @FIRSTREC AND ROWNUM < @LASTREC
   END
   ELSE
 BEGIN
  SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER(ORDER BY D.DEDUCTEEID) AS ROWNUM,D.DEDUCTEEID,NE.NONEMPLOYEEID,D.BRANCHID,D.SALUTATION,D.NAME,D.PAN,D.PANREFERENCE,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,SM.STATENAME,
      D.PINCODE,D.REFERENCENO,D.PHONENO,D.EMAILADDRESS,NE.SERIALNO,NE.DEDUCTEECODE,NE.ISAPPLICABLE26,NE.ISAPPLICABLE27,NE.ISTRANSPORTER,
       0 AS HASPARTPAYMENTDETAIL
      INTO #NONEMP
      FROM NONEMPLOYEE NE WITH(NOLOCK)
      INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON NE.DEDUCTEEID = D.DEDUCTEEID
      INNER JOIN STATEMASTER SM WITH(NOLOCK)  ON D.STATEID = SM.STATEID
      WHERE D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+'  AND D.DEDUCTEEID NOT IN
      (
      SELECT DISTINCT DD.DEDUCTEEID
      FROM   DEDUCTIONDETAIL DD WITH(NOLOCK)  LEFT JOIN PARTPAYMENTDETAILS PPD WITH(NOLOCK)  ON PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER AND PPD.PARTPAYMENTID = DD.PARTPAYMENTID
      WHERE  DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + 'AND DD.FORMID IN (2,3) AND DD.QUARTER IN ('+ CAST(@LOCKEDQUARTERS AS VARCHAR) + ')
       )'
  SET @SQLQUERY = @SQLQUERY + ' SELECT TOP ('+ CAST(@LASTREC AS VARCHAR) + '-1) * FROM #NONEMP   WHERE ROWNUM > '+ CAST(@FIRSTREC AS VARCHAR) + ' AND ROWNUM < '+ CAST(@LASTREC AS VARCHAR)
  EXECUTE SP_EXECUTESQL @SQLQUERY;
 END
  /* TURN NOCOUNT BACK OFF */
  SET NOCOUNT OFF
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetNonEmployeesPaged')
DROP PROCEDURE USP_TDS_GetNonEmployeesPaged
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetNonEmployeesPaged]    
   @StartRow INT,    
   @PageSize INT,    
   @BRANCHID INT,    
   @NAME VARCHAR(75),    
   @PAN VARCHAR(10),
   @REFERENCENO VARCHAR(20)        
AS    
 BEGIN    
  /* The number of rows affected by the different commands does not interest the application, so turn NOCOUNT ON*/    
  SET NOCOUNT ON    
  /* Determine the first record and last record */    
  DECLARE @FirstRec int, @LastRec int    
  SELECT @FirstRec = (@StartRow - 1) * @PageSize    
  SELECT @LastRec = (@StartRow * @PageSize + 1);    
  DECLARE @QUERY NVARCHAR(MAX)    
  SET @QUERY = 'SELECT RowNum = IDENTITY(INT,1,1),D.DEDUCTEEID,NE.NONEMPLOYEEID,D.BRANCHID,D.SALUTATION,D.NAME,D.PAN,D.PANREFERENCE,    
        D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,D.STATEID,D.PINCODE,D.REFERENCENO,D.PHONENO,D.EMAILADDRESS,NE.DEDUCTEECODE,    
        NE.ISAPPLICABLE26,NE.ISAPPLICABLE27,ISNULL(NE.ISAPPLICABLE27E,0)ISAPPLICABLE27E,NE.SERIALNO,SM.STATENAME,NE.ISTRANSPORTER,CASE WHEN ISNULL(CORR.DEDUCTEEID,0) > 0 THEN 1 ELSE 0 END AS ISDEDUCTEEUSEDINCORRECTION,ISNULL(D.PANSTATUS,'''') AS PANSTATUS,    
      ISNULL(ACCOUNTNUMBER,'''') ACCOUNTNUMBER,ISNULL(IFSCCODE,'''') IFSCCODE,ISNULL(STATUS,0) STATUS,    
      ISNULL(CONTAXRATE,0)CONTAXRATE, ISNULL(CONLIMIT,0)CONLIMIT,ISNULL(MAKETDSFROMFIRSTPAYMENT,0)MAKETDSFROMFIRSTPAYMENT,ISNULL(NE.BANKNAME,'''')BANKNAME,ISNULL(NE.BRANCHNAME,'''')BRANCHNAME,0 AS BANKID,ISNULL(NE.STREGNO,'''')STREGNO, ISNULL(NE.GSTIN,'''')GSTIN,'''' AS ENTRYBRANCH,      GETDATE() AS ENTRYDATE,ISNULL(NE.MOBILENO ,'''') MOBILENO,ISNULL(NE.FAX,'''')FAX,ISNULL(NE.CONTACTPERSONNAME,'''')CONTACTPERSONNAME,ISNULL(NE.PERSONDESIGNATION,'''')PERSONDESIGNATION  
       INTO   #TEMP    
       FROM   DEDUCTEE D WITH(NOLOCK)  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID    
       LEFT JOIN STATEMASTER SM WITH(NOLOCK)  ON D.STATEID = SM.STATEID    
        LEFT JOIN    
        (    
   SELECT DISTINCT(ISNULL(DEDUCTEEID,MATCHEDID)) AS DEDUCTEEID    
   FROM CORRNONEMPLOYEE WITH(NOLOCK)    
           WHERE BRANCHID = ' + CAST(@BranchID AS VARCHAR) + ' AND CORRECTIONSTATUS = 1    
         ) AS CORR ON D.DEDUCTEEID = CORR.DEDUCTEEID    
        WHERE  BranchID = ' + CAST(@BRANCHID AS VARCHAR)    
  IF(@NAME<>'')    
   BEGIN    
    SET @QUERY = @QUERY + ' AND D.NAME LIKE ''%' + @NAME + '%''';    
   END    
  IF(@PAN<>'')    
   BEGIN    
    SET @QUERY = @QUERY + ' AND D.PAN LIKE ''%' + @PAN + '%'''    
   END  
   IF(@REFERENCENO<>'')    
   BEGIN    
    SET @QUERY = @QUERY + ' AND D.REFERENCENO LIKE ''%' + @REFERENCENO + '%'''    
   END
   SET @QUERY = @QUERY + 'ORDER BY NE.SERIALNO'    
  SET @QUERY = @QUERY +  ';SELECT * FROM #TEMP WHERE RowNum > ' + CAST(@FirstRec as varchar(10)) + ' AND RowNum < ' + CAST(@LastRec as varchar(10));    
  EXEC SP_EXECUTESQL @QUERY;    
  /* Turn NOCOUNT back OFF */    
  SET NOCOUNT OFF    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETNONEMPLOYEEWITHPAN')
DROP PROCEDURE USP_TDS_GETNONEMPLOYEEWITHPAN
GO
CREATE PROCEDURE USP_TDS_GETNONEMPLOYEEWITHPAN
 @NAME VARCHAR(20),                  
 @SECTIONID INT,                   
 @BRANCHID INT  
AS                  
 BEGIN 
 SELECT NAME,PAN,DEDUCTEEID,BRANCHID INTO #DEDID FROM DEDUCTEE WITH(NOLOCK)
 WHERE BRANCHID =@BRANCHID AND NAME LIKE @NAME+'%'
 SELECT DEDUCTEEID,BRANCHID,SECTIONID INTO #DEDUCTION FROM DEDUCTIONDETAIL WITH(NOLOCK)
 WHERE BRANCHID=@BRANCHID AND SECTIONID=@SECTIONID AND DEDUCTEEID IN(SELECT DEDUCTEEID FROM #DEDID)
 SELECT DEDUCTEEID INTO #NONEMP FROM NONEMPLOYEE  WITH(NOLOCK)
 WHERE DEDUCTEEID  IN(SELECT DEDUCTEEID FROM #DEDID)
  SELECT TOP 10 D.NAME + '-' + D.PAN AS NAMEWITHPAN                  
  FROM 
  #NONEMP NE WITH(NOLOCK)                   
  INNER JOIN 
   #DEDID D ON D.DEDUCTEEID = NE.DEDUCTEEID                  
   INNER JOIN #DEDUCTION DD WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID               
  GROUP BY D.NAME,D.PAN
  DROP TABLE #DEDID
  DROP TABLE #DEDUCTION
  DROP TABLE #NONEMP                  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetNonEmpMaxSrNo')
DROP PROCEDURE USP_TDS_GetNonEmpMaxSrNo
GO
CREATE PROCEDURE USP_TDS_GetNonEmpMaxSrNo  
	@BRANCHCODES NVARCHAR(MAX)               
AS        
	BEGIN
		SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SplitString(@BRANCHCODES,',')
		SELECT BRANCHID, BRANCHCODE, 0 AS SERIALNO 
		INTO #COMPANY 
		FROM COMPANYBRANCH WITH(NOLOCK)
			INNER JOIN #BRANCHES B ON B.DATA = BRANCHCODE
		SELECT MAX(SERIALNO)SERIALNO , BRANCHCODE 
		FROM
		(	
			SELECT C.BRANCHCODE, NE.SERIALNO
			FROM NONEMPLOYEE NE WITH(NOLOCK) 
				INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = NE.DEDUCTEEID
				INNER JOIN #COMPANY C ON C.BRANCHID = D.BRANCHID
			UNION 
			SELECT BRANCHCODE, SERIALNO 
			FROM #COMPANY
		)D
		GROUP BY BRANCHCODE    
		DROP TABLE #COMPANY
		DROP TABLE #BRANCHES  
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETNOSALARYDETFORDQR')
DROP PROCEDURE USP_TDS_GETNOSALARYDETFORDQR
GO
CREATE PROCEDURE [USP_TDS_GETNOSALARYDETFORDQR]
(
@BRANCHID INT
)
AS
BEGIN
WITH TEMP AS
(
SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)
INNER JOIN EMPLOYEE E WITH(NOLOCK)
ON D.DEDUCTEEID=E.DEDUCTEEID
WHERE D.BRANCHID=@BRANCHID
EXCEPT
SELECT DEDUCTEEID FROM SALARYDETAIL WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID
)
SELECT D.NAME,D.PAN,E.SERIALNO FROM DEDUCTEE D WITH(NOLOCK)
INNER JOIN TEMP T
ON D.DEDUCTEEID=T.DEDUCTEEID
INNER JOIN EMPLOYEE E WITH(NOLOCK)
ON E.DEDUCTEEID=T.DEDUCTEEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETOFFLINESETTINGS')
DROP PROCEDURE USP_TDS_GETOFFLINESETTINGS
GO
CREATE PROCEDURE [USP_TDS_GETOFFLINESETTINGS]
(
@BRANCHID INT
)
AS
SELECT (SELECT BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID=BR.BRANCHID) BRANCHCODE,D.TAN,R.PERSONNAME,R.FATHERNAME,R.DESIGNATION
FROM RESPONSIBLEPERSON R WITH(NOLOCK)
INNER JOIN
(
SELECT MAX(DEDUCTORID)DEDUCTORID,BRANCHID FROM BRANCHDEDUCTORS WITH(NOLOCK)
WHERE BRANCHID IN(SELECT CC.BRANCHID FROM COMPANYBRANCH  C INNER JOIN COMPANYBRANCH CC WITH(NOLOCK)
ON C.BRANCHID=CC.PARENTBRANCHID WHERE C.BRANCHID=@BRANCHID UNION
SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID)
GROUP BY BRANCHID
) BR
ON R.DEDUCTORID=BR.DEDUCTORID
INNER JOIN DEDUCTOR D WITH(NOLOCK)
ON D.DEDUCTORID=R.DEDUCTORID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETOLTASCHALLANBSRCODES')
DROP PROCEDURE USP_TDS_GETOLTASCHALLANBSRCODES
GO
CREATE PROCEDURE [USP_TDS_GETOLTASCHALLANBSRCODES]
@BRANCHID INT,
@FINYEAR VARCHAR(5)
AS
 BEGIN
   SELECT DISTINCT O.BSRCODE  FROM OLTASCHALLAN O WITH(NOLOCK)
   WHERE BRANCHID=@BRANCHID AND FINYEAR=@FINYEAR
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETOLTASCHALLANCOUNT')
DROP PROCEDURE USP_TDS_GETOLTASCHALLANCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETOLTASCHALLANCOUNT]
@BRANCHID INT,
@FINYEAR VARCHAR(5),
@SECTIONID INT,
@BSRCODE VARCHAR(7),
@CHALLANDATEFROM SMALLDATETIME = NULL,
@CHALLANDATETO SMALLDATETIME = NULL
AS
 BEGIN
  DECLARE @QUERY NVARCHAR(MAX);
  SET @QUERY='SELECT COUNT(SNO)
        FROM OLTASCHALLAN WITH(NOLOCK)
        WHERE BRANCHID=' + CAST(@BRANCHID AS VARCHAR)+'  AND FINYEAR='+ CAST(@FINYEAR AS VARCHAR)
   IF(@SECTIONID <> -1 AND @SECTIONID = 1)
  BEGIN
     SET @QUERY=@QUERY + ' AND SECTIONID IN (1,2)'
  END
 ELSE  IF(@SECTIONID <>-1)
  BEGIN
     SET @QUERY=@QUERY + ' AND SECTIONID = '+ CAST (@SECTIONID AS VARCHAR)
  END
  IF(@BSRCODE <> -1)
   BEGIN
     SET @QUERY=@QUERY + ' AND BSRCODE = '+ CAST (@BSRCODE AS VARCHAR)
   END
     IF(@CHALLANDATEFROM IS NOT NULL AND @CHALLANDATETO IS NOT NULL)
   BEGIN
     SET @QUERY= @QUERY + ' AND CHALLANDATE BETWEEN '''+ CAST (@CHALLANDATEFROM AS VARCHAR)+'''  AND ''' + CAST (@CHALLANDATETO AS VARCHAR)+''''
   END
   PRINT @CHALLANDATEFROM;
  EXEC SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETOLTASCHALLANS')
DROP PROCEDURE USP_TDS_GETOLTASCHALLANS
GO
CREATE PROCEDURE [USP_TDS_GETOLTASCHALLANS]
@BRANCHID INT
AS
 BEGIN
    SELECT ROW_NUMBER() OVER (ORDER BY SUBSTRING(DATA,0,CHARINDEX('%',DATA)-2))ROWNUM, DATA, (SELECT ASONDATE FROM OLTASCHALLAN WHERE BRANCHID = @BRANCHID)ASONDATE
      FROM UDF_TDS_SPLITSTRING((SELECT RECORD FROM OLTASCHALLAN WHERE BRANCHID = @BRANCHID), '^')
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETOLTASCHALLANSECTIONS')
DROP PROCEDURE USP_TDS_GETOLTASCHALLANSECTIONS
GO
CREATE PROCEDURE [USP_TDS_GETOLTASCHALLANSECTIONS]
@BRANCHID INT,
@FINYEAR VARCHAR(5)
AS
 BEGIN
         SELECT TOP 1  TS.SECTIONNAME , TS.DESCRIPTION,  O.SECTIONID  FROM OLTASCHALLAN O WITH(NOLOCK)
         INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON O.SECTIONID=TS.SECTIONID
         WHERE BRANCHID=@BRANCHID AND FINYEAR=@FINYEAR AND TS.FORMID = 1
        UNION
        SELECT DISTINCT TS.SECTIONNAME , TS.DESCRIPTION,  O.SECTIONID  FROM OLTASCHALLAN O WITH(NOLOCK)
         INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON O.SECTIONID=TS.SECTIONID
         WHERE BRANCHID=@BRANCHID AND FINYEAR=@FINYEAR AND TS.FORMID <> 1
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETOTHERINCOME')
DROP PROCEDURE USP_TDS_GETOTHERINCOME
GO
CREATE PROCEDURE [USP_TDS_GETOTHERINCOME] 
@COMID INT,
@BRANCHID INT
AS
 BEGIN
      DECLARE @PREVEMP NUMERIC(13,2), @DEDUCTEEID INT;
	  SELECT @DEDUCTEEID = D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) 
		 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID
		 WHERE D.BRANCHID = @BRANCHID AND LC.COMID = @COMID
	 SELECT OTHERINCOMEID, HOUSEPROL, HOUSEPROS, INTERESTONSB, LGAIN, SGAIN, BUSSINESSPROF, 0 AS PREVEMP
		 FROM OTHERINCOME WITH (NOLOCK) WHERE COMID = @COMID 
    SELECT  SALARYFROMPREVEMP FROM SALARYDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND DEDUCTEEID =  @DEDUCTEEID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETOTHERINCOMESOURCES')
DROP PROCEDURE USP_TDS_GETOTHERINCOMESOURCES
GO
CREATE PROCEDURE [USP_TDS_GETOTHERINCOMESOURCES]
@COMID INT,
@SOURCEID INT
AS
 BEGIN
	 DECLARE @SQLQUERY NVARCHAR(MAX);
	 SET @SQLQUERY = 'SELECT OS.SOURCEID, AMOUNT,EXEMPTAMT FROM OTHERINCOMESOURCES OS WITH (NOLOCK)
					INNER JOIN OTHERINCOME O WITH (NOLOCK) ON O.OTHERINCOMEID = OS.OTHERINCOMEID
					WHERE O.COMID = ' + CAST(@COMID AS VARCHAR)
	IF(@SOURCEID <> -1)
	 BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND OS.SOURCEID = ' + CAST(@SOURCEID AS VARCHAR)
	 END
	 EXEC SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPAGEDTDSRATES')
DROP PROCEDURE USP_TDS_GETPAGEDTDSRATES
GO
CREATE PROCEDURE [USP_TDS_GETPAGEDTDSRATES]
@PAGINDEX INT,
@PAGESIZE INT
AS
 BEGIN
	DECLARE @FIRSTINDEX INT, @LASTINDEX INT, @SQLQUERY NVARCHAR(MAX);
	SELECT @FIRSTINDEX = (@PAGINDEX - 1) * @PAGESIZE;
  SELECT @LASTINDEX = (@PAGINDEX * @PAGESIZE + 1);
	SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER(ORDER BY BGLCODEID) ROWNO, BGLCODEID, BGLCODE, DESCRIPTION, SECTIONID,
									THRESHOLDLIMIT, CATEGORY1, CATEGORY2
									INTO #TDSRATE
									FROM TDSRATE WITH(NOLOCK)  '
	SET @SQLQUERY = @SQLQUERY + '; SELECT * FROM #TDSRATE WHERE ROWNO > '+ CAST(@FIRSTINDEX AS VARCHAR) + ' AND
																	ROWNO < '+ CAST(@LASTINDEX AS VARCHAR)
	PRINT @SQLQUERY
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPANMAXREFERENCENUMBER')
DROP PROCEDURE USP_TDS_GETPANMAXREFERENCENUMBER
GO
CREATE PROCEDURE [USP_TDS_GETPANMAXREFERENCENUMBER]
@BRANCHID INT,
@ISEMPLOYEE BIT
AS    
BEGIN    
		DECLARE @PANREFERENCE VARCHAR(10);
		SET @PANREFERENCE = 'NOPAN';      
        SET @PANREFERENCE = @PANREFERENCE + DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHID(@BRANCHID, @ISEMPLOYEE);      
        SELECT @PANREFERENCE AS PANREFERENCE;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPANMAXREFERENCENUMBERFORCB')
DROP PROCEDURE USP_TDS_GETPANMAXREFERENCENUMBERFORCB
GO
CREATE PROCEDURE [USP_TDS_GETPANMAXREFERENCENUMBERFORCB]
@BRANCHID INT,
@ISEMPLOYEE BIT
AS    
BEGIN    
		DECLARE @PANREFERENCE VARCHAR(10);
		SET @PANREFERENCE = 'NP';      
        SET @PANREFERENCE = @PANREFERENCE + DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHIDFORCB(@BRANCHID,@ISEMPLOYEE);     
        SELECT @PANREFERENCE AS PANREFERENCE;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetPANPercRecsForDQR')
DROP PROCEDURE USP_TDS_GetPANPercRecsForDQR
GO
CREATE PROCEDURE [USP_TDS_GetPANPercRecsForDQR]        
(        
@BRANCHID INT,        
@FORMID TINYINT,        
@QUARTER TINYINT        
)        
AS        
BEGIN 
IF(@FORMID=1)
BEGIN      
	SELECT E.SERIALNO,D.NAME,DD.PAYMENTMADE,DD.TOTALDEDUCTED,D.PAN,(SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER) DEDCOUNT FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  INNER JOIN DEDUCTEE D WITH(NOLOCK) 
	INNER JOIN EMPLOYEE E WITH(NOLOCK) 
	ON E.DEDUCTEEID=D.DEDUCTEEID        
	ON DD.DEDUCTEEID=D.DEDUCTEEID AND DD.BRANCHID=D.BRANCHID        
	LEFT JOIN DEDCHALINK DCL WITH(NOLOCK)    
	ON DCL.DEDUCTIONID=DD.DEDUCTIONID  AND DD.BRANCHID=DCL.BRANCHID  
	WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND (DCL.DEDUCTIONID IS NOT NULL  OR DD.TOTALDEDUCTED=0) AND D.PAN NOT LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]'    
END
ELSE
BEGIN      
	SELECT NE.SERIALNO,D.NAME,DD.PAYMENTMADE,DD.TOTALDEDUCTED,D.PAN,(SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER) DEDCOUNT FROM DEDUCTIONDETAIL DD INNER JOIN DEDUCTEE D  
	INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
	ON NE.DEDUCTEEID=D.DEDUCTEEID        
	ON DD.DEDUCTEEID=D.DEDUCTEEID AND DD.BRANCHID=D.BRANCHID        
	LEFT JOIN DEDCHALINK DCL  WITH(NOLOCK)    
	ON DCL.DEDUCTIONID=DD.DEDUCTIONID  AND DD.BRANCHID=DCL.BRANCHID  
	WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER   AND (DCL.DEDUCTIONID IS NOT NULL  OR DD.TOTALDEDUCTED=0) AND D.PAN NOT LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]'    
END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPANRECORDSTOMATCH')
DROP PROCEDURE USP_TDS_GETPANRECORDSTOMATCH
GO
CREATE PROCEDURE [USP_TDS_GETPANRECORDSTOMATCH] 
	@PAGEINDEX INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESLNO INT,
	@NAME VARCHAR(75) = NULL,
	@PAN VARCHAR(10) = NULL
AS
	BEGIN
		/* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
		SET NOCOUNT ON
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE
		SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);
		DECLARE @QUERY NVARCHAR(MAX);
		IF @FORMID = 1
			BEGIN
				SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #PANRECORDSTOMATCH FROM
							  (
								 SELECT D.DEDUCTEEID,D.NAME,D.PAN 
								 FROM DEDUCTEE D  WITH(NOLOCK) 
								 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
								 WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND 
											 D.DEDUCTEEID NOT IN 
											 (
												SELECT ISNULL(DEDUCTEEID,MATCHEDID) FROM CORREMPLOYEE WITH(NOLOCK)
													WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
															  QUARTER = ' + CAST(@QUARTER AS VARCHAR) + 'AND CORRECTIONSTATUS = 3 AND 
															  (ISNULL(DEDUCTEEID,0) <> 0 OR MATCHEDID IS NOT NULL)
												 AND DEDUCTEESERIALNO <> ' + CAST(@DEDUCTEESLNO AS VARCHAR) + '
											)';
			END
		ELSE
			BEGIN
				SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #PANRECORDSTOMATCH FROM
							  (
								 SELECT D.DEDUCTEEID,D.NAME,D.PAN 
								 FROM DEDUCTEE D WITH(NOLOCK) 
								 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID
								 WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND 
											 D.DEDUCTEEID NOT IN 
											 (
												SELECT ISNULL(DEDUCTEEID,MATCHEDID) FROM CORRNONEMPLOYEE WITH(NOLOCK) 
													WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
													          QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3 AND 
													          (ISNULL(DEDUCTEEID,0) <> 0  OR MATCHEDID IS NOT NULL) 
													         AND DEDUCTEESERIALNO <> ' + CAST(@DEDUCTEESLNO AS VARCHAR) + '
											 )';
			END
		IF(@NAME IS NOT NULL)
			SET @QUERY = @QUERY + ' AND D.NAME LIKE ''%' + @NAME + '%'''
		IF(@PAN IS NOT NULL)
			SET @QUERY = @QUERY + ' AND D.PAN LIKE ''%' + @PAN + '%'''	
		SET @QUERY = @QUERY + ' ) TEMP;SELECT * FROM #PANRECORDSTOMATCH WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);
		EXEC SP_EXECUTESQL @QUERY;
		--PRINT @QUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPANRECORDSTOMATCHCOUNT')
DROP PROCEDURE USP_TDS_GETPANRECORDSTOMATCHCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETPANRECORDSTOMATCHCOUNT] 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESLNO INT,
	@NAME VARCHAR(75) = NULL,
	@PAN VARCHAR(10) = NULL
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		IF @FORMID = 1
			BEGIN
				SET @SQLQUERY = 'SELECT COUNT(D.DEDUCTEEID) AS RECORDCOUNT FROM DEDUCTEE D WITH(NOLOCK)  
									INNER JOIN EMPLOYEE E WITH(NOLOCK)  ON D.DEDUCTEEID = E.DEDUCTEEID
									WHERE  D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND D.DEDUCTEEID NOT IN 
									(
										SELECT ISNULL(DEDUCTEEID,MATCHEDID) FROM CORREMPLOYEE WITH(NOLOCK) 
										WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
												 QUARTER = '+ CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3 AND 
										(ISNULL(DEDUCTEEID,0) <> 0 OR MATCHEDID IS NOT NULL) AND 
										DEDUCTEESERIALNO <> '+ CAST(@DEDUCTEESLNO AS VARCHAR) + ' 
									)'		
			END
		ELSE
			BEGIN
				SET @SQLQUERY = 'SELECT COUNT(D.DEDUCTEEID) AS RECORDCOUNT FROM DEDUCTEE D WITH(NOLOCK) 
								    INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID
									WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND D.DEDUCTEEID NOT IN 
									(
										SELECT ISNULL(DEDUCTEEID,MATCHEDID) FROM CORRNONEMPLOYEE WITH(NOLOCK) 
										WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
												 QUARTER = '+ CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3 AND 
										(ISNULL(DEDUCTEEID,0) <> 0 OR MATCHEDID IS NOT NULL) AND 
											DEDUCTEESERIALNO <> '+ CAST(@DEDUCTEESLNO AS VARCHAR) + ' 
									)'				
			END												  
			IF(@NAME IS NOT NULL)
				SET @SQLQUERY = @SQLQUERY +  ' AND D.NAME LIKE ''%' + @NAME + '%'''
			IF(@PAN IS NOT NULL)		
				SET @SQLQUERY = @SQLQUERY +  ' AND D.PAN LIKE ''%' + @PAN + '%'''
			EXEC SP_EXECUTESQL @SQLQUERY;
			--PRINT @SQLQUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetPANRefNo')
DROP PROCEDURE USP_TDS_GetPANRefNo
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetPANRefNo]
AS
	BEGIN
		SELECT REFERENCENO,PAN FROM DEDUCTEE WITH(NOLOCK) WHERE ISNULL(EMPTYPE,0) <> 2 AND ISNULL(REFERENCENO,'') <> ''
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPANREFNOANDBRANCH')
DROP PROCEDURE USP_TDS_GETPANREFNOANDBRANCH
GO
CREATE PROCEDURE USP_TDS_GETPANREFNOANDBRANCH
AS
	BEGIN
		SELECT CB.BRANCHCODE+ '-' + DD.REFERENCENO AS REFERENCENO , DD.PAN 
			FROM DEDUCTEE DD WITH(NOLOCK) 
			INNER JOIN COMPANYBRANCH CB
				ON DD.BRANCHID = CB.BRANCHID
			INNER JOIN EMPLOYEE EM
				ON DD.DEDUCTEEID = EM.DEDUCTEEID
		WHERE ISNULL(EMPTYPE,0) <> 2 AND ISNULL(REFERENCENO,'') <> ''
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPANUPDATECOUNT')
DROP PROCEDURE USP_TDS_GETPANUPDATECOUNT
GO
CREATE PROCEDURE [USP_TDS_GETPANUPDATECOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		IF(@FORMID = 1)
			BEGIN
				SET @QUERY = 'SELECT COUNT(DEDUCTEESERIALNO) PANUPDATECOUNT FROM CORREMPLOYEE WITH(NOLOCK)
							  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3';
			END
		ELSE
			BEGIN
				SET @QUERY = 'SELECT COUNT(DEDUCTEESERIALNO) PANUPDATECOUNT FROM CORRNONEMPLOYEE WITH(NOLOCK)
							  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3';
			END
		EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARENT')
DROP PROCEDURE USP_TDS_GETPARENT
GO
CREATE PROCEDURE USP_TDS_GETPARENT 
	@BRANCHID INT
AS
BEGIN
	SELECT BRANCHNAME,BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID=@BRANCHID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARENTBRANCH')
DROP PROCEDURE USP_TDS_GETPARENTBRANCH
GO
CREATE PROCEDURE USP_TDS_GETPARENTBRANCH   
 @BRANCHNAME VARCHAR(30)  
 --@COUNT INT        
AS        
BEGIN        
 SELECT DISTINCT TOP 20 CB1.BRANCHCODE,CB1.BRANCHNAME FROM COMPANYBRANCH AS CB1     
 WITH(NOLOCK)        
 INNER JOIN COMPANYBRANCH AS CB2 WITH(NOLOCK)       
 ON CB1.BRANCHID=CB2.PARENTBRANCHID        
 WHERE CB1.BRANCHNAME LIKE @BRANCHNAME+'%'        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARENTBRANCHID')
DROP PROCEDURE USP_TDS_GETPARENTBRANCHID
GO
CREATE PROCEDURE [USP_TDS_GETPARENTBRANCHID]
@BRANCHID INT
AS
SELECT CASE WHEN ISZORO = 1 THEN BRANCHID ELSE CASE WHEN (PARENTBRANCHID=0) THEN 1  ELSE PARENTBRANCHID END END AS ID
FROM COMPANYBRANCH CB WITH(NOLOCK)  WHERE CB.BRANCHID=@BRANCHID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARENTBRANCHIDFORIB')
DROP PROCEDURE USP_TDS_GETPARENTBRANCHIDFORIB
GO
CREATE PROCEDURE [USP_TDS_GETPARENTBRANCHIDFORIB]
AS
BEGIN
SELECT DISTINCT CB.PARENTBRANCHID FROM CHALLANDETAIL CD  WITH(NOLOCK)
INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CD.BRANCHID=CB.BRANCHID
WHERE  CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0 AND ISTTUMINCLUDED=0 AND CB.PARENTBRANCHID<>1
ORDER BY CB.PARENTBRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARENTCHILDBRANCHESCOUNT')
DROP PROCEDURE USP_TDS_GETPARENTCHILDBRANCHESCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETPARENTCHILDBRANCHESCOUNT]  
@BRANCHID INT  
AS  
 BEGIN  
  SELECT COUNT(BRANCHID) FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBRANCHID = @BRANCHID   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARKEDAMOUNT')
DROP PROCEDURE USP_TDS_GETPARKEDAMOUNT
GO
CREATE PROCEDURE [USP_TDS_GETPARKEDAMOUNT]    
@PAGEINDEX INT,    
@PAGESIZE INT,    
@MONTHYEAR VARCHAR(6),  
@BRANCHCODE VARCHAR(6),  
@FORMTYPE VARCHAR(20)    
AS    
BEGIN    
 DECLARE @FIRSTREC INT, @LASTREC INT, @SQLQUERY NVARCHAR(MAX);    
 SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE;                                      
    SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);                                           
 SET @SQLQUERY = 'SELECT ROWNO = IDENTITY(INT,1,1) , P.ID,     
        C.BRANCHNAME + '' ('' + C.BRANCHCODE + '')'' BRANCH, P.FORMTYPE, P.ACCOUNTNO, P.AMOUNT     
        INTO #PARKED    
        FROM PARKEDAMOUNT P WITH(NOLOCK)    
  INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON P.BRANCHID = C.BRANCHID    
       WHERE MONTHYEAR = ''' + CAST(@MONTHYEAR AS VARCHAR) + ''''    
    IF(@BRANCHCODE <> '')  
     BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND C.BRANCHCODE LIKE '''+ CAST(@BRANCHCODE AS VARCHAR) + '%'''  
     END  
    IF(@FORMTYPE <> '')  
     BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND P.FORMTYPE IN (SELECT * FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@FORMTYPE AS VARCHAR(MAX))+''','',''))'  
     END  
 SET @SQLQUERY = @SQLQUERY + ' ORDER BY C.BRANCHID;SELECT * FROM #PARKED WHERE ROWNO > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNO < ' + CAST(@LASTREC AS VARCHAR(10))    
   EXEC SP_EXECUTESQL @SQLQUERY;
   --PRINT @SQLQUERY 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARKEDAMOUNTBASEDONID')
DROP PROCEDURE USP_TDS_GETPARKEDAMOUNTBASEDONID
GO
CREATE PROCEDURE [USP_TDS_GETPARKEDAMOUNTBASEDONID]
@ID INT
AS
 BEGIN
	SELECT ID , C.BRANCHNAME + ' (' + C.BRANCHCODE + ')' BRANCH, P.FORMTYPE, P.ACCOUNTNO, P.AMOUNT FROM PARKEDAMOUNT P WITH(NOLOCK)
	INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID = P.BRANCHID
	WHERE ID = @ID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARKEDAMOUNTCOUNT')
DROP PROCEDURE USP_TDS_GETPARKEDAMOUNTCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETPARKEDAMOUNTCOUNT]
@MONTHYEAR VARCHAR(6),
@BRANCHCODE VARCHAR(6),
@FORMTYPE VARCHAR(15)    
AS  
BEGIN  
    DECLARE @SQLQUERY NVARCHAR(MAX); 
	SET @SQLQUERY = 'SELECT COUNT(P.ID) FROM PARKEDAMOUNT P WITH(NOLOCK) 
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID = P.BRANCHID
		WHERE MONTHYEAR = ' + CAST(@MONTHYEAR AS VARCHAR)
	IF(@BRANCHCODE <> '')
     BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND C.BRANCHCODE LIKE '''+ CAST(@BRANCHCODE AS VARCHAR) + '%'''
     END
    IF(@FORMTYPE <> '')
     BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND P.FORMTYPE IN (SELECT * FROM DBO.UDF_TDS_SPLITSTRING('''+CAST(@FORMTYPE AS VARCHAR(MAX))+''','',''))'
     END 
     EXEC SP_EXECUTESQL @SQLQUERY;    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARTIALLYLINKEDAUTOCHALLANS')
DROP PROCEDURE USP_TDS_GETPARTIALLYLINKEDAUTOCHALLANS
GO
CREATE PROCEDURE USP_TDS_GETPARTIALLYLINKEDAUTOCHALLANS --1,378 
@MONTHID INT,
@BRANCHID INT = NULL
AS
	BEGIN
	DECLARE @QUERY NVARCHAR(MAX);
		SET @QUERY =  'SELECT CD.SERIALNO, CD.BANKCHALLANNO, CD.CHALLANPAIDDATE, CB.BRANCHCODE, CD.CHALLANID, CHALLANTOTAL, CD.FORMID, SUM(TOTALDEDUCTED)TOTALDEDUCTED
						INTO #CHALTEMP
						FROM CHALLANDETAIL CD WITH(NOLOCK)
						INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
						INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID
						INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID 
						WHERE ISAUTOGENERATED = 1 AND MONTH(CHALLANPAIDDATE) = '+ CAST(@MONTHID AS VARCHAR)
		IF @BRANCHID IS NOT NULL
		BEGIN
			SET @QUERY = @QUERY + ' AND CD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)
		END
		SET @QUERY = @QUERY + ' GROUP BY CD.SERIALNO,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CB.BRANCHCODE,CD.CHALLANID, CHALLANTOTAL, CD.FORMID;
		SELECT CD.SERIALNO, CD.BANKCHALLANNO, CD.CHALLANPAIDDATE, CB.BRANCHCODE, CD.CHALLANID, CHALLANTOTAL, CD.FORMID
		INTO #CHALTEMP2
		FROM CHALLANDETAIL CD WITH(NOLOCK)
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID
		WHERE ISAUTOGENERATED = 1 AND MONTH(CHALLANPAIDDATE) = '+ CAST(@MONTHID AS VARCHAR) + ' AND 
		NOT EXISTS 
		(
			SELECT CHALLANID FROM DEDCHALINK DCL WITH(NOLOCK) WHERE DCL.CHALLANID = CD.CHALLANID
		)'
		IF @BRANCHID IS NOT NULL
		BEGIN
			SET @QUERY = @QUERY + ' AND CD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)
		END
		SET @QUERY = @QUERY + ';SELECT SERIALNO, BANKCHALLANNO, CHALLANPAIDDATE, BRANCHCODE, CHALLANID, CHALLANTOTAL, FORMID FROM #CHALTEMP WHERE CHALLANTOTAL > TOTALDEDUCTED
							   UNION
							   SELECT SERIALNO, BANKCHALLANNO, CHALLANPAIDDATE, BRANCHCODE, CHALLANID, CHALLANTOTAL, FORMID FROM #CHALTEMP2'
		--print @QUERY					   
		EXEC SP_EXECUTESQL @QUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARTPAYMENTAMOUNTTOTALS')
DROP PROCEDURE USP_TDS_GETPARTPAYMENTAMOUNTTOTALS
GO
CREATE PROCEDURE [USP_TDS_GETPARTPAYMENTAMOUNTTOTALS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@PARTPAYMENTID INT
AS
	BEGIN
		SELECT SUM(INCOMETAX) INCOMETAX,SUM(SURCHARGE) SURCHARGE,SUM(EDUCATIONCESS) EDUCATIONCESS
		FROM   DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARTPAYMENTID')
DROP PROCEDURE USP_TDS_GETPARTPAYMENTID
GO
CREATE PROCEDURE [USP_TDS_GETPARTPAYMENTID]
@BRANCHID INT,
@FORMID INT
AS
	BEGIN
		SELECT SERIALNO, PARTPAYMENTID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPARTPAYMENTIDS')
DROP PROCEDURE USP_TDS_GETPARTPAYMENTIDS
GO
CREATE PROCEDURE [USP_TDS_GETPARTPAYMENTIDS]
		@BRANCHID INT,
		@FORMID INT,
		@QUARTER INT
AS
BEGIN
SELECT PPD.PARTPAYMENTID,DD.SERIALNO FROM PARTPAYMENTDETAILS PPD WITH(NOLOCK)
								   INNER JOIN
								   (SELECT DISTINCT PARTPAYMENTID,SERIALNO,BRANCHID,FORMID,QUARTER
								   FROM DEDUCTIONDETAIL WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER) DD
								ON PPD.PARTPAYMENTID=DD.PARTPAYMENTID AND PPD.BRANCHID=DD.BRANCHID AND PPD.QUARTER=DD.QUARTER
			WHERE PPD.BRANCHID=@BRANCHID AND PPD.FORMID=@FORMID AND PPD.QUARTER=@QUARTER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPAYMENTDETAILS')
DROP PROCEDURE USP_TDS_GETPAYMENTDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETPAYMENTDETAILS]  --USP_TDS_GETPAYMENTDETAILS                                            
 @NAME VARCHAR(100),                
 @PAN VARCHAR(11),                                                                                            
 @SECTIONID INT=0,                                                      
 @AMOUNTPAID NUMERIC(13,2)=NULL,                                                                                             
 @TAXRATE NUMERIC(7,2)=NULL,                                                      
 @TDSAMOUNT NUMERIC(13,2)=NULL,                                                      
 @DEDUCTEDDATE SMALLDATETIME=NULL,                                                
 @USERID INT,                            
 @STARTDATE SMALLDATETIME=NULL,                            
 @ENDDATE SMALLDATETIME =NULL,              
 @ADDITIONALFIELD VARCHAR(25)=NULL                                                  
AS                                                      
DECLARE @QUERY NVARCHAR(MAX)              
BEGIN                                              
SET @QUERY= 'SELECT D.NAME,D.PAN,DD.ADDITIONALFIELD1,DD.PAYMENTMADE,CONVERT(NVARCHAR,DD.PAYMENTDATE,103) AS PAYMENTDATE,                                                       
 CAST(DD.INCOMETAXRATE AS DECIMAL(10,2)) AS INCOMETAXRATE,DD.TOTALDEDUCTED,CONVERT(NVARCHAR,DD.DEDUCTEDDATE,103) AS DEDUCTEDDATE,DD.DEDUCTIONID                                       
 FROM NONEMPLOYEE NE WITH(NOLOCK)                                                     
 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID                                                    
 INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTEEID =D.DEDUCTEEID                                                 
 WHERE                             
 D.BRANCHID='+CAST(@USERID AS VARCHAR)+' AND   
 DD.ISREVERSAL=0 AND                                                
 DD.SECTIONID='+CAST(@SECTIONID AS VARCHAR)+' AND                                                   
 D.NAME='''+@NAME+''' AND                
 D.PAN='''+@PAN+''' AND                            
 DD.PAYMENTDATE BETWEEN '''+CAST(@STARTDATE AS VARCHAR)+''' AND               
 '''+CAST(@ENDDATE AS VARCHAR)+''''                            
 IF(@AMOUNTPAID IS NOT NULL)                                                       
 BEGIN                                                      
  SET @QUERY=@QUERY+'AND DD.PAYMENTMADE='+CAST(@AMOUNTPAID AS VARCHAR)+''                                                      
 END                                                      
 IF(@ADDITIONALFIELD IS NOT NULL)                                                      
 BEGIN                                                      
  SET @QUERY=@QUERY+' AND DD.ADDITIONALFIELD1='''+CAST(@ADDITIONALFIELD AS VARCHAR)+''''                                          
 END                                                      
 IF(@TAXRATE IS NOT NULL)                                                      
 BEGIN                                                      
  SET @QUERY=@QUERY+' AND DD.INCOMETAXRATE='+CAST(@TAXRATE AS VARCHAR)+''                                                      
 END                                                      
 IF(@TDSAMOUNT IS NOT NULL)                                                      
 BEGIN                                                      
  SET @QUERY=@QUERY+' AND DD.TOTALDEDUCTED='+CAST(@TDSAMOUNT AS VARCHAR)+''                                                      
 END           
 IF(@DEDUCTEDDATE IS NOT NULL)                                                      
 BEGIN                                                    
  SET @QUERY=@QUERY+' AND DD.DEDUCTEDDATE='''+CAST(@DEDUCTEDDATE AS VARCHAR)+''''                                          
 END                                                 
  SET @QUERY=@QUERY+'AND DD.TOTALDEDUCTED > 0'    
 EXEC SP_EXECUTESQL @QUERY;                             
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPAYMENTMADEDETAILS')
DROP PROCEDURE USP_TDS_GETPAYMENTMADEDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETPAYMENTMADEDETAILS]
@FROMDATE SMALLDATETIME,
@TODATE SMALLDATETIME,
@ISIB BIT
AS
 BEGIN
			DECLARE @SQLQUERY NVARCHAR(MAX);
		    SET @SQLQUERY = 'SELECT  (SELECT SECTIONNAME FROM TAXSECTIONS WHERE SECTIONID = DD.SECTIONID) [SECTION] ,
												 (CONVERT(VARCHAR(3), DATENAME(MM, DD.DEDUCTEDDATE), 100) + '''' + CAST(YEAR(DD.DEDUCTEDDATE) AS VARCHAR)) AS [MONTHYEAR],
											  (SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID=DD.BRANCHID) BRANCHCODE, (SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID=DD.BRANCHID) BRANCHNAME,
											  SUM(TOTALDEDUCTED) [PENDINGAMOUNT]
											FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
											INNER JOIN COMPANYBRANCH CB  WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID
											WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK)) AND TOTALDEDUCTED > 0 AND DD.FORMID <> 1 AND DEDUCTEDDATE BETWEEN ''' + CAST(@FROMDATE AS VARCHAR) +''' AND '''+ CAST(@TODATE AS VARCHAR)+''''
				IF(@ISIB = 1)
					BEGIN
						SET @SQLQUERY = @SQLQUERY + '  AND ISNULL(NOCHALLANPAY,0) = 0'
				   END
			SET @SQLQUERY = @SQLQUERY + ' GROUP BY DD.BRANCHID, (CONVERT(VARCHAR(3), DATENAME(MM, DD.DEDUCTEDDATE), 100) + '''' + CAST(YEAR(DD.DEDUCTEDDATE) AS VARCHAR)), DD.SECTIONID'
			EXEC SP_EXECUTESQL @SQLQUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPAYMENTSTATUS')
DROP PROCEDURE USP_TDS_GETPAYMENTSTATUS
GO
CREATE PROCEDURE [USP_TDS_GETPAYMENTSTATUS]
AS
BEGIN
	 SELECT ISNULL(ISMAKEPAYMENT,0) ISMAKEPAYMENT FROM DEFAULTSETTINGS WITH(NOLOCK)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPDFDEDUCTOR')
DROP PROCEDURE USP_TDS_GETPDFDEDUCTOR
GO
CREATE PROCEDURE [USP_TDS_GETPDFDEDUCTOR] 
@BRANCHID INT
AS
BEGIN
	SELECT D.DEDUCTORID,BD.BRANCHID,BD.QUARTER,DEDUCTORNAME,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,
		   D.STATEID,ISNULL(SM.STATENAME,'') AS STATENAME,D.PINCODE,FINANCIALYEAR,TAN,PAN,RP.PERSONNAME,RP.DESIGNATION,RP.FATHERNAME,
		   ISNULL(D.EMAILADDRESS, RP.EMAILADDRESS)EMAILADDRESS, ISNULL(RP.MOBILENO,'')MOBILENO
	  FROM DEDUCTOR D WITH(NOLOCK)  
		   INNER JOIN
		   RESPONSIBLEPERSON RP WITH(NOLOCK) 
		ON D.DEDUCTORID=RP.DEDUCTORID
		   INNER JOIN 
		   BRANCHDEDUCTORS BD  WITH(NOLOCK) 
		ON D.DEDUCTORID=BD.DEDUCTORID
		   LEFT JOIN
		   STATEMASTER SM WITH(NOLOCK) 
		ON D.STATEID=SM.STATEID
	 WHERE BD.BRANCHID=@BRANCHID 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPDFINCLUDEUS10HEADS')
DROP PROCEDURE USP_TDS_GETPDFINCLUDEUS10HEADS
GO
CREATE PROCEDURE [USP_TDS_GETPDFINCLUDEUS10HEADS]  
 @BRANCHID INT,   
 @COMIDS NVARCHAR(MAX)          
 AS          
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED        
 SET NOCOUNT ON          
 SELECT * INTO #COM FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')          
  SELECT GROSSAMT,EXEMPTAMT, COMID,SALARYNAME,ABBREVATION FROM       
   (       
    SELECT CASE WHEN EARNING = 0 THEN -1 * SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) - ISNULL(RECOVERYAMT,0))    
     ELSE SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) - ISNULL(RECOVERYAMT,0) ) END AS GROSSAMT,    
     SUM(ISNULL(SD.EXEMPTAMT,0))EXEMPTAMT,EARNING,SD.COMID, MAX(SH.SALARYNAME)SALARYNAME, MAX(SH.ABBREVATION)ABBREVATION    
        FROM SALDETAIL SD      
    INNER JOIN SALARYHEAD SH ON SH.SALARYHEADID = SD.SALARYHEADID      
    INNER JOIN LINKTOTC L ON L.COMID = SD.COMID      
    INNER JOIN #COM COM ON COM.DATA=L.COMID          
    INNER JOIN EMPWORKMONTH EM ON EM.COMID = L.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = L.BRANCHID          
    WHERE INCLUDEUS10 = 1 AND  ISNULL(SH.C80CID,-1) <= 0 AND L.BRANCHID = @BRANCHID  
    GROUP BY EARNING,SD.COMID,SD.SALARYHEADID         
   )TT
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPDFSALARYHEADS')
DROP PROCEDURE USP_TDS_GETPDFSALARYHEADS
GO
CREATE  PROC [DBO].[USP_TDS_GETPDFSALARYHEADS] 
@COMIDS NVARCHAR(MAX)  
AS  
 SET NOCOUNT ON  
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED     
 SELECT * INTO #COMIDS FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')   
 SELECT SD.COMID,SH.SALARYNAME,SUM(SD.NETAMT)NETAMT FROM SALARYHEAD SH  WITH(NOLOCK)  INNER JOIN SALDETAIL SD  WITH(NOLOCK)   
 ON SD.SALARYHEADID=SH.SALARYHEADID  
 INNER JOIN #COMIDS COM ON COM.DATA=SD.COMID  
 WHERE  SD.NETAMT>0 AND ISNULL(SH.INCLUDEINTAX,0)=1
 GROUP BY  SD.COMID,SH.SALARYNAME,SD.SALARYHEADID  
 ORDER BY SD.COMID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPDFSETTINGS')
DROP PROCEDURE USP_TDS_GETPDFSETTINGS
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETPDFSETTINGS]  
 @BRANCHID INT  
AS  
 BEGIN  
  SELECT PDFSETTINGID,BRANCHID,ISAPPLICABLEONPDF,ISAPPLICABLEONDSPDF,ISUSERPWDAPPLICABLE,ISFIRSTFIELDSELECTED,FIRSTFIELDSELECTED,FIRSTFIELDLENGTH,  
      ISSECFIELDSELECTED,SECFIELDSELECTED,SECFIELDLENGTH,ISOWNERPWDAPPLICABLE,ISDATACOPYALLOWED,ISPRINTALLOWED,ISAUTOPWDAPPLICABLE,MANUALPWD,REASONFORSIGNING,  
      LOCATIONOFSIGNING,DSFORMAT  
  FROM   PDFSETTINGS WITH(NOLOCK)  
  WHERE  BRANCHID = @BRANCHID;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPDFTAXABLEPERQUISITES')
DROP PROCEDURE USP_TDS_GETPDFTAXABLEPERQUISITES
GO
CREATE PROCEDURE  USP_TDS_GETPDFTAXABLEPERQUISITES  
@COMIDS NVARCHAR(MAX)  
AS
BEGIN  
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON
SELECT * INTO #COMID FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')
SELECT COMID,PERKID,SUM(GROSSAMT) GROSSAMT,SUM(EXEMPTAMT)EXEMPTAMT,SUM(TAXABLEAMT)TAXABLEAMT FROM TAXABLEPERQUISITE WITH(NOLOCK)
INNER JOIN #COMID COM ON COM.DATA = COMID
GROUP BY COMID,PERKID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPDFTAXABLEPERQUISITESDATA')
DROP PROCEDURE USP_TDS_GETPDFTAXABLEPERQUISITESDATA
GO
CREATE PROCEDURE  USP_TDS_GETPDFTAXABLEPERQUISITESDATA   
AS
BEGIN  
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON
	select 
		DEDUCTEEID as COMID,
		1 as PERKID,	
		CASE WHEN PERKACCUNFURNISHED = 0 or PERKACCUNFURNISHED = null
               THEN PERKFURNISHEDTOTAL 
               ELSE PERKACCUNFURNISHED END as GROSSAMT,
		RENTPAIDBYEMP as EXEMPTAMT,
		VALUEOFPERQUISITES as TAXABLEAMT
	from SALARYDETAIL
	union all
	select
		DEDUCTEEID as COMID,
		3 as PERKID,
		CONVEYANCE as GROSSAMT,
		0 as EXEMPTAMT,
		CONVEYANCE as TAXABLEAMT
	from SALARYDETAIL
	union all
	select
		DEDUCTEEID as COMID,
		8 as PERKID,
		TAXABLELTC as GROSSAMT,
		0 as EXEMPTAMT,
		TAXABLELTC as TAXABLEAMT
	from SALARYDETAIL
	union all
	select
		DEDUCTEEID as COMID,
		16 as PERKID,
		OTHERBENEFITS as GROSSAMT,
		0 as EXEMPTAMT,
		OTHERBENEFITS as TAXABLEAMT
	from SALARYDETAIL
	union all
	select
		DEDUCTEEID as COMID,
		18 as PERKID,
		REMUNERATION + PFINEXCESSOF12PERC + EXCESSINTERESTCREDITED as GROSSAMT,
		0 as EXEMPTAMT,
		REMUNERATION + PFINEXCESSOF12PERC + EXCESSINTERESTCREDITED as TAXABLEAMT
	from SALARYDETAIL
	union all
	select
		DEDUCTEEID as COMID,
		19 as PERKID,
		TOTALPERQUISITE + RENTPAIDBYEMP as GROSSAMT,
		RENTPAIDBYEMP as EXEMPTAMT,
		TOTALPERQUISITE as TAXABLEAMT
	from SALARYDETAIL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetPendingPaymentDetails')
DROP PROCEDURE USP_TDS_GetPendingPaymentDetails
GO
CREATE PROCEDURE USP_TDS_GetPendingPaymentDetails
@FROMDATE SMALLDATETIME,
@TODATE SMALLDATETIME,
@ISIB BIT
AS
 BEGIN
   DECLARE @SQLQUERY NVARCHAR(MAX);
        SET @SQLQUERY = 'SELECT (SELECT SECTIONNAME FROM TAXSECTIONS WHERE SECTIONID = DD.SECTIONID) [SECTION],
           (CONVERT(VARCHAR(3), DATENAME(MM, DD.DEDUCTEDDATE), 100) + '''' + CAST(YEAR(DEDUCTEDDATE) AS VARCHAR)) AS [MONTHYEAR],
             (SELECT BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID=DD.BRANCHID) BRANCHCODE, (SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID=DD.BRANCHID) BRANCHNAME,
             SUM(TOTALDEDUCTED) [PENDINGAMOUNT]
           FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
           INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = DD.BRANCHID
             WHERE DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK)) AND TOTALDEDUCTED > 0 AND DEDUCTEDDATE BETWEEN ''' + CAST(@FROMDATE AS VARCHAR) +''' AND '''+ CAST(@TODATE AS VARCHAR)+''''
    IF(@ISIB = 1)
     BEGIN
      SET @SQLQUERY = @SQLQUERY + '  AND ISNULL(NOCHALLANPAY,0) = 0'
       END
    SET @SQLQUERY = @SQLQUERY + ' GROUP BY (CONVERT(VARCHAR(3), DATENAME(MM, DD.DEDUCTEDDATE), 100) + '''' + CAST(YEAR(DEDUCTEDDATE) AS VARCHAR)), DD.BRANCHID, DD.SECTIONID'
    EXEC SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPENDINGPAYMENTRECORDS')
DROP PROCEDURE USP_TDS_GETPENDINGPAYMENTRECORDS
GO
CREATE PROCEDURE [USP_TDS_GETPENDINGPAYMENTRECORDS]
@BRANCHID INT,
@VALUE INT
AS
  BEGIN
  IF(@VALUE = 1)
   BEGIN
     IF(@BRANCHID <> 1)
     BEGIN
       SELECT @BRANCHID = CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID;
       SELECT (SELECT BRANCHNAME + ' (' + BRANCHCODE + ') ' FROM COMPANYBRANCH WHERE BRANCHID = RP.PARENTBRANCHID)AS ZONE, CB.BRANCHCODE, CB.BRANCHNAME, D.NAME, D.PAN, TS.SECTIONNAME, (TR.DESCRIPTION + ' - ' + TR.BGLCODE) AS [NATURE OF PAYMENT],
       RP.PAYMENTAMOUNT, RP.BILLDATE FROM REPORTPAYMENT RP WITH(NOLOCK)
       INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON RP.BRANCHID = CB.BRANCHID
       INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON D.DEDUCTEEID = RP.DEDUCTEEID
       INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON RP.SECTIONID = TS.SECTIONID
       INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID
       LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.REPORTPAYMENTID = RP.ID
       WHERE DD.REPORTPAYMENTID IS NULL AND RP.PARENTBRANCHID = @BRANCHID
     END
     ELSE
   BEGIN
      SELECT (SELECT BRANCHNAME + ' (' + BRANCHCODE + ') ' FROM COMPANYBRANCH WHERE BRANCHID = RP.PARENTBRANCHID)AS ZONE, CB.BRANCHCODE, CB.BRANCHNAME, D.NAME, D.PAN, TS.SECTIONNAME, (TR.DESCRIPTION + ' - ' + TR.BGLCODE) AS [NATURE OF PAYMENT],
     RP.PAYMENTAMOUNT, RP.BILLDATE FROM REPORTPAYMENT RP WITH(NOLOCK)
      INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON RP.BRANCHID = CB.BRANCHID
      INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = RP.DEDUCTEEID
      INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON RP.SECTIONID = TS.SECTIONID
      INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID
      LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.REPORTPAYMENTID = RP.ID
      WHERE DD.REPORTPAYMENTID IS NULL
    END
         END
       ELSE
         BEGIN
    SELECT @BRANCHID = CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID;
    SELECT (SELECT BRANCHNAME + ' (' + BRANCHCODE + ') ' FROM COMPANYBRANCH WHERE BRANCHID = RP.PARENTBRANCHID)AS ZONE,CB.BRANCHCODE, CB.BRANCHNAME, D.NAME, D.PAN, TS.SECTIONNAME, (TR.DESCRIPTION + ' - ' + TR.BGLCODE) AS [NATURE OF PAYMENT],
      RP.PAYMENTAMOUNT, RP.BILLDATE FROM REPORTPAYMENT RP WITH(NOLOCK)
    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON RP.BRANCHID = CB.BRANCHID
    INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = RP.DEDUCTEEID
    INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON RP.SECTIONID = TS.SECTIONID
    INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID
    LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.REPORTPAYMENTID = RP.ID
    WHERE DD.REPORTPAYMENTID IS NULL AND RP.PARENTBRANCHID = @BRANCHID
         END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPPIDS')
DROP PROCEDURE USP_TDS_GETPPIDS
GO
CREATE PROCEDURE [USP_TDS_GETPPIDS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT PARTPAYMENTID FROM PARTPAYMENTDETAILS WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPPREMAININGDEDUCTIONAMOUNTS')
DROP PROCEDURE USP_TDS_GETPPREMAININGDEDUCTIONAMOUNTS
GO
CREATE PROCEDURE [USP_TDS_GETPPREMAININGDEDUCTIONAMOUNTS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTIONID INT,
	@PARTPAYMENTID INT
AS
	BEGIN
		DECLARE @HASPARTPAYMENT BIT;
		IF EXISTS (SELECT PARTDETAILID FROM PARTPAYMENTDETAILS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)
			SET @HASPARTPAYMENT = 1;
		ELSE
			SET @HASPARTPAYMENT = 0;
		IF @DEDUCTIONID = -1
			BEGIN
				IF (@HASPARTPAYMENT = 1)
					BEGIN
						SELECT REMINCOMETAX INCOMETAX,REMSURCHARGE SURCHARGE,REMEDUCATIONCESS EDUCATIONCESS,REMTOTALDEDUCTED TOTALDEDUCTED
						FROM   PARTPAYMENTDETAILS WITH(NOLOCK)
						WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
					END
				ELSE
					BEGIN
						SELECT ORGINCOMETAX INCOMETAX,ORGSURCHARGE SURCHARGE,ORGEDUCATIONCESS EDUCATIONCESS,ORGTOTALDEDUCTED TOTALDEDUCTED
						FROM   DEDUCTIONDETAIL  WITH(NOLOCK)
						WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
					END
			END
		ELSE
			BEGIN
				IF (@HASPARTPAYMENT = 1)
					BEGIN
						DECLARE @IT NUMERIC(13,2),@SC NUMERIC(13,2),@EC NUMERIC(13,2),@TD NUMERIC(13,2);
						IF((SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)>1)
							BEGIN
								SELECT @IT = SUM(INCOMETAX),@SC = SUM(SURCHARGE), @EC = SUM(EDUCATIONCESS), @TD = SUM(TOTALDEDUCTED)
								FROM   DEDUCTIONDETAIL  WITH(NOLOCK)
								WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DEDUCTIONID <> @DEDUCTIONID AND PARTPAYMENTID = @PARTPAYMENTID;
							END
						ELSE
							BEGIN
								SELECT @IT = 0,@SC = 0, @EC = 0, @TD = 0
							END
						SELECT ORGINCOMETAX - @IT INCOMETAX,ORGSURCHARGE - @SC SURCHARGE,ORGEDUCATIONCESS - @EC EDUCATIONCESS,ORGTOTALDEDUCTED - @TD TOTALDEDUCTED
						FROM   DEDUCTIONDETAIL WITH(NOLOCK)
						WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DEDUCTIONID = @DEDUCTIONID;
				END
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPREVIOUSACKNOWLEGEMENTNUMBER')
DROP PROCEDURE USP_TDS_GETPREVIOUSACKNOWLEGEMENTNUMBER
GO
CREATE PROCEDURE [USP_TDS_GETPREVIOUSACKNOWLEGEMENTNUMBER]
					@BRANCHID INT,
					@FORMID SMALLINT,
					@QUARTER SMALLINT,
					@REVISENUMBER INT
AS
BEGIN
DECLARE @ACKID INT
SELECT @ACKID=ACKID FROM ACKNO WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
SELECT ACKNOREVID,REVNUM,REVFILEDDATE,ACKID,REVISENUMBER FROM ACKNOREV  WITH(NOLOCK) WHERE ACKID=@ACKID AND REVISENUMBER=@REVISENUMBER-1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPRINTCERTIFICATENOS')
DROP PROCEDURE USP_TDS_GETPRINTCERTIFICATENOS
GO
CREATE PROCEDURE [USP_TDS_GETPRINTCERTIFICATENOS]
	@BRANCHID INT,
	@FORMID INT,
	@SECTIONID INT,
	@DEDUCTEESLNO INT
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX);
		SET @QUERY = 'SELECT DISTINCT F16A.PRINTCERTIFICATENO,F16A.SECTIONID,F16A.TDSCERTIFICATENO
					  FROM   FORM16A F16A WITH(NOLOCK)  INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)  ON F16A.DEDUCTIONID = DD.DEDUCTIONID
										  INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
										  LEFT  JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID
										  LEFT  JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
					  WHERE  DD.BRANCHID  = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND (DD.TOTALDEDUCTED=0 OR DL.DEDCHALINKID IS NOT NULL)';
		IF(@DEDUCTEESLNO <> -1)
			BEGIN
				SET @QUERY = @QUERY + ' AND NE.SERIALNO =' + CAST(@DEDUCTEESLNO AS VARCHAR) + ' AND F16A.PRINTCERTIFICATENO IS NOT NULL AND F16A.PRINTCERTIFICATENO<>''''';
			END
		IF(@SECTIONID <> -1)
			BEGIN
				SET @QUERY = @QUERY + ' AND DD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);
			END
		SET @QUERY = @QUERY + ' AND F16A.TDSCERTIFICATENO <> 0 AND F16A.PRINTCERTIFICATENO IS NOT NULL ORDER BY F16A.SECTIONID,F16A.TDSCERTIFICATENO ';
		EXECUTE SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPRINTCERTNOS')
DROP PROCEDURE USP_TDS_GETPRINTCERTNOS
GO
CREATE PROCEDURE [USP_TDS_GETPRINTCERTNOS]
	@BRANCHID INT,
	@FORMID INT,
	@TYPEVALUE INT,
	@VALUE INT,
	@PREFIXTEXT NVARCHAR(MAX),
	@RECCOUNT INT
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY='SELECT DISTINCT TOP '+CAST(@RECCOUNT AS VARCHAR) +' F16A.PRINTCERTIFICATENO
					   FROM	  FORM16A F16A WITH(NOLOCK)  LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID=F16A.DEDUCTIONID
					   WHERE  F16A.PRINTCERTIFICATENO LIKE '''+@PREFIXTEXT+'%'' AND DD.FORMID ='+CAST(@FORMID AS VARCHAR)+' AND DD.DEDUCTIONID IN(SELECT DD.DEDUCTIONID
																					FROM   DEDUCTIONDETAIL DD LEFT JOIN DEDCHALINK DL ON DD.DEDUCTIONID = DL.DEDUCTIONID
																					WHERE  DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND (DD.TOTALDEDUCTED=0 OR DL.DEDCHALINKID IS NOT NULL))';
		IF(@TYPEVALUE=1)
			BEGIN
				IF(@VALUE <> 5)
					BEGIN
						SET @SQLQUERY=@SQLQUERY+' AND DD.QUARTER='+ CAST(@VALUE AS VARCHAR);
					END
			END
		ELSE IF(@TYPEVALUE=2)
			BEGIN
				SET @SQLQUERY=@SQLQUERY+' AND MONTH(DD.PAYMENTDATE)='+ CAST(@VALUE AS VARCHAR);
			END
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPROCESSID')
DROP PROCEDURE USP_TDS_GETPROCESSID
GO
CREATE PROCEDURE [USP_TDS_GETPROCESSID]
@BRANCHID INT ,
@FORMID INT,
@QUARTER INT
AS
BEGIN
     SELECT PROCESSID FROM ERETURNPROCESS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPROJECTABLEDEDUCTIONUS16')
DROP PROCEDURE USP_TDS_GETPROJECTABLEDEDUCTIONUS16
GO
CREATE PROCEDURE [USP_TDS_GETPROJECTABLEDEDUCTIONUS16]
@COMID INT,
@BRANCHID INT
AS
   BEGIN
	DECLARE @I INT, @J INT,@TAXABLEAMT NUMERIC(13,2),@MINMONTHID INT, @MAXMONTHID INT;
	SELECT @I = MIN(SD.MONTHID) FROM SECTION16DET SD WITH(NOLOCK)
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID
	WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND SD.MONTHID = 3
	SELECT @J = MIN(SD.MONTHID) FROM SECTION16DET SD
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID
	WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND SD.MONTHID = 2
	SELECT @MINMONTHID = CASE WHEN MIN(SD.MONTHID) = 3 THEN 3
				   WHEN @I IS NOT NULL THEN 3
				   WHEN @J IS NOT NULL THEN 2
		   END, @MAXMONTHID = MAX(SD.MONTHID)
	FROM SECTION16DET SD
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID
	WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID 
	SELECT @TAXABLEAMT = SUM(NETAMT) FROM
	(
		SELECT SUM(ISNULL(GROSSAMT1,0)) NETAMT  --+ ISNULL(GROSSAMT2,0)
		FROM SECTION16DET SD
		INNER JOIN LINKTOTC LC ON LC.COMID = SD.COMID
		INNER JOIN EMPWORKMONTH EM ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID
		WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND SD.SALARYSECTIONID = 2 
     )T
	SELECT (-1 * (SUM(NETAMT)  + @TAXABLEAMT)) AS NETAMT FROM
	(
		SELECT CASE WHEN @MINMONTHID IS NOT NULL THEN SUM(ISNULL(GROSSAMT1,0)) * (3 - @MINMONTHID)  --+ ISNULL(GROSSAMT2,0)							
							ELSE SUM(ISNULL(GROSSAMT1,0))  * ((12 - @MAXMONTHID) + 3)  --+ ISNULL(GROSSAMT2,0)
				  END AS NETAMT
			FROM SECTION16DET SD WITH(NOLOCK)
			INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID
			INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID
		WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND SD.SALARYSECTIONID = 2 AND
				  SD.MONTHID = CASE WHEN @MINMONTHID IS NULL THEN @MAXMONTHID ELSE @MAXMONTHID END
	   UNION
	    SELECT SUM(ISNULL(GROSSAMT1,0)) NETAMT  --+ ISNULL(GROSSAMT2,0)
			FROM SECTION16DET SD WITH(NOLOCK)
			INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID
			INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID
		WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND SD.SALARYSECTIONID = 1 		 
	)TT	
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPROJECTABLESALARY')
DROP PROCEDURE USP_TDS_GETPROJECTABLESALARY
GO
CREATE PROCEDURE [USP_TDS_GETPROJECTABLESALARY]     
@COMID INT,    
@BRANCHID INT    
AS    
   BEGIN    
 DECLARE @I INT, @J INT,@TAXABLEAMT NUMERIC(13,2),@MINMONTHID INT, @MAXMONTHID INT;
 SELECT @I = MIN(SD.MONTHID) FROM SALDETAIL SD WITH(NOLOCK)    
 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID    
 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID    
 INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID    
 WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND SD.MONTHID = 3  
 SELECT @J = MIN(SD.MONTHID) FROM SALDETAIL SD    
 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID    
 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID    
 INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID    
 WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND SD.MONTHID = 2    
 SELECT @MINMONTHID = CASE WHEN MIN(SD.MONTHID) = 3 THEN 3    
              WHEN MIN(SD.MONTHID) < 3 THEN   
            CASE WHEN @I IS NOT NULL THEN 3  
              WHEN @J IS NOT NULL THEN 2  
              ELSE MIN(SD.MONTHID)   
            END    
            END,   
          @MAXMONTHID = MAX(SD.MONTHID)    
 FROM SALDETAIL SD WITH(NOLOCK)    
 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID    
 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID    
 INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID    
 WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID    
 SELECT @TAXABLEAMT = SUM(NETAMT) FROM    
 (    
  SELECT CASE WHEN EARNING = 1 THEN SUM(NETAMT) ELSE -1 * SUM(NETAMT) END AS NETAMT    
  FROM SALDETAIL SD WITH(NOLOCK)   
  INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID    
  INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID    
  INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID    
  WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND ISNULL(SH.C80CID, 0) <=0 AND ISNULL(SH.INCLUDEINTAX,0) = 1    
  GROUP BY EARNING     
     )T    
 SELECT SUM(GROSSAMT1)  + @TAXABLEAMT AS NETAMT FROM    
 (    
  SELECT CASE WHEN @MINMONTHID IS NOT NULL     
        THEN      
        CASE WHEN EARNING = 1 THEN SUM(GROSSAMT1) * (3 - @MINMONTHID) ELSE -1 * SUM(GROSSAMT1)  * (3 - @MINMONTHID) END     
       ELSE     
        CASE WHEN EARNING = 1 THEN SUM(GROSSAMT1)  * ((12 - @MAXMONTHID) + 3)  ELSE -1 * SUM(GROSSAMT1)  * ((12 - @MAXMONTHID) + 3)  END           
      END AS GROSSAMT1    
   FROM SALDETAIL SD WITH(NOLOCK)    
   INNER JOIN SALARYHEAD SH ON SD.SALARYHEADID = SH.SALARYHEADID    
   INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID    
   INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = LC.BRANCHID    
  WHERE SD.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND ISNULL(SH.C80CID, 0) <=0 AND ISNULL(SH.INCLUDEINTAX,0) = 1 AND     
      SD.MONTHID = CASE WHEN @MINMONTHID IS NULL THEN @MAXMONTHID ELSE @MINMONTHID END    
  GROUP BY EARNING     
 )TT     
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPROJECTABLETAXABLEPERQUISITE')
DROP PROCEDURE USP_TDS_GETPROJECTABLETAXABLEPERQUISITE
GO
CREATE PROCEDURE USP_TDS_GETPROJECTABLETAXABLEPERQUISITE 
@COMID INT,
@BRANCHID INT
AS
   BEGIN
	DECLARE @MINMONTHID INT, @MAXMONTHID INT, @TAXABLEAMT NUMERIC(13,2),@I INT, @J INT, @K INT;
	SET @I = NULL;
	SET @J = NULL;
	SET @K = NULL;
	SELECT @TAXABLEAMT = SUM(TAXABLEAMT)
	FROM TAXABLEPERQUISITE T WITH(NOLOCK)
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = T.COMID
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = T.COMID AND EM.MONTHID = T.MONTHID AND EM.BRANCHID = LC.BRANCHID
	WHERE PERKID <> 21 AND T.COMID = @COMID AND LC.BRANCHID = @BRANCHID
	IF EXISTS(SELECT T.MONTHID FROM TAXABLEPERQUISITE T WITH(NOLOCK)
						INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = T.COMID
						INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = T.COMID AND EM.MONTHID = T.MONTHID AND EM.BRANCHID = LC.BRANCHID
						WHERE T.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND T.MONTHID = 3)
			SET @I = 3
	IF EXISTS(SELECT T.MONTHID FROM TAXABLEPERQUISITE T WITH(NOLOCK)
						INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = T.COMID
						INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = T.COMID AND EM.MONTHID = T.MONTHID AND EM.BRANCHID = LC.BRANCHID
						WHERE T.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND T.MONTHID = 2)
			SET @J = 2
	IF EXISTS(SELECT T.MONTHID FROM TAXABLEPERQUISITE T WITH(NOLOCK)
						INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = T.COMID
						INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = T.COMID AND EM.MONTHID = T.MONTHID AND EM.BRANCHID = LC.BRANCHID
						WHERE T.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND T.MONTHID = 1)
			SET @K = 1
	SELECT @MINMONTHID = CASE WHEN @I IS NOT NULL THEN 3
								 		       WHEN @I IS NOT NULL THEN 2
											   WHEN @J IS NOT NULL THEN 1
									    END, 
			   @MAXMONTHID = MAX(T.MONTHID)
	FROM TAXABLEPERQUISITE T WITH(NOLOCK)
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = T.COMID
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = T.COMID AND EM.MONTHID = T.MONTHID AND EM.BRANCHID = LC.BRANCHID
	WHERE PERKID <> 21 AND T.COMID = @COMID AND LC.BRANCHID = @BRANCHID
	SELECT SUM(NETAMT)  + @TAXABLEAMT AS NETAMT FROM
	(
		SELECT CASE WHEN @MINMONTHID IS NOT NULL THEN TAXABLEAMT * (3 - @MINMONTHID)
						 ELSE TAXABLEAMT * ((12 - @MAXMONTHID) + 3) END AS NETAMT
						 FROM TAXABLEPERQUISITE T WITH(NOLOCK)
						 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = T.COMID
						 INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = T.COMID AND EM.MONTHID = T.MONTHID AND EM.BRANCHID = LC.BRANCHID
						 WHERE PERKID <> 21 AND T.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND
						 T.MONTHID = CASE WHEN @MINMONTHID IS NULL THEN @MAXMONTHID ELSE @MINMONTHID END
	)TT		
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetPurchaseOrderAvailableAmount')
DROP PROCEDURE USP_TDS_GetPurchaseOrderAvailableAmount
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetPurchaseOrderAvailableAmount]                                            
 @ORDERID INT,
 @DEDUCTEEID INT                   
AS    
 BEGIN                                            
  DECLARE  @AVAILORDERAMOUNT NUMERIC(13,2);                                            
  SET @AVAILORDERAMOUNT = 0;                                  
  IF EXISTS(SELECT ORDERID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID AND ORDERID = @ORDERID)              
  BEGIN                            
	  SELECT @AVAILORDERAMOUNT = SUM(ISNULL(PAYMENTMADE,0)) FROM DEDUCTIONDETAIL WITH(NOLOCK)               
	  WHERE DEDUCTEEID = @DEDUCTEEID AND ORDERID = @ORDERID              
	  GROUP BY DEDUCTEEID              
	  SELECT ISNULL(DD.ORDERID,-1)ORDERID,               
		ISNULL(PO.ORDERNO,'')ORDERNO , CASE WHEN ORDERAMOUNT IS NULL THEN ISNULL(ORDERAMOUNT,0) ELSE ORDERAMOUNT - @AVAILORDERAMOUNT END AS AVAILORDERAMOUNT ,             
		ISNULL(ORDERAMOUNT,0) AS TOTALORDERAMOUNT  
		FROM DEDUCTIONDETAIL DD   WITH(NOLOCK)                                    
		INNER JOIN PURCHASEORDER PO WITH(NOLOCK) ON PO.ORDERID = DD.ORDERID       
	  WHERE DD.DEDUCTEEID = @DEDUCTEEID AND PO.ORDERID = @ORDERID
  END
  ELSE
  BEGIN
	  SELECT ORDERID, ORDERNO, ORDERAMOUNT AS AVAILORDERAMOUNT, ORDERAMOUNT AS TOTALORDERAMOUNT
	  FROM PURCHASEORDER WHERE ORDERID = @ORDERID
  END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPURCHASEORDERBYDEDUCTEEID')
DROP PROCEDURE USP_TDS_GETPURCHASEORDERBYDEDUCTEEID
GO
CREATE PROCEDURE [USP_TDS_GETPURCHASEORDERBYDEDUCTEEID]    
@DEDUCTEEID INT    
AS    
  BEGIN    
  SELECT PO.ORDERID, ORDERNO,ISNULL(PO.TDSRATE,-1)TDSRATE
  FROM PURCHASEORDER PO  WITH(NOLOCK)
  WHERE PO.DEDUCTEEID = @DEDUCTEEID    
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETPURCHASEORDERDETAILONORDERID')
DROP PROCEDURE USP_TDS_GETPURCHASEORDERDETAILONORDERID
GO
CREATE PROCEDURE [USP_TDS_GETPURCHASEORDERDETAILONORDERID]      
(      
@ORDERID INT      
)      
AS      
BEGIN      
  SELECT PO.ORDERID,PO.DEDUCTEEID,D.NAME,PO.ORDERNO,PO.ORDERDATE,PO.ORDERAMOUNT,ISNULL(PO.NARRATION,'')NARRATION,  
   ISNULL(PO.TDSRATE,-1)TDSRATE,PO.NARRATION, PO.NEXTAMCAMOUNT, PO.NEXTAMCDATE,PO.AMOUNTLIABLETOTAX,  
  CASE WHEN DD.ORDERID IS NULL THEN 0 ELSE 1 END AS ISUSED    
  FROM PURCHASEORDER PO  WITH(NOLOCK)  
  INNER JOIN DEDUCTEE D  WITH(NOLOCK)  
  ON D.DEDUCTEEID=PO.DEDUCTEEID  
  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  
  ON NE.DEDUCTEEID=D.DEDUCTEEID  
  LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)  
  ON DD.DEDUCTEEID=D.DEDUCTEEID AND DD.ORDERID=PO.ORDERID  
  WHERE PO.ORDERID=@ORDERID  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETQ4SALARYFORDQR')
DROP PROCEDURE USP_TDS_GETQ4SALARYFORDQR
GO
CREATE PROCEDURE [USP_TDS_GETQ4SALARYFORDQR]
(
@BRANCHID INT
)
AS
BEGIN
SELECT DEDUCTEEID,SERIALNO,NAME,PAN,GENDER,ISSENIORCITIZEN,RELIEFUS89,ISNULL(TOTALTAXABLEINCOME,0)TOTALTAXABLEINCOME,ISNULL(NETTAXPAYABLE,0)NETTAXPAYABLE,ISNULL(PREVTDSMADE,0)PREVTDSMADE,ISNULL(TAXPAYABLE,0)TAXPAYABLE,ISNULL(CURRENTTDSMADE,0)CURRENTTDSMADE FROM
(
SELECT DISTINCT E.SERIALNO, D.DEDUCTEEID,D.NAME,E.GENDER,E.ISSENIORCITIZEN,D.PAN,SD.RELIEFUS89,SD.TOTALTAXABLEINCOME,SD.NETTAXPAYABLE,(SD.PREVEMPINCOMETAX+SD.PREVEMPSURCHARGE+SD.PREVEMPCESS) AS PREVTDSMADE,SD.TAXPAYABLE FROM DEDUCTEE D
INNER JOIN EMPLOYEE E WITH(NOLOCK)
ON E.DEDUCTEEID=D.DEDUCTEEID INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
ON SD.DEDUCTEEID=D.DEDUCTEEID AND SD.BRANCHID=D.BRANCHID
LEFT JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK)
ON DD.DEDUCTEEID=D.DEDUCTEEID
WHERE D.BRANCHID=@BRANCHID
) TEMP
LEFT  JOIN
(
SELECT D.DEDUCTEEID AS AMTDEDID,ISNULL(SUM(D.TOTALDEDUCTED),0) CURRENTTDSMADE FROM  EMPLOYEE E WITH(NOLOCK)  INNER JOIN DEDUCTIONDETAIL D   WITH(NOLOCK)
ON D.DEDUCTEEID=E.DEDUCTEEID
WHERE D.BRANCHID=@BRANCHID AND D.FORMID=1
GROUP BY D.DEDUCTEEID
) TEMP1
ON TEMP1.AMTDEDID=TEMP.DEDUCTEEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETQSSDATA')
DROP PROCEDURE USP_TDS_GETQSSDATA
GO
CREATE PROCEDURE [USP_TDS_GETQSSDATA]
(
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@FINYEAR INT
)
AS
BEGIN
SELECT PRN, QSSDATA,LASTRECEIVEDDATE FROM QSSSTATEMENT WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND FINYEAR=@FINYEAR
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETQUEUEID')
DROP PROCEDURE USP_TDS_GETQUEUEID
GO
CREATE PROCEDURE [USP_TDS_GETQUEUEID]  
@ACKID INT  
AS  
BEGIN  
 SELECT QUEUEID FROM ACKNO WITH(NOLOCK) 
 WHERE ACKID = @ACKID AND ISREQACTIVE = 1  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDCOUNT')
DROP PROCEDURE USP_TDS_GETRECORDCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETRECORDCOUNT]
@BRANCHCODES NVARCHAR(MAX),
@FORMID INT,
@QUARTER INT
AS
	BEGIN
			SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')
			SELECT DISTINCT CB.BRANCHCODE FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
			INNER JOIN	COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = DD.BRANCHID
			INNER JOIN #BRANCHES B ON B.DATA = BRANCHCODE
			WHERE FORMID = @FORMID AND QUARTER = @QUARTER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDHAVINGTDSGREATERTHANRATE')
DROP PROCEDURE USP_TDS_GETRECORDHAVINGTDSGREATERTHANRATE
GO
CREATE PROCEDURE [USP_TDS_GETRECORDHAVINGTDSGREATERTHANRATE]
AS
	BEGIN
			SELECT (SELECT BRANCHNAME + ' ['+ BRANCHCODE + ']' FROM COMPANYBRANCH WITH(NOLOCK)  WHERE BRANCHID = DD.BRANCHID) [BRANCHNAME],
				PAYMENTMADE, TAXRATE, TOTALDEDUCTED,
				(SELECT SECTIONNAME FROM TAXSECTIONS WHERE SECTIONID = DD.SECTIONID) [SECTION]
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  WHERE TOTALDEDUCTED > CEILING(PAYMENTMADE * (TAXRATE / 100))
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDHAVINGTDSLESSTHANRATE')
DROP PROCEDURE USP_TDS_GETRECORDHAVINGTDSLESSTHANRATE
GO
CREATE PROCEDURE [USP_TDS_GETRECORDHAVINGTDSLESSTHANRATE]  
@FROMDATE SMALLDATETIME,      
@TODATE SMALLDATETIME,  
@ISIB BIT          
AS        
 BEGIN         
   DECLARE @SQLQUERY NVARCHAR(MAX);  
   SET @SQLQUERY = 'SELECT BRANCHNAME ,BRANCHCODE , PAYMENTMADE, DD.TAXRATE, TOTALDEDUCTED,DEDUCTEDDATE, 
										TS.SECTIONNAME  [SECTION]        
            FROM DEDUCTIONDETAIL DD WITH(NOLOCK)   
            INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = DD.BRANCHID  
            INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON TS.SECTIONID = DD.SECTIONID  
            WHERE TOTALDEDUCTED < ((PAYMENTMADE * (DD.TAXRATE / 100)) * 90/100)      
            AND DEDUCTEDDATE BETWEEN  ''' + CAST(@FROMDATE AS VARCHAR) +''' AND '''+ CAST(@TODATE AS VARCHAR)+''''    
     IF(@ISIB = 1)    
     BEGIN    
     SET @SQLQUERY = @SQLQUERY + '  AND ISNULL(NOCHALLANPAY,0) = 0'             
     END    
     EXEC SP_EXECUTESQL @SQLQUERY;               
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDSCOUNT')
DROP PROCEDURE USP_TDS_GETRECORDSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETRECORDSCOUNT]
@BRANCHID INT,
@ISEMPLOYEE BIT,
@ISNONEMPLOYEE BIT
AS
 BEGIN
  DECLARE @DEDCOUNT INT, @CHALLANCOUNT INT;
	SET @DEDCOUNT=0; SET @CHALLANCOUNT=0;
   IF(@ISEMPLOYEE = 1 AND @ISNONEMPLOYEE = 1)
    BEGIN
		 SELECT @DEDCOUNT = ISNULL(COUNT(DEDUCTIONID),0) FROM DEDUCTIONDETAIL WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID
		 SELECT @CHALLANCOUNT = ISNULL(COUNT(CHALLANID),0) FROM CHALLANDETAIL WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID
    END
   ELSE IF(@ISNONEMPLOYEE = 1)
		BEGIN
			 SELECT @DEDCOUNT = ISNULL(COUNT(DEDUCTIONID),0) FROM DEDUCTIONDETAIL WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND FORMID IN (2,3)
		     SELECT @CHALLANCOUNT = ISNULL(COUNT(CHALLANID),0) FROM CHALLANDETAIL WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND FORMID IN (2,3)
		END
   ELSE IF(@ISEMPLOYEE = 1)
		BEGIN
			 SELECT @DEDCOUNT = ISNULL(COUNT(DEDUCTIONID),0) FROM DEDUCTIONDETAIL WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND FORMID = 1
		     SELECT @CHALLANCOUNT = ISNULL(COUNT(CHALLANID),0) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 1
		END
  SELECT @DEDCOUNT + @CHALLANCOUNT;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDSHAVINGMISMATCHTDSAMOUNT')
DROP PROCEDURE USP_TDS_GETRECORDSHAVINGMISMATCHTDSAMOUNT
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETRECORDSHAVINGMISMATCHTDSAMOUNT]  
@QUARTER INT,  
@VALUE INT  
AS  
 BEGIN  
	 IF(@VALUE = 1)  
		BEGIN  
			--MORE TDS  
			SELECT DEDUCTIONID,BRANCHID, 
				(SELECT BRANCHNAME + ' ['+ BRANCHCODE + ']' FROM COMPANYBRANCH WHERE BRANCHID = DD.BRANCHID) [BRANCHNAME],  
				 DD.SERIALNO, 
				(SELECT REPLACE(NAME, '"', '') FROM DEDUCTEE WHERE DEDUCTEEID = DD.DEDUCTEEID) [NAME],  
				(SELECT PAN FROM DEDUCTEE WHERE DEDUCTEEID = DD.DEDUCTEEID) [PAN],  
				(SELECT SECTIONNAME FROM TAXSECTIONS WHERE SECTIONID = DD.SECTIONID) [SECTION],  
				 TAXRATE, TOTALDEDUCTED, PAYMENTMADE AS [OLD INTEREST PAID AMOUNT],  
				 CASE WHEN TAXRATE > 0 THEN CAST((TOTALDEDUCTED / (TAXRATE/100)) AS NUMERIC(13,2)) ELSE 0 END [NEW INTEREST PAID AMOUNT], 
				 CONVERT(CHAR(10), DEDUCTEDDATE,126)AS DEDUCTEDDATE,   
				 CASE WHEN NONDEDREASON = 0 THEN '' ELSE 'PAN NOT AVAILABLE - HIGHER RATE (20%)' END [DEDUCTION REMARK]  
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE TOTALDEDUCTED > (PAYMENTMADE * TAXRATE / 100)      
				AND FORMID <> 1 AND SECTIONID IN (5, 17) AND DD.QUARTER = @QUARTER  
			ORDER BY SERIALNO,BRANCHNAME  
		END  
	 ELSE IF(@VALUE = 2)  
		BEGIN  
			--LESS TDS  
			SELECT DD.DEDUCTIONID, BRANCHID, 
				(SELECT BRANCHNAME + ' ['+ BRANCHCODE + ']' FROM COMPANYBRANCH WHERE BRANCHID = DD.BRANCHID) [BRANCHNAME],  
				DD.SERIALNO, 
				(SELECT REPLACE(NAME, '"', '') FROM DEDUCTEE WHERE DEDUCTEEID = DD.DEDUCTEEID) [NAME],  
				(SELECT PAN FROM DEDUCTEE WHERE DEDUCTEEID = DD.DEDUCTEEID) [PAN],  
				(SELECT SECTIONNAME FROM TAXSECTIONS WHERE SECTIONID = DD.SECTIONID) [SECTION],  
				TAXRATE, TOTALDEDUCTED, PAYMENTMADE AS [OLD INTEREST PAID AMOUNT],  
				CASE WHEN TAXRATE > 0 THEN CAST((TOTALDEDUCTED / (TAXRATE/100)) AS NUMERIC(13,2)) ELSE 0 END [NEW INTEREST PAID AMOUNT],   
				CONVERT(CHAR(10), DEDUCTEDDATE,126)AS DEDUCTEDDATE,   
				CASE WHEN NONDEDREASON = 0 THEN '' ELSE 'PAN NOT AVAILABLE - HIGHER RATE (20%)' END [DEDUCTION REMARK]  
			 FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
			 WHERE TOTALDEDUCTED < (((PAYMENTMADE * TAXRATE / 100) * 0.9) 
					 - (CASE WHEN (DD.TOTALDEDUCTED <= 3 AND DD.PAYMENTMADE <= 20) THEN 0 ELSE 2 END)) 
			AND FORMID <> 1 AND SECTIONID IN (5, 17) AND DD.QUARTER = @QUARTER  
			ORDER BY BRANCHNAME, SERIALNO  
		END  
	ELSE  
		BEGIN  
			-- TDS RATE IS ZERO  
			SELECT DD.DEDUCTIONID, 
				(SELECT BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID = DD.BRANCHID) [BRANCHCODE],  
				(SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID = DD.BRANCHID) [BRANCHNAME],  
				DD.SERIALNO, PAYMENTMADE, TAXRATE, TOTALDEDUCTED,   
				CAST(((TOTALDEDUCTED / PAYMENTMADE) * 100.00) AS NUMERIC(7,2)) [CALCULATED TAX RATE],  
				CD.SERIALNO [CHALLAN SR.NO.], CD.BANKCHALLANNO [CHALLAN NO],  
				CONVERT(VARCHAR, CD.CHALLANPAIDDATE, 103) [CHALLAN DT],  
				CD.CHALLANTOTAL [CHALLAN AMOUNT],  
				(SELECT SECTIONNAME FROM TAXSECTIONS WHERE SECTIONID = DD.SECTIONID) [SEC NO]  
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK) LEFT OUTER JOIN DEDCHALINK LNK WITH(NOLOCK) ON DD.DEDUCTIONID = LNK.DEDUCTIONID  
				LEFT OUTER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON LNK.CHALLANID = CD.CHALLANID  
			WHERE DD.QUARTER = @QUARTER AND DD.TAXRATE = 0 AND DD.FORMID <> 1 AND DD.TOTALDEDUCTED > 0  
			ORDER BY BRANCHCODE, SERIALNO  
		END   
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDSHAVINGMORETDSAMOUNT')
DROP PROCEDURE USP_TDS_GETRECORDSHAVINGMORETDSAMOUNT
GO
CREATE PROCEDURE [USP_TDS_GETRECORDSHAVINGMORETDSAMOUNT]
@QUARTER INT
AS
 BEGIN
	SELECT DEDUCTIONID, (SELECT BRANCHNAME + ' ['+ BRANCHCODE + ']' FROM COMPANYBRANCH WHERE BRANCHID = DD.BRANCHID) [BRANCHNAME],
    DD.SERIALNO, (SELECT REPLACE(NAME, '"', '') FROM DEDUCTEE WHERE DEDUCTEEID = DD.DEDUCTEEID) [NAME],
    (SELECT PAN FROM DEDUCTEE WHERE DEDUCTEEID = DD.DEDUCTEEID) [PAN],
    (SELECT SECTIONNAME FROM TAXSECTIONS WHERE SECTIONID = DD.SECTIONID) [SECTION],
    TAXRATE, TOTALDEDUCTED, PAYMENTMADE AS [OLD INTEREST PAID AMOUNT],
    CAST((TOTALDEDUCTED / (TAXRATE/100)) AS NUMERIC(13,2)) [NEW INTEREST PAID AMOUNT], DEDUCTEDDATE, 
    CASE WHEN NONDEDREASON = 0 THEN '' ELSE 'PAN NOT AVAILABLE - HIGHER RATE (20%)' END [DEDUCTION REMARK]
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE TOTALDEDUCTED > PAYMENTMADE AND FORMID <> 1 AND 
	SECTIONID IN (5, 17) AND DD.QUARTER = @QUARTER
	ORDER BY BRANCHNAME, SERIALNO
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDSHAVINGRATEZERO')
DROP PROCEDURE USP_TDS_GETRECORDSHAVINGRATEZERO
GO
CREATE PROCEDURE [USP_TDS_GETRECORDSHAVINGRATEZERO]       
@FROMDATE SMALLDATETIME,      
@TODATE SMALLDATETIME,  
@ISIB BIT  
AS        
 BEGIN        
    DECLARE @SQLQUERY NVARCHAR(MAX);  
   SET @SQLQUERY = ' SELECT BRANCHNAME , BRANCHCODE,        
            PAYMENTMADE, DD.TAXRATE, TOTALDEDUCTED,DEDUCTEDDATE, TS.SECTIONNAME  [SECTION]        
            FROM DEDUCTIONDETAIL DD WITH(NOLOCK)    
            INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = DD.BRANCHID  
            INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID  
            WHERE DD.TAXRATE = 0 AND TOTALDEDUCTED > 0 AND DD.FORMID <> 1        
            AND DEDUCTEDDATE BETWEEN  ''' + CAST(@FROMDATE AS VARCHAR) +''' AND '''+ CAST(@TODATE AS VARCHAR)+''''    
        IF(@ISIB = 1)    
       BEGIN    
       SET @SQLQUERY = @SQLQUERY + '  AND ISNULL(NOCHALLANPAY,0) = 0'             
       END    
   EXEC SP_EXECUTESQL @SQLQUERY;           
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDSHAVINGTDSLESSTHANRATE')
DROP PROCEDURE USP_TDS_GETRECORDSHAVINGTDSLESSTHANRATE
GO
CREATE PROCEDURE [USP_TDS_GETRECORDSHAVINGTDSLESSTHANRATE]
AS
	BEGIN
			SELECT (SELECT BRANCHNAME + ' ['+ BRANCHCODE + ']' FROM COMPANYBRANCH WHERE BRANCHID = DD.BRANCHID) [BRANCHNAME],
			PAYMENTMADE, TAXRATE, TOTALDEDUCTED,
			(SELECT SECTIONNAME FROM TAXSECTIONS WITH(NOLOCK) WHERE SECTIONID = DD.SECTIONID) [SECTION]
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE TOTALDEDUCTED < ((PAYMENTMADE * (TAXRATE / 100)) * 90/100)
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDSHAVINGTDSMORETHANRATE')
DROP PROCEDURE USP_TDS_GETRECORDSHAVINGTDSMORETHANRATE
GO
CREATE PROCEDURE [USP_TDS_GETRECORDSHAVINGTDSMORETHANRATE] 
@FROMDATE SMALLDATETIME,      
@TODATE SMALLDATETIME,  
@ISIB BIT      
AS        
 BEGIN        
        IF(@ISIB = 1)    
		 BEGIN    
		   SELECT BRANCHNAME, BRANCHCODE, PAYMENTMADE, DD.TAXRATE,  
               TOTALDEDUCTED, TS.SECTIONNAME [SECTION]        
             FROM DEDUCTIONDETAIL DD WITH(NOLOCK)    
             INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON DD.BRANCHID = CB.BRANCHID  
             INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID   
             WHERE TOTALDEDUCTED > CEILING(PAYMENTMADE * (DD.TAXRATE / 100))  AND DD.FORMID IN (2,3,4) AND
					    DEDUCTEDDATE BETWEEN '' + CAST(@FROMDATE AS VARCHAR) +'' AND ''+ CAST(@TODATE AS VARCHAR) + '' AND ISNULL(NOCHALLANPAY,0) = 0
		 END 
	   ELSE
	     BEGIN
			SELECT BRANCHNAME, BRANCHCODE, PAYMENTMADE, DD.TAXRATE,  
               TOTALDEDUCTED, TS.SECTIONNAME [SECTION]        
             FROM DEDUCTIONDETAIL DD WITH(NOLOCK)    
             INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON DD.BRANCHID = CB.BRANCHID  
             INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID   
             WHERE TOTALDEDUCTED > CEILING(PAYMENTMADE * (DD.TAXRATE / 100))  AND DD.FORMID IN (2,3,4) AND
                       DEDUCTEDDATE BETWEEN '' + CAST(@FROMDATE AS VARCHAR) +'' AND ''+ CAST(@TODATE AS VARCHAR)+''   
	     END   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDSHAVINGZEROTDSRATE')
DROP PROCEDURE USP_TDS_GETRECORDSHAVINGZEROTDSRATE
GO
CREATE PROCEDURE [USP_TDS_GETRECORDSHAVINGZEROTDSRATE]
@QUARTER INT
AS
 BEGIN
	SELECT DD.DEDUCTIONID, (SELECT BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID = DD.BRANCHID) [BRANCHCODE],
    (SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID = DD.BRANCHID) [BRANCHNAME],
    DD.SERIALNO, PAYMENTMADE, TAXRATE, TOTALDEDUCTED, 
    CAST(((TOTALDEDUCTED / PAYMENTMADE) * 100.00) AS NUMERIC(7,2)) [CALCULATED TAX RATE],
    CD.SERIALNO [CHALLAN SR.NO.], CD.BANKCHALLANNO [CHALLAN NO],
    CONVERT(VARCHAR, CD.CHALLANPAIDDATE, 103) [CHALLAN DT],
    CD.CHALLANTOTAL [CHALLAN AMOUNT],
    (SELECT SECTIONNAME FROM TAXSECTIONS WITH(NOLOCK) WHERE SECTIONID = DD.SECTIONID) [SEC NO]
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK) LEFT OUTER JOIN DEDCHALINK LNK WITH(NOLOCK) ON DD.DEDUCTIONID = LNK.DEDUCTIONID
    LEFT OUTER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON LNK.CHALLANID = CD.CHALLANID
    WHERE 
    DD.QUARTER = @QUARTER AND DD.TAXRATE = 0 AND DD.FORMID <> 1 AND DD.TOTALDEDUCTED > 0
	ORDER BY BRANCHCODE, SERIALNO
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRECORDSWITHERRORS')
DROP PROCEDURE USP_TDS_GETRECORDSWITHERRORS
GO
CREATE PROCEDURE [USP_TDS_GETRECORDSWITHERRORS]
AS
BEGIN
	SELECT ID, TEXT, ISCORRECT FROM TEXTRECORDS WITH(NOLOCK) WHERE ISCORRECT=0
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRELATEDDEDTINDETAILS')
DROP PROCEDURE USP_TDS_GETRELATEDDEDTINDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETRELATEDDEDTINDETAILS]
(
@BRANCHID INT,
@CERTCOUNT INT
)
AS
BEGIN
 SELECT F16.SLNO,F16.TAX,LEFT(F16.BINCIN,7) BSRCODE,
 SUBSTRING(F16.BINCIN,LEN(LEFT(F16.BINCIN,9)),10) TDSDATE,F16.BOOKING
 FROM FORM16TINDDR F16  WITH(NOLOCK)
 WHERE F16.BRANCHID=@BRANCHID AND F16.CERTCOUNT=@CERTCOUNT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRELATEDDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETRELATEDDEDUCTIONS
GO
CREATE PROCEDURE [USP_TDS_GETRELATEDDEDUCTIONS]
@BRANCHID INT,
@FORMID INT,
@DEDUCTEEID INT,
@SECTIONID INT,
@REPORTPAYMENTID INT
AS
 BEGIN
    DECLARE @DEDPAYMENTMADE NUMERIC(13,2), @RPPAYMENTMADE NUMERIC(13,2), @PAYMENTMADE NUMERIC(13,2);
              DECLARE @TDSMADE NUMERIC(13,2);
    SELECT @DEDPAYMENTMADE = ISNULL(SUM(PAYMENTMADE),0) FROM DEDUCTIONDETAIL WITH(NOLOCK)
    WHERE DEDUCTEEID = @DEDUCTEEID AND SECTIONID = @SECTIONID AND ISNULL(REFDEDUCTIONID , 0) = 0 AND (NONDEDREASON = 0 OR NONDEDREASON = 5)
    AND TOTALDEDUCTED = 0 AND FORMID= @FORMID AND BRANCHID = @BRANCHID;
   SELECT @TDSMADE = ISNULL(SUM(PAYMENTMADE), 0) FROM DEDUCTIONDETAIL   WITH(NOLOCK)
    WHERE DEDUCTEEID = @DEDUCTEEID AND SECTIONID = @SECTIONID AND (ISNULL(REFDEDUCTIONID , 0) = 0 OR ISNULL(REFDEDUCTIONID, 0) <> 0)  AND (NONDEDREASON = 0 OR NONDEDREASON = 5)
    AND TOTALDEDUCTED <> 0 AND FORMID= @FORMID AND BRANCHID = @BRANCHID;
    SELECT @RPPAYMENTMADE =
   CASE WHEN SECTIONID = @SECTIONID THEN EXCLUDESERVICETAX
     ELSE (SERVICETAX +  EXCLUDESERVICETAX)
     END FROM REPORTPAYMENT      WITH(NOLOCK)
      WHERE DEDUCTEEID = @DEDUCTEEID AND SECTIONID = @SECTIONID AND ID = @REPORTPAYMENTID AND PARENTBRANCHID =@BRANCHID
  SET @PAYMENTMADE = ISNULL(@DEDPAYMENTMADE, 0) + ISNULL(@RPPAYMENTMADE, 0);
   SELECT T.PAN, T.ID, T.NAME, T.PAYMENTMADE, T.BGLCODE, T.CALCULATEDTDS, T.ITRATE  FROM
    (SELECT D.PAN, RP.ID, D.NAME, DD.PAYMENTMADE, (TR.BGLCODE + '-' + TS.SECTIONNAME )BGLCODE,
   CASE
   WHEN NE.STATUS IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) >= ISNULL(NE.CONLIMIT, 0)
   THEN CONVERT(DECIMAL(10,2),(DD.PAYMENTMADE * TR.CATEGORY1)/100)
	WHEN NE.STATUS IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) <= ISNULL(NE.CONLIMIT, 0)
     THEN
		CASE
			WHEN ISNULL(NE.CONTAXRATE, -1) = -1
			THEN  CONVERT(DECIMAL(10,2),((DD.PAYMENTMADE * TR.CATEGORY1)/100))
			ELSE  CONVERT(DECIMAL(10,2),((DD.PAYMENTMADE * NE.CONTAXRATE)/100))
      END
    WHEN NE.STATUS NOT IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) <= ISNULL(NE.CONLIMIT, 0)
     THEN
	   CASE
		WHEN ISNULL(NE.CONTAXRATE, -1) = -1
		THEN  CONVERT(DECIMAL(10,2),((DD.PAYMENTMADE * TR.CATEGORY2)/100))
		 ELSE  CONVERT(DECIMAL(10,2),((DD.PAYMENTMADE * NE.CONTAXRATE)/100))
		END
	 WHEN NE.STATUS NOT IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) >= ISNULL(NE.CONLIMIT, 0)
     THEN CONVERT(DECIMAL(10,2),(DD.PAYMENTMADE * TR.CATEGORY2)/100)
   END AS CALCULATEDTDS,
   CASE
   WHEN NE.STATUS IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) >= ISNULL(NE.CONLIMIT, 0)
   THEN TR.CATEGORY1
   WHEN NE.STATUS IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) <= ISNULL(NE.CONLIMIT, 0)
     THEN
     CASE
		   WHEN ISNULL(NE.CONTAXRATE, -1) = -1
			THEN  TR.CATEGORY1
			ELSE  NE.CONTAXRATE
     END
    WHEN NE.STATUS NOT IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) >= ISNULL(NE.CONLIMIT, 0)
	 THEN TR.CATEGORY2
    WHEN NE.STATUS NOT IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >=TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) <= ISNULL(NE.CONLIMIT, 0)
     THEN
	   CASE
		WHEN ISNULL(NE.CONTAXRATE, -1) = -1
		THEN  TR.CATEGORY2
		 ELSE  NE.CONTAXRATE
		END
   END AS ITRATE
    FROM DEDUCTIONDETAIL DD   WITH(NOLOCK)
   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
   INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID
   LEFT JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID AND RP.PARENTBRANCHID = D.BRANCHID
   LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID
   WHERE DD.DEDUCTEEID = @DEDUCTEEID AND DD.SECTIONID = @SECTIONID AND DD.TOTALDEDUCTED = 0 AND ISNULL(DD.REFDEDUCTIONID , 0) = 0
   AND D.BRANCHID = @BRANCHID
   UNION
    SELECT D.PAN, RP.ID, D.NAME,
     CASE WHEN TR.SECTIONID = @SECTIONID THEN (RP.EXCLUDESERVICETAX  + RP.SERVICETAX)
     ELSE RP.EXCLUDESERVICETAX END PAYMENTMADE ,
     (TR.BGLCODE + '-' + TS.SECTIONNAME )BGLCODE,
     CASE
   WHEN NE.STATUS IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) >= ISNULL(NE.CONLIMIT, 0)
   THEN (@RPPAYMENTMADE * TR.CATEGORY1)/100
   WHEN NE.STATUS IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) <= ISNULL(NE.CONLIMIT, 0)
     THEN
     CASE
   WHEN ISNULL(NE.CONTAXRATE, -1) = -1
   THEN  CONVERT(DECIMAL(10,2), ((@RPPAYMENTMADE * TR.CATEGORY1)/100))
   ELSE  CONVERT(DECIMAL(10,2),((@RPPAYMENTMADE * NE.CONTAXRATE)/100 ))
     END
      WHEN NE.STATUS NOT IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) >= ISNULL(NE.CONLIMIT, 0)
   THEN (@RPPAYMENTMADE * TR.CATEGORY2)/100
    WHEN NE.STATUS NOT IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) <= ISNULL(NE.CONLIMIT, 0)
     THEN
   CASE
    WHEN ISNULL(NE.CONTAXRATE, -1) = -1
    THEN  CONVERT(DECIMAL(10,2),((@RPPAYMENTMADE * TR.CATEGORY2)/100))
     ELSE  CONVERT(DECIMAL(10,2), ((@RPPAYMENTMADE * NE.CONTAXRATE)/100))
    END
   END AS CALCULATEDTDS,
    CASE
   WHEN NE.STATUS IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) >= ISNULL(NE.CONLIMIT, 0)
   THEN  TR.CATEGORY1
   WHEN NE.STATUS IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) <= ISNULL(NE.CONLIMIT, 0)
     THEN
     CASE
   WHEN ISNULL(NE.CONTAXRATE, -1) = -1
   THEN  TR.CATEGORY1
   ELSE NE.CONTAXRATE
     END
      WHEN NE.STATUS  NOT IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) >= ISNULL(NE.CONLIMIT, 0)
   THEN  TR.CATEGORY2
    WHEN NE.STATUS NOT IN (1,2,3,4) AND (@PAYMENTMADE + @TDSMADE) >= TR.THRESHOLDLIMIT AND (@PAYMENTMADE + @TDSMADE) <= ISNULL(NE.CONLIMIT, 0)
     THEN
   CASE
    WHEN ISNULL(NE.CONTAXRATE, -1) = -1
    THEN  TR.CATEGORY2
     ELSE  NE.CONTAXRATE
    END
   END AS ITRATE
     FROM DEDUCTEE D  WITH(NOLOCK)
     INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
     INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.DEDUCTEEID = D.DEDUCTEEID  AND RP.PARENTBRANCHID = D.BRANCHID
     INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID
     LEFT JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID
     WHERE RP.ID= @REPORTPAYMENTID AND D.BRANCHID=  @BRANCHID
  )T
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRELATEDDEDUCTIONSCOUNT')
DROP PROCEDURE USP_TDS_GETRELATEDDEDUCTIONSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETRELATEDDEDUCTIONSCOUNT]
@BRANCHID INT,
@FORMID INT,
@DEDUCTEEID INT,
@SECTIONID INT,
@REPORTPAYMENTID INT
AS
	BEGIN
		DECLARE @COUNT1 INT, @COUNT2 INT;
			SELECT @COUNT1 = COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK)
				WHERE BRANCHID = @BRANCHID AND FORMID= @FORMID AND DEDUCTEEID = @DEDUCTEEID AND SECTIONID = @SECTIONID AND
					ISNULL(REFDEDUCTIONID , 0) = 0 AND (NONDEDREASON = 0 OR NONDEDREASON = 5)
						AND TOTALDEDUCTED = 0
			  SELECT @COUNT2= COUNT(ID)
			  FROM REPORTPAYMENT WITH(NOLOCK)
			  WHERE DEDUCTEEID = @DEDUCTEEID AND SECTIONID = @SECTIONID AND ID = @REPORTPAYMENTID AND PARENTBRANCHID = @BRANCHID
			SELECT @COUNT1+ @COUNT2;
     END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetRemainingDeductionDetail')
DROP PROCEDURE USP_TDS_GetRemainingDeductionDetail
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetRemainingDeductionDetail] 
@BRANCHID INT,                      
@FORMID INT,                      
@QUARTER INT,
@ALLPAN NVARCHAR(MAX)         
AS                      
 BEGIN
	SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ALLPAN,',')
	CREATE TABLE #DEDUCTEE(DEDUCTEEID INT, NAME VARCHAR(100), PAN VARCHAR(10), DEDUCTEECODE INT, PANREFERENCE VARCHAR(10), BRANCHID INT); 
 	IF(@FORMID = 1)
		BEGIN
			INSERT INTO #DEDUCTEE
			SELECT D.DEDUCTEEID,D.NAME,D.PAN,0 AS DEDUCTEECODE,D.PANREFERENCE,D.BRANCHID					
			FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
			INNER JOIN #TEMP T ON T.DATA=D.PAN    
			WHERE BRANCHID = @BRANCHID
		END
	ELSE
		BEGIN
			INSERT INTO #DEDUCTEE
			SELECT D.DEDUCTEEID,D.NAME,D.PAN,NE.DEDUCTEECODE,D.PANREFERENCE,D.BRANCHID		
			FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
			INNER JOIN #TEMP T ON T.DATA=D.PAN
			WHERE BRANCHID = @BRANCHID
		END
	SELECT D.NAME,D.PAN,D.DEDUCTEECODE,ISNULL(D.PANREFERENCE,'')PANREFERENCE,DD.*
	INTO #DEDUCTIONDETAIL
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID 
	WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER 
    SELECT DCL.DEDUCTIONID, DCL.CHALLANID, DCL.BRANCHID
	INTO #DEDCHALINK
	FROM DEDCHALINK DCL WITH(NOLOCK)
	INNER JOIN #DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID  = DCL.DEDUCTIONID AND DD.BRANCHID = DCL.BRANCHID
	WHERE DCL.BRANCHID = @BRANCHID
	SELECT CHALLANID, ERETURNID, BRANCHID, FORMID, QUARTER
	INTO #CHALLANDETAIL
	FROM CHALLANDETAIL WITH(NOLOCK)
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
	SELECT DEDUCTIONID,CD.ERETURNID 
	INTO #CHALLAN
	FROM #DEDCHALINK DCL WITH(NOLOCK) 
	INNER JOIN #CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID AND CD.BRANCHID = DCL.BRANCHID
	WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.QUARTER = @QUARTER
	DROP TABLE #DEDCHALINK
	DROP TABLE #CHALLANDETAIL
	SELECT MAX(ISNULL(DD.SERIALNO,0))SERIALNO
	INTO #EXISTINGDETAIL   
	FROM #DEDUCTIONDETAIL DD WITH(NOLOCK)
	LEFT JOIN #CHALLAN CD ON CD.DEDUCTIONID = DD.DEDUCTIONID  
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
	GROUP BY NAME,PAN,DEDUCTEECODE,PANREFERENCE,DD.PAYMENTDATE,DD.INCOMETAX , DD.SURCHARGE,DD.EDUCATIONCESS,  DD.TOTALDEDUCTED, DD.SECTIONID,DD.PAYMENTMADE
	HAVING COUNT(DD.DEDUCTEEID) = 1
	SELECT NAME,PAN,DEDUCTEECODE,PANREFERENCE,MAX(ISNULL(DD.SERIALNO,0))SERIALNO, MAX(ISNULL(DD.DEDUCTIONID,0))DEDUCTIONID, ISNULL(DD.ERETURNID,0)ERETURNID,MAX(ISNULL(CD.ERETURNID,0)) CHALLANERETURNID,
		 DD.PAYMENTDATE,ISNULL(DD.INCOMETAX,0)INCOMETAX , ISNULL(DD.SURCHARGE,0)SURCHARGE,ISNULL(DD.EDUCATIONCESS,0)EDUCATIONCESS,    
		 ISNULL(DD.TOTALDEDUCTED,0)TOTALDEDUCTED, DD.SECTIONID,ISNULL(DD.PAYMENTMADE,0)PAYMENTMADE       
	FROM #DEDUCTIONDETAIL DD WITH(NOLOCK)
	LEFT JOIN #CHALLAN CD ON CD.DEDUCTIONID = DD.DEDUCTIONID
	LEFT JOIN #EXISTINGDETAIL ED ON ED.SERIALNO = DD.SERIALNO 
	WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND  ED.SERIALNO IS NULL
	GROUP BY NAME,PAN,DEDUCTEECODE,PANREFERENCE,DD.PAYMENTDATE,DD.INCOMETAX , DD.SURCHARGE,DD.EDUCATIONCESS,  DD.TOTALDEDUCTED, DD.SECTIONID,DD.PAYMENTMADE, DD.ERETURNID  
	HAVING COUNT(DD.DEDUCTEEID) = 1	
	DROP TABLE #TEMP
	DROP TABLE #CHALLAN
	DROP TABLE #DEDUCTEE
	DROP TABLE #DEDUCTIONDETAIL
	DROP TABLE #EXISTINGDETAIL
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREMAININGPARKEDAMOUNT')
DROP PROCEDURE USP_TDS_GETREMAININGPARKEDAMOUNT
GO
CREATE PROCEDURE USP_TDS_GETREMAININGPARKEDAMOUNT --8,82014
@MONTH INT,
@MONTHYEAR INT
AS
BEGIN
	SELECT DD.BRANCHID, TOTALDEDUCTED,
		CASE
			WHEN DD.FORMID = 1 THEN '24Q' 
			WHEN DD.SECTIONID = 5 AND ENTRYTYPE = 4 THEN '26QI' 
			WHEN DD.FORMID = 2 AND ENTRYTYPE <> 4 THEN '26QV'
			WHEN DD.FORMID = 2 AND ENTRYTYPE = 4 AND DD.SECTIONID <> 5 THEN '26QVS'
			WHEN DD.FORMID = 3 THEN '27Q'
		END FORMTYPE
	INTO #TOSUM
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID = DD.DEDUCTIONID
	INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
	WHERE MONTH(DEDUCTEDDATE) = @MONTH AND ISAUTOGENERATED = 1
	SELECT BRANCHID, FORMTYPE, SUM(TOTALDEDUCTED) AMOUNT 
	INTO #TOCOMPARE
	FROM #TOSUM 
	GROUP BY BRANCHID, FORMTYPE
	SELECT P.MONTHYEAR MONTHYEAR, P.BRANCHID, P.FORMTYPE, P.ACCOUNTNO,
		CASE WHEN (P.AMOUNT - ISNULL(TC.AMOUNT, 0)) < 0 THEN 0 ELSE (P.AMOUNT - ISNULL(TC.AMOUNT, 0)) END AMOUNT	
	FROM PARKEDAMOUNT P WITH(NOLOCK)
		LEFT JOIN #TOCOMPARE TC ON TC.BRANCHID = P.BRANCHID AND TC.FORMTYPE = P.FORMTYPE 
	WHERE P.MONTHYEAR = @MONTHYEAR
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREMITTANCEDETAIL')
DROP PROCEDURE USP_TDS_GETREMITTANCEDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETREMITTANCEDETAIL]
@FROMDATE SMALLDATETIME,
@TODATE SMALLDATETIME
AS
 BEGIN
   SELECT CD.CHALLANPAIDDATE AS [DATE],
   DATENAME(M, DD.DEDUCTEDDATE) + '-' + DATENAME(YY, DD.DEDUCTEDDATE) [TDS FOR MONTH],
   (SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID = CB.PARENTBRANCHID) [REGION NAME],
   CB.BRANCHCODE [BRANCH CODE], CB.BRANCHNAME [BRANCH NAME],
   SUM(DD.TOTALDEDUCTED) [TDS AMOUNT REMITTED]
   FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)
   INNER JOIN DEDCHALINK LNK WITH(NOLOCK) ON DD.DEDUCTIONID = LNK.DEDUCTIONID
   INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON LNK.CHALLANID = CD.CHALLANID
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CD.BRANCHID = CB.BRANCHID
   WHERE CD.ISAUTOGENERATED = 1 AND CD.ISOLTASINCLUDED = 1 AND CONVERT(SMALLDATETIME,CHALLANPAIDDATE ,103) BETWEEN @FROMDATE AND @TODATE
   GROUP BY
    CD.CHALLANPAIDDATE, DATENAME(M, DD.DEDUCTEDDATE) + '-' + DATENAME(YY, DD.DEDUCTEDDATE),
    CB.PARENTBRANCHID, CB.BRANCHCODE, CB.BRANCHNAME
   ORDER BY [TDS FOR MONTH]
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREMITTANCEDETAILS_IB')
DROP PROCEDURE USP_TDS_GETREMITTANCEDETAILS_IB
GO
CREATE PROCEDURE [USP_TDS_GETREMITTANCEDETAILS_IB]
  @FROMDATE SMALLDATETIME,
  @ENDDATE SMALLDATETIME,
  @VALUE BIT,
  @BRANCHID INT
  AS
  BEGIN
   IF(@VALUE=0)
   BEGIN
          SELECT @BRANCHID = CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END FROM COMPANYBRANCH WHERE BRANCHID =@BRANCHID
    SELECT (SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID=RP.BRANCHID) BRANCHNAME,
     (SELECT BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID=RP.BRANCHID) BRANCHCODE,
      D.NAME,TS.SECTIONNAME,
      (TR.BGLCODE + ' - ' + TR.DESCRIPTION) NATUREOFSERVICE,
      D.PAN,SUM(PAYMENTMADE)AMOUNTPAID,SUM(TOTALDEDUCTED) TAXDEDUCTED
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
         INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID=DD.DEDUCTIONID
         INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID=DCL.CHALLANID
         INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID
         INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID= DD.REPORTPAYMENTID
         INNER JOIN TDSRATE TR WITH(NOLOCK) ON  TR.BGLCODEID =RP.BGLCODEID
         INNER JOIN DEDUCTEE D WITH(NOLOCK) ON  D.DEDUCTEEID=DD.DEDUCTEEID
         INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON D.DEDUCTEEID = NE.DEDUCTEEID
         INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID
       WHERE DD.SECTIONID NOT IN (5,17) AND RP.PARENTBRANCHID = @BRANCHID  AND DD.DEDUCTEDDATE BETWEEN  CAST(@FROMDATE AS VARCHAR(20))  AND  CAST(@ENDDATE AS VARCHAR(20))
       GROUP BY CB.BRANCHCODE,CB.BRANCHNAME,D.NAME,DD.SECTIONID,D.PAN,CB.BRANCHID,RP.BRANCHID,TS.SECTIONNAME,(TR.BGLCODE + ' - ' + TR.DESCRIPTION)
   END
   ELSE
  BEGIN
   SELECT CB.BRANCHNAME ZONE,(SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID=RP.BRANCHID) BRANCHNAME,
       (SELECT BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID=RP.BRANCHID) BRANCHCODE,
       D.NAME,TS.SECTIONNAME,
       (TR.BGLCODE + ' - ' + TR.DESCRIPTION) AS NATUREOFSERVICE,
       D.PAN,SUM(PAYMENTMADE)AMOUNTPAID,SUM(TOTALDEDUCTED) TAXDEDUCTED
    FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
      INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID=DD.DEDUCTIONID
      INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID=DCL.CHALLANID
      INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID
      INNER JOIN DEDUCTEE D WITH(NOLOCK) ON  D.DEDUCTEEID=DD.DEDUCTEEID
      INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID
      INNER JOIN REPORTPAYMENT RP WITH(NOLOCK)  ON RP.ID= DD.REPORTPAYMENTID
      INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID =RP.BGLCODEID
    WHERE DD.SECTIONID NOT IN (5,17)  AND DD.DEDUCTEDDATE BETWEEN  CAST(@FROMDATE AS VARCHAR(20))  AND  CAST(@ENDDATE AS VARCHAR(20))
    GROUP BY CB.BRANCHCODE,CB.BRANCHNAME,D.NAME,TS.SECTIONNAME,D.PAN,CB.BRANCHID,RP.BRANCHID,(TR.BGLCODE + ' - ' + TR.DESCRIPTION)
  END
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetRemittances')
DROP PROCEDURE USP_TDS_GetRemittances
GO
CREATE PROCEDURE USP_TDS_GetRemittances
AS
  BEGIN
	 SELECT ID, PARTICULARS FROM REMITTANCES WHERE ISAPPLICABLE = 1
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREMITTINGBANK')
DROP PROCEDURE USP_TDS_GETREMITTINGBANK
GO
CREATE PROCEDURE [USP_TDS_GETREMITTINGBANK]
AS
 BEGIN
  SELECT BANKID,BANKNAME,BRANCHNAME,BSRCODE,0 AS ISUSED FROM REMITTINGBANK WITH(NOLOCK)  ORDER BY BSRCODE;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREMITTINGBANKCOUNT')
DROP PROCEDURE USP_TDS_GETREMITTINGBANKCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETREMITTINGBANKCOUNT]
@BANKNAME VARCHAR(100),
@BSRCODE VARCHAR(7)
AS
	BEGIN
		 DECLARE @QUERY NVARCHAR(MAX)
		 SET @QUERY='SELECT COUNT(BANKID)FROM REMITTINGBANK WITH(NOLOCK) ';
            IF(@BANKNAME<>'')
            BEGIN
				SET @QUERY = @QUERY + ' WHERE BANKNAME LIKE ''%'+@BANKNAME+'%'''
				IF(@BSRCODE<>'')
				BEGIN
				SET @QUERY = @QUERY + ' AND BSRCODE LIKE ''%'+@BSRCODE+'%'''
				END
            END
            ELSE
            BEGIN
				IF(@BSRCODE<>'')
					BEGIN
					SET @QUERY = @QUERY + ' WHERE BSRCODE LIKE ''%'+@BSRCODE+'%'''
					END
            END
            EXEC SP_EXECUTESQL @QUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREMITTINGBANKPAGED')
DROP PROCEDURE USP_TDS_GETREMITTINGBANKPAGED
GO
CREATE PROCEDURE [USP_TDS_GETREMITTINGBANKPAGED]
  @STARTROW INT,
  @PAGESIZE INT,
  @BANKNAME VARCHAR(100),
  @BSRCODE VARCHAR(7)
AS
 BEGIN
         DECLARE @REMITTINGBANK TABLE(ID INT IDENTITY(1,1),BANKID INT,BANKNAME VARCHAR(100),
                                BRANCHNAME VARCHAR(100),BSRCODE VARCHAR(7), ISUSED BIT)
   DECLARE @QUERY NVARCHAR(MAX)
            SET @QUERY='SELECT BANKID,BANKNAME,BRANCHNAME,BSRCODE, 0 AS ISUSED FROM REMITTINGBANK WITH(NOLOCK) ';
            IF(@BANKNAME<>'')
            BEGIN
    SET @QUERY = @QUERY + ' WHERE BANKNAME LIKE ''%'+@BANKNAME+'%'''
    IF(@BSRCODE<>'')
    BEGIN
    SET @QUERY = @QUERY + ' AND BSRCODE LIKE ''%'+@BSRCODE+'%'''
    END
            END
            ELSE
            BEGIN
    IF(@BSRCODE<>'')
     BEGIN
     SET @QUERY = @QUERY + ' WHERE BSRCODE LIKE ''%'+@BSRCODE+'%'''
     END
            END
            SET @QUERY = @QUERY + ' ORDER BY BANKNAME'
   /* DETERMINE THE FIRST RECORD AND LAST RECORD */
   DECLARE @FIRSTREC INT, @LASTREC INT
   SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
   SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
   INSERT INTO @REMITTINGBANK EXECUTE SP_EXECUTESQL @QUERY;
   SELECT TOP (@LASTREC-1) *, 0 AS ISUSED FROM @REMITTINGBANK WHERE ID > @FIRSTREC AND ID < @LASTREC
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREPORTDETAILS')
DROP PROCEDURE USP_TDS_GETREPORTDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETREPORTDETAILS]
 @BRANCHID INT,
 @PARENTBRANCHID INT,
 @STARTDATE SMALLDATETIME,
 @ENDDATE SMALLDATETIME,
 @PAID BIT,
 @UNPAID BIT,
 @USERTYPE SMALLINT
 AS
 BEGIN
  IF @USERTYPE=2
  BEGIN
   SET @BRANCHID=@PARENTBRANCHID
  END
  DECLARE @QUERY NVARCHAR(MAX)
    SET @QUERY='SELECT  RP.ID AS SERIALNO,(SELECT BRANCHNAME+''(''+BRANCHCODE+'')'' FROM COMPANYBRANCH WHERE BRANCHID= RP.BRANCHID) AS BRANCHNAME, TS.SECTIONNAME, TR.BGLCODE, RP.PAYMENTAMOUNT, D.NAME, D.PAN,
    CASE WHEN DD.REPORTPAYMENTID IS NULL THEN ''UNPAID'' ELSE ''PAID'' END STATUS, CASE WHEN DD.REPORTPAYMENTID IS NULL THEN NULL ELSE DD.PAYMENTDATE END PAIDDATE
  FROM REPORTPAYMENT RP  WITH(NOLOCK)
  LEFT JOIN
  (SELECT DISTINCT REPORTPAYMENTID,PAYMENTDATE FROM DEDUCTIONDETAIL WITH(NOLOCK)  WHERE BRANCHID ='+CAST(@PARENTBRANCHID AS VARCHAR)+')DD ON DD.REPORTPAYMENTID = RP.ID
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=RP.DEDUCTEEID
  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=RP.SECTIONID
  INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID= RP.BGLCODEID WHERE ( DD.PAYMENTDATE '
   IF @UNPAID=1 AND @PAID<>1
  BEGIN
  SET @QUERY=@QUERY+' IS NULL'
  END
  ELSE IF @PAID=1 AND @UNPAID<>1
   BEGIN
   SET @QUERY=@QUERY +'BETWEEN '''+ CAST(@STARTDATE AS VARCHAR) +''' AND '''+ CAST(@ENDDATE AS VARCHAR)+''')'
   END
   IF @UNPAID=1 AND @PAID=1
    BEGIN
    SET @QUERY=@QUERY +'BETWEEN '''+ CAST(@STARTDATE AS VARCHAR) +''' AND '''+ CAST(@ENDDATE AS VARCHAR)+''''+' OR DD.PAYMENTDATE IS NULL)'
    END
   IF @USERTYPE=3
   BEGIN
    SET @QUERY=@QUERY +' AND RP.BRANCHID='+CAST(@BRANCHID AS VARCHAR)
   END
   ELSE IF(@USERTYPE = 2)
  BEGIN
   SET @QUERY=@QUERY +' AND (RP.BRANCHID ='+CAST(@BRANCHID AS VARCHAR) + ' OR RP.PARENTBRANCHID = '+CAST(@PARENTBRANCHID AS VARCHAR)+ ')'
  END
   IF @PAID=1 AND @UNPAID<>1
    BEGIN
   SET @QUERY=@QUERY +' AND DD.REPORTPAYMENTID IS NOT NULL'
    END
    IF @PAID<>1 AND @UNPAID=1
    BEGIN
   SET @QUERY=@QUERY +' AND DD.REPORTPAYMENTID IS NULL )'
    END
    EXEC SP_EXECUTESQL @QUERY
     END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREQUIREDAMOUNT')
DROP PROCEDURE USP_TDS_GETREQUIREDAMOUNT
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETREQUIREDAMOUNT]
@MONTHID INT,
@CLIENTID INT
AS
	BEGIN
	CREATE TABLE #TEMP(FORMTYPE VARCHAR(10),BRANCHID INT, DEDTOTAL NUMERIC(17,2), DEDCOUNT INT)
	CREATE TABLE #UNLINKED(DEDUCTIONID INT)
	SELECT DD.DEDUCTIONID, DD.FORMID, DD.ENTRYTYPE, DD.SECTIONID, DD.TRANSSTATUS 
	INTO #DEDTEMP
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) 
			ON D.DEDUCTEEID = DD.DEDUCTEEID
	WHERE TOTALDEDUCTED > 0 AND MONTH(DEDUCTEDDATE) = @MONTHID 
		AND D.PAN LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) 
		THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END AND
		NOT EXISTS
		(
		SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
		)
	IF(@CLIENTID = 11)
		BEGIN
			INSERT INTO #UNLINKED 
			SELECT DEDUCTIONID 
			FROM #DEDTEMP
			WHERE ISNULL(TRANSSTATUS,2) = 2
			EXCEPT
			SELECT DEDUCTIONID 
			FROM #DEDTEMP 
			WHERE ISNULL(TRANSSTATUS,2) = 2 AND FORMID = 2 AND ENTRYTYPE = 1 AND SECTIONID <> 5 
		END	
	ELSE IF(@CLIENTID = 5)
		BEGIN
			INSERT INTO #UNLINKED 
			SELECT DEDUCTIONID
			FROM #DEDTEMP
			WHERE FORMID IN (1, 3)
				OR (FORMID = 2 AND SECTIONID = 5 AND ENTRYTYPE = 4)
				OR (FORMID = 2 AND SECTIONID <> 5 AND ENTRYTYPE <> 1)
		END	
	ELSE
		BEGIN
			INSERT INTO #UNLINKED 
			SELECT DEDUCTIONID 
			FROM #DEDTEMP	
		END
	IF OBJECT_ID('TEMPDB..#DEDTEMP') IS NOT NULL
		DROP TABLE #DEDTEMP	
	IF(@CLIENTID = 1)
		BEGIN
		 INSERT INTO #TEMP
		 SELECT * FROM
		 (
			SELECT '26QVS' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
			FROM DEDUCTIONDETAIL D WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
			WHERE SECTIONID <> 5 AND FORMID = 2 AND ENTRYTYPE = 4
			GROUP BY D.BRANCHID
			UNION
			SELECT '26QV' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
			FROM DEDUCTIONDETAIL D WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
			WHERE SECTIONID <> 5 AND FORMID = 2 AND ENTRYTYPE <> 4
			GROUP BY D.BRANCHID
		)T
		END
	ELSE IF(@CLIENTID = 4)
		BEGIN
			INSERT  INTO #TEMP		
			SELECT '26QV' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
				FROM DEDUCTIONDETAIL D WITH(NOLOCK)
				INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
				WHERE FORMID = 2 AND ENTRYTYPE <> 4
				GROUP BY D.BRANCHID
		END
	ELSE
		BEGIN
			INSERT  INTO #TEMP		
			SELECT '26QV' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
				FROM DEDUCTIONDETAIL D WITH(NOLOCK)
				INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
				WHERE SECTIONID <> 5 AND FORMID = 2 AND ENTRYTYPE <> 4
				GROUP BY D.BRANCHID
		END
	SELECT CB1.BRANCHCODE ZONALBRANCHCODE, CB1.BRANCHNAME ZONALBRANCHNAME, CB.BRANCHCODE, CB.BRANCHNAME, DD.FORMTYPE, 'C'+DD.FORMTYPE AS FORMTYPECOUNT,
	DD.DEDTOTAL, DD.DEDCOUNT
	INTO #REQDATA
	FROM 
	(
		SELECT '24Q' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
		FROM DEDUCTIONDETAIL D WITH(NOLOCK)
		INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
		WHERE FORMID = 1
		GROUP BY D.BRANCHID
		UNION
		SELECT '26QI' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
		FROM DEDUCTIONDETAIL D WITH(NOLOCK)
		INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
		WHERE SECTIONID = 5 AND ENTRYTYPE = 4
		GROUP BY D.BRANCHID
		UNION
		SELECT FORMTYPE, BRANCHID, DEDTOTAL, DEDCOUNT FROM #TEMP
		UNION 
		SELECT '27Q' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
		FROM DEDUCTIONDETAIL D WITH(NOLOCK)
		INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
		WHERE FORMID = 3
		GROUP BY D.BRANCHID
	) DD
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID 
	INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON CB.PARENTBRANCHID = CB1.BRANCHID
	IF(@CLIENTID = 1)
		BEGIN
			SELECT ROW_NUMBER()OVER (ORDER BY BRANCHCODE) SLNO, BRANCHCODE, BRANCHNAME, 
				ISNULL([24Q],0) '24Q',  ISNULL([26QI],0) '26QI',  ISNULL([26QV],0) '26QV', ISNULL([26QVS],0) '26QVS', ISNULL([27Q],0) '27Q'
			INTO #VIEWDATA
			FROM #REQDATA
			PIVOT (MAX(DEDTOTAL) FOR FORMTYPE IN ([24Q],[26QI],[26QV],[27Q],[26QVS])) AS DV
			ORDER BY BRANCHCODE 
		END
	ELSE IF(@CLIENTID = 8)
		BEGIN
			SELECT ROW_NUMBER()OVER (ORDER BY BRANCHCODE) SLNO, ZONALBRANCHCODE, ZONALBRANCHNAME, BRANCHCODE, BRANCHNAME, 
				ISNULL([24Q],0) '24Q',  ISNULL([26QI],0) '26QI',  ISNULL([26QV],0) '26QV', ISNULL([27Q],0) '27Q'
			INTO #VIEWDATA2
			FROM #REQDATA R
			PIVOT (MAX(DEDTOTAL) FOR FORMTYPE IN ([24Q],[26QI],[26QV],[27Q])) AS DV
			ORDER BY ZONALBRANCHCODE 
		END
	ELSE
		BEGIN
			SELECT ROW_NUMBER()OVER (ORDER BY BRANCHCODE) SLNO, BRANCHCODE, BRANCHNAME, 
				ISNULL([24Q],0) '24Q',  ISNULL([26QI],0) '26QI',  ISNULL([26QV],0) '26QV', ISNULL([27Q],0) '27Q',
				ISNULL([C24Q],0) '24QCOUNT',  ISNULL([C26QI],0) '26QICOUNT',  ISNULL([C26QV],0) '26QVCOUNT', ISNULL([C27Q],0) '27QCOUNT'
			INTO #VIEWDATA1
			FROM #REQDATA
			PIVOT (MAX(DEDTOTAL) FOR FORMTYPE IN ([24Q],[26QI],[26QV],[27Q])) AS DV
			PIVOT (MAX(DEDCOUNT) FOR FORMTYPECOUNT IN ([C24Q],[C26QI],[C26QV],[C27Q])) AS CNT
			ORDER BY BRANCHCODE 
		END
	IF(@CLIENTID = 1)
		SELECT * FROM #VIEWDATA
	ELSE IF(@CLIENTID = 8)
		SELECT * FROM #VIEWDATA2
	ELSE
		SELECT * FROM #VIEWDATA1
	DROP TABLE #TEMP
	DROP TABLE #UNLINKED
	DROP TABLE #REQDATA
	IF OBJECT_ID('TEMPDB..#VIEWDATA') IS NOT NULL
		DROP TABLE #VIEWDATA
	IF OBJECT_ID('TEMPDB..#VIEWDATA2') IS NOT NULL
		DROP TABLE #VIEWDATA2
	IF OBJECT_ID('TEMPDB..#VIEWDATA1') IS NOT NULL
		DROP TABLE #VIEWDATA1
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREQUIREDAMOUNT03')
DROP PROCEDURE USP_TDS_GETREQUIREDAMOUNT03
GO
CREATE PROCEDURE USP_TDS_GETREQUIREDAMOUNT03
@MONTHID INT,
@CLIENTID INT
AS
	BEGIN
	CREATE TABLE #TEMP(FORMTYPE VARCHAR(10),BRANCHID INT, DEDTOTAL NUMERIC(17,2))
		SELECT * INTO #UNLINKED FROM
				(
					SELECT DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
					INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
					WHERE MONTH(DEDUCTEDDATE) = @MONTHID AND D.PAN LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END AND
					NOT EXISTS
					(
						SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
					)
				)U
		SELECT CB.BRANCHCODE, CB.BRANCHNAME, DD.FORMTYPE, DD.DEDTOTAL
		INTO #REQDATA
		FROM 
		(
			SELECT '24Q' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL
			FROM DEDUCTIONDETAIL D WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID 
			WHERE FORMID = 1 
			GROUP BY D.BRANCHID
			UNION
			SELECT '26QI' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL
			FROM DEDUCTIONDETAIL D WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
			WHERE FORMID = 2 AND SECTIONID = 5 
			GROUP BY D.BRANCHID
			UNION
			SELECT '26QV' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL
			FROM DEDUCTIONDETAIL D WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
			WHERE FORMID = 2 AND SECTIONID <> 5 
			GROUP BY D.BRANCHID
			UNION 
			SELECT '27Q' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL
			FROM DEDUCTIONDETAIL D WITH(NOLOCK)
			INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
			WHERE FORMID = 3 
			GROUP BY D.BRANCHID
		) DD
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID 
		SELECT ROW_NUMBER()OVER (ORDER BY BRANCHCODE) SLNO, BRANCHCODE, BRANCHNAME, 
			ISNULL([24Q],0) '24Q',  ISNULL([26QI],0) '26QI',  ISNULL([26QV],0) '26QV', ISNULL([27Q],0) '27Q'
		INTO #VIEWDATA
		FROM #REQDATA
		PIVOT (MAX(DEDTOTAL) FOR FORMTYPE IN ([24Q],[26QI],[26QV],[27Q])) AS DV
		ORDER BY BRANCHCODE 
		SELECT * FROM #VIEWDATA
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREQUIREDAMOUNT05')
DROP PROCEDURE USP_TDS_GETREQUIREDAMOUNT05
GO
CREATE PROCEDURE USP_TDS_GETREQUIREDAMOUNT05 
@MONTHID INT,
@CLIENTID INT
AS
	BEGIN
	CREATE TABLE #TEMP(FORMTYPE VARCHAR(10),BRANCHID INT, DEDTOTAL NUMERIC(17,2), DEDCOUNT INT)
	CREATE TABLE #UNLINKED(DEDUCTIONID INT)
	SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,SECTIONID,ENTRYTYPE,EXCLUDEINAC,DEDUCTEDDATE,TOTALDEDUCTED,RTBRANCHID 
	INTO #DEDDET
	FROM DEDUCTIONDETAIL 
	WHERE MONTH(DEDUCTEDDATE) = @MONTHID AND ISNULL(RTBRANCHID,0) <> 0 
	INSERT INTO #UNLINKED 
	SELECT DEDUCTIONID 
	FROM #DEDDET DD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
	WHERE TOTALDEDUCTED > 0 AND MONTH(DEDUCTEDDATE) = @MONTHID 
		AND D.PAN LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) THEN '%%' 
						ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END 
		AND NOT EXISTS
					(
						SELECT DEDUCTIONID 
						FROM DEDCHALINK WITH(NOLOCK) 
						WHERE DEDUCTIONID = DD.DEDUCTIONID
					)
	INSERT  INTO #TEMP		
	SELECT '26QV' FORMTYPE, D.RTBRANCHID AS BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
	FROM #DEDDET D WITH(NOLOCK)
	INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
	WHERE SECTIONID <> 5 AND FORMID = 2 AND ENTRYTYPE <> 4
	GROUP BY D.RTBRANCHID
	SELECT CB1.BRANCHCODE ZONALBRANCHCODE, CB1.BRANCHNAME ZONALBRANCHNAME, CB.BRANCHCODE, CB.BRANCHNAME, DD.FORMTYPE, 'C'+DD.FORMTYPE AS FORMTYPECOUNT,
		DD.DEDTOTAL, DD.DEDCOUNT
	INTO #REQDATA
	FROM 
	(
		SELECT '24Q' FORMTYPE, D.RTBRANCHID AS BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
		FROM #DEDDET D WITH(NOLOCK)
		INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
		WHERE FORMID = 1
		GROUP BY D.RTBRANCHID
		UNION
		SELECT '26QI' FORMTYPE, D.RTBRANCHID AS BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
		FROM #DEDDET D WITH(NOLOCK)
		INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
		WHERE SECTIONID = 5 AND ENTRYTYPE = 4
		GROUP BY D.RTBRANCHID
		UNION
		SELECT FORMTYPE, BRANCHID, DEDTOTAL, DEDCOUNT FROM #TEMP
		UNION 
		SELECT '27Q' FORMTYPE, D.RTBRANCHID AS BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL, COUNT(D.DEDUCTIONID) DEDCOUNT
		FROM #DEDDET D WITH(NOLOCK)
		INNER JOIN #UNLINKED UL ON D.DEDUCTIONID = UL.DEDUCTIONID
		WHERE FORMID = 3
		GROUP BY D.RTBRANCHID
	) DD
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID 
	INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON CB.PARENTBRANCHID = CB1.BRANCHID
	SELECT ROW_NUMBER()OVER (ORDER BY BRANCHCODE) SLNO, ZONALBRANCHCODE, ZONALBRANCHNAME, BRANCHCODE, BRANCHNAME, 
		ISNULL([24Q],0) '24Q',  ISNULL([26QI],0) '26QI',  ISNULL([26QV],0) '26QV', ISNULL([27Q],0) '27Q'
	INTO #VIEWDATA2
	FROM #REQDATA R
	PIVOT (MAX(DEDTOTAL) FOR FORMTYPE IN ([24Q],[26QI],[26QV],[27Q])) AS DV
	ORDER BY ZONALBRANCHCODE 
	SELECT * FROM #VIEWDATA2
	DROP TABLE #TEMP
	DROP TABLE #UNLINKED
	DROP TABLE #REQDATA
	IF OBJECT_ID('TEMPDB..#VIEWDATA') IS NOT NULL
		DROP TABLE #VIEWDATA
	IF OBJECT_ID('TEMPDB..#VIEWDATA2') IS NOT NULL
		DROP TABLE #VIEWDATA2
	IF OBJECT_ID('TEMPDB..#VIEWDATA1') IS NOT NULL
		DROP TABLE #VIEWDATA1	
	IF OBJECT_ID('TEMPDB..#DEDDET') IS NOT NULL
		DROP TABLE #DEDDET
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREQUIREDAMOUNTCBI')
DROP PROCEDURE USP_TDS_GETREQUIREDAMOUNTCBI
GO
CREATE PROCEDURE [USP_TDS_GETREQUIREDAMOUNTCBI]
@MONTHID INT,
@CLIENTID INT = 7
AS
BEGIN
	CREATE TABLE #TEMP(BRANCHCODE VARCHAR(10), BRANCHNAME VARCHAR(100), BGLCODE VARCHAR(5), AMOUNT NUMERIC(17,2))
	SELECT * INTO #UNLINKED FROM
					(
						SELECT DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
						INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
						WHERE TOTALDEDUCTED > 0 AND MONTH(DEDUCTEDDATE) = @MONTHID AND D.PAN LIKE CASE WHEN ((D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END AND
						NOT EXISTS
						(
							SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
						)
					)U
	INSERT INTO #TEMP
	SELECT 	CB.BRANCHCODE, CB.BRANCHNAME, TR.BGLCODE, SUM(DD.TOTALDEDUCTED)	
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN #UNLINKED U
			ON DD.DEDUCTIONID = U.DEDUCTIONID INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)
			ON DD.BRANCHID = CB.BRANCHID INNER JOIN TDSRATE TR WITH(NOLOCK)
			ON DD.BGLCODEID = TR.BGLCODEID
			GROUP BY BRANCHCODE, BRANCHNAME, BGLCODE
			ORDER BY BRANCHNAME
SELECT * FROM #TEMP
DROP TABLE #UNLINKED
DROP TABLE #TEMP
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREQUIREDAMOUNTFORREPORT')
DROP PROCEDURE USP_TDS_GETREQUIREDAMOUNTFORREPORT
GO
CREATE PROCEDURE USP_TDS_GETREQUIREDAMOUNTFORREPORT --8
@MONTHID INT
AS
BEGIN
	DECLARE @QUARTER INT;
	IF (@MONTHID = 4 OR @MONTHID = 5 OR @MONTHID = 6)
		SET @QUARTER = 1
	ELSE IF (@MONTHID = 7 OR @MONTHID = 8 OR @MONTHID = 9)
		SET @QUARTER = 2
	ELSE IF (@MONTHID = 10 OR @MONTHID = 11 OR @MONTHID = 12)
		SET @QUARTER = 3
	ELSE 
		SET @QUARTER = 4
	SELECT * INTO #UNLINKED FROM
					(
						SELECT DD.DEDUCTIONID,DD.BRANCHID,DD.FORMID,DD.QUARTER,DD.SECTIONID,ENTRYTYPE,TOTALDEDUCTED FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
						INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
						WHERE MONTH(DEDUCTEDDATE) = @MONTHID AND
						NOT EXISTS
						(
							SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
						)
					)U
			SELECT CB1.BRANCHCODE ZONALBRANCHCODE, CB1.BRANCHNAME ZONALBRANCHNAME, CB.BRANCHCODE, CB.BRANCHNAME, DD.FORMTYPE, DD.DEDTOTAL
			INTO #REQDATA
			FROM 
			(
				SELECT '24Q' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL
				FROM #UNLINKED D
				WHERE FORMID = 1
				GROUP BY D.BRANCHID
				UNION
				SELECT '26QI' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL
				FROM #UNLINKED D
				WHERE SECTIONID = 5 AND ENTRYTYPE = 4
				GROUP BY D.BRANCHID
				UNION	
				SELECT '26QV' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL
				FROM #UNLINKED D
				WHERE NOT(SECTIONID = 5 AND ENTRYTYPE = 4) AND FORMID = 2 
				GROUP BY D.BRANCHID
				UNION 
				SELECT '27Q' FORMTYPE, D.BRANCHID, SUM(TOTALDEDUCTED) DEDTOTAL
				FROM #UNLINKED D
				WHERE FORMID = 3 
				GROUP BY D.BRANCHID
			) DD
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID 
			INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON CB.PARENTBRANCHID = CB1.BRANCHID
			SELECT ROW_NUMBER()OVER (ORDER BY BRANCHCODE) SLNO, BRANCHCODE, BRANCHNAME,ZONALBRANCHNAME,ZONALBRANCHCODE, 
					ISNULL([24Q],0) '24Q',  ISNULL([26QI],0) '26QI',  ISNULL([26QV],0) '26QV', ISNULL([27Q],0) '27Q'
				INTO #VIEWDATA
				FROM #REQDATA
				PIVOT (MAX(DEDTOTAL) FOR FORMTYPE IN ([24Q],[26QI],[26QV],[27Q])) AS DV
				ORDER BY BRANCHCODE 
			SELECT SLNO,VD.BRANCHCODE,VD.BRANCHNAME,ZONALBRANCHNAME,ZONALBRANCHCODE,[24Q],[26QI],[26QV],[27Q],([24Q]+[26QI]+[26QV]+[27Q]) AS BALANCE,ISNULL(D.TAN,'')TAN
			FROM #VIEWDATA VD
			INNER JOIN COMPANYBRANCH CB ON CB.BRANCHCODE = VD.BRANCHCODE
			LEFT JOIN BRANCHDEDUCTORS BD ON BD.BRANCHID = CB.BRANCHID
			LEFT JOIN DEDUCTOR D ON D.DEDUCTORID = BD.DEDUCTORID
			WHERE ISNULL(QUARTER,@QUARTER) = @QUARTER
			ORDER BY SLNO
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREVACKNODETAILS')
DROP PROCEDURE USP_TDS_GETREVACKNODETAILS
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETREVACKNODETAILS]
	@ACKID INT
AS
	BEGIN
		  SELECT ACKNOREV.ACKNOREVID,ACKNOREV.ACKID,ACKNOREV.REVNUM REVNUM,ACKNOREV.REVFILEDDATE REVFILEDDATE
		  FROM   ACKNO WITH(NOLOCK)  INNER JOIN ACKNOREV WITH(NOLOCK)  ON ACKNO.ACKID=ACKNOREV.ACKID AND ACKNO.ACKID=@ACKID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREVACKNOWLEDGEMENTDETAILS')
DROP PROCEDURE USP_TDS_GETREVACKNOWLEDGEMENTDETAILS
GO
CREATE  PROCEDURE [DBO].[USP_TDS_GETREVACKNOWLEDGEMENTDETAILS]
	@ACKID INT
AS
	BEGIN
		  SELECT ACKNOREV.ACKNOREVID,ACKNOREV.ACKID,ACKNOREV.REVNUM REVNUM,ACKNOREV.REVFILEDDATE REVFILEDDATE
		  FROM  ACKNO WITH(NOLOCK) INNER JOIN ACKNOREV WITH(NOLOCK)  ON ACKNO.ACKID=ACKNOREV.ACKID AND ACKNO.ACKID=@ACKID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREVERSALDATA')
DROP PROCEDURE USP_TDS_GETREVERSALDATA
GO
CREATE PROCEDURE USP_TDS_GETREVERSALDATA --'2014-09-23','SUDIP'  
 @REVERSALDATE SMALLDATETIME,  
 @USERNAME VARCHAR(20)  
AS  
BEGIN  
 SELECT DEDUCTIONINFO+'|'+REMARKS+'|' AS DEDINFOWTHREMARK FROM REVERSALREQUEST  
 WHERE CONVERT(VARCHAR,REVERSALDATE,103)=CONVERT(VARCHAR,@REVERSALDATE,103)  
 AND USERNAME=@USERNAME AND ISTEXTGENERATED=0  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREVERSALREQUESTDATA')
DROP PROCEDURE USP_TDS_GETREVERSALREQUESTDATA
GO
CREATE PROCEDURE USP_TDS_GETREVERSALREQUESTDATA  
 @DEDUCTIONID INT  
AS  
BEGIN  
 SELECT DEDUCTIONINFO+'|'+REMARKS+'|' FROM REVERSALREQUEST  
 WHERE DEDUCTIONID=@DEDUCTIONID  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREVISEDACKNOWLEDGEMENTDETAIL')
DROP PROCEDURE USP_TDS_GETREVISEDACKNOWLEDGEMENTDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETREVISEDACKNOWLEDGEMENTDETAIL]
	@REVACKID INT
AS
	BEGIN
		SELECT ACKNOREVID,REVNUM,REVFILEDDATE,ACKID FROM ACKNOREV WITH(NOLOCK)  WHERE ACKNOREVID=@REVACKID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETREVISENUMBER')
DROP PROCEDURE USP_TDS_GETREVISENUMBER
GO
CREATE PROCEDURE [USP_TDS_GETREVISENUMBER]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
  SELECT ACKID, ACKNOREVID, REVNUM,REVFILEDDATE FROM ACKNOREV V WITH(NOLOCK) WHERE ACKID IN(SELECT ACKID FROM ACKNO WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER)
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETROLENAMEBASEDONID')
DROP PROCEDURE USP_TDS_GETROLENAMEBASEDONID
GO
CREATE PROCEDURE [USP_TDS_GETROLENAMEBASEDONID]
(
@ROLEID INT
)
AS
SELECT ROLENAME FROM ROLES WITH(NOLOCK)   WHERE ROLEID=@ROLEID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRPNATOFSERVICE')
DROP PROCEDURE USP_TDS_GETRPNATOFSERVICE
GO
CREATE PROCEDURE [USP_TDS_GETRPNATOFSERVICE]    
@BRANCHID INT,    
@PREFIXTEXT NVARCHAR(MAX),      
@COUNT INT      
AS    
 DECLARE @QUERY NVARCHAR(MAX);      
  SET @QUERY = 'SELECT  TOP ' + CAST(@COUNT AS VARCHAR) + 'ID,ISNULL(NATOFSERVICE,'''')NATOFSERVICE     
       FROM   REPORTPAYMENT  WITH(NOLOCK)      
       WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)  + ' AND NATOFSERVICE LIKE ''%' + @PREFIXTEXT + '%''';      
 EXEC SP_EXECUTESQL @QUERY;
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRRNONOTSETRECORDS')
DROP PROCEDURE USP_TDS_GETRRNONOTSETRECORDS
GO
CREATE PROCEDURE USP_TDS_GETRRNONOTSETRECORDS 
	@BRANCHID INT
AS
BEGIN
	SELECT BRANCHID, FORMID, QUARTER, MAX(REVISENUMBER) REVISENUMBER
	INTO #TEMP1
	FROM CORRECTIONDETAILS WITH(NOLOCK)
	WHERE BRANCHID = @BRANCHID AND DATEDIFF(DAY,FILEDDATE,GETDATE()) > 6 AND ISFINALUPDATE = 1
	GROUP BY BRANCHID, FORMID, QUARTER, FILEDDATE
	SELECT BRANCHID, FORMID, QUARTER, ACKID
	INTO #TEMP2 
	FROM ACKNO WITH(NOLOCK)
	WHERE BRANCHID = @BRANCHID
	GROUP BY BRANCHID, FORMID, QUARTER, ACKID
	SELECT CASE WHEN T1.FORMID = 1 THEN 'FORM24'  
				WHEN T1.FORMID = 2 THEN 'FORM26'  
				WHEN T1.FORMID = 3 THEN 'FORM27'  
				ELSE 'FORM27E' END AS FORM,   
	CASE WHEN T1.QUARTER = 1 THEN 'QUARTER 1'  
		 WHEN T1.QUARTER = 2 THEN 'QUARTER 2'  
		 WHEN T1.QUARTER = 3 THEN 'QUARTER 3'  
		 ELSE 'QUARTER 4' END AS QUARTER, 
	'Provide Revised RRR No.(PRN) and Rev. File Date' AS REMARKS 
	FROM ACKNOREV AR WITH(NOLOCK)
	INNER JOIN #TEMP1 T1 ON AR.REVISENUMBER = T1.REVISENUMBER
	INNER JOIN #TEMP2 T2 ON AR.ACKID = T2.ACKID
	WHERE T1.BRANCHID=@BRANCHID AND AR.REVNUM IS NULL AND AR.REVFILEDDATE IS NULL 
	DROP TABLE #TEMP1
	DROP TABLE #TEMP2
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetRT01Data')
DROP PROCEDURE USP_TDS_GetRT01Data
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetRT01Data] 
@MONTH INT,
@ISINCLUDETTUM BIT,
@ISOLTASGENERATED BIT,
@CLIENTID INT
AS    
BEGIN     
	 DECLARE @FILENO VARCHAR(10),@QUERY NVARCHAR(MAX);   
	 SELECT @FILENO= RIGHT('0000'+ CONVERT(VARCHAR,ISNULL(MAX(RT1FILENO),6000)+ 1),4) FROM DEFAULTSETTINGS    
	 --SET @FILENO = @FILENO+1; 
	 SELECT CD.CHALLANID INTO #CHA FROM CHALLANDETAIL CD WITH(NOLOCK) 
	 INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
	 GROUP BY CD.CHALLANID
	 SET @QUERY=' SELECT CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN ''01'' + CASE WHEN ISCOMPANY = 1 THEN ''0020'' ELSE ''0021'' END + ''01''
												   ELSE ''01'' 
									 END AS RECORDTYPE, 
					CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''1'' THEN ''029'' 							
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''3'' THEN ''032'' 
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN ''013''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''5'' THEN ''024''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''7'' THEN ''028''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''8'' THEN ''034'' 
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''10'' THEN ''031''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''11'' THEN ''033''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''12'' THEN ''036''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''14'' THEN ''035''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''15'' THEN ''632''
							ELSE ''029'' 
					 END AS BANKCODE,
					CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''1'' THEN ''0179'' 
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''3'' THEN ''1931'' 
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''4'' THEN ''0191''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''5'' THEN ''2465''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''7'' THEN ''2930''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''8'' THEN ''1101'' 
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''10'' THEN ''0589'' 
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''11'' THEN ''1906''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''12'' THEN ''0743''  
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''14'' THEN ''0218''  
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''15'' THEN ''0396''  
							ELSE ''0179'' 
					END AS BRANCHCODE,
				SUBSTRING(CAST(YEAR(CHALLANPAIDDATE) AS VARCHAR),3,2) AS YEARCODE,    
				RIGHT(CAST(100+MONTH(CHALLANPAIDDATE) AS VARCHAR),2) AS MONTHCODE,RIGHT(CAST(100+DAY(CHALLANPAIDDATE) AS VARCHAR),2) AS DAYCODE,    
				''C'' AS CBFLAG,BANKCHALLANNO AS CHALLANSERIALNO,(D.FINANCIALYEAR+1) AS ASSESSMENTYEAR,CASE WHEN ISCOMPANY=1 THEN ''0020'' ELSE ''0021'' END AS MAJORHEADCODE,    
				''200'' AS MINORHEADCODE,D.TAN,'''' as PAN,D.DEDUCTORNAME,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,    
				RIGHT(CAST(100+(D.STATEID) AS VARCHAR),2) AS STATEID,D.PINCODE,    
				CASE WHEN TS.TAXNAME IN (''4IA'',''4IB'') THEN ''94I'' ELSE TS.TAXNAME END AS NATUREOFPAYMENT,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,
				CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN ''INTE''
						ELSE
							CASE WHEN CD.INTEREST > 0 THEN ''INTE'' 
									ELSE '''' 
							END
				END AS INTEREST,
				 CD.INTEREST AS INTERESTAMOUNT,    
				CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN '''' 
						ELSE
							CASE WHEN (CD.PENALTY + CD.OTHERS) > 0 THEN ''OTHR'' 
									ELSE '''' 
							END
				END AS PENALTY,
				CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN ''OTHR'' 
						ELSE
							CASE WHEN (CD.PENALTY + CD.OTHERS) > 0 THEN '''' 
									ELSE '''' 
							END
				END AS OTHERS,
				 (CD.PENALTY + CD.OTHERS) AS OTHERAMOUNT,
				0 AS AMOUNTOFPAYMENT,	'''' AS RESERVEDAMOUNT1,'''' AS RESERVEDAMOUNT2, 
				ABS(CD.CHALLANTOTAL)  AS TOTALAMOUNT,    
			    CASE WHEN CD.ISCOMPANY=1 THEN ''C''+'''+CAST(@FILENO AS VARCHAR(10))+''' 
					  ELSE  ''I''+'''+CAST(@FILENO AS VARCHAR(10))+''' 
			   END AS RT1FILENUMBER, 
			   ''I'' AS CGTFLAG,CD.CHALLANPAIDDATE AS CHALLANDATE,CD.CHALLANPAIDDATE AS BRANCHCHALLANDATE,             
				CASE WHEN (''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''1'' OR ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''7'') THEN ''722008'' 
						WHEN (''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''3'' OR ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''10'') THEN ''722009''
						WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''5'' THEN ''722005''
						WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''8'' THEN ''722011'' 
						WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''11'' THEN ''722012''
						WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''12'' THEN ''722006''  
						WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''14'' THEN ''722018''  
						WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''15'' THEN ''722044''  
						ELSE '''' 
				END AS ZAOCODE,
				CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN '''' 
							ELSE
								CASE WHEN CD.ISCOMPANY=1 
										THEN ''C'' 
									ELSE  ''I'' 
								 END 
							  + ''' + CAST(@FILENO AS VARCHAR(10)) + ''' 
						END AS NODALFILENO,CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN NULL ELSE CHALLANPAIDDATE END AS NODALCHALLANDATE,
						CB.BRANCHCODE AS ACTUALBRANCHCODE,'''' AS ACCOUNTNO,CD.CHALLANID,S.STATEABBR   
						   FROM CHALLANDETAIL CD WITH (NOLOCK) 
						   INNER JOIN BRANCHDEDUCTORS BD WITH (NOLOCK) ON CD.BRANCHID=BD.BRANCHID AND CD.QUARTER=BD.QUARTER    
									  INNER JOIN DEDUCTOR D WITH (NOLOCK) ON BD.DEDUCTORID=D.DEDUCTORID
									  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID     
									  INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON CD.SECTIONID=TS.SECTIONID   
									  INNER JOIN #CHA DCL ON CD.CHALLANID = DCL.CHALLANID  
									  INNER JOIN STATEMASTER S ON S.STATEID = D.STATEID         
									WHERE  CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0'                                                                    
			IF(@ISOLTASGENERATED=1)
					SET @QUERY=@QUERY+' AND ISTTUMINCLUDED=1' 
			 ELSE IF(@ISINCLUDETTUM=1)
					 SET @QUERY=@QUERY+' AND CD.BANKCHALLANNO IS NULL AND CD.CHALLANPAIDDATE IS NULL' 
			--						   PRINT @QUERY
			 EXEC SP_EXECUTESQL @QUERY                                     
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetRT01Data02')
DROP PROCEDURE USP_TDS_GetRT01Data02
GO
CREATE PROCEDURE [USP_TDS_GetRT01Data02]
@MONTH INT,
@ISINCLUDETTUM BIT,
@ISOLTASGENERATED BIT
AS    
BEGIN 
	DECLARE @FILENO BIGINT    
	SELECT @FILENO=ISNULL(MAX(RTFILENO),9001) FROM CHALLANDETAIL
	SET @FILENO=@FILENO+1; 
	UPDATE DEFAULTSETTINGS SET RT1FILENO = @FILENO
	DECLARE @STRFILENO VARCHAR(4)
	SELECT @STRFILENO = RIGHT('0000' + CAST(RT1FILENO AS VARCHAR), 4) FROM DEFAULTSETTINGS
 DECLARE @QUERY NVARCHAR(MAX)
 SET @QUERY='
 SELECT DISTINCT ''01'' AS RECORDTYPE,''026'' AS BANKCODE,''1632'' AS BRANCHCODE,SUBSTRING(CAST(YEAR(CHALLANPAIDDATE) AS VARCHAR),3,2) AS YEARCODE,    
            RIGHT(CAST(100+MONTH(CHALLANPAIDDATE) AS VARCHAR),2) AS MONTHCODE,RIGHT(CAST(100+DAY(CHALLANPAIDDATE) AS VARCHAR),2) AS DAYCODE,    
            ''C'' AS CBFLAG,BANKCHALLANNO AS CHALLANSERIALNO,(D.FINANCIALYEAR+1) AS ASSESSMENTYEAR,CASE WHEN ISCOMPANY=1 THEN ''0020'' ELSE ''0021'' END AS MAJORHEADCODE,    
            ''200'' AS MINORHEADCODE,D.TAN,'''' as PAN,D.DEDUCTORNAME,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,    
            RIGHT(CAST(100+(D.STATEID) AS VARCHAR),2) AS STATEID,D.PINCODE,    
            CASE WHEN TS.TAXNAME IN (''4IA'',''4IB'') THEN ''94I'' ELSE TS.TAXNAME END AS NATUREOFPAYMENT,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CASE WHEN CD.INTEREST>0 THEN ''INTE'' ELSE '''' END AS INTEREST,CD.INTEREST AS INTERESTAMOUNT,    
            CASE WHEN (CD.PENALTY+CD.OTHERS)>0 THEN ''OTHR'' ELSE '''' END AS PENALTY,(CD.PENALTY+CD.OTHERS) AS OTHERAMOUNT,'''' AS OTHERS,0 AS AMOUNTOFPAYMENT,    
            '''' AS RESERVEDAMOUNT1,'''' AS RESERVEDAMOUNT2,ABS(CD.CHALLANTOTAL) AS TOTALAMOUNT,    
           CASE WHEN CD.ISCOMPANY=1 THEN ''C''+'''+ @STRFILENO +''' 
           ELSE  ''I''+'''+ @STRFILENO +''' END  AS RT1FILENUMBER,    
            ''I'' AS CGTFLAG,CD.CHALLANPAIDDATE AS CHALLANDATE,CD.CHALLANPAIDDATE AS BRANCHCHALLANDATE,             
            '''' AS ZAOCODE,'''' AS NODALFILENO,'''' NODALCHALLANDATE    
                       FROM CHALLANDETAIL CD WITH(NOLOCK)   INNER JOIN BRANCHDEDUCTORS BD   ON CD.BRANCHID=BD.BRANCHID AND CD.QUARTER=BD.QUARTER    
                                  INNER JOIN DEDUCTOR D WITH(NOLOCK)   ON BD.DEDUCTORID=D.DEDUCTORID     
                                  INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON CD.SECTIONID=TS.SECTIONID   
                                  INNER JOIN DEDCHALINK DCL WITH(NOLOCK)  ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID     
                                  WHERE  CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0'                                                                    
                                   IF(@ISOLTASGENERATED=1)
                                   SET @QUERY=@QUERY+' AND ISTTUMINCLUDED=0' 
                                   ELSE IF(@ISINCLUDETTUM=1)
                                   SET @QUERY=@QUERY+' AND CD.BANKCHALLANNO IS NULL AND CD.CHALLANPAIDDATE IS NULL' 
                                   --PRINT @QUERY
                                   EXEC SP_EXECUTESQL @QUERY                                  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetRT01DataAB')
DROP PROCEDURE USP_TDS_GetRT01DataAB
GO
CREATE PROCEDURE USP_TDS_GetRT01DataAB 
@MONTH INT,
@ISINCLUDETTUM BIT,
@ISOLTASGENERATED BIT,
@CLIENTID INT,
@STAFFBRANCHCODE VARCHAR(10),
@OPBRANCHCODE VARCHAR(10)
AS    
BEGIN     
	 DECLARE @FILENO VARCHAR(10),@QUERY NVARCHAR(MAX);   
	 SELECT @FILENO= RIGHT('0000'+ CONVERT(VARCHAR,ISNULL(MAX(RT1FILENO),6000)+ 1),4) FROM DEFAULTSETTINGS    
	 --SET @FILENO = @FILENO+1; 
	 DECLARE @QUARTER INT;
	 SELECT @QUARTER = DBO.UDF_TDS_GETQUARTER(@MONTH)
	 DECLARE @FINANCIALYEAR VARCHAR(4);
	 IF @MONTH < 4
		SELECT @FINANCIALYEAR =  CAST(SUBSTRING(DB_NAME(), LEN(DB_NAME()) - 3, 4) + 1 AS VARCHAR)		
	 ELSE
		SELECT @FINANCIALYEAR = CAST(SUBSTRING(DB_NAME(), LEN(DB_NAME()) - 3, 4) AS VARCHAR) 
		SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,ENTRYTYPE,
			   DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
			   INCOMETAX,SURCHARGE,EDUCATIONCESS,RTBRANCHID 
		INTO #DED
		FROM DEDUCTIONDETAIL WITH(NOLOCK)  
		WHERE MONTH(DEDUCTEDDATE) = @MONTH AND QUARTER = @QUARTER 
		SELECT RTBRANCHID,
			   CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
					WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) 
							OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
					WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN '26QVS'
					ELSE '26QV' END AS FORMTYPE,
			SUM(TOTALDEDUCTED) AS AMOUNT
		INTO #AMTDET
		FROM #DED DD WITH(NOLOCK) 
			INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON TS.SECTIONID = DD.SECTIONID 
		WHERE MONTH(DEDUCTEDDATE) = @MONTH AND ISNULL(RTBRANCHID,0) <> 0
		GROUP BY DD.FORMID,RTBRANCHID,
			   CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
					WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) 
							OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
					WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN '26QVS'
					ELSE '26QV' END
		CREATE TABLE #PARKED (ID INT, MONTHYEAR INT, BRANCHID INT, FORMTYPE VARCHAR(5), ACCOUNTNO VARCHAR(20), AMOUNT NUMERIC(13,2))
		SELECT DISTINCT PA.*
		INTO #PARKEDACT 
		FROM PARKEDAMOUNT PA WITH(NOLOCK)
			INNER JOIN #AMTDET AD WITH (NOLOCK) ON AD.RTBRANCHID = PA.BRANCHID AND AD.FORMTYPE = PA.FORMTYPE 
		WHERE PA.AMOUNT >= AD.AMOUNT AND MONTHYEAR = CAST((CAST(@MONTH AS VARCHAR) + @FINANCIALYEAR) AS INT)
		SELECT DISTINCT PA.*
		INTO #ZONEPA
		FROM PARKEDAMOUNT PA WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = PA.BRANCHID
		WHERE MONTHYEAR = CAST((CAST(@MONTH AS VARCHAR) + @FINANCIALYEAR) AS INT) AND FORMTYPE <> '24Q'
			AND ISZORO = 1
		INSERT INTO #PARKED
		SELECT * FROM #PARKEDACT
		UNION
		SELECT TOP 1 ID, MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, 1000000000 AS AMOUNT
		FROM PARKEDAMOUNT WITH(NOLOCK)
		WHERE MONTHYEAR = CAST((CAST(@MONTH AS VARCHAR) + @FINANCIALYEAR) AS INT) AND FORMTYPE = '24Q'
			AND BRANCHID  = (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE = @OPBRANCHCODE)
		UNION
		SELECT TOP 1 ID, MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, 1000000000 AS AMOUNT
		FROM PARKEDAMOUNT WITH(NOLOCK)
		WHERE MONTHYEAR = CAST((CAST(@MONTH AS VARCHAR) + @FINANCIALYEAR) AS INT) AND FORMTYPE = '24Q'
			AND BRANCHID  = (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE = @STAFFBRANCHCODE)
		UNION 
		SELECT * FROM #ZONEPA
		IF OBJECT_ID('TEMPDB..#AMTDET') IS NOT NULL
			DROP TABLE #AMTDET 
		IF OBJECT_ID('TEMPDB..#ZONEPA') IS NOT NULL
			DROP TABLE #ZONEPA 
		SELECT BRANCHID, RTBRANCHID, SUM(TOTALDEDUCTED) AS TOTALDEDUCTED
		INTO #FORM24BRANCHES
		FROM #DED DD WITH(NOLOCK)  
		WHERE FORMID = 1 
			AND ISNULL(RTBRANCHID,0) <> 0
			AND MONTH(DEDUCTEDDATE) = @MONTH
		GROUP BY BRANCHID, RTBRANCHID
		SELECT ID, MONTHYEAR, BRANCHID, RTBRANCHID, 
			BRANCHCODE, FORMTYPE, ACCOUNTNO, TOTALDEDUCTED AS AMOUNT
		INTO #TEMP
		FROM
			( SELECT ID, MONTHYEAR, FB.BRANCHID, PA.BRANCHID AS RTBRANCHID, 
				CB.BRANCHCODE , FORMTYPE, ACCOUNTNO, AMOUNT, TOTALDEDUCTED
			  FROM #FORM24BRANCHES FB
				LEFT JOIN #PARKED PA ON PA.BRANCHID = FB.RTBRANCHID
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = PA.BRANCHID
			  WHERE ISNULL(FORMTYPE, '') = '24Q'
				AND ISNULL(ACCOUNTNO,'') <> ''
				AND AMOUNT >= TOTALDEDUCTED
			) DPA
		UNION
		SELECT ID,MONTHYEAR,
				CASE WHEN ISZORO = 0 THEN CB.PARENTBRANCHID ELSE CB.BRANCHID END AS BRANCHID,
			PA.BRANCHID AS RTBRANCHID, CB.BRANCHCODE,
			FORMTYPE, ACCOUNTNO, AMOUNT 
		FROM #PARKED PA WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = PA.BRANCHID 
		WHERE ISNULL(FORMTYPE, '') <> ''
			AND ISNULL(FORMTYPE, '') <> '24Q'
			AND ISNULL(ACCOUNTNO,'') <> ''
		SELECT DISTINCT *
		INTO #ZONEPADET 
		FROM #TEMP 
		WHERE  BRANCHID = RTBRANCHID
		SELECT TP.ID,TP.MONTHYEAR,TP.BRANCHID,TP.RTBRANCHID,
			TP.BRANCHCODE,TP.FORMTYPE,ZP.ACCOUNTNO,TP.AMOUNT
		INTO #PARKEDAMOUNT
		FROM #TEMP TP
		INNER JOIN #ZONEPADET ZP ON ZP.BRANCHID = TP.BRANCHID AND ZP.FORMTYPE = TP.FORMTYPE
		IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
			DROP TABLE #TEMP  
		IF OBJECT_ID('TEMPDB..#FORM24BRANCHES') IS NOT NULL
			DROP TABLE #FORM24BRANCHES 
		IF OBJECT_ID('TEMPDB..#TEMPPARKED') IS NOT NULL
			DROP TABLE #TEMPPARKED  
		IF OBJECT_ID('TEMPDB..#PARKED') IS NOT NULL
			DROP TABLE #PARKED  
		IF OBJECT_ID('TEMPDB..#ZONEPADET') IS NOT NULL
			DROP TABLE #ZONEPADET 
	 SET @QUERY=' SELECT DISTINCT CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN ''01'' + CASE WHEN ISCOMPANY = 1 THEN ''0020'' ELSE ''0021'' END + ''01''
												   ELSE ''01'' 
									 END AS RECORDTYPE, 
					CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''1'' THEN ''029'' 							
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''3'' THEN ''032'' 
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN ''013''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''5'' THEN ''024''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''8'' THEN ''034'' 
							ELSE ''029'' 
					 END AS BANKCODE,
					CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''1'' THEN ''0179'' 
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''3'' THEN ''1931'' 
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''4'' THEN ''0191''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''5'' THEN ''2465''
							WHEN ''' + CAST(@CLIENTID AS VARCHAR) +''' = ''8'' THEN ''1101'' 
							ELSE ''0179'' 
					END AS BRANCHCODE,
				SUBSTRING(CAST(YEAR(CHALLANPAIDDATE) AS VARCHAR),3,2) AS YEARCODE,    
				RIGHT(CAST(100+MONTH(CHALLANPAIDDATE) AS VARCHAR),2) AS MONTHCODE,RIGHT(CAST(100+DAY(CHALLANPAIDDATE) AS VARCHAR),2) AS DAYCODE,    
				''C'' AS CBFLAG,BANKCHALLANNO AS CHALLANSERIALNO,(D.FINANCIALYEAR+1) AS ASSESSMENTYEAR,CASE WHEN ISCOMPANY=1 THEN ''0020'' ELSE ''0021'' END AS MAJORHEADCODE,    
				''200'' AS MINORHEADCODE,D.TAN,'''' as PAN,'+'''ANDHRA BANK'''+'DEDUCTORNAME,D.ADDRESS1,D.ADDRESS2,D.ADDRESS3,D.ADDRESS4,D.ADDRESS5,    
				SC.EPAYSTATE AS STATEID,D.PINCODE,    
				CASE WHEN TS.TAXNAME IN (''4IA'',''4IB'') THEN ''94I'' ELSE TS.TAXNAME END AS NATUREOFPAYMENT,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,
				CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN ''INTE''
						ELSE
							CASE WHEN CD.INTEREST > 0 THEN ''INTE'' 
									ELSE '''' 
							END
				END AS INTEREST,
				 CD.INTEREST AS INTERESTAMOUNT,    
				CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN '''' 
						ELSE
							CASE WHEN (CD.PENALTY + CD.OTHERS) > 0 THEN ''OTHR'' 
									ELSE '''' 
							END
				END AS PENALTY,
				CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN ''OTHR'' 
						ELSE
							CASE WHEN (CD.PENALTY + CD.OTHERS) > 0 THEN '''' 
									ELSE '''' 
							END
				END AS OTHERS,
				 (CD.PENALTY + CD.OTHERS) AS OTHERAMOUNT,
				'''' AS OTHERS, 
				0 AS AMOUNTOFPAYMENT,	'''' AS RESERVEDAMOUNT1,'''' AS RESERVEDAMOUNT2, 
				ABS(CD.CHALLANTOTAL)  AS TOTALAMOUNT,    
			    CASE WHEN CD.ISCOMPANY=1 THEN ''C''+'''+CAST(@FILENO AS VARCHAR(10))+''' 
					  ELSE  ''I''+'''+CAST(@FILENO AS VARCHAR(10))+''' 
			   END AS RT1FILENUMBER, 
			   ''I'' AS CGTFLAG,CD.CHALLANPAIDDATE AS CHALLANDATE,CD.CHALLANPAIDDATE AS BRANCHCHALLANDATE,             
				CASE WHEN (''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''1'' OR ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''7'') THEN ''722008'' 
						WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''3'' THEN ''722009''
						WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''5'' THEN ''722005''
						WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''8'' THEN ''722011'' 
						ELSE '''' 
				END AS ZAOCODE,
				CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN '''' 
							ELSE
								CASE WHEN CD.ISCOMPANY=1 
										THEN ''C'' 
									ELSE  ''I'' 
								 END 
							  + ''' + CAST(@FILENO AS VARCHAR(10)) + ''' 
						END AS NODALFILENO,CASE WHEN ''' + CAST(@CLIENTID AS VARCHAR) + ''' = ''4'' THEN NULL ELSE CHALLANPAIDDATE END AS NODALCHALLANDATE,
						CB.BRANCHCODE AS ACTUALBRANCHCODE,
						 PA.ACCOUNTNO,CD.CHALLANID,SC.STATEABBR       
				   FROM CHALLANDETAIL CD WITH (NOLOCK) 
							  INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CD.BRANCHID=BD.BRANCHID AND CD.QUARTER=BD.QUARTER    
							  INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID=D.DEDUCTORID
							  INNER JOIN STATEMASTER SC WITH(NOLOCK) ON D.STATEID = SC.STATEID
							  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID     
							  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID=TS.SECTIONID   
							  INNER JOIN 
								(
									SELECT CD.BRANCHID, CD.CHALLANID, (CAST(MONTH(DEDUCTEDDATE) AS VARCHAR)+CAST(YEAR(DEDUCTEDDATE)AS VARCHAR)) AS MONTHYEAR, 
										   CASE WHEN DD.FORMID = 1 THEN ''24Q''
												WHEN DD.FORMID = 3 THEN ''27Q'' 
												WHEN (DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID = 5) THEN ''26QI''
												ELSE ''26QV'' END AS FORMTYPE 
									FROM CHALLANDETAIL CD WITH(NOLOCK) 
												INNER JOIN DEDCHALINK DCL WITH(NOLOCK)  ON CD.CHALLANID = DCL.CHALLANID
												INNER JOIN #DED DD WITH(NOLOCK)  ON DD.DEDUCTIONID = DCL.DEDUCTIONID
									WHERE ISAUTOGENERATED = 1 AND ISOLTASINCLUDED = 0 --AND MONTH(DEDUCTEDDATE) = '+ CAST(@MONTH AS VARCHAR)+ ' 
								    GROUP BY CD.BRANCHID,CD.CHALLANID,(CAST(MONTH(DEDUCTEDDATE) AS VARCHAR)+CAST(YEAR(DEDUCTEDDATE)AS VARCHAR)),
										   CASE WHEN DD.FORMID = 1 THEN ''24Q'' 
												WHEN DD.FORMID = 3 THEN ''27Q'' 
												WHEN (DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID = 5) THEN ''26QI''
												ELSE ''26QV'' END
								)DCL
								ON CD.CHALLANID = DCL.CHALLANID
								INNER JOIN #PARKEDAMOUNT PA ON PA.BRANCHID = DCL.BRANCHID AND PA.FORMTYPE = DCL.FORMTYPE AND PA.MONTHYEAR = DCL.MONTHYEAR
					WHERE  CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0'    
			IF(@ISOLTASGENERATED=1)
					SET @QUERY=@QUERY+' AND ISTTUMINCLUDED=1' 
			 ELSE IF(@ISINCLUDETTUM=1)
					 SET @QUERY=@QUERY+' AND CD.BANKCHALLANNO IS NULL AND CD.CHALLANPAIDDATE IS NULL' 
			 SET @QUERY=@QUERY + ' ORDER BY CD.CHALLANID' 
			 EXEC SP_EXECUTESQL @QUERY 
		    IF OBJECT_ID('TEMPDB..#PARKEDAMOUNT') IS NOT NULL
				DROP TABLE #PARKEDAMOUNT
			IF OBJECT_ID('TEMPDB..#DED') IS NOT NULL
				DROP TABLE #DED                                    
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRTBRANCHCODE')
DROP PROCEDURE USP_TDS_GETRTBRANCHCODE
GO
CREATE PROC USP_TDS_GETRTBRANCHCODE
@DEDUCTIONID INT
AS 
	BEGIN
		SELECT CB.BRANCHCODE 
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB
				ON CB.BRANCHID = DD.RTBRANCHID	
		WHERE DEDUCTIONID = @DEDUCTIONID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETRTBRANCHCODEFORCORRECTION')
DROP PROCEDURE USP_TDS_GETRTBRANCHCODEFORCORRECTION
GO
CREATE PROC USP_TDS_GETRTBRANCHCODEFORCORRECTION 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDERETURNID INT,
	@CHAERETURNID INT 
AS   
	BEGIN  
		SELECT CB.BRANCHCODE   
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  
				ON CB.BRANCHID = DD.RTBRANCHID
			INNER JOIN DEDCHALINK DCL WITH(NOLOCK)   
				ON DD.BRANCHID = DCL.BRANCHID AND DD.DEDUCTIONID = DCL.DEDUCTIONID  
			INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)  
				ON CD.BRANCHID = DD.BRANCHID AND  CD.CHALLANID = DCL.CHALLANID  
		WHERE DD.BRANCHID = @BRANCHID 
			AND DD.FORMID = @FORMID 
			AND DD.QUARTER = @QUARTER 
			AND DD.ERETURNID = @DEDERETURNID 
			AND CD.ERETURNID = @CHAERETURNID 
	END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARAYDETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETSALARAYDETAILSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETSALARAYDETAILSCOUNT]
	@BRANCHID INT
AS
	BEGIN
		SELECT COUNT(SALARYDETAILID) FROM SALARYDETAIL WITH(NOLOCK)   WHERE BRANCHID=@BRANCHID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYCOUNTFORERETURN')
DROP PROCEDURE USP_TDS_GETSALARYCOUNTFORERETURN
GO
CREATE PROCEDURE [USP_TDS_GETSALARYCOUNTFORERETURN]
@BRANCHID INT,
@EXCLUDEINVALIDPAN BIT
AS
BEGIN
DECLARE @SQLQUERY NVARCHAR(MAX)
		SET @SQLQUERY='SELECT COUNT(DISTINCT DD.DEDUCTEEID)  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  LEFT JOIN DEDCHALINK DCL WITH(NOLOCK)   ON DD.DEDUCTIONID=DCL.DEDUCTIONID
																					 INNER JOIN DEDUCTEE 	D WITH(NOLOCK)   ON D.DEDUCTEEID=DD.DEDUCTEEID
																  LEFT  JOIN SALARYDETAIL SD WITH(NOLOCK)   ON DD.DEDUCTEEID=SD.DEDUCTEEID AND DD.BRANCHID=SD.BRANCHID
	WHERE  DD.FORMID=1 AND DD.QUARTER=4 AND DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND (DCL.DEDCHALINKID IS NOT NULL OR DD.TOTALDEDUCTED=0) AND SD.DEDUCTEEID IS NULL'
 IF(@EXCLUDEINVALIDPAN=1)
							SET @SQLQUERY=@SQLQUERY+' AND D.PAN<>''PANNOTAVBL'' AND D.PAN<>''PANAPPLIED'' AND D.PAN<>''PANINVALID'''
	EXEC SP_EXECUTESQL @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYDEDUCTIONDETAILS_F007')
DROP PROCEDURE USP_TDS_GETSALARYDEDUCTIONDETAILS_F007
GO
CREATE PROCEDURE [USP_TDS_GETSALARYDEDUCTIONDETAILS_F007]
@BRANCHID INT,
@QUARTER INT
AS
  BEGIN
	SELECT BRANCHID, QUARTER, DEDUCTEEID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, PAYMENTMADE,
                   PAYMENTDATE, DEDUCTEDDATE,INCOMETAXRATE, SURCHARGERATE, EDUCATIONCESSRATE, TAXRATE, NONDEDREASON,
                   ORGINCOMETAX, ORGSURCHARGE, ORGEDUCATIONCESS, ORGTOTALDEDUCTED,
                   ORGPAYMENTMADE, TRANSACTIONSEQNO FROM DEDUCTIONDETAIL WITH(NOLOCK)
    WHERE BRANCHID = @BRANCHID AND FORMID  = 1 AND QUARTER = @QUARTER AND ISNULL(TRANSACTIONSEQNO,'') <>''
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSalaryDetailForPDF')
DROP PROCEDURE USP_TDS_GetSalaryDetailForPDF
GO
CREATE PROCEDURE [USP_TDS_GetSalaryDetailForPDF] 
   @BRANCHID INT    
AS    
BEGIN  
 SELECT SD.SALARYDETAILID,SD.DEDUCTEEID,0 AS COMID,SD.BRANCHID,SD.BASICSALARY,SD.TAXABLEALLOWANCE,SD.PERKACCUNFURNISHED,SD.PERKFURNISHEDVALUE,    
     SD.COSTOFFURNITURE,SD.FURNITURERENTALS,SD.PERQVALUEOFFURNITURE,SD.PERKFURNISHEDTOTAL,SD.RENTPAIDBYEMP,SD.VALUEOFPERQUISITES,    
   SD.CONVEYANCE,SD.REMUNERATION,SD.TAXABLELTC,SD.OTHERBENEFITS,SD.PFINEXCESSOF12PERC,SD.EXCESSINTERESTCREDITED,SD.TOTALPERQUISITE,    
   SD.TAXABLEPERQUISITES,SD.EXEMPTEDALLOWANCES,SD.GROSSSALARY,SD.DEDUCTIONUS16,SD.INCOMEFROMSALARIES,SD.ISOTHERINCOMEDETAILSOPTED,    
   SD.SALARYFROMPREVEMP,SD.INCOMEFROMHOUSEPROPERTY,SD.INCOMEFROMBUSINESS,SD.CAPITALGAINS,SD.INCOMEFROMOTHERSOURCES,SD.OTHERINCOME,    
   SD.GROSSTOTALINCOME,SD.TOTALDEDUNDERCHAPTERVIA,SD.TOTALTAXABLEINCOME,SD.TAXONTOTALINCOME,SD.SURCHARGE,SD.EDUCATIONCESS,    
   SD.TOTALINCOMETAXPAYABLE,SD.RELIEFUS89,SD.NETTAXPAYABLE,SD.TDSITDEDUCTED,SD.TDSSURCHARGEDEDUCTED,SD.EDUCESSDEDUCTED,    
   SD.PREVEMPINCOMETAX,SD.PREVEMPSURCHARGE,SD.PREVEMPCESS,SD.MANUALINCOMETAX,SD.MANUALSURCHARGE,SD.MANUALCESS,SD.TOTALTDS,SD.TAXPAYABLE,    
   ISNULL(ETPT.ET,0) ET,ISNULL(ETPT.PT,0) PT,    
   ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80C,0) GROSSAMOUNT80C,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCC,0) GROSSAMOUNT80CCC,    
   ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD,0) GROSSAMOUNT80CCD,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80D,0) GROSSAMOUNT80D,    
   ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80DD,0) GROSSAMOUNT80DD,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80DDB,0) GROSSAMOUNT80DDB,    
   ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80E,0) GROSSAMOUNT80E,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80G,0) GROSSAMOUNT80G,    
   ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GG,0) GROSSAMOUNT80GG,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80QQB,0) GROSSAMOUNT80QQB,    
   ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80RRB,0) GROSSAMOUNT80RRB,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80U,0) GROSSAMOUNT80U,    
   ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCF,0) GROSSAMOUNT80CCF, ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GGA,0) GROSSAMOUNT80GGA,    
   ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GGC,0) GROSSAMOUNT80GGC, ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80TTA,0) GROSSAMOUNT80TTA,    
    ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCG,0) GROSSAMOUNT80CCG, ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD1,0) GROSSAMOUNT80CCD1,    
   ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD2,0) GROSSAMOUNT80CCD2,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80EE,0) GROSSAMOUNT80EE, ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD1B,0) GROSSAMOUNT80CCD1B,
   ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80C,0) QUALIFYINGAMOUNT80C,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCC,0) QUALIFYINGAMOUNT80CCC,    
   ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD,0) QUALIFYINGAMOUNT80CCD,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80D,0) QUALIFYINGAMOUNT80D,    
   ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80DD,0) QUALIFYINGAMOUNT80DD,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80DDB,0) QUALIFYINGAMOUNT80DDB,    
   ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80E,0) QUALIFYINGAMOUNT80E,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80G,0) QUALIFYINGAMOUNT80G,    
   ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GG,0) QUALIFYINGAMOUNT80GG,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80QQB,0) QUALIFYINGAMOUNT80QQB,    
   ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80RRB,0) QUALIFYINGAMOUNT80RRB,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80U,0) QUALIFYINGAMOUNT80U,    
   ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCF,0) QUALIFYINGAMOUNT80CCF, ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GGA,0) QUALIFYINGAMOUNT80GGA,    
    ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GGC,0) QUALIFYINGAMOUNT80GGC,  ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80TTA,0) QUALIFYINGAMOUNT80TTA,    
    ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCG,0) QUALIFYINGAMOUNT80CCG, ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD1,0) QUALIFYINGAMOUNT80CCD1,    
   ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD2,0) QUALIFYINGAMOUNT80CCD2,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80EE,0) QUALIFYINGAMOUNT80EE,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD1B,0) QUALIFYINGAMOUNT80CCD1B,   
   ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80C,0) DEDUCTIBLEAMOUNT80C,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCC,0) DEDUCTIBLEAMOUNT80CCC,    
   ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD,0) DEDUCTIBLEAMOUNT80CCD,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80D,0) DEDUCTIBLEAMOUNT80D,    
   ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80DD,0) DEDUCTIBLEAMOUNT80DD,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80DDB,0) DEDUCTIBLEAMOUNT80DDB,    
   ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80E,0) DEDUCTIBLEAMOUNT80E,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80G,0) DEDUCTIBLEAMOUNT80G,    
   ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GG,0) DEDUCTIBLEAMOUNT80GG,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80QQB,0) DEDUCTIBLEAMOUNT80QQB,    
   ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80RRB,0) DEDUCTIBLEAMOUNT80RRB,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80U,0) DEDUCTIBLEAMOUNT80U ,    
    ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCF,0) DEDUCTIBLEAMOUNT80CCF,  ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GGA,0) DEDUCTIBLEAMOUNT80GGA,    
     ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GGC,0) DEDUCTIBLEAMOUNT80GGC , ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80TTA,0) DEDUCTIBLEAMOUNT80TTA,    
    ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCG,0) DEDUCTIBLEAMOUNT80CCG, ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD1,0) DEDUCTIBLEAMOUNT80CCD1,    
   ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD2,0) DEDUCTIBLEAMOUNT80CCD2,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80EE,0) DEDUCTIBLEAMOUNT80EE,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD1B,0) DEDUCTIBLEAMOUNT80CCD1B,ISNULL(SD.CREDITUS87A,0) CREDITUS87A    
         FROM SALARYDETAIL SD  WITH(NOLOCK)    
        LEFT JOIN    
          (SELECT SALARYDETAILID, [1] AS ET, [2] AS PT    
        FROM    
        (SELECT SALARYDETAILID, SALARYSECTIONID, AMOUNT    
        FROM SECTION16DETAIL WITH(NOLOCK)   ) ps    
        PIVOT    
        (    
        SUM (AMOUNT)    
        FOR SALARYSECTIONID IN    
        ( [1], [2])    
        ) AS pvt) ETPT    
        ON SD.SALARYDETAILID=ETPT.SALARYDETAILID    
        LEFT JOIN    
        (SELECT SALARYDETAILID, [3] AS GROSSAMOUNT80C, [4] AS GROSSAMOUNT80CCC,[5] AS GROSSAMOUNT80CCD,    
              [6] AS GROSSAMOUNT80D,[7] AS GROSSAMOUNT80DD,[8] AS GROSSAMOUNT80DDB,    
              [9] AS GROSSAMOUNT80E, [10] AS GROSSAMOUNT80G,[11] AS GROSSAMOUNT80GG,    
              [12] AS GROSSAMOUNT80QQB,[13] AS GROSSAMOUNT80RRB,[14] AS GROSSAMOUNT80U,  [15] AS GROSSAMOUNT80CCF,    
             [16] AS GROSSAMOUNT80GGA,[17] AS GROSSAMOUNT80GGC,[18] AS GROSSAMOUNT80TTA,[19] AS GROSSAMOUNT80CCG,    
             [20] AS GROSSAMOUNT80CCD1  ,[21] AS GROSSAMOUNT80CCD2 ,[22] AS GROSSAMOUNT80EE ,[23] AS GROSSAMOUNT80CCD1B        
        FROM    
        (SELECT SALARYDETAILID, SALARYSECTIONID,GROSSAMOUNT    
        FROM CHAPTERVIADETAIL WITH(NOLOCK)  ) ps    
        PIVOT    
        (    
        SUM (GROSSAMOUNT)    
        FOR SALARYSECTIONID IN    
        ( [3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])    
        ) AS pvt) CVIAGROSSAMOUNT    
        ON SD.SALARYDETAILID=CVIAGROSSAMOUNT.SALARYDETAILID    
        LEFT JOIN    
        (SELECT SALARYDETAILID,[3] AS QUALIFYINGAMOUNT80C,[4] AS QUALIFYINGAMOUNT80CCC,[5] AS QUALIFYINGAMOUNT80CCD,    
                [6] AS QUALIFYINGAMOUNT80D,[7] AS QUALIFYINGAMOUNT80DD,[8] AS QUALIFYINGAMOUNT80DDB,    
                [9] AS QUALIFYINGAMOUNT80E, [10] AS QUALIFYINGAMOUNT80G,[11] AS QUALIFYINGAMOUNT80GG,    
                [12] AS QUALIFYINGAMOUNT80QQB,[13] AS QUALIFYINGAMOUNT80RRB,[14] AS QUALIFYINGAMOUNT80U ,[15] AS QUALIFYINGAMOUNT80CCF,    
                [16] AS QUALIFYINGAMOUNT80GGA  ,[17] AS QUALIFYINGAMOUNT80GGC ,[18] AS QUALIFYINGAMOUNT80TTA,[19] AS QUALIFYINGAMOUNT80CCG,    
             [20] AS QUALIFYINGAMOUNT80CCD1  ,[21] AS QUALIFYINGAMOUNT80CCD2,[22] AS QUALIFYINGAMOUNT80EE ,[23] AS QUALIFYINGAMOUNT80CCD1B     
         FROM    
         (SELECT SALARYDETAILID, SALARYSECTIONID,QUALIFYINGAMOUNT    
         FROM CHAPTERVIADETAIL WITH(NOLOCK)   ) ps    
         PIVOT    
         (    
         SUM (QUALIFYINGAMOUNT)    
         FOR SALARYSECTIONID IN    
         ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])    
         ) AS pvt) CVIAQUALIFYINGAMOUNT    
         ON SD.SALARYDETAILID=CVIAQUALIFYINGAMOUNT.SALARYDETAILID    
         LEFT JOIN    
         (SELECT SALARYDETAILID,[3] AS DEDUCTIBLEAMOUNT80C,[4] AS DEDUCTIBLEAMOUNT80CCC,[5] AS DEDUCTIBLEAMOUNT80CCD,    
              [6] AS DEDUCTIBLEAMOUNT80D,[7] AS DEDUCTIBLEAMOUNT80DD,[8] AS DEDUCTIBLEAMOUNT80DDB,    
              [9] AS DEDUCTIBLEAMOUNT80E, [10] AS DEDUCTIBLEAMOUNT80G,[11] AS DEDUCTIBLEAMOUNT80GG,    
              [12] AS DEDUCTIBLEAMOUNT80QQB,[13] AS DEDUCTIBLEAMOUNT80RRB,[14] AS DEDUCTIBLEAMOUNT80U ,[15] AS DEDUCTIBLEAMOUNT80CCF ,    
             [16] AS DEDUCTIBLEAMOUNT80GGA,[17] AS DEDUCTIBLEAMOUNT80GGC, [18] AS DEDUCTIBLEAMOUNT80TTA,[19] AS DEDUCTIBLEAMOUNT80CCG,    
             [20] AS DEDUCTIBLEAMOUNT80CCD1  ,[21] AS DEDUCTIBLEAMOUNT80CCD2,[22] AS DEDUCTIBLEAMOUNT80EE, [23] AS DEDUCTIBLEAMOUNT80CCD1B  
         FROM    
         (SELECT SALARYDETAILID, SALARYSECTIONID,DEDUCTIBLEAMOUNT    
         FROM CHAPTERVIADETAIL WITH(NOLOCK)   ) ps    
         PIVOT    
         (    
         SUM (DEDUCTIBLEAMOUNT)    
         FOR SALARYSECTIONID IN    
         ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])    
         )AS pvt) CVIADEDUCTIBLEAMOUNT    
          ON SD.SALARYDETAILID=CVIADEDUCTIBLEAMOUNT.SALARYDETAILID    
    WHERE SD.BRANCHID=@BRANCHID    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSalaryDetailID')
DROP PROCEDURE USP_TDS_GetSalaryDetailID
GO
CREATE PROCEDURE USP_TDS_GetSalaryDetailID 
@BRANCHID INT  
AS  
 BEGIN    
	SELECT D.REFERENCENO ,SD.SALARYDETAILID, D.NAME, D.PAN,D.PANREFERENCE 
	FROM SALARYDETAIL SD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK)   
			ON SD.DEDUCTEEID = D.DEDUCTEEID AND SD.BRANCHID = D.BRANCHID
	WHERE D.BRANCHID = @BRANCHID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYDETAILS')
DROP PROCEDURE USP_TDS_GETSALARYDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETSALARYDETAILS]
	@BRANCHID INT,
	@DEDUCTEEID INT
AS
	BEGIN
		SELECT SALARYDETAILID,DEDUCTEEID,BRANCHID,BASICSALARY,TAXABLEALLOWANCE,PERKACCUNFURNISHED,PERKFURNISHEDVALUE,
				   COSTOFFURNITURE,FURNITURERENTALS,PERQVALUEOFFURNITURE,PERKFURNISHEDTOTAL,RENTPAIDBYEMP,VALUEOFPERQUISITES,
				   CONVEYANCE,REMUNERATION,TAXABLELTC,OTHERBENEFITS,PFINEXCESSOF12PERC,EXCESSINTERESTCREDITED,TOTALPERQUISITE,
				   TAXABLEPERQUISITES,EXEMPTEDALLOWANCES,GROSSSALARY,DEDUCTIONUS16,INCOMEFROMSALARIES,ISOTHERINCOMEDETAILSOPTED,
				   SALARYFROMPREVEMP,INCOMEFROMHOUSEPROPERTY,INCOMEFROMBUSINESS,CAPITALGAINS,INCOMEFROMOTHERSOURCES,OTHERINCOME,
				   GROSSTOTALINCOME,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,
				   TOTALINCOMETAXPAYABLE,RELIEFUS89,NETTAXPAYABLE,TDSITDEDUCTED,TDSSURCHARGEDEDUCTED,EDUCESSDEDUCTED,PREVEMPINCOMETAX,
				   PREVEMPSURCHARGE,PREVEMPCESS,MANUALINCOMETAX,MANUALSURCHARGE,MANUALCESS,TOTALTDS,TAXPAYABLE,CREDITUS87A, ISNULL(PANLL1,'') PANLL1, 
				   ISNULL(NAMELL1,'') NAMELL1, ISNULL(PANLL2,'') PANLL2, ISNULL(NAMELL2,'') NAMELL2, ISNULL(PANLL3,'') PANLL3, ISNULL(NAMELL3,'') NAMELL3, 
				   ISNULL(PANLL4,'') PANLL4, ISNULL(NAMELL4,'') NAMELL4, ISNULL(PANLEND1,'') PANLEND1, ISNULL(NAMELEND1,'') NAMELEND1, ISNULL(PANLEND2,'') PANLEND2, 
				   ISNULL(NAMELEND2,'') NAMELEND2, ISNULL(PANLEND3,'') PANLEND3, ISNULL(NAMELEND3,'') NAMELEND3, ISNULL(PANLEND4,'') PANLEND4, ISNULL(NAMELEND4,'') NAMELEND4, 
				   ISNULL(SAFNAME,'') SAFNAME, ISNULL(SAFFROMDATE,'') SAFFROMDATE, ISNULL(SAFTODATE,'') SAFTODATE, ISNULL(AMTREPAID,0) AMTREPAID, ISNULL(SAFTAXRATE,0) SAFTAXRATE, 
				   ISNULL(SAFTAXDEDUCTED,0) SAFTAXDEDUCTED
		FROM   SALARYDETAIL  WITH(NOLOCK)  
		WHERE  BRANCHID=@BRANCHID AND DEDUCTEEID=@DEDUCTEEID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYDETAILSBASEDONREFERENCEANDBRANCH')
DROP PROCEDURE USP_TDS_GETSALARYDETAILSBASEDONREFERENCEANDBRANCH
GO
CREATE PROCEDURE USP_TDS_GETSALARYDETAILSBASEDONREFERENCEANDBRANCH  
	@BRANCHCODES NVARCHAR(MAX),      
	@REFERENCENOS NVARCHAR(MAX)    
AS  
  BEGIN  
	SELECT * INTO #TEMPREF FROM  [DBO].[UDF_TDS_SPLITSTRING](@REFERENCENOS,',')      
	SELECT * INTO #TEMPBR FROM  [DBO].[UDF_TDS_SPLITSTRING](@BRANCHCODES,',')
	SELECT D.REFERENCENO, E.SERIALNO, SALARYDETAILID, SD.DEDUCTEEID, SD.BRANCHID
	FROM SALARYDETAIL SD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) 
			ON SD.DEDUCTEEID = D.DEDUCTEEID 			
		INNER JOIN EMPLOYEE E WITH(NOLOCK) 
			ON D.DEDUCTEEID = E.DEDUCTEEID		 
		INNER JOIN #TEMPREF TR WITH(NOLOCK) 
			ON D.REFERENCENO=TR.DATA
		INNER JOIN #TEMPBR TB WITH(NOLOCK) 
			ON SD.BRANCHID=TB.DATA  
			AND D.BRANCHID=TB.DATA
	GROUP BY D.REFERENCENO, E.SERIALNO, SALARYDETAILID, SD.DEDUCTEEID, SD.BRANCHID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYDETAILSFIELDS')
DROP PROCEDURE USP_TDS_GETSALARYDETAILSFIELDS
GO
CREATE PROCEDURE USP_TDS_GETSALARYDETAILSFIELDS --783024,157  
 @DEDUCTEEID INT,  
 @BRANCHID INT  
AS  
BEGIN  
 SELECT ((SELECT SUM(INCOMETAX+SURCHARGE+EDUCATIONCESS) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID)) AS TOTALTDS,  
 ((SELECT SUM(NETTAXPAYABLE)FROM SALARYDETAIL WITH(NOLOCK)   
 WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID)-  
 (SELECT RELIEFUS89 FROM SALARYDETAIL WITH(NOLOCK)   
 WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID)) AS  NETTAXPAYABLE,  
 ((SELECT TOTALINCOMETAXPAYABLE FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID)-(SELECT SUM(INCOMETAX+SURCHARGE+EDUCATIONCESS) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID)) AS TAXPAYABLE,  
 (SELECT SUM(EDUCATIONCESS) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID) AS EDUCESSDEDUCTED,  
 (SELECT SUM(SURCHARGE) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID) AS TDSSURCHARGEDEDUCTED,  
 (SELECT SUM(INCOMETAX) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID) AS TDSITDEDUCTED;  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYDETAILSFORGRID')
DROP PROCEDURE USP_TDS_GETSALARYDETAILSFORGRID
GO
CREATE PROCEDURE [USP_TDS_GETSALARYDETAILSFORGRID]
@BRANCHID INT
AS
BEGIN
	SELECT D.NAME,E.SERIALNO,D.DEDUCTEEID,SD.SALARYDETAILID,SD.BASICSALARY FROM SALARYDETAIL SD WITH(NOLOCK)
	RIGHT JOIN DEDUCTEE D WITH(NOLOCK) ON SD.DEDUCTEEID=D.DEDUCTEEID
	RIGHT JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID=D.DEDUCTEEID
	WHERE D.BRANCHID=@BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYDETAILSFORIMPORT')
DROP PROCEDURE USP_TDS_GETSALARYDETAILSFORIMPORT
GO
CREATE PROCEDURE USP_TDS_GETSALARYDETAILSFORIMPORT   
@BRANCHID INT  
AS  
  BEGIN  
 SELECT D.REFERENCENO, E.SERIALNO, SALARYDETAILID, SD.DEDUCTEEID, SD.BRANCHID, BASICSALARY, TAXABLEALLOWANCE, PERKACCUNFURNISHED, PERKFURNISHEDVALUE,   
      COSTOFFURNITURE, FURNITURERENTALS, PERQVALUEOFFURNITURE, PERKFURNISHEDTOTAL, RENTPAIDBYEMP, VALUEOFPERQUISITES,   
      CONVEYANCE, REMUNERATION, TAXABLELTC, OTHERBENEFITS, PFINEXCESSOF12PERC, EXCESSINTERESTCREDITED, TOTALPERQUISITE,   
      TAXABLEPERQUISITES, EXEMPTEDALLOWANCES, GROSSSALARY, DEDUCTIONUS16, INCOMEFROMSALARIES, ISOTHERINCOMEDETAILSOPTED,   
      SALARYFROMPREVEMP, INCOMEFROMHOUSEPROPERTY, INCOMEFROMBUSINESS, CAPITALGAINS, INCOMEFROMOTHERSOURCES, OTHERINCOME,   
      GROSSTOTALINCOME, TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME, TAXONTOTALINCOME, SURCHARGE, EDUCATIONCESS,  
      TOTALINCOMETAXPAYABLE, RELIEFUS89, NETTAXPAYABLE, TDSITDEDUCTED, TDSSURCHARGEDEDUCTED, EDUCESSDEDUCTED,   
      PREVEMPINCOMETAX, PREVEMPSURCHARGE, PREVEMPCESS, MANUALINCOMETAX, MANUALSURCHARGE, MANUALCESS, TOTALTDS,   
      TAXPAYABLE   
  FROM SALARYDETAIL SD WITH(NOLOCK)  
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON SD.DEDUCTEEID = E.DEDUCTEEID
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
  WHERE SD.BRANCHID = @BRANCHID   
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYDETAILSFORTIN')
DROP PROCEDURE USP_TDS_GETSALARYDETAILSFORTIN
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETSALARYDETAILSFORTIN]    
@BRANCHID INT,      
@DEDUCTEEID NVARCHAR(MAX)      
AS      
 BEGIN      
    DECLARE @QUERY NVARCHAR(MAX);      
    SELECT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@DEDUCTEEID,',')    
    SET @QUERY= 'SELECT D.DEDUCTEEID,ISNULL(D.REFERENCENO,'''')REFERENCENO,FM.CERTNUM, FM.NAME, FM.PAN, FM.ADDRESS1 AS EMPADD1 , FM.ADDRESS2 AS EMPADD2, FM.ADDRESS3 AS EMPADD3,FM.ADDRESS4 AS EMPADD4, FM.ADDRESS5 AS EMPADD5,FM.LASTDATE,      
         CS.ADDRESS1 ,CS.ADDRESS2,CS.ADDRESS3, CS.CITY, CS.PINCODE, ISNULL(SD.BASICSALARY,0)BASICSALARY , ISNULL(SD.TAXABLEPERQUISITES ,0)TAXABLEPERQUISITES,      
         ISNULL(ETPT.ET,0) ET,ISNULL(ETPT.PT,0) PT,ISNULL(SD.TAXABLEALLOWANCE,0)TAXABLEALLOWANCE, ISNULL(SD.SALARYFROMPREVEMP,0) SALARYFROMPREVEMP,      
        ISNULL(SD.INCOMEFROMHOUSEPROPERTY,0)INCOMEFROMHOUSEPROPERTY,ISNULL(SD.INCOMEFROMBUSINESS, 0)INCOMEFROMBUSINESS,ISNULL(SD.CAPITALGAINS,0)CAPITALGAINS,      
        ISNULL(SD.INCOMEFROMOTHERSOURCES,0)INCOMEFROMOTHERSOURCES,ISNULL(SD.OTHERINCOME,0)OTHERINCOME,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80C,0) GROSSAMOUNT80C,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCC,0) GROSSAMOUNT80CCC,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD,0) GROSSAMOUNT80CCD,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80D,0) GROSSAMOUNT80D,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80DD,0) GROSSAMOUNT80DD,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80DDB,0) GROSSAMOUNT80DDB,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80E,0) GROSSAMOUNT80E, ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80EE,0) GROSSAMOUNT80EE,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80G,0) GROSSAMOUNT80G,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GG,0) GROSSAMOUNT80GG,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80QQB,0) GROSSAMOUNT80QQB,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80RRB,0) GROSSAMOUNT80RRB,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80U,0) GROSSAMOUNT80U,      
      ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCF,0) GROSSAMOUNT80CCF,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GGA,0) GROSSAMOUNT80GGA,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GGC,0) GROSSAMOUNT80GGC,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80TTA,0) GROSSAMOUNT80TTA,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCG,0) GROSSAMOUNT80CCG,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD1,0) GROSSAMOUNT80CCD1,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD2,0) GROSSAMOUNT80CCD2,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD1B,0) GROSSAMOUNT80CCD1B,       
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80D,0) QUALIFYINGAMOUNT80D,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80DD,0) QUALIFYINGAMOUNT80DD,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80DDB,0) QUALIFYINGAMOUNT80DDB,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80E,0)QUALIFYINGAMOUNT80E,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80EE,0)QUALIFYINGAMOUNT80EE,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80G,0) QUALIFYINGAMOUNT80G,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GG,0) QUALIFYINGAMOUNT80GG,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80QQB,0) QUALIFYINGAMOUNT80QQB,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80RRB,0) QUALIFYINGAMOUNT80RRB,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80U,0) QUALIFYINGAMOUNT80U,      
      ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCF,0) QUALIFYINGAMOUNT80CCF,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GGA,0) QUALIFYINGAMOUNT80GGA,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GGC,0) QUALIFYINGAMOUNT80GGC,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80TTA,0) QUALIFYINGAMOUNT80TTA,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCG,0) QUALIFYINGAMOUNT80CCG, ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD1B,0) QUALIFYINGAMOUNT80CCD1B,       
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80C,0) DEDUCTIBLEAMOUNT80C,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCC,0) DEDUCTIBLEAMOUNT80CCC,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD,0) DEDUCTIBLEAMOUNT80CCD,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80D,0) DEDUCTIBLEAMOUNT80D,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80DD,0) DEDUCTIBLEAMOUNT80DD,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80DDB,0) DEDUCTIBLEAMOUNT80DDB,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80E,0) DEDUCTIBLEAMOUNT80E, ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80EE,0) DEDUCTIBLEAMOUNT80EE,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80G,0) DEDUCTIBLEAMOUNT80G,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GG,0) DEDUCTIBLEAMOUNT80GG,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80QQB,0) DEDUCTIBLEAMOUNT80QQB,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80RRB,0) DEDUCTIBLEAMOUNT80RRB,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80U,0) DEDUCTIBLEAMOUNT80U,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCF,0) DEDUCTIBLEAMOUNT80CCF,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GGA,0) DEDUCTIBLEAMOUNT80GGA,      
           ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GGC,0) DEDUCTIBLEAMOUNT80GGC,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80TTA,0) DEDUCTIBLEAMOUNT80TTA,      
          ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCG,0) DEDUCTIBLEAMOUNT80CCG,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD1,0) DEDUCTIBLEAMOUNT80CCD1,      
     ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD2,0) DEDUCTIBLEAMOUNT80CCD2, ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD1B,0) DEDUCTIBLEAMOUNT80CCD1B,      
       ISNULL(SD.INCOMEFROMSALARIES,0) INCOMEFROMSALARIES, ISNULL(SD.INCOMEFROMOTHERSOURCES,0)INCOMEFROMOTHERSOURCES,ISNULL( SD.OTHERINCOME,0)OTHERINCOME,      
       ISNULL(SD.TOTALTAXABLEINCOME,0)TOTALTAXABLEINCOME, ISNULL(SD.TAXONTOTALINCOME,0)TAXONTOTALINCOME, ISNULL(SD.RELIEFUS89,0)RELIEFUS89,      
       (ISNULL(SD.PREVEMPINCOMETAX,0)+ ISNULL(SD.PREVEMPSURCHARGE,0)+ISNULL(SD.PREVEMPCESS,0)) PREVDEDUCTED,ISNULL(SD.CREDITUS87A,0) CREDITUS87A,  
       ISNULL(SD.SURCHARGE,0)SURCHARGE,ISNULL(SD.EDUCATIONCESS,0)EDUCATIONCESS,ISNULL(SD.TOTALINCOMETAXPAYABLE,0)TOTALINCOMETAXPAYABLE,ISNULL(SD.NETTAXPAYABLE,0)NETTAXPAYABLE,ISNULL(SD.GROSSTOTALINCOME,0)GROSSTOTALINCOME,ISNULL(SD.MANUALINCOMETAX,0)MANUALINCOMETAX      
    FROM FORM16TINMST FM WITH(NOLOCK)      
    INNER JOIN DEDUCTEE  D WITH(NOLOCK)   ON FM.BRANCHID = D.BRANCHID AND D.PAN = FM.PAN      
    INNER JOIN EMPLOYEE E WITH(NOLOCK)  ON E.DEDUCTEEID = D.DEDUCTEEID      
    LEFT JOIN SALARYDETAIL SD WITH(NOLOCK)   ON SD.DEDUCTEEID = D.DEDUCTEEID      
    LEFT JOIN      
        (SELECT SALARYDETAILID, [1] AS ET, [2] AS PT      
      FROM      
      (SELECT SALARYDETAILID, SALARYSECTIONID, AMOUNT      
      FROM SECTION16DETAIL ) PS      
      PIVOT      
      (      
      SUM (AMOUNT)      
      FOR SALARYSECTIONID IN      
      ( [1], [2])      
      ) AS PVT) ETPT      
      ON SD.SALARYDETAILID=ETPT.SALARYDETAILID      
      LEFT JOIN      
      (SELECT SALARYDETAILID, [3] AS GROSSAMOUNT80C, [4] AS GROSSAMOUNT80CCC,[5] AS GROSSAMOUNT80CCD,      
         [6] AS GROSSAMOUNT80D,[7] AS GROSSAMOUNT80DD,[8] AS GROSSAMOUNT80DDB,      
         [9] AS GROSSAMOUNT80E, [10] AS GROSSAMOUNT80G,[11] AS GROSSAMOUNT80GG,      
         [12] AS GROSSAMOUNT80QQB,[13] AS GROSSAMOUNT80RRB,[14] AS GROSSAMOUNT80U,[15] AS  GROSSAMOUNT80CCF,      
         [16] AS GROSSAMOUNT80GGA,[17] AS GROSSAMOUNT80GGC,[18] AS GROSSAMOUNT80TTA ,[19] AS GROSSAMOUNT80CCG ,      
        [20] AS GROSSAMOUNT80CCD1,[21] AS GROSSAMOUNT80CCD2,[22]  AS  GROSSAMOUNT80EE, [23] AS GROSSAMOUNT80CCD1B     
      FROM      
      (SELECT SALARYDETAILID, SALARYSECTIONID,GROSSAMOUNT      
      FROM CHAPTERVIADETAIL WITH(NOLOCK)  ) PS      
      PIVOT      
      (      
      SUM (GROSSAMOUNT)      
      FOR SALARYSECTIONID IN      
      ( [3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])      
      ) AS PVT) CVIAGROSSAMOUNT      
      ON SD.SALARYDETAILID=CVIAGROSSAMOUNT.SALARYDETAILID      
      LEFT JOIN      
      (SELECT SALARYDETAILID,[3] AS QUALIFYINGAMOUNT80C,[4] AS QUALIFYINGAMOUNT80CCC,[5] AS QUALIFYINGAMOUNT80CCD,      
        [6] AS QUALIFYINGAMOUNT80D,[7] AS QUALIFYINGAMOUNT80DD,[8] AS QUALIFYINGAMOUNT80DDB,      
        [9] AS QUALIFYINGAMOUNT80E, [10] AS QUALIFYINGAMOUNT80G,[11] AS QUALIFYINGAMOUNT80GG,      
        [12] AS QUALIFYINGAMOUNT80QQB,[13] AS QUALIFYINGAMOUNT80RRB,[14] AS QUALIFYINGAMOUNT80U ,[15] AS QUALIFYINGAMOUNT80CCF,      
        [16] AS QUALIFYINGAMOUNT80GGA,[17] AS QUALIFYINGAMOUNT80GGC,[18] AS QUALIFYINGAMOUNT80TTA ,[19] AS QUALIFYINGAMOUNT80CCG ,      
        [20] AS QUALIFYINGAMOUNT80CCD1,[21] AS QUALIFYINGAMOUNT80CCD2 ,[22] AS  QUALIFYINGAMOUNT80EE, [23] AS QUALIFYINGAMOUNT80CCD1B    
       FROM      
       (SELECT SALARYDETAILID, SALARYSECTIONID,QUALIFYINGAMOUNT      
       FROM CHAPTERVIADETAIL WITH(NOLOCK)  ) PS      
       PIVOT      
       (      
       SUM (QUALIFYINGAMOUNT)      
       FOR SALARYSECTIONID IN      
       ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])      
       ) AS PVT) CVIAQUALIFYINGAMOUNT      
       ON SD.SALARYDETAILID=CVIAQUALIFYINGAMOUNT.SALARYDETAILID      
       LEFT JOIN      
       (SELECT SALARYDETAILID,[3] AS DEDUCTIBLEAMOUNT80C,[4] AS DEDUCTIBLEAMOUNT80CCC,[5] AS DEDUCTIBLEAMOUNT80CCD,      
         [6] AS DEDUCTIBLEAMOUNT80D,[7] AS DEDUCTIBLEAMOUNT80DD,[8] AS DEDUCTIBLEAMOUNT80DDB,      
         [9] AS DEDUCTIBLEAMOUNT80E, [10] AS DEDUCTIBLEAMOUNT80G,[11] AS DEDUCTIBLEAMOUNT80GG,      
         [12] AS DEDUCTIBLEAMOUNT80QQB,[13] AS DEDUCTIBLEAMOUNT80RRB,[14] AS DEDUCTIBLEAMOUNT80U ,[15] AS DEDUCTIBLEAMOUNT80CCF,      
          [16] AS DEDUCTIBLEAMOUNT80GGA,[17] AS DEDUCTIBLEAMOUNT80GGC,[18] AS DEDUCTIBLEAMOUNT80TTA ,[19] AS DEDUCTIBLEAMOUNT80CCG ,      
        [20] AS DEDUCTIBLEAMOUNT80CCD1,[21] AS DEDUCTIBLEAMOUNT80CCD2 ,[22] AS DEDUCTIBLEAMOUNT80EE,[23] AS DEDUCTIBLEAMOUNT80CCD1B      
       FROM      
       (SELECT SALARYDETAILID, SALARYSECTIONID,DEDUCTIBLEAMOUNT      
       FROM CHAPTERVIADETAIL WITH(NOLOCK)  ) PS      
       PIVOT      
       (      
       SUM (DEDUCTIBLEAMOUNT)      
       FOR SALARYSECTIONID IN      
       ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])      
       )AS PVT) CVIADEDUCTIBLEAMOUNT      
        ON SD.SALARYDETAILID=CVIADEDUCTIBLEAMOUNT.SALARYDETAILID      
    INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)  ON D.BRANCHID = BD.BRANCHID      
    INNER JOIN DEDUCTOR DR WITH(NOLOCK)  ON DR.DEDUCTORID = BD.DEDUCTORID      
    INNER JOIN      
    (      
     SELECT MAX(DEDUCTORID)DEDUCTORID, BRANCHID FROM BRANCHDEDUCTORS WITH(NOLOCK)      
     WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +'      
     GROUP BY  BRANCHID      
    )B ON B.DEDUCTORID = DR.DEDUCTORID      
    INNER JOIN CITTDS CS ON CS.RCCNAME = LEFT(DR.TAN, 3)      
    INNER JOIN #TEMP T ON T.DATA = D.DEDUCTEEID    
   WHERE D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)    
    EXEC SP_EXECUTESQL @QUERY;      
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSalaryDetailsForTINApp')
DROP PROCEDURE USP_TDS_GetSalaryDetailsForTINApp
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetSalaryDetailsForTINApp] 
@TAN VARCHAR(10),          
@DEDUCTEEID NVARCHAR(MAX),
@DEDUCTOREMAIL VARCHAR(75)     
AS      
 BEGIN      
    DECLARE @QUERY NVARCHAR(MAX);      
    DECLARE @BRANCHID INT;    
  SELECT TOP 1 @BRANCHID=BD.BRANCHID FROM DEDUCTOR D      
   INNER JOIN      
   (      
   SELECT BRANCHID,MAX(DEDUCTORID)DEDUCTORID FROM BRANCHDEDUCTORS      
   GROUP BY BRANCHID      
   )BD      
    ON BD.DEDUCTORID=D.DEDUCTORID      
    WHERE D.TAN=@TAN AND D.EMAILADDRESS =  @DEDUCTOREMAIL  
  IF(@BRANCHID IS NULL)    
   SET @BRANCHID=-1;    
  IF(@DEDUCTEEID ='')    
  SET @DEDUCTEEID='-1';    
     SET @QUERY= 'SELECT D.DEDUCTEEID,D.PAN,ISNULL(D.REFERENCENO,0)REFERENCENO,D.NAME,ISNULL(CB.BRANCHCODE,0001) BRANCHCODE ,      
          ISNULL(SD.BASICSALARY,0)BASICSALARY , ISNULL(SD.TAXABLEPERQUISITES ,0)TAXABLEPERQUISITES,      
         ISNULL(ETPT.ET,0) ET,ISNULL(ETPT.PT,0) PT, ISNULL(SD.TaxableAllowance,0)TaxableAllowance, ISNULL(SD.EXEMPTEDALLOWANCES,0)EXEMPTEDALLOWANCES, ISNULL(SD.SALARYFROMPREVEMP,0) SALARYFROMPREVEMP,      
        ISNULL(SD.IncomeFromHouseProperty,0)IncomeFromHouseProperty,ISNULL(SD.IncomeFromBusiness, 0)IncomeFromBusiness,ISNULL(SD.CapitalGains,0)CapitalGains,      
        ISNULL(SD.INCOMEFROMOTHERSOURCES,0)INCOMEFROMOTHERSOURCES,ISNULL(SD.OtherIncome,0)OtherIncome,     
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80C,0) GROSSAMOUNT80C,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCC,0) GROSSAMOUNT80CCC,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD,0) GROSSAMOUNT80CCD,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80D,0) GROSSAMOUNT80D,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80DD,0) GROSSAMOUNT80DD,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80DDB,0) GROSSAMOUNT80DDB,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80E,0) GROSSAMOUNT80E, ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80EE,0) GROSSAMOUNT80EE,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80G,0) GROSSAMOUNT80G,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GG,0) GROSSAMOUNT80GG,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80QQB,0) GROSSAMOUNT80QQB,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80RRB,0) GROSSAMOUNT80RRB,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80U,0) GROSSAMOUNT80U,      
      ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCF,0) GROSSAMOUNT80CCF,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GGA,0) GROSSAMOUNT80GGA,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80GGC,0) GROSSAMOUNT80GGC,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80TTA,0) GROSSAMOUNT80TTA,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCG,0) GROSSAMOUNT80CCG,ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD1,0) GROSSAMOUNT80CCD1,      
       ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD2,0) GROSSAMOUNT80CCD2, ISNULL(CVIAGROSSAMOUNT.GROSSAMOUNT80CCD1B,0) GROSSAMOUNT80CCD1B,      
        ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80D,0) QUALIFYINGAMOUNT80D,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80DD,0) QUALIFYINGAMOUNT80DD,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80DDB,0) QUALIFYINGAMOUNT80DDB,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80E,0)QUALIFYINGAMOUNT80E,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80EE,0)QUALIFYINGAMOUNT80EE,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80G,0) QUALIFYINGAMOUNT80G,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GG,0) QUALIFYINGAMOUNT80GG,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80QQB,0) QUALIFYINGAMOUNT80QQB,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80RRB,0) QUALIFYINGAMOUNT80RRB,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80U,0) QUALIFYINGAMOUNT80U,      
      ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCF,0) QUALIFYINGAMOUNT80CCF,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GGA,0) QUALIFYINGAMOUNT80GGA,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80GGC,0) QUALIFYINGAMOUNT80GGC,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80TTA,0) QUALIFYINGAMOUNT80TTA,      
       ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCG,0) QUALIFYINGAMOUNT80CCG, ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD1,0) QUALIFYINGAMOUNT80CCD1, ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD2,0) QUALIFYINGAMOUNT80CCD2 ,ISNULL(CVIAQUALIFYINGAMOUNT.QUALIFYINGAMOUNT80CCD1B,0) QUALIFYINGAMOUNT80CCD1B,     
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80C,0) DEDUCTIBLEAMOUNT80C,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCC,0) DEDUCTIBLEAMOUNT80CCC,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD,0) DEDUCTIBLEAMOUNT80CCD,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80D,0) DEDUCTIBLEAMOUNT80D,      
 ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80DD,0) DEDUCTIBLEAMOUNT80DD,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80DDB,0) DEDUCTIBLEAMOUNT80DDB,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80E,0) DEDUCTIBLEAMOUNT80E, ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80EE,0) DEDUCTIBLEAMOUNT80EE,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80G,0) DEDUCTIBLEAMOUNT80G,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GG,0) DEDUCTIBLEAMOUNT80GG,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80QQB,0) DEDUCTIBLEAMOUNT80QQB,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80RRB,0) DEDUCTIBLEAMOUNT80RRB,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80U,0) DEDUCTIBLEAMOUNT80U  ,      
       ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCF,0) DEDUCTIBLEAMOUNT80CCF,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GGA,0) DEDUCTIBLEAMOUNT80GGA,      
           ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80GGC,0) DEDUCTIBLEAMOUNT80GGC,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80TTA,0) DEDUCTIBLEAMOUNT80TTA,      
          ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCG,0) DEDUCTIBLEAMOUNT80CCG,ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD1,0) DEDUCTIBLEAMOUNT80CCD1,      
     ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD2,0) DEDUCTIBLEAMOUNT80CCD2, ISNULL(CVIADEDUCTIBLEAMOUNT.DEDUCTIBLEAMOUNT80CCD1B,0) DEDUCTIBLEAMOUNT80CCD1B,      
       ISNULL(SD.INCOMEFROMSALARIES,0) INCOMEFROMSALARIES, ISNULL(SD.INCOMEFROMOTHERSOURCES,0)INCOMEFROMOTHERSOURCES,ISNULL( SD.OTHERINCOME,0)OTHERINCOME,      
       ISNULL(SD.TOTALTAXABLEINCOME,0)TOTALTAXABLEINCOME, ISNULL(SD.TAXONTOTALINCOME,0)TAXONTOTALINCOME, ISNULL(SD.RELIEFUS89,0)RELIEFUS89,ISNULL(SD.EDUCATIONCESS,0)EDUCATIONCESS,
       (ISNULL(SD.TDSITDEDUCTED,0)+ ISNULL(SD.TDSSURCHARGEDEDUCTED,0)+ISNULL(SD.EDUCESSDEDUCTED,0)) CURRENTTOTALDEDUCTED, (ISNULL(SD.PREVEMPINCOMETAX,0)+ ISNULL(SD.PREVEMPSURCHARGE,0)+ISNULL(SD.PREVEMPCESS,0)) PREVDEDUCTED,ISNULL(SD.CREDITUS87A,0) CREDITUS87A,
       ISNULL(SD.SURCHARGE,0)SURCHARGE,ISNULL(SD.EDUCATIONCESS,0)EDUCATIONCESS,ISNULL(SD.TOTALINCOMETAXPAYABLE,0)TOTALINCOMETAXPAYABLE,ISNULL(SD.NETTAXPAYABLE,0)NETTAXPAYABLE,ISNULL(SD.GROSSTOTALINCOME,0)GROSSTOTALINCOME,ISNULL(SD.MANUALINCOMETAX,0)MANUALINCOMETAX      
 FROM DEDUCTEE D  WITH(NOLOCK)      
    INNER JOIN EMPLOYEE E WITH(NOLOCK)  ON E.DEDUCTEEID = D.DEDUCTEEID
    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = E.WORKINGBRANCHID      
    LEFT JOIN SALARYDETAIL SD WITH(NOLOCK)  ON SD.DEDUCTEEID = D.DEDUCTEEID    
    LEFT JOIN      
        (SELECT SALARYDETAILID, [1] AS ET, [2] AS PT      
      FROM      
      (SELECT SALARYDETAILID, SALARYSECTIONID, AMOUNT      
      FROM SECTION16DETAIL WITH(NOLOCK)  ) ps      
      PIVOT      
      (      
      SUM (AMOUNT)      
      FOR SALARYSECTIONID IN      
      ( [1], [2])      
      ) AS pvt) ETPT      
      ON SD.SALARYDETAILID=ETPT.SALARYDETAILID      
      LEFT JOIN      
      (SELECT SALARYDETAILID, [3] AS GROSSAMOUNT80C, [4] AS GROSSAMOUNT80CCC,[5] AS GROSSAMOUNT80CCD,      
         [6] AS GROSSAMOUNT80D,[7] AS GROSSAMOUNT80DD,[8] AS GROSSAMOUNT80DDB,      
         [9] AS GROSSAMOUNT80E, [10] AS GROSSAMOUNT80G,[11] AS GROSSAMOUNT80GG,      
         [12] AS GROSSAMOUNT80QQB,[13] AS GROSSAMOUNT80RRB,[14] AS GROSSAMOUNT80U,[15] AS  GROSSAMOUNT80CCF,      
         [16] AS GROSSAMOUNT80GGA,[17] AS GROSSAMOUNT80GGC,[18] AS GROSSAMOUNT80TTA ,[19] AS GROSSAMOUNT80CCG ,      
        [20] AS GROSSAMOUNT80CCD1,[21] AS GROSSAMOUNT80CCD2, [22] AS GROSSAMOUNT80EE, [23] AS GROSSAMOUNT80CCD1B     
      FROM      
    (SELECT SALARYDETAILID, SALARYSECTIONID,GROSSAMOUNT      
      FROM CHAPTERVIADETAIL WITH(NOLOCK)  ) ps      
      PIVOT      
      (      
      SUM (GROSSAMOUNT)      
      FOR SALARYSECTIONID IN      
      ( [3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])      
      ) AS pvt) CVIAGROSSAMOUNT      
      ON SD.SALARYDETAILID=CVIAGROSSAMOUNT.SALARYDETAILID      
      LEFT JOIN      
      (SELECT SALARYDETAILID,[3] AS QUALIFYINGAMOUNT80C,[4] AS QUALIFYINGAMOUNT80CCC,[5] AS QUALIFYINGAMOUNT80CCD,      
        [6] AS QUALIFYINGAMOUNT80D,[7] AS QUALIFYINGAMOUNT80DD,[8] AS QUALIFYINGAMOUNT80DDB,      
        [9] AS QUALIFYINGAMOUNT80E, [10] AS QUALIFYINGAMOUNT80G,[11] AS QUALIFYINGAMOUNT80GG,      
        [12] AS QUALIFYINGAMOUNT80QQB,[13] AS QUALIFYINGAMOUNT80RRB,[14] AS QUALIFYINGAMOUNT80U ,[15] AS QUALIFYINGAMOUNT80CCF,      
        [16] AS QUALIFYINGAMOUNT80GGA,[17] AS QUALIFYINGAMOUNT80GGC,[18] AS QUALIFYINGAMOUNT80TTA ,[19] AS QUALIFYINGAMOUNT80CCG ,      
        [20] AS QUALIFYINGAMOUNT80CCD1,[21] AS QUALIFYINGAMOUNT80CCD2,[22] AS QUALIFYINGAMOUNT80EE, [23] AS QUALIFYINGAMOUNT80CCD1B      
       FROM      
       (SELECT SALARYDETAILID, SALARYSECTIONID,QUALIFYINGAMOUNT      
       FROM CHAPTERVIADETAIL WITH(NOLOCK)  ) ps      
       PIVOT      
       (      
       SUM (QUALIFYINGAMOUNT)      
       FOR SALARYSECTIONID IN      
       ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])      
       ) AS pvt) CVIAQUALIFYINGAMOUNT      
       ON SD.SALARYDETAILID=CVIAQUALIFYINGAMOUNT.SALARYDETAILID      
       LEFT JOIN      
       (SELECT SALARYDETAILID,[3] AS DEDUCTIBLEAMOUNT80C,[4] AS DEDUCTIBLEAMOUNT80CCC,[5] AS DEDUCTIBLEAMOUNT80CCD,      
         [6] AS DEDUCTIBLEAMOUNT80D,[7] AS DEDUCTIBLEAMOUNT80DD,[8] AS DEDUCTIBLEAMOUNT80DDB,      
         [9] AS DEDUCTIBLEAMOUNT80E, [10] AS DEDUCTIBLEAMOUNT80G,[11] AS DEDUCTIBLEAMOUNT80GG,      
         [12] AS DEDUCTIBLEAMOUNT80QQB,[13] AS DEDUCTIBLEAMOUNT80RRB,[14] AS DEDUCTIBLEAMOUNT80U,[15] AS DEDUCTIBLEAMOUNT80CCF,      
          [16] AS DEDUCTIBLEAMOUNT80GGA,[17] AS DEDUCTIBLEAMOUNT80GGC,[18] AS DEDUCTIBLEAMOUNT80TTA ,[19] AS DEDUCTIBLEAMOUNT80CCG ,      
        [20] AS DEDUCTIBLEAMOUNT80CCD1,[21] AS DEDUCTIBLEAMOUNT80CCD2,[22] AS DEDUCTIBLEAMOUNT80EE ,[23] AS DEDUCTIBLEAMOUNT80CCD1B     
       FROM      
       (SELECT SALARYDETAILID, SALARYSECTIONID,DEDUCTIBLEAMOUNT      
       FROM CHAPTERVIADETAIL WITH(NOLOCK)  ) ps      
       PIVOT      
       (      
       SUM (DEDUCTIBLEAMOUNT)      
       FOR SALARYSECTIONID IN      
       ([3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23])      
       )AS pvt) CVIADEDUCTIBLEAMOUNT      
        ON SD.SALARYDETAILID=CVIADEDUCTIBLEAMOUNT.SALARYDETAILID      
    INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)  ON D.BRANCHID = BD.BRANCHID      
    INNER JOIN DEDUCTOR DR WITH(NOLOCK)  ON DR.DEDUCTORID = BD.DEDUCTORID      
    INNER JOIN      
    (      
     SELECT MAX(DEDUCTORID)DEDUCTORID, BRANCHID FROM BRANCHDEDUCTORS WITH(NOLOCK)      
     WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +'      
     GROUP BY  BRANCHID      
    )B ON B.DEDUCTORID = DR.DEDUCTORID   
   WHERE  E.WORKINGBRANCHID IS NOT NULL AND D.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) +' AND D.DEDUCTEEID IN (' + CAST(@DEDUCTEEID AS NVARCHAR(MAX)) + ')'      
    EXEC SP_EXECUTESQL @QUERY;      
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYDETAILSPAGED')
DROP PROCEDURE USP_TDS_GETSALARYDETAILSPAGED
GO
CREATE PROCEDURE [USP_TDS_GETSALARYDETAILSPAGED]
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT
AS
	BEGIN
		/* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
		SET NOCOUNT ON
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		WITH TEMPRESULT AS
		(
			SELECT ROW_NUMBER() OVER(ORDER BY SALARYDETAILID) AS ROWNUM,SD.DEDUCTEEID AS ID,
				   D.NAME + '/' + CAST(E.SERIALNO AS VARCHAR(500)) + '/' + CASE WHEN D.PAN = 'PANAPPLIED' OR D.PAN = 'PANAPPLIED' OR D.PAN = 'PANAPPLIED'
																				THEN D.PANREFERENCE ELSE D.PAN END AS DATATODELETE
			FROM   SALARYDETAIL SD WITH(NOLOCK)   INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON SD.DEDUCTEEID = D.DEDUCTEEID
								   INNER JOIN EMPLOYEE E WITH(NOLOCK)  ON SD.DEDUCTEEID = E.DEDUCTEEID
			WHERE  SD.BRANCHID = @BRANCHID
		)
		SELECT TOP (@LASTREC-1) * FROM TEMPRESULT
		WHERE ROWNUM > @FIRSTREC AND ROWNUM < @LASTREC
		/* TURN NOCOUNT BACK OFF */
		SET NOCOUNT OFF
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSalaryHead')
DROP PROCEDURE USP_TDS_GetSalaryHead
GO
CREATE PROCEDURE USP_TDS_GetSalaryHead
@SALARYHEADID INT    
AS    
  BEGIN
	 DECLARE @SQLQUERY NVARCHAR(MAX);  
	 SET @SQLQUERY = 'SELECT SALARYHEADID, SALARYNAME AS SALARYHEAD, EARNING, EXEMPTAMT, BASICPER, DAPERC, 
						     HRAPERC, EPFPERC,INCLUDEUS10, ISNULL(INCLUDEINTAX,0)INCLUDEINTAX, C80CID, STARTINDEX, FIELDLENGTH,ISNULL(ISEDITABLE,0)ISEDITABLE FROM SALARYHEAD WITH (NOLOCK)'
     IF(@SALARYHEADID <> -1)
	  BEGIN 
		SET @SQLQUERY = @SQLQUERY + ' WHERE SALARYHEADID = '+CAST(@SALARYHEADID AS VARCHAR)
      END
      EXEC SP_EXECUTESQL @SQLQUERY;
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSalaryHeadDetail')
DROP PROCEDURE USP_TDS_GetSalaryHeadDetail
GO
CREATE PROCEDURE USP_TDS_GetSalaryHeadDetail
@SALARYHEADID INT,
@COMID INT,
@MONTH INT
AS
 BEGIN
	SELECT ISNULL(SALDETAILID,-1)SALDETAILID, SH.SALARYHEADID, SH.SALARYNAME, SH.EXEMPTAMT, SH.BASICPER, SH.DAPERC, SH.HRAPERC, SH.EPFPERC,
		ISNULL(RECOVERYAMT,0)RECOVERYAMT,ISNULL(GROSSAMT1,0)GROSSAMT1,ISNULL(GROSSAMT2,0)GROSSAMT2,ISNULL(GROSSAMT3,0)GROSSAMT3,
		ISNULL(EARNING,0)EARNING, SH.EXEMPTAMT AS EXEMPTEDAMT,ISNULL(SH.ISEDITABLE ,0)ISEDITABLE
	 FROM SALARYHEAD SH WITH (NOLOCK) 
	 LEFT JOIN 
	 (
		SELECT SALDETAILID,  GROSSAMT1,GROSSAMT2, GROSSAMT3,EXEMPTAMT,RECOVERYAMT, SALARYHEADID FROM SALDETAIL WITH (NOLOCK)  
		WHERE MONTHID = @MONTH AND COMID = @COMID AND SALARYHEADID = @SALARYHEADID
	 )SD ON SD.SALARYHEADID = SH.SALARYHEADID
	 WHERE SH.SALARYHEADID = @SALARYHEADID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYHEADS')
DROP PROCEDURE USP_TDS_GETSALARYHEADS
GO
CREATE PROCEDURE [USP_TDS_GETSALARYHEADS] 
@PAGEINDEX INT,  
@PAGESIZE INT,  
@SALARYHEAD VARCHAR(50),  
@ISEARNING BIT = NULL,  
@AMTFROM NUMERIC(13,2),  
@AMTTO NUMERIC(13,2)  
AS  
  BEGIN  
  DECLARE @SQLQUERY NVARCHAR(MAX);  
     DECLARE @FIRSTREC INT, @LASTREC INT;  
     SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE;  
     SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);  
 SET @SQLQUERY = 'SELECT ROWNUM = ROW_NUMBER() OVER(ORDER BY SALARYHEADID) ,SALARYHEADID, SALARYNAME, EARNING, EXEMPTAMT, BASICPER,  
     DAPERC, HRAPERC, EPFPERC,ISNULL(ABBREVATION,'''') ABBREVATION 
     INTO #SALARYHEAD  
     FROM SALARYHEAD WITH (NOLOCK)'  
 IF(@SALARYHEAD <> '' OR @ISEARNING IS NOT NULL OR @AMTFROM > 0 OR @AMTTO > 0)  
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' WHERE'  
  END  
 IF(@SALARYHEAD <> '')  
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' SALARYNAME LIKE ''%'+(CAST (@SALARYHEAD AS VARCHAR)) + '%'''  
  END  
 IF(@SALARYHEAD <> '' AND @ISEARNING IS NOT NULL)  
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND'  
  END  
 IF(@ISEARNING IS NOT NULL)  
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' EARNING = '+CAST(@ISEARNING AS VARCHAR)  
  END  
 IF(@AMTFROM > 0 OR @AMTTO > 0)  
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND'  
  END  
  IF(@AMTFROM > 0 AND @AMTTO > 0)  
    BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' EXEMPTAMT BETWEEN ' + CAST(@AMTFROM AS VARCHAR) + ' AND ' + CAST(@AMTTO AS VARCHAR)  
    END  
  SET @SQLQUERY = @SQLQUERY + ' SELECT * FROM #SALARYHEAD WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10));  
   EXEC SP_EXECUTESQL @SQLQUERY;  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYHEADSCOUNT')
DROP PROCEDURE USP_TDS_GETSALARYHEADSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETSALARYHEADSCOUNT] 
@SALARYHEAD VARCHAR(50),  
@ISEARNING BIT = NULL,  
@AMTFROM NUMERIC(13,2),  
@AMTTO NUMERIC(13,2)  
AS  
  BEGIN  
	 DECLARE @SQLQUERY NVARCHAR(MAX);  
 SET @SQLQUERY = 'SELECT SALARYHEADID
					INTO #SALARYHEAD 
					FROM SALARYHEAD WITH (NOLOCK)'  
 IF(@SALARYHEAD <> '' OR @ISEARNING IS NOT NULL OR @AMTFROM > 0 OR @AMTTO > 0)  
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' WHERE'  
  END       
 IF(@SALARYHEAD <> '')  
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' SALARYNAME LIKE ''%'+(CAST (@SALARYHEAD AS VARCHAR)) + '%'''  
  END  
 IF(@SALARYHEAD <> '' AND @ISEARNING IS NOT NULL)  
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND'  
  END  
 IF(@ISEARNING IS NOT NULL)  
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' EARNING = '+CAST(@ISEARNING AS VARCHAR)  
  END  
 IF(@AMTFROM > 0 OR @AMTTO > 0)
  BEGIN  
  SET @SQLQUERY = @SQLQUERY + ' AND'  
  END  
  IF(@AMTFROM > 0 AND @AMTTO > 0)  
    BEGIN  
		SET @SQLQUERY = @SQLQUERY + ' EXEMPTAMT BETWEEN ' + CAST(@AMTFROM AS VARCHAR) + ' AND ' + CAST(@AMTTO AS VARCHAR)  
    END  
  SET @SQLQUERY = @SQLQUERY + ' SELECT COUNT(SALARYHEADID) FROM #SALARYHEAD'
   EXEC SP_EXECUTESQL @SQLQUERY;      
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYHEADSFORPAYFILE')
DROP PROCEDURE USP_TDS_GETSALARYHEADSFORPAYFILE
GO
CREATE PROCEDURE [USP_TDS_GETSALARYHEADSFORPAYFILE]
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON
SELECT SALARYHEADID,SALARYNAME,EXEMPTAMT,ISNULL(ABBREVATION,'')ABBREVATION,ISNULL(C80CID,0)C80CID, ISNULL(STARTINDEX,0)STARTINDEX,ISNULL(FIELDLENGTH,0)FIELDLENGTH FROM SALARYHEAD
--WHERE ISNULL(STARTINDEX,0)>0 AND ISNULL(FIELDLENGTH,0)>0
SET NOCOUNT OFF
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSalaryNotFoundList')
DROP PROCEDURE USP_TDS_GetSalaryNotFoundList
GO
CREATE PROCEDURE USP_TDS_GetSalaryNotFoundList
@BRANCHID INT
AS
	BEGIN
		SELECT E.SERIALNO,D.NAME,D.PAN FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
		LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
		INNER JOIN DEDUCTEE	D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID
		INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
		LEFT JOIN SALARYDETAIL SD WITH(NOLOCK)   ON DD.DEDUCTEEID=SD.DEDUCTEEID AND DD.BRANCHID=SD.BRANCHID
		WHERE  DD.FORMID=1 AND DD.QUARTER=4 AND DD.BRANCHID=@BRANCHID AND (DCL.DEDCHALINKID IS NOT NULL OR DD.TOTALDEDUCTED=0) AND SD.DEDUCTEEID IS NULL
		GROUP BY E.SERIALNO,D.NAME,D.PAN
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSALARYSECTIONS')
DROP PROCEDURE USP_TDS_GETSALARYSECTIONS
GO
CREATE PROCEDURE [USP_TDS_GETSALARYSECTIONS]
AS
 BEGIN
  SELECT SALARYSECTIONID,CATEGORY,SECTIONNAME FROM   SALARYSECTIONS WITH(NOLOCK)   ;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSalDetail')
DROP PROCEDURE USP_TDS_GetSalDetail
GO
CREATE PROCEDURE USP_TDS_GetSalDetail
@MONTH INT,              
@COMID INT,          
@BRANCHID INT                
AS                
  BEGIN         
    DECLARE @AMT NUMERIC(13,2), @RENTAMT NUMERIC(13,2), @HRAAMT NUMERIC(13,2), @HRAEXEMPTAMT NUMERIC(13,2), @NETAMT NUMERIC(13,2),@TOTAMT NUMERIC(13,2);      
    SET @HRAEXEMPTAMT = 0;      
  SELECT @TOTAMT = SUM(NETAMT) FROM SALDETAIL SD      
  INNER JOIN EMPWORKMONTH EM ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID      
  WHERE SD.COMID = @COMID AND SALARYHEADID < 3 AND SD.MONTHID = @MONTH AND EM.BRANCHID = @BRANCHID     
     SELECT @AMT = CASE WHEN ISNULL(R.ISMETRORESIDENT,0) = 1 THEN 0.5 *(@TOTAMT)  ELSE 0.4*(@TOTAMT) END  
     FROM RENTDETAILS R WITH(NOLOCK)  
     INNER JOIN SALDETAIL SD WITH(NOLOCK) ON SD.SALDETAILID = R.SALDETAILID  
     INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID     
     INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SH.SALARYHEADID = SD.SALARYHEADID  
     WHERE SD.COMID = @COMID AND SH.ABBREVATION = 'HRA' AND SD.MONTHID = @MONTH  
   SELECT @RENTAMT = RENTPAID - 0.1 * ISNULL(@TOTAMT,0) FROM RENTDETAILS R WITH(NOLOCK)
   INNER JOIN SALDETAIL SD WITH(NOLOCK) ON SD.SALDETAILID = R.SALDETAILID
   INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SH.SALARYHEADID = SD.SALARYHEADID  
   WHERE COMID = @COMID AND MONTHID = @MONTH AND SH.ABBREVATION = 'HRA'  
   SELECT @HRAAMT = GROSSAMT1 + GROSSAMT2 , @NETAMT = ISNULL(NETAMT,0) FROM SALDETAIL SD WITH(NOLOCK)      
   INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID AND EM.MONTHID = SD.MONTHID     
   INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SH.SALARYHEADID = SD.SALARYHEADID  
   WHERE SD.COMID = @COMID AND SH.ABBREVATION = 'HRA' AND SD.MONTHID = @MONTH AND EM.BRANCHID = @BRANCHID         
   IF(ISNULL(@AMT,0) > 0 OR ISNULL(@RENTAMT,0) > 0 OR ISNULL(@HRAAMT,0) > 0)      
    BEGIN      
      SELECT @HRAEXEMPTAMT =       
       CASE WHEN ISNULL(@AMT,0) <= ISNULL(@RENTAMT,0) AND ISNULL(@AMT,0) <= ISNULL(@HRAAMT,0) THEN ISNULL(@AMT,0)      
             WHEN ISNULL(@RENTAMT,0) <= ISNULL(@AMT,0) AND ISNULL(@RENTAMT,0) <= ISNULL(@HRAAMT,0) THEN ISNULL(@RENTAMT,0)       
            ELSE ISNULL(@HRAAMT,0) END                  
    END      
   SELECT SH.SALARYHEADID,ABBREVATION,SH.SALARYNAME, ISNULL(SD.GROSSAMT1,0)GROSSAMOUNT1, ISNULL(SD.GROSSAMT2,0)GROSSAMOUNT2,              
    --CASE WHEN SH.SALARYHEADID <> 3 THEN 
   CASE WHEN (SD.GROSSAMT1 + SD.GROSSAMT2) > 0 THEN ISNULL(SD.EXEMPTAMT, SH.EXEMPTAMT) ELSE 0 END EXEMPTAMT,      
   SH.EXEMPTAMT EXEMPTEDAMOUNT, 
   ISNULL(SD.BASIC,0)BASIC, SH.BASICPER,            
   ISNULL(SD.HRA, 0)HRA,SH.HRAPERC, ISNULL(SD.DA, 0)DA,SH.DAPERC, ISNULL(SD.EPF, 0)EPF,SH.EPFPERC, SH.EARNING, SD.RECOVERYAMT,ISNULL(SH.ISEDITABLE,0) ISEDITABLE
   FROM SALARYHEAD SH WITH(NOLOCK) 
    LEFT JOIN      
    (            
		 SELECT GROSSAMT1,GROSSAMT2,SALARYHEADID, EXEMPTAMT, BASIC, DA, HRA, EPF, RECOVERYAMT              
		 FROM SALDETAIL SD WITH(NOLOCK)          
		 INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON SD.COMID = EM.COMID AND SD.MONTHID = EM.MONTHID
		 WHERE SD.COMID  = @COMID AND SD.MONTHID = @MONTH AND EM.BRANCHID = @BRANCHID
    )SD               
    ON SH.SALARYHEADID = SD.SALARYHEADID                
    WHERE SH.SALARYHEADID < 8 
    UNION   
    SELECT SALARYSECTIONID,'' ABBREVATION,SALARYNAME, GROSSAMOUNT1, GROSSAMOUNT2, EXEMPTAMT,EXEMPTAMT AS EXEMPTEDAMOUNT, 0 AS BASIC,0 AS BASICPER, 0 AS DA, 0 AS DAPERC,             
   0 AS HRA ,0 AS HRAPERC, 0 AS EPF, 0 AS EPFPERC, 0 AS EARNING, T.RECOVERYAMT,0 ISEDITABLE  FROM            
   (              
    SELECT CASE WHEN SS.SALARYSECTIONID = 1 THEN 11         
       ELSE 12 END AS SALARYSECTIONID,         
    CASE WHEN SS.SALARYSECTIONID = 1 THEN 'Entertainment Tax'         
	   ELSE 'Professional Tax' END AS SALARYNAME,              
    ISNULL(SDET.GROSSAMT1,0)GROSSAMOUNT1, ISNULL(SDET.GROSSAMT2,0)GROSSAMOUNT2, 0 AS EXEMPTAMT,SDET.RECOVERYAMT        
    FROM SALARYSECTIONS SS      
    LEFT JOIN              
    (              
		SELECT SALARYSECTIONID, '' AS ABBREVATION, ISNULL(GROSSAMT1,0)GROSSAMT1,ISNULL(GROSSAMT2,0) AS GROSSAMT2, ISNULL(RECOVERYAMT,0)RECOVERYAMT             
		FROM SECTION16DET SD WITH(NOLOCK)        
		INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON SD.COMID = EM.COMID AND SD.MONTHID = EM.MONTHID           
		WHERE SD.COMID  = @COMID AND SD.MONTHID = @MONTH  AND EM.BRANCHID = @BRANCHID              
    )SDET ON SS.SALARYSECTIONID = SDET.SALARYSECTIONID              
    WHERE SS.SALARYSECTIONID IN (1,2)              
    )T                
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSBCESSREPORT')
DROP PROCEDURE USP_TDS_GETSBCESSREPORT
GO
CREATE PROCEDURE [USP_TDS_GETSBCESSREPORT] 
	@BRANCHID INT,        
	@FORMID INT, 
	@QUARTER INT,
	@MONTH INT        
AS        
	BEGIN        
		SELECT  R.BRANCHCODE , R.BRANCHNAME, CB.BRANCHNAME AS ZONENAME, RP.BILLNUM, RP.BILLDATE, D.NAME, 
			   (    ISNULL(CASE D.ADDRESS1 WHEN '' THEN NULL ELSE D.ADDRESS1 + ',' END , '')
		          + ISNULL(CASE D.ADDRESS2 WHEN '' THEN NULL ELSE D.ADDRESS2 + ',' END , '') 
		          + ISNULL(CASE D.ADDRESS3 WHEN '' THEN NULL ELSE D.ADDRESS3 + ',' END , '')
		          + ISNULL(CASE D.ADDRESS4 WHEN '' THEN NULL ELSE D.ADDRESS4 + ',' END , '')
		          + ISNULL(CASE D.ADDRESS5 WHEN '' THEN NULL ELSE D.ADDRESS5 + ',' END , '')  
		       )ADDRESS, 
		        NE.STREGNO, RP.NATOFSERVICE, (DD.RPAMOUNT1 + DD.RPAMOUNT2) AS PAYMENTAMOUNT, 
		        DD.RPSBCESS AS SBCESS,DD.PAYMENTDATE       
		FROM DEDUCTIONDETAIL DD  
		    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID      
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID        
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
			INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = DD.BGLCODEID        
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = TR.SECTIONID               
			INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID  
			INNER JOIN   
			(  
				SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID 
				FROM REPORTPAYMENT RP WITH(NOLOCK)  
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID  
				WHERE RP.PARENTBRANCHID = @BRANCHID  
			)R  
			ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID  
		WHERE DD.BRANCHID = @BRANCHID 
			AND MONTH(DD.PAYMENTDATE) = @MONTH
			AND ISNULL(DD.RPSBCESS, 0) <> 0       
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSEC16DETAILS')
DROP PROCEDURE USP_TDS_GETSEC16DETAILS
GO
CREATE PROCEDURE USP_TDS_GETSEC16DETAILS        
@BRANCHCODES NVARCHAR(MAX),         
@MONTHID INT        
AS     
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED     
SET NOCOUNT ON         
SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING( @BRANCHCODES ,',')    
SELECT DISTINCT S16.COMID,SALARYSECTIONID, S16.GROSSAMT1, S16.MONTHID,S16.SECTION16DETID FROM SECTION16DET S16          
  INNER JOIN LINKTOTC LC          
  ON LC.COMID = S16.COMID       
  INNER JOIN COMPANYBRANCH C       
  ON C.BRANCHID=LC.BRANCHID    
  INNER JOIN #BRANCHES B ON B.DATA=C.BRANCHCODE            
  WHERE   S16.MONTHID = @MONTHID AND S16.SALARYSECTIONID = 2
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSection16Detail')
DROP PROCEDURE USP_TDS_GetSection16Detail
GO
CREATE PROCEDURE USP_TDS_GetSection16Detail --1608
@BRANCHID INT
AS
BEGIN
	SELECT C16.SECTION16DETAILID,C16.SALARYDETAILID,
	C16.SALARYSECTIONID,C16.AMOUNT,C16.REMARKS,D.REFERENCENO
	FROM SECTION16DETAIL C16 WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID=C16.SALARYDETAILID
	INNER JOIN DEDUCTEE D WITH(NOLOCK)
	ON D.DEDUCTEEID=SD.DEDUCTEEID
	WHERE SD.BRANCHID=@BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSection16Details')
DROP PROCEDURE USP_TDS_GetSection16Details
GO
CREATE PROCEDURE USP_TDS_GetSection16Details
	@SALARYDETAILID INT
AS
	BEGIN
		SELECT SECTION16DETAILID,SALARYDETAILID,SALARYSECTIONID,AMOUNT,REMARKS FROM SECTION16DETAIL WITH(NOLOCK)   WHERE SALARYDETAILID=@SALARYDETAILID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSECTION16DETAILSTABLE')
DROP PROCEDURE USP_TDS_GETSECTION16DETAILSTABLE
GO
CREATE PROCEDURE  USP_TDS_GETSECTION16DETAILSTABLE --'3347',4, '200000'
@BRANCHCODES NVARCHAR(MAX),          
@MONTHID INT,      
@REFNOS NVARCHAR(MAX)      
AS 
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
  SET NOCOUNT ON 
  SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING( @BRANCHCODES ,',')
  SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFNOS,',')   	     
  SELECT C.BRANCHCODE,LC.COMID, D.REFERENCENO, S16.SALARYSECTIONID, 0 AS GROSSAMT1, -1 AS MONTHID,-1 AS SECTION16DETID FROM LINKTOTC LC      
  INNER JOIN EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID       
  INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID AND D.BRANCHID = LC.BRANCHID      
  INNER JOIN COMPANYBRANCH C ON C.BRANCHID=D.BRANCHID  
  INNER JOIN SECTION16DET S16 ON S16.COMID = LC.COMID       
  INNER JOIN #BRANCHES B ON B.DATA=C.BRANCHCODE 
  INNER JOIN #REFNO R ON R.DATA=D.REFERENCENO  
 WHERE ISNULL(D.REFERENCENO,'')<>'' AND S16.SECTION16DETID IS NULL       
  UNION      
  SELECT DISTINCT C.BRANCHCODE, S16.COMID,D.REFERENCENO,SALARYSECTIONID, S16.GROSSAMT1, S16.MONTHID,S16.SECTION16DETID FROM SECTION16DET S16      
  INNER JOIN LINKTOTC LC      
  ON LC.COMID = S16.COMID      
  INNER JOIN EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID      
  INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID      
  INNER JOIN COMPANYBRANCH C ON C.BRANCHID=D.BRANCHID  
  INNER JOIN #BRANCHES B ON B.DATA=C.BRANCHCODE 
 INNER JOIN #REFNO R ON R.DATA=D.REFERENCENO  
WHERE ISNULL(D.REFERENCENO,'')<>'' AND S16.MONTHID = @MONTHID AND S16.SALARYSECTIONID = 2
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSECTIONNAME')
DROP PROCEDURE USP_TDS_GETSECTIONNAME
GO
CREATE PROCEDURE [USP_TDS_GETSECTIONNAME]
@BGLCODEID INT
AS
BEGIN
DECLARE @QUERY NVARCHAR(MAX);
SET @QUERY ='SELECT TS.SECTIONNAME +'' (''+ TS.DESCRIPTION  +'')'' AS SECTIONNAME  FROM TAXSECTIONS TS WITH(NOLOCK)   INNER JOIN TDSRATE TR WITH(NOLOCK)   ON TR.SECTIONID=TS.SECTIONID WHERE TR.BGLCODEID= ' + CAST(@BGLCODEID AS VARCHAR) + ''
		EXEC SP_EXECUTESQL @QUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSECTIONNAMECBI')
DROP PROCEDURE USP_TDS_GETSECTIONNAMECBI
GO
CREATE PROCEDURE [USP_TDS_GETSECTIONNAMECBI]
@BGLCODEID INT
AS
BEGIN
	SELECT TS.SECTIONID,TR.DESCRIPTION FROM TAXSECTIONS TS WITH(NOLOCK) 
	INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.SECTIONID=TS.SECTIONID 
	WHERE TR.BGLCODEID=@BGLCODEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSELECTEDUNLINKEDDEDUCTIONAMOUNT')
DROP PROCEDURE USP_TDS_GETSELECTEDUNLINKEDDEDUCTIONAMOUNT
GO
CREATE PROCEDURE [USP_TDS_GETSELECTEDUNLINKEDDEDUCTIONAMOUNT]      
 @DEDUCTIONID INT,      
 @PARTPAYMENTID INT,      
 @BRANCHID INT,      
 @FORMID INT,      
 @QUARTER SMALLINT      
AS      
 BEGIN      
 IF( @FORMID <>1)  
 BEGIN  
   IF(@DEDUCTIONID <> -1 AND @PARTPAYMENTID <> -1)      
   BEGIN      
    SELECT INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID,NE.DEDUCTEECODE,0 AS FEE FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)     
    INNER JOIN DEDUCTEE D  WITH(NOLOCK)   ON D.DEDUCTEEID=DD.DEDUCTEEID    
    INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)   ON NE.DEDUCTEEID=D.DEDUCTEEID    
  WHERE DEDUCTIONID=@DEDUCTIONID AND PARTPAYMENTID=@PARTPAYMENTID AND QUARTER=@QUARTER      
   END      
   ELSE IF(@DEDUCTIONID = -1)
   BEGIN      
    SELECT REMINCOMETAX AS INCOMETAX,REMSURCHARGE AS SURCHARGE,REMEDUCATIONCESS AS EDUCATIONCESS,REMTOTALDEDUCTED AS TOTALDEDUCTED,
				 CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID,DEDUCTEECODE,0 AS FEE      
    FROM PARTPAYMENTDETAILS PPD  WITH(NOLOCK)       
   INNER JOIN       
   (SELECT DISTINCT PARTPAYMENTID,DD.BRANCHID,FORMID,QUARTER,SECTIONID,NE.DEDUCTEECODE       
     FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)     
     INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON D.DEDUCTEEID=DD.DEDUCTEEID    
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON NE.DEDUCTEEID=D.DEDUCTEEID    
   WHERE DD.BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND PARTPAYMENTID=@PARTPAYMENTID) DD      
    ON PPD.PARTPAYMENTID=DD.PARTPAYMENTID AND PPD.BRANCHID=DD.BRANCHID AND PPD.FORMID=DD.FORMID AND PPD.QUARTER=DD.QUARTER       
  WHERE PPD.PARTPAYMENTID=@PARTPAYMENTID AND PPD.BRANCHID=@BRANCHID AND PPD.FORMID=@FORMID AND PPD.QUARTER=@QUARTER      
   END     
  END   
  ELSE  
  BEGIN  
   IF(@DEDUCTIONID <> -1 AND @PARTPAYMENTID <> -1)      
   BEGIN      
    SELECT INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID,0 AS DEDUCTEECODE,0 AS FEE FROM DEDUCTIONDETAIL DD    
    INNER JOIN DEDUCTEE D WITH(NOLOCK)   ON D.DEDUCTEEID=DD.DEDUCTEEID    
    INNER JOIN EMPLOYEE NE WITH(NOLOCK)  ON NE.DEDUCTEEID=D.DEDUCTEEID    
  WHERE DEDUCTIONID=@DEDUCTIONID AND PARTPAYMENTID=@PARTPAYMENTID AND QUARTER=@QUARTER      
   END      
   ELSE IF(@DEDUCTIONID = -1)      
   BEGIN      
    SELECT REMINCOMETAX AS INCOMETAX,REMSURCHARGE AS SURCHARGE,REMEDUCATIONCESS AS EDUCATIONCESS,REMTOTALDEDUCTED AS TOTALDEDUCTED,
			   CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID,DEDUCTEECODE,0 AS FEE      
    FROM PARTPAYMENTDETAILS PPD WITH(NOLOCK)       
   INNER JOIN       
   (SELECT DISTINCT PARTPAYMENTID,DD.BRANCHID,FORMID,QUARTER,SECTIONID,0 AS DEDUCTEECODE       
     FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)     
     INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON D.DEDUCTEEID=DD.DEDUCTEEID    
   INNER JOIN EMPLOYEE NE WITH(NOLOCK)  ON NE.DEDUCTEEID=D.DEDUCTEEID    
   WHERE DD.BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND PARTPAYMENTID=@PARTPAYMENTID) DD      
    ON PPD.PARTPAYMENTID=DD.PARTPAYMENTID AND PPD.BRANCHID=DD.BRANCHID AND PPD.FORMID=DD.FORMID AND PPD.QUARTER=DD.QUARTER       
  WHERE PPD.PARTPAYMENTID=@PARTPAYMENTID AND PPD.BRANCHID=@BRANCHID AND PPD.FORMID=@FORMID AND PPD.QUARTER=@QUARTER      
   END     
  END  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSELECTPAYMENTDETAIL')
DROP PROCEDURE USP_TDS_GETSELECTPAYMENTDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETSELECTPAYMENTDETAIL]
@REPORTPAYMENTID INT,
@FINYEAR INT,
@QUARTER INT = -1          
AS            
BEGIN            
	DECLARE @DEDUCTEEID INT, @SECTIONID VARCHAR(10), @COUNTID INT;
	DECLARE @REFDEDUCTIONID INT, @ISVALID BIT, @PAYMENT  NUMERIC(13,2);
	DECLARE @CERTSECTIONS VARCHAR(50), @RPSECTIONID INT , @REPORTPAYMENTCOUNT INT;            
	DECLARE @VALIDFROM SMALLDATETIME, @VALIDTO SMALLDATETIME;
	CREATE TABLE #DEDSUM(DEDUCTIONID INT,DEDUCTEEID INT,BRANCHID INT,QUARTER INT,TOTALDEDUCTED NUMERIC(13, 2),NONDEDREASON TINYINT,REFDEDUCTIONID INT, SECTIONID INT, BGLCODEID INT,PAYMENTMADE NUMERIC(13, 2),PAYMENTDATE SMALLDATETIME, INCOMETAX NUMERIC(13, 2),ORGSURCHARGE NUMERIC(13, 2),TAXRATE numeric(7, 4))
	SELECT @DEDUCTEEID = DEDUCTEEID, 
		@SECTIONID = CASE WHEN SECTIONID IN (23,24) THEN '23,24' 
			ELSE CAST(SECTIONID AS VARCHAR) END 
	FROM REPORTPAYMENT WITH(NOLOCK) WHERE ID = @REPORTPAYMENTID            
	SELECT @CERTSECTIONS = SECTIONID FROM CERTDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID  
	SELECT @VALIDFROM = MIN(VALIDFROM), @VALIDTO = MAX(VALIDTO) 
	FROM CERTDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID
	SET @VALIDFROM =  COALESCE(@VALIDFROM, CAST(CAST(@FINYEAR AS VARCHAR)+'-04-01' AS SMALLDATETIME))
	SET @VALIDTO =  COALESCE(@VALIDTO, CAST(CAST(@FINYEAR + 1 AS VARCHAR) + '-03-31' AS SMALLDATETIME))
	SELECT @RPSECTIONID = CASE WHEN SECTIONID IN (23,24) THEN '15' 
			ELSE CAST(SECTIONID AS VARCHAR) END 
	FROM REPORTPAYMENT WITH(NOLOCK) WHERE ID = @REPORTPAYMENTID 
	CREATE TABLE #REFDEDID (REFDEDUCTIONID INT, REPORTPAYMENTID INT, DEDUCTEEID INT, 
		SECTIONID INT, PAYMENTMADE NUMERIC(13,2))
	INSERT INTO #REFDEDID 
	SELECT REFDEDUCTIONID, REPORTPAYMENTID, DEDUCTEEID, SECTIONID,
		PAYMENTMADE
	FROM DEDUCTIONDETAIL WITH(NOLOCK)
	WHERE DEDUCTEEID = @DEDUCTEEID AND 
		SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(@SECTIONID,',')) 
	SELECT @REFDEDUCTIONID = REFDEDUCTIONID 
	FROM #REFDEDID 
	WHERE REFDEDUCTIONID IS NOT NULL 
	SELECT @COUNTID = COUNT(REPORTPAYMENTID) FROM #REFDEDID 
	WHERE DEDUCTEEID = @DEDUCTEEID AND 
		SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(@SECTIONID,',')) 
	GROUP BY REPORTPAYMENTID  
	HAVING COUNT(REPORTPAYMENTID) > 1
	SELECT @PAYMENT = SUM(PAYMENTMADE) FROM #REFDEDID 
	WHERE DEDUCTEEID = @DEDUCTEEID AND 
		SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(@SECTIONID,','))    
	DROP TABLE #REFDEDID
	SELECT @ISVALID = CASE WHEN LEN(ISNULL(PANREFERENCE,'')) > 0 THEN 0 ELSE 1 END 
	FROM DEDUCTEE WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID          
	IF(@QUARTER = -1)
	BEGIN
		INSERT INTO #DEDSUM
		SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,QUARTER,TOTALDEDUCTED,NONDEDREASON,REFDEDUCTIONID,SECTIONID,BGLCODEID,PAYMENTMADE,PAYMENTDATE,INCOMETAX,ORGSURCHARGE,TAXRATE FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID 
	END
	ELSE
	BEGIN 
		INSERT INTO #DEDSUM
		SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,QUARTER,TOTALDEDUCTED,NONDEDREASON,REFDEDUCTIONID,SECTIONID,BGLCODEID,PAYMENTMADE,PAYMENTDATE,INCOMETAX,ORGSURCHARGE,TAXRATE FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID  AND QUARTER = @QUARTER		END
	SELECT * INTO #DEDMST FROM DEDUCTEE WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID 
	SELECT * INTO #CERTDED FROM CERTDETAIL CDET WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID 
	SELECT DISTINCT DD.DEDUCTEEID,
		CASE WHEN (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE NONDEDREASON IN(3,5) AND ISNULL(TOTALDEDUCTED,0) = 0 AND REFDEDUCTIONID IS NULL AND SECTIONID = DD.SECTIONID AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND PAYMENTDATE BETWEEN @VALIDFROM AND @VALIDTO) > 0 
			--THEN 'A'
			THEN
				CASE WHEN ISNULL(CDET.CERTLIMIT,0) > 0 THEN CDET.TDSRATE
					ELSE	
						CASE WHEN NE.STATUS IN (5,6) THEN T.CATEGORY2
							ELSE T.CATEGORY1
						END
				END
			WHEN  (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE REFDEDUCTIONID IS NOT NULL AND ISNULL(TOTALDEDUCTED,0) = 0 AND SECTIONID = DD.SECTIONID AND TAXRATE = DD.TAXRATE AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND PAYMENTDATE BETWEEN @VALIDFROM AND @VALIDTO) > 0
			--THEN 'B'
			THEN 
				CASE WHEN ISNULL(CDET.CERTLIMIT,0) > 0 THEN CDET.TDSRATE
					ELSE	
						CASE WHEN NE.STATUS IN (5,6) THEN T.CATEGORY2
							ELSE T.CATEGORY1
						END
				END
			WHEN  (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE ISNULL(TOTALDEDUCTED,0) > 0 AND NONDEDREASON IN (0,3,5) AND SECTIONID = DD.SECTIONID AND TAXRATE = DD.TAXRATE AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE) > 0
				--THEN 'C'
				THEN 
					CASE WHEN NE.STATUS IN (5,6) THEN T.CATEGORY2
							ELSE T.CATEGORY1
					END
			WHEN  (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE ((ISNULL(TOTALDEDUCTED,0) = 0 AND NONDEDREASON = 1) OR (ISNULL(TOTALDEDUCTED,0) > 0 AND NONDEDREASON = 1)) AND SECTIONID = DD.SECTIONID AND TAXRATE = DD.TAXRATE AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND PAYMENTDATE BETWEEN @VALIDFROM AND @VALIDTO) > 0
				--THEN 'C'
				THEN 
					CASE WHEN ISNULL(CDET.CERTLIMIT,0) > 0 THEN CDET.TDSRATE
						ELSE	
							CASE WHEN NE.STATUS IN (5,6) THEN T.CATEGORY2
							ELSE T.CATEGORY1
						END
					END
			ELSE	
				CASE WHEN NE.STATUS IN (5,6) THEN T.CATEGORY2
							ELSE T.CATEGORY1
				END		
		END AS TAXRATE,
		DD.SECTIONID,DD.PAYMENTDATE,
	   (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE NONDEDREASON IN(3,5) AND ISNULL(TOTALDEDUCTED,0) = 0 AND REFDEDUCTIONID IS NULL AND DEDUCTEEID = DD.DEDUCTEEID AND SECTIONID = DD.SECTIONID AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND TAXRATE = DD.TAXRATE)NONTDS,            
	   (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE REFDEDUCTIONID IS NOT NULL AND ISNULL(TOTALDEDUCTED,0) = 0 AND DEDUCTEEID = DD.DEDUCTEEID AND SECTIONID = DD.SECTIONID  AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND TAXRATE = DD.TAXRATE)INCLUDEDTDS,
	   (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE (ISNULL(TOTALDEDUCTED,0) > 0 OR (ISNULL(TOTALDEDUCTED,0)= 0 AND NONDEDREASON IN (0,1,2))) AND DEDUCTEEID = DD.DEDUCTEEID AND SECTIONID = DD.SECTIONID AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND TAXRATE = DD.TAXRATE)TDSMADEPAYMENT,            
	   (SELECT ISNULL(SUM(INCOMETAX),0) FROM #DEDSUM WHERE (ISNULL(TOTALDEDUCTED,0) > 0 OR (ISNULL(TOTALDEDUCTED,0)= 0 AND NONDEDREASON IN (0,1,2))) AND DEDUCTEEID = DD.DEDUCTEEID AND SECTIONID = DD.SECTIONID AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND TAXRATE = DD.TAXRATE)TDS  ,
	   (SELECT ISNULL(SUM(ORGSURCHARGE),0) FROM #DEDSUM WHERE (ISNULL(TOTALDEDUCTED,0) > 0 OR (ISNULL(TOTALDEDUCTED,0)= 0 AND NONDEDREASON IN (0,1,2))) AND DEDUCTEEID = DD.DEDUCTEEID AND SECTIONID = DD.SECTIONID AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND TAXRATE = DD.TAXRATE) PREVTOTSURCHARGE  ,                        
	   (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE NONDEDREASON IN(3,5) AND ISNULL(TOTALDEDUCTED,0) = 0 AND REFDEDUCTIONID IS NULL AND DEDUCTEEID = DD.DEDUCTEEID AND SECTIONID = DD.SECTIONID AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND TAXRATE = DD.TAXRATE) +             
	   (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE REFDEDUCTIONID IS NOT NULL AND ISNULL(TOTALDEDUCTED,0) = 0 AND DEDUCTEEID = DD.DEDUCTEEID AND SECTIONID = DD.SECTIONID AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND TAXRATE = DD.TAXRATE)+            
	   (SELECT ISNULL(SUM(PAYMENTMADE),0) FROM #DEDSUM WHERE (ISNULL(TOTALDEDUCTED,0) > 0 OR (ISNULL(TOTALDEDUCTED,0)= 0 AND NONDEDREASON IN (0,1,2))) AND DEDUCTEEID = DD.DEDUCTEEID AND SECTIONID = DD.SECTIONID AND BGLCODEID = DD.BGLCODEID AND PAYMENTDATE = DD.PAYMENTDATE AND TAXRATE = DD.TAXRATE)TOTALPAYMENT            
	INTO #DEDUCTION
	FROM #DEDSUM DD 
	INNER JOIN #DEDMST D ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID            
	INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID            
	INNER JOIN TDSRATE T WITH(NOLOCK) ON T.BGLCODEID = DD.BGLCODEID     
	LEFT JOIN #CERTDED CDET ON CDET.DEDUCTEEID = DD.DEDUCTEEID AND 
	DD.SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(CASE WHEN CDET.SECTIONID = 15 THEN '23,24' ELSE CAST(CDET.SECTIONID AS VARCHAR) END,','))
	WHERE DD.DEDUCTEEID = @DEDUCTEEID AND DD.SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(@SECTIONID,','))
	AND DD.PAYMENTDATE > = CAST(ISNULL(CDET.VALIDFROM,0) AS DATE)
	GROUP BY TAXRATE,DD.DEDUCTEEID,DD.SECTIONID, NE.STATUS, T.CATEGORY1, T.CATEGORY2,CDET.CERTLIMIT, CDET.TDSRATE,DD.BGLCODEID, DD.PAYMENTDATE
	DROP TABLE #DEDSUM
	SELECT * INTO #REPPAY FROM REPORTPAYMENT WITH(NOLOCK) WHERE ID = @REPORTPAYMENTID 
	SELECT SERIALNO ,RP.DEDUCTEEID, NAME, PAN, RP.PAYMENTAMOUNT, EXCLUDESERVICETAX, SERVICETAX, ISNULL(RP.SBCESS, 0) AS SBCESS, ISNULL(RP.KKCESS, 0) AS KKCESS, RP.SECTIONID, 
	CASE WHEN RP.SECTIONID <> 8 THEN ISNULL(T.THRESHOLDLIMIT,0) 
		ELSE 
		CASE WHEN EXCLUDESERVICETAX +  (SELECT SUM(ISNULL(NONTDS,0) + ISNULL(INCLUDEDTDS,0)) FROM #DEDUCTION WHERE TAXRATE = 0) > 100000 THEN 100000
			ELSE 30000
		END 
	END AS THRESHOLDLIMIT,		
	CASE WHEN (ISNULL(STATEID,0) = 99 AND CODE = 1)  THEN 2.5 ELSE 10 END AS SURCHARGERATE,	 
	CASE WHEN CDET.SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(@RPSECTIONID,',')) THEN 
		CASE WHEN @FINYEAR > 2013  THEN ISNULL(CDET.TDSRATE,-1) ELSE ISNULL(NE.CONTAXRATE,-1) END ELSE TS.TAXRATE END AS CONTAXRATE,            
	CASE WHEN CDET.SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(@RPSECTIONID,',')) THEN
		CASE WHEN @FINYEAR > 2013  THEN ISNULL(CDET.CERTLIMIT,-1) ELSE ISNULL(NE.CONLIMIT,-1) END ELSE -1 END AS CONLIMIT, 
	ISNULL(STREGNO,'')STREGNO, ISNULL(GSTIN,'')GSTIN, BGLCODE, RP.BGLCODEID, TS.SECTIONNAME,ISNULL(NE.ACCOUNTNUMBER,'')ACCOUNTNUMBER, ISNULL(NE.IFSCCODE,'')IFSCCODE,
	ISNULL(NE.MAKETDSFROMFIRSTPAYMENT,0)MAKETDSFROMFIRSTPAYMENT,ISNULL(NE.BANKNAME,'')BANKNAME ,ISNULL(NE.BRANCHNAME,'')BRANCHNAME, 
	ISNULL(@COUNTID,0) AS COUNTID , 
	CASE WHEN CDET.SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(@RPSECTIONID,',')) THEN 
		ISNULL(CDET.CERTDETAILID,-1) ELSE -1 END AS CERTDETAILID, 
	CASE WHEN CDET.SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(@RPSECTIONID,',')) THEN	
		ISNULL(CDET.CERTNO,'') ELSE '' END AS CERTNO,           
	(SELECT CASE WHEN ROUNDOFF IS NULL THEN -1   WHEN   ROUNDOFF = 1 THEN -1  ELSE ROUNDOFF END FROM DEFAULTSETTINGS WITH(NOLOCK)) MODEOFPAYMENT,            
	CASE WHEN NE.STATUS IN (5,6) THEN CASE WHEN (T.CATEGORY2 > 20 AND @ISVALID = 0) THEN T.CATEGORY2-- ELSE 20 END  
	ELSE CASE WHEN (T.CATEGORY2 < 20 AND @ISVALID = 0)THEN 20 ELSE T.CATEGORY2 END END    
	ELSE CASE WHEN (T.CATEGORY1 > 20 AND @ISVALID = 0) THEN T.CATEGORY1-- ELSE 20 END  
	ELSE CASE WHEN (T.CATEGORY1 < 20 AND @ISVALID = 0)THEN 20 ELSE T.CATEGORY1 END END END AS TAXRATE,
	ISNULL(CDET.VALIDFROM,'') VALIDFROM , ISNULL(CDET.VALIDTO,'') VALIDTO, ISNULL(NE.STATUS,0) STATUS, ISNULL(RP.BILLDATE, CAST('30-JUN-2017' AS SMALLDATETIME)) AS BILLDATE            
	INTO #REPORTPAYMENT            
	FROM #REPPAY RP WITH(NOLOCK)           
	INNER JOIN #DEDMST D ON D.DEDUCTEEID = RP.DEDUCTEEID            
	INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID            
	INNER JOIN TDSRATE T WITH(NOLOCK) ON T.BGLCODEID = RP.BGLCODEID            
	INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = T.SECTIONID  
	LEFT JOIN #CERTDED CDET ON D.DEDUCTEEID = CDET.DEDUCTEEID AND TS.SECTIONID = CASE WHEN CDET.SECTIONID = 15 THEN TS.SECTIONID ELSE CDET.SECTIONID END
	WHERE ID = @REPORTPAYMENTID 
	DROP TABLE #CERTDED
	DROP TABLE #DEDMST
	DROP TABLE #REPPAY
	SELECT @REPORTPAYMENTCOUNT = COUNT(SERIALNO) FROM #REPORTPAYMENT
	IF ((@REPORTPAYMENTCOUNT > 1) AND (SELECT TOP 1 CONLIMIT FROM #REPORTPAYMENT )< 0)
	BEGIN
		DELETE FROM #REPORTPAYMENT WHERE CERTNO = ''
	END 
	IF((SELECT TOP 1 MAKETDSFROMFIRSTPAYMENT FROM #REPORTPAYMENT) = 0)
	BEGIN
		IF (ISNULL((SELECT TOP 1 EXCLUDESERVICETAX FROM #REPORTPAYMENT),0) +  
			(SELECT SUM(ISNULL(NONTDS,0) + ISNULL(INCLUDEDTDS,0) + ISNULL(TDSMADEPAYMENT,0)) 
				FROM #DEDUCTION) < 100000 AND 
			(SELECT TOP 1 SECTIONID FROM REPORTPAYMENT WHERE ID = @REPORTPAYMENTID) = 8)
			DELETE FROM #DEDUCTION
	END
   SELECT * FROM #DEDUCTION   
   SELECT ROWNUM = ROW_NUMBER() OVER (ORDER BY SERIALNO), *,
	ISNULL((SELECT SUM(PAYMENTMADE) FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	  WHERE DEDUCTEEID = @DEDUCTEEID AND SECTIONID IN (SELECT DATA FROM DBO.UDF_TDS_SPLITSTRING(@SECTIONID,','))
	  AND CERTNO = ISNULL(R.CERTNO,'')), 0) CONSUMED
   INTO #PREPARE
   FROM #REPORTPAYMENT R
   ORDER BY R.VALIDFROM;
   SELECT *, (P.CONLIMIT - P.CONSUMED) AVAILABLE 
   FROM #PREPARE P
   DROP TABLE #DEDUCTION 
   DROP TABLE #REPORTPAYMENT 
   DROP TABLE #PREPARE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSERIALNO')
DROP PROCEDURE USP_TDS_GETSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETSERIALNO]
@BRANCHID INT,
@ISNONEMPLOYEE BIT
AS
 BEGIN
  IF(@ISNONEMPLOYEE = 1)
   BEGIN
    SELECT ISNULL(MAX(N.SERIALNO),0) + 1 AS SERIALNO FROM NONEMPLOYEE N WITH(NOLOCK)
     INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON N.DEDUCTEEID = D.DEDUCTEEID
     WHERE D.BRANCHID = @BRANCHID
   END
    ELSE
   BEGIN
    SELECT ISNULL(MAX(E.SERIALNO),0) + 1 AS SERIALNO FROM EMPLOYEE E  WITH(NOLOCK)
    INNER JOIN DEDUCTEE D WITH(NOLOCK)   ON E.DEDUCTEEID = D.DEDUCTEEID
    WHERE D.BRANCHID = @BRANCHID
   END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSerialNoDedcutionAudit')
DROP PROCEDURE USP_TDS_GetSerialNoDedcutionAudit
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetSerialNoDedcutionAudit]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN
DECLARE @SERIALNO INT;
	SELECT @SERIALNO = MAX(SERIALNO) 
	FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID 
		AND FORMID = @FORMID 
		AND QUARTER = @QUARTER
SELECT ISNULL(@SERIALNO,0) + 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSNO')
DROP PROCEDURE USP_TDS_GETSNO
GO
CREATE PROCEDURE [USP_TDS_GETSNO]
   @BRANCHID INT,
   @FORMID INT,
   @QUARTER INT,
   @ISNONEMPLOYEE BIT
   AS
  BEGIN
     DECLARE @STATEID INT, @CNEMAXSERIALNO INT,@MASTERMAXSERIALNO INT , @DEDUCTEESERIALNO INT;
      SELECT @STATEID=STATEID FROM DEDUCTOR D WITH(NOLOCK)
      INNER  JOIN
     BRANCHDEDUCTORS BD  WITH(NOLOCK)
     ON D.DEDUCTORID =BD.DEDUCTORID
    WHERE BRANCHID=@BRANCHID AND QUARTER=@QUARTER
                IF(@ISNONEMPLOYEE = 1)
     BEGIN
         SELECT @CNEMAXSERIALNO=(ISNULL(MAX(DEDUCTEESERIALNO),0))+1
          FROM CORRNONEMPLOYEE   WITH(NOLOCK)
          WHERE BRANCHID=@BRANCHID
         AND FORMID=@FORMID
         AND QUARTER=@QUARTER
          SELECT @MASTERMAXSERIALNO=(ISNULL(MAX(NE.SERIALNO),0))+1
          FROM DEDUCTEE D   WITH(NOLOCK)
        INNER JOIN
          NONEMPLOYEE NE  WITH(NOLOCK)
         ON D.DEDUCTEEID=NE.DEDUCTEEID
         WHERE D.BRANCHID=@BRANCHID
     END
     ELSE
     BEGIN
       SELECT @CNEMAXSERIALNO=(ISNULL(MAX(DEDUCTEESERIALNO),0))+1
          FROM CORREMPLOYEE    WITH(NOLOCK)
          WHERE BRANCHID=@BRANCHID
         AND FORMID=@FORMID
         AND QUARTER=@QUARTER
          SELECT @MASTERMAXSERIALNO=(ISNULL(MAX(NE.SERIALNO),0))+1
          FROM DEDUCTEE D  WITH(NOLOCK)
        INNER JOIN
          EMPLOYEE NE    WITH(NOLOCK)
         ON D.DEDUCTEEID=NE.DEDUCTEEID
         WHERE D.BRANCHID=@BRANCHID
     END
     IF(@MASTERMAXSERIALNO>@CNEMAXSERIALNO)
      BEGIN
      SET @DEDUCTEESERIALNO=@MASTERMAXSERIALNO
      END
     ELSE
      BEGIN
        SET @DEDUCTEESERIALNO=@CNEMAXSERIALNO
      END
     SELECT @STATEID AS STATEID, @DEDUCTEESERIALNO AS SERIALNO;
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSPECIFICREMITTINGBANK')
DROP PROCEDURE USP_TDS_GETSPECIFICREMITTINGBANK
GO
CREATE PROCEDURE [USP_TDS_GETSPECIFICREMITTINGBANK]
 @BANKID INT
AS
 BEGIN
	DECLARE @COUNT INT;
		SELECT @COUNT = COUNT(DISTINCT BRANCHID) FROM CHALLANDETAIL WITH(NOLOCK)   WHERE BANKID = @BANKID;
		SELECT BANKID,BANKNAME,BRANCHNAME,BSRCODE, CASE WHEN @COUNT > 1 THEN 1 ELSE 0 END AS ISUSED FROM REMITTINGBANK WITH(NOLOCK)   WHERE BANKID=@BANKID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetSpecificUser')
DROP PROCEDURE USP_TDS_GetSpecificUser
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetSpecificUser] 
 @USERID INT,  
 @USERNAME VARCHAR(20)  
AS  
 BEGIN  
  DECLARE @QUERY NVARCHAR(MAX);  
  SET @QUERY = 'SELECT UM.USERID,UM.USERNAME,UM.PASSWORD,
					UM.ISSUPERADMIN,UM.ISBRANCHADMIN,UM.ISACTIVE,
					UM.BRANCHID As UserBranchID,UM.LastLoginTime,
					UM.PWDCHGDATE,UM.WRONGPWDCOUNT,
					CB.BRANCHNAME AS UserBranch,CB.BRANCHCODE, 
					ISNULL(UM.ISCHECKER,0) ISCHECKER, 
					ISNULL(UM.ISAUDITOR,0) ISAUDITOR
				FROM USERMASTER UM WITH(NOLOCK) 
						INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
								ON UM.BRANCHID = CB.BRANCHID';  
  IF(@USERID <> -1)  
   BEGIN  
    SET @QUERY = @QUERY + ' WHERE  UM.USERID = ' + CAST(@USERID AS VARCHAR);  
   END  
  ELSE  
   BEGIN  
    SET @QUERY = @QUERY + ' WHERE  UM.USERNAME = ' + '''' + @USERNAME + '''';   
   END    
  EXEC SP_EXECUTESQL @QUERY;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSTAFFDEDUCTIONSERIAL')
DROP PROCEDURE USP_TDS_GETSTAFFDEDUCTIONSERIAL
GO
CREATE PROCEDURE USP_TDS_GETSTAFFDEDUCTIONSERIAL
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
	BEGIN
		SELECT DD.SERIALNO FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
		INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
		WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ISNULL(EMPTYPE,0) <> 1
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETSTATEID')
DROP PROCEDURE USP_TDS_GETSTATEID
GO
CREATE PROCEDURE [USP_TDS_GETSTATEID]
@STATENAME VARCHAR(50)
AS
	BEGIN
		DECLARE @STATEID INT
		SELECT @STATEID=STATEID FROM STATEMASTER WITH(NOLOCK)   WHERE STATENAME=@STATENAME
		IF @STATEID<>''
			BEGIN
				SELECT @STATEID
			END
		ELSE
			BEGIN
				SELECT 0
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetStates')
DROP PROCEDURE USP_TDS_GetStates
GO
CREATE PROCEDURE USP_TDS_GetStates
AS
BEGIN
	SELECT STATEID,STATENAME,EPAYSTATE FROM STATEMASTER WITH(NOLOCK)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTABLESEQUENCE')
DROP PROCEDURE USP_TDS_GETTABLESEQUENCE
GO
CREATE PROCEDURE [USP_TDS_GETTABLESEQUENCE]
AS
	BEGIN
		DECLARE @TABLE TABLE(NAME VARCHAR(MAX));
		DECLARE @FKTABLE TABLE(ROWID INT IDENTITY(1,1),PKQUALIFIER VARCHAR(MAX), PKTABLEOWNER VARCHAR(10),MAINTABLENAME VARCHAR(MAX), PKCOLUMN VARCHAR(MAX),FKQUALIFIER VARCHAR(MAX), FKTABLEOWNER VARCHAR(10),LINKEDTABLENAME VARCHAR(MAX), FKCOLUMN VARCHAR(MAX),KEYSEQ INT, UPDATERULE INT, DELETERULE INT, FKNAME VARCHAR(MAX), PKNAME VARCHAR(MAX), DEFERRABILITY INT);
		INSERT INTO @TABLE
		SELECT NAME FROM SYS.TABLES
		DECLARE @COUNT INT, @TABLENAME VARCHAR(MAX);
		SELECT @COUNT = COUNT(*) FROM @TABLE
	  WHILE(@COUNT > 0)
	BEGIN
		SELECT TOP 1 @TABLENAME =  NAME FROM @TABLE
		INSERT INTO @FKTABLE
		EXEC SP_FKEYS @TABLENAME
		DELETE FROM @TABLE WHERE NAME = (SELECT TOP 1 NAME FROM @TABLE)
		SELECT @COUNT = COUNT(*) FROM @TABLE
	END
		SELECT MIN(ROWID) ROWID, MAINTABLENAME FROM @FKTABLE
		GROUP BY MAINTABLENAME
		ORDER BY MAX(ROWID) ASC
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTANAPPLIEDBRANCHCODES')
DROP PROCEDURE USP_TDS_GETTANAPPLIEDBRANCHCODES
GO
CREATE PROCEDURE [USP_TDS_GETTANAPPLIEDBRANCHCODES]
@BRANCHCODES NVARCHAR(MAX),
@QUARTER INT 
AS
 BEGIN
	SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')
    SELECT BRANCHCODE FROM COMPANYBRANCH CB
    INNER JOIN BRANCHDEDUCTORS BD ON BD.BRANCHID = CB.BRANCHID
    INNER JOIN DEDUCTOR D ON D.DEDUCTORID = BD.DEDUCTORID 
    INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE
    WHERE BD.QUARTER = @QUARTER AND ISNULL(D.TAN,'TANAPPLIED') = 'TANAPPLIED'
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTANAPPLIEDBRANCHES')
DROP PROCEDURE USP_TDS_GETTANAPPLIEDBRANCHES
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETTANAPPLIEDBRANCHES]  -- USP_TDS_GETTANAPPLIEDBRANCHES -1
@ROBRANCHID INT
AS
 BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX);
	SET @SQLQUERY = ' DECLARE @QUARTER INT,@BRANCHID INT;
	DECLARE @TEMP TABLE ( BRANCHID INT,QUARTER TINYINT );
	SELECT  BRANCHID,PARENTBRANCHID INTO #TEMPBRANCH FROM COMPANYBRANCH WITH(NOLOCK)
    SET @QUARTER=0;
	WHILE(@QUARTER<4  AND  EXISTS(SELECT TOP 1 * FROM #TEMPBRANCH))
		BEGIN
			SELECT TOP 1 @BRANCHID=BRANCHID FROM #TEMPBRANCH
			SET @QUARTER=@QUARTER+1
			INSERT INTO @TEMP
			SELECT @BRANCHID,@QUARTER
			IF(@QUARTER=4)
				BEGIN
					SET @QUARTER=0
					DELETE TOP (1) FROM #TEMPBRANCH
				END
		END'
	SET @SQLQUERY = @SQLQUERY  + ' SELECT (SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID = CB.PARENTBRANCHID) AS [PARENT BRANCH],
			BRANCHNAME, BRANCHCODE,''QUARTER''= CAST( Q.QUARTER AS VARCHAR(1)), ''TANAPPLIED'' AS TAN
			INTO #TEMP1
			FROM COMPANYBRANCH CB WITH(NOLOCK)
				INNER JOIN
				(
				SELECT BRANCHID, QUARTER FROM BRANCHDEDUCTORS WITH(NOLOCK)   WHERE DEDUCTORID IN
				(
				SELECT DEDUCTORID FROM DEDUCTOR WITH(NOLOCK) WHERE TAN = ''TANAPPLIED''
				) 
				)Q ON CB.BRANCHID = Q.BRANCHID'
	IF(@ROBRANCHID <> -1)
	BEGIN
		SET @SQLQUERY = @SQLQUERY + ' WHERE CB.PARENTBRANCHID = '+ CAST (@ROBRANCHID AS VARCHAR)
	END
	SET @SQLQUERY = @SQLQUERY + ' ORDER BY [PARENT BRANCH]'
	SET @SQLQUERY = @SQLQUERY  +  ' SELECT  (SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID = C.PARENTBRANCHID) AS [PARENT BRANCH], 
			C.BRANCHNAME, C.BRANCHCODE, CAST( T.QUARTER AS VARCHAR(1)) AS QUARTER, ''TANNOTAVBL'' AS TAN
        INTO #TEMP2
		FROM @TEMP T
			LEFT JOIN  BRANCHDEDUCTORS BD  WITH(NOLOCK) ON T.BRANCHID=BD.BRANCHID AND T.QUARTER=BD.QUARTER
			INNER JOIN COMPANYBRANCH C WITH(NOLOCK)   ON C.BRANCHID=T.BRANCHID
		WHERE BD.BRANCHID IS NULL ORDER BY BD.BRANCHID'
	IF(@ROBRANCHID <> -1)
		BEGIN
			SET @SQLQUERY = @SQLQUERY + ' T.PARENTBRANCHID = '+ CAST (@ROBRANCHID AS VARCHAR)
		END
	SET @SQLQUERY = @SQLQUERY + ' SELECT *FROM  #TEMP1
								UNION
								SELECT *FROM  #TEMP2
								 ORDER BY BRANCHCODE'
	EXEC SP_EXECUTESQL @SQLQUERY;
	IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL
	DROP TABLE #TEMP1
	IF OBJECT_ID('TEMPDB..#TEMP2') IS NOT NULL
	DROP TABLE #TEMP2
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTANList')
DROP PROCEDURE USP_TDS_GetTANList
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetTANList] -- USP_TDS_GetTANList 4096,0
		@BRANCHID INT,
		@VALUE BIT
	AS
		BEGIN
				IF(@VALUE<>1)
				BEGIN 
				   SELECT @BRANCHID = CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END FROM COMPANYBRANCH WITH(NOLOCK)   WHERE BRANCHID =@BRANCHID
					SELECT BD.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,D.TAN,BD.QUARTER FROM DEDUCTOR D  WITH(NOLOCK)  
							INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)   ON D.DEDUCTORID=BD.DEDUCTORID
							INNER JOIN COMPANYBRANCH CB  WITH(NOLOCK)  ON CB.BRANCHID=BD.BRANCHID
					WHERE  CB.BRANCHID=@BRANCHID AND ISNULL(CB.NOCHALLANPAY,0)=0 
					UNION ALL
					SELECT BD.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,D.TAN,BD.QUARTER FROM DEDUCTOR D WITH(NOLOCK)  
							INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)  ON D.DEDUCTORID=BD.DEDUCTORID
							INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID=BD.BRANCHID
					WHERE  CB.PARENTBRANCHID=@BRANCHID AND ISNULL(CB.NOCHALLANPAY,0)=0 
					ORDER BY BD.BRANCHID, BD.QUARTER 
				END
				ELSE
				BEGIN
				SELECT BD.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,D.TAN,BD.QUARTER,ISNULL((SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID IN(SELECT PARENTBRANCHID FROM COMPANYBRANCH WITH(NOLOCK)   WHERE BRANCHID= BD.BRANCHID)),'') [P_BRANCH] FROM DEDUCTOR D WITH(NOLOCK)  
							INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)  ON D.DEDUCTORID=BD.DEDUCTORID
							INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID=BD.BRANCHID 
							WHERE ISNULL(CB.NOCHALLANPAY,0)=0 ORDER BY BRANCHID, BD.QUARTER 
				END
		END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTANListForBranchCodes')
DROP PROCEDURE USP_TDS_GetTANListForBranchCodes
GO
CREATE PROCEDURE USP_TDS_GetTANListForBranchCodes 
	@BRANCHCODES NVARCHAR(MAX)    
AS    
	BEGIN    
		SELECT * INTO #BRANCHES FROM dbo.UDF_TDS_SPLITSTRING(@BRANCHCODES, ',')      
		SELECT CB.BRANCHCODE +'^'+ D.TAN +'^'+ CAST(CB.BRANCHID AS VARCHAR) +'^'+ CB.BRANCHNAME AS DATA    
		--,CB.BRANCHCODE , D.TAN , CAST(CB.BRANCHID AS VARCHAR) BRANCHID    
		FROM DEDUCTOR D WITH(NOLOCK)    
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID      
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID    
			INNER JOIN #BRANCHES B WITH(NOLOCK) ON CB.BRANCHCODE = B.DATA    
		WHERE TAN <> 'TANAPPLIED'     
		GROUP BY CB.BRANCHCODE,CB.BRANCHID,D.TAN,CB.BRANCHNAME    
		ORDER BY CB.BRANCHCODE    
	END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTANREGISTRATIONNO')
DROP PROCEDURE USP_TDS_GETTANREGISTRATIONNO
GO
CREATE PROCEDURE [USP_TDS_GETTANREGISTRATIONNO]
@BRANCHID INT,
@QUARTER INT
AS
	BEGIN
		 SELECT TANREGISTRATION FROM DEDUCTOR D WITH(NOLOCK)   
		 INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)   ON D.DEDUCTORID=BD.DEDUCTORID AND BD.BRANCHID=@BRANCHID AND BD.QUARTER=@QUARTER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTaxableIncome')
DROP PROCEDURE USP_TDS_GetTaxableIncome
GO
CREATE PROCEDURE [USP_TDS_GetTaxableIncome]
@COMID INT,    
@BRANCHID INT    
AS    
 BEGIN    
	DECLARE @TOTAL TABLE(NETAMT NUMERIC(13,2));
	INSERT INTO  @TOTAL
	EXEC USP_TDS_GetProjectableSalary  @COMID, @BRANCHID
	INSERT INTO  @TOTAL
	EXEC USP_TDS_GetProjectableTaxablePerquisite  @COMID, @BRANCHID
	INSERT INTO  @TOTAL
	EXEC USP_TDS_GetProjectableDeductionUS16  @COMID, @BRANCHID
	SELECT D.DEDUCTEEID, SD.TOTALTAXABLEINCOME, ISNULL(SD.TAXONTOTALINCOME,0) AS INCOMETAX,    
    ISNULL(SD.SURCHARGE,0) AS SURCHARGE, ISNULL(SD.EDUCATIONCESS,0) AS CESS,     
    ISNULL(SD.RELIEFUS89,0)RELIEFUS89,(SELECT SUM(NETAMT) + ISNULL(OTHERINCOME,0) - ISNULL(TOTALDEDUNDERCHAPTERVIA,0) - ISNULL(DEDUCTIONUS16,0) FROM @TOTAL)PROJECTABLEINCOME,
    ISNULL(SD.MANUALINCOMETAX,0)MANUALINCOMETAX, ISNULL(SD.PREVEMPINCOMETAX,0)PREVINCOMETAX, ISNULL(SD.PREVEMPSURCHARGE,0) PREVEMPSURCHARGE,     
    ISNULL(SD.PREVEMPCESS,0)PREVEMPCESS,E.ISSENIORCITIZEN,ISNULL(CREDITUS87A,0)CREDITUS87A,  
    ISNULL(DD.TOTALDEDUCTED,0)TOTALDEDUCTED FROM LINKTOTC LC WITH (NOLOCK)    
  INNER JOIN EMPLOYEE E WITH (NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID 
  INNER JOIN DEDUCTEE D WITH (NOLOCK) ON D.DEDUCTEEID  = E.DEDUCTEEID AND LC.BRANCHID = D.BRANCHID
  INNER JOIN SALARYDETAIL SD WITH (NOLOCK) ON SD.DEDUCTEEID = D.DEDUCTEEID    
  LEFT JOIN    
  (    
   SELECT ISNULL(SUM(TOTALDEDUCTED),0)TOTALDEDUCTED, DD.DEDUCTEEID FROM DEDUCTIONDETAIL DD WITH (NOLOCK)   
   INNER JOIN DEDUCTEE D WITH (NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID    
   INNER JOIN EMPLOYEE E WITH (NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID    
   WHERE DD.BRANCHID = @BRANCHID AND DD.TRANSSTATUS = 2  
   GROUP BY DD.DEDUCTEEID    
  )DD ON DD.DEDUCTEEID = D.DEDUCTEEID    
  WHERE COMID = @COMID AND LC.BRANCHID = @BRANCHID    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXABLEPERQUISITE')
DROP PROCEDURE USP_TDS_GETTAXABLEPERQUISITE
GO
CREATE PROCEDURE [USP_TDS_GETTAXABLEPERQUISITE]
@COMID INT,
@MONTHID INT,
@BRANCHID INT
AS
  BEGIN
	SELECT TAXABLEPERKID,PERKID, GROSSAMT, EXEMPTAMT, TAXABLEAMT FROM TAXABLEPERQUISITE T WITH (NOLOCK) 
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = T.COMID
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON LC.COMID = EM.COMID AND EM.MONTHID = T.MONTHID AND EM.BRANCHID = LC.BRANCHID
		WHERE T.COMID = @COMID AND T.MONTHID = @MONTHID AND LC.BRANCHID = @BRANCHID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXRATE')
DROP PROCEDURE USP_TDS_GETTAXRATE
GO
CREATE PROCEDURE [USP_TDS_GETTAXRATE]
(
@SECTIONID SMALLINT
)
AS
SELECT ISNULL(TAXRATE,0) TAXRATE FROM TAXSECTIONS  WITH(NOLOCK)  WHERE SECTIONID=@SECTIONID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXRATESBASEDONFRMIDSECIDDATEANDDEDSTATUS')
DROP PROCEDURE USP_TDS_GETTAXRATESBASEDONFRMIDSECIDDATEANDDEDSTATUS
GO
CREATE PROCEDURE [USP_TDS_GETTAXRATESBASEDONFRMIDSECIDDATEANDDEDSTATUS]
 @FORMID INT,
 @SECID INT = -1,
 @FROMDATE SMALLDATETIME = NULL,
 @DEDSTATUS INT = -1
AS
 BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	DECLARE @SQLQUERY NVARCHAR(MAX);
--    
--	SET @SQLQUERY = 'SELECT TS.SECTIONID, TS.SECTIONNAME, R.SUBSECTION, R.DEDSTATUS, R.TAXRATE, R.APPLICABLEFROM, R.APPLICABLETO
--	FROM TAXSECTIONS AS TS INNER JOIN RATES AS R ON TS.SECTIONID = R.SECTIONID';
	SET @SQLQUERY = 'SELECT TS.SECTIONNAME, TS.TAXNAME, R.SUBSECTION, 
					CASE R.DEDSTATUS
					  WHEN 1 THEN ''COMPANY''
					  WHEN 2 THEN ''INDIVIDUALS/HUF''
					  WHEN 3 THEN ''RENT OF PLANT & MACHINERY''
					  WHEN 4 THEN ''RENT OF LAND, BUILDING, FURNITURE''
					  WHEN 5 THEN ''OTHERS''
					END AS DEDSTATUS,   
					R.DEDSTATUS, R.TAXRATE, TS.SECTIONID
					FROM TAXSECTIONS AS TS INNER JOIN RATES AS R ON TS.SECTIONID = R.SECTIONID';
	IF (@FORMID <> -1)
		SET @SQLQUERY = @SQLQUERY + ' WHERE TS.FORMID = ' + CAST(@FORMID AS VARCHAR);
    IF (@SECID <> -1)
		SET @SQLQUERY = @SQLQUERY + ' AND TS.SECTIONID = ' + CAST(@SECID AS VARCHAR);
	--IF (@FROMDATE <> NULL)
	IF (ISNULL(CAST(@FROMDATE AS VARCHAR),'') <> '')
		BEGIN
			SET @SQLQUERY = @SQLQUERY +  ' AND R.APPLICABLEFROM <= ''' + CAST(@FROMDATE AS VARCHAR)
			  + ''' AND (R.APPLICABLETO >= ''' + CAST(@FROMDATE AS VARCHAR) + ''' OR R.APPLICABLETO IS NULL)';
		END
  	IF (@DEDSTATUS <> -1)
		SET @SQLQUERY = @SQLQUERY + ' AND R.DEDSTATUS = ' + CAST(@DEDSTATUS AS VARCHAR);
	--SET @SQLQUERY = @SQLQUERY + ' ORDER BY T.SECTIONNAME';
	SET @SQLQUERY = @SQLQUERY + ' ORDER BY TS.TAXNAME';
	--PRINT @SQLQUERY;
	EXECUTE SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXSECS')
DROP PROCEDURE USP_TDS_GETTAXSECS
GO
CREATE PROCEDURE [USP_TDS_GETTAXSECS]
	@FORMID INT
AS
	BEGIN
		IF(@FORMID<>1)
			BEGIN
				SELECT TS.SECTIONID,TS.TAXNAME,TS.SECTIONNAME,TS.[DESCRIPTION],FD.FORMID,FD.FORMNAME,TS.SHORTDESC
				FROM   TAXSECTIONS TS WITH(NOLOCK)   INNER JOIN FORMDETAILS FD WITH(NOLOCK)   ON TS.FORMID=FD.FORMID
				WHERE  FD.FORMID=@FORMID;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXSECTIONS')
DROP PROCEDURE USP_TDS_GETTAXSECTIONS
GO
CREATE PROCEDURE [USP_TDS_GETTAXSECTIONS]
 @FORMID INT,
 @QUARTER INT,
 @BRANCHID INT
AS
 BEGIN
  IF(@FORMID = 1) /*FORM 24Q*/
   BEGIN
    IF EXISTS (SELECT ALLOW92A92B FROM DEFAULTSETTINGS WHERE ALLOW92A92B = 1)
    BEGIN
     SELECT TS.SECTIONID,TS.TAXNAME,
         TS.SECTIONNAME,TS.[DESCRIPTION],FD.FORMID,FD.FORMNAME,SHORTDESC
     FROM   TAXSECTIONS TS WITH(NOLOCK)  INNER JOIN FORMDETAILS FD WITH(NOLOCK)  ON TS.FORMID = FD.FORMID
     WHERE  FD.FORMID = @FORMID;
    END
    ELSE
    BEGIN
     DECLARE @STATUSID INT,@DEDUCTORID INT;
     SELECT @DEDUCTORID = DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND [QUARTER] = @QUARTER;
     SELECT @STATUSID = STATUSID FROM DEDUCTOR WHERE DEDUCTORID = @DEDUCTORID;
     IF(@STATUSID = 1) /*GOVERNMENT*/
      BEGIN
       SELECT SECTIONID,TAXNAME,SECTIONNAME,FORMID,[DESCRIPTION],SHORTDESC
       FROM   TAXSECTIONS
       WHERE  SECTIONID = 1;
      END
     ELSE IF (@STATUSID = 2) /*OTHERS*/
      BEGIN
       SELECT SECTIONID,TAXNAME,SECTIONNAME,FORMID,[DESCRIPTION],SHORTDESC
       FROM   TAXSECTIONS
       WHERE  SECTIONID  = 2;
      END
    END
   END
  ELSE IF(@FORMID = 2 OR @FORMID = 3) /*FORM 26Q & FORM 27Q*/
   BEGIN
    SELECT TS.SECTIONID,TS.TAXNAME,
        TS.SECTIONNAME,TS.[DESCRIPTION],FD.FORMID,FD.FORMNAME,SHORTDESC
    FROM   TAXSECTIONS TS WITH(NOLOCK)   INNER JOIN FORMDETAILS FD WITH(NOLOCK)  ON TS.FORMID = FD.FORMID
    WHERE  FD.FORMID = @FORMID;
   END
 ELSE IF(@FORMID = 4)
 BEGIN
   SELECT TS.SECTIONID,TS.TAXNAME,
        TS.SECTIONNAME,TS.[DESCRIPTION],FD.FORMID,FD.FORMNAME,SHORTDESC
  FROM   TAXSECTIONS TS WITH(NOLOCK)  INNER JOIN FORMDETAILS FD WITH(NOLOCK)   ON TS.FORMID = FD.FORMID
  WHERE  FD.FORMID = @FORMID;
 END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXSECTIONSBASEDONDATES')
DROP PROCEDURE USP_TDS_GETTAXSECTIONSBASEDONDATES
GO
CREATE PROCEDURE [USP_TDS_GETTAXSECTIONSBASEDONDATES]
	@BRANCHID INT,
	@FORMID INT,
	@TYPEVALUE INT,
	@FROMDATE SMALLDATETIME=NULL,
	@TODATE SMALLDATETIME=NULL
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY ='SELECT DISTINCT DD.SECTIONID ,TS.SECTIONNAME
						FROM   DEDUCTIONDETAIL DD WITH(NOLOCK)   INNER JOIN DEDUCTEE D WITH(NOLOCK)   ON DD.DEDUCTEEID =D.DEDUCTEEID
												  INNER JOIN TAXSECTIONS TS WITH(NOLOCK)   ON DD.SECTIONID=TS.SECTIONID
												  LEFT JOIN DEDCHALINK DL WITH(NOLOCK)   ON DD.DEDUCTIONID = DL.DEDUCTIONID
						WHERE  DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND DD.PAYMENTDATE >='''+CAST(@FROMDATE AS VARCHAR)+''' AND DD.PAYMENTDATE <='''+CAST(@TODATE AS VARCHAR)+''' AND (DD.TOTALDEDUCTED=0 OR DL.DEDCHALINKID IS NOT NULL)';
	    EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXSECTIONSFORCHALLAN')
DROP PROCEDURE USP_TDS_GETTAXSECTIONSFORCHALLAN
GO
CREATE PROCEDURE [USP_TDS_GETTAXSECTIONSFORCHALLAN]
	@QUARTER INT,
	@BRANCHID INT
AS
	BEGIN
			IF EXISTS (SELECT ALLOW92A92B FROM DEFAULTSETTINGS WITH(NOLOCK) WHERE ALLOW92A92B = 1)
				BEGIN
					SELECT TS.SECTIONID,TS.TAXNAME,
						   TS.SECTIONNAME,TS.[DESCRIPTION],FD.FORMID,FD.FORMNAME,SHORTDESC
					FROM   TAXSECTIONS TS  WITH(NOLOCK)  INNER JOIN FORMDETAILS FD  WITH(NOLOCK)  ON TS.FORMID = FD.FORMID ;
				END
			ELSE
				BEGIN
					DECLARE @STATUSID INT,@DEDUCTORID INT;
					SELECT @DEDUCTORID = DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND [QUARTER] = @QUARTER;
					SELECT @STATUSID = STATUSID FROM DEDUCTOR WITH(NOLOCK)   WHERE DEDUCTORID = @DEDUCTORID;
					IF(@STATUSID = 1) /*GOVERNMENT*/
						BEGIN
							SELECT SECTIONID,TAXNAME,SECTIONNAME,FORMID,[DESCRIPTION],SHORTDESC
							FROM   TAXSECTIONS WITH(NOLOCK)
							WHERE  SECTIONID = 1
							UNION
							SELECT TS.SECTIONID,TS.TAXNAME,TS.SECTIONNAME,FD.FORMID,TS.[DESCRIPTION],SHORTDESC
								   FROM   TAXSECTIONS TS WITH(NOLOCK)   INNER JOIN FORMDETAILS FD WITH(NOLOCK)   ON TS.FORMID = FD.FORMID WHERE TS.FORMID<>1
						END
					ELSE IF (@STATUSID = 2) /*OTHERS*/
						BEGIN
							SELECT SECTIONID,TAXNAME,SECTIONNAME,FORMID,[DESCRIPTION],SHORTDESC
							FROM   TAXSECTIONS WITH(NOLOCK)
							WHERE  SECTIONID  = 2
							UNION
							SELECT TS.SECTIONID,TS.TAXNAME,TS.SECTIONNAME,FD.FORMID, TS.[DESCRIPTION],SHORTDESC
									FROM   TAXSECTIONS TS WITH(NOLOCK)   INNER JOIN FORMDETAILS FD WITH(NOLOCK)  ON TS.FORMID = FD.FORMID WHERE TS.FORMID<>1
						END
				END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXSECTIONSFORFORM16A')
DROP PROCEDURE USP_TDS_GETTAXSECTIONSFORFORM16A
GO
CREATE PROCEDURE [USP_TDS_GETTAXSECTIONSFORFORM16A]        
 @BRANCHID INT,        
 @FORMID INT,      
 @ISAUDITTRIAL BIT = 0        
AS        
 BEGIN      
 SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED    
 DECLARE @SQLQUERY NVARCHAR(MAX); 
 DECLARE @SQLQUERY1 NVARCHAR(MAX);  
 DECLARE @FINALSQLQUERY NVARCHAR(MAX);     
 SET @SQLQUERY = 'SELECT DISTINCT DD.SECTIONID,TS.SECTIONNAME,TS.TAXNAME,TS.DESCRIPTION,DD.FORMID        
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK)       
       INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID =D.DEDUCTEEID        
       INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID           
       INNER JOIN DEDCHALINK DL WITH(NOLOCK)   ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID=DL.BRANCHID        
       WHERE DD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR) + 'AND DL.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+ ' AND DD.FORMID = '+CAST(@FORMID AS VARCHAR)+' AND DD.TOTALDEDUCTED>0 '      
  IF(@ISAUDITTRIAL = 1)      
 BEGIN      
  SET @SQLQUERY = @SQLQUERY + ' AND ISNULL(DD.TRANSSTATUS,2) = 2'      
 END    
 SET @SQLQUERY1 = 'SELECT DISTINCT DD.SECTIONID,TS.SECTIONNAME,TS.TAXNAME,TS.DESCRIPTION,DD.FORMID        
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK)       
       INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID =D.DEDUCTEEID        
       INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID                      
       WHERE DD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = '+CAST(@FORMID AS VARCHAR)+' AND DD.TOTALDEDUCTED=0'      
  IF(@ISAUDITTRIAL = 1)      
 BEGIN      
  SET @SQLQUERY1 = @SQLQUERY1 + ' AND ISNULL(DD.TRANSSTATUS, 2) = 2'
 END    
   --FINAL PREPARE
  SET  @FINALSQLQUERY=@SQLQUERY+' UNION '+ @SQLQUERY1
  EXEC SP_EXECUTESQL @FINALSQLQUERY;             
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXSECTIONSFORFORM16AREPORTS')
DROP PROCEDURE USP_TDS_GETTAXSECTIONSFORFORM16AREPORTS
GO
CREATE PROCEDURE [USP_TDS_GETTAXSECTIONSFORFORM16AREPORTS]      
 @BRANCHID INT,      
 @FORMID INT,      
 @TYPEVALUE INT,      
 @VALUE INT,      
 @FROMDATE SMALLDATETIME = NULL,      
 @TODATE SMALLDATETIME = NULL      
AS      
 BEGIN   
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED    
  DECLARE @SQLQUERY NVARCHAR(MAX); 
  DECLARE @SQLQUERY1 NVARCHAR(MAX);  
  DECLARE @FINALSQLQUERY NVARCHAR(MAX);         
  SET @SQLQUERY='SELECT DISTINCT DD.SECTIONID,TS.SECTIONNAME,TS.TAXNAME,TS.DESCRIPTION,DD.FORMID      
        FROM   DEDUCTIONDETAIL DD WITH(NOLOCK)   INNER JOIN DEDUCTEE D WITH(NOLOCK)   ON DD.DEDUCTEEID =D.DEDUCTEEID      
                         INNER JOIN TAXSECTIONS TS WITH(NOLOCK)   ON DD.SECTIONID=TS.SECTIONID         
                          INNER JOIN DEDCHALINK DL WITH(NOLOCK)   ON DD.DEDUCTIONID = DL.DEDUCTIONID  AND DL.BRANCHID=DD.BRANCHID     
        WHERE  DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DL.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND DD.TOTALDEDUCTED>0 '      
  IF(@TYPEVALUE=1 AND @VALUE<>5)      
   BEGIN      
    SET @SQLQUERY=@SQLQUERY+' AND DD.[QUARTER]='+CAST(@VALUE AS VARCHAR);      
   END        
  IF(@TYPEVALUE=2)      
   BEGIN      
    SET @SQLQUERY=@SQLQUERY+' AND MONTH(DD.PAYMENTDATE)='+CAST(@VALUE AS VARCHAR);      
   END      
  ELSE IF(@TYPEVALUE=3)      
   BEGIN      
    IF (@FROMDATE<>'')      
     BEGIN      
      SET @SQLQUERY=@SQLQUERY+ ' AND DD.PAYMENTDATE >='''+CAST(@FROMDATE AS VARCHAR)+'''';      
     END      
    IF (@TODATE<>'')      
     BEGIN      
      SET @SQLQUERY=@SQLQUERY+' AND DD.PAYMENTDATE <='''+CAST(@TODATE AS VARCHAR)+'''';      
     END      
   END  
   SET @SQLQUERY1='SELECT DISTINCT DD.SECTIONID,TS.SECTIONNAME,TS.TAXNAME,TS.DESCRIPTION,DD.FORMID      
        FROM   DEDUCTIONDETAIL DD WITH(NOLOCK)   INNER JOIN DEDUCTEE D WITH(NOLOCK)   ON DD.DEDUCTEEID =D.DEDUCTEEID      
                         INNER JOIN TAXSECTIONS TS WITH(NOLOCK)   ON DD.SECTIONID=TS.SECTIONID         
        WHERE  DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND DD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND DD.TOTALDEDUCTED=0 '      
  IF(@TYPEVALUE=1 AND @VALUE<>5)      
   BEGIN      
    SET @SQLQUERY1=@SQLQUERY1+' AND DD.[QUARTER]='+CAST(@VALUE AS VARCHAR);      
   END        
  IF(@TYPEVALUE=2)      
   BEGIN      
    SET @SQLQUERY1=@SQLQUERY1+' AND MONTH(DD.PAYMENTDATE)='+CAST(@VALUE AS VARCHAR);      
   END      
  ELSE IF(@TYPEVALUE=3)      
   BEGIN      
    IF (@FROMDATE<>'')      
     BEGIN      
      SET @SQLQUERY1=@SQLQUERY1+ ' AND DD.PAYMENTDATE >='''+CAST(@FROMDATE AS VARCHAR)+'''';      
     END      
    IF (@TODATE<>'')      
     BEGIN      
      SET @SQLQUERY1=@SQLQUERY1+' AND DD.PAYMENTDATE <='''+CAST(@TODATE AS VARCHAR)+'''';      
     END      
   END          
   --FINAL PREPARE
  SET  @FINALSQLQUERY=@SQLQUERY+' UNION '+ @SQLQUERY1
  EXEC SP_EXECUTESQL @FINALSQLQUERY;      
  --PRINT @FINALSQLQUERY  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXSECTIONUSED')
DROP PROCEDURE USP_TDS_GETTAXSECTIONUSED
GO
CREATE PROCEDURE [USP_TDS_GETTAXSECTIONUSED]
AS
BEGIN
	SELECT SECTIONID, CASE WHEN SECTIONID = 1 THEN SECTIONNAME + 'A-' + TAXNAME 
						   WHEN SECTIONID = 2 THEN SECTIONNAME + 'B-' + TAXNAME 		
					       ELSE SECTIONNAME + '-' + TAXNAME END SECTIONNAME
	FROM TAXSECTIONS
	WHERE SECTIONID IN 
		(SELECT SECTIONID FROM CHALLANDETAIL WITH(NOLOCK))
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXSLAB')
DROP PROCEDURE USP_TDS_GETTAXSLAB
GO
CREATE PROCEDURE USP_TDS_GETTAXSLAB  
@CATID INT  
AS   
  SELECT ISNULL(AMOUNTFROM,0)AMOUNTFROM, ISNULL(AMOUNTTO,-1)AMOUNTTO, TAXRATE FROM TAXSLAB WITH(NOLOCK) WHERE CATID = @CATID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTAXSLABS')
DROP PROCEDURE USP_TDS_GETTAXSLABS
GO
CREATE PROCEDURE USP_TDS_GETTAXSLABS
@CATID INT,
@SLABID INT
AS  
BEGIN  
	DECLARE @SQLQUERY NVARCHAR(MAX);
	SET @SQLQUERY = 'SELECT SLABID, CATID, AMOUNTFROM, ISNULL(AMOUNTTO,-1)AMOUNTTO, TAXRATE 
				FROM TAXSLAB WHERE CATID = ' + CAST(@CATID AS VARCHAR)
	IF(@SLABID <> -1)
	  	SET @SQLQUERY = @SQLQUERY + ' AND SLABID = ' + CAST(@SLABID AS VARCHAR)
	EXEC SP_EXECUTESQL @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTCInfo')
DROP PROCEDURE USP_TDS_GetTCInfo
GO
CREATE PROCEDURE [USP_TDS_GetTCInfo]
	@COMID INT    
AS    
BEGIN    
	SELECT ISREQUEST FROM TCINFO WITH(NOLOCK) WHERE COMID = @COMID    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTCInfoAll')
DROP PROCEDURE USP_TDS_GetTCInfoAll
GO
CREATE PROCEDURE [USP_TDS_GetTCInfoAll]  
AS    
BEGIN 
	SELECT COMID FROM TCINFO WITH(NOLOCK) WHERE ISREQUEST = 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDS26QVAMT')
DROP PROCEDURE USP_TDS_GETTDS26QVAMT
GO
CREATE PROCEDURE [USP_TDS_GETTDS26QVAMT]
@FINYEAR INT,
@MONTHYEAR INT,
@BRANCHIDS NVARCHAR(MAX)
AS
BEGIN
		SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHIDS,',')
		SELECT CAST(@MONTHYEAR AS VARCHAR)+CAST(@FINYEAR AS VARCHAR) MONTHYEAR, C.BRANCHID, '26QV' FORMTYPE, '' ACCOUNTNO, ISNULL(T.AMOUNT,0.0) AMOUNT 
		FROM COMPANYBRANCH C WITH(NOLOCK)  
		LEFT JOIN
		(
		SELECT  BRANCHID, '26QV' FORMTYPE, '' ACCOUNTNO, SUM(TOTALDEDUCTED) AMOUNT 
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		INNER JOIN #BRANCHES B ON B.DATA = BRANCHID
		WHERE FORMID <> 1 AND SECTIONID NOT IN (5,17) AND MONTH(DEDUCTEDDATE) = @MONTHYEAR
		GROUP BY BRANCHID
		)T
		ON T.BRANCHID=C.BRANCHID
		INNER JOIN #BRANCHES B ON B.DATA = C.BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSDEDUCTEDREMITTED')
DROP PROCEDURE USP_TDS_GETTDSDEDUCTEDREMITTED
GO
CREATE PROCEDURE [USP_TDS_GETTDSDEDUCTEDREMITTED]
@BRANCHID INT,
@MONTH INT,
@VALUE INT
AS
  BEGIN
     DECLARE @QUARTER INT;
     SELECT @QUARTER = CASE WHEN @MONTH BETWEEN 1 AND 3 THEN 4
             WHEN @MONTH BETWEEN 4 AND 6 THEN 1
             WHEN @MONTH BETWEEN 7 AND 9 THEN 2
             WHEN @MONTH BETWEEN 10 AND 12 THEN 3
        END
     IF(@VALUE = 1)
        BEGIN
    IF(@BRANCHID <> 1)
             BEGIN
    SELECT @BRANCHID = CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID;
    SELECT ZONE, CASE WHEN SECTIONID IN (3,5,17)
     THEN (SECTIONNAME + ' [' + (CASE WHEN ENTRYTYPE = 4 THEN 'CBS' ELSE 'MANUAL' END) + ']')
       ELSE SECTIONNAME END
        AS SECTIONNAME,
      SUM(PAYMENTMADE)PAYMENTMADE,SUM(TAXDEDUCTED)TAXDEDUCTED,SUM(TAXREMITTED)TAXREMITTED FROM
     (
      SELECT 1 ENTRYTYPE, (CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ' )') AS ZONE,
       (TS.SECTIONNAME + ' - ' + TS.DESCRIPTION) AS SECTIONNAME, TS.SECTIONID, DD.PAYMENTMADE,DD.TOTALDEDUCTED AS TAXDEDUCTED,
        DD.TOTALDEDUCTED AS TAXREMITTED
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
       INNER JOIN COMPANYBRANCH CB  WITH(NOLOCK)  ON DD.BRANCHID = CB.BRANCHID
       INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
       INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)   ON NE.DEDUCTEEID = D.DEDUCTEEID
       INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON TS.SECTIONID = DD.SECTIONID
       INNER JOIN DEDCHALINK DL WITH(NOLOCK)  ON DL.DEDUCTIONID = DD.DEDUCTIONID
       INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)  ON CD.CHALLANID = DL.CHALLANID
       INNER JOIN REPORTPAYMENT RP WITH(NOLOCK)  ON RP.ID = DD.REPORTPAYMENTID
       INNER JOIN TDSRATE TR WITH(NOLOCK)  ON RP.BGLCODEID = TR.BGLCODEID
       WHERE DD.FORMID IN (2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND ISNULL(CB.NOCHALLANPAY,0) = 0 AND (CB.BRANCHID = @BRANCHID OR CB.PARENTBRANCHID = @BRANCHID)
       UNION ALL
       SELECT CASE WHEN ENTRYTYPE = 4 THEN 4 ELSE 1 END AS ENTRYTYPE, (C.BRANCHNAME + ' (' + C.BRANCHCODE + ' )') AS ZONE,
        (TS.SECTIONNAME + ' - ' + TS.DESCRIPTION) AS SECTIONNAME, TS.SECTIONID, DD.PAYMENTMADE,DD.TOTALDEDUCTED AS TAXDEDUCTED,
        DD.TOTALDEDUCTED AS TAXREMITTED
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
       INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON DD.BRANCHID = CB.BRANCHID
       INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
       INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON NE.DEDUCTEEID = D.DEDUCTEEID
       INNER JOIN TAXSECTIONS TS WITH(NOLOCK)   ON TS.SECTIONID = DD.SECTIONID
       INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
       INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)  ON CD.CHALLANID = DL.CHALLANID
       INNER JOIN
       (
        SELECT CB.BRANCHNAME , CB.BRANCHCODE, C.BRANCHID FROM COMPANYBRANCH CB WITH(NOLOCK)
        LEFT JOIN COMPANYBRANCH C WITH(NOLOCK)  ON C.PARENTBRANCHID = CB.BRANCHID
       )C ON C.BRANCHID = CB.BRANCHID
       WHERE DD.FORMID IN (2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH  AND ISNULL(REPORTPAYMENTID,0) = 0 AND CB.PARENTBRANCHID = @BRANCHID
     ) T
     GROUP BY ZONE, SECTIONID, SECTIONNAME, ENTRYTYPE
    END
         ELSE
           BEGIN
       SELECT ZONE , CASE WHEN SECTIONID IN (3,5,17)
     THEN (SECTIONNAME + ' [' + (CASE WHEN ENTRYTYPE = 4 THEN 'CBS' ELSE 'MANUAL' END) + ']')
       ELSE SECTIONNAME END
        AS SECTIONNAME, SUM(PAYMENTMADE)PAYMENTMADE,SUM(TAXDEDUCTED)TAXDEDUCTED, SUM(TAXREMITTED)TAXREMITTED
     FROM (
       SELECT 1 AS ENTRYTYPE,(CB.BRANCHNAME + ' (' + CB.BRANCHCODE + ')') AS ZONE,
       (TS.SECTIONNAME + ' - ' + TS.DESCRIPTION) AS SECTIONNAME, TS.SECTIONID, DD.PAYMENTMADE,DD.TOTALDEDUCTED AS TAXDEDUCTED,
        DD.TOTALDEDUCTED AS TAXREMITTED
       FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)
       INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)   ON DD.BRANCHID = CB.BRANCHID
       INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID
       INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)   ON NE.DEDUCTEEID = D.DEDUCTEEID
       INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON TS.SECTIONID = DD.SECTIONID
       INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
       INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)   ON CD.CHALLANID = DL.CHALLANID
       INNER JOIN REPORTPAYMENT RP WITH(NOLOCK)   ON RP.ID = DD.REPORTPAYMENTID
       INNER JOIN TDSRATE TR WITH(NOLOCK)  ON RP.BGLCODEID = TR.BGLCODEID
       INNER JOIN
       (
        SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID FROM REPORTPAYMENT RP
        INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = RP.BRANCHID
       )R
       ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID
       WHERE DD.FORMID IN (2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND ISNULL(CB.NOCHALLANPAY,0) = 0
       UNION ALL
       SELECT CASE WHEN ENTRYTYPE = 4 THEN 4 ELSE 1 END AS ENTRYTYPE,C.BRANCHNAME + ' (' + C.BRANCHCODE + ')' AS ZONE,
        (TS.SECTIONNAME + ' - ' + TS.DESCRIPTION) AS SECTIONNAME,TS.SECTIONID,  DD.PAYMENTMADE,DD.TOTALDEDUCTED AS TAXDEDUCTED,
        DD.TOTALDEDUCTED AS TAXREMITTED
       FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
       INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)   ON DD.BRANCHID = CB.BRANCHID
       INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
       INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON NE.DEDUCTEEID = D.DEDUCTEEID
       INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON TS.SECTIONID = DD.SECTIONID
       INNER JOIN DEDCHALINK DL WITH(NOLOCK)  ON DL.DEDUCTIONID = DD.DEDUCTIONID
       INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)  ON CD.CHALLANID = DL.CHALLANID
       INNER JOIN
       (
       SELECT CB.BRANCHNAME , CB.BRANCHCODE, C.BRANCHID FROM COMPANYBRANCH CB WITH(NOLOCK)
       LEFT JOIN COMPANYBRANCH C WITH(NOLOCK)  ON C.PARENTBRANCHID = CB.BRANCHID
       )C ON C.BRANCHID = CB.BRANCHID
       WHERE DD.FORMID IN (2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH  AND ISNULL(REPORTPAYMENTID,0) = 0
     )T
     GROUP BY ZONE,SECTIONNAME, SECTIONID, ENTRYTYPE
     ORDER BY ZONE,SECTIONNAME
    END
          END
     ELSE
  BEGIN
   SELECT ZONE, (BRANCHNAME + ' (' + BRANCHCODE +')' + ' - ' +TAN) BRANCH, CASE WHEN SECTIONID IN (3,5,17)
     THEN (SECTIONNAME + ' [' + (CASE WHEN ENTRYTYPE = 4 THEN 'CBS' ELSE 'MANUAL' END) + ']')
       ELSE SECTIONNAME END
        AS SECTIONNAME, SUM(PAYMENTMADE)PAYMENTMADE,
     SUM(TAXDEDUCTED)TAXDEDUCTED, SUM(TAXREMITTED)TAXREMITTED,REMITTEDDATE FROM
                 (
      SELECT 1 AS ENTRYTYPE, CB.BRANCHNAME AS ZONE,NAME,D.PAN,CB.BRANCHNAME,CB.BRANCHCODE, DR.TAN,
  CASE WHEN DD.SECTIONID IN (5,17) THEN 'TERM DEPOSIT'
      ELSE TR.DESCRIPTION + ' - ' + TR.BGLCODE
      END AS [NATURE OF SERVICE],(TS.SECTIONNAME + ' - ' + TS.DESCRIPTION) AS SECTIONNAME,TS.SECTIONID,
      DD.PAYMENTMADE,DD.TOTALDEDUCTED AS TAXDEDUCTED,
      DD.TOTALDEDUCTED AS TAXREMITTED, CD.CHALLANPAIDDATE AS REMITTEDDATE
      FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)
      INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON DD.BRANCHID = CB.BRANCHID
      INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)  ON CB.BRANCHID = BD.BRANCHID
      INNER JOIN DEDUCTOR DR WITH(NOLOCK)  ON DR.DEDUCTORID = BD.DEDUCTORID
      INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
      INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON NE.DEDUCTEEID = D.DEDUCTEEID
      INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON TS.SECTIONID = DD.SECTIONID
      INNER JOIN DEDCHALINK DL WITH(NOLOCK)  ON DL.DEDUCTIONID = DD.DEDUCTIONID
      INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)  ON CD.CHALLANID = DL.CHALLANID
      INNER JOIN REPORTPAYMENT RP WITH(NOLOCK)  ON RP.ID = DD.REPORTPAYMENTID
      INNER JOIN TDSRATE TR WITH(NOLOCK)  ON RP.BGLCODEID = TR.BGLCODEID
      WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID IN (2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND ISNULL(CB.NOCHALLANPAY,0) = 0 AND BD.QUARTER = @QUARTER
UNION ALL
     SELECT CASE WHEN ENTRYTYPE = 4 THEN 4 ELSE 1 END AS ENTRYTYPE, (SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID) AS ZONE,D.NAME, D.PAN,CB.BRANCHNAME, CB.BRANCHCODE,DR.TAN,
       'TERM DEPOSIT' AS [NATURE OF SERVICE],
     (TS.SECTIONNAME + ' - ' + TS.DESCRIPTION) AS SECTIONNAME, TS.SECTIONID, DD.PAYMENTMADE,DD.TOTALDEDUCTED AS TAXDEDUCTED,
     DD.TOTALDEDUCTED AS TAXREMITTED, CD.CHALLANPAIDDATE AS REMITTEDDATE
     FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)
      INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON DD.BRANCHID = CB.BRANCHID
      INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)  ON BD.BRANCHID = CB.BRANCHID
      INNER JOIN DEDUCTOR DR WITH(NOLOCK)  ON DR.DEDUCTORID = BD.DEDUCTORID
      INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
      INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON NE.DEDUCTEEID = D.DEDUCTEEID
      INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON TS.SECTIONID = DD.SECTIONID
      INNER JOIN DEDCHALINK DL WITH(NOLOCK)  ON DL.DEDUCTIONID = DD.DEDUCTIONID
      INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)  ON CD.CHALLANID = DL.CHALLANID
      WHERE DD.FORMID IN (2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND ISNULL(CB.NOCHALLANPAY,0) = 0 AND
           (CB.BRANCHID = @BRANCHID OR CB.PARENTBRANCHID = @BRANCHID) AND BD.QUARTER = @QUARTER AND ISNULL(REPORTPAYMENTID,0) = 0
      ) T
      GROUP BY ZONE, (BRANCHNAME + ' (' + BRANCHCODE +')' + ' - ' +TAN) , SECTIONNAME, SECTIONID, ENTRYTYPE,REMITTEDDATE
        END
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSDEDUCTEDREMITTEDFORBRANCHES')
DROP PROCEDURE USP_TDS_GETTDSDEDUCTEDREMITTEDFORBRANCHES
GO
CREATE PROCEDURE [USP_TDS_GETTDSDEDUCTEDREMITTEDFORBRANCHES]
@MONTH INT,
@BRANCHID INT,
@FORMID INT
AS
  BEGIN
  SELECT NE.ACCOUNTNUMBER, D.NAME, D.PAN,
    CASE WHEN DD.SECTIONID IN (5,17) THEN 'TERM DEPOSIT'
       ELSE TR.DESCRIPTION + ' - ' + TR.BGLCODE END AS [NATURE OF SERVICE],
         TS.SECTIONNAME, DD.PAYMENTMADE,DD.TAXRATE,DD.TOTALDEDUCTED AS TAXDEDUCTED,
      DD.TOTALDEDUCTED AS TAXREMITTED, CD.CHALLANPAIDDATE AS REMITTEDDATE
   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
  INNER JOIN DEDUCTEE D  WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)  ON NE.DEDUCTEEID = D.DEDUCTEEID
  INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON TS.SECTIONID = DD.SECTIONID
  INNER JOIN DEDCHALINK DL WITH(NOLOCK)  ON DL.DEDUCTIONID = DD.DEDUCTIONID
  INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)  ON CD.CHALLANID = DL.CHALLANID
  LEFT JOIN REPORTPAYMENT RP WITH(NOLOCK)  ON RP.ID = DD.REPORTPAYMENTID
  LEFT JOIN TDSRATE TR ON RP.BGLCODEID = TR.BGLCODEID
  WHERE DD.FORMID IN (2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID
  ORDER BY D.NAME, TS.SECTIONNAME
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSDEDUCTEDREMITTEDFORZONE')
DROP PROCEDURE USP_TDS_GETTDSDEDUCTEDREMITTEDFORZONE
GO
CREATE PROCEDURE [USP_TDS_GETTDSDEDUCTEDREMITTEDFORZONE]
@USERID INT,
@MONTH INT
AS
  BEGIN
    DECLARE @BRANCHID INT;
    SELECT @BRANCHID = BRANCHID FROM USERMASTER WHERE USERID = @USERID;
    SELECT CB.BRANCHNAME AS ZONE,NAME,(SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID = RP.BRANCHID)BRANCHNAME,
   (SELECT BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID = RP.BRANCHID)BRANCHCODE,
      (SELECT TOP 1 TAN FROM DEDUCTOR DR INNER JOIN BRANCHDEDUCTORS BD ON DR.DEDUCTORID = BD.DEDUCTORID WHERE BD.BRANCHID = RP.BRANCHID)TAN,
    CASE WHEN DD.SECTIONID IN (5,17) THEN 'TERM DEPOSIT'
         ELSE TR.DESCRIPTION + ' - ' + TR.BGLCODE
    END AS [NATURE OF SERVICE],TS.SECTIONNAME, DD.PAYMENTMADE,DD.TOTALDEDUCTED AS TAXDEDUCTED,
      DD.TOTALDEDUCTED AS TAXREMITTED, DD.DEDUCTEDDATE AS REMITTEDDATE
   FROM DEDUCTIONDETAIL DD  WITH(NOLOCK)
     INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON DD.BRANCHID = CB.BRANCHID
   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
     INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)   ON NE.DEDUCTEEID = D.DEDUCTEEID
     INNER JOIN TAXSECTIONS TS WITH(NOLOCK)   ON TS.SECTIONID = DD.SECTIONID
     INNER JOIN DEDCHALINK DL  WITH(NOLOCK)  ON DL.DEDUCTIONID = DD.DEDUCTIONID
     INNER JOIN CHALLANDETAIL CD  WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
     INNER JOIN REPORTPAYMENT RP WITH(NOLOCK)  ON RP.ID = DD.REPORTPAYMENTID
     INNER JOIN TDSRATE TR  WITH(NOLOCK)  ON RP.BGLCODEID = TR.BGLCODEID
     WHERE RP.PARENTBRANCHID = @BRANCHID AND DD.FORMID IN (2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND ISNULL(CB.NOCHALLANPAY,0) = 0
     UNION ALL
     SELECT (SELECT BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID) AS ZONE,D.NAME, CB.BRANCHNAME, CB.BRANCHCODE,
     (SELECT TOP 1 TAN FROM DEDUCTOR DR INNER JOIN BRANCHDEDUCTORS BD ON DR.DEDUCTORID = BD.DEDUCTORID WHERE BD.BRANCHID = CB.BRANCHID)TAN,
   CASE WHEN DD.SECTIONID IN (5,17) THEN 'TERM DEPOSIT'
        ELSE TR.DESCRIPTION + ' - ' + TR.BGLCODE
   END AS [NATURE OF SERVICE],TS.SECTIONNAME, DD.PAYMENTMADE,DD.TOTALDEDUCTED AS TAXDEDUCTED,
        DD.TOTALDEDUCTED AS TAXREMITTED, DD.DEDUCTEDDATE AS REMITTEDDATE
   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
     INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON DD.BRANCHID = CB.BRANCHID
     INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
     INNER JOIN NONEMPLOYEE NE  WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
     INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID
     INNER JOIN DEDCHALINK DL  WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
     INNER JOIN CHALLANDETAIL CD  WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
     LEFT JOIN REPORTPAYMENT RP  WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID
     LEFT JOIN TDSRATE TR  WITH(NOLOCK) ON RP.BGLCODEID = TR.BGLCODEID
     WHERE DD.FORMID IN (2,3) AND MONTH(DD.DEDUCTEDDATE) = @MONTH AND ISNULL(CB.NOCHALLANPAY,0) = 0 AND DD.REPORTPAYMENTID IS NULL AND CB.PARENTBRANCHID = @BRANCHID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSDETAIL')
DROP PROCEDURE USP_TDS_GETTDSDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETTDSDETAIL]
@QUARTER INT
AS
	BEGIN
	SELECT CB.BRANCHID, CB.BRANCHCODE, ISNULL(MAX(DD.SERIALNO),0) AS SERIALNO FROM COMPANYBRANCH CB WITH(NOLOCK)
			LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)  ON CB.BRANCHID = DD.BRANCHID
			WHERE DD.FORMID = 2 AND DD.QUARTER = @QUARTER
			GROUP BY CB.BRANCHCODE, CB.BRANCHID
			UNION
			SELECT BRANCHID, BRANCHCODE, 0 AS SERIALNO FROM COMPANYBRANCH WITH(NOLOCK)  WHERE BRANCHID NOT IN(SELECT BRANCHID FROM DEDUCTIONDETAIL WITH(NOLOCK) )
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSDETAILCOUNT')
DROP PROCEDURE USP_TDS_GETTDSDETAILCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETTDSDETAILCOUNT]
AS
	BEGIN
		SELECT COUNT(BGLCODEID) FROM TDSRATE WITH(NOLOCK)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTDSDetailMonthWise')
DROP PROCEDURE USP_TDS_GetTDSDetailMonthWise
GO
CREATE PROCEDURE [USP_TDS_GetTDSDetailMonthWise]      
@FROMDATE SMALLDATETIME,        
@TODATE SMALLDATETIME,    
@ISSUPERADMIN BIT,    
@BRANCHID INT  
AS
  BEGIN      
      DECLARE @SQLQUERY NVARCHAR(MAX);    
      SELECT @BRANCHID = CASE WHEN ISZORO = 1 THEN BRANCHID ELSE PARENTBRANCHID END FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID          
    IF(@ISSUPERADMIN = 1)
     BEGIN          
		   SET @SQLQUERY = 'SELECT C.PARENTBRANCHNAME +'' ('' + C.PARENTBRANCHCODE + '')'' AS ZONE, SUM(DD.TOTALDEDUCTED)TOTALDEDUCTED          
				FROM DEDUCTIONDETAIL DD          
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID = DD.BRANCHID         
				INNER JOIN REPORTPAYMENT RP WITH(NOLOCK)  ON RP.ID = DD.REPORTPAYMENTID AND RP.PARENTBRANCHID = DD.BRANCHID         
				INNER JOIN          
				(        
					SELECT CB.BRANCHID PARENTBRANCHID,CB.BRANCHID,CB.BRANCHNAME AS PARENTBRANCHNAME,CB.BRANCHCODE AS PARENTBRANCHCODE,       
					 CB.BRANCHNAME, CB.BRANCHCODE       
					 FROM COMPANYBRANCH CB  WITH(NOLOCK)   
					 WHERE ISNULL(CB.ISZORO,0) = 1      
				)C ON RP.PARENTBRANCHID = C.PARENTBRANCHID        
				 WHERE NOT((DD.ENTRYTYPE = 4 AND DD.SECTIONID = 5) OR (DD.ENTRYTYPE = 4 AND DD.SECTIONID = 17)) AND FORMID IN(2,3) AND     
				 DD.DEDUCTEDDATE BETWEEN ''' + CAST(@FROMDATE AS VARCHAR)+''' AND  ''' +CAST(@TODATE AS VARCHAR) +'''
				 GROUP BY C.PARENTBRANCHNAME +'' ('' + C.PARENTBRANCHCODE + '')'''       
     END
   ELSE
     BEGIN
		SET @SQLQUERY = 'SELECT CB.BRANCHNAME AS ZONE,R.BRANCHNAME, R.BRANCHCODE,SUM(DD.TOTALDEDUCTED)TAXDEDUCTED
				   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)                  
					 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID                
					 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID                
					 INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID                
					 INNER JOIN REPORTPAYMENT RP WITH(NOLOCK) ON RP.ID = DD.REPORTPAYMENTID                
					 INNER JOIN TDSRATE TR WITH(NOLOCK) ON RP.BGLCODEID = TR.BGLCODEID
					 LEFT JOIN      
					 (            
					   SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID FROM REPORTPAYMENT RP WITH(NOLOCK)            
						INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID            
					 )R                  
					 ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID           
					 WHERE NOT((DD.ENTRYTYPE = 4 AND DD.SECTIONID = 5) OR (DD.ENTRYTYPE = 4 AND DD.SECTIONID = 17)) AND DD.FORMID IN (2,3) AND 
						   DD.DEDUCTEDDATE BETWEEN ''' + CAST(@FROMDATE AS VARCHAR)+''' AND  ''' +CAST(@TODATE AS VARCHAR) +''' AND RP.PARENTBRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' 
					 GROUP BY CB.BRANCHNAME,R.BRANCHNAME,R.BRANCHCODE'
     END
	     EXEC SP_EXECUTESQL @SQLQUERY;    
--PRINT @SQLQUERY;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSDETAILS')
DROP PROCEDURE USP_TDS_GETTDSDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETTDSDETAILS] 
	@DEDUCTEEID INT,
	@FORMID INT,
	@ISSB BIT = 0
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY = 'SELECT ROUND(SUM(A.ORGINCOMETAX),0) INCOMETAX,SUM(A.ORGSURCHARGE) SURCHARGE,SUM(A.ORGEDUCATIONCESS) EDUCATIONCESS,ROUND(SUM(A.ORGTOTALDEDUCTED),0) TOTALDEDUCTED  
		FROM 
		 (
			 SELECT DISTINCT ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,QUARTER ,PARTPAYMENTID
			   FROM DEDUCTIONDETAIL WITH(NOLOCK)
			   WHERE  DEDUCTEEID = ' + CAST(@DEDUCTEEID AS VARCHAR) + ' AND FORMID = '+ CAST(@FORMID AS VARCHAR)
		IF(@ISSB = 1)
			SET @SQLQUERY = @SQLQUERY + ' AND TRANSSTATUS = 2 '
		 SET @SQLQUERY = @SQLQUERY + ' ) A'
		EXEC SP_EXECUTESQL @SQLQUERY 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSDETAILSFORTANACCOUNT')
DROP PROCEDURE USP_TDS_GETTDSDETAILSFORTANACCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETTDSDETAILSFORTANACCOUNT]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN
	 SELECT TOP 1 RB.BSRCODE,CD.BANKCHALLANNO,CONVERT(VARCHAR,CD.CHALLANPAIDDATE,103),CD.CHALLANTOTAL FROM CHALLANDETAIL CD WITH(NOLOCK)
	 INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID=DCL.CHALLANID
							   INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK)  ON DCL.DEDUCTIONID=DD.DEDUCTIONID
							   INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID=D.DEDUCTEEID
							   LEFT JOIN REMITTINGBANK RB WITH(NOLOCK)  ON RB.BANKID=CD.BANKID
							   WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
							   AND D.PAN<>'PANAPPLIED' AND D.PAN<>'PANINVALID' AND D.PAN<>'PANNOTAVBL'
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSGREATERAMT')
DROP PROCEDURE USP_TDS_GETTDSGREATERAMT
GO
--[USP_TDS_GETTDSGREATERAMT]  2,0
CREATE PROCEDURE [USP_TDS_GETTDSGREATERAMT]  
@QUARTER INT,  
@ISIB BIT  
AS  
 BEGIN  
    DECLARE @SQLQUERY NVARCHAR(MAX);  
    SET @SQLQUERY = 'SELECT DD.SERIALNO, BRANCHNAME, BRANCHCODE, D.NAME, D.PAN,  
              TS.SECTIONNAME AS SECTION, DD.TAXRATE, DD.TOTALDEDUCTED,DD.PAYMENTMADE AS [OLD INTEREST PAID AMOUNT],  
             CAST((TOTALDEDUCTED / (DD.TAXRATE/100)) AS NUMERIC(13,2)) [NEW INTEREST PAID AMOUNT], DD.DEDUCTEDDATE,  
             CASE WHEN NONDEDREASON = 0 THEN '''' ELSE ''PAN NOT AVAILABLE - HIGHER RATE (20%)'' END [DEDUCTION REMARK]  
             FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
             INNER JOIN COMPANYBRANCH CB  WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID  
             INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID  
             INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID  
             WHERE TOTALDEDUCTED > PAYMENTMADE  
             AND DD.FORMID <> 1 AND DD.SECTIONID IN (5, 17) AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '  
             AND PAYMENTMADE < 99999999999'  
    IF(@ISIB = 1)  
     BEGIN  
      SET @SQLQUERY = @SQLQUERY + ' AND ISNULL(CB.NOCHALLANPAY,0) = 0'  
     END  
    SET @SQLQUERY = @SQLQUERY + 'ORDER BY CB.BRANCHNAME, DD.SERIALNO'  
    EXEC SP_EXECUTESQL @SQLQUERY;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTdsMade')
DROP PROCEDURE USP_TDS_GetTdsMade
GO
CREATE PROCEDURE USP_TDS_GetTdsMade
@BRANCHID INT,  
@REFNO VARCHAR(20)  
AS  
 BEGIN  
  DECLARE @DEDUCTEEID INT, @TDSAMT NUMERIC(13,2);  
  SET @DEDUCTEEID = -1;  
  SET @TDSAMT=0;  
   IF EXISTS(SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)  WHERE REFERENCENO = @REFNO AND BRANCHID = @BRANCHID)  
   BEGIN  
    SELECT @DEDUCTEEID = DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)  WHERE REFERENCENO = @REFNO AND BRANCHID = @BRANCHID;  
    SELECT @TDSAMT = ISNULL(SUM(TOTALDEDUCTED),0) FROM DEDUCTIONDETAIL WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND DEDUCTEEID = @DEDUCTEEID  
   END  
 SELECT @TDSAMT;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTDSMadeForAll')
DROP PROCEDURE USP_TDS_GetTDSMadeForAll
GO
CREATE PROCEDURE USP_TDS_GetTDSMadeForAll  --'5163601',4050
 @BranchIDRefNo VARCHAR(MAX),
 @BRANCHID INT  
AS  
BEGIN  
 SELECT *,ROW_NUMBER() OVER(ORDER BY(SELECT 0)) AS ROWNUM INTO #TEMP   
 FROM UDF_TDS_SPLITSTRING(@BranchIDRefNo,',')  
 SELECT * INTO #REFERENCECODES FROM UDF_TDS_SPLITSTRING(@BranchIDRefNo,',') 
 SELECT DEDUCTEEID,BRANCHID,REFERENCENO 
 INTO #DED 
 FROM DEDUCTEE D WITH(NOLOCK) 
 INNER JOIN #REFERENCECODES R ON D.REFERENCENO = R.DATA
 WHERE BRANCHID = @BRANCHID
 SELECT SUM(TOTALDEDUCTED)TDSAMT,D.DEDUCTEEID 
 INTO #DEDDETAIL 
 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
 INNER JOIN #DED D ON D.DEDUCTEEID = DD.DEDUCTEEID
 WHERE D.BRANCHID = @BRANCHID AND FORMID = 1
 GROUP BY D.DEDUCTEEID
 UPDATE SALARYDETAIL  
 SET TOTALTDS = D.TDSAMT, TAXPAYABLE = NETTAXPAYABLE-D.TDSAMT  
 FROM SALARYDETAIL SD WITH(NOLOCK)
 INNER JOIN #DEDDETAIL D WITH(NOLOCK) ON SD.DEDUCTEEID = D.DEDUCTEEID  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSRATEBASEDONBGLCODE')
DROP PROCEDURE USP_TDS_GETTDSRATEBASEDONBGLCODE
GO
CREATE PROCEDURE [USP_TDS_GETTDSRATEBASEDONBGLCODE]
@BGLCODEID INT
AS
 BEGIN
			DECLARE @ISUSED BIT;
			SET @ISUSED =0;
			IF EXISTS(SELECT ID FROM REPORTPAYMENT WITH(NOLOCK) WHERE BGLCODEID = @BGLCODEID)
				BEGIN
					SET @ISUSED = 1;
				END
  SELECT BGLCODEID, BGLCODE, DESCRIPTION, ISNULL(SECTIONID,-1)SECTIONID,ISNULL(THRESHOLDLIMIT,0)THRESHOLDLIMIT,
  ISNULL(CATEGORY1,0)CATEGORY1, ISNULL(CATEGORY2, 0)CATEGORY2, @ISUSED AS ISUSED FROM TDSRATE WITH(NOLOCK)
  WHERE BGLCODEID = @BGLCODEID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSRATES')
DROP PROCEDURE USP_TDS_GETTDSRATES
GO
CREATE PROCEDURE [USP_TDS_GETTDSRATES]
@PAGINDEX INT,
@PAGESIZE INT
AS
 BEGIN
		DECLARE @FIRSTINDEX INT, @LASTINDEX INT, @SQLQUERY NVARCHAR(MAX);
		SELECT @FIRSTINDEX = (@PAGINDEX - 1) * @PAGESIZE;
		SELECT @LASTINDEX = (@PAGINDEX * @PAGESIZE + 1);
		SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER (ORDER BY BGLCODEID) ROWNUM, CASE WHEN (TS.SECTIONNAME IS NULL) THEN '''' ELSE (TS.SECTIONNAME + ''-''+ TS.DESCRIPTION) END AS SECTIONNAME,
														TR.BGLCODEID, TR.BGLCODE, TR.DESCRIPTION,
												  THRESHOLDLIMIT, CATEGORY1, CATEGORY2
												  INTO #TDSRATE
												  FROM TDSRATE  TR WITH(NOLOCK)
												  LEFT JOIN TAXSECTIONS TS  WITH(NOLOCK)  ON TS.SECTIONID = TR.SECTIONID'
		SET @SQLQUERY = @SQLQUERY + '; SELECT * FROM #TDSRATE  WHERE ROWNUM > '+ CAST(@FIRSTINDEX AS VARCHAR) +' AND ROWNUM < '+ CAST(@LASTINDEX AS VARCHAR)
		EXEC SP_EXECUTESQL @SQLQUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTDSRECORD')
DROP PROCEDURE USP_TDS_GETTDSRECORD
GO
CREATE PROCEDURE [USP_TDS_GETTDSRECORD]
@BRANCHID INT,
@MONTH INT
AS
 BEGIN
   DECLARE @BRANCHDETAIL TABLE(BRANCHID INT, BRANCHNAME VARCHAR(150), PARENTBRANCHNAME VARCHAR(150));
   INSERT INTO @BRANCHDETAIL
   SELECT CB.BRANCHID,CB.BRANCHNAME+' ('+CB.BRANCHCODE+ ')' AS BRANCHNAME ,C.BRANCHNAME + ' ('+ C.BRANCHCODE +')' AS PARENTBRANCHNAME FROM COMPANYBRANCH CB WITH(NOLOCK)
   INNER JOIN COMPANYBRANCH C WITH(NOLOCK)  ON CB.PARENTBRANCHID = C.BRANCHID
   WHERE CB.PARENTBASEID LIKE (SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID)+ '%'
   SELECT DED.DEDUCTIONID,  DED.BRANCHNAME, DED.PARENTBRANCHNAME, DED.TAN, DED.FORMTYPE, TOT.TOTALTAXDEDUCTED,ISNULL(TOT.TOTALPARKEDAMOUNT,0)TOTALPARKEDAMOUNT,
   DED.CHALLANID,ISNULL(DED.BANKCHALLANNO,'-NA-')BANKCHALLANNO, DED.CHALLANPAIDDATE, ISNULL(DED.DEDUCTEECODE,'-NA-')DEDUCTEECODE, ISNULL(DED.ADDITIONALFIELD1,'') AS ACCOUNTNUMBER, DED.NAME, DED.DEDUCTEDDATE, DED.SECTIONNAME, DED.TAXRATE, DED.PAYMENTMADE,
   DED.TOTALDEDUCTED FROM
   (SELECT DEDTOTAL.BRANCHID, DEDTOTAL.FORMTYPE, SUM(DEDTOTAL.TOTALDEDUCTED) AS TOTALTAXDEDUCTED,PATOTAL.TOTALPARKEDAMOUNT
   FROM
     (SELECT DD.BRANCHID, DD.TOTALDEDUCTED,
   FORMTYPE =CASE
         WHEN (DD.FORMID = 2 AND DD.SECTIONID = 5 AND DD.ENTRYTYPE = 4) THEN '26QI'
         WHEN (DD.FORMID = 2 AND ((DD.SECTIONID = 5 AND DD.ENTRYTYPE <> 4 AND DD.ENTRYTYPE = 1 AND CD.ISAUTOGENERATED = 1) OR (DD.SECTIONID <> 5 AND DD.ENTRYTYPE = 1 AND CD.ISAUTOGENERATED = 1) OR DD.ENTRYTYPE <> 1)) THEN '26QV'
         WHEN (DD.FORMID = 3 AND (DD.ENTRYTYPE = 1 AND CD.ISAUTOGENERATED = 1) OR (DD.ENTRYTYPE <> 1)) THEN '27Q'
       END ,
  CD.ISAUTOGENERATED
   FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
   INNER JOIN @BRANCHDETAIL BD ON BD.BRANCHID=DD.BRANCHID
   LEFT JOIN DEDCHALINK  DL WITH(NOLOCK)  ON DL.DEDUCTIONID = DD.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID
   LEFT JOIN
   (SELECT DISTINCT CHALLANID, BRANCHID , FORMID, QUARTER, ISAUTOGENERATED FROM CHALLANDETAIL WHERE ISAUTOGENERATED = 1 AND BRANCHID = @BRANCHID)CD
   ON DL.CHALLANID = CD.CHALLANID
   WHERE MONTH(DD.PAYMENTDATE) = @MONTH AND   CD.ISAUTOGENERATED = 1
     )DEDTOTAL
     LEFT JOIN
     (
      SELECT PA.AMOUNT AS TOTALPARKEDAMOUNT, PA.BRANCHID , PA.FORMTYPE FROM PARKEDAMOUNT PA  WITH(NOLOCK)
      INNER JOIN @BRANCHDETAIL BD ON BD.BRANCHID = PA.BRANCHID
      WHERE PA.MONTHYEAR LIKE  CAST(@MONTH AS VARCHAR) + '%'
     )PATOTAL
     ON DEDTOTAL.BRANCHID = PATOTAL.BRANCHID AND DEDTOTAL.FORMTYPE = PATOTAL.FORMTYPE
     GROUP BY DEDTOTAL.BRANCHID, DEDTOTAL.FORMTYPE, PATOTAL.TOTALPARKEDAMOUNT
   )TOT
   INNER JOIN
   (
     SELECT DISTINCT DD.DEDUCTIONID, DD.BRANCHID, BD.BRANCHNAME, BD.PARENTBRANCHNAME,DDET.TAN, FORMTYPE =
         CASE
            WHEN (DD.FORMID = 2 AND DD.SECTIONID = 5 AND DD.ENTRYTYPE = 4) THEN '26QI'
   WHEN (DD.FORMID = 2 AND ((DD.SECTIONID = 5 AND DD.ENTRYTYPE <> 4 AND DD.ENTRYTYPE = 1 AND CD.ISAUTOGENERATED = 1) OR (DD.SECTIONID <> 5 AND DD.ENTRYTYPE = 1 AND CD.ISAUTOGENERATED = 1) OR DD.ENTRYTYPE <> 1)) THEN '26QV'
   WHEN (DD.FORMID = 3 AND (DD.ENTRYTYPE = 1 AND CD.ISAUTOGENERATED = 1) OR (DD.ENTRYTYPE <> 1)) THEN '27Q'
         END,
           CD.CHALLANID, CD.CHALLANPAIDDATE, CD.BANKCHALLANNO, DEDUCTEECODE =
           CASE
         WHEN(CD.ISCOMPANY = 1 ) THEN 'COMPANIES'
         WHEN(CD.ISCOMPANY = 0) THEN 'NON-COMPANIES'
           END,
           DD.ADDITIONALFIELD1, D.NAME,DD.DEDUCTEDDATE, TS.SECTIONNAME, DD.TAXRATE, DD.PAYMENTMADE, DD.TOTALDEDUCTED
     FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
     INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
     INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID
     INNER JOIN @BRANCHDETAIL BD  ON BD.BRANCHID = DD.BRANCHID
     INNER JOIN BRANCHDEDUCTORS BDED WITH(NOLOCK) ON BDED.BRANCHID = DD.BRANCHID
     INNER JOIN DEDUCTOR DDET WITH(NOLOCK) ON DDET.DEDUCTORID = BDED.DEDUCTORID
     LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID
     LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID
     WHERE MONTH(DD.PAYMENTDATE) = @MONTH AND DD.FORMID IN (2,3)
    )DED
   ON TOT.BRANCHID = DED.BRANCHID AND TOT.FORMTYPE = DED.FORMTYPE
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTEMPCHALLANDETAILS')
DROP PROCEDURE USP_TDS_GETTEMPCHALLANDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETTEMPCHALLANDETAILS]
@STARTROW INT,  
@PAGESIZE INT  
AS  
	BEGIN  
		DECLARE @FIRSTREC INT;      
		DECLARE @LASTREC INT;  
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE      
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
		WITH TEMP AS   
		(  
			SELECT ROW_NUMBER() OVER(ORDER BY ID) AS ROWNO,ID,CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME,CMP.BRANCHID, QUARTER,
					CASE WHEN TS.SECTIONID IN (1,2) THEN TS.SECTIONNAME + '-' + TS.TAXNAME 
						 WHEN TS.SECTIONNAME IN ('194I(A)','194I(B)') THEN ('194I' + ' (' + TS.TAXNAME +')' )
						 ELSE TS.SECTIONNAME 
						 END AS SECTIONNAME,
					TS.SECTIONID ,DEDUCTEECODE,TOTALDEDUCTED 
			FROM CHALLANMAKEPAYMENT CMP WITH(NOLOCK)  
				INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON CMP.SECTIONID=TS.SECTIONID  
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID=CMP.BRANCHID  
		)  
		SELECT TOP (@LASTREC-1) *      
		FROM TEMP      
		WHERE ROWNO > @FIRSTREC       
		AND ROWNO < @LASTREC
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTEMPCHALLANDETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETTEMPCHALLANDETAILSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETTEMPCHALLANDETAILSCOUNT]
AS
BEGIN
SELECT COUNT(ID) FROM CHALLANMAKEPAYMENT WITH(NOLOCK)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTEMPCHALLANDETAILSFORREPORT')
DROP PROCEDURE USP_TDS_GETTEMPCHALLANDETAILSFORREPORT
GO
CREATE PROCEDURE [USP_TDS_GETTEMPCHALLANDETAILSFORREPORT]
AS
BEGIN
SELECT ROW_NUMBER() OVER(ORDER BY ID) AS ID,CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHID,QUARTER,TS.SECTIONNAME,CASE WHEN DEDUCTEECODE=1 THEN 'COMPANY' ELSE 'NONCOMPANY' END DEDUCTEECODE,TOTALDEDUCTED FROM CHALLANMAKEPAYMENT CMP
                          INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON CMP.SECTIONID=TS.SECTIONID
                          INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID= CMP.BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTEXT')
DROP PROCEDURE USP_TDS_GETTEXT
GO
CREATE PROCEDURE [USP_TDS_GETTEXT]
@PAGEINDEX INT,
@PAGESIZE INT,
@ISCORRECT BIT=NULL,
@MONTHID INT,
@BRANCHID INT
AS
BEGIN
 DECLARE @FIRSTREC INT, @LASTREC INT;
 DECLARE @QUERY NVARCHAR(MAX);
 SELECT @FIRSTREC = (@PAGEINDEX - 1) * @PAGESIZE;
 SELECT @LASTREC = (@PAGEINDEX * @PAGESIZE + 1);
 SET @QUERY='SELECT ROWNUM = IDENTITY(INT,1,1),CAST(ID AS INT) ID, TR.TEXT, TR.ISCORRECT
    INTO #TEMP
    FROM TEXTRECORDS TR   WITH(NOLOCK)
    WHERE MONTHID='+ CAST(@MONTHID AS VARCHAR(10)) ;
    IF(@ISCORRECT IS NOT NULL)
    BEGIN
     SET @QUERY = @QUERY + ' AND ISCORRECT='+ CAST(@ISCORRECT AS VARCHAR(10));
    END
 SET @QUERY = @QUERY + ';ALTER TABLE #TEMP ADD PRIMARY KEY (ROWNUM ); SELECT * FROM #TEMP WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR(10)) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR(10));
 EXEC SP_EXECUTESQL @QUERY;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTEXTCOUNT')
DROP PROCEDURE USP_TDS_GETTEXTCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETTEXTCOUNT]
@BRANCHID INT,
@MONTHID INT,
@ISCORRECT BIT = NULL
AS
BEGIN
 IF(@ISCORRECT IS NOT NULL)
  BEGIN
   SELECT COUNT(ID) FROM TEXTRECORDS WITH(NOLOCK)  WHERE  ISCORRECT=@ISCORRECT AND MONTHID=@MONTHID
  END
 ELSE
  BEGIN
   SELECT COUNT(ID) FROM TEXTRECORDS WITH(NOLOCK)  WHERE  MONTHID=@MONTHID
  END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTextFile')
DROP PROCEDURE USP_TDS_GetTextFile
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetTextFile]
    @MONTH INT
AS
BEGIN
    SELECT * INTO #DED FROM
    (
	   SELECT D.NAME, D.PAN, D.DEDUCTEEID, 2 AS DEDUCTEECODE, D.BRANCHID  
	   FROM DEDUCTEE D WITH(NOLOCK)
		  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
	   UNION
	   SELECT D.NAME, D.PAN, D.DEDUCTEEID, 2 AS DEDUCTEECODE, D.BRANCHID 
	   FROM DEDUCTEE D WITH(NOLOCK)
	   INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
    )D
    SELECT DEDUCTIONID, SERIALNO, DEDUCTEEID, SECTIONID, TAXRATE, TOTALDEDUCTED, BRANCHID, DEDUCTEDDATE
    INTO #DEDUCTIONDETAIL
    FROM DEDUCTIONDETAIL WITH(NOLOCK)
    WHERE MONTH(DEDUCTEDDATE) = @MONTH
    SELECT DL.DEDUCTIONID, DL.CHALLANID, DL.BRANCHID
    INTO #DEDCHALINK
    FROM DEDCHALINK DL WITH(NOLOCK)
		INNER JOIN #DEDUCTIONDETAIL DD ON DL.DEDUCTIONID = DD.DEDUCTIONID
    SELECT DD.DEDUCTIONID, DD.SERIALNO, DD.DEDUCTEEID, CD.CHALLANID, 
		   CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHCODE, CB.BRANCHID,
		   TOTALDEDUCTED, CD.BANKCHALLANNO, CD.CHALLANTOTAL, CD.SERIALNO AS CSERIALNO, DD.TAXRATE,
		   CD.CHALLANPAIDDATE
    INTO #TEMPDEDUCTION  
    FROM #DEDUCTIONDETAIL DD WITH(NOLOCK)  
	   INNER JOIN #DEDCHALINK DL WITH(NOLOCK)  ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID   
	   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)  ON CB.BRANCHID=DD.BRANCHID   
	   INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)  ON CD.BRANCHID = DD.BRANCHID AND CD.CHALLANID= DL.CHALLANID  
    WHERE MONTH(DD.DEDUCTEDDATE) = @MONTH 
	   AND CD.ISAUTOGENERATED = 1 
	   AND CD.ISOLTASINCLUDED = 0 
	   AND (CD.ISTTUMINCLUDED = 1 OR CD.ISTTUMINCLUDED = 0)
	SELECT ROW_NUMBER() OVER(ORDER BY TD.DEDUCTIONID) AS SrNo, 
			TD.DEDUCTIONID, TD.SERIALNO, TD.CHALLANID, D.NAME, D.PAN,
			TD.BRANCHNAME, TD.BRANCHCODE, TD.BRANCHID, 
			TOTALDEDUCTED, TD.BANKCHALLANNO, TD.CHALLANTOTAL, TD.CSERIALNO, TD.TAXRATE,
			CONVERT(VARCHAR(10), TD.CHALLANPAIDDATE, 103) AS CHALLANPAIDDATE
	INTO #TEMPCHAPAY
	FROM #TEMPDEDUCTION TD
	   INNER JOIN #DED D ON D.DEDUCTEEID = TD.DEDUCTEEID AND TD.BRANCHID = D.BRANCHID
    SELECT T.BRANCHCODE + '|' + CAST(T.SrNo AS VARCHAR) + '|' + CAST(T.SERIALNO AS VARCHAR) + '|' + CAST(T.NAME AS VARCHAR) + '|' + T.PAN + '|' +
	   CAST(T.TOTALDEDUCTED AS VARCHAR) + '|' + CAST(T.TAXRATE AS VARCHAR) + '|' + CAST(CSERIALNO AS VARCHAR) + '|' + 
	   CAST(ISNULL(T.BANKCHALLANNO,'') AS VARCHAR) + '|' + 
	   CAST(ISNULL(T.CHALLANPAIDDATE,'') AS VARCHAR) + '|' + CAST(T.CHALLANTOTAL AS VARCHAR) AS TEXTFILE  
    FROM  #TEMPCHAPAY T 
    IF OBJECT_ID('TEMPDB..#DED') IS NOT NULL
	   DROP TABLE #DED
    IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
	   DROP TABLE #DEDUCTIONDETAIL
    IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
	   DROP TABLE #DEDCHALINK
    IF OBJECT_ID('TEMPDB..#TEMPDEDUCTION') IS NOT NULL
	   DROP TABLE #TEMPDEDUCTION
    IF OBJECT_ID('TEMPDB..#TEMPCHAPAY') IS NOT NULL
	   DROP TABLE #TEMPCHAPAY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTextFilesChallanSerialNo')
DROP PROCEDURE USP_TDS_GetTextFilesChallanSerialNo
GO
CREATE PROCEDURE USP_TDS_GetTextFilesChallanSerialNo
@BRANCHCODES NVARCHAR(MAX),    
@QUARTER INT    
AS    
BEGIN   
	SELECT * INTO #BRANCHES FROM  dbo.UDF_TDS_SplitString(@BRANCHCODES,',')   
	SELECT BRANCHID, QUARTER, FORMID, SERIALNO 
	INTO #CHALLANQTR
	FROM CHALLANDETAIL CD WITH(NOLOCK) 
	WHERE CD.QUARTER = @QUARTER
	SELECT CB.BRANCHCODE,CB.BRANCHID,QUARTER,FORMID,SERIALNO 
	INTO #CHALLANSR
	FROM #CHALLANQTR CD WITH(NOLOCK) 
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = CD.BRANCHID
		INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE
	WHERE CD.QUARTER = @QUARTER
	SELECT BRANCHCODE, BRANCHID, QUARTER, FORMID, ISNULL(MAX(SERIALNO),0)AS SERIALNO 
	INTO #CHALLANS
	FROM #CHALLANSR
	GROUP BY BRANCHCODE,BRANCHID,FORMID,QUARTER
	DROP TABLE #CHALLANQTR
	DROP TABLE #CHALLANSR
	SELECT 2 FORMID, @QUARTER QUARTER
	INTO #FQ 
	UNION              
	SELECT 3 FORMID,@QUARTER QUARTER
	SELECT MAX(SERIALNO)SERIALNO, QUARTER ,BRANCHCODE,BRANCHID,FORMID
	FROM
	(  
		SELECT 0 AS SERIALNO, TB.QUARTER, CB.BRANCHCODE, CB.BRANCHID,TB.FORMID
		FROM COMPANYBRANCH CB WITH(NOLOCK)     
			INNER JOIN #BRANCHES B ON CB.BRANCHCODE = B.DATA       
			FULL JOIN #FQ AS TB ON 1=1       
		UNION
		SELECT SERIALNO, QUARTER, BRANCHCODE, BRANCHID, FORMID  
		FROM #CHALLANS        
	 )T
	GROUP BY  QUARTER ,BRANCHCODE,BRANCHID,FORMID
	DROP TABLE #CHALLANS
	DROP TABLE #BRANCHES
	DROP TABLE #FQ
END  

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTextFilesDeductionSerialNo')
DROP PROCEDURE USP_TDS_GetTextFilesDeductionSerialNo
GO
CREATE PROCEDURE USP_TDS_GetTextFilesDeductionSerialNo
@BRANCHCODES NVARCHAR(MAX),    
@QUARTER INT    
AS    
BEGIN   
	SELECT * INTO #BRANCHES FROM  dbo.UDF_TDS_SplitString(@BRANCHCODES,',')   
	SELECT BRANCHID, QUARTER, FORMID, SERIALNO 
	INTO #DEDUCTIONQTR
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
	WHERE DD.QUARTER = @QUARTER
	SELECT CB.BRANCHCODE,CB.BRANCHID,QUARTER,FORMID,SERIALNO 
	INTO #DEDUCTIONSR
	FROM #DEDUCTIONQTR DD WITH(NOLOCK) 
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID
		INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE
	WHERE DD.QUARTER = @QUARTER
	SELECT BRANCHCODE, BRANCHID, QUARTER, FORMID, ISNULL(MAX(SERIALNO),0)AS SERIALNO 
	INTO #DEDUCTIONS
	FROM #DEDUCTIONSR
	GROUP BY BRANCHCODE,BRANCHID,FORMID,QUARTER
	DROP TABLE #DEDUCTIONQTR
	DROP TABLE #DEDUCTIONSR
	SELECT 2 FORMID, @QUARTER QUARTER
	INTO #FQ 
	UNION              
	SELECT 3 FORMID,@QUARTER QUARTER
	SELECT MAX(SERIALNO)SERIALNO, QUARTER ,BRANCHCODE,BRANCHID,FORMID
	FROM
	(  
		SELECT 0 AS SERIALNO, TB.QUARTER, CB.BRANCHCODE, CB.BRANCHID,TB.FORMID
		FROM COMPANYBRANCH CB WITH(NOLOCK)     
			INNER JOIN #BRANCHES B ON CB.BRANCHCODE = B.DATA       
			FULL JOIN #FQ AS TB ON 1=1       
		UNION
		SELECT SERIALNO, QUARTER, BRANCHCODE, BRANCHID, FORMID  
		FROM #DEDUCTIONS        
	 )T
	GROUP BY  QUARTER ,BRANCHCODE,BRANCHID,FORMID
	DROP TABLE #DEDUCTIONS
	DROP TABLE #BRANCHES
	DROP TABLE #FQ
END  

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTEXTFILESDEDUCTIONSERIALNOF011')
DROP PROCEDURE USP_TDS_GETTEXTFILESDEDUCTIONSERIALNOF011
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETTEXTFILESDEDUCTIONSERIALNOF011]
	@BRANCHCODES NVARCHAR(MAX),      
	@QUARTER INT      
AS      
	BEGIN     
		SELECT * INTO #BRANCHES FROM  DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')  
		SELECT ISNULL(MAX(SERIALNO),0)AS SERIALNO, DD.QUARTER , BRANCHCODE, CB.BRANCHID, DD.FORMID  
		INTO #DEDUCTIONDETAIL
		FROM DEDUCTIONDETAIL DD     
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID=CB.BRANCHID    
			INNER JOIN #BRANCHES B ON B.DATA=CB.BRANCHCODE     
		WHERE DD.QUARTER = @QUARTER       
		GROUP BY BRANCHCODE, CB.BRANCHID, DD.FORMID, DD.QUARTER     
		SELECT MAX(SERIALNO)SERIALNO, QUARTER ,BRANCHCODE, BRANCHID, FORMID  
		FROM  
		(    
		SELECT 0 AS SERIALNO, TB.QUARTER, CB.BRANCHCODE, CB.BRANCHID, TB.FORMID  
		FROM COMPANYBRANCH CB WITH(NOLOCK)       
			INNER JOIN #BRANCHES B ON CB.BRANCHCODE = B.DATA         
		FULL JOIN  
		(             
		SELECT 1 FORMID, @QUARTER QUARTER    
		) AS TB ON 1=1         
		UNION ALL  
		SELECT *FROM #DEDUCTIONDETAIL  
		)T  
		GROUP BY  QUARTER, BRANCHCODE, BRANCHID, FORMID  
		DROP TABLE #DEDUCTIONDETAIL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTEXTIMPORTDETAIL')
DROP PROCEDURE USP_TDS_GETTEXTIMPORTDETAIL
GO
CREATE PROCEDURE [USP_TDS_GETTEXTIMPORTDETAIL]
@MONTH INT,
@ISPARKEDAMOUNT BIT
AS
BEGIN
	IF(@ISPARKEDAMOUNT=1)
	BEGIN
		SELECT COUNT(*) FROM PARKEDAMOUNT WITH(NOLOCK) WHERE MONTHYEAR=@MONTH
    END
	ELSE
		BEGIN
			SELECT 0
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTEXTONBRANCHID')
DROP PROCEDURE USP_TDS_GETTEXTONBRANCHID
GO
CREATE PROCEDURE [USP_TDS_GETTEXTONBRANCHID]
@BRANCHID INT,
@MONTHID INT
AS
BEGIN
 SELECT ID, TEXT , ISCORRECT FROM TEXTRECORDS WITH(NOLOCK) WHERE  MONTHID=@MONTHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTEXTONID')
DROP PROCEDURE USP_TDS_GETTEXTONID
GO
CREATE PROCEDURE [USP_TDS_GETTEXTONID]
@ID INT,
@MONTHID INT,
@BRANCHID INT
AS
BEGIN
 SELECT ID, TEXT, ISCORRECT FROM TEXTRECORDS WITH(NOLOCK) WHERE ID=@ID  AND MONTHID=@MONTHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTINDEDUCTEESCOUNT')
DROP PROCEDURE USP_TDS_GETTINDEDUCTEESCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETTINDEDUCTEESCOUNT]
@BRANCHID INT
AS
SELECT COUNT(NAME) DEDCOUNT FROM FORM16TINMST WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTOKENNO')
DROP PROCEDURE USP_TDS_GETTOKENNO
GO
CREATE PROCEDURE USP_TDS_GETTOKENNO 
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,  
@DATABASE VARCHAR(75)  
AS  
   BEGIN  
      DECLARE @SQLQUERY NVARCHAR(MAX);  
	  DECLARE @BRANCHCODE VARCHAR(10);  
	  IF NOT EXISTS(SELECT ACKID FROM ACKNO WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
									QUARTER = CASE WHEN @QUARTER = 4 THEN 1 ELSE @QUARTER - 1 END AND ISNULL(TOKENNO,'') <> '')
	    BEGIN
		  SELECT @BRANCHCODE = BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID; 
		  SET @SQLQUERY = 'SELECT ORGNUM FROM '+@DATABASE+'.DBO.ACKNO A  
					INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH CB ON A.BRANCHID = CB.BRANCHID  
					INNER JOIN 
					(
						 SELECT MAX(QUARTER)QUARTER FROM '+@DATABASE+'.DBO.ACKNO A
					   INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH CB ON A.BRANCHID = CB.BRANCHID  
					  WHERE CB.BRANCHCODE =' + CAST(@BRANCHCODE AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND LEN(ISNULL(ORGNUM,'''')) > 0 
					) AA ON A.QUARTER = AA.QUARTER
			  WHERE CB.BRANCHCODE = ' + CAST(@BRANCHCODE AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) 
		  EXEC SP_EXECUTESQL @SQLQUERY;  
		END
	ELSE
		BEGIN
			SELECT TOKENNO FROM ACKNO WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND
										QUARTER = CASE WHEN @QUARTER = 4 THEN 1 ELSE @QUARTER - 1 END
		END
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTOTALDEDUCTEDAMOUNT')
DROP PROCEDURE USP_TDS_GETTOTALDEDUCTEDAMOUNT
GO
CREATE PROCEDURE [USP_TDS_GETTOTALDEDUCTEDAMOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@BANKCHALLANNO VARCHAR(5),
	@DEDUCTEEID INT,
	@TDSCERTNO VARCHAR(50)
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY ='SELECT SUM(TOTALDEDUCTED) FROM VWFORM16A WITH(NOLOCK) WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID='+CAST(@FORMID AS VARCHAR)+' AND';
		IF(@QUARTER=-1 AND @SECTIONID=-1 AND @BANKCHALLANNO='' AND @DEDUCTEEID=-1 AND @TDSCERTNO='')
			BEGIN
				SET @SQLQUERY=SUBSTRING(@SQLQUERY,0,LEN(@SQLQUERY)-3);
				SET @SQLQUERY=@SQLQUERY+' GROUP BY PRINTCERTIFICATENO';
				EXEC SP_EXECUTESQL @SQLQUERY;
			END
		ELSE
			BEGIN
				IF(@QUARTER<>-1)
					BEGIN
						SET @SQLQUERY=@SQLQUERY+' QUARTER='+CAST(@QUARTER AS VARCHAR) + ' AND';
					END
				IF(@SECTIONID<>-1)
					BEGIN
						SET @SQLQUERY=@SQLQUERY+' SECTIONID='+CAST(@SECTIONID AS VARCHAR) + ' AND';
					END
				IF(@BANKCHALLANNO<>'')
					BEGIN
						SET @SQLQUERY=@SQLQUERY+' BANKCHALLANNO='+ ''''+@BANKCHALLANNO+''''  + ' AND'
					END
				IF(@DEDUCTEEID<>-1)
					BEGIN
						SET @SQLQUERY=@SQLQUERY+' DEDUCTEEID='+CAST(@DEDUCTEEID AS VARCHAR) + ' AND';
					END
				IF(@TDSCERTNO<>'')
					BEGIN
						SET @SQLQUERY=@SQLQUERY+' PRINTCERTIFICATENO='+''''+@TDSCERTNO+'''' + ' AND';
					END
				SET @SQLQUERY=SUBSTRING(@SQLQUERY,0,LEN(@SQLQUERY)-3);
				SET @SQLQUERY=@SQLQUERY+ ' GROUP BY PRINTCERTIFICATENO';
				EXEC SP_EXECUTESQL @SQLQUERY
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTotalGrossSalary')
DROP PROCEDURE USP_TDS_GetTotalGrossSalary
GO
CREATE PROCEDURE USP_TDS_GetTotalGrossSalary
@COMID INT,  
@BRANCHID INT            
AS            
  BEGIN            
	DECLARE @INCLUDEUS10 NUMERIC(13,2), @BASICSALARY NUMERIC(13,2);  
	DECLARE @ET NUMERIC(13,2), @PT NUMERIC(13,2);      
	SET @INCLUDEUS10 = 0; SET @BASICSALARY= 0; SET @ET = 0; SET @PT = 0;  
        SELECT @BASICSALARY = SUM(NETAMT) FROM
       ( 
			SELECT CASE WHEN EARNING = 0 THEN -1 * (SUM((ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) + ISNULL(GROSSAMT3,0) - ISNULL(SD.EXEMPTAMT,0)) - ISNULL(SD.RECOVERYAMT,0)))  
				ELSE SUM((ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) + ISNULL(GROSSAMT3,0) - ISNULL(SD.RECOVERYAMT,0)) - ISNULL(SD.EXEMPTAMT,0)) END AS NETAMT
			 FROM SALDETAIL SD  
			INNER JOIN SALARYHEAD SH ON SH.SALARYHEADID = SD.SALARYHEADID    
			INNER JOIN LINKTOTC L ON L.COMID = SD.COMID  
			INNER JOIN EMPWORKMONTH EM ON EM.COMID = L.COMID AND EM.BRANCHID = L.BRANCHID AND EM.MONTHID = SD.MONTHID  
			WHERE SD.COMID = @COMID AND ISNULL(INCLUDEUS10,0) = 0 AND ISNULL(SH.C80CID,-1) <=0 AND L.BRANCHID = @BRANCHID AND ISNULL(INCLUDEINTAX,0) = 1  
			GROUP BY EARNING 
		)T 
		SELECT @INCLUDEUS10 = SUM(NETAMT) FROM
		(
			SELECT CASE WHEN EARNING = 0 THEN -1 * (SUM((ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) + ISNULL(GROSSAMT3,0)  - ISNULL(SD.RECOVERYAMT,0)) - ISNULL(SD.EXEMPTAMT,0)))  
					ELSE SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) + ISNULL(GROSSAMT3,0) - ISNULL(SD.RECOVERYAMT,0) - ISNULL(SD.EXEMPTAMT,0)) END AS NETAMT
		     FROM SALDETAIL SD  
			INNER JOIN SALARYHEAD SH ON SH.SALARYHEADID = SD.SALARYHEADID  
			INNER JOIN LINKTOTC L ON L.COMID = SD.COMID  
			INNER JOIN EMPWORKMONTH EM ON EM.COMID = L.COMID AND EM.BRANCHID = L.BRANCHID AND EM.MONTHID = SD.MONTHID      
			WHERE SD.COMID = @COMID AND ISNULL(INCLUDEUS10,0) = 1 AND ISNULL(SH.C80CID,-1) <=0 AND L.BRANCHID = @BRANCHID  AND ISNULL(INCLUDEINTAX,0) = 1  
			GROUP BY EARNING 
	   )T
		SELECT @ET = SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0)) - SUM(ISNULL(RECOVERYAMT,0)) FROM SECTION16DET SD
		RIGHT JOIN LINKTOTC L ON L.COMID = SD.COMID  
		INNER JOIN EMPWORKMONTH EM ON EM.COMID = L.COMID AND EM.BRANCHID = L.BRANCHID AND EM.MONTHID = SD.MONTHID      
		WHERE SD.COMID = @COMID AND L.BRANCHID = @BRANCHID AND SALARYSECTIONID = 1
		GROUP BY SALARYSECTIONID  
		SELECT @PT = SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0)) - SUM(ISNULL(RECOVERYAMT,0)) FROM SECTION16DET SD     
		RIGHT JOIN LINKTOTC L ON L.COMID = SD.COMID  
		INNER JOIN EMPWORKMONTH EM ON EM.COMID = L.COMID AND EM.BRANCHID = L.BRANCHID AND EM.MONTHID = SD.MONTHID      
		WHERE SD.COMID = @COMID AND L.BRANCHID = @BRANCHID AND SALARYSECTIONID = 2
		GROUP BY SALARYSECTIONID  
		SELECT CASE WHEN ISNULL(@BASICSALARY,0) < 0 THEN 0 ELSE ISNULL(@BASICSALARY,0) END AS BASIC ,   
		 CASE WHEN ISNULL(@INCLUDEUS10,0) < 0 THEN 0 ELSE ISNULL(@INCLUDEUS10,0) END AS INCLUDEUS10 ,  
		 CASE WHEN ISNULL(@ET,0) < 0 THEN 0 ELSE ISNULL(@ET,0) END AS ET,   
		 CASE WHEN ISNULL(@PT,0) < 0 THEN 0 ELSE ISNULL(@PT,0) END AS PT  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTOTALOFPF')
DROP PROCEDURE USP_TDS_GETTOTALOFPF
GO
CREATE PROCEDURE USP_TDS_GETTOTALOFPF --1,640
@BRANCHID INT,
@COMID INT        
AS        
 BEGIN        
	  SELECT CASE WHEN MIN(SD.MONTHID) = 3 THEN 3
					   WHEN MIN(SD.MONTHID) < 3 
						  THEN 
							CASE WHEN (SELECT ISNULL(MIN(MONTHID),0) FROM SALDETAIL S WITH(NOLOCK)
														WHERE S.SALARYHEADID = SD.SALARYHEADID AND S.COMID = SD.COMID AND S.MONTHID = 3) = 3
									  THEN 3
									WHEN (SELECT ISNULL(MIN(MONTHID),0) FROM SALDETAIL S WITH(NOLOCK) 
														WHERE S.SALARYHEADID = SD.SALARYHEADID AND S.COMID = SD.COMID AND S.MONTHID = 1) = 1
									  THEN 1
									WHEN  (SELECT ISNULL(MIN(MONTHID),0) FROM SALDETAIL S WITH(NOLOCK)
													   WHERE S.SALARYHEADID = SD.SALARYHEADID AND S.COMID = SD.COMID AND S.MONTHID = 2) = 2
									  THEN 2 
							END
						 END AS MINMONTHID,
		MAX(SD.MONTHID)MAXMONTHID, SD.COMID,SD.SALARYHEADID 
		INTO #TAX
		FROM SALDETAIL SD WITH(NOLOCK)
	 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID
	 INNER JOIN LINKTOTC L WITH(NOLOCK) ON L.COMID = SD.COMID
	 INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = L.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = L.BRANCHID  
	 WHERE SD.COMID = @COMID AND ISNULL(C80CID,-1) > 0 AND L.BRANCHID = @BRANCHID
	 GROUP BY SD.COMID, SD.SALARYHEADID
	SELECT SUM(NETAMT)NETAMT, SH.C80CID ,COMID
	INTO #C80C
	FROM
	(
		SELECT SUM(NETAMT)NETAMT,SD.SALARYHEADID,SD.COMID FROM SALDETAIL SD WITH(NOLOCK)
		INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID
		INNER JOIN LINKTOTC L WITH(NOLOCK) ON L.COMID = SD.COMID
	    INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = L.COMID AND EM.MONTHID = SD.MONTHID AND EM.BRANCHID = L.BRANCHID  
		WHERE SD.COMID = @COMID AND ISNULL(C80CID,-1) > 0 AND L.BRANCHID = @BRANCHID
		GROUP BY SD.COMID, SD.SALARYHEADID
		--UNION
		--SELECT SD.NETAMT * (CASE WHEN T.MINMONTHID IS NOT NULL THEN (3 - T.MINMONTHID) ELSE (12 - MAXMONTHID) + 3 END)NETAMT,SD.SALARYHEADID,SD.COMID FROM #TAX T
		--INNER JOIN SALDETAIL SD ON T.COMID = SD.COMID AND T.SALARYHEADID = SD.SALARYHEADID 
		--WHERE SD.MONTHID = CASE WHEN T.MINMONTHID IS NOT NULL THEN T.MINMONTHID ELSE T.MAXMONTHID END
	)T
	INNER JOIN SALARYHEAD SH ON T.SALARYHEADID = SH.SALARYHEADID
	GROUP BY C80CID,COMID
	SELECT C80CID, NETAMT AS GROSSAMT, NETAMT AS QUALIFYING, 0 AS ISORIGINAL FROM #C80C 
	WHERE C80CID NOT IN
	(
		SELECT C80.C80CID FROM CVIA80CDET C80 WITH(NOLOCK) 
		INNER JOIN CHAPTERVIADET CDET WITH(NOLOCK) ON C80.CHAPTERVIADETID = CDET.CHAPTERVIADETAILID
		INNER JOIN LINKTOTC L WITH(NOLOCK) ON L.COMID = CDET.COMID
		WHERE CDET.COMID = @COMID AND C80.ISORIGINAL = 1
	)
	 UNION
	SELECT 15 , OS.AMOUNT,OS.AMOUNT , 0 AS ORIGINAL
	 FROM OTHERINCOME O WITH(NOLOCK)   
	 INNER JOIN OTHERINCOMESOURCES OS WITH(NOLOCK) ON O.OTHERINCOMEID = OS.OTHERINCOMEID  
	 WHERE O.COMID = @COMID AND SOURCEID = 2
	--WHERE C80CID NOT IN
	--(
	--	SELECT CDET.C80CID FROM CVIA80CDET CDET		
	--	INNER JOIN CHAPTERVIADET CVIA ON CDET.CHAPTERVIADETID = CVIA.CHAPTERVIADETAILID
	--	INNER JOIN LINKTOTC L ON L.COMID = CVIA.COMID	
	--	WHERE CVIA.COMID = @COMID AND L.BRANCHID = @BRANCHID
	--)
--IF EXISTS(SELECT CHAPTERVIADETAILID FROM CHAPTERVIADET WHERE COMID = 636 AND SALARYSECTIONID = 3)
--  BEGIN
--	   SELECT @CHAPTERVIADETAILID = CHAPTERVIADETAILID FROM CHAPTERVIADET WHERE COMID = 636 AND SALARYSECTIONID = 3
--	    UPDATE CVIA80CDET SET GROSS = NETAMT, QUALIFYING = NETAMT, ISORIGINAL = 0
--			FROM CVIA80CDET CDET
--			INNER JOIN #C80C C8 ON CDET.C80CID = C8.C80CID
--			WHERE CHAPTERVIADETID = @CHAPTERVIADETAILID
--	    INSERT INTO CVIA80CDET(CHAPTERVIADETID, C80CID, GROSS, QUALIFYING, ISORIGINAL)
--		SELECT @CHAPTERVIADETAILID,C80CID, NETAMT AS GROSS, NETAMT AS QUALIFYING, 0 AS ISORIGINAL FROM #C80C C80
--		INNER JOIN CHAPTERVIADET CVIADET ON CVIADET.COMID = C80.COMID
--        LEFT JOIN CVIA80CDET CDET ON CDET.CHAPTERVIADETID = CVIADET.CHAPTERVIADETAILID 
--		WHERE CDET.C80CID IS NULL   
--  END
--ELSE
--  BEGIN
--	 INSERT INTO CHAPTERVIADET(COMID, SALARYSECTIONID, GROSSAMOUNT, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT)
--	 SELECT 636 AS COMID, 3 AS SALARYSECTIONID, SUM(NETAMT)GROSSAMOUNT,SUM(NETAMT)QUALIFYINGAMOUNT,SUM(NETAMT)DEDUCTIBLEAMOUNT
--	   FROM #C80C
--	 SELECT @CHAPTERVIADETAILID = CHAPTERVIADETAILID FROM CHAPTERVIADET WHERE COMID = 636 AND SALARYSECTIONID = 3
--	INSERT INTO CVIA80CDET(CHAPTERVIADETID, C80CID, GROSS, QUALIFYING, ISORIGINAL)
--	SELECT @CHAPTERVIADETAILID,C80CID, NETAMT AS GROSS, NETAMT AS QUALIFYING, 0 AS ISORIGINAL FROM #C80C
--  END
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTOTALPAYMENTMADE')
DROP PROCEDURE USP_TDS_GETTOTALPAYMENTMADE
GO
CREATE PROCEDURE [USP_TDS_GETTOTALPAYMENTMADE]
@REPORTPAYMENTIDS VARCHAR(MAX)
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY = 'SELECT SUM(PAYMENTMADE) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE REPORTPAYMENTID IN ('+ CAST(@REPORTPAYMENTIDS AS VARCHAR) + ')'
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTRACESDataForDirectLogin')
DROP PROCEDURE USP_TDS_GetTRACESDataForDirectLogin
GO
CREATE PROCEDURE USP_TDS_GetTRACESDataForDirectLogin
@BRANCHID INT,
@BANKCODE VARCHAR(20)
AS
BEGIN
	SELECT TOP 1 @BANKCODE + '^' + DTR.TANREGISTRATION + '^' + DTR.PAN + '^' + DTR.TAN + '^' + RP.MOBILENO + '^' + RP.EMAILADDRESS
		+ '^' + SUBSTRING(REPLACE(REPLACE(CONVERT(VARCHAR(27), SYSDATETIME(), 121), ' ', '-'), ':', '.'), 1, LEN(REPLACE(REPLACE(CONVERT(VARCHAR(27), SYSDATETIME(), 121), ' ', '-'), ':', '.')) - 1)
	FROM COMPANYBRANCH CB WITH(NOLOCK)
		INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID 
		INNER JOIN DEDUCTOR DTR WITH(NOLOCK) ON BD.DEDUCTORID = DTR.DEDUCTORID 
		INNER JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON DTR.DEDUCTORID = RP.DEDUCTORID 
	WHERE BD.BRANCHID = @BRANCHID 
	ORDER BY BD.QUARTER DESC
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTRACESLOGINDETAILS')
DROP PROCEDURE USP_TDS_GETTRACESLOGINDETAILS
GO
CREATE PROCEDURE [USP_TDS_GETTRACESLOGINDETAILS]
@BRANCHID INT
AS
	BEGIN
		SELECT USERNAME,PASS FROM TRACESLOGINDETAILS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND ISREMEMBERME=1; 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTRACESREQUIREDPARAMETERS')
DROP PROCEDURE USP_TDS_GETTRACESREQUIREDPARAMETERS
GO
CREATE PROCEDURE USP_TDS_GETTRACESREQUIREDPARAMETERS
@BRANCHID INT,
@QUARTER INT
AS
BEGIN
	SELECT 'B032011' + '^' + DTR.TANREGISTRATION + '^' + DTR.PAN + '^' + DTR.TAN + '^' + RP.MOBILENO + '^' + RP.EMAILADDRESS
		+ '^' + SUBSTRING(REPLACE(REPLACE(CONVERT(VARCHAR(27), SYSDATETIME(), 121), ' ', '-'), ':', '.'), 1, LEN(REPLACE(REPLACE(CONVERT(VARCHAR(27), SYSDATETIME(), 121), ' ', '-'), ':', '.')) - 1)
	FROM COMPANYBRANCH CB WITH(NOLOCK)
		INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON CB.BRANCHID = BD.BRANCHID 
		INNER JOIN DEDUCTOR DTR WITH(NOLOCK) ON BD.DEDUCTORID = DTR.DEDUCTORID 
		INNER JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON DTR.DEDUCTORID = RP.DEDUCTORID 
	WHERE BD.BRANCHID = @BRANCHID AND BD.QUARTER = @QUARTER --AND FORMID = @FORMID 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTRACEVALIDATIONDATA')
DROP PROCEDURE USP_TDS_GETTRACEVALIDATIONDATA
GO
CREATE PROC USP_TDS_GETTRACEVALIDATIONDATA
	@BRANCHID INT,
	@FORM INT,
	@QUARTER INT
AS
	BEGIN
		SET NOCOUNT ON
		CREATE TABLE #TEMP(ISNILCHALLAN BIT, CHALLANID INT, BSRCODE VARCHAR(7), CHALLANPAIDDATE DATETIME,
							SERIALNO VARCHAR(10), CHALLANTOTAL NUMERIC(13,2), CHALLANERETURNID INT,
							TRACESACNAME VARCHAR(20), TRACESACPWD VARCHAR(50),ITDACNAME VARCHAR(20),ITDACPWD VARCHAR(50))  
		SELECT CD.BRANCHID, CHALLANID, CHALLANPAIDDATE, BANKCHALLANNO AS SERIALNO, 
				CHALLANTOTAL, BANKID, ERETURNID,TRNVOUCHERNO, TVRECEIPTNUMBER, 
				MODEOFPAYMENT,CB.TRACESACNAME,CB.TRACESACPWD,CB.ITDACNAME,CB.ITDACPWD      
		INTO #CHALLAN   
		FROM CHALLANDETAIL CD WITH(NOLOCK) 
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = @BRANCHID
		WHERE CD.BRANCHID = @BRANCHID AND FORMID = @FORM AND QUARTER = @QUARTER    
		SELECT BRANCHID, DEDUCTEEID, PAN
		INTO #DEDMST
		FROM DEDUCTEE D WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
		SELECT DEDUCTIONID, BRANCHID, FORMID, QUARTER, DEDUCTEEID, TOTALDEDUCTED, ERETURNID
		INTO #DEDDET
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE
			BRANCHID = @BRANCHID AND FORMID = @FORM 
			AND QUARTER = @QUARTER AND ERETURNID > 0  
		SELECT D.BRANCHID, DD.DEDUCTIONID, D.PAN, DD.TOTALDEDUCTED,  
			CASE WHEN D.PAN IN ('PANAPPLIED', 'PANINVALID','PANNOTAVBL') THEN 0 ELSE 1 END AS ISVALID  
		INTO #DEDUCTION
		FROM #DEDDET DD 
			INNER JOIN #DEDMST D 
				ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID
		WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORM 
			AND DD.QUARTER = @QUARTER AND DD.ERETURNID > 0  
		DROP TABLE #DEDDET
		DROP TABLE #DEDMST
		SELECT *
		INTO #DCLINK
		FROM DEDCHALINK WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
		-- IF ONLY NIL CHALLAN 
		IF(NOT EXISTS(SELECT CHALLANID FROM #CHALLAN WHERE CHALLANTOTAL > 0))   
			BEGIN   
				INSERT INTO #TEMP
					SELECT TOP 1 1 AS NILCHALLAN, C.CHALLANID, MAX(RB.BSRCODE) BSRCODE, MAX(C.CHALLANPAIDDATE) CHALLANPAIDDATE,
						MAX(C.SERIALNO) SERIALNO, MAX(C.CHALLANTOTAL) CHALLANTOTAL, C.ERETURNID, 
						C.TRACESACNAME,C.TRACESACPWD, C.ITDACNAME, C.ITDACPWD          
				FROM #CHALLAN C
					INNER JOIN #DCLINK DL WITH(NOLOCK) ON DL.CHALLANID = C.CHALLANID AND DL.BRANCHID = C.BRANCHID
					LEFT JOIN #DEDUCTION D ON D.DEDUCTIONID = DL.DEDUCTIONID AND DL.BRANCHID = D.BRANCHID
					LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID = C.BANKID
				WHERE C.CHALLANTOTAL > 0 AND D.PAN NOT IN ('PANAPPLIED', 'PANINVALID','PANNOTAVBL')      
				GROUP BY C.CHALLANID, C.ERETURNID, C.TRACESACNAME,C.TRACESACPWD, C.ITDACNAME, C.ITDACPWD
				ORDER BY COUNT(DL.DEDUCTIONID) DESC
				SELECT *, 
					(SELECT CHAR(CAST((RAND() * (123 - 97) + 97) AS INT))
						+ CHAR(CAST((RAND() * (123 - 97) + 97) AS INT))
						+ CHAR(CAST((RAND() * (123 - 97) + 97) AS INT))
						+ CHAR(CAST((RAND() * (123 - 97) + 97) AS INT))
						+ CHAR(CAST((RAND() * (58 - 48) + 48) AS INT))) RVAL
				FROM #TEMP
				SELECT DISTINCT TOP 3 DD.PAN, DD.TOTALDEDUCTED 
				FROM #DEDUCTION DD
					INNER JOIN #DCLINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID AND DL.BRANCHID = DD.BRANCHID
					INNER JOIN #TEMP T ON T.CHALLANID = DL.CHALLANID   
			END -- END OF IF ONLY NIL CHALLAN 
		ELSE
			BEGIN --CHALLAN  TOTAL > 0      
				SELECT MAX(DD.DEDUCTIONID) DEDUCTIONID, COUNT(DISTINCT(DD.PAN + '-' + CAST(TOTALDEDUCTED AS VARCHAR))) DEDCOUNT, CHALLANID   
				INTO #DED   
				FROM #DCLINK DL WITH(NOLOCK)  
					INNER JOIN #DEDUCTION DD ON DD.DEDUCTIONID = DL.DEDUCTIONID
				WHERE DD.ISVALID = 1
				GROUP BY CHALLANID 
				ORDER BY COUNT(DD.DEDUCTIONID) DESC
				INSERT INTO #TEMP
					SELECT TOP 1 1 AS NILCHALLAN, C.CHALLANID, 
						CASE WHEN C.MODEOFPAYMENT = 3 THEN C.TVRECEIPTNUMBER ELSE RB.BSRCODE END BSRCODE, 
						C.CHALLANPAIDDATE,
						CASE WHEN C.MODEOFPAYMENT = 3 THEN C.TRNVOUCHERNO ELSE C.SERIALNO END SERIALNO, C.CHALLANTOTAL, C.ERETURNID,
						C.TRACESACNAME, C.TRACESACPWD, C.ITDACNAME, C.ITDACPWD            
					FROM #CHALLAN C  
						INNER JOIN #DED DL ON DL.CHALLANID = C.CHALLANID  
						LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID = C.BANKID
					WHERE C.CHALLANTOTAL > 0  
					ORDER BY DL.DEDCOUNT DESC  
				IF NOT EXISTS(SELECT CHALLANID FROM #TEMP)  
					BEGIN  
						INSERT INTO #TEMP
						SELECT TOP 1 1 AS NILCHALLAN, C.CHALLANID, MAX(RB.BSRCODE) BSRCODE, MAX(C.CHALLANPAIDDATE) CHALLANPAIDDATE,
							MAX(C.SERIALNO) SERIALNO, MAX(C.CHALLANTOTAL) CHALLANTOTAL, C.ERETURNID,
							C.TRACESACNAME,C.TRACESACPWD,C.ITDACNAME,C.ITDACPWD
						FROM #CHALLAN C
							LEFT JOIN REMITTINGBANK RB WITH(NOLOCK) ON RB.BANKID = C.BANKID       
						WHERE C.CHALLANTOTAL > 0  
						GROUP BY C.CHALLANID, C.ERETURNID,C.TRACESACNAME,C.TRACESACPWD,C.ITDACNAME,C.ITDACPWD  
						ORDER BY MAX(C.CHALLANTOTAL) DESC
					END      
				SELECT TOP 1 *, 
					(SELECT CHAR(CAST((RAND() * (123 - 97) + 97) AS INT))
						+ CHAR(CAST((RAND() * (123 - 97) + 97) AS INT))
						+ CHAR(CAST((RAND() * (123 - 97) + 97) AS INT))
						+ CHAR(CAST((RAND() * (123 - 97) + 97) AS INT))
						+ CHAR(CAST((RAND() * (58 - 48) + 48) AS INT))) RVAL
				FROM #TEMP
				SELECT DD.PAN, DD.TOTALDEDUCTED, ROW_NUMBER() OVER(PARTITION BY DD.PAN ORDER BY DD.PAN) ROWNO 
				INTO #FINAL
				FROM #DEDUCTION DD
				INNER JOIN #DCLINK DL WITH(NOLOCK) ON DL.DEDUCTIONID = DD.DEDUCTIONID AND DL.BRANCHID = DD.BRANCHID
				INNER JOIN #TEMP T ON T.CHALLANID = DL.CHALLANID  
				WHERE DD.ISVALID = 1
				SELECT PAN, TOTALDEDUCTED, ROWNO 
				INTO #FINAL1 
				FROM #FINAL
				ORDER BY ROWNO
				SELECT DISTINCT TOP 3 PAN, TOTALDEDUCTED 
				FROM #FINAL1
				DROP TABLE #FINAL1
				DROP TABLE #FINAL
				DROP TABLE #DED
			END
		DROP TABLE #DCLINK
		DROP TABLE #DEDUCTION
		DROP TABLE #CHALLAN
		DROP TABLE #TEMP
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTRANSACTIONSTATUS')
DROP PROCEDURE USP_TDS_GETTRANSACTIONSTATUS
GO
CREATE PROCEDURE USP_TDS_GETTRANSACTIONSTATUS --1,354878,2,2   
@BRANCHID INT,    
@DEDUCTIONID INT,    
@FORMID INT,    
@QUARTER INT    
AS    
BEGIN    
 SELECT TRANSSTATUS FROM DEDUCTIONDETAIL WITH(NOLOCK)     
 WHERE DEDUCTIONID=@DEDUCTIONID --AND FORMID=@FORMID AND QUARTER=@QUARTER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTRANSDETFORDQR')
DROP PROCEDURE USP_TDS_GETTRANSDETFORDQR
GO
CREATE PROCEDURE [USP_TDS_GETTRANSDETFORDQR]
(
@BRANCHID INT,
@FORMID TINYINT,
@QUARTER TINYINT
)
AS
BEGIN
SELECT NE.SERIALNO,D.NAME,D.PAN,TAX.SECTIONNAME,DD.PAYMENTMADE,DD.TOTALDEDUCTED,DD.NONDEDREASON FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)
ON DD.DEDUCTEEID=NE.DEDUCTEEID
INNER JOIN TAXSECTIONS TAX WITH(NOLOCK)
ON TAX.FORMID=DD.FORMID AND TAX.SECTIONID =DD.SECTIONID
INNER JOIN DEDUCTEE D WITH(NOLOCK)
ON D.DEDUCTEEID=DD.DEDUCTEEID
LEFT JOIN DEDCHALINK DCL WITH(NOLOCK)  ON DCL.DEDUCTIONID=DD.DEDUCTIONID
WHERE (DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND NE.ISTRANSPORTER=1  AND TAX.SECTIONID=8) OR(DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND NE.ISTRANSPORTER=1  AND TAX.SECTIONID=8 AND  DD.TOTALDEDUCTED=0 )
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETTTUMCHALLANCOUNT')
DROP PROCEDURE USP_TDS_GETTTUMCHALLANCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETTTUMCHALLANCOUNT]
AS
BEGIN
SELECT COUNT(*) FROM CHALLANDETAIL WITH(NOLOCK) WHERE ISAUTOGENERATED=1 AND ISTTUMINCLUDED=1 AND ISOLTASINCLUDED=0
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTTUMData')
DROP PROCEDURE USP_TDS_GetTTUMData
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetTTUMData] 
    @MONTH INT ,     
    @ISNULL BIT,    
    @FINYEAR INT,  
    @CLIENTID INT    
AS      
	BEGIN      
		IF (@MONTH < 4)    
			SET @FINYEAR = @FINYEAR + 1    
		DECLARE @SQLQUERY NVARCHAR(MAX)     
		SELECT CHALLANID, MONTH(DEDUCTEDDATE) MONTH, 
			CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 4
				 WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND ENTRYTYPE <> 4 AND DD.SECTIONID NOT IN (5, 17)) THEN 1
				 WHEN (@CLIENTID = 15 AND (ENTRYTYPE = 4 OR ENTRYTYPE = 1)) THEN 4  
				 WHEN (@CLIENTID <> 1 AND (ENTRYTYPE = 4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5,17)))) THEN 4 
				 ELSE 1 END AS ENTRYTYPE 
		INTO #TEMP   
		FROM DEDUCTIONDETAIL DD WITH (NOLOCK)   
			INNER JOIN DEDCHALINK DCL WITH (NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID     
		WHERE MONTH(DEDUCTEDDATE) = @MONTH  
		GROUP BY CHALLANID, MONTH(DEDUCTEDDATE),
			(CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 4 
				  WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND ENTRYTYPE <> 4 AND DD.SECTIONID NOT IN (5, 17)) THEN 1 
			      WHEN (@CLIENTID = 15 AND (ENTRYTYPE = 4 OR ENTRYTYPE = 1)) THEN 4 
			      WHEN (@CLIENTID <> 1 AND (ENTRYTYPE = 4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5, 17)))) THEN 4
			      ELSE 1 END)  
		SET @SQLQUERY = 'SELECT ACCOUNTNO, CB.BRANCHID, CB.BRANCHCODE, PA.FORMTYPE, SUM(Q.AMOUNT) AS AMOUNT, Q.MONTH
						 INTO #FINALRESULT  
						 FROM PARKEDAMOUNT PA WITH (NOLOCK) 
							INNER JOIN 
							(    
								SELECT CD.CHALLANID, CD.QUARTER, CD.SECTIONID, CD.BRANCHID,  
								CASE WHEN CD.FORMID = 3 THEN ''27Q'' 
									 WHEN ('+ CAST(@CLIENTID AS VARCHAR) +' <> 11 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID = 5)  
											OR ('+ CAST(@CLIENTID AS VARCHAR) +' = 11 AND FORMID = 2 AND SECTIONID = 5) 
											OR ('+ CAST(@CLIENTID AS VARCHAR) +' = 15 AND FORMID = 2 AND ENTRYTYPE IN (1, 4) AND SECTIONID = 5) THEN ''26QI'' 
									 WHEN CD.FORMID = 1 THEN ''24Q'' 
								     WHEN (' + CAST(@CLIENTID AS VARCHAR) + ' = 1 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID <> 5) THEN ''26QVS'' 
								     ELSE ''26QV'' END AS FORMTYPE,  
									 SUM(CD.CHALLANTOTAL) AS AMOUNT, T.MONTH 
								FROM CHALLANDETAIL CD WITH (NOLOCK)   
									INNER JOIN #TEMP T ON T.CHALLANID = CD.CHALLANID    
								WHERE ISAUTOGENERATED = 1 AND ISOLTASINCLUDED = 0 '    
								IF (@ISNULL = 1)    
									SET @SQLQUERY = @SQLQUERY + ' AND BANKCHALLANNO IS NULL AND CHALLANPAIDDATE IS NULL '     
								SET @SQLQUERY = @SQLQUERY + ' GROUP BY CD.BRANCHID, CD.FORMID, CD.SECTIONID, 
											CD.CHALLANID, CD.QUARTER, T.ENTRYTYPE, T.MONTH    
							) Q    
							ON PA.FORMTYPE = Q.FORMTYPE AND PA.BRANCHID = Q.BRANCHID 
								AND SUBSTRING(CAST(MONTHYEAR AS VARCHAR), CASE WHEN LEN(MONTHYEAR) = 6 THEN 1 ELSE 0 END, 2) = Q.MONTH  
							INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = PA.BRANCHID 
						GROUP BY ACCOUNTNO, CB.BRANCHCODE, PA.FORMTYPE, CB.BRANCHID, Q.MONTH '
		IF (@CLIENTID = 14 OR @CLIENTID = 15)
			BEGIN
				SET @SQLQUERY = @SQLQUERY + 'SELECT ACCOUNTNO, BRANCHID, BRANCHCODE, ''All'' AS FORMTYPE, SUM(AMOUNT) AS AMOUNT, MONTH 
											 FROM  #FINALRESULT WITH(NOLOCK) 
											 GROUP BY ACCOUNTNO,BRANCHID,BRANCHCODE,MONTH'								  
			END
		ELSE
			BEGIN
				SET @SQLQUERY = @SQLQUERY + 'SELECT * FROM  #FINALRESULT WITH(NOLOCK)'
			END          
		EXEC SP_EXECUTESQL @SQLQUERY  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTTUMData05')
DROP PROCEDURE USP_TDS_GetTTUMData05
GO
CREATE PROCEDURE USP_TDS_GetTTUMData05 
    @MONTH INT ,     
    @ISNULL BIT,    
    @FINYEAR INT,  
    @CLIENTID INT    
AS      
	BEGIN 
		DECLARE @QUARTER INT;     
		IF (@MONTH < 4)    
			SET @FINYEAR = @FINYEAR + 1 
		SELECT @QUARTER = DBO.UDF_TDS_GETQUARTER(@MONTH) 
		DECLARE @SQLQUERY NVARCHAR(MAX)
		DECLARE @MONTHYEAR VARCHAR(6) = CAST(@MONTH AS VARCHAR) + CAST(@FINYEAR AS VARCHAR)  
		CREATE TABLE #DED (DEDUCTIONID INT,DEDUCTEEID INT,BRANCHID INT,FORMID INT,QUARTER INT,
					ENTRYTYPE INT,DEDUCTEDDATE SMALLDATETIME,PAYMENTDATE SMALLDATETIME,EXCLUDEINAC BIT,
					SECTIONID INT,TOTALDEDUCTED NUMERIC(13,2),INCOMETAX NUMERIC(13,2),SURCHARGE NUMERIC(13,2),
					EDUCATIONCESS NUMERIC(13,2),RTBRANCHID INT)
		IF (@ISNULL = 1)
			BEGIN
				INSERT INTO #DED
				SELECT DD.DEDUCTIONID,DEDUCTEEID,DD.BRANCHID,DD.FORMID,DD.QUARTER,ENTRYTYPE,
					DEDUCTEDDATE,PAYMENTDATE,EXCLUDEINAC,DD.SECTIONID,TOTALDEDUCTED,
					DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,RTBRANCHID 
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
					INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID = DD.DEDUCTIONID
					INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
				WHERE MONTH(DEDUCTEDDATE) = @MONTH AND DD.QUARTER = @QUARTER 
					AND CD.ISAUTOGENERATED = 1 AND CD.BANKCHALLANNO IS NULL AND CD.CHALLANPAIDDATE IS NULL
			END
		ELSE
			BEGIN
				INSERT INTO #DED
				SELECT DD.DEDUCTIONID,DEDUCTEEID,DD.BRANCHID,DD.FORMID,DD.QUARTER,ENTRYTYPE,
					DEDUCTEDDATE,PAYMENTDATE,EXCLUDEINAC,DD.SECTIONID,TOTALDEDUCTED,
					DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,RTBRANCHID 
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
					INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID = DD.DEDUCTIONID
					INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
				WHERE MONTH(DEDUCTEDDATE) = @MONTH AND DD.QUARTER = @QUARTER 
					AND CD.ISAUTOGENERATED = 1 
			END
		SELECT CHALLANID, MONTH(DEDUCTEDDATE) MONTH, 
			CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 4
				 WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND ENTRYTYPE <> 4 AND DD.SECTIONID NOT IN (5, 17)) THEN 1
				 WHEN (@CLIENTID = 15 AND (ENTRYTYPE = 4 OR ENTRYTYPE = 1)) THEN 4  
				 WHEN (@CLIENTID <> 1 AND (ENTRYTYPE = 4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5,17)))) THEN 4 
				 ELSE 1 END AS ENTRYTYPE 
		INTO #TEMP   
		FROM #DED DD WITH (NOLOCK)   
			INNER JOIN DEDCHALINK DCL WITH (NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID     
		WHERE MONTH(DEDUCTEDDATE) = @MONTH
			AND DCL.CHALLANID IN (SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE ISAUTOGENERATED = 1)  
		GROUP BY CHALLANID, MONTH(DEDUCTEDDATE),
			(CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 4 
				  WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND ENTRYTYPE <> 4 AND DD.SECTIONID NOT IN (5, 17)) THEN 1 
			      WHEN (@CLIENTID = 15 AND (ENTRYTYPE = 4 OR ENTRYTYPE = 1)) THEN 4 
			      WHEN (@CLIENTID <> 1 AND (ENTRYTYPE = 4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5, 17)))) THEN 4
			      ELSE 1 END)
		SELECT CB.BRANCHCODE,CB.BRANCHID,
			CASE WHEN DD.FORMID = 3 THEN '27Q' 
				 WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID = 5)  
					 OR (@CLIENTID = 11 AND DD.FORMID = 2 AND DD.SECTIONID = 5) 
					 OR (@CLIENTID = 15 AND DD.FORMID = 2 AND DD.ENTRYTYPE IN (1, 4) AND DD.SECTIONID = 5) THEN '26QI' 
				 WHEN DD.FORMID = 1 THEN '24Q' 
				 WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID <> 5) THEN '26QVS' 
				 ELSE '26QV' END AS FORMTYPE,SUM(DD.TOTALDEDUCTED) AS AMOUNT,DD.RTBRANCHID 
		INTO #DEDDET  
		FROM #DED DD WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID 
		WHERE MONTH(DEDUCTEDDATE) = @MONTH
		GROUP BY CB.BRANCHCODE,CB.BRANCHID,
			CASE WHEN DD.FORMID = 3 THEN '27Q' 
				WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID = 5)  
					OR (@CLIENTID = 11 AND DD.FORMID = 2 AND DD.SECTIONID = 5) 
					OR (@CLIENTID = 15 AND DD.FORMID = 2 AND DD.ENTRYTYPE IN (1, 4) AND DD.SECTIONID = 5) THEN '26QI' 
				WHEN DD.FORMID = 1 THEN '24Q' 
				WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID <> 5) THEN '26QVS' 
				ELSE '26QV' END,RTBRANCHID 
		SELECT BRANCHID, RTBRANCHID, SUM(TOTALDEDUCTED) AS TOTALDEDUCTED
		INTO #FORM24BRANCHES
		FROM #DED DD WITH(NOLOCK)  
		WHERE FORMID = 1 
			AND ISNULL(RTBRANCHID,0) <> 0
			AND MONTH(DEDUCTEDDATE) = @MONTH
		GROUP BY BRANCHID, RTBRANCHID
		SELECT PA.*
		INTO #PARKED 
		FROM PARKEDAMOUNT PA WITH(NOLOCK)
		WHERE MONTHYEAR = @MONTHYEAR
		SELECT ID, MONTHYEAR, BRANCHID, RTBRANCHID, 
			BRANCHCODE, FORMTYPE, ACCOUNTNO, AMOUNT
		INTO #PARKEDAMOUNT
		FROM
			( SELECT ID, MONTHYEAR, FB.BRANCHID, PA.BRANCHID AS RTBRANCHID, 
				CB.BRANCHCODE , FORMTYPE, ACCOUNTNO, AMOUNT
			  FROM #FORM24BRANCHES FB
				INNER JOIN #PARKED PA ON PA.BRANCHID = FB.RTBRANCHID
				INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = PA.BRANCHID
			  WHERE ISNULL(FORMTYPE, '') = '24Q'
				AND ISNULL(ACCOUNTNO,'') <> ''
			) DPA
		UNION
		SELECT ID,MONTHYEAR,
				CASE WHEN ISZORO = 0 THEN CB.PARENTBRANCHID ELSE CB.BRANCHID END AS BRANCHID,
			PA.BRANCHID AS RTBRANCHID, CB.BRANCHCODE,
			FORMTYPE, ACCOUNTNO, AMOUNT 
		FROM #PARKED PA WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = PA.BRANCHID 
		WHERE ISNULL(FORMTYPE, '') <> ''
			AND ISNULL(FORMTYPE, '') <> '24Q'
			AND ISNULL(ACCOUNTNO,'') <> '' 
		IF OBJECT_ID('TEMPDB..#DED') IS NOT NULL
			DROP TABLE #DED  
		IF OBJECT_ID('TEMPDB..#PARKED') IS NOT NULL
			DROP TABLE #PARKED
		SET @SQLQUERY = 'SELECT ACCOUNTNO, PA.RTBRANCHID AS BRANCHID, PA.BRANCHCODE, PA.FORMTYPE, SUM(Q.AMOUNT) AS AMOUNT, Q.MONTH
						 INTO #FINALRESULT  
						 FROM #PARKEDAMOUNT PA WITH (NOLOCK) 
							INNER JOIN 
							(    
								SELECT CD.CHALLANID, CD.QUARTER, CD.SECTIONID, CD.BRANCHID,  
								CASE WHEN CD.FORMID = 3 THEN ''27Q'' 
									 WHEN ('+ CAST(@CLIENTID AS VARCHAR) +' <> 11 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID = 5)  
											OR ('+ CAST(@CLIENTID AS VARCHAR) +' = 11 AND FORMID = 2 AND SECTIONID = 5) 
											OR ('+ CAST(@CLIENTID AS VARCHAR) +' = 15 AND FORMID = 2 AND ENTRYTYPE IN (1, 4) AND SECTIONID = 5) THEN ''26QI'' 
									 WHEN CD.FORMID = 1 THEN ''24Q'' 
								     WHEN (' + CAST(@CLIENTID AS VARCHAR) + ' = 1 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID <> 5) THEN ''26QVS'' 
								     ELSE ''26QV'' END AS FORMTYPE,  
									 SUM(CD.CHALLANTOTAL) AS AMOUNT, T.MONTH 
								FROM CHALLANDETAIL CD WITH (NOLOCK)   
									INNER JOIN #TEMP T ON T.CHALLANID = CD.CHALLANID    
								WHERE ISAUTOGENERATED = 1 AND ISOLTASINCLUDED = 0 '    
								IF (@ISNULL = 1)    
									SET @SQLQUERY = @SQLQUERY + ' AND BANKCHALLANNO IS NULL AND CHALLANPAIDDATE IS NULL '     
								SET @SQLQUERY = @SQLQUERY + ' GROUP BY CD.BRANCHID, CD.FORMID, CD.SECTIONID, 
											CD.CHALLANID, CD.QUARTER, T.ENTRYTYPE, T.MONTH    
							) Q    
							ON PA.FORMTYPE = Q.FORMTYPE AND PA.BRANCHID = Q.BRANCHID 
								AND SUBSTRING(CAST(MONTHYEAR AS VARCHAR), CASE WHEN LEN(MONTHYEAR) = 6 THEN 1 ELSE 0 END, 2) = Q.MONTH  
							INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = PA.BRANCHID 
						GROUP BY ACCOUNTNO, PA.BRANCHCODE, PA.FORMTYPE, PA.RTBRANCHID, Q.MONTH '
		---SET @SQLQUERY = @SQLQUERY + 'SELECT * FROM  #FINALRESULT WITH(NOLOCK)'
		SET @SQLQUERY = @SQLQUERY + 'SELECT F.ACCOUNTNO,D.RTBRANCHID AS BRANCHID,F.BRANCHCODE,F.FORMTYPE,SUM(D.AMOUNT) AS AMOUNT,F.MONTH
									 FROM  #FINALRESULT F 
									 INNER JOIN #DEDDET D ON D.RTBRANCHID = F.BRANCHID AND D.FORMTYPE= F.FORMTYPE 
									 GROUP BY  F.ACCOUNTNO,D.RTBRANCHID,F.BRANCHCODE,F.FORMTYPE,F.MONTH' 
		--PRINT @SQLQUERY		     
		EXEC SP_EXECUTESQL @SQLQUERY  
		IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
			DROP TABLE #TEMP  
		IF OBJECT_ID('TEMPDB..#PARKEDAMOUNT') IS NOT NULL
			DROP TABLE #PARKEDAMOUNT   
		IF OBJECT_ID('TEMPDB..#DEDDET') IS NOT NULL
			DROP TABLE #DEDDET 
	END  

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTTUMDataCBI')
DROP PROCEDURE USP_TDS_GetTTUMDataCBI
GO
CREATE PROCEDURE [USP_TDS_GetTTUMDataCBI] 
@MONTH INT ,   
@ISNULL BIT,  
@FINYEAR INT,
@CLIENTID INT  
AS    
BEGIN    
DECLARE @VAR INT  
IF(@MONTH<4)  
SET @FINYEAR=@FINYEAR+1  
DECLARE @SQLQUERY NVARCHAR(MAX)   
SELECT CHALLANID,MONTH(DEDUCTEDDATE)MONTH,CASE WHEN ENTRYTYPE=4 THEN 4 ELSE 1 END AS ENTRYTYPE,BGLCODE, SUM(TOTALDEDUCTED)TOTALDEDUCTED INTO #TEMP 
			FROM DEDUCTIONDETAIL DD WITH (NOLOCK) 
			INNER JOIN DEDCHALINK DCL WITH (NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID   
			INNER JOIN TDSRATE TR ON TR.BGLCODEID = DD.BGLCODEID
			WHERE MONTH(DEDUCTEDDATE) = @MONTH
			GROUP BY CHALLANID,MONTH(DEDUCTEDDATE),BGLCODE,(CASE WHEN ENTRYTYPE=4 THEN 4 ELSE 1 END)
SET @SQLQUERY='SELECT ACCOUNTNO,CB.BRANCHID,CB.BRANCHCODE,PA.FORMTYPE,SUM(Q.AMOUNT) AS AMOUNT, Q.MONTH FROM PARKEDAMOUNT PA WITH (NOLOCK) INNER JOIN   
(  
 SELECT CD.CHALLANID,CD.QUARTER,CD.SECTIONID,CD.BRANCHID,BGLCODE,
	CAST(CEILING(SUM(T.TOTALDEDUCTED)) AS NUMERIC(17,2)) AS AMOUNT, T.MONTH
   FROM CHALLANDETAIL CD WITH (NOLOCK) 
  INNER JOIN #TEMP T ON T.CHALLANID=CD.CHALLANID  
  WHERE ISAUTOGENERATED=1 AND ISOLTASINCLUDED=0 '  
  IF(@ISNULL=1)  
  SET @SQLQUERY=@SQLQUERY+'AND BANKCHALLANNO IS NULL AND CHALLANPAIDDATE IS NULL '   
  SET @SQLQUERY=@SQLQUERY+'GROUP BY CD.BRANCHID,CD.FORMID,CD.SECTIONID,CD.CHALLANID,CD.QUARTER,T.ENTRYTYPE,T.MONTH,BGLCODE  
  ) Q  
   ON PA.FORMTYPE=Q.BGLCODE AND PA.BRANCHID=Q.BRANCHID  AND SUBSTRING(CAST(MONTHYEAR AS VARCHAR), CASE WHEN LEN(MONTHYEAR) = 6 THEN 1 ELSE 0 END, 2) =  Q.MONTH
   INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID=PA.BRANCHID       
   GROUP BY ACCOUNTNO,CB.BRANCHCODE,PA.FORMTYPE,CB.BRANCHID,Q.MONTH '  
   EXEC SP_EXECUTESQL @SQLQUERY   
  --print @SQLQUERY  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetTTUMMonthList')
DROP PROCEDURE USP_TDS_GetTTUMMonthList
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetTTUMMonthList]
@CLIENTID INT
AS  
    BEGIN  
    IF(@CLIENTID = 7)
		BEGIN
			 SELECT DISTINCT CASE WHEN MONTH(DEDUCTEDDATE) < 10 THEN '0' ELSE '' END + CAST(MONTH(DEDUCTEDDATE) AS VARCHAR) + SUBSTRING(CAST(YEAR(DEDUCTEDDATE) AS VARCHAR), 3, 2) AS MONTHYEAR,D.BRANCHID,BGLCODE AS FORMTYPE
            FROM DEDUCTIONDETAIL D WITH (NOLOCK)  
                INNER JOIN DEDCHALINK L WITH (NOLOCK) ON D.DEDUCTIONID = L.DEDUCTIONID  
                INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = D.BGLCODEID
                INNER JOIN CHALLANDETAIL C WITH (NOLOCK) ON L.CHALLANID = C.CHALLANID  
            WHERE    
                C.ISAUTOGENERATED = 1 AND ISOLTASINCLUDED = 0 AND C.BANKCHALLANNO IS NULL 
		END
	ELSE
		IF(@CLIENTID = 14 OR @CLIENTID = 15)
			BEGIN
				SELECT DISTINCT CASE WHEN MONTH(DEDUCTEDDATE) < 10 THEN '0' ELSE '' 
								END + CAST(MONTH(DEDUCTEDDATE) AS VARCHAR) + SUBSTRING(CAST(YEAR(DEDUCTEDDATE) AS VARCHAR), 3, 2) AS MONTHYEAR,
					D.BRANCHID, 'All' AS FORMTYPE
				FROM DEDUCTIONDETAIL D WITH (NOLOCK)  
				INNER JOIN DEDCHALINK L WITH (NOLOCK) ON D.DEDUCTIONID = L.DEDUCTIONID  
				INNER JOIN CHALLANDETAIL C WITH (NOLOCK) ON L.CHALLANID = C.CHALLANID  
				WHERE C.ISAUTOGENERATED = 1 AND ISOLTASINCLUDED = 0 AND C.BANKCHALLANNO IS NULL 
			END
		ELSE
			IF(@CLIENTID = 8)
				BEGIN
					SELECT DISTINCT CASE WHEN MONTH(DEDUCTEDDATE) < 10 THEN '0' ELSE '' END + CAST(MONTH(DEDUCTEDDATE) AS VARCHAR) + SUBSTRING(CAST(YEAR(DEDUCTEDDATE) AS VARCHAR), 3, 2) AS MONTHYEAR,D.RTBRANCHID AS BRANCHID,
					(CASE WHEN C.FORMID = 3 THEN '27Q' WHEN (C.FORMID = 2 AND C.SECTIONID = 5 AND D.ENTRYTYPE = 4) THEN '26QI' WHEN C.FORMID = 1 THEN '24Q' WHEN (@CLIENTID = 1 AND C.FORMID = 2 AND D.ENTRYTYPE = 4 AND C.SECTIONID <> 5) THEN '26QVS' ELSE '26QV' END) FORMTYPE
					FROM DEDUCTIONDETAIL D WITH (NOLOCK)  
						INNER JOIN DEDCHALINK L WITH (NOLOCK) ON D.DEDUCTIONID = L.DEDUCTIONID  
						INNER JOIN CHALLANDETAIL C WITH (NOLOCK) ON L.CHALLANID = C.CHALLANID  
					WHERE  C.ISAUTOGENERATED = 1 AND ISOLTASINCLUDED = 0 AND C.BANKCHALLANNO IS NULL 
				 END
			ELSE
				BEGIN
					SELECT DISTINCT CASE WHEN MONTH(DEDUCTEDDATE) < 10 THEN '0' ELSE '' END + CAST(MONTH(DEDUCTEDDATE) AS VARCHAR) + SUBSTRING(CAST(YEAR(DEDUCTEDDATE) AS VARCHAR), 3, 2) AS MONTHYEAR,D.BRANCHID,
					(CASE WHEN C.FORMID = 3 THEN '27Q' WHEN (C.FORMID = 2 AND C.SECTIONID = 5 AND D.ENTRYTYPE = 4) THEN '26QI' WHEN C.FORMID = 1 THEN '24Q' WHEN (@CLIENTID = 1 AND C.FORMID = 2 AND D.ENTRYTYPE = 4 AND C.SECTIONID <> 5) THEN '26QVS' ELSE '26QV' END) FORMTYPE
					FROM DEDUCTIONDETAIL D WITH (NOLOCK)  
						INNER JOIN DEDCHALINK L WITH (NOLOCK) ON D.DEDUCTIONID = L.DEDUCTIONID  
						INNER JOIN CHALLANDETAIL C WITH (NOLOCK) ON L.CHALLANID = C.CHALLANID  
					WHERE  C.ISAUTOGENERATED = 1 AND ISOLTASINCLUDED = 0 AND C.BANKCHALLANNO IS NULL 
				 END
    END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUIN')
DROP PROCEDURE USP_TDS_GETUIN
GO
CREATE PROCEDURE USP_TDS_GETUIN --1573,'AVWPB0613M'
@BRANCHID INT,
@PAN VARCHAR(10),
@QUARTER INT
AS
	BEGIN
		SELECT TOP 1 CERTNO FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID 
		WHERE DD.BRANCHID = @BRANCHID AND FORMID = 2 AND PAN = @PAN AND ISNULL(CERTNO,'') <> '' AND NONDEDREASON = 2 AND QUARTER >= @QUARTER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNFURNISHEDTDSREGISTERDETAILS')
DROP PROCEDURE USP_TDS_GETUNFURNISHEDTDSREGISTERDETAILS
GO
CREATE PROCEDURE USP_TDS_GETUNFURNISHEDTDSREGISTERDETAILS 
 @BRANCHID INT,  
 @FORMID INT,  
 @FROMDATE SMALLDATETIME = NULL,  
 @TODATE SMALLDATETIME = NULL,   
 @SECTIONID VARCHAR(MAX) = NULL,  
 @DEDUCTEEID INT = NULL  
AS  
 BEGIN  
  DECLARE @QUERY NVARCHAR(MAX); 
	DECLARE @RTBRANCHID INT,@ISZORO INT;
	SET @RTBRANCHID = @BRANCHID
	IF((SELECT TOP 1 DEDUCTORID FROM DEDUCTOR WITH(NOLOCK) WHERE TAN = 'HYDA08387B') <> '')
		BEGIN
			SELECT @ISZORO = ISZORO FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID
			IF(@ISZORO = 0)
				BEGIN
					IF(@FORMID <> 1)
						BEGIN
							SET @BRANCHID = (SELECT PARENTBRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @RTBRANCHID)
						END
				END
		END
  SELECT * INTO #SECTIONS FROM DBO.UDF_TDS_SPLITSTRING(@SECTIONID,',')
  SELECT DD.BRANCHID,DD.FORMID,DD.QUARTER,DD.TAXRATE,DD.TOTALDEDUCTED,DD.SECTIONID,DD.PAYMENTDATE,DD.DEDUCTEDDATE,  
  D.NAME,D.DEDUCTEEID,D.PAN,  
  TS.SECTIONNAME,      
  CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL,  
  FM.PRINTCERTIFICATENO,FM.CERTIFICATEDATE,CASE WHEN FM.ISCERTIFICATEGIVEN=1 THEN 'YES' ELSE 'NO' END AS ISCERTIFICATEGIVEN,
  DD.RTBRANCHID
  INTO #TEMP  
  FROM   DEDUCTIONDETAIL DD  
  INNER JOIN BRANCHDEDUCTORS BD ON DD.BRANCHID = BD.BRANCHID AND DD.QUARTER=BD.QUARTER     
  INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID  
  INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = DD.SECTIONID  
  INNER JOIN FORMDETAILS FD ON FD.FORMID=DD.FORMID     
  LEFT JOIN DEDCHALINK DL ON DL.DEDUCTIONID=DD.DEDUCTIONID  
  LEFT JOIN CHALLANDETAIL CD ON CD.CHALLANID = DL.CHALLANID   
  LEFT JOIN FORM16A FM ON FM.DEDUCTIONID = DD.DEDUCTIONID    
  WHERE  DD.FORMID IN (2,3,4) AND (DL.DEDCHALINKID IS NOT NULL)
  IF(@SECTIONID <> '-1')
   BEGIN 
	   SET @QUERY = 'SELECT NAME,PAN, DEDUCTEEID,BANKCHALLANNO,CHALLANPAIDDATE,CHALLANTOTAL,SS.TAXRATE,TOTALDEDUCTED,SS.SECTIONNAME  
			   FROM   #TEMP SS WITH(NOLOCK)
			   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = SS.SECTIONID
			   INNER JOIN #SECTIONS S ON S.DATA = TS.SECTIONNAME  
		       WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SS.FORMID = ' + CAST(@FORMID AS VARCHAR) + '  
		       AND PRINTCERTIFICATENO IS NOT NULL AND LEN(LTRIM(PRINTCERTIFICATENO)) > 0 AND ISCERTIFICATEGIVEN = ''NO''';  
    END
   ELSE
    BEGIN
		SET @QUERY = 'SELECT NAME,PAN, DEDUCTEEID,BANKCHALLANNO,CHALLANPAIDDATE,CHALLANTOTAL,TAXRATE,TOTALDEDUCTED,SECTIONNAME  
			   FROM   #TEMP WITH(NOLOCK)  
			   WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + '  
			   AND PRINTCERTIFICATENO IS NOT NULL AND LEN(LTRIM(PRINTCERTIFICATENO)) > 0 AND ISCERTIFICATEGIVEN = ''NO''';
    END
  --IF(@SECTIONID <> -1)  
  -- BEGIN  
  --  SET @QUERY = @QUERY + ' AND SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);  
  -- END  
	IF(@DEDUCTEEID <> -1)  
	BEGIN  
		SET @QUERY = @QUERY + ' AND DEDUCTEEID = ' + CAST(@DEDUCTEEID AS VARCHAR);  
	END  
	IF(@FROMDATE <> '')  
	BEGIN  
		SET @QUERY = @QUERY + ' AND CHALLANPAIDDATE >= ''' + CAST(@FROMDATE AS VARCHAR) + '''';  
	END            
	IF(@TODATE <> '')  
	BEGIN  
		SET @QUERY = @QUERY + ' AND CHALLANPAIDDATE <= ''' + CAST(@TODATE AS VARCHAR) + '''';  
	END
	IF(@RTBRANCHID <> @BRANCHID)
	BEGIN
		SET @QUERY = @QUERY + ' AND RTBRANCHID = ' + CAST(@RTBRANCHID AS VARCHAR);  
	END
 -- PRINT @QUERY
EXEC SP_EXECUTESQL @QUERY;  
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNIQUEBRANCHES')
DROP PROCEDURE USP_TDS_GETUNIQUEBRANCHES
GO
CREATE PROCEDURE [USP_TDS_GETUNIQUEBRANCHES]
	@USERID INT
AS
	BEGIN
		SELECT DISTINCT DD.BRANCHID,CB.BRANCHNAME + '(' + CB.BRANCHCODE + ')' AS BRANCHNAME
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID
		WHERE CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID =(SELECT BRANCHID FROM USERMASTER WITH(NOLOCK) WHERE USERID = 1)) AS VARCHAR) + '%'
		UNION
		SELECT DISTINCT A.BRANCHID,CB.BRANCHNAME + '(' + CB.BRANCHCODE + ')' AS BRANCHNAME
		FROM ACKNO A WITH(NOLOCK) INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON A.BRANCHID = CB.BRANCHID
		WHERE LEN(ORGNUM) > 0 AND A.ISVALID = 1
							  AND CB.PARENTBASEID LIKE CAST((SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID =(SELECT BRANCHID FROM USERMASTER WITH(NOLOCK) WHERE USERID = 1)) AS VARCHAR) + '%'
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetUnlinkedChallanBranches')
DROP PROCEDURE USP_TDS_GetUnlinkedChallanBranches
GO
CREATE PROCEDURE USP_TDS_GetUnlinkedChallanBranches 
@BRANCHID INT,
@CHALLANPAIDDATE VARCHAR(20)
AS 
BEGIN 
	IF (@BRANCHID = -1)
		BEGIN
			SELECT CB.BRANCHCODE,CH.BRANCHID, FORMID, QUARTER 
				FROM CHALLANDETAIL CH WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB 
				ON CB.BRANCHID = CH.BRANCHID
			WHERE ISNULL(ISAUTOGENERATED, 0) <> 1
				AND  CONVERT(VARCHAR, CHALLANPAIDDATE, 103) = @CHALLANPAIDDATE 
			GROUP BY CB.BRANCHCODE,CH.BRANCHID, FORMID, QUARTER
		END 
	ELSE
		BEGIN
			SELECT CB.BRANCHCODE,CH.BRANCHID, FORMID, QUARTER 
				FROM CHALLANDETAIL CH WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB 
				ON CB.BRANCHID = CH.BRANCHID
		    WHERE ISNULL(ISAUTOGENERATED, 0) <> 1
				AND  CONVERT(VARCHAR, CHALLANPAIDDATE, 103) = @CHALLANPAIDDATE
				AND CB.BRANCHID = @BRANCHID
			GROUP BY CB.BRANCHCODE,CH.BRANCHID, FORMID, QUARTER
		END 
END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetUnlinkedChallans')
DROP PROCEDURE USP_TDS_GetUnlinkedChallans
GO
CREATE PROCEDURE USP_TDS_GetUnlinkedChallans 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@EXCLUDEPREVQTR BIT,
	@CHALLANPAIDDATE VARCHAR(20)	
AS
BEGIN
DECLARE @SQLQRY NVARCHAR(MAX);
SET @SQLQRY  = 'SELECT		C.[BRANCHID] AS BranchID,C.[CHALLANID] AS ChallanID,C.[FORMID] AS FormType,C.[QUARTER] AS Quarter,
							C.[ERETURNID] AS EReturnID,C.[LINKDEDCOUNT] AS LinkDeductionCount,
							C.[ISNILCHALLAN] AS ISNILLCHALLAN,C.[ISUPDATECHALLAN] AS IsUpdateChallan,
							C.[MODEOFPAYMENT] AS ModeOfPayment,C.[BANKCHALLANNO] AS BankChallanNumber,
							C.[LASTBANKCHALLANNO] AS LastBankChallanNumber,C.[TRNVOUCHERNO] AS TransferVoucherNumber,
							C.[LASTTRNVOUCHERNO] AS LastTransferVoucherNumber,C.[BANKID] AS BankID,
							C.[LASTBANKID] AS LastBankID,C.[CHALLANPAIDDATE] AS ChallanPaidDate,
							C.[LASTCHALLANPAIDDATE] AS LastChallanPaidDate,C.[DATEOFDEBIT] AS DateOfDebit,
							C.[SECTIONID] AS SectionID,SEC.[SECTIONNAME] AS SectionName,
							C.[INCOMETAX]-ISNULL(SUM(D.INCOMETAX),0) AS IncomeTax,C.[SURCHARGE]-ISNULL(SUM(D.SURCHARGE),0) AS Surcharge ,
							C.[EDUCATIONCESS]-ISNULL(SUM(D.EDUCATIONCESS),0) AS EducationCess,C.[INTEREST] AS Interest,C.[PENALTY] AS Penalty,
							C.[OTHERS] AS Others,C.[CHALLANTOTAL] AS ChallanTotalAmount,C.[LASTCHALLANTOTAL] AS LastChallanTotalAmount,
							C.[ISCOMPANY] AS IsCompany,C.[CHEQUENO] AS ChequeNumber,C.[CHEQUEDATE] AS ChequeDate,
							C.[CHEQUEDRAWNON] AS ChequeDrawnOn,C.[TRANREFNO] AS TransferReferenceNumber,
							ISNULL(C.[SERIALNO],'''') AS SerialNumber,C.MINORHEAD,C.FEE,REM.BSRCODE AS BankBsrCode,
							ISNULL(C.TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER,
							CASE WHEN(LINKTABLE.LINKEDCHALLANID IS NULL) THEN ''False'' ELSE ''True'' END AS IsLinked 
				FROM		CHALLANDETAIL AS C WITH(NOLOCK) 
				LEFT JOIN (
							SELECT DISTINCT(CHALLANID) AS LINKEDCHALLANID FROM DEDCHALINK WITH(NOLOCK)
						  ) AS LINKTABLE 
			               ON C.CHALLANID = LINKTABLE.LINKEDCHALLANID 
				INNER JOIN  TAXSECTIONS SEC WITH(NOLOCK) ON  C.SECTIONID = SEC.SECTIONID
				LEFT JOIN   REMITTINGBANK REM WITH(NOLOCK) ON C.BANKID=REM.BANKID 
				LEFT JOIN	DEDCHALINK AS L WITH(NOLOCK) ON C.CHALLANID=L.CHALLANID AND C.BRANCHID = L.BRANCHID 
				LEFT JOIN	DEDUCTIONDETAIL AS D WITH(NOLOCK) ON L.DEDUCTIONID=D.DEDUCTIONID AND L.BRANCHID = D.BRANCHID
				WHERE		C.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR(10)) 
										  +' AND C.FORMID = '+ CAST(@FORMID AS VARCHAR(2))
										  + 'AND ISNULL(ISAUTOGENERATED, 0) <> 1'
										  +' AND CONVERT(VARCHAR, CHALLANPAIDDATE, 103) = ''' + CAST(@CHALLANPAIDDATE AS VARCHAR(20)) 
										  +''' AND C.QUARTER';
			IF( @EXCLUDEPREVQTR=0)
				BEGIN
					SET @SQLQRY = @SQLQRY + '<=';
				END
			ELSE 
				BEGIN
					SET @SQLQRY = @SQLQRY + '=';	
				END
			SET @SQLQRY =@SQLQRY + CAST(@QUARTER AS VARCHAR(2)) + 
			' GROUP BY		C.[BRANCHID],C.[CHALLANID],C.[FORMID],C.[QUARTER],C.[ERETURNID],C.[LINKDEDCOUNT],C.[ISNILCHALLAN],C.TVRECEIPTNUMBER,
							C.[ISUPDATECHALLAN],C.[MODEOFPAYMENT],C.[BANKCHALLANNO],C.[LASTBANKCHALLANNO],C.[TRNVOUCHERNO],C.[LASTTRNVOUCHERNO],
							C.[BANKID],C.[LASTBANKID],C.[CHALLANPAIDDATE],C.[LASTCHALLANPAIDDATE],C.[DATEOFDEBIT],C.[SECTIONID],SEC.[SECTIONNAME],
							C.[INCOMETAX],C.[SURCHARGE],C.[EDUCATIONCESS],C.[INTEREST],C.[PENALTY],C.[OTHERS],C.[CHALLANTOTAL],C.[LASTCHALLANTOTAL],
							C.[ISCOMPANY],C.[CHEQUENO],C.[CHEQUEDATE],C.[CHEQUEDRAWNON],C.[TRANREFNO],C.[SERIALNO],C.MINORHEAD,C.FEE,
							REM.BSRCODE,LINKTABLE.LINKEDCHALLANID
			HAVING			C.INCOMETAX-ISNULL(SUM(D.INCOMETAX),0) > 0 
							OR C.SURCHARGE-ISNULL(SUM(D.SURCHARGE),0) > 0 
							OR C.EDUCATIONCESS-ISNULL(SUM(D.EDUCATIONCESS),0) > 0 
			ORDER BY C.CHALLANPAIDDATE ASC, C.ISCOMPANY DESC';	
	EXECUTE sp_executesql @SQLQRY;
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNLINKEDDEDS')
DROP PROCEDURE USP_TDS_GETUNLINKEDDEDS
GO
CREATE PROCEDURE [USP_TDS_GETUNLINKEDDEDS]  
 @STARTROW INT,  
 @PAGESIZE INT,  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @SECTIONID INT,  
 @DEDNAME VARCHAR(75)  
AS  
 BEGIN  
  DECLARE @FIRSTREC INT, @LASTREC INT;  
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE;  
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
  DECLARE @QUERY NVARCHAR(MAX);    
  SET @QUERY = 'SELECT TOP ' + CAST(@LASTREC AS VARCHAR) + ' ROWNUM = IDENTITY(INT,1,1),DD.DEDUCTIONID, D.NAME,D.PAN,TS.SECTIONNAME,  
        DD.SERIALNO,DD.[QUARTER],DD.DEDUCTEEID,DD.SECTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,DD.NONDEDREASON  
       INTO #UNLINKEDDEDUCTIONS  
       FROM  DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID  
            LEFT  JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID  
            LEFT  JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID   
       WHERE  DD.TOTALDEDUCTED>0 AND  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DL.DEDCHALINKID IS NULL';  
  IF(@QUARTER <> -1)  
   BEGIN  
    SET @QUERY = @QUERY + ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR);  
   END  
  IF(@SECTIONID <> -1)  
   BEGIN  
    SET @QUERY = @QUERY + ' AND DD.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);  
   END  
  IF(@DEDNAME<>'')  
   BEGIN  
    SET @QUERY = @QUERY + ' AND D.NAME LIKE  ''' + @DEDNAME + '%''';  
   END    
  SET @QUERY = @QUERY + ';SELECT * FROM #UNLINKEDDEDUCTIONS WHERE ROWNUM > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ROWNUM < ' + CAST(@LASTREC AS VARCHAR);    
  EXEC SP_EXECUTESQL @QUERY;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNLINKEDDEDUCTIONFORCORR')
DROP PROCEDURE USP_TDS_GETUNLINKEDDEDUCTIONFORCORR
GO
CREATE PROCEDURE [USP_TDS_GETUNLINKEDDEDUCTIONFORCORR]
@QUARTER INT,
@FORMID INT,
@BRANCHID INT
		  AS
			  BEGIN
			  IF @FORMID=1
			  BEGIN
 SELECT
D.NAME,-1 AS DEDUCTEECODE ,D.PAN AS PAN,D.PANREFERENCE AS PANREFERENCE,
												DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDSERIALNO,DD.DEDUCTIONID,DD.DEDUCTEEID,DD.ERETURNID,DD.MODE,DD.SECTIONID,TS.SECTIONNAME,
												DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE,
												DD.INCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID
                        INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID
                        INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
                        LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.BRANCHID=D.BRANCHID AND DCL.DEDUCTIONID=DD.DEDUCTIONID
WHERE DD.QUARTER=@QUARTER AND DD.FORMID=@FORMID AND DD.BRANCHID=@BRANCHID AND DD.NONDEDREASON=0 AND DCL.DEDUCTIONID IS NULL
			  END
			  ELSE
			  BEGIN
                    SELECT
D.NAME,NE.DEDUCTEECODE AS DEDUCTEECODE,D.PAN AS PAN,D.PANREFERENCE AS PANREFERENCE,
												DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDSERIALNO,DD.DEDUCTIONID,DD.DEDUCTEEID,DD.ERETURNID,DD.MODE,DD.SECTIONID,TS.SECTIONNAME,
												DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE,
												DD.INCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD
FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID
                                             INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID
                                             INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
                                             LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.BRANCHID=D.BRANCHID AND DCL.DEDUCTIONID=DD.DEDUCTIONID
                     WHERE DD.QUARTER=@QUARTER AND DD.FORMID=@FORMID AND DD.BRANCHID=@BRANCHID AND DD.NONDEDREASON=0 AND DCL.DEDUCTIONID IS NULL
END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNLINKEDDEDUCTIONONEDITFORCORR')
DROP PROCEDURE USP_TDS_GETUNLINKEDDEDUCTIONONEDITFORCORR
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETUNLINKEDDEDUCTIONONEDITFORCORR] 
@QUARTER INT,
@FORMID INT,
@BRANCHID INT,
@DEDUCTIONSLNO INT
AS
BEGIN
IF @FORMID=1
	BEGIN
		SELECT  D.NAME,D.PAN,'' AS LASTPAN,D.PANREFERENCE,'' AS LASTPANREFERENCE,-1 AS CODE,E.SERIALNO AS DEDUCTEESERIALNO,TS.SECTIONNAME,
								DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,DD.SERIALNO AS DEDUCTIONSERIALNO,DD.DEDUCTIONID,DD.PAYMENTMADE,
								DD.PAYMENTDATE,DD.SECTIONID,DD.ERETURNID AS DEDUCTIONERETURNID,DD.MODE,DD.INCOMETAX,0 AS LASTINCOMETAX,
								DD.INCOMETAXRATE,DD.SURCHARGE,0 AS LASTSURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,
								DD.EDUCATIONCESSRATE,DD.ISTAXINFOEDITABLE,DD.TAXRATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,DD.DEDUCTEDDATE,
								DD.ISBOOKENTRY,DD.NONDEDREASON,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,5 AS CORRECTIONSTATUS,DD.CERTNO, DD.ACKNO, 
								DD.REMITTANCEID, DD.COUNTRYID, ISNULL(DD.TDSRATEASPER,' ' )TDSRATEASPER, DD.SECTIONID AS CHALLANSECTION
								FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
								INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID 
								INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID  
								INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID 
								LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.BRANCHID=D.BRANCHID AND DCL.DEDUCTIONID=DD.DEDUCTIONID
		WHERE DD.QUARTER=@QUARTER AND DD.FORMID=@FORMID AND DD.BRANCHID=@BRANCHID AND DCL.DEDUCTIONID IS NULL AND DD.SERIALNO = @DEDUCTIONSLNO ;
	END
ELSE
	BEGIN
		SELECT  D.NAME,D.PAN,'' AS LASTPAN,D.PANREFERENCE,'' AS LASTPANREFERENCE,NE.DEDUCTEECODE AS CODE,NE.SERIALNO AS DEDUCTEESERIALNO,
					TS.SECTIONNAME,DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,DD.SERIALNO AS DEDUCTIONSERIALNO,DD.DEDUCTIONID,
					DD.PAYMENTMADE,DD.PAYMENTDATE,DD.SECTIONID,DD.ERETURNID AS DEDUCTIONERETURNID,DD.MODE,DD.INCOMETAX,0 AS LASTINCOMETAX,
					DD.INCOMETAXRATE,DD.SURCHARGE,0 AS LASTSURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,0 AS LASTEDUCATIONCESS,
					DD.EDUCATIONCESSRATE,DD.ISTAXINFOEDITABLE,DD.TAXRATE,DD.TOTALDEDUCTED,0 AS LASTTOTALDEDUCTED,DD.DEDUCTEDDATE,
					DD.ISBOOKENTRY,DD.NONDEDREASON,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,5 AS CORRECTIONSTATUS,DD.CERTNO, DD.ACKNO, 
					DD.REMITTANCEID, DD.COUNTRYID, ISNULL(DD.TDSRATEASPER,' ' )TDSRATEASPER, DD.SECTIONID AS CHALLANSECTION, DD.EMAILDED,
					DD.CONTACTNODED, DD.ADDRESSDED, DD.IDENTNUMDED
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID 
								INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID  
								INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
								LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.BRANCHID=D.BRANCHID AND DCL.DEDUCTIONID=DD.DEDUCTIONID
		WHERE DD.QUARTER=@QUARTER AND DD.FORMID=@FORMID AND DD.BRANCHID=@BRANCHID AND DCL.DEDUCTIONID IS NULL AND DD.SERIALNO = @DEDUCTIONSLNO ;
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNLINKEDDEDUCTIONS')
DROP PROCEDURE USP_TDS_GETUNLINKEDDEDUCTIONS
GO
CREATE PROCEDURE [USP_TDS_GETUNLINKEDDEDUCTIONS]
	@BRANCHID INT,
	@FORMID INT
AS
	BEGIN
		SELECT DD.DEDUCTEEID,D.NAME,D.PAN,NE.DEDUCTEECODE,DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,DD.ERETURNID,DD.MODE,DD.DEDUCTEEPAN,DD.LASTDEDUCTEEPAN,DD.DEDUCTEEPANREF,
			   DD.LASTDEDUCTEEPANREF,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.DEDUCTEDDATE,DD.SECTIONID ,TS.SECTIONNAME,
			   DD.INCOMETAXRATE,DD.SURCHARGERATE,DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,ISNULL(DD.SERIALNO,'') AS DEDSERIALNO, CD.SERIALNO AS CHALSERIALNO,
			   DL.DEDCHALINKID, CD.CHALLANID,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL ,CD.[QUARTER] AS CHALLANQUARTER,CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CD.ISCOMPANY END AS CHALLANCODE
		FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID=TS.SECTIONID
						  LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
						  LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
						  LEFT JOIN DBO.NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID
		WHERE  DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID
			   AND DD.DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM DEDCHALINK WHERE DEDCHALINK.BRANCHID = @BRANCHID)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNLINKEDDEDUCTIONSFORAUTOLINK')
DROP PROCEDURE USP_TDS_GETUNLINKEDDEDUCTIONSFORAUTOLINK
GO
CREATE PROCEDURE USP_TDS_GETUNLINKEDDEDUCTIONSFORAUTOLINK --11,378
@MONTHID INT,
@BRANCHID INT = NULL
AS
	BEGIN
	DECLARE @QUERY NVARCHAR(MAX);
	SET @QUERY = 'SELECT BRANCHCODE,DD.SERIALNO,DEDUCTIONID,NAME,PAN,DD.TOTALDEDUCTED,TAXRATE,DD.BRANCHID,DD.FORMID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
					INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID
					INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
					INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID
					WHERE FORMID <> 1 AND MONTH(DEDUCTEDDATE) = '+ CAST(@MONTHID AS VARCHAR) +' AND 
					NOT EXISTS 
					(
						SELECT DEDUCTIONID FROM DEDCHALINK WHERE DD.DEDUCTIONID = DEDUCTIONID
					) '
	IF @BRANCHID IS NOT NULL
		BEGIN
			SET @QUERY = @QUERY + ' AND DD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR) 
		END
	EXEC SP_EXECUTESQL @QUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNLINKEDDEDUCTIONSONQUARTER')
DROP PROCEDURE USP_TDS_GETUNLINKEDDEDUCTIONSONQUARTER
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETUNLINKEDDEDUCTIONSONQUARTER] 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@MONTHID INT,
	@DEDUCTIONORDER INT
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX),@CHILDQUERY NVARCHAR(MAX);
		 IF @FORMID <> 1
			BEGIN
				SET @CHILDQUERY = 'ISNULL(NE.DEDUCTEECODE,0) AS DEDUCTEECODE';
			END
		ELSE
			BEGIN
				SET @CHILDQUERY = '0 AS DEDUCTEECODE';
			END
		SET @QUERY = 'SELECT D.NAME,D.PAN,D.PANREFERENCE,' + @CHILDQUERY + ',							 
							 TS.SECTIONNAME,DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.DEDUCTEEID,
							 DD.SERIALNO,DD.DEDUCTIONID,DD.PAYMENTMADE,DD.PAYMENTDATE,
						     DD.SECTIONID,DD.ERETURNID,DD.MODE,DD.INCOMETAX,DD.INCOMETAXRATE,
						     DD.SURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,DD.EDUCATIONCESSRATE,
						     DD.ISTAXINFOEDITABLE,DD.TAXRATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,
							 DD.ISBOOKENTRY,DD.NONDEDREASON,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,
							 CD.SERIALNO AS CHALSERIALNO,CD.CHALLANID,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,
							 CD.CHALLANTOTAL ,CD.[QUARTER] AS CHALLANQUARTER,
							 CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CD.ISCOMPANY END AS CHALLANCODE,
							 DL.DEDCHALINKID
					  FROM   DEDUCTIONDETAIL DD WITH(NOLOCK) 
						INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID';
		IF @FORMID <> 1
			BEGIN
				SET @QUERY = @QUERY + ' INNER JOIN  NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID';
			END	
		SET @QUERY = @QUERY + ' INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID			
							    LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
							    LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
					  WHERE  DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
							+ ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) 
							+ ' AND DD.[QUARTER] = ' + CAST(@QUARTER AS VARCHAR) 
							+ ' AND MONTH(DD.DEDUCTEDDATE) = ' + CAST(@MONTHID AS VARCHAR) 
							+ ' AND DL.DEDCHALINKID IS NULL'
							+ ' AND ((DD.SECTIONID IN (5, 17) AND DD.ENTRYTYPE = 4)'
							+ ' OR (DD.SECTIONID NOT IN (5, 17) AND DD.ENTRYTYPE <> 4))'
							+ ' AND DD.TOTALDEDUCTED > 0';					
		IF @DEDUCTIONORDER = 0
			BEGIN
				SET @QUERY = @QUERY + ' ORDER BY SECTIONNAME ASC, DEDUCTEECODE DESC, DD.TOTALDEDUCTED DESC';
			END
		ELSE
			BEGIN
				SET @QUERY = @QUERY + ' ORDER BY SECTIONNAME ASC, DEDUCTEECODE DESC, DD.TOTALDEDUCTED ASC';
			END		
		EXEC SP_EXECUTESQL @QUERY;
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetUnLinkedDeductionsOnSearch')
DROP PROCEDURE USP_TDS_GetUnLinkedDeductionsOnSearch
GO
--[USP_TDS_GetUnLinkedDeductionsOnSearch] 1,10,5,1
CREATE PROCEDURE [USP_TDS_GetUnLinkedDeductionsOnSearch] 
 @StartRow INT,                  
 @PageSize INT,
 @BRANCHID INT,                  
 @FORMID INT,                  
 @SECTIONID INT = NULL,                  
 @NAME VARCHAR(75) = NULL,                  
 @QUARTER INT = NULL,                  
 @FROMDATE SMALLDATETIME = NULL,                  
 @TODATE SMALLDATETIME = NULL,                  
 @DEDUCTEECODE INT = NULL,
 @ISSUPERADMIN BIT=1,        
 @ISAUDITTRIAL BIT = 0                  
AS                  
 BEGIN                  
  DECLARE @SQLQUERY NVARCHAR(MAX)                  
  /* The number of rows affected by the different commands does not interest the application, so turn NOCOUNT ON*/                  
  SET NOCOUNT ON                  
  /* Determine the first record and last record */                  
  DECLARE @FirstRec int, @LastRec int                  
  SELECT @FirstRec = (@StartRow - 1) * @PageSize                  
  SELECT @LastRec = (@StartRow * @PageSize + 1);                  
	SELECT DD.DEDUCTIONID INTO #DEDTEMP FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
		WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID --AND DD.TOTALDEDUCTED > 0
    SELECT DEDUCTIONID,SECTIONID,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS ,0 AS DEDUCTEECODE,DEDUCTEEID INTO #TEMPTABLE FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
    WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID --AND TOTALDEDUCTED > 0
        SELECT DEDUCTIONID,SECTIONID,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS ,0 AS DEDUCTEECODE,DEDUCTEEID  INTO #DEDUCTION FROM  
         (  
             SELECT DEDUCTIONID,SECTIONID,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS ,0 AS DEDUCTEECODE,DEDUCTEEID FROM #TEMPTABLE T WITH(NOLOCK) WHERE  
			 NOT EXISTS(  
			 SELECT DEDUCTIONID,SECTIONID,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS ,0 AS DEDUCTEECODE,DEDUCTEEID FROM #DEDTEMP D WHERE T.DEDUCTIONID = D.DEDUCTIONID )  
         )DE      
  SET @SQLQUERY = 'SELECT DD.PARTPAYMENTID,D.NAME,DD.DEDUCTIONID,DD.QUARTER,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,                  
           DD.DEDUCTEDDATE,DD.SECTIONID, DD.ENTRYTYPE, ISNULL(DD.TRANSSTATUS,0) TRANSSTATUS,0 AS FEE, 200 AS MINORHEAD,                
           CASE WHEN DD.FORMID = 1 THEN TS.SECTIONNAME + '' (''+ TS.TAXNAME + '')'' ELSE TS.SECTIONNAME  END as SECTIONNAME,                  
           ISNULL(DD.SERIALNO,0) AS SERIALNO,'
    IF(@FORMID = 1)
     SET @SQLQUERY = @SQLQUERY + '0 AS DEDUCTEECODE'      
    ELSE
     SET @SQLQUERY = @SQLQUERY + 'E.DEDUCTEECODE'      
     SET @SQLQUERY = @SQLQUERY + ' INTO #TEMP1 FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
        INNER JOIN #DEDUCTION DE ON DE.DEDUCTIONID = DD.DEDUCTIONID              
        INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
        INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID'
  IF(@FORMID = 1)
    SET  @SQLQUERY = @SQLQUERY + ' INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID;'                 
  ELSE
    SET  @SQLQUERY = @SQLQUERY + ' INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID;'           
  SET @SQLQUERY = @SQLQUERY + 'SELECT PPD.PARTPAYMENTID,DD.NAME,-1 AS DEDUCTIONID,DD.QUARTER,DD.PAYMENTMADE,DD.PAYMENTDATE,PPD.REMINCOMETAX,PPD.REMSURCHARGE,PPD.REMEDUCATIONCESS,PPD.REMTOTALDEDUCTED,                  
           GETDATE() AS DEDUCTEDDATE,DD.SECTIONID,  DD.ENTRYTYPE,DD.TRANSSTATUS,0 AS FEE, 200 AS MINORHEAD,                 
           CASE WHEN DD.FORMID = 1 THEN TS.SECTIONNAME + '' (''+ TS.TAXNAME + '')'' ELSE TS.SECTIONNAME  END as SECTIONNAME,                  
           DD.SERIALNO,DD.DEDUCTEECODE INTO #TEMP2                    
       FROM PARTPAYMENTDETAILS PPD WITH(NOLOCK)  INNER JOIN                  
       (   
SELECT  INNERDD.PARTPAYMENTID,NE.DEDUCTEECODE,INNERDD.BRANCHID,INNERDD.FORMID,INNERDD.QUARTER,INNERDD.SECTIONID,ISNULL(INNERDD.SERIALNO,0) AS SERIALNO,INNERDD.DEDUCTEEID,                  
            D.NAME,INNERDD.PAYMENTMADE,INNERDD.PAYMENTDATE,INNERDD.ENTRYTYPE, ISNULL(INNERDD.TRANSSTATUS,0) TRANSSTATUS                     
        FROM DEDUCTIONDETAIL INNERDD  WITH(NOLOCK)                  
          INNER JOIN                          
          (SELECT  MIN(SERIALNO) AS SERIALNO,PARTPAYMENTID,BRANCHID,FORMID,QUARTER                   
             FROM DEDUCTIONDETAIL WITH(NOLOCK)                   
            WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID='+CAST(@FORMID AS VARCHAR)+'--AND QUARTER=1                   
            GROUP BY BRANCHID,FORMID,QUARTER,PARTPAYMENTID) MINDED                  
          ON INNERDD.BRANCHID=MINDED.BRANCHID AND INNERDD.FORMID=MINDED.FORMID AND INNERDD.QUARTER=MINDED.QUARTER                   
          AND INNERDD.SERIALNO=MINDED.SERIALNO AND INNERDD.PARTPAYMENTID=MINDED.PARTPAYMENTID                  
              INNER JOIN DEDUCTEE D  WITH(NOLOCK)                  
          ON INNERDD.DEDUCTEEID = D.DEDUCTEEID      
           LEFT JOIN dbo.NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID                         
          WHERE INNERDD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND INNERDD.FORMID = '+CAST(@FORMID AS VARCHAR)+' --AND INNERDD.QUARTER=1                  
       ) DD ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID AND PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER                  
       INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID                  
       WHERE PPD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND PPD.FORMID = '+CAST(@FORMID AS VARCHAR)+';'
  SET @SQLQUERY = @SQLQUERY + 'SELECT ROWNUMBER = IDENTITY(INT,1,1),* INTO #TEMP FROM                  
       (                  
		   SELECT * FROM #TEMP1     
		   UNION
		   SELECT * FROM #TEMP2                 
       ) TEST WHERE 1 = 1'                  
  IF(@SECTIONID <> -1)                  
   BEGIN      
	IF(@SECTIONID = 15)
	 BEGIN
		SET @SQLQUERY = @SQLQUERY + ' AND TEST.SECTIONID IN (23,24)'
	 END   
  ELSE
     BEGIN            
		SET @SQLQUERY = @SQLQUERY + ' AND TEST.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);                  
	 END
   END                  
  IF @NAME <> ''                 
   BEGIN                   
    SET @SQLQUERY = @SQLQUERY + ' AND TEST.NAME LIKE ''%' + @NAME + '%''';                  
   END                  
  IF(@QUARTER <> -1)                  
   BEGIN                  
    SET @SQLQUERY = @SQLQUERY + ' AND TEST.QUARTER = ' + CAST(@QUARTER AS VARCHAR(2))                  
   END                  
  IF(@FROMDATE IS NOT NULL)                  
   BEGIN                    
    SET @SQLQUERY = @SQLQUERY + ' AND TEST.DEDUCTEDDATE > =''' + CAST(@FROMDATE AS VARCHAR(20)) + ''''                  
   END                  
  IF(@TODATE IS NOT NULL)                  
   BEGIN                       
    SET @SQLQUERY = @SQLQUERY + ' AND TEST.DEDUCTEDDATE <= ''' + CAST(@TODATE AS VARCHAR(20)) + ''''                  
   END                  
   IF @ISSUPERADMIN =0              
   BEGIN              
    SET @SQLQUERY = @SQLQUERY + ' AND  ENTRYTYPE <> 4'                 
   END  
   IF(@DEDUCTEECODE IS NOT NULL) 
   BEGIN
	SET @SQLQUERY = @SQLQUERY + 'AND TEST.DEDUCTEECODE = ' + CAST(@DEDUCTEECODE AS VARCHAR(2))    
   END               
   IF(@ISAUDITTRIAL = 1)        
     BEGIN        
  SET @SQLQUERY = @SQLQUERY + ' AND TRANSSTATUS = 2'        
     END      
  SET @SQLQUERY = @SQLQUERY + ' ORDER BY TEST.PARTPAYMENTID ;ALTER TABLE #TEMP ADD PRIMARY KEY (ROWNUMBER ); SELECT * FROM #TEMP WHERE ROWNUMBER > '+CAST(@FirstRec AS VARCHAR)+'AND ROWNUMBER < '+CAST(@LastRec AS VARCHAR)+ ''                  
 --PRINT @SQLQUERY    
 EXECUTE SP_EXECUTESQL @SQLQUERY;                  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetUnLinkedDeductionsOnSearchCount')
DROP PROCEDURE USP_TDS_GetUnLinkedDeductionsOnSearchCount
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetUnLinkedDeductionsOnSearchCount]     
 @BRANCHID INT,          
 @FORMID INT,          
 @SECTIONID INT=NULL,          
 @NAME VARCHAR(75)=NULL,          
 @QUARTER INT=NULL,          
 @FROMDATE SMALLDATETIME=NULL,          
 @TODATE SMALLDATETIME=NULL,          
 @DEDUCTEECODE INT=NULL,        
 @ISSUPERADMIN BIT=1,      
 @ISAUDITTRIAL BIT = 0              
AS          
 BEGIN          
	DECLARE @SQLQUERY NVARCHAR(MAX);
	SELECT DEDUCTIONID, BRANCHID, FORMID, SECTIONID, QUARTER, DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS, DEDUCTEEID, SERIALNO, PARTPAYMENTID
	INTO #DEDUCTIONDETAIL 
	FROM DEDUCTIONDETAIL WITH(NOLOCK)  
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID
	SELECT DEDUCTIONID, BRANCHID
	INTO #DEDCHALINK
	FROM DEDCHALINK WITH(NOLOCK)
	WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #DEDUCTIONDETAIL)
	SELECT DEDUCTEEID, NAME, BRANCHID, PAN 
	INTO #DEDUCTEE 
	FROM DEDUCTEE WITH(NOLOCK) 
	WHERE BRANCHID = @BRANCHID
	IF(@FORMID = 1)
		BEGIN
			SELECT SERIALNO, DEDUCTEEID 
			INTO #EMPLOYEE  
			FROM EMPLOYEE WITH(NOLOCK) 
			WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDUCTEE)
		END	
	SELECT SERIALNO, DEDUCTEEID, DEDUCTEECODE
	INTO #NONEMPLOYEE
	FROM NONEMPLOYEE WITH(NOLOCK) 
	WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDUCTEE)
	SELECT DD.DEDUCTIONID,SECTIONID,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS ,0 AS DEDUCTEECODE,DEDUCTEEID 
	INTO #DEDTEMP 
	FROM #DEDUCTIONDETAIL DD  
		INNER JOIN #DEDCHALINK DL 
		ON DD.DEDUCTIONID = DL.DEDUCTIONID  
	SELECT DEDUCTIONID,SECTIONID,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS ,0 AS DEDUCTEECODE,DEDUCTEEID 
	INTO #TEMP 
	FROM #DEDUCTIONDETAIL DD 
    SELECT DEDUCTIONID,SECTIONID,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS ,0 AS DEDUCTEECODE,DEDUCTEEID  
    INTO #DEDUCTION FROM  
	 (  
		 SELECT DEDUCTIONID,SECTIONID,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS ,0 AS DEDUCTEECODE,DEDUCTEEID 
		 FROM #TEMP T 
		 WHERE  NOT EXISTS(SELECT DEDUCTIONID,SECTIONID,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS ,0 AS DEDUCTEECODE,DEDUCTEEID 
		 FROM #DEDTEMP D 
			WHERE T.DEDUCTIONID = D.DEDUCTIONID)  
	 )DE       
	SET @SQLQUERY = 'SELECT DE.DEDUCTIONID, DE.SECTIONID,NAME,QUARTER,DEDUCTEDDATE, ENTRYTYPE, TRANSSTATUS'
	IF(@FORMID = 1)
		SET @SQLQUERY = @SQLQUERY + ' ,0 AS DEDUCTEECODE '
    ELSE
		SET @SQLQUERY = @SQLQUERY + ' ,NE.DEDUCTEECODE '
	SET @SQLQUERY = @SQLQUERY +	' INTO #TEMP1 FROM #DEDUCTION DE               
        INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON DE.DEDUCTEEID = D.DEDUCTEEID
        INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DE.SECTIONID = TS.SECTIONID'
	IF(@FORMID = 1)
		SET  @SQLQUERY = @SQLQUERY + ' INNER JOIN #EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID;'                 
	ELSE
		SET  @SQLQUERY = @SQLQUERY + ' INNER JOIN #NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID;'
	SET @SQLQUERY = @SQLQUERY + 'SELECT -1 AS DEDUCTIONID, DD.SECTIONID,DD.NAME,DD.QUARTER,DD.DEDUCTEDDATE, ENTRYTYPE,DEDUCTEECODE,TRANSSTATUS 
		INTO #TEMP2        
		FROM PARTPAYMENTDETAILS PPD WITH(NOLOCK)  
		INNER JOIN                  
		(                   
			SELECT INNERDD.PARTPAYMENTID,INNERDD.BRANCHID,INNERDD.FORMID,INNERDD.QUARTER, INNERDD.ENTRYTYPE,
			ISNULL(DEDUCTEECODE,0)DEDUCTEECODE,INNERDD.SECTIONID, NAME, DEDUCTEDDATE,ISNULL(TRANSSTATUS,2)TRANSSTATUS
			FROM #DEDUCTIONDETAIL INNERDD                  
			INNER JOIN                          
			(
				SELECT  MIN(SERIALNO) AS SERIALNO,PARTPAYMENTID,BRANCHID,FORMID,QUARTER                   
				FROM #DEDUCTIONDETAIL
				GROUP BY BRANCHID,FORMID,QUARTER,PARTPAYMENTID
			) MINDED                  
			ON INNERDD.BRANCHID=MINDED.BRANCHID AND INNERDD.FORMID=MINDED.FORMID AND INNERDD.QUARTER=MINDED.QUARTER                   
			AND INNERDD.SERIALNO=MINDED.SERIALNO AND INNERDD.PARTPAYMENTID=MINDED.PARTPAYMENTID                  
			INNER JOIN #DEDUCTEE D ON INNERDD.DEDUCTEEID = D.DEDUCTEEID      
			LEFT JOIN #NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID        
		) DD ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID AND PPD.BRANCHID = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER                         
		WHERE PPD.BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND PPD.FORMID = '+CAST(@FORMID AS VARCHAR)+';'
	SET @SQLQUERY = @SQLQUERY + 'SELECT DEDUCTIONID, SECTIONID,NAME,QUARTER,DEDUCTEDDATE, ENTRYTYPE,DEDUCTEECODE,TRANSSTATUS  INTO #UNLINKED FROM                  
       ( 
       SELECT * FROM #TEMP1             
       UNION
       SELECT * FROM #TEMP2                 
      ) TEST WHERE 1 = 1'                  
	IF(@SECTIONID <> -1)                  
	BEGIN      
		IF(@SECTIONID = 15)
		BEGIN
			SET @SQLQUERY = @SQLQUERY + ' AND TEST.SECTIONID IN (23,24)'
		END   
		ELSE
		BEGIN            
			SET @SQLQUERY = @SQLQUERY + ' AND TEST.SECTIONID = ' + CAST(@SECTIONID AS VARCHAR);                  
		END
	END                  
	IF @NAME <> ''                 
	BEGIN                   
		SET @SQLQUERY = @SQLQUERY + ' AND TEST.NAME LIKE ''%' + @NAME + '%''';                  
	END                  
	IF(@QUARTER <> -1)                  
	BEGIN                  
		SET @SQLQUERY = @SQLQUERY + ' AND TEST.QUARTER = ' + CAST(@QUARTER AS VARCHAR(2))                  
	END                  
	IF(@FROMDATE IS NOT NULL)                  
	BEGIN                    
		SET @SQLQUERY = @SQLQUERY + ' AND TEST.DEDUCTEDDATE > =''' + CAST(@FROMDATE AS VARCHAR(20)) + ''''                  
	END                  
	IF(@TODATE IS NOT NULL)                  
	BEGIN                       
		SET @SQLQUERY = @SQLQUERY + ' AND TEST.DEDUCTEDDATE <= ''' + CAST(@TODATE AS VARCHAR(20)) + ''''                  
	END                  
	IF @ISSUPERADMIN =0              
	BEGIN              
		SET @SQLQUERY = @SQLQUERY + ' AND  ENTRYTYPE <> 4'                 
	END  
	IF(@DEDUCTEECODE IS NOT NULL) 
	BEGIN
		SET @SQLQUERY = @SQLQUERY + 'AND TEST.DEDUCTEECODE = ' + CAST(@DEDUCTEECODE AS VARCHAR(2))    
	END               
	IF(@ISAUDITTRIAL = 1)        
    BEGIN        
		SET @SQLQUERY = @SQLQUERY + ' AND TRANSSTATUS = 2'        
    END 
	IF(@DEDUCTEECODE IS NOT NULL)     
	BEGIN    
		SET @SQLQUERY = @SQLQUERY + 'AND TEST.DEDUCTEECODE = ' + CAST(@DEDUCTEECODE AS VARCHAR(2))        
	END        
	SET @SQLQUERY = @SQLQUERY + '; SELECT COUNT(DEDUCTIONID) FROM #UNLINKED' 
	EXECUTE SP_EXECUTESQL @SQLQUERY;
	IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
		DROP TABLE #TEMP
	IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL
		DROP TABLE #TEMP1
	IF OBJECT_ID('TEMPDB..#TEMP2') IS NOT NULL
		DROP TABLE #TEMP2
	IF OBJECT_ID('TEMPDB..#DEDTEMP') IS NOT NULL
		DROP TABLE #DEDTEMP   
	IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
		DROP TABLE #DEDUCTIONDETAIL
	IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
		DROP TABLE #DEDUCTION
	IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
		DROP TABLE #DEDUCTEE  
	IF OBJECT_ID('TEMPDB..#EMPLOYEE') IS NOT NULL
		DROP TABLE #EMPLOYEE
	IF OBJECT_ID('TEMPDB..#NONEMPLOYEE') IS NOT NULL
		DROP TABLE #NONEMPLOYEE
	IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
		DROP TABLE #DEDCHALINK  
	IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
		DROP TABLE #UNLINKED
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNLINKEDDEDUCTIONSONSECTIONID')
DROP PROCEDURE USP_TDS_GETUNLINKEDDEDUCTIONSONSECTIONID
GO
CREATE PROCEDURE [USP_TDS_GETUNLINKEDDEDUCTIONSONSECTIONID]
	@BRANCHID INT,
	@FORMID INT,
	@SECTIONID INT
AS
BEGIN
		IF (@SECTIONID<>-1)
			BEGIN
				SELECT DD.DEDUCTEEID,D.NAME,D.PAN,NE.DEDUCTEECODE,DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,DD.ERETURNID,DD.MODE,DD.DEDUCTEEPAN,DD.LASTDEDUCTEEPAN,DD.DEDUCTEEPANREF,
					   DD.LASTDEDUCTEEPANREF,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.DEDUCTEDDATE,DD.SECTIONID ,TS.SECTIONNAME,
					   DD.INCOMETAXRATE,DD.SURCHARGERATE,DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,ISNULL(DD.SERIALNO,'') AS DEDSERIALNO, CD.SERIALNO AS CHALSERIALNO,
					   DL.DEDCHALINKID, CD.CHALLANID,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL ,CD.[QUARTER] AS CHALLANQUARTER,CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CD.ISCOMPANY END AS CHALLANCODE
				FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID
					   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID=TS.SECTIONID
					   LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
					   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
					   LEFT JOIN DBO.NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID
				WHERE  DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.SECTIONID=@SECTIONID AND DD.TOTALDEDUCTED>0
					   AND DD.DEDUCTIONID NOT IN (SELECT	DEDUCTIONID
												FROM	DEDCHALINK
												WHERE	DEDCHALINK.BRANCHID = @BRANCHID)
			END
        ELSE IF(@SECTIONID=-1)
			BEGIN
				SELECT DD.DEDUCTEEID,D.NAME,D.PAN,NE.DEDUCTEECODE,DD.DEDUCTIONID,DD.[QUARTER],DD.BRANCHID,DD.FORMID,DD.ERETURNID,DD.MODE,DD.DEDUCTEEPAN,DD.LASTDEDUCTEEPAN,DD.DEDUCTEEPANREF,
					   DD.LASTDEDUCTEEPANREF,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,DD.TOTALDEDUCTED,DD.PAYMENTMADE,DD.PAYMENTDATE,DD.DEDUCTEDDATE,DD.SECTIONID ,TS.SECTIONNAME,
					   DD.INCOMETAXRATE,DD.SURCHARGERATE,DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,ISNULL(DD.SERIALNO,'') AS DEDSERIALNO, CD.SERIALNO AS CHALSERIALNO,
					   DL.DEDCHALINKID, CD.CHALLANID,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL ,CD.[QUARTER] AS CHALLANQUARTER,CASE WHEN CD.ISCOMPANY IS NULL THEN -1 ELSE CD.ISCOMPANY END AS CHALLANCODE
				FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID
					   INNER JOIN TAXSECTIONS TS ON DD.SECTIONID=TS.SECTIONID
					   LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID
					   LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DL.CHALLANID = CD.CHALLANID
					   LEFT JOIN DBO.NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID
				WHERE  DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.TOTALDEDUCTED>0
					   AND DD.DEDUCTIONID NOT IN (SELECT	DEDUCTIONID
												FROM	DEDCHALINK WITH(NOLOCK)
												WHERE	DEDCHALINK.BRANCHID = @BRANCHID)
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNMATCHEDORMANUALLYMATCHEDCHALLANDETAILCOUNT')
DROP PROCEDURE USP_TDS_GETUNMATCHEDORMANUALLYMATCHEDCHALLANDETAILCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETUNMATCHEDORMANUALLYMATCHEDCHALLANDETAILCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT 	COUNT(C.CHALLANSERIALNO) UNMATCHEDORMANUALLYMATCHEDDETAILCOUNT
		FROM    CORRCHALLANDETAIL C WITH(NOLOCK) LEFT JOIN CHALLANDETAIL O WITH(NOLOCK) ON (C.MATCHEDID = O.CHALLANID OR C.CHALLANID = O.CHALLANID) AND C.FORMID = O.FORMID AND C.QUARTER = O.QUARTER
		WHERE   C.BRANCHID = @BRANCHID AND C.FORMID = @FORMID AND C.QUARTER = @QUARTER AND C.CORRECTIONSTATUS <> 1  AND C.CORRECTIONSTATUS <> 5 AND C.ISUPDATECHALLAN = 1
															  AND (O.CHALLANID IS NULL OR O.CHALLANID = 0);
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNMATCHEDORMANUALLYMATCHEDDEDUCTIONDETAILCOUNT')
DROP PROCEDURE USP_TDS_GETUNMATCHEDORMANUALLYMATCHEDDEDUCTIONDETAILCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETUNMATCHEDORMANUALLYMATCHEDDEDUCTIONDETAILCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		IF @FORMID = 1
			BEGIN
				SELECT COUNT(CDD.DEDUCTIONSERIALNO) UNMATCHEDORMANUALLYMATCHEDDETAILCOUNT
				FROM   CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)  INNER JOIN
											  (
													SELECT CNE.DEDUCTEESERIALNO,CNE.NAME,CNE.PAN FROM CORREMPLOYEE CNE WITH(NOLOCK)
													INNER JOIN
													(
														SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS
														FROM   CORREMPLOYEE WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER GROUP BY DEDUCTEESERIALNO
													) UNE ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS
													WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
											  ) AS D ON CDD.DEDUCTEESERIALNO = D.DEDUCTEESERIALNO
											  LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID
											  LEFT JOIN
											  (
													SELECT DD.DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
																								  LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID
															 WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER
											  ) O ON (CDD.MATCHEDID = O.DEDUCTIONID OR CDD.DEDUCTIONID = O.DEDUCTIONID)
				   WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER AND CDD.CORRECTIONSTATUS <> 1 AND CDD.CORRECTIONSTATUS <> 5 AND (O.DEDUCTIONID IS NULL OR O.DEDUCTIONID = 0);
			END
		ELSE
			BEGIN
				SELECT COUNT(CDD.DEDUCTIONSERIALNO) UNMATCHEDORMANUALLYMATCHEDDETAILCOUNT
				FROM   CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)  INNER JOIN
											  (
													SELECT CNE.DEDUCTEESERIALNO,CNE.NAME,CNE.PAN FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)
													INNER JOIN
													(
														SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS
														FROM CORRNONEMPLOYEE WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER GROUP BY DEDUCTEESERIALNO
													) UNE ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS
													WHERE CNE.BRANCHID = @BRANCHID AND CNE.FORMID = @FORMID AND CNE.QUARTER = @QUARTER
											  ) AS D ON CDD.DEDUCTEESERIALNO = D.DEDUCTEESERIALNO
											  LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)  ON CDD.SECTIONID = TS.SECTIONID
											  LEFT JOIN
											  (
													SELECT DD.DEDUCTIONID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON DD.DEDUCTEEID = D.DEDUCTEEID
																						  LEFT JOIN TAXSECTIONS TS WITH(NOLOCK)  ON DD.SECTIONID = TS.SECTIONID
													WHERE  DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER
											  ) O ON (CDD.MATCHEDID = O.DEDUCTIONID OR CDD.DEDUCTIONID = O.DEDUCTIONID)
				WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND  CDD.QUARTER = @QUARTER AND CDD.CORRECTIONSTATUS <> 1 AND CDD.CORRECTIONSTATUS <> 5
											   AND (O.DEDUCTIONID IS NULL OR O.DEDUCTIONID = 0)
			END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNMATCHEDRECORD')
DROP PROCEDURE USP_TDS_GETUNMATCHEDRECORD
GO
CREATE PROCEDURE [USP_TDS_GETUNMATCHEDRECORD] 
 @BRANCHID INT,
 @MONTH INT,
 @FORMTYPE VARCHAR(20),
 @FINYEAR INT
 AS
 BEGIN
      DECLARE @MONTHYEAR INT;
	  IF @MONTH < 4
        SELECT @MONTHYEAR=CAST(@MONTH AS VARCHAR(8))  +  CAST(@FINYEAR + 1 AS VARCHAR(8));
      ELSE
        SELECT @MONTHYEAR=CAST(@MONTH AS VARCHAR(8))  +  CAST(@FINYEAR AS VARCHAR(8));
	 SELECT SUPERRESULT.BRANCHID,SUPERRESULT.FORMID,SUPERRESULT.PARENTBRANCHID,SUPERRESULT.FORMTYPE,ABS(ISNULL(AMOUNT,0)-TDS) AS BALANCEAMOUNT, TDS AS TOTALAMOUNT,PA.AMOUNT,PA.ACCOUNTNO,PA.MONTHYEAR  FROM    
	 (
	 SELECT RESULT.BRANCHID,RESULT.FORMID, RESULT.PARENTBRANCHID,RESULT.FORMTYPE ,SUM(RESULT.TDS) AS TDS FROM   
	 (
			SELECT CB.BRANCHID,DD.FORMID, CB.PARENTBRANCHID,SUM(DD.TOTALDEDUCTED) AS TDS ,
				 CASE WHEN DD.FORMID=1 THEN '24Q' 
						WHEN DD.FORMID=3 THEN '27Q' 
						WHEN (DD.FORMID=2 AND TS.SECTIONID=5 AND DD.ENTRYTYPE=4) THEN '26QI' 
						ELSE '26QV' 
				 END AS FORMTYPE 
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID  
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON TS.SECTIONID=DD.SECTIONID  
			LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID  
			WHERE  DCL.DEDCHALINKID IS NULL AND MONTH(DEDUCTEDDATE)=@MONTH AND CB.BRANCHID=@BRANCHID
			GROUP BY CB.BRANCHID,TS.SECTIONID,DD.FORMID,CB.PARENTBRANCHID,DD.ENTRYTYPE
	  ) AS RESULT GROUP BY RESULT.BRANCHID,RESULT.FORMTYPE,RESULT.PARENTBRANCHID,RESULT.FORMID
	  ) SUPERRESULT   
		LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK)  ON PA.BRANCHID=SUPERRESULT.BRANCHID AND PA.FORMTYPE=SUPERRESULT.FORMTYPE AND PA.MONTHYEAR=@MONTHYEAR
		WHERE SUPERRESULT.BRANCHID=@BRANCHID AND SUPERRESULT.FORMTYPE=@FORMTYPE AND PA.MONTHYEAR=@MONTHYEAR
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUNUTILISEDCHALLANDETAILS')
DROP PROCEDURE USP_TDS_GETUNUTILISEDCHALLANDETAILS
GO
CREATE PROCEDURE USP_TDS_GETUNUTILISEDCHALLANDETAILS --USP_TDS_GETUNUTILISEDCHALLANDETAILS  '00164',1
 @BRANCHCODES VARCHAR(MAX),
 @ISPARENT BIT = 0
AS  
	BEGIN 
		DECLARE @BRANCHES TABLE(BRANCHID INT, BRANCHCODE VARCHAR(10), ROBRANCHCODE VARCHAR(10))
		IF(@BRANCHCODES = '-1')
			BEGIN
				INSERT INTO @BRANCHES
				SELECT BRANCHID, BRANCHCODE,
					ISNULL((SELECT BRANCHCODE 
							FROM COMPANYBRANCH WITH(NOLOCK) 
							WHERE BRANCHID = CB.PARENTBRANCHID),BRANCHCODE) AS ROBRANCHCODE					
				FROM COMPANYBRANCH CB WITH(NOLOCK)
			END
		ELSE
			BEGIN
				SELECT * INTO #BRANCHCODES FROM  dbo.UDF_TDS_SplitString(@BRANCHCODES,',')
				SELECT BRANCHID 
				INTO #BRANCHIDS 
				FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE IN (SELECT DATA FROM #BRANCHCODES)
				DROP TABLE #BRANCHCODES
				IF(@ISPARENT = 1)
					BEGIN
						INSERT INTO @BRANCHES
						SELECT BRANCHID, BRANCHCODE,
							ISNULL((SELECT BRANCHCODE 
									FROM COMPANYBRANCH WITH(NOLOCK) 
									WHERE BRANCHID = CB.PARENTBRANCHID),BRANCHCODE) AS ROBRANCHCODE						
						FROM COMPANYBRANCH CB WITH(NOLOCK)
						WHERE PARENTBRANCHID IN (SELECT BRANCHID FROM #BRANCHIDS) OR BRANCHID IN (SELECT BRANCHID FROM #BRANCHIDS)
					END
				ELSE
					BEGIN
						INSERT INTO @BRANCHES
						SELECT BRANCHID, BRANCHCODE,
							ISNULL((SELECT BRANCHCODE 
									FROM COMPANYBRANCH WITH(NOLOCK) 
									WHERE BRANCHID = CB.PARENTBRANCHID),BRANCHCODE) AS ROBRANCHCODE					
						FROM COMPANYBRANCH CB WITH(NOLOCK)
						WHERE BRANCHID IN (SELECT BRANCHID FROM #BRANCHIDS)
					END				
				DROP TABLE #BRANCHIDS
			END		
		SELECT BRANCHID, FORMID, QUARTER, DEDUCTIONID, TOTALDEDUCTED 
		INTO #DEDDET
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE BRANCHID IN (SELECT BRANCHID FROM @BRANCHES)
		SELECT BRANCHID, FORMID, QUARTER, CHALLANID, CHALLANTOTAL
		INTO #CHADET
		FROM CHALLANDETAIL WITH(NOLOCK)
		WHERE BRANCHID IN (SELECT BRANCHID FROM @BRANCHES)
		SELECT *
		INTO #DEDCHALINK 
		FROM DEDCHALINK WITH(NOLOCK) 
		WHERE BRANCHID IN (SELECT BRANCHID FROM @BRANCHES)
		SELECT DD.BRANCHID, DD.DEDUCTIONID, CD.CHALLANID, DCL.DEDCHALINKID, DD.TOTALDEDUCTED, CD.CHALLANTOTAL
		INTO #LINKED_DEDCHALINK 
		FROM #DEDDET DD  WITH(NOLOCK) 
			 INNER JOIN #DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID = DD.DEDUCTIONID
			 INNER JOIN #CHADET CD WITH(NOLOCK) ON CD.CHALLANID = DCL.CHALLANID
		SELECT BRANCHID, CHALLANID, CHALLANTOTAL, SUM(TOTALDEDUCTED) AS DEDLINKED
		INTO #LINKEDCHAFINAL
		FROM #LINKED_DEDCHALINK 
		GROUP BY BRANCHID, CHALLANID, CHALLANTOTAL		
		SELECT BRANCHID,FORMID, QUARTER, CHALLANID, CHALLANTOTAL
		INTO #UNLINKED_CHA
		FROM #CHADET WITH(NOLOCK) 	 
		WHERE CHALLANID NOT IN(SELECT CHALLANID FROM #LINKED_DEDCHALINK )
		SELECT BRANCHID, CHALLANID, CHALLANTOTAL, DEDLINKED, (CHALLANTOTAL - DEDLINKED) UNUTILISEDAMT
		INTO #CHAFINAL
		FROM #LINKEDCHAFINAL
		WHERE CHALLANTOTAL > DEDLINKED
		UNION
		SELECT BRANCHID, CHALLANID, CHALLANTOTAL, 0 DEDLINKED, CHALLANTOTAL UNUTILISEDAMT
		FROM #UNLINKED_CHA
		SELECT B.BRANCHCODE,B.ROBRANCHCODE ,C.BANKCHALLANNO, C.CHALLANPAIDDATE, RB.BSRCODE, D.TAN, C.QUARTER, 
			T.TAXNAME, CF.CHALLANTOTAL, CF.DEDLINKED, CF.UNUTILISEDAMT
		FROM #CHAFINAL CF
			INNER JOIN CHALLANDETAIL C WITH(NOLOCK) ON CF.CHALLANID = C.CHALLANID 
			INNER JOIN @BRANCHES B ON CF.BRANCHID = B.BRANCHID 
			INNER JOIN TAXSECTIONS T WITH(NOLOCK) ON C.SECTIONID = T.SECTIONID 
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON C.BRANCHID = BD.BRANCHID AND C.QUARTER = BD.QUARTER 
			INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID
			INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON C.BANKID = RB.BANKID
		DROP TABLE #DEDDET
		DROP TABLE #CHADET
		DROP TABLE #DEDCHALINK
		DROP TABLE #LINKED_DEDCHALINK
		DROP TABLE #LINKEDCHAFINAL
		DROP TABLE #UNLINKED_CHA
		DROP TABLE #CHAFINAL	
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDC3DEDUCTEESLNOS')
DROP PROCEDURE USP_TDS_GETUPDATEDC3DEDUCTEESLNOS
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDC3DEDUCTEESLNOS]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN
SELECT DEDUCTEESERIALNO FROM CORRDEDUCTIONDETAIL  WITH(NOLOCK)
WHERE BRANCHID=@BRANCHID AND QUARTER=@QUARTER AND FORMID=@FORMID AND (CORRECTIONSTATUS=2 OR CORRECTIONSTATUS=4)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDCORRCHALLAN')
DROP PROCEDURE USP_TDS_GETUPDATEDCORRCHALLAN
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDCORRCHALLAN] 
	@BRANCHID INT,
	@FORMID SMALLINT,
	@QUARTER SMALLINT,
	@CHALLANSERIALNO INT
AS
BEGIN
     SELECT TOP 1 CD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,CD.CHALLANSERIALNO,CD.BRANCHID,CD.FORMID,CD.QUARTER,ISNULL(CD.CHALLANID,-1) AS CHALLANID,
				  CD.CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,CD.MODEOFPAYMENT,CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,
				  CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,
				  CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,
				  ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.CORRECTIONSTATUS,
				  ISNULL(RB.BSRCODE,'') AS BSRCODE,ISNULL(RBLAST.BSRCODE,'') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,
				  CASE WHEN(DD.CHALLANERETURNID IS NULL) THEN 'FALSE' ELSE 'TRUE' END AS  ISLINKED,FEE, MINORHEAD,
				  ISNULL(TVRECEIPTNUMBER,'') AS TVRECEIPTNUMBER,ISNULL(CD.CHALLANEDITMODE,'') AS CHALLANEDITMODE
			 FROM CORRCHALLANDETAIL CD WITH(NOLOCK) 
					  LEFT JOIN 
				  CORRDEDUCTIONDETAIL DD WITH(NOLOCK) 
			   ON CD.CHALLANERETURNID=DD.CHALLANERETURNID AND CD.BRANCHID=DD.BRANCHID AND CD.FORMID=DD.FORMID AND CD.QUARTER=DD.QUARTER				  
					 INNER JOIN 
				   TAXSECTIONS TS WITH(NOLOCK) 
			   ON CD.SECTIONID=TS.SECTIONID
					 LEFT JOIN 
				   REMITTINGBANK RB WITH(NOLOCK) 
			   ON CD.BANKID=RB.BANKID 
					LEFT JOIN 
				  REMITTINGBANK RBLAST WITH(NOLOCK) 
			  ON CD.LASTBANKID=RBLAST.BANKID
			WHERE CD.BRANCHID=@BRANCHID  AND 
				  CD.FORMID=@FORMID AND 
				  CD.QUARTER=@QUARTER AND				  
				  CD.CHALLANSERIALNO=@CHALLANSERIALNO  
		 ORDER BY CD.CORRECTIONSTATUS DESC 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDCORRCHALLANS')
DROP PROCEDURE USP_TDS_GETUPDATEDCORRCHALLANS
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDCORRCHALLANS]  
   @STARTROW INT=NULL,  
   @PAGESIZE INT=NULL,  
   @BRANCHID INT,  
   @FORMID SMALLINT,  
   @QUARTER SMALLINT,     
   @CHALLANSERIALNO VARCHAR(MAX)=NULL  
AS   
BEGIN  
  /* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/  
 SET NOCOUNT ON  
 /* DETERMINE THE FIRST RECORD AND LAST RECORD */  
 DECLARE @FIRSTREC INT, @LASTREC INT  
 SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
 SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
 --SET @FIRSTREC=0  
 --SET @LASTREC=100  
 DECLARE @SQLQUERY NVARCHAR(MAX)  
 SET @SQLQUERY='SELECT ID=IDENTITY(INT,1,1),* INTO #TEMP FROM (SELECT CD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,CD.CHALLANSERIALNO,CD.BRANCHID,  
        CD.FORMID,CD.QUARTER,ISNULL(CD.CHALLANID,-1) AS CHALLANID,CD.CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,  
        CD.MODEOFPAYMENT,CD.BANKCHALLANNO,CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,CD.BANKID,CD.LASTBANKID,  
        CD.CHALLANPAIDDATE,CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,  
        CD.INTEREST,CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,  
        CD.CHEQUENO,CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.CORRECTIONSTATUS,CD.FEE, CD.MINORHEAD,  
        ISNULL(RB.BSRCODE,'''') AS BSRCODE,ISNULL(RBLAST.BSRCODE,'''') AS LASTBSRCODE,
         CASE WHEN CD.FORMID = 1 THEN TS.SECTIONNAME + '' (''+ TS.TAXNAME + '')'' ELSE TS.SECTIONNAME  END AS SECTIONNAME,  
        CASE WHEN(DD.CHALLANERETURNID IS NULL) THEN ''FALSE'' ELSE ''TRUE'' END AS  ISLINKED,  
        ISNULL(TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER,ISNULL(CD.CHALLANEDITMODE,'''') AS CHALLANEDITMODE,CD.EXPECTEDDID 
      FROM CORRCHALLANDETAIL CD  WITH(NOLOCK)   
        LEFT JOIN REMITTINGBANK RB  WITH(NOLOCK)  
        ON CD.BANKID=RB.BANKID  
           LEFT JOIN REMITTINGBANK RBLAST WITH(NOLOCK)  
        ON CD.LASTBANKID=RBLAST.BANKID  
        INNER JOIN TAXSECTIONS TS  WITH(NOLOCK)  
        ON CD.SECTIONID=TS.SECTIONID  
        LEFT JOIN (SELECT DISTINCT CHALLANERETURNID FROM CORRDEDUCTIONDETAIL  WITH(NOLOCK)   
           WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND   
           FORMID='+CAST(@FORMID AS VARCHAR)+' AND   
           QUARTER='+CAST(@QUARTER AS VARCHAR)+'   
          ) AS DD  
        ON CD.CHALLANERETURNID=DD.CHALLANERETURNID  
     WHERE CD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND   
        CD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND   
        CD.QUARTER='+CAST(@QUARTER AS VARCHAR)+' AND   
             ((CD.CORRECTIONSTATUS = 7 AND CD.CHALLANTOTAL > 0) OR (CD.CORRECTIONSTATUS = 2 AND CD.ISUPDATECHALLAN = 1)  OR (CD.CORRECTIONSTATUS = 5 AND CD.CHALLANTOTAL > 0))'  
    IF @CHALLANSERIALNO IS NOT NULL  
      BEGIN 
		SET @SQLQUERY=@SQLQUERY+' UNION SELECT 2,CD.CHALLANSERIALNO,CD.BRANCHID,CD.FORMID,CD.QUARTER,ISNULL(CD.CHALLANID,-1) AS CHALLANID,  
      CD.CHALLANERETURNID,CD.LINKDEDCOUNT,CD.ISNILCHALLAN,CD.ISUPDATECHALLAN,CD.MODEOFPAYMENT,CD.BANKCHALLANNO,  
      CD.LASTBANKCHALLANNO,CD.TRNVOUCHERNO,CD.LASTTRNVOUCHERNO,CD.BANKID,CD.LASTBANKID,CD.CHALLANPAIDDATE,  
      CD.LASTCHALLANPAIDDATE,CD.DATEOFDEBIT,CD.SECTIONID,CD.INCOMETAX,CD.SURCHARGE,CD.EDUCATIONCESS,CD.INTEREST,  
      CD.PENALTY,CD.OTHERS,CD.CHALLANTOTAL,CD.LASTCHALLANTOTAL,ISNULL(CD.ISCOMPANY,1) AS ISCOMPANY,CD.CHEQUENO,  
      CD.CHEQUEDATE,CD.CHEQUEDRAWNON,CD.TRANREFNO,CD.CORRECTIONSTATUS,CD.FEE, CD.MINORHEAD,ISNULL(RB.BSRCODE,'''') AS BSRCODE,  
      ISNULL(RBLAST.BSRCODE,'''') AS LASTBSRCODE,TS.TAXNAME AS SECTIONNAME,  
      CASE WHEN(DD.CHALLANERETURNID IS NULL) THEN ''FALSE'' ELSE ''TRUE'' END AS  ISLINKED,  
      ISNULL(TVRECEIPTNUMBER,'''') AS TVRECEIPTNUMBER,ISNULL(CD.CHALLANEDITMODE,'''') AS CHALLANEDITMODE,CD.EXPECTEDDID
    FROM CORRCHALLANDETAIL CD WITH(NOLOCK) LEFT JOIN REMITTINGBANK RB WITH(NOLOCK)   
      ON CD.BANKID=RB.BANKID  
      LEFT JOIN REMITTINGBANK RBLAST WITH(NOLOCK)   
      ON CD.LASTBANKID=RBLAST.BANKID  
      INNER JOIN TAXSECTIONS TS  WITH(NOLOCK) 
      ON CD.SECTIONID=TS.SECTIONID  
 LEFT JOIN (SELECT DISTINCT CHALLANERETURNID FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)    
         WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND   
               FORMID='+CAST(@FORMID AS VARCHAR)+' AND   
               QUARTER='+CAST(@QUARTER AS VARCHAR)+'   
        ) AS DD  
      ON CD.CHALLANERETURNID=DD.CHALLANERETURNID  
   WHERE CD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND   
      CD.FORMID='+CAST(@FORMID AS VARCHAR)+' AND   
      CD.QUARTER='+CAST(@QUARTER AS VARCHAR)+' AND   
      CD.CORRECTIONSTATUS=1 AND        
      CD.CHALLANSERIALNO IN ('+CAST(@CHALLANSERIALNO AS VARCHAR(MAX))+')'  
      END
  SET @SQLQUERY=@SQLQUERY+') AS TESTTABLE'  
  SET @SQLQUERY=@SQLQUERY+';SELECT * FROM #TEMP WHERE ID >'+CAST(@FIRSTREC AS VARCHAR(1000))+' AND   
         ID <'+CAST(@LASTREC AS VARCHAR(1000))+' ORDER BY CURRENTCORRSTATUS '  
 --PRINT @SQLQUERY        
 EXECUTE SP_EXECUTESQL @SQLQUERY  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDCORRCHALLANSCOUNT')
DROP PROCEDURE USP_TDS_GETUPDATEDCORRCHALLANSCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDCORRCHALLANSCOUNT] 
	@BRANCHID INT,
	@FORMID SMALLINT,
	@QUARTER SMALLINT,
	@CHALLANSERIALNO VARCHAR(1000) = NULL
AS
BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX)
	SET @SQLQUERY = 'SELECT ID=IDENTITY(INT,1,1),* INTO #TEMP 
					 FROM (SELECT CD.CHALLANSERIALNO,CD.CORRECTIONSTATUS AS CURRENTCORRSTATUS
						   FROM CORRCHALLANDETAIL CD WITH(NOLOCK)  LEFT JOIN REMITTINGBANK RB WITH(NOLOCK)  ON CD.BANKID = RB.BANKID
													 LEFT JOIN REMITTINGBANK RBLAST ON CD.LASTBANKID = RBLAST.BANKID
													 INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON CD.SECTIONID = TS.SECTIONID
													 LEFT JOIN (SELECT DISTINCT CHALLANERETURNID FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
															    WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND
																	  FORMID = ' + CAST(@FORMID AS VARCHAR)+' AND
																	  QUARTER = ' + CAST(@QUARTER AS VARCHAR)+'
															   ) AS DD ON CD.CHALLANERETURNID = DD.CHALLANERETURNID
							WHERE CD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
								  CD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CD.ISUPDATECHALLAN <>0 AND CD.CORRECTIONSTATUS <> 1'
    IF @CHALLANSERIALNO IS NOT NULL
		BEGIN 
			SET @SQLQUERY = @SQLQUERY + ' UNION SELECT CD.CHALLANSERIALNO,2 
											FROM CORRCHALLANDETAIL CD WITH(NOLOCK)  LEFT JOIN REMITTINGBANK RB WITH(NOLOCK)  ON CD.BANKID = RB.BANKID
																	  LEFT JOIN REMITTINGBANK RBLAST WITH(NOLOCK)  ON CD.LASTBANKID = RBLAST.BANKID
																	  INNER JOIN TAXSECTIONS TS WITH(NOLOCK)  ON CD.SECTIONID = TS.SECTIONID
																	  LEFT JOIN (SELECT DISTINCT CHALLANERETURNID FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
																				 WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND 
																					   FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND 
																					   QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
																				) AS DD ON CD.CHALLANERETURNID = DD.CHALLANERETURNID
											WHERE CD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND 
												  CD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CD.CORRECTIONSTATUS = 1 AND CD.CHALLANSERIALNO IN (' + CAST(@CHALLANSERIALNO AS VARCHAR(MAX)) + ')'
		END
		SET @SQLQUERY = @SQLQUERY + ') AS TESTTABLE'
		SET @SQLQUERY = @SQLQUERY + ';SELECT COUNT(ID) FROM #TEMP'
	EXECUTE SP_EXECUTESQL @SQLQUERY
	--PRINT @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDCORRCHALLANSERIALNO')
DROP PROCEDURE USP_TDS_GETUPDATEDCORRCHALLANSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDCORRCHALLANSERIALNO]
			@BRANCHID INT,
			@FORMID SMALLINT,
			@QUARTER SMALLINT
AS
BEGIN
	DECLARE @CHALLANSERIALNOTABLE TABLE(ID INT IDENTITY(1,1),CHALLANSERIALNO INT)
	DECLARE @SQLQUERY NVARCHAR(MAX)
	SET @SQLQUERY='SELECT CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK)
					WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND
					      FORMID='+CAST(@FORMID AS VARCHAR)+ 'AND
					      QUARTER='+CAST(@QUARTER AS VARCHAR)+ 'AND
					      ISUPDATECHALLAN <>0 AND
					      CORRECTIONSTATUS <> 1'
		INSERT INTO @CHALLANSERIALNOTABLE EXECUTE SP_EXECUTESQL @SQLQUERY
		DECLARE @ITEMS NVARCHAR(2000)
		SELECT @ITEMS = ''
		SELECT @ITEMS=@ITEMS +CAST(CHALLANSERIALNO AS VARCHAR)+',' FROM @CHALLANSERIALNOTABLE ORDER BY CHALLANSERIALNO
		IF LEN(@ITEMS)>0
		SELECT @ITEMS=LEFT(@ITEMS,LEN(@ITEMS)-1)
		ELSE
		SET @ITEMS=''
	SELECT @ITEMS AS CHALLANSERIALNNO
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDCORRSALARYDETAIL')
DROP PROCEDURE USP_TDS_GETUPDATEDCORRSALARYDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETUPDATEDCORRSALARYDETAIL]
	@BRANCHID INT,
	@EMPLOYEESERIALNO INT
AS
	BEGIN
		SELECT TOP 1 SD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,SD.DEDUCTEESERIALNO,SD.CORRDEDUCTEESERIALNO,SD.DEDUCTEEID,SD.BRANCHID,E.NAME,ISNULL(E.GENDER,0) AS GENDER,
					 ISNULL(E.ISSENIORCITIZEN,0) AS ISSENIORCITIZEN,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.PAN,SD.GROSSSALARY,SD.ET,SD.PT,SD.DEDUCTIONUS16,
					 SD.INCOMEFROMSALARIES,SD.OTHERINCOME,SD.GROSSTOTALINCOME,SD.LASTGROSSTOTALINCOME,SD.VIA80CCE,SD.VIA80CCF,VIA80CCG,SD.VIAOTHERS,SD.TOTALDEDUNDERCHAPTERVIA,SD.TOTALTAXABLEINCOME,
					 SD.TAXONTOTALINCOME,SD.SURCHARGE,SD.EDUCATIONCESS,SD.RELIEFUS89,SD.NETTAXPAYABLE,SD.TOTALTDS,SD.TAXPAYABLE,SD.CORRECTIONSTATUS,RECORDSTATUS,
					 CURRENTTAXABLEINCOME,PREVTAXABLEINCOME,CURRENTTDS,PREVTDS,ISNULL(ISTDSATHIGHERRATE,0)ISTDSATHIGHERRATE, PANLL1, NAMELL1, PANLL2, NAMELL2,
					 PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, 
					 SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED 
		FROM   CORRSALARYDETAIL SD WITH(NOLOCK)  INNER JOIN (SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.DEDUCTEESERIALNO,CE.NAME,CE.GENDER,CE.ISSENIORCITIZEN,CE.PAN,
													  CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO
											   FROM   CORREMPLOYEE CE WITH(NOLOCK)  INNER JOIN (SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS 
																				  FROM   CORREMPLOYEE WITH(NOLOCK)  
																				  WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4 
																				  GROUP BY DEDUCTEESERIALNO) AS CURRENTEMP
																	  ON CE.DEDUCTEESERIALNO = CURRENTEMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = CURRENTEMP.CORRECTIONSTATUS
											   WHERE  CE.BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4) E
																	  ON SD.DEDUCTEESERIALNO = E.DEDUCTEESERIALNO AND SD.BRANCHID = E.BRANCHID AND E.FORMID = 1 AND E.QUARTER = 4
		WHERE SD.BRANCHID = @BRANCHID AND SD.DEDUCTEESERIALNO = @EMPLOYEESERIALNO AND SD.RECORDSTATUS = 1 AND E.QUARTER = 4               
		ORDER BY SD.CORRECTIONSTATUS DESC;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDCORRSALARYDETAILS')
DROP PROCEDURE USP_TDS_GETUPDATEDCORRSALARYDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETUPDATEDCORRSALARYDETAILS] --USP_TDS_GETUPDATEDCORRSALARYDETAILS 5217,10,5217,'r'
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@NAME VARCHAR(75) = '',
	@PAN VARCHAR(75) = '',
	@UPDATEITEMS VARCHAR(MAX) = NULL,				
	@DELETEITEMS VARCHAR(MAX) = NULL
AS
	BEGIN
		/* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/
		SET NOCOUNT ON
		/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE;
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY = 'SELECT * 
							INTO #TEMP 
						 FROM (
									SELECT SD.CORRECTIONSTATUS AS CURRENTCORRSTATUS,SD.DEDUCTEESERIALNO,SD.CORRDEDUCTEESERIALNO,SD.DEDUCTEEID,SD.BRANCHID,E.NAME,
										   ISNULL(E.GENDER,0) AS GENDER,ISNULL(E.ISSENIORCITIZEN,0) AS ISSENIORCITIZEN,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.PAN,SD.GROSSSALARY,
										   SD.ET,SD.PT,SD.DEDUCTIONUS16,SD.INCOMEFROMSALARIES,SD.OTHERINCOME,SD.GROSSTOTALINCOME,SD.LASTGROSSTOTALINCOME,SD.VIA80CCE,
										   SD.VIA80CCG,SD.VIA80CCF,SD.VIAOTHERS,SD.TOTALDEDUNDERCHAPTERVIA,SD.TOTALTAXABLEINCOME, SD.TAXONTOTALINCOME,SD.SURCHARGE,
										   SD.EDUCATIONCESS,SD.RELIEFUS89,SD.NETTAXPAYABLE,SD.TOTALTDS,SD.TAXPAYABLE,SD.CORRECTIONSTATUS,RECORDSTATUS,
										  CURRENTTAXABLEINCOME,PREVTAXABLEINCOME,CURRENTTDS,PREVTDS,ISNULL(ISTDSATHIGHERRATE,0)ISTDSATHIGHERRATE,
										  PANLL1, NAMELL1, PANLL2, NAMELL2, PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, 
										  PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED 
									FROM  CORRSALARYDETAIL SD WITH(NOLOCK) 
									INNER JOIN  
									(
											SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.DEDUCTEESERIALNO,CE.NAME,CE.GENDER,CE.ISSENIORCITIZEN,CE.PAN,
													   CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO
											FROM CORREMPLOYEE CE WITH(NOLOCK)  
											INNER JOIN 
											(
												SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS 
												FROM CORREMPLOYEE WITH(NOLOCK)  
												WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = 1 AND QUARTER = 4 
												GROUP BY DEDUCTEESERIALNO
											) AS CURRENTEMP
											ON CE.DEDUCTEESERIALNO = CURRENTEMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = CURRENTEMP.CORRECTIONSTATUS
											WHERE CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = 1 AND QUARTER = 4
									) E
									ON SD.DEDUCTEESERIALNO = E.DEDUCTEESERIALNO AND SD.BRANCHID = E.BRANCHID
									WHERE SD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND SD.CORRECTIONSTATUS <> 1 AND E.QUARTER = 4 AND E.FORMID = 1 AND SD.RECORDSTATUS = 1'
		IF @UPDATEITEMS IS NOT NULL
			SET @SQLQUERY = @SQLQUERY + ' UNION  SELECT 2,SD.DEDUCTEESERIALNO,SD.CORRDEDUCTEESERIALNO,SD.DEDUCTEEID,SD.BRANCHID,E.NAME,ISNULL(E.GENDER,0) AS GENDER,
														ISNULL(E.ISSENIORCITIZEN,0) AS ISSENIORCITIZEN,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.PAN,
														SD.GROSSSALARY,SD.ET,SD.PT,SD.DEDUCTIONUS16,SD.INCOMEFROMSALARIES,SD.OTHERINCOME,
														SD.GROSSTOTALINCOME,SD.LASTGROSSTOTALINCOME,SD.VIA80CCE,SD.VIA80CCG,SD.VIA80CCF,SD.VIAOTHERS,SD.TOTALDEDUNDERCHAPTERVIA,SD.TOTALTAXABLEINCOME,
														SD.TAXONTOTALINCOME,SD.SURCHARGE,SD.EDUCATIONCESS,SD.RELIEFUS89,SD.NETTAXPAYABLE,SD.TOTALTDS,
														SD.TAXPAYABLE,SD.CORRECTIONSTATUS,RECORDSTATUS,
														CURRENTTAXABLEINCOME,PREVTAXABLEINCOME,CURRENTTDS,PREVTDS,ISNULL(ISTDSATHIGHERRATE,0)ISTDSATHIGHERRATE,
														PANLL1, NAMELL1, PANLL2, NAMELL2, PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, 
														PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED
												 FROM   CORRSALARYDETAIL SD WITH(NOLOCK)  INNER JOIN (SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.DEDUCTEESERIALNO,CE.NAME,CE.GENDER,CE.ISSENIORCITIZEN,CE.PAN,
																							   CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO
																						FROM CORREMPLOYEE CE WITH(NOLOCK)  INNER JOIN  (SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS
																														  FROM CORREMPLOYEE  WITH(NOLOCK) 
																														  WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = 1 AND QUARTER = 4
																														  GROUP BY DEDUCTEESERIALNO) AS CURRENTEMP
												 ON CE.DEDUCTEESERIALNO = CURRENTEMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = CURRENTEMP.CORRECTIONSTATUS
												 WHERE CE.BRANCHID =' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = 1 AND QUARTER = 4) E
												 ON SD.DEDUCTEESERIALNO = E.DEDUCTEESERIALNO AND SD.BRANCHID = E.BRANCHID
												 WHERE SD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND 
											    SD.DEDUCTEESERIALNO IN ('+CAST(@UPDATEITEMS AS VARCHAR(1000))+') AND 
											    E.QUARTER=4 AND E.FORMID=1 '	
	IF @DELETEITEMS IS NOT NULL
		SET @SQLQUERY=@SQLQUERY+' UNION  SELECT 4,SD.DEDUCTEESERIALNO,SD.CORRDEDUCTEESERIALNO,SD.DEDUCTEEID,SD.BRANCHID,E.NAME,ISNULL(E.GENDER,0) AS GENDER,
												ISNULL(E.ISSENIORCITIZEN,0) AS ISSENIORCITIZEN,E.EMPLOYMENTFROM,E.EMPLOYMENTTO,E.PAN,
												SD.GROSSSALARY,SD.ET,SD.PT,SD.DEDUCTIONUS16,SD.INCOMEFROMSALARIES,SD.OTHERINCOME,
												SD.GROSSTOTALINCOME,SD.LASTGROSSTOTALINCOME,SD.VIA80CCE,SD.VIA80CCG,SD.VIA80CCF,SD.VIAOTHERS,SD.TOTALDEDUNDERCHAPTERVIA,SD.TOTALTAXABLEINCOME,SD.TAXONTOTALINCOME,SD.SURCHARGE,
												SD.EDUCATIONCESS,SD.RELIEFUS89,SD.NETTAXPAYABLE,SD.TOTALTDS,SD.TAXPAYABLE,SD.CORRECTIONSTATUS,RECORDSTATUS,
												CURRENTTAXABLEINCOME,PREVTAXABLEINCOME,CURRENTTDS,PREVTDS,ISNULL(ISTDSATHIGHERRATE,0)ISTDSATHIGHERRATE,
												PANLL1, NAMELL1, PANLL2, NAMELL2, PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, 
												PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED
										  FROM  CORRSALARYDETAIL SD WITH(NOLOCK) 
												   INNER JOIN 
												 (SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.DEDUCTEESERIALNO,CE.NAME,CE.GENDER,CE.ISSENIORCITIZEN,CE.PAN,
														 CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO
													FROM CORREMPLOYEE CE WITH(NOLOCK) 
														  INNER JOIN 
														  (SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS 
															 FROM CORREMPLOYEE WITH(NOLOCK) 
															WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4 
														 GROUP BY DEDUCTEESERIALNO) AS CURRENTEMP
													  ON CE.DEDUCTEESERIALNO=CURRENTEMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS=CURRENTEMP.CORRECTIONSTATUS
												   WHERE CE.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4) E 
											ON SD.DEDUCTEESERIALNO=E.DEDUCTEESERIALNO AND SD.BRANCHID=E.BRANCHID 
										  WHERE SD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND 
												SD.DEDUCTEESERIALNO IN ('+CAST(@DELETEITEMS AS VARCHAR(1000))+') AND 
												E.QUARTER=4 AND E.FORMID=1'
	SET @SQLQUERY = @SQLQUERY+') AS TESTTABLE ;'
	SET @SQLQUERY = @SQLQUERY + ' SELECT ID = IDENTITY(INT,1,1),* INTO #TEMP1
							FROM #TEMP 
						  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
		IF(@NAME <> '')                                  
		BEGIN                  
			SET @SQLQUERY = @SQLQUERY + ' AND NAME LIKE ''%' + @NAME + '%''';                                  
		END 
		IF(@PAN <> '')                                  
		BEGIN                  
			SET @SQLQUERY = @SQLQUERY + ' AND PAN = ''' + @PAN + ''';'                          
		END 
	SET @SQLQUERY=@SQLQUERY+'SELECT * FROM #TEMP1 WHERE ID >'+CAST(@FIRSTREC AS VARCHAR(1000))+' AND 
								 ID <'+CAST(@LASTREC AS VARCHAR(1000))+' ORDER BY CURRENTCORRSTATUS '
	--PRINT @SQLQUERY
	EXECUTE SP_EXECUTESQL @SQLQUERY 
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDCORRSALARYDETAILSCOUNT')
DROP PROCEDURE USP_TDS_GETUPDATEDCORRSALARYDETAILSCOUNT
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetUpdatedCorrSalaryDetailsCount]
 @BRANCHID INT,
 @NAME VARCHAR(75) = '',
 @PAN VARCHAR(75) = '',  
 @UPDATEITEMS VARCHAR(MAX) = NULL,      
 @DELETEITEMS VARCHAR(MAX) = NULL 
AS  
 BEGIN  
 DECLARE @SQLQUERY NVARCHAR(MAX)  
  SET @SQLQUERY='SELECT * INTO #TEMP FROM (SELECT SD.DEDUCTEESERIALNO,SD.CORRECTIONSTATUS,E.NAME,E.PAN,SD.BRANCHID                           
                          FROM CORRSALARYDETAIL SD  WITH(NOLOCK)   
                     INNER JOIN   
                      (SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.DEDUCTEESERIALNO,CE.NAME,CE.PAN          
                     FROM CORREMPLOYEE CE WITH(NOLOCK)   
                        INNER JOIN   
                        (SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS 
                        FROM CORREMPLOYEE WITH(NOLOCK)    
                       WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4   
                       GROUP BY DEDUCTEESERIALNO) AS CURRENTEMP  
                       ON CE.DEDUCTEESERIALNO=CURRENTEMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS=CURRENTEMP.CORRECTIONSTATUS  
                       WHERE CE.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4) E   
                      ON SD.DEDUCTEESERIALNO=E.DEDUCTEESERIALNO AND SD.BRANCHID=E.BRANCHID                       
                         WHERE SD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND   
                               SD.CORRECTIONSTATUS<>1 AND                                 
                               E.QUARTER=4 AND E.FORMID=1 AND SD.RECORDSTATUS = 1'  
 IF @UPDATEITEMS IS NOT NULL  
  SET @SQLQUERY=@SQLQUERY+' UNION ALL SELECT SD.DEDUCTEESERIALNO,SD.CORRECTIONSTATUS,E.NAME,E.PAN,SD.BRANCHID 
             FROM CORRSALARYDETAIL SD  WITH(NOLOCK)   
             INNER JOIN   
            (SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.DEDUCTEESERIALNO,CE.NAME,CE.PAN            
                     FROM CORREMPLOYEE CE WITH(NOLOCK)   
                        INNER JOIN   
                        (SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS   
                        FROM CORREMPLOYEE WITH(NOLOCK)    
                       WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4   
                       GROUP BY DEDUCTEESERIALNO) AS CURRENTEMP  
                       ON CE.DEDUCTEESERIALNO=CURRENTEMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS=CURRENTEMP.CORRECTIONSTATUS  
                       WHERE CE.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4) E   
               ON SD.DEDUCTEESERIALNO=E.DEDUCTEESERIALNO AND SD.BRANCHID=E.BRANCHID   
            WHERE SD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND   
               SD.DEDUCTEESERIALNO IN ('+CAST(@UPDATEITEMS AS VARCHAR(1000))+') AND   
               E.QUARTER=4 AND E.FORMID=1'   
 IF @DELETEITEMS IS NOT NULL  
  SET @SQLQUERY = @SQLQUERY +' UNION  ALL SELECT SD.DEDUCTEESERIALNO,SD.CORRECTIONSTATUS,E.NAME,E.PAN,SD.BRANCHID  
            FROM  CORRSALARYDETAIL SD  WITH(NOLOCK)   
               INNER JOIN   
            (SELECT CE.BRANCHID,CE.FORMID,CE.QUARTER,CE.DEDUCTEESERIALNO,CE.NAME,CE.PAN             
                     FROM CORREMPLOYEE CE  WITH(NOLOCK) 
                        INNER JOIN   
                        (SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) AS CORRECTIONSTATUS 
                        FROM CORREMPLOYEE  WITH(NOLOCK)  
                       WHERE BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4   
                       GROUP BY DEDUCTEESERIALNO) AS CURRENTEMP  
                       ON CE.DEDUCTEESERIALNO=CURRENTEMP.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS=CURRENTEMP.CORRECTIONSTATUS  
                       WHERE CE.BRANCHID ='+CAST(@BRANCHID AS VARCHAR)+' AND FORMID=1 AND QUARTER=4) E   
           ON SD.DEDUCTEESERIALNO=E.DEDUCTEESERIALNO AND SD.BRANCHID=E.BRANCHID AND E.FORMID=1  
            WHERE SD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND   
            SD.DEDUCTEESERIALNO IN ('+CAST(@DELETEITEMS AS VARCHAR(1000))+') AND   
    E.QUARTER=4 AND E.FORMID=1'  
 SET @SQLQUERY=@SQLQUERY + ' ) AS TESTTABLE ;'  
 SET @SQLQUERY = @SQLQUERY + ' SELECT ID = IDENTITY(INT,1,1),* INTO #TEMP1
						FROM #TEMP 
					  WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
	IF(@NAME <> '')                                  
	BEGIN                  
		SET @SQLQUERY = @SQLQUERY + ' AND NAME LIKE ''%' + @NAME + '%'''                                  
	END 
	IF(@PAN <> '')                                  
	BEGIN                  
		SET @SQLQUERY = @SQLQUERY + ' AND PAN = ''' + @PAN + ''';'                          
	END   
 SET @SQLQUERY = @SQLQUERY + ' SELECT COUNT(ID) FROM #TEMP1'  
 --PRINT @SQLQUERY  
 EXECUTE SP_EXECUTESQL @SQLQUERY
 IF OBJECT_ID('TEMPDB..#TEMP') IS NOT NULL
		DROP TABLE #TEMP
 IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL
		DROP TABLE #TEMP1   
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDCORRSALARYSERIALNO')
DROP PROCEDURE USP_TDS_GETUPDATEDCORRSALARYSERIALNO
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDCORRSALARYSERIALNO]  
    @BRANCHID INT  
AS  
BEGIN  
  DECLARE @ITEMS NVARCHAR(MAX)  
  SELECT @ITEMS = ''  
  SELECT @ITEMS=@ITEMS +CAST(DEDUCTEESERIALNO AS VARCHAR)+',' FROM CORRSALARYDETAIL WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID AND  
                           CORRECTIONSTATUS <> 1  
                        ORDER BY DEDUCTEESERIALNO  
  IF LEN(@ITEMS)>0  
  SELECT @ITEMS=LEFT(@ITEMS,LEN(@ITEMS)-1)  
  ELSE  
  SET @ITEMS=''  
  SELECT @ITEMS AS EMPLOYEESERIALNNO  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDDEDUCTEESLNOS')
DROP PROCEDURE USP_TDS_GETUPDATEDDEDUCTEESLNOS
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDDEDUCTEESLNOS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @DEDUCTEESERIALNOTABLE TABLE(ID INT IDENTITY(1,1),DEDUCTEESERIALNO INT)
		SET @SQLQUERY='SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND (CORRECTIONSTATUS = 3 OR CORRECTIONSTATUS = 5)'
		INSERT INTO @DEDUCTEESERIALNOTABLE EXECUTE SP_EXECUTESQL @SQLQUERY
		DECLARE @DEDSLNOS VARCHAR(MAX);
		SET @DEDSLNOS = '';
		SELECT @DEDSLNOS =@DEDSLNOS + CAST(DEDUCTEESERIALNO AS VARCHAR)+',' FROM @DEDUCTEESERIALNOTABLE ORDER BY DEDUCTEESERIALNO;
		IF LEN(@DEDSLNOS )>0
			SELECT @DEDSLNOS = LEFT(@DEDSLNOS ,LEN(@DEDSLNOS)-1);
		ELSE
			SELECT @DEDSLNOS = '';
		SELECT @DEDSLNOS AS DEDUCTIONSLNOS;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDDEDUCTIONSLNOS')
DROP PROCEDURE USP_TDS_GETUPDATEDDEDUCTIONSLNOS
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETUPDATEDDEDUCTIONSLNOS]
    @BRANCHID INT,
    @FORMID INT,
    @QUARTER INT
AS
    BEGIN
	   --DECLARE @DEDUCTIONSERIALNOTABLE TABLE(ID INT IDENTITY(1,1),DEDUCTIONSERIALNO INT)
	   SELECT DEDUCTIONSERIALNO 
	   INTO #DEDUCTIONSERIALNOTABLE
	   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
	   WHERE 
		  BRANCHID = @BRANCHID
		  AND FORMID = @FORMID
		  AND QUARTER = @QUARTER
		  AND (CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4 OR CORRECTIONSTATUS = 5 OR CORRECTIONSTATUS = 7)
	   EXEC('ALTER TABLE #DEDUCTIONSERIALNOTABLE ADD ID INT IDENTITY(1, 1)')
	   DECLARE @DEDSLNOS VARCHAR(MAX);
	   SET @DEDSLNOS = '';
	   SELECT @DEDSLNOS = @DEDSLNOS + CAST(DEDUCTIONSERIALNO AS VARCHAR) + ',' 
	   FROM #DEDUCTIONSERIALNOTABLE 
	   ORDER BY DEDUCTIONSERIALNO;
	   IF LEN(@DEDSLNOS ) > 0
    		  SELECT @DEDSLNOS = LEFT(@DEDSLNOS, LEN(@DEDSLNOS) - 1);
	   ELSE
		  SELECT @DEDSLNOS = '';
	   SELECT @DEDSLNOS AS DEDUCTIONSLNOS;
	   DROP TABLE #DEDUCTIONSERIALNOTABLE
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDDEDUCTIONSLNOSLIST')
DROP PROCEDURE USP_TDS_GETUPDATEDDEDUCTIONSLNOSLIST
GO
CREATE PROCEDURE [dbo].[USP_TDS_GETUPDATEDDEDUCTIONSLNOSLIST]
    @BRANCHID INT,
    @FORMID INT,
    @QUARTER INT
AS
    BEGIN
	   SELECT DEDUCTIONSERIALNO 
	   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) 
	   WHERE 
		  BRANCHID = @BRANCHID
		  AND FORMID = @FORMID
		  AND QUARTER = @QUARTER
		  AND (CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 4 OR CORRECTIONSTATUS = 5 OR CORRECTIONSTATUS = 7)
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDEMPLOYEES')
DROP PROCEDURE USP_TDS_GETUPDATEDEMPLOYEES
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDEMPLOYEES]
 @STARTROW INT,
 @PAGESIZE INT,
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @PANUPDATEITEMS VARCHAR(MAX)
AS
 BEGIN
  DECLARE @QUERY NVARCHAR(MAX),@TABLENAME VARCHAR(50);
   /* DETERMINE THE FIRST RECORD AND LAST RECORD */
  DECLARE @FIRSTREC INT, @LASTREC INT
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
  SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #EMPLOYEES
       FROM (
        SELECT  CE.BRANCHID,CE.FORMID,CE.[QUARTER],CE.DEDUCTEESERIALNO,CE.SALUTATION,CE.NAME,CE.ADDRESS1,CE.ADDRESS2,CE.ADDRESS3,CE.ADDRESS4,CE.ADDRESS5,CE.STATEID,SM.STATENAME,
          CE.PINCODE,CE.GENDER,ISNULL(CE.ISSENIORCITIZEN,0) ISSENIORCITIZEN,CE.DESIGNATION,CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO,CE.PHONENO,CE.EMAILADDRESS,CE.PAN,CE.PANREFERENCE,CE.LASTPAN,CE.UPDATEINDICATOR,CE.CORRECTIONSTATUS
        FROM    CORREMPLOYEE CE WITH(NOLOCK)  LEFT JOIN STATEMASTER SM WITH(NOLOCK)  ON CE.STATEID= SM.STATEID
        WHERE   BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND UPDATEINDICATOR = 1 AND CORRECTIONSTATUS = 3';
  IF(@PANUPDATEITEMS <> '')
   BEGIN
    SET @QUERY = @QUERY + ' UNION
          SELECT CE.BRANCHID,CE.FORMID,CE.[QUARTER],CE.DEDUCTEESERIALNO,CE.SALUTATION,CE.NAME,CE.ADDRESS1,CE.ADDRESS2,CE.ADDRESS3,CE.ADDRESS4,CE.ADDRESS5,CE.STATEID,SM.STATENAME,
          CE.PINCODE,CE.GENDER,ISNULL(CE.ISSENIORCITIZEN,0) ISSENIORCITIZEN,CE.DESIGNATION,CE.EMPLOYMENTFROM,CE.EMPLOYMENTTO,CE.PHONENO,CE.EMAILADDRESS,CE.PAN,CE.PANREFERENCE,CE.LASTPAN,CE.UPDATEINDICATOR,3 AS CORRECTIONSTATUS
        FROM    CORREMPLOYEE CE WITH(NOLOCK)  LEFT JOIN STATEMASTER SM WITH(NOLOCK)  ON CE.STATEID= SM.STATEID
        WHERE   CE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CE.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND CE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CE.UPDATEINDICATOR = 1 AND CE.CORRECTIONSTATUS = 1 AND CE.DEDUCTEESERIALNO IN (' + CAST(@PANUPDATEITEMS AS VARCHAR(MAX)) + ')';
   END
  SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #EMPLOYEES WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR) + ' ORDER BY CORRECTIONSTATUS';
  EXEC SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDEMPLOYEESCOUNT')
DROP PROCEDURE USP_TDS_GETUPDATEDEMPLOYEESCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDEMPLOYEESCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@PANUPDATEITEMS VARCHAR(MAX)
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		SET @SQLQUERY='SELECT DEDUCTEESERIALNO DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK)
					   WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3';
		IF(@PANUPDATEITEMS <> '')
			BEGIN
				SET @SQLQUERY=@SQLQUERY + ' UNION
											SELECT  DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK)
											WHERE   BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 1 AND DEDUCTEESERIALNO IN (' + CAST(@PANUPDATEITEMS AS VARCHAR(MAX)) + ')';
			END
		SET @SQLQUERY='SELECT COUNT(T.DEDUCTEESERIALNO) AS DEDUCTEESERIALNO FROM ('+ @SQLQUERY + ') T ';
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDEMPLOYEESLNOS')
DROP PROCEDURE USP_TDS_GETUPDATEDEMPLOYEESLNOS
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDEMPLOYEESLNOS]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX);
		DECLARE @EMPLOYEESERIALNOTABLE TABLE(ID INT IDENTITY(1,1),EMPLOYEESERIALNO INT)
		SET @SQLQUERY='SELECT DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK)  WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR)+ ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND (CORRECTIONSTATUS = 3 OR CORRECTIONSTATUS = 5)'
		INSERT INTO @EMPLOYEESERIALNOTABLE EXECUTE SP_EXECUTESQL @SQLQUERY
		DECLARE @DEDSLNOS VARCHAR(MAX);
		SET @DEDSLNOS = '';
		SELECT @DEDSLNOS =@DEDSLNOS + CAST(EMPLOYEESERIALNO AS VARCHAR)+',' FROM @EMPLOYEESERIALNOTABLE ORDER BY EMPLOYEESERIALNO;
		IF LEN(@DEDSLNOS )>0
			SELECT @DEDSLNOS = LEFT(@DEDSLNOS ,LEN(@DEDSLNOS)-1);
		ELSE
			SELECT @DEDSLNOS = '';
		SELECT @DEDSLNOS AS DEDUCTIONSLNOS;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDNONEMPLOYEES')
DROP PROCEDURE USP_TDS_GETUPDATEDNONEMPLOYEES
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDNONEMPLOYEES]
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@PANUPDATEITEMS VARCHAR(MAX)
AS
	BEGIN
		DECLARE @QUERY NVARCHAR(MAX),@TABLENAME VARCHAR(50);
			/* DETERMINE THE FIRST RECORD AND LAST RECORD */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		SET @QUERY = 'SELECT ID = IDENTITY(INT,1,1),* INTO #NONEMPLOYEES
					  FROM (
								SELECT  CNE.BRANCHID,CNE.FORMID,CNE.[QUARTER],CNE.DEDUCTEESERIALNO,
										CNE.SALUTATION,CNE.NAME,CNE.ADDRESS1,CNE.ADDRESS2,CNE.ADDRESS3,CNE.ADDRESS4,CNE.ADDRESS5,CNE.STATEID,SM.STATENAME,
										CNE.PINCODE,CNE.ISAPPLICABLE26,CNE.ISAPPLICABLE27,CNE.PHONENO,CNE.EMAILADDRESS,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.CODE,CNE.ISTRANSPORTER,CNE.CORRECTIONSTATUS
								FROM    CORRNONEMPLOYEE CNE WITH(NOLOCK)  LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON CNE.STATEID= SM.STATEID
								WHERE   CNE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CNE.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND CNE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CNE.UPDATEINDICATOR = 1 AND CNE.CORRECTIONSTATUS = 3';
		IF(@PANUPDATEITEMS <> '')
			BEGIN
				SET @QUERY = @QUERY + ' UNION
										SELECT  CNE.BRANCHID,CNE.FORMID,CNE.[QUARTER],CNE.DEDUCTEESERIALNO,
										CNE.SALUTATION,CNE.NAME,CNE.ADDRESS1,CNE.ADDRESS2,CNE.ADDRESS3,CNE.ADDRESS4,CNE.ADDRESS5,CNE.STATEID,SM.STATENAME,
										CNE.PINCODE,CNE.ISAPPLICABLE26,CNE.ISAPPLICABLE27,CNE.PHONENO,CNE.EMAILADDRESS,CNE.PAN,CNE.LASTPAN,CNE.PANREFERENCE,CNE.CODE,CNE.ISTRANSPORTER,3 AS CORRECTIONSTATUS
								FROM    CORRNONEMPLOYEE CNE WITH(NOLOCK)  LEFT JOIN STATEMASTER SM WITH(NOLOCK) ON CNE.STATEID= SM.STATEID
								WHERE   CNE.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CNE.FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND CNE.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CNE.UPDATEINDICATOR = 1 AND CNE.CORRECTIONSTATUS = 1 AND CNE.DEDUCTEESERIALNO IN (' + CAST(@PANUPDATEITEMS AS VARCHAR(MAX)) + ')';
			END
		SET @QUERY = @QUERY + ') TEMP;SELECT * FROM #NONEMPLOYEES WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR) + ' ORDER BY CORRECTIONSTATUS';
		EXEC SP_EXECUTESQL @QUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDNONEMPLOYEESCOUNT')
DROP PROCEDURE USP_TDS_GETUPDATEDNONEMPLOYEESCOUNT
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDNONEMPLOYEESCOUNT]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@PANUPDATEITEMS VARCHAR(MAX)
AS
	BEGIN
		DECLARE @SQLQUERY NVARCHAR(MAX),@TABLENAME VARCHAR(50);;
		SET @SQLQUERY = 'SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK)
					   WHERE  BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) +' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 3';
		IF(@PANUPDATEITEMS <> '')
			BEGIN
				SET @SQLQUERY=@SQLQUERY + ' UNION
											SELECT  DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK)
											WHERE   BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' AND CORRECTIONSTATUS = 1 AND DEDUCTEESERIALNO IN (' + CAST(@PANUPDATEITEMS AS VARCHAR(MAX)) + ')';
			END
		SET @SQLQUERY = 'SELECT COUNT(T.DEDUCTEESERIALNO) AS DEDUCTEESERIALNO FROM ('+ @SQLQUERY + ') T ';
		EXEC SP_EXECUTESQL @SQLQUERY;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUPDATEDPANDEDUCTEESLNOS')
DROP PROCEDURE USP_TDS_GETUPDATEDPANDEDUCTEESLNOS
GO
CREATE PROCEDURE [USP_TDS_GETUPDATEDPANDEDUCTEESLNOS] 
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN
  IF(@FORMID = 1)
    BEGIN
		 SELECT * FROM CORREMPLOYEE WITH(NOLOCK) 
		WHERE BRANCHID=@BRANCHID AND QUARTER=@QUARTER AND FORMID=@FORMID AND CORRECTIONSTATUS=3
    END 
  ELSE
   BEGIN   
		SELECT * FROM CORRNONEMPLOYEE WITH(NOLOCK) 
		WHERE BRANCHID=@BRANCHID AND QUARTER=@QUARTER AND FORMID=@FORMID AND CORRECTIONSTATUS=3
  END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetUpdatedReportPaymentDetails')
DROP PROCEDURE USP_TDS_GetUpdatedReportPaymentDetails
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetUpdatedReportPaymentDetails]
	@STARTROW INT,    
	@PageSize INT,    
	@BRANCHID INT,  
	@PARENTBRANCHID INT,
	@NAME VARCHAR(75) = NULL,
	@BGLCODE VARCHAR(10) = NULL,
	@ISST BIT  
AS  
	BEGIN  
		SET NOCOUNT ON
		DECLARE @FirstRec INT;        
		DECLARE @LastRec INT; 
		DECLARE @QUERY NVARCHAR(MAX);
		SELECT REPORTPAYMENTID, PAYMENTDATE, BRANCHID 
		INTO #DEDDETAIL 
		FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE BRANCHID IN (@BRANCHID, @PARENTBRANCHID) 
			AND FORMID IN (2, 3)  
		SET @NAME = REPLACE(@NAME, CHAR(39), CHAR(39) + CHAR(39))
		SELECT D.DEDUCTEEID, NAME, PAN
		INTO #DEDMST 
		FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE BRANCHID = @PARENTBRANCHID
		SELECT ID INTO #RPT FROM   
		(  
			SELECT ID FROM REPORTPAYMENT WITH(NOLOCK) WHERE BRANCHID = @BRANCHID  
			EXCEPT   
			SELECT REPORTPAYMENTID FROM #DEDDETAIL WHERE ISNULL(REPORTPAYMENTID, -1) <> -1     
		)T  
		SELECT @FirstRec = (@StartRow - 1) * @PageSize        
		SELECT @LastRec = (@StartRow * @PageSize + 1);   
		SELECT REPORTPAYMENTID, PAYMENTDATE 
		INTO #RPINDED
		FROM #DEDDETAIL 
		WHERE BRANCHID = @PARENTBRANCHID
		GROUP BY REPORTPAYMENTID, PAYMENTDATE
		SELECT RP.ID, D.NAME, D.PAN,RP.BRANCHID,RP.DEDUCTEEID, RP.SECTIONID, RP.BGLCODEID, TR.BGLCODE, TS.SECTIONNAME, RP.PAYMENTAMOUNT,  
			0 AS STATUSID, NULL AS PAIDDATE, CASE WHEN RP.BILLDATE > CAST(('30/JUN/2017') AS SMALLDATETIME) THEN 0 ELSE 1 END AS ISST
		INTO #RPDET1
		FROM REPORTPAYMENT RP INNER JOIN #RPT R ON RP.ID = R.ID   
			INNER JOIN #DEDMST D ON D.DEDUCTEEID = RP.DEDUCTEEID  
			INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID  
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = RP.SECTIONID  
		SELECT RP.ID, D.NAME, D.PAN,RP.BRANCHID, RP.DEDUCTEEID, RP.SECTIONID, RP.BGLCODEID, TR.BGLCODE, TS.SECTIONNAME, RP.PAYMENTAMOUNT,  
			1 AS STATUSID, DD.PAYMENTDATE AS PAIDDATE, CASE WHEN RP.BILLDATE > CAST(('30/JUN/2017') AS SMALLDATETIME) THEN 0 ELSE 1 END AS ISST
		INTO #RPDET2
		FROM REPORTPAYMENT RP   
			INNER JOIN #DEDMST D ON D.DEDUCTEEID = RP.DEDUCTEEID  
			INNER JOIN TDSRATE TR WITH(NOLOCK) ON TR.BGLCODEID = RP.BGLCODEID  
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = RP.SECTIONID  
			INNER JOIN #RPINDED DD ON DD.REPORTPAYMENTID = RP.ID  
		WHERE RP.BRANCHID = @BRANCHID
		SET @QUERY = 'WITH TEMP AS  
					(  
						SELECT ROW_NUMBER() OVER(ORDER BY ID) AS ROWNO, * FROM  
						(  
							SELECT * FROM #RPDET1
							UNION  
							SELECT * FROM #RPDET2
						)T WHERE 1=1 AND ISST = ' + CAST(@ISST AS VARCHAR)
		IF(@NAME IS NOT NULL)
			BEGIN
				SET @QUERY = @QUERY + ' AND NAME LIKE ''%'+CAST(@NAME AS VARCHAR(75))+'%'''
			END
	    IF(@BGLCODE IS NOT NULL)
			BEGIN
				SET @QUERY = @QUERY + ' AND BGLCODE = '''+CAST(@BGLCODE AS VARCHAR(10))+''''
			END    
		SET @QUERY = @QUERY + ' )SELECT * INTO #RPTDATA FROM TEMP ORDER BY ID; '  
		SET @QUERY = @QUERY + 'SELECT * FROM #RPTDATA WHERE ROWNO > ' + CAST(@FIRSTREC AS VARCHAR) + '  AND ROWNO < '+ CAST(@LASTREC AS VARCHAR)+';DROP TABLE #RPTDATA' 
		EXEC SP_EXECUTESQL @QUERY;
		--PRINT @QUERY
		DROP TABLE #RPDET2
		DROP TABLE #RPDET1
		DROP TABLE #RPINDED
		DROP TABLE #DEDDETAIL
		DROP TABLE #DEDMST
		DROP TABLE #RPT
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetUpdatedReportPaymentDetailsCount')
DROP PROCEDURE USP_TDS_GetUpdatedReportPaymentDetailsCount
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetUpdatedReportPaymentDetailsCount]
@BRANCHID INT,
@NAME VARCHAR(75) = NULL,
@BGLCODE VARCHAR(10) = NULL,
@ISST BIT
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX);
	SET @NAME = REPLACE(@NAME,CHAR(39),CHAR(39)+CHAR(39))
	SELECT *, CASE WHEN BILLDATE > CAST(('30/JUN/2017') AS SMALLDATETIME) THEN 0 ELSE 1 END AS ISST
	INTO #TEMP
	FROM REPORTPAYMENT WITH(NOLOCK)
	SET @QUERY = 'SELECT COUNT(RP.ID) FROM #TEMP RP WITH(NOLOCK)  
				  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=RP.DEDUCTEEID 
				  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=RP.SECTIONID
				  INNER JOIN TDSRATE TR ON TR.BGLCODEID = RP.BGLCODEID '
	IF((SELECT ISZORO FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @BRANCHID) <> 1)
		BEGIN
			SET @QUERY = @QUERY + 'INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = RP.BRANCHID AND CB.PARENTBRANCHID = RP.PARENTBRANCHID '
		END
	SET @QUERY = @QUERY + 'WHERE RP.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND RP.ISST = ' + CAST(@ISST AS VARCHAR)
	IF(@NAME IS NOT NULL)
		BEGIN
			SET @QUERY = @QUERY + ' AND D.NAME LIKE ''%' + CAST(@NAME AS VARCHAR(75))+'%'''
		END
	IF (@BGLCODE IS NOT NULL)
		BEGIN
			SET @QUERY = @QUERY + ' AND TR.BGLCODE = ''' + CAST(@BGLCODE AS VARCHAR(10))+''''
		END
	EXEC SP_EXECUTESQL @QUERY;	
	--PRINT @QUERY		  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetUpdatedReportPaymentDetailsForEdit')
DROP PROCEDURE USP_TDS_GetUpdatedReportPaymentDetailsForEdit
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetUpdatedReportPaymentDetailsForEdit] 
    @BRANCHID INT,
    @ID INT
AS
    BEGIN
	   SELECT NE.SERIALNO, RP.ID, RP.BRANCHID, RP.DEDUCTEEID, RP.SECTIONID, TS.SECTIONNAME,
		  RP.BGLCODEID, RP.PAYMENTAMOUNT, RP.EXCLUDESERVICETAX, RP.NATOFSERVICE,
	       RP.SERVICETAX, RP.BILLNUM, RP.BILLDATE, D.NAME, D.PAN, 
	       ISNULL((SELECT TOP 1 DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE REPORTPAYMENTID = RP.ID), 0) ISUSEDINDEDUCTION,
	       RP.SBCESS,RP.KKCESS,NE.GSTIN
	   FROM REPORTPAYMENT RP WITH(NOLOCK) 
		  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = RP.DEDUCTEEID 
		  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
		  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = RP.SECTIONID
	   WHERE RP.BRANCHID = @BRANCHID 
		  AND RP.ID = @ID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETURNDETAILS')
DROP PROCEDURE USP_TDS_GETURNDETAILS
GO
CREATE PROCEDURE USP_TDS_GETURNDETAILS
AS
BEGIN
	SELECT URN FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE FORMID = 1 AND ISNULL(URN,'') <> ''
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetUserBranchandZO')
DROP PROCEDURE USP_TDS_GetUserBranchandZO
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetUserBranchandZO]
@USERNAME VARCHAR(20),
@USERID INT
AS
	BEGIN
	DECLARE @PARENTBRANCHNAME VARCHAR(100);
	SELECT @PARENTBRANCHNAME = BRANCHNAME FROM COMPANYBRANCH WHERE BRANCHID = (SELECT PARENTBRANCHID FROM USERMASTER UM INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = UM.BRANCHID
		WHERE USERNAME = @USERNAME AND USERID <> @USERID)
	SELECT BRANCHNAME,BRANCHCODE,PARENTBRANCHID,CASE WHEN @PARENTBRANCHNAME IS NULL THEN '' ELSE @PARENTBRANCHNAME END  
	AS PARENTBRANCHNAME FROM USERMASTER UM INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = UM.BRANCHID
		WHERE USERNAME = @USERNAME AND USERID <> @USERID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetUserBranches')
DROP PROCEDURE USP_TDS_GetUserBranches
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetUserBranches]
 @USERID INT    
AS    
 BEGIN    
  DECLARE @ISSUPERADMIN BIT;    
  DECLARE @ISBRANCHADMIN BIT;    
  SELECT @ISSUPERADMIN = ISSUPERADMIN,@ISBRANCHADMIN=ISBRANCHADMIN FROM USERMASTER WITH(NOLOCK) WHERE USERID = @USERID;    
  IF(@ISSUPERADMIN=1)    
   BEGIN    
    SELECT CB.BRANCHID,CB.BRANCHNAME,CB.BRANCHCODE,CB.PARENTBRANCHID,ISNULL(DR.TAN,'')TAN 
    FROM COMPANYBRANCH CB WITH(NOLOCK)
    LEFT JOIN 
    (
		 SELECT MAX(QUARTER)QUARTER, MAX(DEDUCTORID)DEDUCTORID, BRANCHID
									FROM BRANCHDEDUCTORS WITH(NOLOCK) GROUP BY BRANCHID
	)BD ON CB.BRANCHID = BD.BRANCHID
    LEFT JOIN DEDUCTOR DR WITH(NOLOCK) ON DR.DEDUCTORID = BD.DEDUCTORID 
    ORDER BY CB.BRANCHNAME     
   END    
  ELSE IF (@ISBRANCHADMIN=1)    
   BEGIN    
    SELECT BRANCHID,BRANCHNAME,BRANCHCODE,PARENTBRANCHID, '' TAN FROM COMPANYBRANCH WITH(NOLOCK)   
    WHERE  PARENTBASEID LIKE (SELECT CB.PARENTBASEID    
            FROM  COMPANYBRANCH CB WITH(NOLOCK) INNER JOIN USERMASTER UM WITH(NOLOCK) ON CB.BRANCHID = UM.BRANCHID    
            WHERE  UM.USERID = @USERID)+'%'   
       ORDER BY BRANCHNAME       
   END    
  ELSE    
   BEGIN    
    SELECT CB.BRANCHID,BRANCHNAME,BRANCHCODE,PARENTBRANCHID,'' TAN    
    FROM    COMPANYBRANCH CB WITH(NOLOCK) INNER JOIN USERMASTER UM WITH(NOLOCK) ON CB.BRANCHID = UM.BRANCHID    
    WHERE UM.USERID = @USERID 
    ORDER BY CB.BRANCHID         
  END    
 END    

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUSERBRANCHESFORAUTOCOMPLETE')
DROP PROCEDURE USP_TDS_GETUSERBRANCHESFORAUTOCOMPLETE
GO
--USP_TDS_GETUSERBRANCHESFORAUTOCOMPLETE 1,'RO',100
CREATE PROCEDURE [dbo].[USP_TDS_GETUSERBRANCHESFORAUTOCOMPLETE]
(
	@USERID INT,@PREFIXTEXT NVARCHAR(MAX),@RECORDCOUNT INT
)
AS
BEGIN
	DECLARE @BRANCHID INT;
	DECLARE @ISSUPERADMIN BIT
	DECLARE @ISBRANCHADMIN BIT
	DECLARE @QUERY NVARCHAR(MAX)
	SELECT @BRANCHID=BRANCHID,@ISSUPERADMIN = ISSUPERADMIN,@ISBRANCHADMIN=ISBRANCHADMIN FROM USERMASTER WHERE USERID = @USERID;
	IF(@ISSUPERADMIN=1)
		BEGIN
			SET @QUERY =	'SELECT	TOP '+CAST(@RECORDCOUNT AS VARCHAR) +' BRANCHID,BRANCHNAME +'' (''+ BRANCHCODE +'')'' AS BRANCHNAME
							FROM	COMPANYBRANCH WITH(NOLOCK)
							WHERE	BRANCHNAME LIKE '''+@PREFIXTEXT+'%'''+' OR BRANCHCODE LIKE'''+@PREFIXTEXT+'%''';
		END
	ELSE
		BEGIN
			SET @QUERY =	'SELECT	TOP '+CAST(@RECORDCOUNT AS VARCHAR) +' BRANCHID,BRANCHNAME +'' (''+ BRANCHCODE +'')'' AS BRANCHNAME
				FROM	COMPANYBRANCH WITH(NOLOCK)
				WHERE	PARENTBASEID LIKE (	SELECT	PARENTBASEID
							FROM COMPANYBRANCH WITH(NOLOCK)
							WHERE BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) +')+''%''
				AND BRANCHNAME LIKE '''+@PREFIXTEXT+'%'''+' OR BRANCHCODE LIKE'''+@PREFIXTEXT+'%''';
		END
	EXEC SP_EXECUTESQL @QUERY;
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUSERS')
DROP PROCEDURE USP_TDS_GETUSERS
GO
CREATE PROCEDURE [USP_TDS_GETUSERS]
               @USERID INT,
               @BRANCHID INT,
               @INCLUDECHILD BIT
AS
BEGIN
DECLARE @CKHSUPERADMIN BIT,@CHKBRANCHADMIN BIT,@CHKISACTIVE BIT
SELECT @CKHSUPERADMIN=ISSUPERADMIN,@CHKBRANCHADMIN=ISBRANCHADMIN,@CHKISACTIVE=ISACTIVE FROM USERMASTER WHERE USERID=@USERID
IF(@CKHSUPERADMIN=1)
	BEGIN
		SELECT USERMASTER.USERID AS USERID,USERMASTER.USERNAME AS USERNAME,USERMASTER.[PASSWORD] AS PASSWORD, COMPANYBRANCH.BRANCHNAME AS USERBRANCH,USERMASTER.BRANCHID AS USERBRANCHID,
			   USERMASTER.ISSUPERADMIN AS ISSUPERADMIN,USERMASTER.ISBRANCHADMIN AS ISBRANCHADMIN,USERMASTER.ISACTIVE AS ISACTIVE FROM
			   USERMASTER WITH(NOLOCK)  INNER JOIN COMPANYBRANCH WITH(NOLOCK)  ON USERMASTER.BRANCHID=COMPANYBRANCH.BRANCHID
	END
ELSE IF(@CHKBRANCHADMIN=1)
	BEGIN
        IF @INCLUDECHILD=0
        BEGIN
	    SELECT USERMASTER.USERID AS USERID,USERMASTER.USERNAME AS USERNAME,USERMASTER.[PASSWORD] AS PASSWORD, COMPANYBRANCH.BRANCHNAME AS USERBRANCH,USERMASTER.BRANCHID AS USERBRANCHID,
			   USERMASTER.ISSUPERADMIN AS ISSUPERADMIN,USERMASTER.ISBRANCHADMIN AS ISBRANCHADMIN,USERMASTER.ISACTIVE AS ISACTIVE FROM
			   USERMASTER WITH(NOLOCK)  INNER JOIN COMPANYBRANCH WITH(NOLOCK)  ON USERMASTER.BRANCHID=COMPANYBRANCH.BRANCHID WHERE USERMASTER.BRANCHID=@BRANCHID AND USERMASTER.ISSUPERADMIN<>1
		END
		ELSE
		BEGIN
			/*TEMP TABLE FOR THE BRANCH STORAGE*/
				DECLARE @USERBRANCHADMIN TABLE
				(
					ID INT IDENTITY(1,1),
					BRANCHID INT,
					BRANCHNAME VARCHAR(75),
					BRANCHCODE VARCHAR(10),
					PARENTBRANCHID INT
				);
				/*MAIN BRANCH OF THE USER */
				INSERT INTO @USERBRANCHADMIN SELECT COMPANYBRANCH.BRANCHID, BRANCHNAME, BRANCHCODE, PARENTBRANCHID
					FROM USERMASTER WITH(NOLOCK)
						INNER JOIN COMPANYBRANCH WITH(NOLOCK)
							ON COMPANYBRANCH.BRANCHID = USERMASTER.BRANCHID
					WHERE USERID = @USERID
				/* GET ALL THE CHILD BRANCHES RECUSIVELY*/
				WHILE(@@ROWCOUNT !=0)
				BEGIN
					INSERT INTO @USERBRANCHADMIN SELECT BRANCHID, BRANCHNAME, BRANCHCODE, PARENTBRANCHID
						FROM COMPANYBRANCH  WITH(NOLOCK)
						WHERE PARENTBRANCHID IN (SELECT BRANCHID FROM @USERBRANCHADMIN)
							AND BRANCHID NOT IN (SELECT BRANCHID FROM @USERBRANCHADMIN)
				END
				 SELECT [USER].USERID AS USERID,[USER].USERNAME AS USERNAME,[USER].[PASSWORD] AS PASSWORD, BRANCH.BRANCHNAME AS USERBRANCH,[USER].BRANCHID AS USERBRANCHID,
				           [USER].ISSUPERADMIN AS ISSUPERADMIN,[USER].ISBRANCHADMIN AS ISBRANCHADMIN,[USER].ISACTIVE AS ISACTIVE FROM
				           USERMASTER [USER] WITH(NOLOCK)  INNER JOIN @USERBRANCHADMIN [BRANCH] ON [USER].BRANCHID=[BRANCH].BRANCHID WHERE [USER].ISSUPERADMIN<>1
		END
	END
	ELSE IF(@CHKISACTIVE=1)
	BEGIN
	/*TEMP TABLE FOR THE BRANCH STORAGE*/
				DECLARE @USERBRANCH TABLE
				(
					ID INT IDENTITY(1,1),
					BRANCHID INT,
					BRANCHNAME VARCHAR(75),
					BRANCHCODE VARCHAR(10),
					PARENTBRANCHID INT
				);
				/*MAIN BRANCH OF THE USER */
				INSERT INTO @USERBRANCH SELECT COMPANYBRANCH.BRANCHID, BRANCHNAME, BRANCHCODE, PARENTBRANCHID
					FROM USERMASTER WITH(NOLOCK)
						INNER JOIN COMPANYBRANCH WITH(NOLOCK)
							ON COMPANYBRANCH.BRANCHID = USERMASTER.BRANCHID
					WHERE USERID = @USERID
				/* GET ALL THE CHILD BRANCHES RECUSIVELY*/
				WHILE(@@ROWCOUNT !=0)
				BEGIN
					INSERT INTO @USERBRANCH SELECT BRANCHID, BRANCHNAME, BRANCHCODE, PARENTBRANCHID
						FROM COMPANYBRANCH  WITH(NOLOCK)
						WHERE PARENTBRANCHID IN (SELECT BRANCHID FROM @USERBRANCH)
							AND BRANCHID NOT IN (SELECT BRANCHID FROM @USERBRANCH)
				END
				 SELECT [USER].USERID AS USERID,[USER].USERNAME AS USERNAME,[USER].[PASSWORD] AS PASSWORD, BRANCH.BRANCHNAME AS USERBRANCH,[USER].BRANCHID AS USERBRANCHID,
				           [USER].ISSUPERADMIN AS ISSUPERADMIN,[USER].ISBRANCHADMIN AS ISBRANCHADMIN,[USER].ISACTIVE AS ISACTIVE FROM
				           USERMASTER [USER]  WITH(NOLOCK) INNER JOIN @USERBRANCH [BRANCH] ON [USER].BRANCHID=[BRANCH].BRANCHID WHERE [USER].ISSUPERADMIN<>1 AND [USER].ISBRANCHADMIN<>1
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETUSERSPAGED')
DROP PROCEDURE USP_TDS_GETUSERSPAGED
GO
CREATE PROCEDURE [USP_TDS_GETUSERSPAGED]  
 @STARTROW INT,  
 @PAGESIZE INT,  
 @USERID INT,  
 @BRANCHID INT,  
 @INCLUDECHILD BIT,  
 @USERNAME VARCHAR(20) = NULL,  
 @BRANCHNAMECODE VARCHAR(100) = NULL  
AS  
 BEGIN  
  /* THE NUMBER OF ROWS AFFECTED BY THE DIFFERENT COMMANDS DOES NOT INTEREST THE APPLICATION, SO TURN NOCOUNT ON*/  
  SET NOCOUNT ON  
  /* DETERMINE THE FIRST RECORD AND LAST RECORD */  
  DECLARE @FIRSTREC INT, @LASTREC INT  
  SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE  
  SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);  
  DECLARE @RESULTTABLE TABLE(ID INT IDENTITY(1,1),USERID INT,BRANCHID INT,USERNAME VARCHAR(20),[PASSWORD] VARCHAR(50),  
           ISSUPERADMIN BIT,ISBRANCHADMIN BIT,ISACTIVE BIT,ISCHECKER BIT,ISAUDITOR BIT, BRANCHNAME VARCHAR(100),BRANCHCODE VARCHAR(10),LASTLOGINTIME DATETIME);   
  DECLARE @ISSUPERADMIN BIT;  
  DECLARE @ISBRANCHADMIN BIT;  
  DECLARE @SQLQUERY NVARCHAR(MAX)  
  DECLARE @ISWHERENOTAVAIL BIT  
  SELECT @ISSUPERADMIN = ISSUPERADMIN,@ISBRANCHADMIN = ISBRANCHADMIN  FROM USERMASTER WHERE USERID = @USERID  
  IF(@ISSUPERADMIN = 1)  
   BEGIN  
       SET @SQLQUERY = 'SELECT USERID,UM.BRANCHID AS USERBRANCHID,USERNAME,[PASSWORD],ISSUPERADMIN,ISBRANCHADMIN,ISACTIVE,
						ISNULL(ISCHECKER,0)ISCHECKER,ISNULL(ISAUDITOR,0)ISAUDITOR ,CB.BRANCHNAME AS USERBRANCH,CB.BRANCHCODE,LASTLOGINTIME  
                     FROM USERMASTER UM WITH(NOLOCK) INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON UM.BRANCHID = CB.BRANCHID'  
    SET @ISWHERENOTAVAIL = 1;  
   END  
  ELSE IF(@ISBRANCHADMIN = 1)  
   BEGIN  
    IF(@INCLUDECHILD = 1)  
     BEGIN  
      SET @SQLQUERY = 'SELECT USERID,UM.BRANCHID AS USERBRANCHID,USERNAME,[PASSWORD],ISSUPERADMIN,ISBRANCHADMIN,ISACTIVE,
							ISNULL(ISCHECKER,0)ISCHECKER,ISNULL(ISAUDITOR,0)ISAUDITOR, CB.BRANCHNAME AS USERBRANCH,  
            CB.BRANCHCODE,LASTLOGINTIME FROM USERMASTER UM WITH(NOLOCK)
            LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON UM.BRANCHID = CB.BRANCHID  
             WHERE UM.BRANCHID IN (  
                SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE    
                (  
                 SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBASEID LIKE   
                 (  
                  SELECT CB.PARENTBASEID FROM USERMASTER US WITH(NOLOCK) INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON US.BRANCHID = CB.BRANCHID   
                  WHERE USERID = ' + CAST(@USERID AS VARCHAR) + ') + ''%'' AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ') + ''%'')'  
      SET @ISWHERENOTAVAIL = 0;  
     END  
    ELSE  
     BEGIN  
      SET @SQLQUERY = 'SELECT USERID,UM.BRANCHID AS USERBRANCHID,USERNAME,[PASSWORD],ISSUPERADMIN,ISBRANCHADMIN,ISACTIVE,  
									ISNULL(ISCHECKER,0)ISCHECKER,ISNULL(ISAUDITOR,0)ISAUDITOR,CB.BRANCHNAME AS USERBRANCH,CB.BRANCHCODE,LASTLOGINTIME  
					   FROM USERMASTER UM WITH(NOLOCK) 
					   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON UM.BRANCHID  = CB.BRANCHID  
					WHERE USERID = ' + CAST(@USERID AS VARCHAR) + ''  
      SET @ISWHERENOTAVAIL = 0;  
    END  
   END  
  ELSE   
   BEGIN  
    SET @SQLQUERY = 'SELECT USERID,UM.BRANCHID AS USERBRANCHID,USERNAME,[PASSWORD],ISSUPERADMIN,ISBRANCHADMIN,ISACTIVE, 
							   	 ISNULL(ISCHECKER,0)ISCHECKER,ISNULL(ISAUDITOR,0)ISAUDITOR,CB.BRANCHNAME AS USERBRANCH,CB.BRANCHCODE,LASTLOGINTIME  
                     FROM USERMASTER UM WITH(NOLOCK) INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON UM.BRANCHID  = CB.BRANCHID  
         WHERE  USERID = ' + CAST(@USERID AS VARCHAR) + ''  
    SET @ISWHERENOTAVAIL = 0;  
   END  
  IF @USERNAME IS NOT NULL  
   BEGIN  
    IF @ISWHERENOTAVAIL = 1  
     BEGIN  
      SET @SQLQUERY = @SQLQUERY + ' WHERE ';  
      SET @ISWHERENOTAVAIL = 0;  
     END  
    ELSE  
     BEGIN  
      SET @SQLQUERY = @SQLQUERY + ' AND ';  
     END  
    SET @SQLQUERY = @SQLQUERY + 'USERNAME LIKE ''%' + CAST(@USERNAME AS VARCHAR(100)) + '%'''  
   END  
  IF @BRANCHNAMECODE IS NOT NULL  
   BEGIN  
    IF @ISWHERENOTAVAIL = 1  
     BEGIN  
      SET @SQLQUERY = @SQLQUERY + ' WHERE ';  
      SET @ISWHERENOTAVAIL = 0;  
     END  
    ELSE  
     BEGIN  
      SET @SQLQUERY = @SQLQUERY + ' AND ';  
     END  
    SET @SQLQUERY = @SQLQUERY + '(CB.BRANCHNAME LIKE ''%' + CAST(@BRANCHNAMECODE AS VARCHAR(100)) + '%'' OR CB.BRANCHCODE LIKE ''%' + CAST(@BRANCHNAMECODE AS VARCHAR(100)) + '%'')'  
   END  
  INSERT INTO @RESULTTABLE EXECUTE SP_EXECUTESQL @SQLQUERY;  
  SELECT TOP (@LASTREC-1) *FROM @RESULTTABLE WHERE ID > @FIRSTREC AND ID < @LASTREC;  
  /* TURN NOCOUNT BACK OFF */  
  SET NOCOUNT OFF  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetValidPanPercentage')
DROP PROCEDURE USP_TDS_GetValidPanPercentage
GO
CREATE PROCEDURE [dbo].[USP_TDS_GetValidPanPercentage]
@BRANCHID INT,          
@FORMID SMALLINT,          
@QUARTER SMALLINT,          
@FINANCIALYEAR INT,          
@ISEXCLUDEPAN BIT,    
@ISAUDITTRIAL BIT = 0          
AS          
	BEGIN          
		DECLARE @TOTALDEDUCTION INT          
		DECLARE @VALIDPANCOUNT INT          
		DECLARE @VALIDPERCENTAGE INT;          
		SET @VALIDPERCENTAGE =0;          
		DECLARE @TABLE TABLE(ID INT IDENTITY(1,1),DEDUCTIONID INT,TRANSSTATUS INT,ISVALID TINYINT)    
		DECLARE @DEDUCTEE TABLE(DEDUCTEEID INT, ISVALID BIT);
		SELECT FORMID,BRANCHID,[QUARTER],PAYMENTMADE,INCOMETAXRATE,
		TOTALDEDUCTED,NONDEDREASON,DEDUCTEEID,TAXRATE,DEDUCTIONID,TRANSSTATUS
		INTO #DEDUCTIONDETAIL
		FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE BRANCHID = @BRANCHID 
			AND FORMID = @FORMID 
			AND [QUARTER] = @QUARTER
		SELECT DL.BRANCHID,DL.DEDUCTIONID,DL.CHALLANID
		INTO #DEDCHALINK
		FROM DEDCHALINK DL WITH(NOLOCK)
		INNER JOIN #DEDUCTIONDETAIL DD
			ON DD.DEDUCTIONID = DL.DEDUCTIONID
			AND DD.BRANCHID = DL.BRANCHID
		SELECT DISTINCT D.DEDUCTEEID,
		CASE WHEN D.PAN LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 1          
				 ELSE 0     
		END AS ISVALID
		INTO #DEDUCTEE  
		FROM DEDUCTEE D
		INNER JOIN #DEDUCTIONDETAIL DD 
		ON D.DEDUCTEEID = DD.DEDUCTEEID
		--GETTING DEDUCTIONS WHICH ARE LINKED WITH NONDEDUCTION REASON IS 0 OR 1 I.E. LOWERDEDUCTION AND UNLINKED I.E TOTALDEDUCTED IS 0           
		IF(@FINANCIALYEAR=2009)
		BEGIN          
			SELECT DD.DEDUCTIONID, ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS,ISVALID           
			INTO #TEMP3
			FROM #DEDUCTIONDETAIL DD WITH (NOLOCK)          
				INNER JOIN #DEDCHALINK DCL WITH (NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID AND DD.BRANCHID=DCL.BRANCHID          
				INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID=D.DEDUCTEEID      
			WHERE DD.TOTALDEDUCTED>0 
				AND (DD.NONDEDREASON=0 
				OR DD.NONDEDREASON=1 
				OR DD.NONDEDREASON IS NULL)          
			SELECT DD.DEDUCTIONID,ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS,ISVALID          
			INTO #TEMP4
			FROM #DEDUCTIONDETAIL DD WITH (NOLOCK)          
				INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID=D.DEDUCTEEID             
			WHERE TOTALDEDUCTED=0
			INSERT INTO @TABLE 
			SELECT * FROM #TEMP3
			UNION
			SELECT * FROM #TEMP4            
		END          
		ELSE          
		BEGIN 
			SELECT DD.DEDUCTIONID,DD.DEDUCTEEID,BRANCHID,FORMID,ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS,
					TOTALDEDUCTED,NONDEDREASON,TAXRATE,PAYMENTMADE,INCOMETAXRATE
			INTO #REQDEDUCTIONS
			FROM #DEDUCTIONDETAIL DD WITH (NOLOCK)               
			SELECT DD.DEDUCTIONID,ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS,
					CASE WHEN DD.NONDEDREASON = 3 AND D.ISVALID = 0 
							  AND TOTALDEDUCTED >= 
							  (((DD.PAYMENTMADE * (DD.TAXRATE/100)) * 0.9) 
							  - (CASE WHEN (DD.TOTALDEDUCTED <= 3 AND DD.PAYMENTMADE <= 20) THEN 0 ELSE 2 END))
						 THEN 1 ELSE D.ISVALID END AS ISVALID
			INTO #TEMP1
			FROM #REQDEDUCTIONS DD WITH (NOLOCK) 
				INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID          
				INNER JOIN #DEDCHALINK DCL WITH (NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID AND DD.BRANCHID=DCL.BRANCHID               
			WHERE DD.TOTALDEDUCTED > 0
			SELECT DD.DEDUCTIONID,ISNULL(DD.TRANSSTATUS,2)TRANSSTATUS,
					CASE WHEN DD.NONDEDREASON = 3 AND D.ISVALID = 0 THEN 1 
					     ELSE D.ISVALID END AS ISVALID
			INTO #TEMP2
			FROM #REQDEDUCTIONS DD WITH (NOLOCK)          
				INNER JOIN #DEDUCTEE D ON DD.DEDUCTEEID=D.DEDUCTEEID             
			WHERE TOTALDEDUCTED = 0 
			INSERT INTO @TABLE 
			SELECT * FROM #TEMP1
			UNION
			SELECT * FROM #TEMP2
		END        
	  --INCLUDING INVALID PAN ALSO FOR CALCULATING PERCENTAGE          
		IF @ISEXCLUDEPAN = 0     
		BEGIN       
			IF(@ISAUDITTRIAL =1)    
			BEGIN    
				SELECT @TOTALDEDUCTION=COUNT(ID) FROM @TABLE WHERE TRANSSTATUS = 2    
				SELECT @VALIDPANCOUNT=COUNT(ID) FROM @TABLE WHERE ISVALID = 1 AND TRANSSTATUS = 2    
			END    
			ELSE    
			BEGIN    
				SELECT @TOTALDEDUCTION=COUNT(ID) FROM @TABLE          
				SELECT @VALIDPANCOUNT=COUNT(ID) FROM @TABLE WHERE ISVALID = 1
			END             
		END          
		ELSE          
		BEGIN      
			IF(@ISAUDITTRIAL = 1)    
			BEGIN    
				SELECT @TOTALDEDUCTION=COUNT(ID) FROM @TABLE WHERE ISVALID =1 AND TRANSSTATUS = 2      
				SELECT @VALIDPANCOUNT=COUNT(ID) FROM @TABLE WHERE ISVALID = 1 AND TRANSSTATUS = 2    
			END    
			ELSE    
			BEGIN    
				SELECT @TOTALDEDUCTION=COUNT(ID) FROM @TABLE WHERE ISVALID=1         
				SELECT @VALIDPANCOUNT=COUNT(ID) FROM @TABLE WHERE ISVALID = 1    
			END             
		END      
		SELECT @TOTALDEDUCTION AS TOTAL , @VALIDPANCOUNT AS VALID
	IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
		DROP TABLE #DEDUCTIONDETAIL
	IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
		DROP TABLE #DEDCHALINK
	IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
		DROP TABLE #DEDUCTEE
	IF OBJECT_ID('TEMPDB..#TEMP1') IS NOT NULL
		DROP TABLE #TEMP1
	IF OBJECT_ID('TEMPDB..#TEMP2') IS NOT NULL
		DROP TABLE #TEMP2
	IF OBJECT_ID('TEMPDB..#TEMP3') IS NOT NULL
		DROP TABLE #TEMP3
	IF OBJECT_ID('TEMPDB..#TEMP4') IS NOT NULL
		DROP TABLE #TEMP4
	IF OBJECT_ID('TEMPDB..#REQDEDUCTIONS') IS NOT NULL
		DROP TABLE #REQDEDUCTIONS   
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETWRONGENTRY')
DROP PROCEDURE USP_TDS_GETWRONGENTRY
GO
CREATE PROCEDURE [USP_TDS_GETWRONGENTRY]
AS
BEGIN
	 SELECT ROWNO, BRANCHNAME, BRANCHCODE, PBRANCHNAME, PBRANCHCODE FROM USERBRANCH WITH(NOLOCK) WHERE PBRANCHNAME<>'ADMIN'
EXCEPT
	SELECT E.ROWNO, E.BRANCHNAME, E.BRANCHCODE, E.PBRANCHNAME, E.PBRANCHCODE
	FROM USERBRANCH E WITH(NOLOCK)  INNER JOIN (SELECT ROWNO, BRANCHNAME, BRANCHCODE, PBRANCHNAME, PBRANCHCODE FROM USERBRANCH WITH(NOLOCK))P	ON E.PBRANCHNAME = P.BRANCHNAME AND E.PBRANCHCODE = P.BRANCHCODE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETZOBRANCHESFORAUTOCOMPLETE')
DROP PROCEDURE USP_TDS_GETZOBRANCHESFORAUTOCOMPLETE
GO
CREATE PROCEDURE USP_TDS_GETZOBRANCHESFORAUTOCOMPLETE --'ZO',20
@PREFIXTEXT VARCHAR(75),
@RECORDCOUNT INT
AS
BEGIN
	SELECT TOP (@RECORDCOUNT) BRANCHID,BRANCHNAME+'('+BRANCHCODE+')' AS BRANCHNAME FROM COMPANYBRANCH 
	WHERE ISZORO = 1 AND BRANCHNAME+'('+BRANCHCODE+')' LIKE @PREFIXTEXT+'%'
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GetZoneBranchID')
DROP PROCEDURE USP_TDS_GetZoneBranchID
GO
CREATE PROCEDURE USP_TDS_GetZoneBranchID
@RTBRANCHID INT,
@FORMID INT,
@QUARTER INT
AS    
	BEGIN 
		DECLARE @BRANCHID INT;  
		SELECT  @BRANCHID = BRANCHID
		FROM DEDUCTIONDETAIL WITH(NOLOCK) 
		WHERE RTBRANCHID = @RTBRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND RTBRANCHID <> BRANCHID
		GROUP BY BRANCHID
		IF(@BRANCHID IS NULL)
			SET @BRANCHID = @RTBRANCHID
		SELECT @BRANCHID
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_GETZOROBRANCH')
DROP PROCEDURE USP_TDS_GETZOROBRANCH
GO
CREATE PROCEDURE [USP_TDS_GETZOROBRANCH]  
AS  
 BEGIN  
  SELECT BRANCHID,BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK)--WITH(NOLOCK) WHERE ISZORO=1  AND BRANCHID<>1
 END  
-- SELECT * FROM DEDUCTIONDETAIL WHERE
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_HigherRateSelectedWrongly')
DROP PROCEDURE USP_TDS_HigherRateSelectedWrongly
GO
CREATE PROCEDURE USP_TDS_HigherRateSelectedWrongly 
@Quarter INT 
AS  
BEGIN  
 -- HIGHER RATE WRONGLY SELECTED FOR DEDUCTEE HAVING VALID PAN  
 SELECT CB.BRANCHCODE, CB.BRANCHNAME,   
  D.NAME, D.PAN, DD.PAYMENTMADE, DD.PAYMENTDATE, DD.TOTALDEDUCTED, DD.DEDUCTEDDATE,  
  DD.TAXRATE, TS.SECTIONNAME,  
  CASE   
   WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'      -- A spec  
   WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197'       -- B spec  
   WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'   -- C spec  
   WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'   -- A spec  
   WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'       -- B spec  
   WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'   -- C spec  
   WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 4 THEN 'Transporter with valid PAN (0%)'    -- T spec  
   WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 5 THEN 'Amount Paid/Credited is Under Threshold'  -- Y spec  
   WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'     -- S spec  
   WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 7 THEN 'NO DEDUCTION U/S 197A(1F)'      -- Z spec  
   WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'  -- A spec  
   WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'       -- B spec  
   WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'   -- C spec  
   WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'     -- S spec  
   WHEN DD.FORMID = 4 AND DD.NONDEDREASON = 1 THEN 'AS PER SECTION 206C(9)'      -- A spec  
   WHEN DD.FORMID = 4 AND DD.NONDEDREASON = 2 THEN 'AS PER SECTION 206C(1A)'      -- B spec  
   ELSE ''  
  END [DEDUCTION REMARKS]  
 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.BRANCHID = DD.BRANCHID AND D.DEDUCTEEID = DD.DEDUCTEEID   
  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID   
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID   
  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID   
 WHERE   
  DD.NONDEDREASON = 3 AND DD.TAXRATE = 20 
  AND D.PAN NOT IN ('PANAPPLIED','PANINVALID','PANNOTAVBL')  
  AND DD.QUARTER=@Quarter
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTDETAILS')
DROP PROCEDURE USP_TDS_IMPORTDETAILS
GO
CREATE PROCEDURE USP_TDS_IMPORTDETAILS  --500004,2,0
@BRANCHCODES NVARCHAR(MAX),  
@QUARTER INT,
@ISNONTDS BIT  
AS  
BEGIN  
SELECT * INTO #BRANCHES FROM  dbo.UDF_TDS_SplitString(@BRANCHCODES,',')  
IF(@ISNONTDS = 1)
	BEGIN
		SELECT BRANCHCODE,COUNT(DEDUCTIONID)AS DEDUCTIONCOUNT, SUM(PAYMENTMADE)AS PAYMENTAMOUNT FROM DEDUCTIONDETAIL DD  
		INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = DD.BRANCHID  
		INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE  
		WHERE TOTALDEDUCTED = 0 AND ENTRYTYPE = 4 AND QUARTER = @QUARTER  
		GROUP BY CB.BRANCHCODE  
	END
ELSE 
	BEGIN
		SELECT BRANCHCODE,COUNT(DEDUCTIONID)AS DEDUCTIONCOUNT, SUM(PAYMENTMADE)AS PAYMENTAMOUNT FROM DEDUCTIONDETAIL DD  
		INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = DD.BRANCHID  
		INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE  
		WHERE TOTALDEDUCTED <> 0 AND ENTRYTYPE = 4 AND QUARTER = @QUARTER  
		GROUP BY CB.BRANCHCODE  
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTEMPLOYEE')
DROP PROCEDURE USP_TDS_IMPORTEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_IMPORTEMPLOYEE]
	@SERIALNO INT,
	@BRANCHID INT,
	@SALUTATION VARCHAR(5),
	@NAME VARCHAR(75),
	@PAN VARCHAR(10),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@STATEID INT,
	@PINCODE VARCHAR(6),
	@PHONENO VARCHAR(15),
	@EMAILADDRESS VARCHAR(75),
	@DESIGNATION VARCHAR(20),
	@EMPLOYMENTFROM SMALLDATETIME,
	@EMPLOYMENTTO SMALLDATETIME,
	@GENDER CHAR(1),
	@ISSENIORCITIZEN SMALLINT
AS
	BEGIN
		DECLARE @PANREFERENCE VARCHAR(10)
		IF(@PAN='PANAPPLIED' OR @PAN='PANINVALID' OR @PAN='PANNOTAVBL')
			BEGIN
				SET @PANREFERENCE=DBO.UDF_TDS_GETPANREFERENCEFORIMPORT(@BRANCHID,1)
			END
		ELSE
			BEGIN
				SET @PANREFERENCE=''
			END
		DECLARE @EMPLOYEEID INT,@DEDUCTEEID INT
		IF EXISTS(SELECT EMPLOYEE.EMPLOYEEID FROM DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=EMPLOYEE.DEDUCTEEID
						WHERE EMPLOYEE.SERIALNO=@SERIALNO AND DEDUCTEE.BRANCHID=@BRANCHID)
			BEGIN
				SELECT @DEDUCTEEID=EMPLOYEE.DEDUCTEEID,@EMPLOYEEID=EMPLOYEE.EMPLOYEEID
				FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=EMPLOYEE.DEDUCTEEID
				WHERE  EMPLOYEE.SERIALNO=@SERIALNO AND DEDUCTEE.BRANCHID=@BRANCHID
				UPDATE DEDUCTEE SET SALUTATION=@SALUTATION,NAME=@NAME,PAN=@PAN,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,
									ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,STATEID=@STATEID,PINCODE=@PINCODE,PHONENO=@PHONENO,EMAILADDRESS=@EMAILADDRESS
				WHERE  DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID
				UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYMENTFROM,EMPLOYMENTTO=@EMPLOYMENTTO,GENDER=@GENDER,ISSENIORCITIZEN=@ISSENIORCITIZEN
				WHERE  EMPLOYEEID=@EMPLOYEEID AND DEDUCTEEID=@DEDUCTEEID AND SERIALNO=@SERIALNO
				UPDATE DD SET DD.DEDUCTEEPAN=@PAN FROM DEDUCTIONDETAIL DD INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID=D.DEDUCTEEID
				WHERE DD.DEDUCTEEID=@DEDUCTEEID AND DD.BRANCHID=@BRANCHID
			END
		ELSE
			BEGIN
				INSERT INTO DEDUCTEE (BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,
												STATEID,PINCODE,PHONENO,EMAILADDRESS)
				VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,
												@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS)
				SET @DEDUCTEEID=SCOPE_IDENTITY();
				INSERT INTO EMPLOYEE(DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,ISSENIORCITIZEN,SERIALNO)
				VALUES(@DEDUCTEEID,@DESIGNATION,@EMPLOYMENTFROM,@EMPLOYMENTTO,@GENDER,@ISSENIORCITIZEN,@SERIALNO)
			END
		SELECT @DEDUCTEEID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTEXCELCHALLAN')
DROP PROCEDURE USP_TDS_IMPORTEXCELCHALLAN
GO
CREATE PROCEDURE [USP_TDS_IMPORTEXCELCHALLAN]
	@SERIALNO INT,
	@CHALLANID INT,
	@BRANCHID INT,
	@QUARTER TINYINT,
	@FORMID TINYINT,
	@ERETURNID INT,
	@LINKDEDCOUNT INT,
	@ISNILCHALLAN VARCHAR(1),
	@ISUPDATECHALLAN TINYINT,
	@MODEOFPAYMENT TINYINT,
	@BANKCHALLANNO VARCHAR(5),
	@LASTBANKCHALLANNO VARCHAR(5),
	@TRNVOUCHERNO VARCHAR(9),
	@LASTTRNVOUCHERNO VARCHAR(9),
	@BANKID INT,
	@LASTBANKID INT,
	@CHALLANPAIDDATE SMALLDATETIME=NULL,
	@LASTCHALLANPAIDDATE SMALLDATETIME=NULL,
	@DATEOFDEBIT SMALLDATETIME=NULL,
	@SECTIONID INT,
	@INCOMETAX NUMERIC(14,2),
	@SURCHARGE NUMERIC(14,2),
	@EDUCATIONCESS NUMERIC(14,2),
	@INTEREST NUMERIC(14,2),
	@PENALTY NUMERIC(14,2),
	@OTHERS NUMERIC(14,2),
	@CHALLANTOTAL NUMERIC(14,2),
	@LASTCHALLANTOTAL NUMERIC(14,2),
	@ISCOMPANY BIT,
	@CHEQUENO VARCHAR(15),
	@CHEQUEDATE SMALLDATETIME=NULL,
	@CHEQUEDRAWNON VARCHAR(50),
	@TVRECEIPTNUMBER VARCHAR(7),
	@TRANREFNO VARCHAR(20),
	@MINORHEAD INT
AS
	BEGIN	      
		IF NOT EXISTS(SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND SERIALNO=@SERIALNO AND FORMID=@FORMID AND QUARTER=@QUARTER)
			BEGIN
				INSERT INTO CHALLANDETAIL (BRANCHID,FORMID,[QUARTER],ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,
										   LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,
										   DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
										   ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TVRECEIPTNUMBER,TRANREFNO,SERIALNO, MINORHEAD)
				VALUES(@BRANCHID,@FORMID,@QUARTER,@ERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,@ISUPDATECHALLAN,@MODEOFPAYMENT,@BANKCHALLANNO,
					   @LASTBANKCHALLANNO,@TRNVOUCHERNO,@LASTTRNVOUCHERNO,@BANKID,@LASTBANKID,@CHALLANPAIDDATE,@LASTCHALLANPAIDDATE,
					   @DATEOFDEBIT,@SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@LASTCHALLANTOTAL,
					   @ISCOMPANY,@CHEQUENO,@CHEQUEDATE,@CHEQUEDRAWNON,@TVRECEIPTNUMBER,@TRANREFNO,@SERIALNO,@MINORHEAD)
				SET @CHALLANID=SCOPE_IDENTITY();
			END
		ELSE
			BEGIN
				UPDATE CHALLANDETAIL SET BRANCHID=@BRANCHID,FORMID=@FORMID,[QUARTER]=@QUARTER,ERETURNID=@ERETURNID,LINKDEDCOUNT=@LINKDEDCOUNT,ISNILCHALLAN=@ISNILCHALLAN,
										 ISUPDATECHALLAN=@ISUPDATECHALLAN,MODEOFPAYMENT=@MODEOFPAYMENT,BANKCHALLANNO=@BANKCHALLANNO,LASTBANKCHALLANNO=@LASTBANKCHALLANNO,
										 TRNVOUCHERNO=@TRNVOUCHERNO,LASTTRNVOUCHERNO=@LASTTRNVOUCHERNO,BANKID=@BANKID,LASTBANKID=@LASTBANKID,CHALLANPAIDDATE=@CHALLANPAIDDATE,
										 LASTCHALLANPAIDDATE=@LASTCHALLANPAIDDATE,DATEOFDEBIT=@DATEOFDEBIT,SECTIONID=@SECTIONID,INCOMETAX=@INCOMETAX,SURCHARGE=@SURCHARGE,
										 EDUCATIONCESS=@EDUCATIONCESS,INTEREST=@INTEREST,PENALTY=@PENALTY,OTHERS=@OTHERS,CHALLANTOTAL=@CHALLANTOTAL,LASTCHALLANTOTAL=@LASTCHALLANTOTAL,
										 ISCOMPANY=@ISCOMPANY,CHEQUENO=@CHEQUENO,CHEQUEDATE=@CHEQUEDATE,CHEQUEDRAWNON=@CHEQUEDRAWNON,TVRECEIPTNUMBER=@TVRECEIPTNUMBER,TRANREFNO=@TRANREFNO,
										 MINORHEAD = @MINORHEAD
				WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND SERIALNO=@SERIALNO
				SELECT @CHALLANID=CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND SERIALNO=@SERIALNO
			END
		SELECT @CHALLANID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTFORM24')
DROP PROCEDURE USP_TDS_IMPORTFORM24
GO
CREATE PROCEDURE [USP_TDS_IMPORTFORM24]              
 @BRANCHID INT,              
 @QUARTER INT,              
 @FORMID INT,                 
 @DEDUCTIONSERIALNO INT,              
 @EMPLOYEESERIALNO INT,              
 @SALUTATION VARCHAR(10),              
 @NAME VARCHAR(75),              
 @PAN VARCHAR(10),              
 @DESIGNATION VARCHAR(20),              
 @GENDER CHAR(1),              
 @ISSENIORCITIZEN SMALLINT,              
 @EMPLOYMENTFROM SMALLDATETIME,              
 @EMPLOYMENTTO SMALLDATETIME,              
 @FLATDOORBLOCKNO VARCHAR(25),              
 @NAMEOFBUILDING VARCHAR(25),              
 @STREETROADNAME VARCHAR(25),              
 @AREA VARCHAR(25),              
 @CITY VARCHAR(25),              
 @STATE TINYINT,              
 @PINCODE VARCHAR(6),              
 @PHONE VARCHAR(15),              
 @EMAIL VARCHAR(75),              
 @AMOUNTOFPAYMENT NUMERIC(13,2),                 
 @AMOUNTPAIDCREDITEDDATE SMALLDATETIME,              
 @INCOMETAXAMOUNT NUMERIC(13,2),               
 @CESSRATE NUMERIC(6,3),               
 @CESSAMOUNT NUMERIC(13,2),              
 @TAXDEDUCTEDDATE SMALLDATETIME=NULL,              
 @NONDEDUCTIONREASON TINYINT,                    
 @MODE VARCHAR(1),              
 @SURCHARGE NUMERIC(13,2),              
 @CHALLANSERIALNO INT,              
 @SHOULDLINK BIT,              
 @SHOULDDELETE BIT,              
 @ENTRYTYPE INT,             
 @SECTIONID INT,    
 @VALUE BIT = 0,      
 @CUSTID VARCHAR(20)= NULL               
AS              
 BEGIN              
  DECLARE @DEDUCTEEID INT,@EMPLOYEEID INT,@DEDUCTIONID INT              
  DECLARE @SERIALNO INT              
  DECLARE @PANREFERENCE VARCHAR(10);    
  SET @DEDUCTEEID = -1;              
  --IF PAN IS SELECTED AS PANAPLIED,PANINVALID,PANNOTAVBL THEN GETTING PANREFERENCE NUMBER              
  IF(@PAN='PANAPPLIED' OR @PAN='PANINVALID' OR @PAN='PANNOTAVBL')              
   BEGIN    
    SET @PANREFERENCE = 'NOPAN';             
    SET @PANREFERENCE = @PANREFERENCE + DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHID(@BRANCHID ,1)          
   END              
  --ELSE MAKING PANREFERENCE IS EMPTY              
  ELSE              
   BEGIN              
    SET @PANREFERENCE=''              
   END              
  --UPDATE THE EXISTING RECORD      
  IF(@VALUE = 0)  
   BEGIN            
    IF EXISTS(SELECT EMPLOYEE.EMPLOYEEID FROM DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=EMPLOYEE.DEDUCTEEID     
       WHERE EMPLOYEE.SERIALNO=@EMPLOYEESERIALNO AND DEDUCTEE.BRANCHID=@BRANCHID)      
     BEGIN     
    SELECT @DEDUCTEEID=EMPLOYEE.DEDUCTEEID,@EMPLOYEEID=EMPLOYEE.EMPLOYEEID         
     FROM DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=EMPLOYEE.DEDUCTEEID                                      
     WHERE EMPLOYEE.SERIALNO=@EMPLOYEESERIALNO AND DEDUCTEE.BRANCHID=@BRANCHID               
    --UPDATING THE DEDUCTEE I.E EMPLOYEE DETILS IN DEDUCTEE TABLE              
    IF(@CUSTID <> '')      
      BEGIN     
       UPDATE DEDUCTEE SET SALUTATION=@SALUTATION,NAME=@NAME,PAN=@PAN,PANREFERENCE=@PANREFERENCE,ADDRESS1=@FLATDOORBLOCKNO,ADDRESS2=@NAMEOFBUILDING,              
        ADDRESS3=@STREETROADNAME,ADDRESS4=@AREA,ADDRESS5=@CITY,STATEID=@STATE,PINCODE=@PINCODE,PHONENO=@PHONE,EMAILADDRESS=@EMAIL,REFERENCENO=@CUSTID               
       WHERE  DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID        
      END      
       ELSE      
      BEGIN     
       UPDATE DEDUCTEE SET SALUTATION=@SALUTATION,NAME=@NAME,PAN=@PAN,PANREFERENCE=@PANREFERENCE,ADDRESS1=@FLATDOORBLOCKNO,ADDRESS2=@NAMEOFBUILDING,              
        ADDRESS3=@STREETROADNAME,ADDRESS4=@AREA,ADDRESS5=@CITY,STATEID=@STATE,PINCODE=@PINCODE,PHONENO=@PHONE,EMAILADDRESS=@EMAIL               
       WHERE  DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID       
         END             
    --UPDATING THE EMPLOYEE DETAILS IN EMPLOYEE TABLE              
    UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYMENTFROM,EMPLOYMENTTO=@EMPLOYMENTTO,GENDER=@GENDER,ISSENIORCITIZEN=@ISSENIORCITIZEN               
 WHERE  EMPLOYEEID=@EMPLOYEEID AND DEDUCTEEID=@DEDUCTEEID               
     END    
   END    
  ELSE              
   BEGIN              
       IF EXISTS(SELECT EMPLOYEE.EMPLOYEEID FROM DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=EMPLOYEE.DEDUCTEEID     
             WHERE DEDUCTEE.REFERENCENO = @CUSTID AND DEDUCTEE.BRANCHID = @BRANCHID)      
       BEGIN     
    SELECT @DEDUCTEEID=EMPLOYEE.DEDUCTEEID,@EMPLOYEEID=EMPLOYEE.EMPLOYEEID         
     FROM DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE ON DEDUCTEE.DEDUCTEEID=EMPLOYEE.DEDUCTEEID                                      
     WHERE DEDUCTEE.REFERENCENO = @CUSTID AND DEDUCTEE.BRANCHID=@BRANCHID               
    --UPDATING THE DEDUCTEE I.E EMPLOYEE DETILS IN DEDUCTEE TABLE              
    IF(@CUSTID <> '')      
      BEGIN     
       UPDATE DEDUCTEE SET SALUTATION=@SALUTATION,NAME=@NAME,PAN=@PAN,PANREFERENCE=@PANREFERENCE,ADDRESS1=@FLATDOORBLOCKNO,ADDRESS2=@NAMEOFBUILDING,              
        ADDRESS3=@STREETROADNAME,ADDRESS4=@AREA,ADDRESS5=@CITY,STATEID=@STATE,PINCODE=@PINCODE,PHONENO=@PHONE,EMAILADDRESS=@EMAIL,REFERENCENO=@CUSTID               
       WHERE  DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID        
      END      
       ELSE      
      BEGIN     
       UPDATE DEDUCTEE SET SALUTATION=@SALUTATION,NAME=@NAME,PAN=@PAN,PANREFERENCE=@PANREFERENCE,ADDRESS1=@FLATDOORBLOCKNO,ADDRESS2=@NAMEOFBUILDING,              
        ADDRESS3=@STREETROADNAME,ADDRESS4=@AREA,ADDRESS5=@CITY,STATEID=@STATE,PINCODE=@PINCODE,PHONENO=@PHONE,EMAILADDRESS=@EMAIL               
       WHERE  DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID       
         END             
    --UPDATING THE EMPLOYEE DETAILS IN EMPLOYEE TABLE              
    UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYMENTFROM,EMPLOYMENTTO=@EMPLOYMENTTO,GENDER=@GENDER,ISSENIORCITIZEN=@ISSENIORCITIZEN               
    WHERE  EMPLOYEEID=@EMPLOYEEID AND DEDUCTEEID=@DEDUCTEEID         
     END    
   END                 
  --NEW RECORD           
     IF(@DEDUCTEEID = -1 AND @CUSTID <> '' AND @VALUE = 1)  
   BEGIN    
   SELECT @EMPLOYEESERIALNO = ISNULL(MAX(SERIALNO),0) + 1 FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID     
    WHERE  D.BRANCHID = @BRANCHID;    
   END  
  IF(@DEDUCTEEID = -1 )  
   BEGIN   
    INSERT INTO DEDUCTEE (BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,              
          STATEID,PINCODE,PHONENO,EMAILADDRESS,ISEXCLUDED,REFERENCENO)              
    VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@FLATDOORBLOCKNO,@NAMEOFBUILDING,@STREETROADNAME,@AREA,              
         @CITY,@STATE,@PINCODE,@PHONE,@EMAIL,0,@CUSTID)              
    SET @DEDUCTEEID=SCOPE_IDENTITY();   
    INSERT INTO EMPLOYEE(DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,ISSENIORCITIZEN,SERIALNO)              
    VALUES(@DEDUCTEEID,@DESIGNATION,@EMPLOYMENTFROM,@EMPLOYMENTTO,@GENDER,@ISSENIORCITIZEN,@EMPLOYEESERIALNO);    
   END        
       --STARTS DEDUCTION'S AND INSERTION              
        --IF SHOULDDELETE IS FLASE THEN ALL DEDUCTION RECORDS(I.E BASED ON BRANCHID,FORMID,QUARTER) ARE NOT DELETED BEFORE IMPORTING              
        --SO DEDUCTION UPDATION CAN BE UPDATION OR INSERTION              
        --SO DEDUCTION INSERTION IS ANOTHER STORED PROCEDURE USING COMMONLY           
    IF(@SHOULDDELETE=0)              
    BEGIN     
     IF((SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND SERIALNO=@DEDUCTIONSERIALNO)>0)              
   BEGIN              
    --UPDATING THE EMPLOYEE DEDUCTION DETAILS              
    UPDATE DEDUCTIONDETAIL SET DEDUCTEEPAN=@PAN,DEDUCTEEPANREF=@PANREFERENCE,PAYMENTMADE=@AMOUNTOFPAYMENT,PAYMENTDATE=@AMOUNTPAIDCREDITEDDATE,              
       INCOMETAX=ISNULL(@INCOMETAXAMOUNT,0),EDUCATIONCESSRATE=@CESSRATE,EDUCATIONCESS=ISNULL(@CESSAMOUNT,0),              
       TOTALDEDUCTED=ISNULL(@INCOMETAXAMOUNT,0)+ISNULL(@CESSAMOUNT,0),DEDUCTEDDATE=@TAXDEDUCTEDDATE,              
       NONDEDREASON=@NONDEDUCTIONREASON,MODE=@MODE,SURCHARGE=ISNULL(@SURCHARGE,0),              
       ORGPAYMENTMADE=@AMOUNTOFPAYMENT,              
       ORGINCOMETAX=ISNULL(@INCOMETAXAMOUNT,0),ORGSURCHARGE=ISNULL(@SURCHARGE,0),              
       ORGEDUCATIONCESS=ISNULL(@CESSAMOUNT,0)              
    WHERE  BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND SERIALNO=@DEDUCTIONSERIALNO               
   END               
   ELSE              
   BEGIN              
   EXECUTE USP_TDS_IMPORTFORM24DEDUCTIONINSERTION @BRANCHID,@QUARTER,@FORMID,@DEDUCTEEID,@DEDUCTIONSERIALNO,@PAN,@PANREFERENCE,              
                @AMOUNTOFPAYMENT,@AMOUNTPAIDCREDITEDDATE,@INCOMETAXAMOUNT,@CESSAMOUNT,              
                @TAXDEDUCTEDDATE,@CESSRATE,@NONDEDUCTIONREASON,@MODE,@SURCHARGE,@SECTIONID,@ENTRYTYPE              
   END                              
       END              
    ELSE              
       BEGIN     
          EXECUTE USP_TDS_IMPORTFORM24DEDUCTIONINSERTION @BRANCHID,@QUARTER,@FORMID,@DEDUCTEEID,@DEDUCTIONSERIALNO,@PAN,@PANREFERENCE,              
                                                         @AMOUNTOFPAYMENT,@AMOUNTPAIDCREDITEDDATE,@INCOMETAXAMOUNT,@CESSAMOUNT,              
                                                         @TAXDEDUCTEDDATE,@CESSRATE,@NONDEDUCTIONREASON,@MODE,@SURCHARGE,@SECTIONID,@ENTRYTYPE     
       END             
   SELECT @DEDUCTIONID=DEDUCTIONID FROM DEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND SERIALNO=@DEDUCTIONSERIALNO     
   --LINKING AND UNLINKING THE DEDUCTION BASED ON CONDITION              
   IF(@SHOULDLINK=1)              
    BEGIN              
       DECLARE @CHALLANID INT              
       --UNLINKING THE DEDUCTIONS              
  IF(@CHALLANSERIALNO=-1)              
  BEGIN     
  DELETE FROM DEDCHALINK WHERE DEDUCTIONID=@DEDUCTIONID              
  END              
     --LINKING DEDUCTIONS              
  ELSE              
  BEGIN     
  SELECT @CHALLANID=CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID               
          AND FORMID=@FORMID AND QUARTER=@QUARTER AND SERIALNO=@CHALLANSERIALNO               
     DELETE FROM DEDCHALINK WHERE DEDUCTIONID=@DEDUCTIONID              
     INSERT INTO DEDCHALINK(BRANCHID,CHALLANID,DEDUCTIONID) VALUES(@BRANCHID,@CHALLANID,@DEDUCTIONID)              
  END     
   END              
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTFORM24DEDUCTIONINSERTION')
DROP PROCEDURE USP_TDS_IMPORTFORM24DEDUCTIONINSERTION
GO
CREATE PROCEDURE [USP_TDS_IMPORTFORM24DEDUCTIONINSERTION]
 @BRANCHID INT,
 @QUARTER INT,
 @FORMID INT,
 @DEDUCTEEID INT,
 @DEDUCTIONSERIALNO INT,
 @PAN VARCHAR(10),
 @PANREFERENCE VARCHAR(10),
 @AMOUNTOFPAYMENT NUMERIC(13,2),
 @AMOUNTPAIDCREDITEDDATE SMALLDATETIME,
 @INCOMETAXAMOUNT NUMERIC(13,2),
 @CESSAMOUNT NUMERIC(13,2),
 @TAXDEDUCTEDDATE SMALLDATETIME=NULL,
 @CESSRATE NUMERIC(6,3),
 @NONDEDUCTIONREASON TINYINT,
 @MODE VARCHAR(1),
 @SURCHARGE NUMERIC(13,2),
 @SECTIONID INT,
   @ENTRYTYPE INT
AS
 BEGIN
  DECLARE @STATUSID INT,@DEDUCTORID INT,@PARTPAYMENTID INT;
  SELECT @DEDUCTORID = DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND [QUARTER] = @QUARTER;
  SELECT @STATUSID = STATUSID FROM DEDUCTOR WHERE DEDUCTORID = @DEDUCTORID;
  SELECT @PARTPAYMENTID = ISNULL(MAX(PARTPAYMENTID),0) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
  IF(SELECT ALLOW92A92B FROM DEFAULTSETTINGS)=0
  BEGIN
   IF(@STATUSID = 1)
    BEGIN
     SELECT @SECTIONID = SECTIONID FROM TAXSECTIONS WHERE SECTIONID = 1;
    END
   ELSE IF(@STATUSID = 2)
    BEGIN
     SELECT @SECTIONID = SECTIONID FROM TAXSECTIONS WHERE SECTIONID = 2;
    END
         END
  INSERT INTO DEDUCTIONDETAIL(BRANCHID,FORMID,[QUARTER],DEDUCTEEID,PAYMENTMADE,PAYMENTDATE,INCOMETAX,
         EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,EDUCATIONCESSRATE,NONDEDREASON,SERIALNO,MODE,SURCHARGE,SECTIONID,
         ORGPAYMENTMADE,ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,PARTPAYMENTID, ENTRYTYPE)
  VALUES (@BRANCHID,@FORMID,@QUARTER,@DEDUCTEEID,@AMOUNTOFPAYMENT,@AMOUNTPAIDCREDITEDDATE,@INCOMETAXAMOUNT,@CESSAMOUNT,
    @INCOMETAXAMOUNT + @CESSAMOUNT,@TAXDEDUCTEDDATE,@CESSRATE,@NONDEDUCTIONREASON,@DEDUCTIONSERIALNO,@MODE,@SURCHARGE,@SECTIONID,
    @AMOUNTOFPAYMENT,@INCOMETAXAMOUNT,@SURCHARGE,@CESSAMOUNT,@INCOMETAXAMOUNT + @CESSAMOUNT,@PARTPAYMENTID + 1, @ENTRYTYPE)
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTFORM2627')
DROP PROCEDURE USP_TDS_IMPORTFORM2627
GO
CREATE PROCEDURE [USP_TDS_IMPORTFORM2627]                
   @BRANCHID INT,                
   @QUARTER INT,                
   @FORMID INT,                   
   @DEDUCTIONSERIALNO INT,                
   @NONEMPLOYEESERIALNO INT,                
   @SALUTATION VARCHAR(10),                
   @NAME VARCHAR(75),                
   @PAN VARCHAR(10),                
   @CODE INT,                
   @FLATDOORBLOCKNO VARCHAR(25),                
   @NAMEOFBUILDING VARCHAR(25),                
   @STREETROADNAME VARCHAR(25),                
   @AREA VARCHAR(25),                
   @CITY VARCHAR(25),                
   @STATE TINYINT,                
   @PINCODE VARCHAR(6),                
   @PHONE VARCHAR(15),                
   @EMAIL VARCHAR(75),                
   @SECTIONID INT,                
   @VALUEOFPURCHASE NUMERIC(13,2) = NULL,               
   @AMOUNTOFPAYMENT NUMERIC(13,2),                   
   @AMOUNTPAIDCREDITEDDATE SMALLDATETIME,                
   @INCOMETAXRATE NUMERIC(5,3),                
   @INCOMETAXAMOUNT NUMERIC(13,2),                 
   @SURCHARGERATE NUMERIC(5,3),                
   @SURCHARGE NUMERIC(13,2),                
   @CESSRATE NUMERIC(5,3),                 
   @CESSAMOUNT NUMERIC(13,2),                
   @TAXDEDUCTEDDATE SMALLDATETIME=NULL,                
   @TCSCERTDATE SMALLDATETIME = NULL,               
   @ISBOOKENTRY BIT,                
   @NONDEDUCTIONREASON TINYINT,                      
   @MODE VARCHAR(1),                
   @ISGROUPINGUP BIT=NULL,                
   @CHALLANSERIALNO INT,                
   @SHOULDLINK BIT,                
   @SHOULDDELETE BIT,                
   @ENTRYTYPE INT,          
   @ISTRANSPORTER BIT = NULL,    
   @CUSTID VARCHAR(20) = NULL,    
   @VALUE BIT =0,
   @CERTNO VARCHAR(20) = NULL       
AS                
 BEGIN                
  DECLARE @DEDUCTEEID INT,@NONEMPLOYEEID INT,@DEDUCTIONID INT ,@SERIALNO INT;    
  DECLARE @PANREFERENCE VARCHAR(10)            
  SET @DEDUCTEEID = -1;       
  DECLARE @ISAPPLICABLE26 BIT,@ISAPPLICABLE27 BIT  , @ISAPPLICABLE27E BIT;              
    SET @ISAPPLICABLE26 =0; SET @ISAPPLICABLE27=0; SET @ISAPPLICABLE27E=0;              
   --IF PAN IS SELECTED AS PANAPLIED,PANINVALID,PANNOTAVBL THEN GETTING PANREFERENCE NUMBER                
  IF(@PAN = 'PANAPPLIED' OR @PAN = 'PANINVALID' OR @PAN = 'PANNOTAVBL')      
   BEGIN     
    SET @PANREFERENCE = 'NOPAN';           
    SET @PANREFERENCE = @PANREFERENCE + DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHID(@BRANCHID ,0)                
   END                
  ELSE                
   BEGIN     
    SET @PANREFERENCE = '';                
   END      
  IF(@FORMID = 2)                
   BEGIN     
    SET @ISAPPLICABLE26 = 1;                
   END                
  ELSE IF(@FORMID = 3)                
   BEGIN     
    SET @ISAPPLICABLE27 = 1;                
   END                
  ELSE IF(@FORMID = 4)              
   BEGIN     
  SET @ISAPPLICABLE27E = 1;               
  END               
  IF(@VALUE = 0)    
 BEGIN     
   IF EXISTS(SELECT NONEMPLOYEE.NONEMPLOYEEID FROM DEDUCTEE INNER JOIN NONEMPLOYEE ON DEDUCTEE.DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID                                        
         WHERE DEDUCTEE.BRANCHID = @BRANCHID AND NONEMPLOYEE.SERIALNO = @NONEMPLOYEESERIALNO)                
  BEGIN     
      SELECT @DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID,@NONEMPLOYEEID = NONEMPLOYEE.NONEMPLOYEEID     
      FROM DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID                                        
      WHERE NONEMPLOYEE.SERIALNO = @NONEMPLOYEESERIALNO AND DEDUCTEE.BRANCHID = @BRANCHID     
      UPDATE DEDUCTEE SET SALUTATION = @SALUTATION,NAME = @NAME,PAN = @PAN,PANREFERENCE = @PANREFERENCE,ADDRESS1 = @FLATDOORBLOCKNO,    
     ADDRESS2 = @NAMEOFBUILDING,ADDRESS3 = @STREETROADNAME,ADDRESS4 = @AREA,ADDRESS5 = @CITY,STATEID = @STATE,            
     PINCODE = @PINCODE,PHONENO = @PHONE,EMAILADDRESS = @EMAIL                 
       WHERE DEDUCTEEID = @DEDUCTEEID AND BRANCHID = @BRANCHID;     
      IF(@FORMID = 2 OR @FORMID = 3 OR @FORMID = 4)              
     BEGIN                
      UPDATE NONEMPLOYEE SET DEDUCTEECODE = @CODE,ISAPPLICABLE26 = @ISAPPLICABLE26, ISTRANSPORTER = @ISTRANSPORTER, ISAPPLICABLE27 =  @ISAPPLICABLE27,              
        ISAPPLICABLE27E=@ISAPPLICABLE27E ,ACCOUNTNUMBER = NULL , IFSCCODE = NULL, STATUS = NULL,CONTAXRATE = NULL, CONLIMIT = NULL,STREGNO=NULL, MAKETDSFROMFIRSTPAYMENT =0, BRANCHNAME = NULL, BANKNAME =NULL         
        WHERE NONEMPLOYEEID = @NONEMPLOYEEID AND DEDUCTEEID = @DEDUCTEEID AND SERIALNO = @NONEMPLOYEESERIALNO;                
       END              
     END         
 END     
  ELSE    
   BEGIN    
   IF EXISTS(SELECT NONEMPLOYEE.NONEMPLOYEEID FROM DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID                                        
        WHERE DEDUCTEE.BRANCHID = @BRANCHID AND DEDUCTEE.REFERENCENO = @CUSTID)                
  BEGIN     
     SELECT @DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID,@NONEMPLOYEEID = NONEMPLOYEE.NONEMPLOYEEID     
     FROM DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID    
     WHERE DEDUCTEE.REFERENCENO = @CUSTID AND DEDUCTEE.BRANCHID = @BRANCHID             
     IF(@CUSTID <> '')    
      BEGIN     
      UPDATE DEDUCTEE SET SALUTATION = @SALUTATION,NAME = @NAME,PAN = @PAN,PANREFERENCE = @PANREFERENCE,ADDRESS1 = @FLATDOORBLOCKNO,    
     ADDRESS2 = @NAMEOFBUILDING,ADDRESS3 = @STREETROADNAME,ADDRESS4 = @AREA,ADDRESS5 = @CITY,STATEID = @STATE,                
     PINCODE = @PINCODE,PHONENO = @PHONE,EMAILADDRESS = @EMAIL,REFERENCENO = @CUSTID                 
       WHERE DEDUCTEEID = @DEDUCTEEID AND BRANCHID = @BRANCHID;     
      END    
     ELSE    
      BEGIN     
     UPDATE DEDUCTEE SET SALUTATION = @SALUTATION,NAME = @NAME,PAN = @PAN,PANREFERENCE = @PANREFERENCE,ADDRESS1 = @FLATDOORBLOCKNO,    
     ADDRESS2 = @NAMEOFBUILDING,ADDRESS3 = @STREETROADNAME,ADDRESS4 = @AREA,ADDRESS5 = @CITY,STATEID = @STATE,                
     PINCODE = @PINCODE,PHONENO = @PHONE,EMAILADDRESS = @EMAIL        
       WHERE DEDUCTEEID = @DEDUCTEEID AND BRANCHID = @BRANCHID;     
      END          
     IF(@FORMID = 2 OR @FORMID = 3 OR @FORMID = 4)              
    BEGIN                
     UPDATE NONEMPLOYEE SET DEDUCTEECODE = @CODE,ISAPPLICABLE26 = @ISAPPLICABLE26, ISTRANSPORTER = @ISTRANSPORTER, ISAPPLICABLE27 =  @ISAPPLICABLE27,              
       ISAPPLICABLE27E=@ISAPPLICABLE27E ,ACCOUNTNUMBER = NULL , IFSCCODE = NULL, STATUS = NULL,CONTAXRATE = NULL, CONLIMIT = NULL,STREGNO=NULL, MAKETDSFROMFIRSTPAYMENT =0, BRANCHNAME = NULL, BANKNAME =NULL         
       WHERE NONEMPLOYEEID = @NONEMPLOYEEID AND DEDUCTEEID = @DEDUCTEEID AND SERIALNO = @NONEMPLOYEESERIALNO;                
    END              
   END         
   END      
   --NEW RECORD             
     IF(@DEDUCTEEID = -1 AND @CUSTID <> '' AND @VALUE = 1)    
   BEGIN      
   SELECT @NONEMPLOYEESERIALNO = ISNULL(MAX(SERIALNO),0) + 1 FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID       
    WHERE  D.BRANCHID = @BRANCHID;      
   END    
    IF(@DEDUCTEEID = -1)    
     BEGIN     
  INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS,ISEXCLUDED, REFERENCENO)                
  VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@FLATDOORBLOCKNO,@NAMEOFBUILDING,@STREETROADNAME,@AREA,@CITY,@STATE,@PINCODE,@PHONE,@EMAIL,0, @CUSTID)                     
  SET @DEDUCTEEID=SCOPE_IDENTITY();    
  IF(@FORMID = 2 OR @FORMID = 3 OR @FORMID = 4)    
     BEGIN                
    INSERT INTO NONEMPLOYEE(DEDUCTEEID,DEDUCTEECODE,SERIALNO,ISAPPLICABLE26,ISTRANSPORTER, ISAPPLICABLE27, ISAPPLICABLE27E)                 
    VALUES(@DEDUCTEEID,@CODE,@NONEMPLOYEESERIALNO,@ISAPPLICABLE26,@ISTRANSPORTER, @ISAPPLICABLE27, @ISAPPLICABLE27E)                  
     END               
     END                
   DECLARE @TOTALTAXRATE NUMERIC(7,4),@TOTALDEDUCTED NUMERIC(13,2)                
   SET @TOTALTAXRATE = ISNULL(@INCOMETAXRATE,0);                
   SET @TOTALTAXRATE = @TOTALTAXRATE + ((ISNULL(@SURCHARGERATE,0) / 100) * @TOTALTAXRATE);                
   SET @TOTALTAXRATE = @TOTALTAXRATE + ((ISNULL(@CESSRATE,0) / 100) * @TOTALTAXRATE);                
   SET @TOTALDEDUCTED = ISNULL(@INCOMETAXAMOUNT,0) + ISNULL(@CESSAMOUNT,0) + ISNULL(@SURCHARGE,0);                
   --STARTS DEDUCTION'S AND INSERTION                
  --IF SHOULDDELETE IS FLASE THEN ALL DEDUCTION RECORDS(I.E BASED ON BRANCHID,FORMID,QUARTER) ARE NOT DELETED BEFORE IMPORTING                
        --SO DEDUCTION UPDATION CAN BE UPDATION OR INSERTION                
        --SO DEDUCTION INSERTION IS ANOTHER STORED PROCEDURE USING COMMONLY                 
   IF(@SHOULDDELETE = 0)                
    BEGIN                
     IF((SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND SERIALNO = @DEDUCTIONSERIALNO) > 0)                
      BEGIN                
       --UPDATING THE EMPLOYEE DEDUCTION DETAILS                
       UPDATE DEDUCTIONDETAIL                 
          SET  DEDUCTEEPAN = @PAN,DEDUCTEEPANREF = @PANREFERENCE,SECTIONID = @SECTIONID,PAYMENTMADE = @AMOUNTOFPAYMENT,                
           PAYMENTDATE = @AMOUNTPAIDCREDITEDDATE,INCOMETAXRATE = ISNULL(@INCOMETAXRATE,0),INCOMETAX = ISNULL(@INCOMETAXAMOUNT,0),                
           SURCHARGERATE = ISNULL(@SURCHARGERATE,0),SURCHARGE = ISNULL(@SURCHARGE,0),EDUCATIONCESSRATE = ISNULL(@CESSRATE,0),                
           EDUCATIONCESS = ISNULL(@CESSAMOUNT,0),TOTALDEDUCTED = @TOTALDEDUCTED,DEDUCTEDDATE = @TAXDEDUCTEDDATE,TAXRATE = @TOTALTAXRATE,                
           ISBOOKENTRY = @ISBOOKENTRY,NONDEDREASON = @NONDEDUCTIONREASON,MODE = @MODE,ISGROSSINGUP = @ISGROUPINGUP,                
           ORGPAYMENTMADE=@AMOUNTOFPAYMENT, TOTALPURCHASEVALUE = @VALUEOFPURCHASE, CERTNO = @CERTNO,             
           ORGINCOMETAX=ISNULL(@INCOMETAXAMOUNT,0),ORGSURCHARGE=ISNULL(@SURCHARGE,0),ORGEDUCATIONCESS=ISNULL(@CESSAMOUNT,0)                
       WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND SERIALNO = @DEDUCTIONSERIALNO;                
      END                
     ELSE                
      BEGIN                
       EXECUTE USP_TDS_IMPORTFORM2627DEDUCTIONINSERTION @BRANCHID,@FORMID,@QUARTER,@DEDUCTEEID,@DEDUCTIONSERIALNO,@PAN,@PANREFERENCE,@SECTIONID,                
                    @AMOUNTOFPAYMENT,@VALUEOFPURCHASE,@AMOUNTPAIDCREDITEDDATE,@INCOMETAXRATE,@INCOMETAXAMOUNT,@SURCHARGERATE,                
                    @SURCHARGE,@CESSRATE,@CESSAMOUNT,@TOTALDEDUCTED,@TAXDEDUCTEDDATE,@TCSCERTDATE, @TOTALTAXRATE,@ISBOOKENTRY,                
                    @NONDEDUCTIONREASON,@MODE,@ENTRYTYPE,@ISGROUPINGUP            
      END                
    END                
    --SHOULD DELETE IS TRUE THEN ALLEXISTING DEDUCTIONS WERE DELETED (I.E BASED ON BRANCHID,FORMID,QUARTER)                
    --SO ONLY INSERTION WILL BE THERE INTO DEDUCTION TABLE                 
   ELSE                
    BEGIN                
            EXECUTE USP_TDS_IMPORTFORM2627DEDUCTIONINSERTION @BRANCHID,@FORMID,@QUARTER,@DEDUCTEEID,@DEDUCTIONSERIALNO,@PAN,@PANREFERENCE,@SECTIONID,                
                    @AMOUNTOFPAYMENT,@VALUEOFPURCHASE,@AMOUNTPAIDCREDITEDDATE,@INCOMETAXRATE,@INCOMETAXAMOUNT,@SURCHARGERATE,                
                    @SURCHARGE,@CESSRATE,@CESSAMOUNT,@TOTALDEDUCTED,@TAXDEDUCTEDDATE,@TCSCERTDATE, @TOTALTAXRATE,@ISBOOKENTRY,                
                    @NONDEDUCTIONREASON,@MODE,@ENTRYTYPE,@ISGROUPINGUP                
    END                
    SELECT @DEDUCTIONID = DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER                 
      AND SERIALNO = @DEDUCTIONSERIALNO;                
    --LINKING AND UNLINKING THE DEDUCTION BASED ON CONDITION                
    IF(@SHOULDLINK = 1)                
     BEGIN                
      DECLARE @CHALLANID INT                
      --UNLINKING THE DEDUCTIONS                
      IF(@CHALLANSERIALNO = -1)                
       BEGIN                
        DELETE FROM DEDCHALINK WHERE DEDUCTIONID = @DEDUCTIONID;                
       END                
      --LINKING DEDUCTIONS                
    ELSE                
       BEGIN                
        SELECT @CHALLANID = CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER        
         AND SERIALNO = @CHALLANSERIALNO;                
        DELETE FROM DEDCHALINK WHERE DEDUCTIONID = @DEDUCTIONID;                
        INSERT INTO DEDCHALINK(BRANCHID,CHALLANID,DEDUCTIONID) VALUES(@BRANCHID,@CHALLANID,@DEDUCTIONID)                
       END                
     END                
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTFORM2627DEDUCTIONINSERTION')
DROP PROCEDURE USP_TDS_IMPORTFORM2627DEDUCTIONINSERTION
GO
CREATE PROCEDURE [USP_TDS_IMPORTFORM2627DEDUCTIONINSERTION]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @DEDUCTEEID INT,
 @DEDUCTIONSERIALNO INT,
 @PAN VARCHAR(10),
 @PANREFERENCE VARCHAR(10),
 @SECTIONID INT,
 @AMOUNTOFPAYMENT NUMERIC(13,2),
 @VALUEOFPURCHASE NUMERIC(13,2) = NULL,
 @AMOUNTPAIDCREDITEDDATE SMALLDATETIME,
 @INCOMETAXRATE NUMERIC(5,3),
 @INCOMETAXAMOUNT NUMERIC(13,2),
 @SURCHARGERATE NUMERIC(5,3),
 @SURCHARGE NUMERIC(13,2),
 @CESSRATE NUMERIC(5,3),
 @CESSAMOUNT NUMERIC(13,2),
 @TOTALDEDUCTED NUMERIC(13,2),
 @TAXDEDUCTEDDATE SMALLDATETIME = NULL,
 @TCSCERTDATE SMALLDATETIME = NULL,
 @TOTALTAXRATE NUMERIC(7,4),
 @ISBOOKENTRY BIT,
 @NONDEDUCTIONREASON TINYINT,
 @MODE VARCHAR(1),
 @ENTRYTYPE INT,
 @ISGROUPINGUP BIT = NULL
AS
 BEGIN
  DECLARE @PARTPAYMENTID INT;
  SELECT @PARTPAYMENTID = ISNULL(MAX(PARTPAYMENTID),0) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
  INSERT INTO DEDUCTIONDETAIL(SERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEEID,SECTIONID,TOTALPURCHASEVALUE,PAYMENTMADE,PAYMENTDATE,INCOMETAXRATE,
         INCOMETAX,SURCHARGERATE,SURCHARGE,EDUCATIONCESSRATE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,TAXRATE,ISBOOKENTRY, CERTIFICATEDATE,
         NONDEDREASON,MODE,ISGROSSINGUP,ORGPAYMENTMADE,ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,PARTPAYMENTID, ENTRYTYPE)
       VALUES(@DEDUCTIONSERIALNO,@QUARTER,@BRANCHID,@FORMID,@DEDUCTEEID,@SECTIONID,@VALUEOFPURCHASE,@AMOUNTOFPAYMENT,@AMOUNTPAIDCREDITEDDATE,@INCOMETAXRATE,
         @INCOMETAXAMOUNT,@SURCHARGERATE,@SURCHARGE,@CESSRATE,@CESSAMOUNT,@TOTALDEDUCTED,@TAXDEDUCTEDDATE,@TOTALTAXRATE,@ISBOOKENTRY,@TCSCERTDATE,
         @NONDEDUCTIONREASON,@MODE,@ISGROUPINGUP,@AMOUNTOFPAYMENT,@INCOMETAXAMOUNT,@SURCHARGE,@CESSAMOUNT,@TOTALDEDUCTED,@PARTPAYMENTID + 1, @ENTRYTYPE)
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTFORMBULKDELETE')
DROP PROCEDURE USP_TDS_IMPORTFORMBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_IMPORTFORMBULKDELETE]
 @BRANCHID INT,
 @FORMID INT,
 @QUARTER INT,
 @ISIB BIT = 0
AS
 BEGIN
  DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN DEDUCTIONDETAIL AS DD ON DCL.DEDUCTIONID=DD.DEDUCTIONID
  WHERE  DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
  DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN CHALLANDETAIL AS CD ON DCL.CHALLANID=CD.CHALLANID
  WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER
  DELETE FROM FORM16A FROM FORM16A AS FORM INNER JOIN DEDUCTIONDETAIL AS DD ON FORM.DEDUCTIONID=DD.DEDUCTIONID
  WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
  DELETE FROM PARTPAYMENTDETAILS WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
  DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER;
  DELETE FROM CHALLANDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTFORMBULKDELETEPENSIONER')
DROP PROCEDURE USP_TDS_IMPORTFORMBULKDELETEPENSIONER
GO
CREATE PROCEDURE [USP_TDS_IMPORTFORMBULKDELETEPENSIONER]    
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT      
AS    
 BEGIN  
  SELECT CD.CHALLANID INTO #TEMP FROM CHALLANDETAIL CD WITH(NOLOCK) INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.CHALLANID=CD.CHALLANID    
  INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID  
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID  
  WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER AND D.EMPTYPE = 1-- DD.ENTRYTYPE = 5  
  DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN DEDUCTIONDETAIL AS DD ON DCL.DEDUCTIONID=DD.DEDUCTIONID    
  WHERE  DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND DD.ENTRYTYPE = 5   
  DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN CHALLANDETAIL AS CD ON DCL.CHALLANID=CD.CHALLANID    
  INNER JOIN DEDUCTIONDETAIL DD ON DD.DEDUCTIONID = DCL.DEDUCTIONID  
  INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID  
  WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER AND D.EMPTYPE = 1-- DD.ENTRYTYPE = 5  
  DELETE FROM FORM16A FROM FORM16A AS FORM INNER JOIN DEDUCTIONDETAIL AS DD ON FORM.DEDUCTIONID=DD.DEDUCTIONID    
  INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID  
  WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND D.EMPTYPE = 1-- DD.ENTRYTYPE = 5   
  DELETE FROM PARTPAYMENTDETAILS WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER    
  DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL DD   
  INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID   
  WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND D.EMPTYPE = 1--AND ENTRYTYPE = 5;    
  DELETE FROM CHALLANDETAIL FROM CHALLANDETAIL CD  
  INNER JOIN #TEMP T ON CD.CHALLANID = T.CHALLANID WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IMPORTSALARYDETAILS')
DROP PROCEDURE USP_TDS_IMPORTSALARYDETAILS
GO
CREATE PROCEDURE [USP_TDS_IMPORTSALARYDETAILS]
	@SALARYDETAILID INT,
	@DEDUCTEEID INT,
	@BRANCHID INT,
	@BASICSALARY NUMERIC(12,2),
	@TAXABLEALLOWANCE NUMERIC(12,2),
	@PERKACCUNFURNISHED NUMERIC(12,2),
	@PERKFURNISHEDVALUE NUMERIC(12,2),
	@COSTOFFURNITURE NUMERIC(12,2),
	@FURNITURERENTALS NUMERIC(12,2),
	@PERQVALUEOFFURNITURE  NUMERIC(12,2),
	@PERKFURNISHEDTOTAL NUMERIC(12,2),
	@RENTPAIDBYEMP NUMERIC(12,2),
	@VALUEOFPERQUISITES NUMERIC(12,2),
	@CONVEYANCE NUMERIC(12,2),
	@REMUNERATION NUMERIC(12,2),
	@TAXABLELTC NUMERIC(12,2),
	@OTHERBENEFITS NUMERIC(12,2),
	@PFINEXCESSOF12PERC NUMERIC(12,2),
	@EXCESSINTERESTCREDITED NUMERIC(12,2),
	@TOTALPERQUISITE NUMERIC(12,2),
	@TAXABLEPERQUISITES NUMERIC(12,2),
	@EXEMPTEDALLOWANCES NUMERIC(12,2),
	@GROSSSALARY NUMERIC(12,2),
	@DEDUCTIONUS16 NUMERIC(12,2),
	@INCOMEFROMSALARIES NUMERIC(12,2),
	@ISOTHERINCOMEDETAILSOPTED BIT,
	@SALARYFROMPREVEMP NUMERIC(12,2),
	@INCOMEFROMHOUSEPROPERTY NUMERIC(12,2),
	@INCOMEFROMBUSINESS NUMERIC(12,2),
	@CAPITALGAINS NUMERIC(12,2),
	@INCOMEFROMOTHERSOURCES NUMERIC(12,2),
	@OTHERINCOME NUMERIC(12,2),
	@GROSSTOTALINCOME NUMERIC(12,2),
	@TOTALDEDUNDERCHAPTERVIA NUMERIC(12,2),
	@TOTALTAXABLEINCOME NUMERIC(12,2),
	@TAXONTOTALINCOME NUMERIC(12,2),
	@SURCHARGE NUMERIC(12,2),
	@EDUCATIONCESS NUMERIC(12,2),
	@TOTALINCOMETAXPAYABLE NUMERIC(12,2),
	@RELIEFUS89 NUMERIC(12,2),
	@NETTAXPAYABLE NUMERIC(12,2),
	@TDSITDEDUCTED NUMERIC(12,2),
	@TDSSURCHARGEDEDUCTED NUMERIC(12,2),
	@EDUCESSDEDUCTED NUMERIC(12,2),
	@PREVEMPINCOMETAX NUMERIC(12,2),
	@PREVEMPSURCHARGE NUMERIC(12,2),
	@PREVEMPCESS NUMERIC(12,2),
	@MANUALINCOMETAX NUMERIC(12,2),
	@MANUALSURCHARGE NUMERIC(12,2),
	@MANUALCESS NUMERIC(12,2),
	@TOTALTDS NUMERIC(12,2),
	@TAXPAYABLE NUMERIC(12,2)
AS
	BEGIN
	    DECLARE @TOTALDEDUCTION NUMERIC(12,2);
	    SELECT @TOTALDEDUCTION=ISNULL(SUM(TOTALDEDUCTED),0) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID
	    SET  @TAXPAYABLE=@NETTAXPAYABLE-@TOTALDEDUCTION
	    SET @SALARYDETAILID=-1;
		SELECT @SALARYDETAILID=SALARYDETAILID FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID
		IF(@SALARYDETAILID = -1)
			BEGIN
				INSERT INTO SALARYDETAIL(DEDUCTEEID,BRANCHID,BASICSALARY,TAXABLEALLOWANCE,PERKACCUNFURNISHED,PERKFURNISHEDVALUE,COSTOFFURNITURE,
										 FURNITURERENTALS,PERQVALUEOFFURNITURE,PERKFURNISHEDTOTAL,RENTPAIDBYEMP,VALUEOFPERQUISITES,CONVEYANCE,REMUNERATION,
										 TAXABLELTC,OTHERBENEFITS,PFINEXCESSOF12PERC,EXCESSINTERESTCREDITED,TOTALPERQUISITE,TAXABLEPERQUISITES,EXEMPTEDALLOWANCES,
										 GROSSSALARY,DEDUCTIONUS16,INCOMEFROMSALARIES,ISOTHERINCOMEDETAILSOPTED,SALARYFROMPREVEMP,INCOMEFROMHOUSEPROPERTY,INCOMEFROMBUSINESS ,
										 CAPITALGAINS ,INCOMEFROMOTHERSOURCES,OTHERINCOME,GROSSTOTALINCOME,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,TAXONTOTALINCOME,SURCHARGE,
										 EDUCATIONCESS ,TOTALINCOMETAXPAYABLE,RELIEFUS89,NETTAXPAYABLE,TDSITDEDUCTED,TDSSURCHARGEDEDUCTED,EDUCESSDEDUCTED,PREVEMPINCOMETAX,
										 PREVEMPSURCHARGE,PREVEMPCESS,MANUALINCOMETAX,MANUALSURCHARGE,MANUALCESS,TOTALTDS,TAXPAYABLE)
								VALUES  (@DEDUCTEEID,@BRANCHID,@BASICSALARY,@TAXABLEALLOWANCE,@PERKACCUNFURNISHED,@PERKFURNISHEDVALUE,@COSTOFFURNITURE,
										 @FURNITURERENTALS,@PERQVALUEOFFURNITURE,@PERKFURNISHEDTOTAL,@RENTPAIDBYEMP,@VALUEOFPERQUISITES,@CONVEYANCE,@REMUNERATION ,
										 @TAXABLELTC,@OTHERBENEFITS,@PFINEXCESSOF12PERC,@EXCESSINTERESTCREDITED,@TOTALPERQUISITE,@TAXABLEPERQUISITES,@EXEMPTEDALLOWANCES ,
										 @GROSSSALARY,@DEDUCTIONUS16,@INCOMEFROMSALARIES,@ISOTHERINCOMEDETAILSOPTED,@SALARYFROMPREVEMP,@INCOMEFROMHOUSEPROPERTY,@INCOMEFROMBUSINESS ,
										 @CAPITALGAINS ,@INCOMEFROMOTHERSOURCES,@OTHERINCOME,@GROSSTOTALINCOME,@TOTALDEDUNDERCHAPTERVIA,@TOTALTAXABLEINCOME,@TAXONTOTALINCOME ,@SURCHARGE ,
										 @EDUCATIONCESS ,@TOTALINCOMETAXPAYABLE,@RELIEFUS89,@NETTAXPAYABLE,@TDSITDEDUCTED,@TDSSURCHARGEDEDUCTED,@EDUCESSDEDUCTED,@PREVEMPINCOMETAX,
										 @PREVEMPSURCHARGE,@PREVEMPCESS,@MANUALINCOMETAX,@MANUALSURCHARGE,@MANUALCESS,@TOTALTDS,@TAXPAYABLE);
				SET @SALARYDETAILID=SCOPE_IDENTITY();
			END
		ELSE
			BEGIN
				UPDATE SALARYDETAIL SET BASICSALARY=@BASICSALARY,TAXABLEALLOWANCE=@TAXABLEALLOWANCE,PERKACCUNFURNISHED=@PERKACCUNFURNISHED,
										 PERKFURNISHEDVALUE=@PERKFURNISHEDVALUE,COSTOFFURNITURE=@COSTOFFURNITURE,FURNITURERENTALS=@FURNITURERENTALS,
									     PERQVALUEOFFURNITURE=@PERQVALUEOFFURNITURE,PERKFURNISHEDTOTAL=@PERKFURNISHEDTOTAL,RENTPAIDBYEMP=@RENTPAIDBYEMP,
									     VALUEOFPERQUISITES=@VALUEOFPERQUISITES,CONVEYANCE=@CONVEYANCE,	REMUNERATION=@REMUNERATION,	TAXABLELTC=@TAXABLELTC,
										 OTHERBENEFITS=@OTHERBENEFITS,PFINEXCESSOF12PERC=@PFINEXCESSOF12PERC,EXCESSINTERESTCREDITED=@EXCESSINTERESTCREDITED,
									     TOTALPERQUISITE=@TOTALPERQUISITE,TAXABLEPERQUISITES=@TAXABLEPERQUISITES,EXEMPTEDALLOWANCES=@EXEMPTEDALLOWANCES,
									     GROSSSALARY=@GROSSSALARY,DEDUCTIONUS16=@DEDUCTIONUS16,INCOMEFROMSALARIES=@INCOMEFROMSALARIES,ISOTHERINCOMEDETAILSOPTED=@ISOTHERINCOMEDETAILSOPTED,
									     SALARYFROMPREVEMP=@SALARYFROMPREVEMP,INCOMEFROMHOUSEPROPERTY=@INCOMEFROMHOUSEPROPERTY,INCOMEFROMBUSINESS=@INCOMEFROMBUSINESS,
									     CAPITALGAINS=@CAPITALGAINS,INCOMEFROMOTHERSOURCES=@INCOMEFROMOTHERSOURCES,OTHERINCOME=@OTHERINCOME,GROSSTOTALINCOME=@GROSSTOTALINCOME,
									     TOTALDEDUNDERCHAPTERVIA=@TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME=@TOTALTAXABLEINCOME,TAXONTOTALINCOME=@TAXONTOTALINCOME,
									     SURCHARGE=@SURCHARGE,EDUCATIONCESS =@EDUCATIONCESS,TOTALINCOMETAXPAYABLE=@TOTALINCOMETAXPAYABLE,RELIEFUS89=@RELIEFUS89,NETTAXPAYABLE=@NETTAXPAYABLE,TDSITDEDUCTED=@TDSITDEDUCTED,
									     TDSSURCHARGEDEDUCTED=@TDSSURCHARGEDEDUCTED,EDUCESSDEDUCTED=@EDUCESSDEDUCTED,PREVEMPINCOMETAX=@PREVEMPINCOMETAX,PREVEMPSURCHARGE=@PREVEMPSURCHARGE,PREVEMPCESS=@PREVEMPCESS,
									     MANUALINCOMETAX=@MANUALINCOMETAX,MANUALSURCHARGE=@MANUALSURCHARGE,MANUALCESS=@MANUALCESS,TOTALTDS=@TOTALTDS,TAXPAYABLE=@TAXPAYABLE
				WHERE SALARYDETAILID=@SALARYDETAILID AND BRANCHID=@BRANCHID AND DEDUCTEEID=@DEDUCTEEID
			END
		SELECT @SALARYDETAILID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_INTERESTAMOUNTRECALCULATION')
DROP PROCEDURE USP_TDS_INTERESTAMOUNTRECALCULATION
GO
CREATE PROCEDURE USP_TDS_INTERESTAMOUNTRECALCULATION
@QUARTER INT
AS
BEGIN
	UPDATE DEDUCTIONDETAIL SET PAYMENTMADE = ((INCOMETAX / INCOMETAXRATE) * 100), ORGPAYMENTMADE = ((INCOMETAX / INCOMETAXRATE) * 100) 
	FROM DEDUCTIONDETAIL DD INNER JOIN COMPANYBRANCH CB ON DD.BRANCHID = CB.BRANCHID
	WHERE FORMID IN (2,3) AND SECTIONID IN (5,17) AND QUARTER = @QUARTER AND (((PAYMENTMADE / 100) * INCOMETAXRATE ) > INCOMETAX) AND INCOMETAXRATE <> 0 
	UPDATE DEDUCTIONDETAIL SET PAYMENTMADE = ((INCOMETAX / INCOMETAXRATE) * 100), ORGPAYMENTMADE = ((INCOMETAX / INCOMETAXRATE) * 100) 
	FROM DEDUCTIONDETAIL DD INNER JOIN COMPANYBRANCH CB ON DD.BRANCHID = CB.BRANCHID
	WHERE FORMID IN (2,3) AND SECTIONID IN (5,17) AND QUARTER = @QUARTER AND ((INCOMETAX - ((PAYMENTMADE / 100) * INCOMETAXRATE)) > 10) AND INCOMETAXRATE <> 0 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IsAutoGeneratedChallan')
DROP PROCEDURE USP_TDS_IsAutoGeneratedChallan
GO
CREATE PROCEDURE [USP_TDS_IsAutoGeneratedChallan]    
@CHALLANID VARCHAR(100)=NULL,    
@QUARTER INT =NULL  ,  
@BRANCHID INT=NULL  
AS    
BEGIN   
  DECLARE @SQLQUERY NVARCHAR(MAX)    
     IF(@CHALLANID IS NOT NULL)    
  SET @SQLQUERY='SELECT COUNT(CHALLANID) FROM CHALLANDETAIL WHERE ISAUTOGENERATED=1 AND CHALLANID IN ('+CAST(@CHALLANID AS VARCHAR) +')'   
     ELSE IF(@QUARTER IS NOT NULL)  
  SET @SQLQUERY='SELECT COUNT(CHALLANID) FROM CHALLANDETAIL WHERE QUARTER='+CAST(@QUARTER AS VARCHAR)+' AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND ISAUTOGENERATED=1'   
     ELSE   
      SET @SQLQUERY='SELECT COUNT(CHALLANID) FROM CHALLANDETAIL WHERE  ISAUTOGENERATED=1 AND BRANCHID='+CAST(@BRANCHID AS VARCHAR)  
      EXEC SP_EXECUTESQL @SQLQUERY  
     --PRINT @SQLQUERY   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISAUTOGENERATEDDEDUCTION')
DROP PROCEDURE USP_TDS_ISAUTOGENERATEDDEDUCTION
GO
CREATE PROCEDURE [USP_TDS_ISAUTOGENERATEDDEDUCTION]
@DEDUCTIONID VARCHAR(MAX)=NULL ,
@QUARTER INT=NULL ,
@BRANCHID INT=NULL
AS
BEGIN
 DECLARE @SQLQUERY NVARCHAR(MAX)
 SET @SQLQUERY='SELECT COUNT(DCL.DEDUCTIONID) FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
             INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON DCL.CHALLANID=CD.CHALLANID
              WHERE CD.ISAUTOGENERATED=1 AND DD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+''
 IF(@QUARTER IS NOT NULL)
  SET @SQLQUERY=@SQLQUERY+ 'AND DD.QUARTER='+CAST(@QUARTER AS VARCHAR)
 IF(@DEDUCTIONID IS NOT NULL)
  SET @SQLQUERY=@SQLQUERY+ 'AND DD.DEDUCTIONID IN ('+CAST(@DEDUCTIONID AS VARCHAR(MAX)) +')'
 EXEC SP_EXECUTESQL @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISBGLCODEUSED')
DROP PROCEDURE USP_TDS_ISBGLCODEUSED
GO
CREATE PROCEDURE [USP_TDS_ISBGLCODEUSED]
@BGLCODEID INT
AS
	BEGIN
		SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BGLCODEID = @BGLCODEID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISBRANCHEXIST')
DROP PROCEDURE USP_TDS_ISBRANCHEXIST
GO
CREATE PROCEDURE [USP_TDS_ISBRANCHEXIST]
@DATABASE VARCHAR(MAX),
@BRANCHID INT
AS
 BEGIN
	 DECLARE @QUERY NVARCHAR(MAX), @BRANCHCODE VARCHAR(6);
	SELECT @BRANCHCODE = BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE  BRANCHID = @BRANCHID
		SET @QUERY = 'SELECT COUNT(BRANCHID) FROM '+@DATABASE+'.DBO.COMPANYBRANCH
									WHERE BRANCHCODE = ' + CAST (@BRANCHCODE AS VARCHAR)
	EXEC SP_EXECUTESQL @QUERY;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISCERTINUSE')
DROP PROCEDURE USP_TDS_ISCERTINUSE
GO
CREATE PROCEDURE USP_TDS_ISCERTINUSE  
@CERTDETAILID INT  
AS  
 BEGIN  
  DECLARE @RETURNVALUE INT  
  SET @RETURNVALUE = 0  
  IF ((SELECT COUNT(DEDUCTIONID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE FORMID IN (2,3) AND CERTDETAILID = @CERTDETAILID) > 0)  
   BEGIN  
    SET @RETURNVALUE = -2  
   END  
  SELECT @RETURNVALUE  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISCERTNUMBEREXISTS')
DROP PROCEDURE USP_TDS_ISCERTNUMBEREXISTS
GO
CREATE PROCEDURE [dbo].[USP_TDS_ISCERTNUMBEREXISTS]
@CERTNO VARCHAR(10),
@CERTDETAILID INT,
@BRANCHID INT
AS
   BEGIN
	 DECLARE @RETURNVALUE INT;
	 SET @RETURNVALUE = 0
	 IF(LEFT(@CERTNO,1) <> 'G' AND LEFT(@CERTNO,1) <> 'H')
	 BEGIN
		 IF EXISTS(SELECT CERTDETAILID FROM CERTDETAIL WITH(NOLOCK) WHERE CERTNO = @CERTNO AND CERTDETAILID <> @CERTDETAILID)
			 BEGIN
				SET @RETURNVALUE = 1 
			 END   	    
	 END
	 ELSE
	 BEGIN
		IF EXISTS(SELECT CERTDETAILID FROM CERTDETAIL C WITH(NOLOCK)
			INNER JOIN DEDUCTEE D WITH(NOLOCK) 
			ON D.DEDUCTEEID = C.DEDUCTEEID 
			WHERE CERTNO = @CERTNO AND CERTDETAILID <> @CERTDETAILID AND BRANCHID = @BRANCHID)
			BEGIN
				SET @RETURNVALUE = 1 
			 END 
	 END
	 SELECT @RETURNVALUE
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IsChallanManualMatchingPending')
DROP PROCEDURE USP_TDS_IsChallanManualMatchingPending
GO
CREATE PROCEDURE [USP_TDS_IsChallanManualMatchingPending]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT COUNT(C.CHALLANSERIALNO) UNMATCHEDCOUNT
		FROM    CORRCHALLANDETAIL C LEFT JOIN CHALLANDETAIL O ON (C.MATCHEDID = O.CHALLANID OR C.CHALLANID = O.CHALLANID) AND C.FORMID = O.FORMID --AND C.QUARTER = O.QUARTER
									LEFT JOIN TAXSECTIONS TSC ON C.SECTIONID = TSC.SECTIONID
									LEFT JOIN TAXSECTIONS TSO ON O.SECTIONID = TSO.SECTIONID
		WHERE   C.BRANCHID = @BRANCHID AND C.FORMID = @FORMID AND C.QUARTER = @QUARTER AND C.CORRECTIONSTATUS <> 1  AND C.CORRECTIONSTATUS <> 5
							AND	C.ISNILCHALLAN = 'N' AND ((O.CHALLANID IS NULL OR O.CHALLANID = 0) AND  C.MATCHEDID IS NULL) AND C.CHALLANTOTAL > 0 AND ISNULL(ISONLINECHALLAN,0) = 0;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISCHECKER')
DROP PROCEDURE USP_TDS_ISCHECKER
GO
CREATE PROCEDURE [USP_TDS_ISCHECKER]
@USERID INT
AS
  BEGIN
	SELECT ISNULL(ISCHECKER,0) FROM USERMASTER WITH(NOLOCK) WHERE USERID = @USERID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IsCorrectSequence')
DROP PROCEDURE USP_TDS_IsCorrectSequence
GO
CREATE PROCEDURE [USP_TDS_IsCorrectSequence]
AS
	BEGIN
		DECLARE @ISCORRECT BIT, @POSITION INT;
		SELECT @POSITION = ORDINAL_POSITION FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME  ='DEDUCTIONDETAIL' AND COLUMN_NAME = 'BGLCODEID'
		IF(@POSITION = 40)
			SET @ISCORRECT = 1;
		ELSE
			SET @ISCORRECT = 0;
	SELECT @ISCORRECT;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISDATAEXISTS')
DROP PROCEDURE USP_TDS_ISDATAEXISTS
GO
CREATE PROCEDURE USP_TDS_ISDATAEXISTS 
@MONTHID INT  
AS  
   BEGIN    
  DECLARE @RETURNVALUE INT, @MAXMONTHID INT;  
  SET @RETURNVALUE = 0;
  SET @MAXMONTHID = 0;   
  IF(@MONTHID > 3 AND @MONTHID < 12)  
      BEGIN  
		  SELECT @RETURNVALUE = COUNT(SALDETAILID) FROM SALDETAIL WITH(NOLOCK)   
		  WHERE ISNULL(GROSSAMT1,0) > 0 AND  MONTHID >= @MONTHID + 1  
		  GROUP BY MONTHID       
       END  
     ELSE IF(@MONTHID = 12)  
       BEGIN  
		    SELECT @RETURNVALUE = COUNT(SALDETAILID) FROM SALDETAIL WITH(NOLOCK)   
		    WHERE ISNULL(GROSSAMT1,0) > 0 AND MONTHID IN (1,2,3)  
		    GROUP BY MONTHID       
       END   
     ELSE IF(@MONTHID >= 1 AND @MONTHID < 3)  
	    BEGIN  
			 SELECT @RETURNVALUE = COUNT(SALDETAILID) FROM SALDETAIL WITH(NOLOCK)   
			 WHERE ISNULL(GROSSAMT1,0) > 0 AND MONTHID > @MONTHID AND MONTHID <= 3  
			 GROUP BY MONTHID       
	    END   
        SELECT @MAXMONTHID = CASE WHEN MAX(MONTHID) = 13 THEN 1 WHEN MAX(MONTHID) = 14 THEN 2 WHEN MAX(MONTHID) = 15 THEN 3 ELSE MAX(MONTHID) END  FROM 
       (
		 SELECT CASE WHEN MONTHID = 1 THEN 13 WHEN MONTHID = 2 THEN 14 WHEN MONTHID = 3 THEN 15 ELSE MONTHID END AS MONTHID FROM SALDETAIL WITH(NOLOCK)   
		 WHERE ISNULL(GROSSAMT1,0) > 0 
		 GROUP BY MONTHID 
       )SD
       IF(@MONTHID > 0)
			SELECT CASE WHEN @RETURNVALUE > 0 THEN @MAXMONTHID ELSE 0 END
		ELSE
			SELECT @MAXMONTHID
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_IsDedManualMatchingPending')
DROP PROCEDURE USP_TDS_IsDedManualMatchingPending
GO
CREATE PROCEDURE [dbo].[USP_TDS_IsDedManualMatchingPending]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
	DECLARE @TABLENAME VARCHAR(30)
	IF(@FORMID=1)
		SET @TABLENAME='CORREMPLOYEE'
	ELSE
		SET @TABLENAME='CORRNONEMPLOYEE'
	UPDATE CORRDEDUCTIONDETAIL 
	SET CORRECTIONSTATUS = 5 
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
			AND DEDUCTIONID IS NULL AND CORRECTIONSTATUS = 2 AND MATCHEDID IS NULL
	DECLARE @SQL NVARCHAR(MAX)
	SET @SQL='SELECT CDD.DEDUCTIONID,CDD.CORRECTIONSTATUS
			  FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
					INNER JOIN 
						( 
							SELECT CNE.DEDUCTEESERIALNO,CNE.NAME,CNE.PAN 
							FROM [' + @TABLENAME + '] CNE WITH(NOLOCK)
								INNER JOIN 
									(
										SELECT DEDUCTEESERIALNO,MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS
										FROM [' + @TABLENAME + '] WITH(NOLOCK) 
										WHERE BRANCHID =' +CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' 
												+ CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + ' 
										GROUP BY DEDUCTEESERIALNO
									) UNE ON CNE.DEDUCTEESERIALNO = UNE.DEDUCTEESERIALNO 
											AND CNE.CORRECTIONSTATUS = UNE.CURRENTCORRECTIONSTATUS 
							WHERE CNE.BRANCHID = '+CAST(@BRANCHID AS VARCHAR) + ' AND CNE.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND CNE.QUARTER = ' +CAST(@QUARTER AS VARCHAR)+ '
						) AS D ON CDD.DEDUCTEESERIALNO = D.DEDUCTEESERIALNO
					LEFT JOIN TAXSECTIONS TS ON CDD.SECTIONID = TS.SECTIONID
					LEFT JOIN	
						(
							SELECT DD.DEDUCTIONID 
							FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
								INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID
								LEFT JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID
							WHERE  DD.BRANCHID =' +CAST(@BRANCHID AS VARCHAR) 
									+ ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) 
									+ ' AND DD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '
						) O ON (CDD.MATCHEDID = O.DEDUCTIONID OR CDD.DEDUCTIONID = O.DEDUCTIONID)
			  WHERE CDD.BRANCHID = ' +CAST(@BRANCHID AS VARCHAR) 
					+ ' AND CDD.FORMID = ' + CAST(@FORMID AS VARCHAR) 
					+ ' AND  CDD.QUARTER = ' + CAST(@QUARTER AS VARCHAR) 
					+ ' AND CDD.CORRECTIONSTATUS <> 1 
						AND CDD.CORRECTIONSTATUS <> 5
						AND ((O.DEDUCTIONID IS NULL OR O.DEDUCTIONID = 0) 
						AND  CDD.MATCHEDID IS NULL);'
        EXECUTE SP_EXECUTESQL @SQL              
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISDEDUCTIONAUTOGEN')
DROP PROCEDURE USP_TDS_ISDEDUCTIONAUTOGEN
GO
CREATE PROCEDURE [USP_TDS_ISDEDUCTIONAUTOGEN]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@PARTPAYMENTID INT
AS
BEGIN
	 SELECT COUNT(*) FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	 INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DCL.DEDUCTIONID=DD.DEDUCTIONID
	 INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID=DCL.CHALLANID
	 WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND DD.PARTPAYMENTID=@PARTPAYMENTID AND CD.ISAUTOGENERATED=1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISDEDUCTIONGREATERTHANCHALLANTOTAL')
DROP PROCEDURE USP_TDS_ISDEDUCTIONGREATERTHANCHALLANTOTAL
GO
CREATE PROCEDURE [USP_TDS_ISDEDUCTIONGREATERTHANCHALLANTOTAL]
 @BRANCHID INT ,  
 @FORMID INT,  
 @QUARTERID INT  
AS  
BEGIN  
  SELECT SUM(DD.TOTALDEDUCTED) DEDTOTAL,(SELECT INCOMETAX + SURCHARGE + EDUCATIONCESS FROM CHALLANDETAIL WHERE CHALLANID = CD.CHALLANID ) CHATOTAL
  INTO #TEMP 
  FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
  INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID AND DCL.BRANCHID=DD.BRANCHID  
  INNER JOIN  CHALLANDETAIL CD WITH(NOLOCK) ON DD.BRANCHID=CD.BRANCHID AND DCL.CHALLANID=CD.CHALLANID
  WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER = @QUARTERID  
  GROUP BY CD.CHALLANID  
  IF((SELECT COUNT(*) FROM #TEMP WHERE DEDTOTAL <> CHATOTAL) > 0)  
    BEGIN  
      SELECT  1;  
    END  
  ELSE  
    BEGIN  
      SELECT  0;  
    END  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISDEDUCTIONUSED')
DROP PROCEDURE USP_TDS_ISDEDUCTIONUSED
GO
CREATE PROCEDURE [USP_TDS_ISDEDUCTIONUSED]
@PARTPAYMENTID INT,
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
 BEGIN
  DECLARE @DEDUCTIONID INT;
  SELECT @DEDUCTIONID = DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
    SELECT CASE
         WHEN REFDEDUCTIONID IS NULL
          THEN 0
         ELSE
          CASE WHEN REFDEDUCTIONID IS NOT NULL  AND REFDEDUCTIONID > 0
             THEN 1
            ELSE
             0
          END
         END
      FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID = @DEDUCTIONID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISDEDUCTORAVAILABLE')
DROP PROCEDURE USP_TDS_ISDEDUCTORAVAILABLE
GO
CREATE PROCEDURE [USP_TDS_ISDEDUCTORAVAILABLE]
	    @BRANCHID INT
AS
	BEGIN
		SELECT DEDUCTOR.DEDUCTORID AS DEDUCTORID,DEDUCTOR.DEDUCTORNAME AS DEDUCTORNAME,DEDUCTOR.ADDRESS1 AS DADDRESS1,DEDUCTOR.ADDRESS2 AS DADDRESS2,
			   DEDUCTOR.ADDRESS3 AS DADDRESS3,DEDUCTOR.ADDRESS4 AS DADDRESS4,DEDUCTOR.ADDRESS5 AS DADDRESS5,
			   DEDUCTOR.STATEID AS DSTATEID,DEDUCTOR.ISADDRCHANGED AS DISADDRESSCHANGED,DEDUCTOR.FINANCIALYEAR,DEDUCTOR.[TAN] AS DTAN,DEDUCTOR.PAN AS DPAN,
			   DEDUCTOR.PINCODE AS DPINCODE,DEDUCTOR.EMAILADDRESS AS DEMAILADDRESS,DEDUCTOR.STDCODE AS DSTDCODE,DEDUCTOR.PHONENO AS DPHONENUMBER,
			   DEDUCTOR.ISRESIDENT AS DISRESIDENT,DEDUCTOR.ISTDSEXISTING AS DISTDSEXISTING,DEDUCTOR.FAXNO AS DFAXNUMBER,DEDUCTOR.RETURNTYPE AS RETURNTYPE,DEDUCTOR.ISAOAPPROVED AS DISAOAPPROVED,
			   DEDUCTOR.AOAPPROVALNUM AS DAOAPPROVALNUMBER,DEDUCTOR.AODESIGNATION AS DAODESIGNATION,DEDUCTOR.STATUSID AS STATUSID,
			   DEDUCTOR.DEDUCTORTYPEID AS DEDUTORTYPEID,DEDUCTOR.GOVTADDSTATEID AS GOVTADDSTATEID,DEDUCTOR.GOVTADDPAOCODE AS GOVTADDPAOCODE,DEDUCTOR.GOVTADDPAOREGNNO AS GOVTADDPAOREGNNO,
			   DEDUCTOR.GOVTADDDDOCODE AS GOVTADDDDOCODE,DEDUCTOR.GOVTADDDDOREGNNO AS GOVTADDDDOREGNNO,DEDUCTOR.GOVTADDMINISTRY AS GOVTADDMINISTRY,
			   DEDUCTOR.GOVTADDOTHERNAME AS GOVTADDOTHERNAME,RESPONSIBLEPERSON.PERSONID AS RPID,RESPONSIBLEPERSON.PERSONNAME AS RPNAME,
			   RESPONSIBLEPERSON.ADDRESS1 AS RPADDRESS1,RESPONSIBLEPERSON.ADDRESS2 AS RPADDRESS2,RESPONSIBLEPERSON.ADDRESS3 AS RPADDRESS3,
			   RESPONSIBLEPERSON.ADDRESS4 AS RPADDRESS4,RESPONSIBLEPERSON.ADDRESS5 AS RPADDRESS5,RESPONSIBLEPERSON.PINCODE AS RPPINCODE,
			   RESPONSIBLEPERSON.STATEID AS RPSTATEID,RESPONSIBLEPERSON.ISADDRCHANGED AS RPISADDRESSCHANGED,RESPONSIBLEPERSON.DESIGNATION AS RPDESIGNATION,RESPONSIBLEPERSON.EMAILADDRESS AS RPEMAILADDRESS,
			   RESPONSIBLEPERSON.STDCODE AS RPSTDCODE,RESPONSIBLEPERSON.PHONENO AS RPPHONENUMBER, RESPONSIBLEPERSON.MOBILENO AS RPMOBILENUMBER,RESPONSIBLEPERSON.FAXNO AS RPFAXNUMBER,RESPONSIBLEPERSON.GENDER AS RPGENDER,
			   RESPONSIBLEPERSON.FATHERNAME AS RPFATHERNAME,BRANCHDEDUCTORS.[QUARTER] AS [QUARTER],BRANCHDEDUCTORS.BRANCHID AS BRANCHID
		FROM   DEDUCTOR WITH(NOLOCK) INNER JOIN RESPONSIBLEPERSON WITH(NOLOCK) ON DEDUCTOR.DEDUCTORID=RESPONSIBLEPERSON.DEDUCTORID
						INNER JOIN BRANCHDEDUCTORS WITH(NOLOCK) ON DEDUCTOR.DEDUCTORID=BRANCHDEDUCTORS.DEDUCTORID WHERE BRANCHID=@BRANCHID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISDTFUSED')
DROP PROCEDURE USP_TDS_ISDTFUSED
GO
CREATE PROCEDURE [USP_TDS_ISDTFUSED]   
@SCALE INT  
AS  
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED  
IF(NOT EXISTS(SELECT S.SCALE FROM SCALE S WITH(NOLOCK) INNER JOIN EMPWORKMONTH EW WITH(NOLOCK)  
                        ON S.SCALE=EW.SCALE WHERE S.SCALE=@SCALE))  
   BEGIN     
      SELECT -1   
   END               
 ELSE  
       SELECT @SCALE
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISERETURNGENERATED')
DROP PROCEDURE USP_TDS_ISERETURNGENERATED
GO
CREATE PROCEDURE [USP_TDS_ISERETURNGENERATED]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		SELECT COUNT(ACKID) ACKID
		FROM   ACKNO WITH(NOLOCK)
		WHERE  BRANCHID = @BRANCHID AND FORMID =@FORMID AND QUARTER = @QUARTER  AND ISVALID = 1 AND LEN(ORGNUM) = 15;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISEXCLUDECHALLAN')
DROP PROCEDURE USP_TDS_ISEXCLUDECHALLAN
GO
CREATE PROCEDURE [USP_TDS_ISEXCLUDECHALLAN]
@USERID INT
AS
	BEGIN
		SELECT ISNULL(CB.NOCHALLANPAY, 0)NOCHALLANPAY FROM USERMASTER UM WITH(NOLOCK)
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON UM.BRANCHID = CB.BRANCHID
		WHERE UM.USERID = @USERID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISFLATFILEGENERATED')
DROP PROCEDURE USP_TDS_ISFLATFILEGENERATED
GO
CREATE PROCEDURE USP_TDS_ISFLATFILEGENERATED  -- USP_TDS_ISFLATFILEGENERATED 2,2,1,'2012-09-09'  
@BRANCHID INT,      
@FORMID INT,      
@QUARTER INT,      
@PAYMENTDATE SMALLDATETIME      
AS      
 BEGIN     
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED     
    SELECT ISNULL(DD.ORDERID,0) ORDERID INTO #TEMP  
     FROM DEDUCTIONDETAIL DD      
    INNER JOIN COMPANYBRANCH CB  ON CB.BRANCHID = DD.BRANCHID      
    INNER JOIN TDSRATE TR  ON TR.BGLCODEID = DD.BGLCODEID      
    INNER JOIN REPORTPAYMENT RP  ON RP.ID = DD.REPORTPAYMENTID      
    INNER JOIN      
    (      
   SELECT BRANCHNAME, BRANCHCODE, RP.BRANCHID, RP.ID FROM REPORTPAYMENT RP        
   INNER JOIN COMPANYBRANCH CB  ON CB.BRANCHID = RP.BRANCHID      
   WHERE RP.PARENTBRANCHID = @BRANCHID      
    )R      
    ON R.BRANCHID = RP.BRANCHID AND RP.ID = R.ID      
     WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.PAYMENTDATE = @PAYMENTDATE AND DD.QUARTER = @QUARTER AND    
           LEFT(TR.BGLCODE, 1)<>'1'     
  IF(1 = ANY(SELECT ORDERID FROM  #TEMP))  
 BEGIN  
  SELECT 1;  
 END  
 ELSE  
 BEGIN  
  SELECT 0;  
 END   
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISOLTASBLOCKED')
DROP PROCEDURE USP_TDS_ISOLTASBLOCKED
GO
CREATE PROCEDURE [USP_TDS_ISOLTASBLOCKED]
AS
BEGIN
	SELECT 0
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISPANMANUALMATCHINGPENDING')
DROP PROCEDURE USP_TDS_ISPANMANUALMATCHINGPENDING
GO
CREATE PROCEDURE [USP_TDS_ISPANMANUALMATCHINGPENDING]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		IF @FORMID = 1
			BEGIN
				SELECT COUNT(CE.DEDUCTEESERIALNO) UNMATCHEDCOUNT
				FROM   CORREMPLOYEE CE WITH(NOLOCK) LEFT JOIN DEDUCTEE O WITH(NOLOCK) ON (CE.MATCHEDID = O.DEDUCTEEID OR CE.DEDUCTEEID = O.DEDUCTEEID)
				WHERE  CE.BRANCHID = @BRANCHID AND CE.FORMID = @FORMID AND CE.QUARTER = @QUARTER AND CORRECTIONSTATUS = 3 AND ((O.DEDUCTEEID IS NULL OR O.DEDUCTEEID = 0) AND CE.MATCHEDID IS NULL);
			END
		ELSE
			BEGIN
				SELECT COUNT(CNE.DEDUCTEESERIALNO) UNMATCHEDCOUNT
				FROM   CORRNONEMPLOYEE CNE WITH(NOLOCK) LEFT JOIN DEDUCTEE O WITH(NOLOCK) ON (CNE.MATCHEDID = O.DEDUCTEEID OR CNE.DEDUCTEEID = O.DEDUCTEEID)
				WHERE  CNE.BRANCHID = @BRANCHID AND CNE.FORMID = @FORMID AND CNE.QUARTER = @QUARTER AND CORRECTIONSTATUS = 3 AND ((O.DEDUCTEEID IS NULL OR O.DEDUCTEEID = 0) AND CNE.MATCHEDID IS NULL);
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISPARTPAYMENTDETAILAVAILABLE')
DROP PROCEDURE USP_TDS_ISPARTPAYMENTDETAILAVAILABLE
GO
CREATE PROCEDURE [USP_TDS_ISPARTPAYMENTDETAILAVAILABLE]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@PARTPAYMENTID INT
AS
	BEGIN
		IF EXISTS(SELECT PARTDETAILID FROM PARTPAYMENTDETAILS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)
			BEGIN
				SELECT 1;
			END
		ELSE
			BEGIN
				SELECT 0;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISQUEUEIDEXIST')
DROP PROCEDURE USP_TDS_ISQUEUEIDEXIST
GO
CREATE PROCEDURE USP_TDS_ISQUEUEIDEXIST --6928,2,3,'47141'  
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,  
@QUEUEID VARCHAR(10)  
AS  
 BEGIN  
 DECLARE @RETURNVALUE INT;  
 SET @RETURNVALUE = 0;  
 IF(@QUEUEID <> '')  
  BEGIN  
  IF NOT EXISTS(SELECT ACKID FROM ACKNO WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND QUEUEID = @QUEUEID)  
    BEGIN  
   IF EXISTS(SELECT ACKID FROM ACKNO WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER)  
    BEGIN  
      UPDATE ACKNO SET QUEUEID = @QUEUEID  
      WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER  
    END  
   ELSE  
    BEGIN  
     INSERT INTO ACKNO (BRANCHID, FORMID, QUARTER, QUEUEID)  
     VALUES(@BRANCHID , @FORMID, @QUARTER, @QUEUEID)  
    END  
    END  
  ELSE  
    BEGIN   
   SET @RETURNVALUE = 1;  
    END  
  END  
  ELSE  
    BEGIN  
  UPDATE ACKNO SET QUEUEID = @QUEUEID  
   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER   
    END  
 SELECT @RETURNVALUE;     
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISRECORDEXIST')
DROP PROCEDURE USP_TDS_ISRECORDEXIST
GO
CREATE PROCEDURE [USP_TDS_ISRECORDEXIST]
@BRANCHID INT,
@ISEMPLOYEE BIT,
@ISNONEMPLOYEE BIT
AS
 BEGIN
			DECLARE @EMPCOUNT INT, @NONEMPCOUNT INT;
			SET @EMPCOUNT = 0;
			SET @NONEMPCOUNT= 0;
		 IF(@ISEMPLOYEE = 1)
			BEGIN
					SELECT @EMPCOUNT= ISNULL(COUNT(SERIALNO), 0) FROM DEDUCTEE D WITH(NOLOCK)
						INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
						INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID
						WHERE CB.BRANCHID = @BRANCHID
			END
		 IF(@ISNONEMPLOYEE = 1)
			BEGIN
						SELECT @EMPCOUNT= ISNULL(COUNT(SERIALNO), 0) FROM DEDUCTEE D WITH(NOLOCK)
						INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
						INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID
						WHERE CB.BRANCHID = @BRANCHID
			END
			SELECT @EMPCOUNT + @NONEMPCOUNT;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISTANALREADYEXISTS')
DROP PROCEDURE USP_TDS_ISTANALREADYEXISTS
GO
CREATE PROCEDURE USP_TDS_ISTANALREADYEXISTS
@TAN VARCHAR(10),
@BRANCHID INT
AS
  BEGIN
	 SELECT COUNT(DISTINCT BRANCHID) 
	  FROM DEDUCTOR DR WITH(NOLOCK)
	 INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DR.DEDUCTORID = BD.DEDUCTORID
	 WHERE TAN = @TAN AND BRANCHID <> @BRANCHID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ISTRANSFERVOUCHEREXISTINGINCHALLANS')
DROP PROCEDURE USP_TDS_ISTRANSFERVOUCHEREXISTINGINCHALLANS
GO
CREATE PROCEDURE [USP_TDS_ISTRANSFERVOUCHEREXISTINGINCHALLANS]
	@BRANCHID INT
AS
	BEGIN
		IF EXISTS(SELECT CHALLANID FROM CHALLANDETAIL WHERE BRANCHID = @BRANCHID AND MODEOFPAYMENT = 3)
			BEGIN
				SELECT 1; /* CHALLAN(S) WITH TRANSFER VOUCHER EXISTS */
			END
		ELSE
			BEGIN
				SELECT 0; /* CHALLAN(S) WITH TRANSFER VOUCHER DOES NOT EXIST */
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_LINKBULKCHALLAN')
DROP PROCEDURE USP_TDS_LINKBULKCHALLAN
GO
CREATE PROCEDURE [USP_TDS_LINKBULKCHALLAN]
    @FORMID INT,
    @QUARTER INT,
	@CHALLANID INT,
	@SECTIONID INT,
	@BRANCHID INT,
	@DEDUCTEEIDCODE INT,
	@HASPARTPAYMENT INT
AS
BEGIN
	/*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/
	INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID)
	SELECT DD.DEDUCTIONID,@CHALLANID AS CHALLANID,@BRANCHID
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID
	LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID
	LEFT JOIN DEDCHALINK CD WITH(NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID
	WHERE DD.BRANCHID=@BRANCHID AND DD.QUARTER=@QUARTER AND TOTALDEDUCTED>0 AND  SECTIONID=@SECTIONID AND (NE.DEDUCTEECODE=@DEDUCTEEIDCODE OR @FORMID = 1) AND CD.DEDCHALINKID IS NULL
	IF(@HASPARTPAYMENT = 1)
	BEGIN
		CREATE TABLE #TEMP(TEMPID INT IDENTITY,PARTDETAILID INT,PARTPAYMENTID INT,BRANCHID INT,FORMID INT,[QUARTER] INT,PAYMENTMADE INT,INCOMETAX INT,EDUCATIONCESS INT,SURCHARGE INT,TOTALDEDUCTED INT,SECTIONID INT,DEDUCTEECODE INT)
		INSERT INTO #TEMP(PARTDETAILID,PARTPAYMENTID,BRANCHID,FORMID,[QUARTER],PAYMENTMADE,INCOMETAX,EDUCATIONCESS,
				SURCHARGE,TOTALDEDUCTED,SECTIONID,DEDUCTEECODE)
		SELECT DISTINCT PPD.PARTDETAILID,PPD.PARTPAYMENTID,PPD.BRANCHID,PPD.FORMID,PPD.QUARTER,PPD.REMPAYMENTMADE,PPD.REMINCOMETAX,
				PPD.REMEDUCATIONCESS,PPD.REMSURCHARGE,PPD.REMTOTALDEDUCTED,DD.SECTIONID,ISNULL(NE.DEDUCTEECODE,1) DEDUCTEECODE
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN PARTPAYMENTDETAILS PPD WITH(NOLOCK) ON DD.BRANCHID = PPD.BRANCHID AND DD.FORMID = PPD.FORMID AND DD.QUARTER = PPD.QUARTER AND DD.PARTPAYMENTID = PPD.PARTPAYMENTID
		LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
		LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND SECTIONID = @SECTIONID AND (DEDUCTEECODE = @DEDUCTEEIDCODE OR @FORMID = 1)
		DECLARE @DEDUCTIONID INT
		DECLARE @PARTPAYMENTID INT
		DECLARE @LOOPCONTROL INT
		SET @LOOPCONTROL = 1
		DECLARE @MAXTEMPID INT
		SELECT @MAXTEMPID = MAX(TEMPID)
		FROM #TEMP
		WHILE @LOOPCONTROL <= @MAXTEMPID
		BEGIN
			SELECT @PARTPAYMENTID = PARTPAYMENTID FROM #TEMP WHERE TEMPID=@LOOPCONTROL
			DECLARE @SERIALNO INT
			SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)+1 FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
			INSERT INTO DEDUCTIONDETAIL(SERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,DEDUCTEEPAN,LASTDEDUCTEEPAN,DEDUCTEEPANREF,LASTDEDUCTEEPANREF,INCOMETAX,SURCHARGE,
                                        EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,TAXRATE,NONDEDREASON,
                                        ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,ISTAXINFOEDITABLE,ORGPAYMENTMADE,ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,
                                        ORGTOTALDEDUCTED,PARTPAYMENTID)
			SELECT TOP 1 @SERIALNO,DD.QUARTER, DD.BRANCHID, DD.FORMID,DD.DEDUCTEEID,DD.ERETURNID,DD.MODE,DD.DEDUCTEEPAN,DD.LASTDEDUCTEEPAN,DD.DEDUCTEEPANREF,
										DD.LASTDEDUCTEEPAN,T.INCOMETAX,T.SURCHARGE,T.EDUCATIONCESS,T.TOTALDEDUCTED,T.PAYMENTMADE,DD.PAYMENTDATE,
										DD.DEDUCTEDDATE,T.SECTIONID,DD.INCOMETAXRATE,DD.SURCHARGERATE,DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.NONDEDREASON,
										DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,DD.ISTAXINFOEDITABLE,DD.ORGPAYMENTMADE,DD.ORGINCOMETAX,
										DD.ORGSURCHARGE,DD.ORGEDUCATIONCESS,DD.ORGTOTALDEDUCTED,DD.PARTPAYMENTID
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #TEMP T ON T.BRANCHID=DD.BRANCHID AND T.FORMID= DD.FORMID AND T.QUARTER=DD.QUARTER AND T.PARTPAYMENTID= DD.PARTPAYMENTID
			WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND DD.PARTPAYMENTID = @PARTPAYMENTID
			SET @DEDUCTIONID = SCOPE_IDENTITY();
			INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID)
			VALUES(@DEDUCTIONID,@CHALLANID,@BRANCHID)
			EXECUTE USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID
			SET @LOOPCONTROL = @LOOPCONTROL + 1
		END
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_LINKBULKCHALLANMONTHWISE')
DROP PROCEDURE USP_TDS_LINKBULKCHALLANMONTHWISE
GO
CREATE PROCEDURE [USP_TDS_LINKBULKCHALLANMONTHWISE]
	@CHALLANID INT,
	@SECTIONID INT,
	@BRANCHID INT,
	@DEDUCTEEIDCODE INT,
	@HASPARTPAYMENT INT,
	@MONTH INT
AS
BEGIN
 DECLARE @FORMID INT
     SELECT @FORMID= FORMID FROM TAXSECTIONS WITH(NOLOCK) WHERE SECTIONID=@SECTIONID
	/*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/
	INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID)
	SELECT DD.DEDUCTIONID,@CHALLANID AS CHALLANID,@BRANCHID
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID
	LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID
	LEFT JOIN DEDCHALINK CD WITH(NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID
	WHERE DD.BRANCHID=@BRANCHID AND TOTALDEDUCTED>0 AND  SECTIONID=@SECTIONID AND MONTH(DD.DEDUCTEDDATE)=@MONTH AND (NE.DEDUCTEECODE=@DEDUCTEEIDCODE OR @FORMID = 1) AND CD.DEDCHALINKID IS NULL
	IF(@HASPARTPAYMENT = 1)
	BEGIN
		CREATE TABLE #TEMP(TEMPID INT IDENTITY,PARTDETAILID INT,PARTPAYMENTID INT,BRANCHID INT,FORMID INT,[QUARTER] INT,PAYMENTMADE INT,INCOMETAX INT,EDUCATIONCESS INT,SURCHARGE INT,TOTALDEDUCTED INT,SECTIONID INT,DEDUCTEECODE INT)
		INSERT INTO #TEMP(PARTDETAILID,PARTPAYMENTID,BRANCHID,FORMID,[QUARTER],PAYMENTMADE,INCOMETAX,EDUCATIONCESS,
				SURCHARGE,TOTALDEDUCTED,SECTIONID,DEDUCTEECODE)
		SELECT DISTINCT PPD.PARTDETAILID,PPD.PARTPAYMENTID,PPD.BRANCHID,PPD.FORMID,PPD.QUARTER,PPD.REMPAYMENTMADE,PPD.REMINCOMETAX,
				PPD.REMEDUCATIONCESS,PPD.REMSURCHARGE,PPD.REMTOTALDEDUCTED,DD.SECTIONID,ISNULL(NE.DEDUCTEECODE,1) DEDUCTEECODE
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN PARTPAYMENTDETAILS PPD WITH(NOLOCK) ON DD.BRANCHID = PPD.BRANCHID AND DD.FORMID = PPD.FORMID AND DD.QUARTER = PPD.QUARTER AND DD.PARTPAYMENTID = PPD.PARTPAYMENTID
		LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
		LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE DD.BRANCHID = @BRANCHID AND SECTIONID = @SECTIONID AND (DEDUCTEECODE = @DEDUCTEEIDCODE)
		DECLARE @DEDUCTIONID INT
		DECLARE @PARTPAYMENTID INT
		DECLARE @LOOPCONTROL INT
		SET @LOOPCONTROL = 1
		DECLARE @MAXTEMPID INT
		SELECT @MAXTEMPID = MAX(TEMPID)
		FROM #TEMP
		WHILE @LOOPCONTROL <= @MAXTEMPID
		BEGIN
			SELECT @PARTPAYMENTID = PARTPAYMENTID FROM #TEMP WHERE TEMPID=@LOOPCONTROL
			DECLARE @SERIALNO INT
			SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)+1 FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID
			INSERT INTO DEDUCTIONDETAIL(SERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,DEDUCTEEPAN,LASTDEDUCTEEPAN,DEDUCTEEPANREF,LASTDEDUCTEEPANREF,INCOMETAX,SURCHARGE,
                                        EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,TAXRATE,NONDEDREASON,
                                        ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,ISTAXINFOEDITABLE,ORGPAYMENTMADE,ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,
                                        ORGTOTALDEDUCTED,PARTPAYMENTID)
			SELECT TOP 1 @SERIALNO,DD.QUARTER, DD.BRANCHID, DD.FORMID,DD.DEDUCTEEID,DD.ERETURNID,DD.MODE,DD.DEDUCTEEPAN,DD.LASTDEDUCTEEPAN,DD.DEDUCTEEPANREF,
										DD.LASTDEDUCTEEPAN,T.INCOMETAX,T.SURCHARGE,T.EDUCATIONCESS,T.TOTALDEDUCTED,T.PAYMENTMADE,DD.PAYMENTDATE,
										DD.DEDUCTEDDATE,T.SECTIONID,DD.INCOMETAXRATE,DD.SURCHARGERATE,DD.EDUCATIONCESSRATE,DD.TAXRATE,DD.NONDEDREASON,
										DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,DD.ISTAXINFOEDITABLE,DD.ORGPAYMENTMADE,DD.ORGINCOMETAX,
										DD.ORGSURCHARGE,DD.ORGEDUCATIONCESS,DD.ORGTOTALDEDUCTED,DD.PARTPAYMENTID
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN #TEMP T ON T.BRANCHID=DD.BRANCHID AND T.FORMID= DD.FORMID AND T.QUARTER=DD.QUARTER AND T.PARTPAYMENTID= DD.PARTPAYMENTID
			WHERE DD.BRANCHID=@BRANCHID AND DD.PARTPAYMENTID = @PARTPAYMENTID
			SET @DEDUCTIONID = SCOPE_IDENTITY();
			INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID)
			VALUES(@DEDUCTIONID,@CHALLANID,@BRANCHID)
			EXECUTE USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@PARTPAYMENTID
			SET @LOOPCONTROL = @LOOPCONTROL + 1
		END
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_LINKDEDUCTIONSWITHCHALLAN')
DROP PROCEDURE USP_TDS_LINKDEDUCTIONSWITHCHALLAN
GO
CREATE PROCEDURE USP_TDS_LINKDEDUCTIONSWITHCHALLAN 
@BRANCHCODES NVARCHAR(MAX),
@CHALLANIDS NVARCHAR(MAX),
@QUARTER INT                    
AS                    
	 BEGIN
			DECLARE @ISDISABLED INT;
			IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[UTR_LINKTBL_U]'))
				BEGIN
					SET @ISDISABLED = (SELECT IS_DISABLED FROM SYS.TRIGGERS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[UTR_LINKTBL_U]'))
					IF( @ISDISABLED = 0)
						BEGIN
							DISABLE TRIGGER UTR_LINKTBL_U ON DEDCHALINK
						END
				END
			SELECT DISTINCT * INTO #BRANCHCODES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',') 
			SELECT DISTINCT * INTO #CHALLANIDS FROM DBO.UDF_TDS_SPLITSTRING(@CHALLANIDS,',') 
			SELECT BRANCHID 
			INTO #BRANCHES
			FROM COMPANYBRANCH CB WITH(NOLOCK) 
				INNER JOIN #BRANCHCODES BC ON BC.DATA = CB.BRANCHCODE
			DROP TABLE #BRANCHCODES
			SELECT DD.DEDUCTIONID, DD.BRANCHID, DD.FORMID, DD.TRANSACTIONSEQNO AS CHALLANID
			INTO #DEDDETAILS
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)              
			WHERE DD.QUARTER = @QUARTER  AND DD.ENTRYTYPE = 5 AND DD.FORMID IN (2,3) 
				AND DD.BRANCHID IN (SELECT BRANCHID FROM #BRANCHES WITH(NOLOCK))
				AND ISNULL(DD.TRANSACTIONSEQNO, '') <> ''       
			DROP TABLE #BRANCHES  
			SELECT DD.DEDUCTIONID, DD.BRANCHID, DD.FORMID, DD.CHALLANID 
			INTO #DEDTOBELINK 
			FROM #DEDDETAILS DD
			WHERE DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK))
			DROP TABLE #DEDDETAILS   
			SELECT CD.CHALLANID,CD.BRANCHID, CD.FORMID
			INTO #CHADETAILS  
			FROM CHALLANDETAIL CD WITH(NOLOCK)             
			WHERE CD.CHALLANID IN (SELECT DATA FROM #CHALLANIDS)             
			DROP TABLE #CHALLANIDS  
			INSERT INTO DEDCHALINK                    
			SELECT DD.DEDUCTIONID, CD.CHALLANID, DD.BRANCHID 
			FROM #DEDTOBELINK DD WITH(NOLOCK)
				INNER JOIN #CHADETAILS CD 
					ON DD.BRANCHID = CD.BRANCHID AND DD.FORMID = CD.FORMID AND DD.CHALLANID = CD.CHALLANID 
			UPDATE DEDUCTIONDETAIL 
			SET ENTRYTYPE = 4, TRANSACTIONSEQNO = NULL
			WHERE ENTRYTYPE = 5 AND DEDUCTIONID IN (SELECT DEDUCTIONID FROM #DEDTOBELINK)
			IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[UTR_LINKTBL_U]'))
				BEGIN
					SET @ISDISABLED = (SELECT IS_DISABLED FROM SYS.TRIGGERS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[UTR_LINKTBL_U]'))
					IF( @ISDISABLED = 1)
						BEGIN
							ENABLE TRIGGER UTR_LINKTBL_U ON DEDCHALINK
						END
				END
			DROP TABLE #DEDTOBELINK
			DROP TABLE #CHADETAILS
	 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_LINKEDDEDUCTIONS')
DROP PROCEDURE USP_TDS_LINKEDDEDUCTIONS
GO
CREATE PROCEDURE [dbo].[USP_TDS_LINKEDDEDUCTIONS]           
@BRANCHID INT,                    
@FORMID INT,                    
@QUARTER INT,
@ALLPAN NVARCHAR(MAX)                     
AS                    
	 BEGIN
			DECLARE @ISDISABLED INT;
			IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[UTR_LINKTBL_U]'))
				BEGIN
					SET @ISDISABLED = (SELECT IS_DISABLED FROM SYS.TRIGGERS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[UTR_LINKTBL_U]'))
					IF( @ISDISABLED = 0)
						BEGIN
							DISABLE TRIGGER UTR_LINKTBL_U ON DEDCHALINK
						END
				END
			SELECT DISTINCT * INTO #TEMP FROM DBO.UDF_TDS_SPLITSTRING(@ALLPAN,',')   
			SELECT ROW_NUMBER() OVER (ORDER BY DD.DEDUCTIONID) DEDROW,
			DD.DEDUCTIONID, DD.CHALLANERETURNID, DD.BRANCHID
			INTO #DEDDETAILS
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN #TEMP T ON T.DATA=DD.DEDUCTEEPAN                 
			WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER            
			DELETE DED 
			FROM DEDCHALINK DED
				INNER JOIN #DEDDETAILS DD 
					ON DD.DEDUCTIONID = DED.DEDUCTIONID AND DD.BRANCHID = DED.BRANCHID 
			SELECT CD.CHALLANID, CD.ERETURNID, CD.BRANCHID
			INTO #CHADETAILS  
			FROM CHALLANDETAIL CD WITH(NOLOCK)             
			WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.QUARTER = @QUARTER             
			INSERT INTO DEDCHALINK                    
			SELECT DD.DEDUCTIONID, CD.CHALLANID, DD.BRANCHID 
			FROM #DEDDETAILS DD WITH(NOLOCK)
				INNER JOIN #CHADETAILS CD 
					ON CD.ERETURNID = DD.CHALLANERETURNID 
							AND DD.BRANCHID = CD.BRANCHID          
			WHERE DD.BRANCHID = @BRANCHID 
			IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[UTR_LINKTBL_U]'))
				BEGIN
					SET @ISDISABLED = (SELECT IS_DISABLED FROM SYS.TRIGGERS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[UTR_LINKTBL_U]'))
					IF( @ISDISABLED = 1)
						BEGIN
							ENABLE TRIGGER UTR_LINKTBL_U ON DEDCHALINK
						END
				END
			DROP TABLE #DEDDETAILS
			DROP TABLE #CHADETAILS
	 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_LINKINGBGLCODETOZEROTDS')
DROP PROCEDURE USP_TDS_LINKINGBGLCODETOZEROTDS
GO
CREATE PROCEDURE [dbo].[USP_TDS_LINKINGBGLCODETOZEROTDS]
@QUARTER INT,
@BRANCHID INT
AS
	BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX);
	SET @SQLQUERY = '
		UPDATE DEDUCTIONDETAIL 
		SET BGLCODEID = TR.BGLCODEID
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
			INNER JOIN TDSRATE TR WITH(NOLOCK)
				ON TR.SECTIONID = DD.SECTIONID 
		WHERE DD.TOTALDEDUCTED = 0 
			AND ISNULL(DD.BGLCODEID,0) = 0 
			AND QUARTER = ' + CAST(@QUARTER AS VARCHAR(1))
	IF(@BRANCHID <> -1)
		BEGIN	
			SET @SQLQUERY = @SQLQUERY + ' AND BRANCHID = ' + CAST(@BRANCHID AS VARCHAR(50))
		END
	EXECUTE SP_EXECUTESQL @SQLQUERY
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_LINKINGUNLINKEDZEROTDS')
DROP PROCEDURE USP_TDS_LINKINGUNLINKEDZEROTDS
GO
CREATE PROCEDURE [dbo].[USP_TDS_LINKINGUNLINKEDZEROTDS]
@QUARTER INT,
@BRANCHID INT
AS
	BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX);
	SET @SQLQUERY = 'INSERT INTO DEDCHALINK
		SELECT DEDUCTIONID, C.CHALLANID ,T.BRANCHID FROM  
		(
			SELECT DD.BRANCHID,DD.DEDUCTIONID,CASE WHEN DD.SECTIONID IN (23,24) THEN 15 ELSE DD.SECTIONID END AS SECTIONID, DD.FORMID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
			WHERE TOTALDEDUCTED = 0 AND 
			NOT EXISTS 
			(
				SELECT DEDUCTIONID FROM DEDCHALINK DCL WITH(NOLOCK) WHERE DD.DEDUCTIONID = DCL.DEDUCTIONID 
			) AND QUARTER = '+CAST(@QUARTER AS VARCHAR(50)) 
		IF(@BRANCHID <> -1)
		BEGIN	
			SET @SQLQUERY = @SQLQUERY + ' AND BRANCHID = '+CAST(@BRANCHID AS VARCHAR(50))
		END
		SET @SQLQUERY = @SQLQUERY + '
		)T
		INNER JOIN 
		(
			SELECT BRANCHID, CHALLANID, SECTIONID, FORMID FROM
				( 
					SELECT BRANCHID, CHALLANID, SECTIONID, FORMID,ROW_NUMBER() OVER(PARTITION BY BRANCHID,SECTIONID ORDER BY ISNULL(ISAUTOGENERATED,0) DESC,CHALLANID DESC) ROWNO
					FROM CHALLANDETAIL 
					WHERE QUARTER = '+CAST(@QUARTER AS VARCHAR(50)) 
						IF(@BRANCHID <> -1)
						BEGIN
							SET @SQLQUERY = @SQLQUERY + ' AND BRANCHID = '+CAST(@BRANCHID AS VARCHAR(50)) 
						END
						SET @SQLQUERY = @SQLQUERY +	'
				)D WHERE ROWNO = 1 
		)C ON T.BRANCHID = C.BRANCHID AND T.SECTIONID = C.SECTIONID AND T.FORMID = C.FORMID'
	EXEC SP_EXECUTESQL @SQLQUERY;
	IF((SELECT COUNT(DD.DEDUCTIONID) FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
			WHERE TOTALDEDUCTED = 0 AND 
			NOT EXISTS 
			(
				SELECT DEDUCTIONID FROM DEDCHALINK DCL WITH(NOLOCK) WHERE DD.DEDUCTIONID = DCL.DEDUCTIONID 
			) AND QUARTER = @QUARTER) > 0)
			BEGIN
				SET @SQLQUERY = 'INSERT INTO DEDCHALINK
					SELECT DEDUCTIONID, C.CHALLANID ,T.BRANCHID FROM  
					(
					SELECT DD.BRANCHID,DD.DEDUCTIONID,CASE WHEN DD.SECTIONID IN (23,24) THEN 15 ELSE DD.SECTIONID END AS SECTIONID, DD.FORMID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
					WHERE TOTALDEDUCTED = 0 AND 
					NOT EXISTS 
					(
					SELECT DEDUCTIONID FROM DEDCHALINK DCL WITH(NOLOCK) WHERE DD.DEDUCTIONID = DCL.DEDUCTIONID 
					) AND QUARTER = '+CAST(@QUARTER AS VARCHAR(50)) 
				IF(@BRANCHID <> -1)
					BEGIN	
						SET @SQLQUERY = @SQLQUERY + ' AND BRANCHID = '+CAST(@BRANCHID AS VARCHAR(50))
					END
				SET @SQLQUERY = @SQLQUERY + '
				)T
				INNER JOIN 
				(
					SELECT BRANCHID, CHALLANID, SECTIONID, FORMID FROM
					( 
						SELECT BRANCHID, CHALLANID, SECTIONID, FORMID,ROW_NUMBER() OVER(PARTITION BY BRANCHID ORDER BY ISNULL(ISAUTOGENERATED,0) DESC,CHALLANID DESC) ROWNO
						FROM CHALLANDETAIL 
						WHERE QUARTER = '+CAST(@QUARTER AS VARCHAR(50)) 
							IF(@BRANCHID <> -1)
							BEGIN
								SET @SQLQUERY = @SQLQUERY + ' AND BRANCHID = '+CAST(@BRANCHID AS VARCHAR(50)) 
							END
							SET @SQLQUERY = @SQLQUERY +	'
					)D WHERE ROWNO = 1 
				)C ON T.BRANCHID = C.BRANCHID AND T.FORMID = C.FORMID'
				EXEC SP_EXECUTESQL @SQLQUERY;
			END
	--PRINT @SQLQUERY; 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_LOADRENTDETAILS')
DROP PROCEDURE USP_TDS_LOADRENTDETAILS
GO
CREATE PROCEDURE [USP_TDS_LOADRENTDETAILS]
@COMID INT,
@MONTHID INT
AS
 BEGIN
	SELECT GROSSAMT1, GROSSAMT2, EXEMPTAMT, ISNULL(ISMETRORESIDENT,0)ISMETRORESIDENT, RENTPAID FROM RENTDETAILS R WITH(NOLOCK)
	INNER JOIN SALDETAIL SD WITH(NOLOCK) ON SD.SALDETAILID = R.SALDETAILID
	WHERE COMID = @COMID AND MONTHID = @MONTHID AND SALARYHEADID = 3
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_LOCKUNLOCK')
DROP PROCEDURE USP_TDS_LOCKUNLOCK
GO
CREATE PROCEDURE [USP_TDS_LOCKUNLOCK]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN
SELECT COUNT(FLAG) FROM LOCKQUARTER WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND FLAG=1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_NONEMPLOYEEBULKDELETE')
DROP PROCEDURE USP_TDS_NONEMPLOYEEBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_NONEMPLOYEEBULKDELETE]
 @BRANCHID INT,
 @DEDUCTEEID INT = NULL ,
@ISQUARTERLOCKED BIT = 0,
@LOCKEDQUARTERS VARCHAR(50)  = ''
AS
 BEGIN
 DECLARE @SQLQUERY NVARCHAR(MAX);
 IF(@ISQUARTERLOCKED = 0)
  BEGIN
     IF (@DEDUCTEEID IS NULL)
      BEGIN
    /* DELETE FROM DEDCHALINK BASED ON BRANCHID */
    DELETE FROM DEDCHALINK FROM DEDCHALINK DCL INNER JOIN DEDUCTIONDETAIL DD ON DCL.DEDUCTIONID = DD.DEDUCTIONID
        INNER JOIN DEDUCTEE D ON DD.DEDUCTEEID = D.DEDUCTEEID
        INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID
    WHERE  DCL.BRANCHID = @BRANCHID;
    /* DELETE FROM PARTPAYMENTDETAILS BASED ON BRANCHID */
    DELETE FROM PARTPAYMENTDETAILS FROM PARTPAYMENTDETAILS WHERE BRANCHID = @BRANCHID;
    /* DELETE FROM FORM16A BASED ON BRANCHID */
    DELETE FROM FORM16A FROM FORM16A AS F16A INNER JOIN DEDUCTIONDETAIL AS DD ON F16A.DEDUCTIONID = DD.DEDUCTIONID
    WHERE  F16A.BRANCHID = @BRANCHID;
    /* DELETE FROM DEDUCTIONDETAIL */
    DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID IN (2,3,4);
    /* DELETE FROM NONEMPLOYEE */
    DELETE FROM NONEMPLOYEE FROM NONEMPLOYEE AS NE INNER JOIN DEDUCTEE AS D ON NE.DEDUCTEEID = D.DEDUCTEEID
    WHERE  D.BRANCHID = @BRANCHID;
    /* DELETE FROM DEDUCTEE */
    DELETE FROM DEDUCTEE WHERE BRANCHID = @BRANCHID AND DEDUCTEEID NOT IN (SELECT D.DEDUCTEEID
         FROM DEDUCTEE D INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID WHERE D.BRANCHID = @BRANCHID);
      /* DELETE FROM REPORTPAYMENT */
   DELETE FROM REPORTPAYMENT WHERE BRANCHID= @BRANCHID;
    END
     ELSE
      BEGIN
    /* DELETE FROM DEDCHALINK BASED ON BRANCHID & DEDUCTEEID */
    DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL INNER JOIN DEDUCTIONDETAIL AS DD ON DCL.DEDUCTIONID = DD.DEDUCTIONID
    WHERE  DCL.BRANCHID = @BRANCHID AND DD.DEDUCTEEID = @DEDUCTEEID;
    /* DELETE FROM PARTPAYMENTDETAILS BASED ON BRANCHID & DEDUCTEEID */
    DELETE FROM PARTPAYMENTDETAILS FROM PARTPAYMENTDETAILS PPD
    INNER JOIN DEDUCTIONDETAIL DD ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID
     AND PPD.BRANCHID  = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER
    WHERE  PPD.BRANCHID = @BRANCHID AND PPD.PARTPAYMENTID IN (SELECT PARTPAYMENTID FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID IN (2,3,4) AND DEDUCTIONID IN
		 (SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID IN (2,3,4) AND DEDUCTEEID = @DEDUCTEEID));
    /* DELETE FROM FORM16A BASED ON BRANCHID & DEDUCTEEID */
    DELETE FROM FORM16A FROM FORM16A AS F16A INNER JOIN DEDUCTIONDETAIL AS DD ON F16A.DEDUCTIONID = DD.DEDUCTIONID
    WHERE  F16A.BRANCHID = @BRANCHID AND DD.DEDUCTEEID = @DEDUCTEEID;
    /* DELETE FROM DEDUCTIONDETAIL BASED ON BRANCHID & DEDUCTEEID */
    DELETE FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID;
    /* DELETE FROM NONEMPLOYEE BASED ON BRANCHID & DEDUCTEEID */
    DELETE FROM NONEMPLOYEE WHERE DEDUCTEEID = @DEDUCTEEID;
    /* DELETE FROM DEDUCTEE BASED ON BRANCHID & DEDUCTEEID*/
    DELETE FROM DEDUCTEE WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID;
     /* DELETE FROM REPORTPAYMENT */
   DELETE FROM REPORTPAYMENT WHERE BRANCHID= @BRANCHID AND DEDUCTEEID = @DEDUCTEEID;
   END
      END
    ELSE
  BEGIN
SET @SQLQUERY= 'SELECT D.DEDUCTEEID
       INTO #NONEMPLOYEE
       FROM DEDUCTEE D WITH(NOLOCK)
       INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
       WHERE D.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + ' AND D.DEDUCTEEID NOT IN
       (
        SELECT DD.DEDUCTEEID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
        LEFT JOIN PARTPAYMENTDETAILS PDD WITH(NOLOCK)
        ON DD.BRANCHID = PDD.BRANCHID AND DD.FORMID = PDD.FORMID AND DD.QUARTER = DD.QUARTER AND DD.PARTPAYMENTID = PDD.PARTPAYMENTID
        WHERE DD.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + '  AND DD.FORMID IN(2,3,4) AND DD.QUARTER IN (' + CAST(@LOCKEDQUARTERS AS VARCHAR) + ')
       )'
   SET @SQLQUERY= @SQLQUERY + ';
    DELETE FROM DEDCHALINK FROM DEDCHALINK AS DCL 
    INNER JOIN DEDUCTIONDETAIL AS DD ON DCL.DEDUCTIONID = DD.DEDUCTIONID
    INNER JOIN #NONEMPLOYEE N ON N.DEDUCTEEID = DD.DEDUCTEEID
    WHERE  DCL.BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + ';
    DELETE FROM PARTPAYMENTDETAILS FROM PARTPAYMENTDETAILS PPD
    INNER JOIN DEDUCTIONDETAIL DD ON PPD.PARTPAYMENTID = DD.PARTPAYMENTID  AND PPD.BRANCHID  = DD.BRANCHID AND PPD.FORMID = DD.FORMID AND PPD.QUARTER = DD.QUARTER
    WHERE  PPD.BRANCHID =  '+ CAST(@BRANCHID AS VARCHAR) + ' AND PPD.PARTPAYMENTID IN
    (
   SELECT PARTPAYMENTID FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
   INNER JOIN #NONEMPLOYEE N ON N.DEDUCTEEID = DD.DEDUCTEEID
   WHERE BRANCHID = '+ CAST(@BRANCHID AS VARCHAR) + ' AND FORMID IN (2,3,4)
   );
   DELETE FROM FORM16A FROM FORM16A AS F16A
   INNER JOIN DEDUCTIONDETAIL AS DD ON F16A.DEDUCTIONID = DD.DEDUCTIONID
   INNER JOIN #NONEMPLOYEE N ON N.DEDUCTEEID = DD.DEDUCTEEID
    WHERE  F16A.BRANCHID =  '+ CAST(@BRANCHID AS VARCHAR) + ';
   DELETE FROM DEDUCTIONDETAIL FROM DEDUCTIONDETAIL AS DD
   INNER JOIN #NONEMPLOYEE N ON N.DEDUCTEEID = DD.DEDUCTEEID
   WHERE DD.BRANCHID =  '+ CAST(@BRANCHID AS VARCHAR) + ' AND FORMID IN (2,3,4);
    DELETE FROM NONEMPLOYEE FROM NONEMPLOYEE AS NE
    INNER JOIN #NONEMPLOYEE N ON N.DEDUCTEEID = NE.DEDUCTEEID;
     DELETE FROM DEDUCTEE FROM DEDUCTEE AS D
      INNER JOIN #NONEMPLOYEE N ON N.DEDUCTEEID = D.DEDUCTEEID
     WHERE BRANCHID = '+ CAST(@BRANCHID AS VARCHAR)+'
       DELETE FROM REPORTPAYMENT WHERE BRANCHID= @'+ CAST(@BRANCHID AS VARCHAR);
EXECUTE SP_EXECUTESQL @SQLQUERY;
  END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_NULLCHALLANEXIST')
DROP PROCEDURE USP_TDS_NULLCHALLANEXIST
GO
CREATE PROCEDURE [USP_TDS_NULLCHALLANEXIST]
@MONTH INT
AS
BEGIN
SELECT * FROM CHALLANDETAIL CD WITH(NOLOCK)
INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID=DCL.CHALLANID
INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
WHERE  CD.BANKCHALLANNO IS NULL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ONLINECHALLANDETAILS')
DROP PROCEDURE USP_TDS_ONLINECHALLANDETAILS
GO
CREATE PROCEDURE USP_TDS_ONLINECHALLANDETAILS
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@CHALLANSERIALNO INT,
@ISONLLINECHALLAN BIT
AS
	BEGIN
		UPDATE CORRCHALLANDETAIL SET ISONLINECHALLAN = @ISONLLINECHALLAN, MATCHEDID = NULL
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CHALLANSERIALNO = @CHALLANSERIALNO AND CORRECTIONSTATUS = 2
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_PaymentAndTDSReport')
DROP PROCEDURE USP_TDS_PaymentAndTDSReport
GO
CREATE PROCEDURE [USP_TDS_PaymentAndTDSReport]
@MONTH INT
AS
BEGIN
	SELECT CB.BRANCHCODE, CB.BRANCHNAME, PAID, DEDUCTED, 
		CASE WHEN T.FORMID = 1 THEN T.SECTIONNAME + '-' + T.TAXNAME ELSE
			CASE WHEN T.FORMID = 3 THEN T.SECTIONNAME ELSE
				CASE WHEN (T.FORMID = 2 AND T.SECTIONID IN (23, 24)) THEN T.SECTIONNAME + '-94I' ELSE T.SECTIONNAME + '-' + T.TAXNAME END 
			END
		END SECTION
	FROM
	(
		SELECT BRANCHID, SECTIONID, SUM(PAYMENTMADE) PAID, SUM(TOTALDEDUCTED) DEDUCTED
		FROM DEDUCTIONDETAIL WITH(NOLOCK)
		WHERE
			MONTH(PAYMENTDATE) = 10
			GROUP BY BRANCHID, SECTIONID
	) S
	INNER JOIN TAXSECTIONS T WITH(NOLOCK) ON S.SECTIONID = T.SECTIONID
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = S.BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_RecalculateNotTransferredEmployees')
DROP PROCEDURE USP_TDS_RecalculateNotTransferredEmployees
GO
CREATE PROCEDURE [USP_TDS_RecalculateNotTransferredEmployees]
 @comID INT,  
 @finYear INT  
AS  
BEGIN  
 DECLARE @deducteeID INT;  
 DECLARE @branchID INT;  
 DECLARE @basicSalary NUMERIC(13,2);  
 DECLARE @taxableAllowance NUMERIC(13,2)=0;  
 DECLARE @grossSalary NUMERIC(13,2);  
 SELECT @deducteeID = DEDUCTEEID,@branchID = BRANCHID FROM DEDUCTEE WITH(NOLOCK) WHERE DEDUCTEEID =  
 (  
  SELECT DEDUCTEEID FROM EMPLOYEE WITH(NOLOCK) WHERE EMPLOYEEID =  
  (  
   SELECT EMPLOYEEID FROM LINKTOTC WITH(NOLOCK) WHERE COMID = @comID  
  )  
 )  
 /*salary detail*/  
 SELECT SALDETAILID,MONTHID,COMID,SALARYHEADID,  
 GROSSAMT1,GROSSAMT2,GROSSAMT3,  
 EXEMPTAMT,NETAMT,[BASIC],  
 DA,HRA,EPF,RECOVERYAMT  
 INTO #SALDETAIL  
 FROM SALDETAIL WITH(NOLOCK) WHERE COMID = @comID  
 /*chapter VIA data*/  
 /*Chapter VIA data mannual entry*/  
 SELECT CEILING(CDET.GROSS) GROSS,CEILING(CDET.QUALIFYING) QUALIFYING,CDET.C80CID,CDET.ISORIGINAL   
 INTO #MANNUALENTRY  
 FROM CVIA80CDET CDET  
 INNER JOIN CHAPTERVIADET CVI  
 ON CVI.CHAPTERVIADETAILID=CDET.CHAPTERVIADETID  
 WHERE CVI.COMID=@comID AND ISNULL(GROSS,0) > 0  
 /*Configured 80C data with id*/  
 SELECT CEILING(SUM(SD.NETAMT)) GROSS,CEILING(SUM(SD.NETAMT)) QUALIFYING   
 INTO #C80CCONFIGUREDDATA  
 FROM #SALDETAIL SD   
 INNER JOIN SALARYHEAD SH WITH(NOLOCK)  
 ON SH.SALARYHEADID=SD.SALARYHEADID  
 WHERE SH.INCLUDEINTAX=1 AND ISNULL(SH.C80CID,-1)>0   
 /*Chapter VIA detail all including mannual entry summary(except payfile data) */  
 SELECT CVIAD.CHAPTERVIADETAILID,CVIAD.COMID,CVIAD.SALARYSECTIONID,  
 CVIAD.GROSSAMOUNT,CVIAD.QUALIFYINGAMOUNT,  
 CVIAD.DEDUCTIBLEAMOUNT,  
 CONDI,ISSELF   
 INTO #CHAPTERVIADET  
 FROM CHAPTERVIADET CVIAD WITH(NOLOCK)   
 WHERE COMID=@comID  
 DECLARE @GROSS INT;  
 DECLARE @QUALIFYING INT;  
 DECLARE @CHAPTERVIADETAILID INT;
 DECLARE @CHKCHAPTERVIADETAILID INT;  
 DECLARE @SALARYDETAILID INT;  
 SELECT @GROSS = GROSS, @QUALIFYING = QUALIFYING FROM #C80CCONFIGUREDDATA  
 SELECT @CHAPTERVIADETAILID = CVIA.CHAPTERVIADETAILID   
 FROM SALARYDETAIL SD WITH(NOLOCK) INNER JOIN  
  CHAPTERVIADETAIL CVIA WITH(NOLOCK) ON SD.SALARYDETAILID = CVIA.SALARYDETAILID  
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON  SD.DEDUCTEEID = D.DEDUCTEEID  
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID  
  INNER JOIN LINKTOTC LC WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID  
  WHERE LC.COMID = @comID AND CVIA.SALARYSECTIONID = 3
 SELECT @CHKCHAPTERVIADETAILID = CHAPTERVIADETAILID FROM #CHAPTERVIADET WHERE SALARYSECTIONID = 3  
 IF(@CHKCHAPTERVIADETAILID IS NULL)
 BEGIN  
	SET IDENTITY_INSERT #CHAPTERVIADET ON
	INSERT INTO #CHAPTERVIADET (CHAPTERVIADETAILID, COMID, SALARYSECTIONID, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT, GROSSAMOUNT)  
			VALUES (@CHAPTERVIADETAILID ,@comID, 3, @QUALIFYING, @QUALIFYING, @GROSS)
	SET IDENTITY_INSERT #CHAPTERVIADET OFF  
 END
 /*Get final table to be updated in CHAPTERVIADETAIL */  
 UPDATE #CHAPTERVIADET   
 SET QUALIFYINGAMOUNT = ISNULL((SELECT SUM(QUALIFYING) FROM #MANNUALENTRY),0) +  
         ISNULL((SELECT SUM(QUALIFYING) FROM #C80CCONFIGUREDDATA),0),  
  DEDUCTIBLEAMOUNT = ISNULL((SELECT SUM(QUALIFYING) FROM #MANNUALENTRY),0) +  
         ISNULL((SELECT SUM(QUALIFYING) FROM #C80CCONFIGUREDDATA),0),  
  GROSSAMOUNT = ISNULL((SELECT SUM(GROSS) FROM #MANNUALENTRY),0) +  
       ISNULL((SELECT SUM(GROSS) FROM #C80CCONFIGUREDDATA),0)  
 WHERE SALARYSECTIONID = 3  
 /*Other income*/  
 SELECT ISNULL(PREVEMP,0) PREVEMP,  
 ISNULL(HOUSEPROL,0) HOUSEPROL,ISNULL(HOUSEPROS,0) HOUSEPROS,  
 ISNULL(INTERESTONSB,0) INTERESTONSB,ISNULL(LGAIN,0) LGAIN,ISNULL(SGAIN,0) SGAIN,  
 ISNULL(BUSSINESSPROF,0) BUSSINESSPROF  
 INTO #OTHER1  
 FROM OTHERINCOME WHERE COMID = @comID  
 SELECT ISNULL(OS.AMOUNT,0) - ISNULL(OS.EXEMPTAMT,0) INCOMEFROMOTHERSOURCES,  
 ISNULL(OI.HOUSEPROL,0) + ISNULL(OI.HOUSEPROS,0) AS INCOMEFROMHOUSEPROPERTY,     
 ISNULL(OI.LGAIN,0) + ISNULL(OI.SGAIN,0) AS CAPITALGAINS,  
 OI.BUSSINESSPROF,OI.INTERESTONSB  
 INTO #OTHERINCOME  
 FROM OTHERINCOMESOURCES OS  
 INNER JOIN OTHERINCOME OI  
 ON OI.OTHERINCOMEID = OS.OTHERINCOMEID  
 WHERE OI.COMID = @comID  
 IF(((SELECT COUNT(*) FROM #OTHERINCOME) = 0) AND (SELECT COUNT(*) FROM #OTHER1) > 0)  
 BEGIN  
  INSERT INTO #OTHERINCOME(INCOMEFROMOTHERSOURCES,INCOMEFROMHOUSEPROPERTY,INTERESTONSB,CAPITALGAINS,BUSSINESSPROF)  
  VALUES(0,  
  (SELECT ISNULL(HOUSEPROL,0) + ISNULL(HOUSEPROS,0) FROM #OTHER1),  
  (SELECT INTERESTONSB FROM #OTHER1),  
  (SELECT LGAIN+SGAIN FROM #OTHER1),  
  (SELECT BUSSINESSPROF FROM #OTHER1))  
 END  
 UPDATE SALARYDETAIL  
 SET INCOMEFROMHOUSEPROPERTY = ISNULL((SELECT SUM(INCOMEFROMHOUSEPROPERTY) FROM #OTHERINCOME),0),  
 CAPITALGAINS = ISNULL((SELECT SUM(CAPITALGAINS) FROM #OTHERINCOME),0),  
 INCOMEFROMOTHERSOURCES = ISNULL((SELECT SUM(INCOMEFROMOTHERSOURCES) FROM #OTHERINCOME),0),  
 OTHERINCOME = (  
     ISNULL((SELECT SUM(INCOMEFROMHOUSEPROPERTY) FROM #OTHERINCOME),0) +   
     ISNULL((SELECT SUM(CAPITALGAINS) FROM #OTHERINCOME),0) +   
     ISNULL((SELECT SUM(INCOMEFROMOTHERSOURCES) FROM #OTHERINCOME),0) +  
     ISNULL((SELECT SUM(INTERESTONSB) FROM #OTHERINCOME),0)  
      )  
 WHERE DEDUCTEEID = @deducteeID AND BRANCHID = @branchID  
 /*Section 16 data*/  
 SELECT   
 ISNULL((SUM(ISNULL((ISNULL(S16.GROSSAMT1,0) + ISNULL(S16.GROSSAMT2,0) - ISNULL(RECOVERYAMT,0)),0))),0)DEDUCTIONUS16 ,S16.SALARYSECTIONID  
 INTO #SECTION16DET  
 FROM SECTION16DET S16 WHERE COMID = @comID  
 GROUP BY S16.SALARYSECTIONID  
 /*Storing summarised value and storing in SALARYDETAIL and SECTION16DETAIL table */  
 UPDATE SALARYDETAIL  
 SET DEDUCTIONUS16 =(SELECT DEDUCTIONUS16 FROM #SECTION16DET)  
 WHERE DEDUCTEEID = @deducteeID AND BRANCHID = @branchID  
 UPDATE SECTION16DETAIL  
 SET AMOUNT=(SELECT DEDUCTIONUS16 FROM #SECTION16DET)  
 FROM SECTION16DETAIL S16 WITH(NOLOCK)  
 INNER JOIN SALARYDETAIL SD WITH(NOLOCK)  
 ON SD.SALARYDETAILID=S16.SALARYDETAILID  
 INNER JOIN #SECTION16DET S WITH(NOLOCK)  
 ON S16.SALARYSECTIONID = S.SALARYSECTIONID  
 WHERE SD.DEDUCTEEID = @deducteeID AND SD.BRANCHID = @branchID --AND S16.SALARYSECTIONID=2  
 /*Taxable perquisite data*/  
 SELECT   
 T.MONTHID,T.PERKID,  
 CASE WHEN T.PERKID = 21 THEN T.TAXABLEAMT END AS PROFITLIEU,  
 CASE WHEN T.PERKID = 16 THEN T.TAXABLEAMT END AS OTHERBENEFITS,  
 CASE WHEN T.PERKID <> 21 THEN T.TAXABLEAMT END AS TAXABLEPERQUISITE  
 INTO #TAXABLEPERQUISITE  
 FROM TAXABLEPERQUISITE T WHERE COMID = @comID  
 SET @basicSalary= (SELECT (SELECT SUM(NETAMT) FROM #SALDETAIL SD   
 INNER JOIN SALARYHEAD SH  
 ON SD.SALARYHEADID = SH.SALARYHEADID  
 WHERE   
 SH.INCLUDEUS10 = 0 AND SH.EARNING = 1 AND SH.INCLUDEINTAX = 1 AND ISNULL(SH.C80CID,-1) <= 0)-(SELECT ISNULL((SELECT SUM(ISNULL(NETAMT,0)) FROM #SALDETAIL SD   
 INNER JOIN SALARYHEAD SH  
 ON SD.SALARYHEADID = SH.SALARYHEADID  
 WHERE   
 SH.INCLUDEUS10 = 0 AND SH.EARNING = 0 AND SH.INCLUDEINTAX = 1 AND ISNULL(SH.C80CID,-1) <= 0),0)))  
 SET @basicSalary = CEILING(@basicSalary)  
 SET @taxableAllowance = CEILING(ISNULL((SELECT SUM(ISNULL(NETAMT,0)) FROM #SALDETAIL SD INNER JOIN SALARYHEAD SH ON SH.SALARYHEADID = SD.SALARYHEADID WHERE INCLUDEUS10=1),0))  
 UPDATE SALARYDETAIL  
 SET OTHERBENEFITS = CEILING(ISNULL((SELECT SUM(ISNULL(OTHERBENEFITS,0)) FROM #TAXABLEPERQUISITE),0)),  
 VALUEOFPERQUISITES = CEILING(ISNULL((SELECT SUM(ISNULL(TAXABLEPERQUISITE,0)) FROM #TAXABLEPERQUISITE),0)),  
 TAXABLEPERQUISITES = CEILING(ISNULL((SELECT SUM(ISNULL(TAXABLEPERQUISITE,0)) FROM #TAXABLEPERQUISITE),0)),  
 TOTALPERQUISITE = CEILING(ISNULL((SELECT SUM(ISNULL(TAXABLEPERQUISITE,0)) FROM #TAXABLEPERQUISITE),0)),  
 PROFITLIEU = CEILING(ISNULL((SELECT SUM(ISNULL(PROFITLIEU,0)) FROM #TAXABLEPERQUISITE),0)),  
 BASICSALARY = @basicSalary,  
 TAXABLEALLOWANCE = @taxableAllowance,  
 GROSSSALARY = @basicSalary + @taxableAllowance + CEILING(ISNULL((SELECT SUM(ISNULL(TAXABLEPERQUISITE,0)) FROM #TAXABLEPERQUISITE),0)),  
 INCOMEFROMSALARIES = @basicSalary + @taxableAllowance + CEILING(ISNULL((SELECT SUM(ISNULL(TAXABLEPERQUISITE,0)) FROM #TAXABLEPERQUISITE),0))-ISNULL(DEDUCTIONUS16,0)  
  WHERE DEDUCTEEID = @deducteeID AND BRANCHID = @branchID  
 /*Update Chapter VIA Details according to max-limit*/  
 DECLARE @c80cValue NUMERIC(13,2);  
 DECLARE @totalVIA NUMERIC(13,2);  
 DECLARE @totalOf3Sections NUMERIC(13,2);  
 SELECT CVIA.SALARYSECTIONID,CVIA.DEDUCTIBLEAMOUNT   
 INTO #CHAPTERVIADATA  
 FROM SALARYDETAIL SD  
 INNER JOIN CHAPTERVIADETAIL CVIA  
 ON CVIA.SALARYDETAILID=SD.SALARYDETAILID  
 WHERE SD.DEDUCTEEID=@deducteeID AND SD.BRANCHID=@branchID  
 AND CVIA.SALARYSECTIONID IN(3,4,20)  
 SET @totalVIA = ISNULL((SELECT SUM(CVIA.DEDUCTIBLEAMOUNT)  
 FROM   
 --CHAPTERVIADETAIL  CVIADET WITH(NOLOCK)  
 --INNER JOIN   
 #CHAPTERVIADET CVIA  
 --ON CVIA.CHAPTERVIADETAILID=CVIADET.CHAPTERVIADETAILID   
 ),0)  
 /*Chapter VIA Data only from Pay File*/  
 IF((SELECT COUNT(*) FROM #CHAPTERVIADET)=0)  
 BEGIN  
  SET @totalVIA = ISNULL((SELECT SUM(QUALIFYING) FROM #C80CCONFIGUREDDATA),0)  
 END  
 SET @c80cValue=(SELECT SUM(DEDUCTIBLEAMOUNT) FROM #CHAPTERVIADET WHERE SALARYSECTIONID=3)  
 SET @totalOf3Sections=(SELECT SUM(DEDUCTIBLEAMOUNT) FROM #CHAPTERVIADATA)  
 IF(@finYear>2013)  
  BEGIN  
  IF(@totalOf3Sections>=150000)  
   BEGIN  
    IF(@c80cValue>150000)  
    BEGIN  
     SET @totalVIA = @totalVIA-@c80cValue  
     SET @c80cValue=150000  
     SET @totalVIA=@totalVIA+@c80cValue  
    END  
   END     
  END  
 ELSE  
  BEGIN  
  IF(@totalOf3Sections>=100000)  
   BEGIN  
    IF(@c80cValue > 100000)  
    BEGIN  
     SET @totalVIA = @totalVIA - @c80cValue  
     SET @c80cValue = 100000  
     SET @totalVIA = @totalVIA + @c80cValue  
    END  
   END  
  END  
 IF(@finYear>2013)  
 BEGIN  
  UPDATE CHAPTERVIADET    
  SET DEDUCTIBLEAMOUNT = CEILING(CVIA.DEDUCTIBLEAMOUNT),   
  QUALIFYINGAMOUNT = CEILING(CVIA.QUALIFYINGAMOUNT)   
  FROM CHAPTERVIADET CVIADET WITH(NOLOCK)  
  INNER JOIN #CHAPTERVIADET CVIA  
  ON CVIA.CHAPTERVIADETAILID = CVIADET.CHAPTERVIADETAILID  
  AND CVIA.SALARYSECTIONID = CVIADET.SALARYSECTIONID  
  WHERE CVIA.COMID = @comID AND CVIA.SALARYSECTIONID <> 3  
 END    
UPDATE CHAPTERVIADETAIL  SET 
 DEDUCTIBLEAMOUNT = @c80cValue,  
 QUALIFYINGAMOUNT = @c80cValue    
 WHERE CHAPTERVIADETAILID = @CHAPTERVIADETAILID
 AND SALARYSECTIONID = 3
 UPDATE SALARYDETAIL   
 SET TOTALDEDUNDERCHAPTERVIA = CEILING(@totalVIA),  
 TOTALTAXABLEINCOME = GROSSTOTALINCOME - CEILING(@totalVIA),  
 GROSSTOTALINCOME = INCOMEFROMSALARIES + ISNULL(OTHERINCOME,0)  
 WHERE DEDUCTEEID = @deducteeID AND BRANCHID = @branchID  
 UPDATE SALARYDETAIL  
 SET TOTALTAXABLEINCOME = 0  
 WHERE DEDUCTEEID = @deducteeID AND TOTALTAXABLEINCOME < 0  
 DROP TABLE #C80CCONFIGUREDDATA  
 DROP TABLE #CHAPTERVIADATA  
 DROP TABLE #CHAPTERVIADET  
 DROP TABLE #MANNUALENTRY  
 DROP TABLE #OTHERINCOME  
 DROP TABLE #SALDETAIL  
 DROP TABLE #SECTION16DET  
 DROP TABLE #TAXABLEPERQUISITE 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_RecalculateSalary')
DROP PROCEDURE USP_TDS_RecalculateSalary
GO
/*
CASE 1
USP_TDS_RecalculateSalary 33,2014
CASE 2
USP_TDS_RecalculateSalary 10479,2014
CASE 3
USP_TDS_RecalculateSalary 24409,2014
*/
CREATE PROCEDURE USP_TDS_RecalculateSalary 
  @COMIDS NVARCHAR(MAX),
  @FINYEAR INT  
  AS  
BEGIN
	SELECT BRANCHID,COMID,(CASE 
							WHEN MONTHID IN(1,2,3) THEN (MONTHID+12) 
							ELSE MONTHID
					   END
					   ) MONTHID
	INTO #EMPWORKMONTH
	FROM EMPWORKMONTH EMPWM WITH(NOLOCK)
	WHERE EMPWM.COMID = @COMIDs	
	ORDER BY MONTHID
	CREATE TABLE #WORKSUMMARY(BRANCHID INT,COMID INT,MONTHID INT)
	DECLARE @BRID INT;
	DECLARE @MONTHID INT;
	DECLARE @COUNTER INT = 4;
	WHILE(@COUNTER <= 15)
	BEGIN
		SET @BRID = ISNULL((SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID = @COUNTER),0)
		SET @MONTHID = ISNULL((SELECT MONTHID FROM #EMPWORKMONTH WHERE MONTHID = @COUNTER),0)
			IF(NOT EXISTS(SELECT BRANCHID FROM #WORKSUMMARY WHERE BRANCHID = @BRID))
				BEGIN
					IF(@BRID <> 0)
					BEGIN
						INSERT INTO #WORKSUMMARY(BRANCHID,COMID,MONTHID)
						VALUES(@BRID,@COMIDS,@MONTHID)
					END
				END
			ELSE
				BEGIN
				IF((SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID = @COUNTER) <> (SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID = @COUNTER - 1))
					BEGIN
						INSERT INTO #WORKSUMMARY(BRANCHID,COMID,MONTHID)
						VALUES(@BRID,@COMIDS,@MONTHID)
					END
				END
		SET @COUNTER = @COUNTER + 1;
	END
	DECLARE @NOOFBRANCHES INT;
	DECLARE @BRANCHES INT;
	SET @BRANCHES = (SELECT COUNT(BRANCHID) FROM #WORKSUMMARY)
	SET @NOOFBRANCHES = (SELECT COUNT(DISTINCT BRANCHID) FROM #WORKSUMMARY)
	IF(@NOOFBRANCHES = 1)
		BEGIN
			--SELECT 1;
			EXEC USP_TDS_RecalculateNotTransferredEmployees	@COMIDS,@FINYEAR
		END
	IF((@BRANCHES = @NOOFBRANCHES) AND @NOOFBRANCHES <> 1)
		BEGIN
			--SELECT 2;
			EXEC USP_TDSRecalculateForSeriallyTransferredEmployees @COMIDS,@FINYEAR
		END
	IF((@BRANCHES <> @NOOFBRANCHES) AND @NOOFBRANCHES <> 1)
		BEGIN
			--SELECT 3;
			EXEC USP_TDS_EmployeeTransferredBackToPreviousBranch @COMIDS,@FINYEAR
		END		
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_RecordsWith197Certificate')
DROP PROCEDURE USP_TDS_RecordsWith197Certificate
GO
CREATE PROCEDURE USP_TDS_RecordsWith197Certificate
AS
BEGIN
	-- DETAIL WHERE 'NO/LOWER DEDUCTION US/ 197' IS SET
	SELECT CB.BRANCHCODE, CB.BRANCHNAME, 
		D.NAME, D.PAN, DD.CERTNO , DD.PAYMENTMADE, DD.PAYMENTDATE, DD.TOTALDEDUCTED, DD.DEDUCTEDDATE,
		DD.TAXRATE, TS.SECTIONNAME, 
		CASE 
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'			-- A	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 4 THEN 'Transporter with valid PAN (0%)'				-- T	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 5 THEN 'Amount Paid/Credited is Under Threshold'		-- Y	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'					-- S	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 7 THEN 'NO DEDUCTION U/S 197A(1F)'						-- Z	spec
			ELSE ''
		END [DEDUCTION REMARKS]
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.BRANCHID = DD.BRANCHID AND D.DEDUCTEEID = DD.DEDUCTEEID 
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID 
		INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID 
	WHERE 
		DD.FORMID = 2 AND DD.NONDEDREASON = 1 
	UNION ALL
	SELECT CB.BRANCHCODE, CB.BRANCHNAME, 
		D.NAME, D.PAN, DD.CERTNO , DD.PAYMENTMADE, DD.PAYMENTDATE, DD.TOTALDEDUCTED, DD.DEDUCTEDDATE,
		DD.TAXRATE, TS.SECTIONNAME, 
		CASE 
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'			-- A	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'							-- B	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'			-- C	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 4 THEN 'Transporter with valid PAN (0%)'				-- T	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 5 THEN 'Amount Paid/Credited is Under Threshold'		-- Y	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'					-- S	spec
			WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 7 THEN 'NO DEDUCTION U/S 197A(1F)'						-- Z	spec
			ELSE ''
		END [DEDUCTION REMARKS]
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.BRANCHID = DD.BRANCHID AND D.DEDUCTEEID = DD.DEDUCTEEID 
		INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID 
		INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID 
	WHERE 
		DD.FORMID = 2 AND DD.NONDEDREASON <> 1 
		AND DD.DEDUCTEEID IN 
		(
			SELECT D.DEDUCTEEID 
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.BRANCHID = DD.BRANCHID AND D.DEDUCTEEID = DD.DEDUCTEEID 
				INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID 
			WHERE 
				DD.FORMID = 2 AND DD.NONDEDREASON = 1 
		)
	ORDER BY D.PAN, DD.CERTNO, CB.BRANCHCODE 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REMITTANCEDETAIL')
DROP PROCEDURE USP_TDS_REMITTANCEDETAIL
GO
CREATE PROCEDURE [USP_TDS_REMITTANCEDETAIL] 
	@MONTH INT,
	@FINANCIALYEAR INT	
AS
BEGIN
	DECLARE @QTR INT;
	IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)
		SET @QTR = 1
	ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)
		SET @QTR = 2
	ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)
		SET @QTR = 3
	ELSE
		BEGIN
			SET @QTR = 4;
			SET @FINANCIALYEAR = @FINANCIALYEAR + 1;
		END
	DECLARE @MONTHYEAR VARCHAR(6);
	SET @MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR);
	SELECT CHALLANID 
	INTO #CHASYS
	FROM CHALLANDETAIL WITH(NOLOCK)
	WHERE ISAUTOGENERATED = 1
	SELECT DEDUCTIONID, BRANCHID,
		CASE WHEN FORMID = 1 THEN '24Q'
		WHEN FORMID = 3 THEN '27Q'
		WHEN FORMID = 2 AND SECTIONID = 5 THEN '26QI' ELSE '26QV'
		END FORMTYPE,
		TOTALDEDUCTED
	INTO #DED
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	WHERE MONTH(DEDUCTEDDATE) = @MONTH AND QUARTER = @QTR
		AND DEDUCTIONID IN (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) 
								WHERE CHALLANID IN (SELECT CHALLANID FROM #CHASYS))
	SELECT BRANCHID, FORMTYPE, SUM(TOTALDEDUCTED) AMOUNT 
	INTO #DEDT
	FROM #DED 
	GROUP BY BRANCHID, FORMTYPE
	SELECT CB.BRANCHCODE SOL, CB.BRANCHNAME, 
		(SELECT BRANCHNAME FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = CB.PARENTBRANCHID) ZONE,
		(SELECT BRANCHCODE FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = CB.PARENTBRANCHID) ZONESOL,
		P.FORMTYPE, ISNULL(P.AMOUNT, 0) PARKED, ISNULL(T.AMOUNT, 0) REMITTED, ISNULL(P.AMOUNT, 0) - ISNULL(T.AMOUNT, 0) BALANCE,
		(
		SELECT TAN 
		FROM DEDUCTOR D WITH(NOLOCK)
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK)
				ON D.DEDUCTORID = BD.DEDUCTORID
			INNER JOIN COMPANYBRANCH B WITH(NOLOCK)
				ON B.BRANCHID = BD.BRANCHID
		WHERE BD.QUARTER = @QTR AND B.BRANCHID = CB.BRANCHID
		) TAN
	INTO #TOSHOW
	FROM PARKEDAMOUNT P
		LEFT JOIN #DEDT T ON P.BRANCHID = T.BRANCHID AND P.FORMTYPE = T.FORMTYPE 
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON P.BRANCHID = CB.BRANCHID 
	WHERE MONTHYEAR = @MONTHYEAR
	ORDER BY ZONE, CB.BRANCHCODE 
	SELECT  SOL, BRANCHNAME, ZONE, ZONESOL, ISNULL([P24Q],0) PARKED24Q, ISNULL([R24Q],0) REMITTED24Q, ISNULL([B24Q],0) BALANCE24Q, ISNULL([P26QI],0) PARKED26QI, ISNULL([R26QI],0) REMITTED26QI, ISNULL([B26QI],0) BALANCE26QI, ISNULL([P26QV],0) PARKED26QV, ISNULL([R26QV],0) REMITTED26QV, ISNULL([B26QV],0) BALANCE26QV, ISNULL([P27Q],0) PARKED27Q, ISNULL([R27Q],0) REMITTED27Q, ISNULL([B27Q],0) BALANCE27Q, TAN
	INTO #SHOW
	FROM (SELECT SOL, BRANCHNAME, ZONE, ZONESOL, 'P'+FORMTYPE AS PFORMTYPE, 'R'+FORMTYPE AS RFORMTYPE, 'B'+FORMTYPE AS BFORMTYPE, PARKED, REMITTED, BALANCE, TAN FROM #TOSHOW) T 
	PIVOT(
	SUM(PARKED)
	FOR PFORMTYPE IN 
	([P24Q],[P26QI],[P26QV],[P27Q])
	)AS PVT1
	PIVOT(
	SUM(REMITTED)
	FOR RFORMTYPE IN 
	([R24Q],[R26QI],[R26QV],[R27Q])
	)AS PVT2
	PIVOT(
	SUM(BALANCE)
	FOR BFORMTYPE IN 
	([B24Q],[B26QI],[B26QV],[B27Q])
	)AS PVT3
	SELECT DISTINCT * FROM #SHOW
	DROP TABLE #SHOW 
	DROP TABLE #TOSHOW 
	DROP TABLE #DED 
	DROP TABLE #DEDT
	DROP TABLE #CHASYS
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REMOVECORRDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_REMOVECORRDEDUCTIONDETAIL
GO
CREATE PROCEDURE [USP_TDS_REMOVECORRDEDUCTIONDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTIONSLNO INT,
	@CHALLANERETURNID INT,
	@CORRSTATUS INT
AS
BEGIN	
	DECLARE @DEDUCTIONERETURNID INT;	
	BEGIN TRANSACTION 
		BEGIN TRY
			SELECT @CHALLANERETURNID = CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
						QUARTER = @QUARTER AND CHALLANSERIALNO = @CHALLANERETURNID
			SELECT @DEDUCTIONERETURNID = DEDUCTIONERETURNID FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
						QUARTER = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CHALLANERETURNID = @CHALLANERETURNID  
						AND CORRECTIONSTATUS = @CORRSTATUS
			IF EXISTS (SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID AND ISUPDATECHALLAN = 0 AND CORRECTIONSTATUS <> 1)
				BEGIN
					IF ((SELECT COUNT(CHALLANERETURNID) FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND CORRECTIONSTATUS IN (2,4,5) AND CHALLANERETURNID = @CHALLANERETURNID) = 1)
						DELETE FROM CORRCHALLANDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER] = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID AND (CORRECTIONSTATUS= 2 OR CORRECTIONSTATUS= 5);
				END
			DELETE FROM CORRDEDUCTIONDETAIL 
			WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND 
					DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CORRECTIONSTATUS = @CORRSTATUS;
			IF (@CORRSTATUS = 5)
			BEGIN
				UPDATE CORRDEDUCTIONDETAIL SET DEDUCTIONERETURNID = DEDUCTIONERETURNID - 1
				WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND 		
				DEDUCTIONERETURNID > @DEDUCTIONERETURNID AND CHALLANERETURNID = @CHALLANERETURNID AND CORRECTIONSTATUS = @CORRSTATUS
			END
			--ELSE
			--BEGIN
			--UPDATE CORRCHALLANDETAIL SET CORRECTIONSTATUS = 1
			--WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
			--			QUARTER = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID  AND ISNULL(CHALLANTOTAL,0) = 0 AND CORRECTIONSTATUS <> 7
			--END			
		COMMIT
	END TRY	
	BEGIN CATCH		
		ROLLBACK
	END CATCH	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REMOVECORREMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_REMOVECORREMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_REMOVECORREMPLOYEEDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESLNO INT
AS
	BEGIN
		DECLARE @ERROR INT;
		SET @ERROR = -1;
	    IF EXISTS(SELECT DEDUCTEESERIALNO FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
				   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESLNO)
			BEGIN
				SET @ERROR = -1;
			END
		ELSE
			BEGIN
				DELETE FROM CORREMPLOYEE WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESLNO;
				SET @ERROR = 1;
			END
		SELECT @ERROR;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REMOVECORRNONEMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_REMOVECORRNONEMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_REMOVECORRNONEMPLOYEEDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESLNO INT
AS
	BEGIN
		DECLARE @ERROR INT;
		SET @ERROR = -1;
		IF EXISTS(SELECT DEDUCTEESERIALNO FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
				  WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESLNO)
			BEGIN
				SET @ERROR = -1;
			END
		ELSE
			BEGIN
				DELETE FROM CORRNONEMPLOYEE WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESLNO;
				SET @ERROR = 1;
			END
		SELECT @ERROR;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REMOVECORRUPDATEDCHALLANDETAIL')
DROP PROCEDURE USP_TDS_REMOVECORRUPDATEDCHALLANDETAIL
GO
CREATE PROCEDURE [USP_TDS_REMOVECORRUPDATEDCHALLANDETAIL]
			@BRANCHID INT,
			@FORMID INT,
			@QUARTER INT,
			@CHALLANSERIALNO INT,
			@CORRECTIONSTATUS SMALLINT
AS
BEGIN
    DECLARE @ERROR INT
	SET @ERROR=@CHALLANSERIALNO;
    DECLARE @CHALLANERETURNID INT,@DEDCHALLANERETURNID INT
    SET @CHALLANERETURNID =-1;
	SET @DEDCHALLANERETURNID =-1;
	BEGIN TRANSACTION 
		BEGIN TRY	
			/*FOR CORRECTION STATAS 2 I.E UPDATED CHALLAN IF ANY CHALLAN IS LINKED TO DEDUCTION THEN FIRST DELETING CHALLAN AND COPYING THE CHALLAN*/
			IF (@CORRECTIONSTATUS=2)
			BEGIN
				DELETE FROM CORRCHALLANDETAIL WHERE BRANCHID=@BRANCHID AND 
													FORMID=@FORMID AND
													QUARTER=@QUARTER AND
													CHALLANSERIALNO=@CHALLANSERIALNO AND
													CORRECTIONSTATUS=2
				SELECT @CHALLANERETURNID=CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND 
																						FORMID=@FORMID AND
																						QUARTER=@QUARTER AND
																						CHALLANSERIALNO=@CHALLANSERIALNO
				SELECT @DEDCHALLANERETURNID=CHALLANERETURNID FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND 
						   FORMID=@FORMID AND QUARTER=@QUARTER AND CHALLANERETURNID=@CHALLANERETURNID AND CORRECTIONSTATUS<>1
				IF(@DEDCHALLANERETURNID <> -1)
				BEGIN
					INSERT INTO CORRCHALLANDETAIL(CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,
								MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,
								LASTCHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
								CHALLANTOTAL,LASTCHALLANTOTAL,CHEQUENO,CORRECTIONSTATUS,CHALLANID, CHALLANEDITMODE, EXPECTEDDID, MINORHEAD, ISCOMPANY,FEE)
						 SELECT CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,0,MODEOFPAYMENT,BANKCHALLANNO,BANKCHALLANNO,TRNVOUCHERNO,TRNVOUCHERNO,BANKID,BANKID,
								CHALLANPAIDDATE,CHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,
								CHALLANTOTAL,CHEQUENO,2,CHALLANID, CHALLANEDITMODE, EXPECTEDDID, MINORHEAD, ISCOMPANY,FEE
						   FROM CORRCHALLANDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
								AND CHALLANSERIALNO=@CHALLANSERIALNO AND CORRECTIONSTATUS=1 ;
				END
			END	
			/*FOR CORRECTION STATAS 5 I.E NEWLY ADDED CHALLAN CHECKING FOR CHALLAN WHICH IS USED IN CORRDEDUCTION;IF IT EXISTS THEN NOT ALLOWING TO DELETE*/
			ELSE 
			BEGIN
				DECLARE @ISUSED INT;
				SET @ISUSED =-1;
				SELECT @CHALLANERETURNID=CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND 
																						FORMID=@FORMID AND
																						QUARTER=@QUARTER AND
																						CHALLANSERIALNO=@CHALLANSERIALNO
				SELECT @ISUSED=CHALLANERETURNID FROM CORRDEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND 
						   FORMID=@FORMID AND QUARTER=@QUARTER AND CHALLANERETURNID=@CHALLANERETURNID AND CORRECTIONSTATUS<>1
				IF(@ISUSED = -1)
				 BEGIN
					DELETE FROM CORRCHALLANDETAIL WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND
						QUARTER=@QUARTER AND CHALLANSERIALNO=@CHALLANSERIALNO AND (CORRECTIONSTATUS=5 OR CORRECTIONSTATUS = 7)
					IF EXISTS(SELECT * FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID
					AND QUARTER = @QUARTER AND CHALLANERETURNID > @CHALLANERETURNID AND (CORRECTIONSTATUS=5 OR CORRECTIONSTATUS = 7))
					BEGIN
						UPDATE CORRCHALLANDETAIL SET CHALLANERETURNID = CHALLANERETURNID - 1 
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
						AND CHALLANERETURNID > @CHALLANERETURNID AND (CORRECTIONSTATUS=5 OR CORRECTIONSTATUS = 7)
						UPDATE CORRDEDUCTIONDETAIL SET CHALLANERETURNID = CHALLANERETURNID - 1 
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
						AND CHALLANERETURNID > @CHALLANERETURNID /*AND CORRECTIONSTATUS = 5*/
					END											
				 END
				ELSE
				 BEGIN
					SET @ERROR=-2
				 END
			END
		END TRY	
		BEGIN CATCH
			SET @ERROR=-1
		ROLLBACK
		END CATCH
	COMMIT 
	SELECT @ERROR
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REMOVECORRUPDATEDSALARYDETAIL')
DROP PROCEDURE USP_TDS_REMOVECORRUPDATEDSALARYDETAIL
GO
CREATE PROCEDURE [USP_TDS_REMOVECORRUPDATEDSALARYDETAIL]  
   @BRANCHID INT,  
   @DEDUCTEESERIALNO INT  
AS  
BEGIN  
	DELETE FROM CORRSALARYDETAIL WHERE BRANCHID=@BRANCHID AND  
            DEDUCTEESERIALNO=@DEDUCTEESERIALNO AND  
            CORRECTIONSTATUS<>1  
    SELECT BRANCHID,CORRECTIONSTATUS,DEDUCTEESERIALNO,(ROW_NUMBER() OVER(ORDER BY CORRDEDUCTEESERIALNO ASC ) + (SELECT MAX(CORRDEDUCTEESERIALNO) FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND CORRECTIONSTATUS = 1)) AS RONO INTO #TEMP
			FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND  CORRECTIONSTATUS IN(2,5) 
			UPDATE CORRSALARYDETAIL SET CORRDEDUCTEESERIALNO =T.RONO
			FROM CORRSALARYDETAIL CS
			INNER JOIN #TEMP T
			ON CS.BRANCHID=T.BRANCHID AND CS.CORRECTIONSTATUS=T.CORRECTIONSTATUS  AND T.DEDUCTEESERIALNO=CS.DEDUCTEESERIALNO
	DELETE FROM CORREMPLOYEE WHERE BRANCHID=@BRANCHID AND DEDUCTEESERIALNO=@DEDUCTEESERIALNO AND CORRECTIONSTATUS = 2 AND FORMID = 1 AND QUARTER = 4 
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REMOVEDEDUCTEEPANUPDATE')
DROP PROCEDURE USP_TDS_REMOVEDEDUCTEEPANUPDATE
GO
CREATE PROCEDURE [USP_TDS_REMOVEDEDUCTEEPANUPDATE]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESERIALNO INT,
	@CORRECTIONSTATUS INT
AS
	BEGIN
		DECLARE @TABLENAME VARCHAR(25),@SQLQUERY NVARCHAR(MAX);
		DECLARE @PAN VARCHAR(10),@PANREFERENCE VARCHAR(10);
		IF @FORMID = 1
			BEGIN
				SET @TABLENAME = 'CORREMPLOYEE';
			END
		ELSE
			BEGIN
				SET @TABLENAME = 'CORRNONEMPLOYEE';
			END
		SET @SQLQUERY = 'DELETE FROM ' + @TABLENAME + ' WHERE BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND QUARTER = ' + CAST(@QUARTER AS VARCHAR) + '
								  AND DEDUCTEESERIALNO = ' + CAST(@DEDUCTEESERIALNO AS VARCHAR) + ' AND CORRECTIONSTATUS = ' + CAST(@CORRECTIONSTATUS AS VARCHAR);	
		EXEC SP_EXECUTESQL @SQLQUERY;
		IF @FORMID = 1
			BEGIN
			SELECT @PAN = PAN,@PANREFERENCE=PANREFERENCE FROM CORREMPLOYEE CE WITH(NOLOCK) 
			WHERE BRANCHID = @BRANCHID AND CORRECTIONSTATUS = 1 AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO
			UPDATE CORREMPLOYEE SET PAN = @PAN , PANREFERENCE = @PANREFERENCE 
			WHERE BRANCHID = @BRANCHID AND CORRECTIONSTATUS = 2 AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REMOVESPECIALCHARACTERINDEDUCTEE')
DROP PROCEDURE USP_TDS_REMOVESPECIALCHARACTERINDEDUCTEE
GO
CREATE PROCEDURE USP_TDS_REMOVESPECIALCHARACTERINDEDUCTEE
	@CHARTOREMOVE INT
AS
	BEGIN
		UPDATE DEDUCTEE 
			SET ADDRESS1 = REPLACE(ADDRESS1, CHAR(@CHARTOREMOVE), ''),
			   ADDRESS2 = REPLACE(ADDRESS2, CHAR(@CHARTOREMOVE), ''),
			   ADDRESS3 = REPLACE(ADDRESS3, CHAR(@CHARTOREMOVE), ''),
			   ADDRESS4 = REPLACE(ADDRESS4, CHAR(@CHARTOREMOVE), ''),
			   ADDRESS5 = REPLACE(ADDRESS5, CHAR(@CHARTOREMOVE), '')
		WHERE DEDUCTEEID IN
		(
		SELECT DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)
		WHERE ADDRESS1 LIKE '%' + CHAR(@CHARTOREMOVE) + '%'
			OR ADDRESS2 LIKE '%' + CHAR(@CHARTOREMOVE) + '%'
			OR ADDRESS3 LIKE '%' + CHAR(@CHARTOREMOVE) + '%'
			OR ADDRESS4 LIKE '%' + CHAR(@CHARTOREMOVE) + '%'
			OR ADDRESS5 LIKE '%' + CHAR(@CHARTOREMOVE) + '%'
		)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REQUESTEDFORREVERSAL')
DROP PROCEDURE USP_TDS_REQUESTEDFORREVERSAL
GO
CREATE PROCEDURE [dbo].[USP_TDS_REQUESTEDFORREVERSAL]                            
 @NAME NVARCHAR(100),            
 @PAN VARCHAR(11),                                        
 @SECTIONID INT=0,                                          
 @AMOUNTPAID NUMERIC(13,2)=NULL,                                          
 @PAIDDATE SMALLDATETIME =NULL,                                          
 @TAXRATE NUMERIC(7,2)=NULL,                                          
 @TDSAMOUNT NUMERIC(13,2)=NULL,                                          
 @DEDUCTEDDATE SMALLDATETIME=NULL,                                    
 @USERID INT,          
 @STARTDATE SMALLDATETIME=NULL,                        
 @ENDDATE SMALLDATETIME =NULL,        
 @ADDITIONALFIELD VARCHAR(25)=NULL                                  
AS                                    
DECLARE @QUERY NVARCHAR(MAX)                                    
BEGIN                                    
SET @QUERY= 'SELECT D.NAME ,D.PAN,DD.ADDITIONALFIELD1,DD.PAYMENTMADE,                                          
 CONVERT(NVARCHAR,DD.PAYMENTDATE,103) AS PAYMENTDATE,                  
 CAST(DD.INCOMETAXRATE AS DECIMAL(10,2)) AS INCOMETAXRATE,DD.TOTALDEDUCTED,                                          
 CONVERT(NVARCHAR,DD.DEDUCTEDDATE,103) AS DEDUCTEDDATE,DD.DEDUCTIONID, DDA.AUDITREMARKS OPERATINGACCNUMBER                               
 FROM NONEMPLOYEE NE WITH(NOLOCK)                                         
 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID                                        
 INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DD.DEDUCTEEID =D.DEDUCTEEID    
 INNER JOIN DEDUCTIONDETAILAUDIT DDA WITH(NOLOCK) ON DD.DEDUCTIONID= DDA.RECORDID                                     
 WHERE                        
 DD.ISREVERSAL=1 AND                        
 DD.TRANSSTATUS =1 AND            
 D.PAN='''+@PAN+''' AND                                 
 D.BRANCHID='+CAST(@USERID AS VARCHAR)+' AND                                     
 DD.SECTIONID='+CAST(@SECTIONID AS VARCHAR)+' AND                                       
 D.NAME='''+@NAME +''' AND          
 DD.PAYMENTDATE BETWEEN '''+CAST(@STARTDATE AS VARCHAR)+''' AND '''+CAST(@ENDDATE AS VARCHAR)+''''                        
 IF(@AMOUNTPAID IS NOT NULL)                                           
 BEGIN                                          
  SET @QUERY=@QUERY+'AND DD.PAYMENTMADE='+CAST(@AMOUNTPAID AS VARCHAR)+''                                          
 END                                          
 IF(@ADDITIONALFIELD IS NOT NULL)                                                
 BEGIN                                                
  SET @QUERY=@QUERY+' AND DD.ADDITIONALFIELD1='''+CAST(@ADDITIONALFIELD AS VARCHAR)+''''                                    
 END                                           
 IF(@TAXRATE IS NOT NULL)                                          
 BEGIN                                          
  SET @QUERY=@QUERY+' AND DD.INCOMETAXRATE='+CAST(@TAXRATE AS VARCHAR)+''                                          
 END                                          
 IF(@TDSAMOUNT IS NOT NULL)                                          
 BEGIN                                          
  SET @QUERY=@QUERY+' AND DD.TOTALDEDUCTED='+CAST(@TDSAMOUNT AS VARCHAR)+''                                          
 END                                          
 IF(@DEDUCTEDDATE IS NOT NULL)                                          
 BEGIN                                          
  SET @QUERY=@QUERY+' AND DD.DEDUCTEDDATE='''+CAST(@DEDUCTEDDATE AS VARCHAR)+''''                              
 END                                     
 SET @QUERY=@QUERY+' GROUP BY D.NAME ,D.PAN,DD.ADDITIONALFIELD1,DD.PAYMENTMADE,PAYMENTDATE,DD.INCOMETAXRATE,                                    
 DD.TOTALDEDUCTED,DEDUCTEDDATE,DD.DEDUCTIONID,DDA.AUDITREMARKS'           
 EXEC SP_EXECUTESQL @QUERY;           
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_RESETALLISREQACTIVE')
DROP PROCEDURE USP_TDS_RESETALLISREQACTIVE
GO
CREATE PROCEDURE [USP_TDS_RESETALLISREQACTIVE]      
@PARENTBRANCHID INT,
@ISSUPERADMIN BIT,
@ISBRANCHADMIN BIT    
AS      
BEGIN      
IF(@ISBRANCHADMIN = 1)
	BEGIN
		UPDATE ACKNO SET ISREQACTIVE = 0 FROM ACKNO A WITH(NOLOCK)
        INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON A.BRANCHID = CB.BRANCHID
        WHERE A.BRANCHID IN (SELECT BRANCHID
        FROM COMPANYBRANCH WITH(NOLOCK)    
        WHERE PARENTBASEID LIKE ( SELECT PARENTBASEID    
        FROM COMPANYBRANCH  WITH(NOLOCK)    
        WHERE BRANCHID = @PARENTBRANCHID)+'%')
    END
 IF(@ISSUPERADMIN = 1)
	BEGIN 
		UPDATE ACKNO SET ISREQACTIVE = 0 FROM ACKNO A
        INNER JOIN COMPANYBRANCH CB ON A.BRANCHID = CB.BRANCHID
	END        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_RESETISREQACTIVE')
DROP PROCEDURE USP_TDS_RESETISREQACTIVE
GO
CREATE PROCEDURE USP_TDS_RESETISREQACTIVE      
@ACKID INT
AS
BEGIN
	UPDATE ACKNO SET ISREQACTIVE = 0,QUEUEID = NULL 
	WHERE ACKID = @ACKID AND ISREQACTIVE = 1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_RevApproveRejectSelect')
DROP PROCEDURE USP_TDS_RevApproveRejectSelect
GO
CREATE PROCEDURE USP_TDS_RevApproveRejectSelect 
 @DEDUCTIONID INT                                          
AS               
DECLARE @CURRDATE SMALLDATETIME;              
DECLARE @SUBDATE VARCHAR(20);              
DECLARE @X VARCHAR(20);              
DECLARE @CURRDATETIME DATETIME;              
SET @CURRDATE=(SELECT DATEADD(MONTH,-1,GETDATE()))              
SET @X=CONVERT(VARCHAR,@CURRDATE,120)              
SET @SUBDATE=SUBSTRING(@X,0,8);              
SET @SUBDATE=@SUBDATE+'-'+'01';              
SET @CURRDATETIME =CONVERT(DATETIME,@SUBDATE,126);              
BEGIN                                                       
  SELECT                                                     
  CB.BRANCHNAME+'('+ CB.BRANCHCODE+')' AS BRANCHNAME,                              
  D.NAME,D.PAN,DD.ADDITIONALFIELD1,DD.PAYMENTMADE,CONVERT(NVARCHAR,DD.PAYMENTDATE,103) AS PAYMENTDATE,                              
  CAST(DD.TAXRATE AS DECIMAL(10,2)) AS TAXRATE,DD.TOTALDEDUCTED,CONVERT(NVARCHAR,DD.DEDUCTEDDATE,103) AS DEDUCTEDDATE,                  
  DD.DEDUCTIONID,ROW_NUMBER() OVER(ORDER BY(SELECT 0)) AS ROWNUMBER                             
  FROM DEDUCTIONDETAIL DD WITH(NOLOCK)                                     
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID                                     
  INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID                              
  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID                              
  INNER JOIN ASSIGNBRANCH AB WITH(NOLOCK) ON AB.BRANCHID=CB.BRANCHID                      
  --INNER JOIN USERMASTER UM WITH(NOLOCK) ON UM.BRANCHID=CB.BRANCHID              
  WHERE DD.DEDUCTIONID=@DEDUCTIONID                                        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REVERSALAUDIT')
DROP PROCEDURE USP_TDS_REVERSALAUDIT
GO
CREATE PROCEDURE USP_TDS_REVERSALAUDIT                        
 @USERID INT,                          
 @BRANCHID INT                                         
AS             
DECLARE @CURRDATE SMALLDATETIME;            
DECLARE @SUBDATE VARCHAR(20);            
DECLARE @X VARCHAR(20);            
DECLARE @CURRDATETIME DATETIME;            
SET @CURRDATE=(SELECT DATEADD(MONTH,-1,GETDATE()))            
SET @X=CONVERT(VARCHAR,@CURRDATE,120)            
SET @SUBDATE=SUBSTRING(@X,0,8);            
SET @SUBDATE=@SUBDATE+'-'+'01';            
SET @CURRDATETIME =CONVERT(DATETIME,@SUBDATE,126);            
BEGIN  
 SELECT DD.DEDUCTEEID,DD.ADDITIONALFIELD1,DD.PAYMENTMADE,  
 CONVERT(NVARCHAR,DD.PAYMENTDATE,103) AS PAYMENTDATE,  
 CAST(DD.TAXRATE AS DECIMAL(10,2)) AS TAXRATE,  
 DD.TOTALDEDUCTED,CONVERT(NVARCHAR,DD.DEDUCTEDDATE,103) AS DEDUCTEDDATE,  
 DD.DEDUCTIONID,DD.TRANSSTATUS,DD.ISREVERSAL,DD.BRANCHID  
 INTO #DEDUCTION  
 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)  
 WHERE DD.BRANCHID=@BRANCHID AND DD.ISREVERSAL=1  
 SELECT D.NAME,D.PAN,D.DEDUCTEEID  
 INTO #DEDMST  
 FROM DEDUCTEE D WITH(NOLOCK)  
 WHERE BRANCHID=@BRANCHID  
 SELECT NE.DEDUCTEEID INTO #NONEMP  
 FROM NONEMPLOYEE NE WITH(NOLOCK)  
 INNER JOIN #DEDMST D  
 ON D.DEDUCTEEID=NE.DEDUCTEEID  
   SELECT                                                   
   CB.BRANCHNAME+'('+ CB.BRANCHCODE+')' AS BRANCHNAME,                            
   D.NAME,D.PAN,DD.ADDITIONALFIELD1,DD.PAYMENTMADE,DD.PAYMENTDATE,  
   DD.TAXRATE,DD.TOTALDEDUCTED,DD.DEDUCTEDDATE,  
   DD.DEDUCTIONID,ROW_NUMBER() OVER(ORDER BY(SELECT 0)) AS ROWNUMBER                           
   FROM #DEDUCTION DD                                   
   INNER JOIN #DEDMST D ON D.DEDUCTEEID = DD.DEDUCTEEID                                   
   INNER JOIN #NONEMP E ON D.DEDUCTEEID = E.DEDUCTEEID                            
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID                            
   INNER JOIN ASSIGNBRANCH AB WITH(NOLOCK) ON AB.BRANCHID=CB.BRANCHID                    
   --INNER JOIN USERMASTER UM WITH(NOLOCK) ON UM.BRANCHID=CB.BRANCHID            
   WHERE AB.USERID=@USERID                          
   AND ISNULL(DD.TRANSSTATUS,1)<>2  
   --AND DD.ISREVERSAL=1  
   --AND DD.PAYMENTDATE BETWEEN @CURRDATETIME AND GETDATE();  
   DROP TABLE #DEDMST  
   DROP TABLE #DEDUCTION  
   DROP TABLE #NONEMP  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_REVREQREMARKS')
DROP PROCEDURE USP_TDS_REVREQREMARKS
GO
CREATE PROCEDURE USP_TDS_REVREQREMARKS --670            
@DEDUCTIONID INT,          
@DEDUCTIONINFO VARCHAR(MAX),            
@REMARKS VARCHAR(MAX),    
@USERNAME VARCHAR(20)            
AS              
BEGIN         
IF(NOT EXISTS(SELECT DEDUCTIONID FROM REVERSALREQUEST WHERE DEDUCTIONID=@DEDUCTIONID))        
 BEGIN        
  INSERT INTO REVERSALREQUEST(DEDUCTIONID,DEDUCTIONINFO,REMARKS,USERNAME,REVERSALDATE)            
  VALUES(@DEDUCTIONID,@DEDUCTIONINFO,@REMARKS,@USERNAME,GETDATE())            
 END      
 ELSE      
 BEGIN      
 UPDATE REVERSALREQUEST      
 SET DEDUCTIONINFO=@DEDUCTIONINFO,REMARKS=@REMARKS      
 WHERE DEDUCTIONID=@DEDUCTIONID      
 END      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SALARYDETAILBULKDELETE')
DROP PROCEDURE USP_TDS_SALARYDETAILBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_SALARYDETAILBULKDELETE]
	@BRANCHID INT,
	@DEDUCTEEID INT = NULL
AS
	BEGIN
		IF @DEDUCTEEID IS NULL
			BEGIN
				/* DELETE FROM CHAPTERVIADETAIL BASED ON BRANCHID */
				DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL VI INNER JOIN SALARYDETAIL AS SD ON VI.SALARYDETAILID = SD.SALARYDETAILID
				WHERE  SD.BRANCHID = @BRANCHID;
				/* DELETE FROM SECTION16DETAIL BASED ON BRANCHID & DEDUCTEEID */
				DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL SEC16 INNER JOIN SALARYDETAIL AS SD ON SEC16.SALARYDETAILID=SD.SALARYDETAILID
				WHERE  SD.BRANCHID = @BRANCHID;
				/* DELETE FROM SALARYDETAIL BASED ON BRANCHID */
				DELETE FROM SALARYDETAIL WHERE BRANCHID = @BRANCHID;
			END
		ELSE
			BEGIN
				/* DELETE FROM CHAPTERVIADETAIL BASED ON BRANCHID & DEDUCTEEID */
				DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL VI INNER JOIN SALARYDETAIL SD ON VI.SALARYDETAILID = SD.SALARYDETAILID
				WHERE SD.BRANCHID = @BRANCHID AND SD.DEDUCTEEID = @DEDUCTEEID;
				/* DELETE FROM SECTION16DETAIL BASED ON BRANCHID & DEDUCTEEID */
				DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL SEC16 INNER JOIN SALARYDETAIL SD ON SEC16.SALARYDETAILID = SD.SALARYDETAILID
				WHERE  SD.BRANCHID = @BRANCHID AND SD.DEDUCTEEID = @DEDUCTEEID;
				/* DELETE FROM SALARYDETAIL BASED ON BRANCHID & DEDUCTEEID */
				DELETE FROM SALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SALARYDETAILBULKDELETEBASEDONBRANCH')
DROP PROCEDURE USP_TDS_SALARYDETAILBULKDELETEBASEDONBRANCH
GO
CREATE PROCEDURE USP_TDS_SALARYDETAILBULKDELETEBASEDONBRANCH
	@BRANCHID NVARCHAR(MAX),
	@REFERENCENO NVARCHAR(MAX)
AS
	BEGIN
		SELECT DISTINCT * INTO #TEMPBR FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHID,',') 
		SELECT DISTINCT * INTO #TEMPREF FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENO,',')  
		SELECT D.DEDUCTEEID, D.BRANCHID 
		INTO #TEMPDEDUCTEE
		FROM DEDUCTEE D
			INNER JOIN #TEMPBR TB 
				ON TB.DATA = D.BRANCHID
			INNER JOIN #TEMPREF TR
				ON TR.DATA = D.REFERENCENO			
		/* DELETE FROM CHAPTERVIADETAIL BASED ON BRANCHID */
		DELETE VI FROM CHAPTERVIADETAIL VI 
			INNER JOIN SALARYDETAIL SD 
				ON VI.SALARYDETAILID = SD.SALARYDETAILID
			INNER JOIN #TEMPDEDUCTEE TD 
				ON TD.DEDUCTEEID = SD.DEDUCTEEID
					AND TD.BRANCHID = SD.BRANCHID
		/* DELETE FROM SECTION16DETAIL BASED ON BRANCHID & DEDUCTEEID */
		DELETE SEC16 FROM SECTION16DETAIL SEC16 
			INNER JOIN SALARYDETAIL SD 
				ON SEC16.SALARYDETAILID=SD.SALARYDETAILID
			INNER JOIN #TEMPDEDUCTEE TD 
				ON TD.DEDUCTEEID = SD.DEDUCTEEID
					AND TD.BRANCHID = SD.BRANCHID
		/* DELETE FROM SALARYDETAIL BASED ON BRANCHID */
		DELETE SD FROM SALARYDETAIL SD
			INNER JOIN #TEMPDEDUCTEE TD 
				ON TD.DEDUCTEEID = SD.DEDUCTEEID
					AND TD.BRANCHID = SD.BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SALARYDETAILBULKDELETEPENSIONER')
DROP PROCEDURE USP_TDS_SALARYDETAILBULKDELETEPENSIONER
GO
CREATE PROCEDURE [USP_TDS_SALARYDETAILBULKDELETEPENSIONER]  
 @BRANCHID INT    
AS  
 BEGIN  
    /* DELETE FROM CHAPTERVIADETAIL BASED ON BRANCHID */  
    DELETE FROM CHAPTERVIADETAIL FROM CHAPTERVIADETAIL VI INNER JOIN SALARYDETAIL AS SD ON VI.SALARYDETAILID = SD.SALARYDETAILID
    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID  
    WHERE  SD.BRANCHID = @BRANCHID AND ISNULL(D.EMPTYPE,0) = 1;  
    /* DELETE FROM SECTION16DETAIL BASED ON BRANCHID & DEDUCTEEID */  
    DELETE FROM SECTION16DETAIL FROM SECTION16DETAIL SEC16 INNER JOIN SALARYDETAIL AS SD ON SEC16.SALARYDETAILID=SD.SALARYDETAILID  
    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID  
    WHERE  SD.BRANCHID = @BRANCHID AND ISNULL(D.EMPTYPE,0) = 1;  
    /* DELETE FROM SALARYDETAIL BASED ON BRANCHID */  
    DELETE FROM SALARYDETAIL FROM SALARYDETAIL SD
    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID  
    WHERE SD.BRANCHID = @BRANCHID AND ISNULL(D.EMPTYPE,0) = 1;   
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVE80CDETAILS')
DROP PROCEDURE USP_TDS_SAVE80CDETAILS
GO
CREATE PROCEDURE USP_TDS_SAVE80CDETAILS  
@CHAPTERVIADETAILID INT,  
@C80CID INT,  
@GROSS NUMERIC(13,2),  
@QUALIFYING NUMERIC(13,2),  
@DEDUCTIBLE NUMERIC(13,2)
AS
   BEGIN        
     INSERT INTO CVIA80CDET(CHAPTERVIADETID, C80CID, GROSS, QUALIFYING, DEDUCTIBLE)  
     VALUES(@CHAPTERVIADETAILID, @C80CID, @GROSS, @QUALIFYING, @DEDUCTIBLE)   
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEACCOMODATION')
DROP PROCEDURE USP_TDS_SAVEACCOMODATION
GO
CREATE PROCEDURE [USP_TDS_SAVEACCOMODATION]
@COMID INT,
@MONTHID INT = 0,
@PERKACCUNFURNISHED NUMERIC(13,2),
@PERKFURNISHEDVALUE NUMERIC(13,2),
@COSTOFFURNITURE NUMERIC(13,2),
@FURNITURERENTALS NUMERIC(13,2),
@PERQVALUEOFFURNITURE NUMERIC(13,2),
@PERKFURNISHEDTOTAL NUMERIC(13,2),
@RENTPAIDBYEMP NUMERIC(13,2),
@VALUEOFPERQUISITES NUMERIC(13,2)
AS
 BEGIN
DECLARE @TAXABLEPERKID INT;
 SET @TAXABLEPERKID = 0;
 IF EXISTS(SELECT TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK) WHERE PERKID = 1 AND COMID = @COMID)
   BEGIN
	SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK) WHERE PERKID = 1 AND COMID = @COMID
	UPDATE ACCOMODATION SET PERKACCUNFURNISHED = @PERKACCUNFURNISHED,PERKFURNISHEDVALUE = @PERKFURNISHEDVALUE,
      COSTOFFURNITURE = @COSTOFFURNITURE,FURNITURERENTALS = @FURNITURERENTALS,PERQVALUEOFFURNITURE = @PERQVALUEOFFURNITURE,
      PERKFURNISHEDTOTAL = @PERKFURNISHEDTOTAL, RENTPAIDBYEMP = @RENTPAIDBYEMP, VALUEOFPERQUISITES = @VALUEOFPERQUISITES
	 WHERE TAXABLEPERKID = @TAXABLEPERKID;
   END
 ELSE
   BEGIN
	  INSERT INTO TAXABLEPERQUISITE(MONTHID, COMID, PERKID, GROSSAMT, EXEMPTAMT, TAXABLEAMT)
	  VALUES(@MONTHID, @COMID, 1,0,0,0)
     SET @TAXABLEPERKID = SCOPE_IDENTITY();
	INSERT INTO ACCOMODATION (TAXABLEPERKID, PERKACCUNFURNISHED, PERKFURNISHEDVALUE, COSTOFFURNITURE, FURNITURERENTALS, PERQVALUEOFFURNITURE,
             PERKFURNISHEDTOTAL, RENTPAIDBYEMP, VALUEOFPERQUISITES)
	 VALUES(@TAXABLEPERKID, @PERKACCUNFURNISHED, @PERKFURNISHEDVALUE, @COSTOFFURNITURE, @FURNITURERENTALS, @PERQVALUEOFFURNITURE,
      @PERKFURNISHEDTOTAL, @RENTPAIDBYEMP, @VALUEOFPERQUISITES)
   END
      UPDATE TAXABLEPERQUISITE SET GROSSAMT =
			CASE WHEN @PERKACCUNFURNISHED > 0 THEN @PERKACCUNFURNISHED
				ELSE @PERKFURNISHEDTOTAL END, EXEMPTAMT = @RENTPAIDBYEMP,
      TAXABLEAMT = @VALUEOFPERQUISITES
     WHERE TAXABLEPERKID = @TAXABLEPERKID;
   SELECT @TAXABLEPERKID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEACKNO')
DROP PROCEDURE USP_TDS_SAVEACKNO
GO
CREATE PROCEDURE [USP_TDS_SAVEACKNO]
	@ACKID INT,
	@FORMID  INT,
	@BRANCHID INT,
	@QUARTER  INT,
	@ORGNUM VARCHAR(15)=NULL,
	@ORGFILEDDATE SMALLDATETIME=NULL,
	@ERETURNGENDATE SMALLDATETIME=NULL,
	@ISVALID BIT=NULL,
	@ISNILLRETURN BIT=NULL
AS
	BEGIN
		IF (@ACKID=-1)
			BEGIN
				IF((SELECT COUNT(ACKID) FROM ACKNO WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER)=0)
					BEGIN
						INSERT INTO ACKNO(FORMID,BRANCHID,[QUARTER],ERETURNGENDATE,ISVALID,ISNILLRETURN)
						VALUES (@FORMID,@BRANCHID,@QUARTER,@ERETURNGENDATE,@ISVALID,@ISNILLRETURN)
					END
				ELSE
					BEGIN
						UPDATE ACKNO SET ERETURNGENDATE=@ERETURNGENDATE,ISVALID=@ISVALID,ISNILLRETURN=@ISNILLRETURN
						WHERE  BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER;
					END
			END
		ELSE
			BEGIN
				UPDATE ACKNO SET FORMID=@FORMID,BRANCHID=@BRANCHID,[QUARTER]=@QUARTER,ORGNUM=@ORGNUM,ORGFILEDDATE=@ORGFILEDDATE
				WHERE  ACKID=@ACKID;
			END
		SELECT @ACKID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEACKNODETAILS')
DROP PROCEDURE USP_TDS_SAVEACKNODETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVEACKNODETAILS]
	@STATUSID INT,
	@ACKID INT,
	@REVNUM VARCHAR(15),
	@REVFILEDDATE SMALLDATETIME=NULL
AS
	BEGIN
		IF (@STATUSID=-1)
			BEGIN
				INSERT INTO ACKNOREV(ACKID,REVNUM,REVFILEDDATE)
				VALUES (@ACKID,@REVNUM,@REVFILEDDATE)
				SET @STATUSID=SCOPE_IDENTITY();
			END
		ELSE
			BEGIN
				UPDATE ACKNOREV SET REVNUM=@REVNUM,REVFILEDDATE=@REVFILEDDATE
				WHERE  ACKNOREVID=@STATUSID;
			END
		SELECT @ACKID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEACKNOWLEDGEMENTDETAIL')
DROP PROCEDURE USP_TDS_SAVEACKNOWLEDGEMENTDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_SAVEACKNOWLEDGEMENTDETAIL]  
 @ACKID INT,  
 @FORMID  INT,  
 @BRANCHID INT,  
 @QUARTER  INT,  
 @RECEIPTNO VARCHAR(8) = NULL,  
 @ORGNUM VARCHAR(15) = NULL,  
 @ORGFILEDDATE SMALLDATETIME = NULL,  
 @ERETURNGENDATE SMALLDATETIME = NULL,  
 @ISVALID BIT = NULL,  
 @ISNILLRETURN BIT = NULL,  
 @ISREQACTIVE BIT = 0  
AS  
 BEGIN      
  IF (@ACKID = -1)  
   BEGIN  
    IF EXISTS(SELECT ACKID FROM ACKNO WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER)  
     BEGIN  
      UPDATE ACKNO  
      SET    ORGNUM = @ORGNUM,ORGFILEDDATE = @ORGFILEDDATE,ERETURNGENDATE = @ERETURNGENDATE,ISVALID = @ISVALID,  
          ISNILLRETURN = @ISNILLRETURN,RECEIPTNO = @RECEIPTNO, ISREQACTIVE = @ISREQACTIVE  
      WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;  
     END  
    ELSE  
     BEGIN  
      INSERT INTO ACKNO(BRANCHID,FORMID,[QUARTER],ORGNUM,ORGFILEDDATE,ERETURNGENDATE,ISVALID,ISNILLRETURN,RECEIPTNO, ISREQACTIVE )   
      VALUES (@BRANCHID,@FORMID,@QUARTER,@ORGNUM,@ORGFILEDDATE,@ERETURNGENDATE,@ISVALID,@ISNILLRETURN,@RECEIPTNO, @ISREQACTIVE);  
      SET @ACKID = SCOPE_IDENTITY();  
     END  
   END
   ELSE IF (@ACKID = -2)  
   BEGIN  
    IF EXISTS(SELECT ACKID FROM ACKNO WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER)  
     BEGIN  
      UPDATE ACKNO  
      SET  ISREQACTIVE = @ISREQACTIVE  
      WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;  
     END    
      SET @ACKID = SCOPE_IDENTITY();   
   END    
  ELSE  
   BEGIN  
    UPDATE ACKNO   
    SET    ORGNUM = @ORGNUM,ORGFILEDDATE = @ORGFILEDDATE,RECEIPTNO = @RECEIPTNO, ISREQACTIVE = @ISREQACTIVE  
    WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND ACKID = @ACKID;  
   END  
  SELECT @ACKID;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEACKNOWLEDGEMENTNOFORCORR')
DROP PROCEDURE USP_TDS_SAVEACKNOWLEDGEMENTNOFORCORR
GO
CREATE PROCEDURE [USP_TDS_SAVEACKNOWLEDGEMENTNOFORCORR]
			@BRANCHID INT,
			@FORMID SMALLINT,
			@QUARTER SMALLINT,
			@ORGNUM VARCHAR(15),
			@ORGFILEDDATE SMALLDATETIME,
			@ISUPLOADED BIT=NULL
AS
BEGIN
	DECLARE @ACKID INT;
	SET @ACKID =-1;
	IF(@ISUPLOADED IS NOT NULL)
	BEGIN
		SELECT @ACKID=ACKID FROM ACKNO WITH(NOLOCK) 
		 WHERE BRANCHID=@BRANCHID 
		   AND FORMID=@FORMID 
		   AND QUARTER=@QUARTER
		IF(@ACKID<>-1)
		BEGIN
		UPDATE ACKNO SET --ORGNUM=@ORGNUM,ORGFILEDDATE=@ORGFILEDDATE,
		ISUPLOADED=@ISUPLOADED 
		 WHERE ACKID=@ACKID
		END
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEALLEMPLOYEESALARIES')
DROP PROCEDURE USP_TDS_SAVEALLEMPLOYEESALARIES
GO
CREATE PROCEDURE [dbo].[USP_TDS_SAVEALLEMPLOYEESALARIES]
@BRANCHID INT,  
@EXCLUDEINVALIDPAN BIT  
AS  
BEGIN  
 DECLARE @SQLQUERY NVARCHAR(MAX)  
  SET @SQLQUERY='INSERT INTO SALARYDETAIL
        SELECT DISTINCT D.DEDUCTEEID,D.BRANCHID,0.00 AS BASICSALARY,0.00 AS TAXABLEALLOWANCE,  
         0.00 AS PERKACCUNFURNISHED,0.00 AS  PERKFURNISHEDVALUE,0.00 AS  COSTOFFURNITURE,0.00 AS FURNITURERENTALS,  
         0.00 AS PERQVALUEOFFURNITURE,0.00 AS PERKFURNISHEDTOTAL,0.00 AS RENTPAIDBYEMP,0.00 AS VALUEOFPERQUISITES,0.00 AS CONVEYANCE ,  
         0.00 AS REMUNERATION,0.00 AS TAXABLELTC,0.00 AS OTHERBENEFITS,0.00 AS PFINEXCESSOF12PERC,0.00 AS EXCESSINTERESTCREDITED,0.00 AS TOTALPERQUISITE ,  
         0.00 AS TAXABLEPERQUISITES,0.00 AS  EXEMPTEDALLOWANCES,0.00 AS  GROSSSALARY,0.00 AS DEDUCTIONUS16,0.00 AS INCOMEFROMSALARIES,0.00 AS ISOTHERINCOMEDETAILSOPTED,  
         0.00 AS SALARYFROMPREVEMP,0.00 AS INCOMEFROMHOUSEPROPERTY,0.00 AS INCOMEFROMBUSINESS,0.00 AS CAPITALGAINS,0.00 AS INCOMEFROMOTHERSOURCES,  
         0.00 AS OTHERINCOME,0.00 AS GROSSTOTALINCOME,0.00 AS TOTALDEDUNDERCHAPTERVIA,0.00 AS TOTALTAXABLEINCOME,0.00 AS TAXONTOTALINCOME,0.00 AS SURCHARGE,  
         0.00 AS EDUCATIONCESS,0.00 AS TOTALINCOMETAXPAYABLE,0.00 AS RELIEFUS89,0.00 AS NETTAXPAYABLE,  
         MAIN.TDSITDEDUCTED,MAIN.TDSSURCHARGEDEDUCTED,  
         MAIN.EDUCESSDEDUCTED,0.00 AS PREVEMPINCOMETAX,0.00 AS PREVEMPSURCHARGE,0.00 AS PREVEMPCESS,0.00 AS MANUALINCOMETAX,0.00 AS MANUALSURCHARGE,  
         0.00 AS MANUALCESS,MAIN.TOTALTDS,MAIN.TAXPAYABLE, 0, 0, NULL AS HRACLAIM, NULL AS LANDLORDCOUNT, NULL AS PANLL1, NULL AS NAMELL1, NULL AS PANLL2, NULL AS NAMELL2, 
         NULL AS PANLL3, NULL AS NAMELL3, NULL AS PANLL4, NULL AS NAMELL4, NULL AS INTERESTPAID, NULL AS LENDERCOUNT, NULL AS PANLEND1, NULL AS NAMELEND1,
         NULL AS PANLEND2, NULL AS NAMELEND2, NULL AS PANLEND3, NULL AS NAMELEND3, NULL AS PANLEND4, NULL AS NAMELEND4, NULL AS SUPERANNFUND, NULL AS SAFNAME, NULL AS SAFFROMDATE,
         NULL AS SAFTODATE, NULL AS AMTREPAID, NULL AS SAFTAXRATE, NULL AS SAFTAXDEDUCTED, NULL AS SAFGROSS,
         NULL AS RTBRANCHID 
      FROM EMPLOYEE E WITH(NOLOCK) INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=E.DEDUCTEEID   
      INNER  JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID  
      LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID   
      LEFT JOIN SALARYDETAIL SD WITH(NOLOCK) ON D.DEDUCTEEID=SD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID  
      LEFT JOIN  
      (SELECT TD.DEDUCTEEID,ISNULL(SUM(TDD.INCOMETAX),0) AS TDSITDEDUCTED,0.00 AS TDSSURCHARGEDEDUCTED ,  
             ISNULL(SUM(TDD.EDUCATIONCESS),0)  AS EDUCESSDEDUCTED,  
             ISNULL(SUM(TDD.TOTALDEDUCTED),0) AS TOTALTDS,  
             -ISNULL(SUM(TDD.TOTALDEDUCTED),0) AS TAXPAYABLE             
       FROM DEDUCTEE TD WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL TDD WITH(NOLOCK) ON TD.DEDUCTEEID=TDD.DEDUCTEEID  
            INNER JOIN DEDCHALINK TDCL WITH(NOLOCK) ON TDD.DEDUCTIONID=TDCL.DEDUCTIONID  
      WHERE TDD.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND TDD.FORMID=1 GROUP BY TD.DEDUCTEEID,TDD.BRANCHID) MAIN ON MAIN.DEDUCTEEID=D.DEDUCTEEID  
   WHERE DD.FORMID=1 AND DD.QUARTER=4 AND D.BRANCHID='+CAST(@BRANCHID AS VARCHAR)+' AND SD.DEDUCTEEID IS NULL AND (DCL.DEDCHALINKID IS NOT NULL OR DD.TOTALDEDUCTED=0)'  
   IF(@EXCLUDEINVALIDPAN=1)  
       SET @SQLQUERY=@SQLQUERY+' AND D.PAN<>''PANNOTAVBL'' AND D.PAN<>''PANAPPLIED'' AND D.PAN<>''PANINVALID'''  
 EXEC SP_EXECUTESQL @SQLQUERY  
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEALLOWANCES')
DROP PROCEDURE USP_TDS_SAVEALLOWANCES
GO
CREATE PROCEDURE [USP_TDS_SAVEALLOWANCES] 
@COMID INT,    
@BRANCHID INT,    
@MONTH INT,    
@SALARYHEADID INT,
@GROSSAMOUNT1 NUMERIC(13,2),    
@GROSSAMOUNT2 NUMERIC(13,2),    
@GROSSAMOUNT3 NUMERIC(13,2) = NULL,
@BASIC NUMERIC(13,2) = NULL,    
@DA NUMERIC(13,2) = NULL,    
@HRA NUMERIC(13,2) = NULL,    
@EPF NUMERIC(13,2) = NULL,    
@EXEMPTAMOUNT NUMERIC(13,2),    
@NETAMT NUMERIC(13,2),
@RECOVERYAMT NUMERIC(13,2) = NULL
AS    
 BEGIN    
   DECLARE @SALDETAILID INT;    
   SET @SALDETAILID = -1;   
 IF NOT EXISTS(SELECT MONTHID FROM EMPWORKMONTH WITH(NOLOCK) WHERE MONTHID = @MONTH AND BRANCHID = @BRANCHID AND COMID = @COMID)    
	  BEGIN    
		   INSERT INTO EMPWORKMONTH(BRANCHID, COMID, MONTHID)    
		   VALUES(@BRANCHID, @COMID,@MONTH)
	  END 
 IF EXISTS(SELECT SALDETAILID FROM SALDETAIL WITH(NOLOCK) WHERE COMID = @COMID AND MONTHID = @MONTH AND SALARYHEADID = @SALARYHEADID)    
   BEGIN    
      SELECT @SALDETAILID = SALDETAILID FROM SALDETAIL WHERE COMID = @COMID AND MONTHID = @MONTH AND SALARYHEADID = @SALARYHEADID    
      UPDATE SALDETAIL SET GROSSAMT1= @GROSSAMOUNT1 , GROSSAMT2 = @GROSSAMOUNT2,GROSSAMT3 = @GROSSAMOUNT3,NETAMT = @NETAMT,    
           BASIC = @BASIC , DA = @DA, HRA = @HRA , EPF = @EPF, EXEMPTAMT = @EXEMPTAMOUNT,RECOVERYAMT = @RECOVERYAMT   
      WHERE SALDETAILID = @SALDETAILID    
   END  
 ELSE    
   BEGIN 
	  INSERT INTO SALDETAIL(MONTHID, COMID, SALARYHEADID, GROSSAMT1, GROSSAMT2, GROSSAMT3,EXEMPTAMT, BASIC, DA, HRA, EPF, NETAMT, RECOVERYAMT)    
	  VALUES(@MONTH, @COMID, @SALARYHEADID, @GROSSAMOUNT1, @GROSSAMOUNT2, @GROSSAMOUNT3, @EXEMPTAMOUNT, @BASIC, @DA, @HRA, @EPF, @NETAMT, @RECOVERYAMT)    
	  SET @SALDETAILID = SCOPE_IDENTITY();    
  END
  SELECT @SALDETAILID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEASSIGNBRANCH')
DROP PROCEDURE USP_TDS_SAVEASSIGNBRANCH
GO
-- AUTHOR:  <AUTHOR,,NAME>      
-- CREATE DATE: <CREATE DATE,,>      
-- DESCRIPTION: <DESCRIPTION,,>      
-- =============================================      
CREATE PROCEDURE USP_TDS_SAVEASSIGNBRANCH      
 @USERNAME VARCHAR(20),      
 @BRNCHID INT,      
 @ISINSERT CHAR(1)       
AS      
 DECLARE @USRID INT;          
 SET @USRID=(SELECT USERID FROM USERMASTER WHERE USERNAME=@USERNAME)          
 BEGIN            
  IF(@ISINSERT=1)            
   BEGIN            
    IF(NOT EXISTS(SELECT * FROM ASSIGNBRANCH WHERE BRANCHID=@BRNCHID))            
     BEGIN            
      INSERT INTO ASSIGNBRANCH(USERID,BRANCHID) VALUES(@USRID,@BRNCHID);            
     END     
    ELSE    
    BEGIN    
    UPDATE ASSIGNBRANCH SET USERID=@USRID WHERE BRANCHID=@BRNCHID;    
    END            
    END             
  ELSE            
   BEGIN            
          DELETE FROM ASSIGNBRANCH WHERE BRANCHID=@BRNCHID AND USERID=@USRID;            
   END            
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEASSIGNEDBRANCHDETAIL')
DROP PROCEDURE USP_TDS_SAVEASSIGNEDBRANCHDETAIL
GO
CREATE PROCEDURE USP_TDS_SAVEASSIGNEDBRANCHDETAIL --'sudip,145,1,sudip,68,1,sudip,316,0,sudip,11,1,sudip,353,0,sudip,232,1'     
 @USERINFO VARCHAR(MAX)      
AS       
DECLARE @ITERATOR INT;      
DECLARE @TOTALCOUNT INT;      
DECLARE @USERNAME VARCHAR(50);      
DECLARE @BRANCHID INT;      
DECLARE @ISINSERT INT;      
SET @ITERATOR=1;      
SELECT ROW_NUMBER() OVER(ORDER BY (SELECT 0)) AS ROW,DATA INTO #TEMP FROM dbo.UDF_TDS_SPLITSTRING(@USERINFO,',')      
SET @TOTALCOUNT=(SELECT COUNT(*) FROM #TEMP);           
WHILE(@ITERATOR<@TOTALCOUNT)      
BEGIN      
SET @USERNAME=(SELECT DATA FROM #TEMP WHERE ROW=@ITERATOR);      
SET @ITERATOR=@ITERATOR+1;      
SET @BRANCHID= CAST((SELECT DATA FROM #TEMP WHERE ROW=@ITERATOR)AS INT);      
SET @ITERATOR=@ITERATOR+1;      
SET @ISINSERT=CAST((SELECT DATA FROM #TEMP WHERE ROW=@ITERATOR) AS INT);      
SET @ITERATOR=@ITERATOR+1;      
 DECLARE @USRID INT;                
 SET @USRID=(SELECT USERID FROM USERMASTER WITH(NOLOCK) WHERE USERNAME=@USERNAME)                
 BEGIN                  
  IF(@ISINSERT=1)                  
   BEGIN                  
    IF(NOT EXISTS(SELECT * FROM ASSIGNBRANCH WITH(NOLOCK) WHERE BRANCHID=@BRANCHID))                  
     BEGIN                  
      INSERT INTO ASSIGNBRANCH(USERID,BRANCHID) VALUES(@USRID,@BRANCHID);                  
     END           
    ELSE          
    BEGIN          
    UPDATE ASSIGNBRANCH SET USERID=@USRID WHERE BRANCHID=@BRANCHID;          
    END                  
    END                   
  ELSE                  
   BEGIN                  
          DELETE FROM ASSIGNBRANCH WHERE BRANCHID=@BRANCHID AND USERID=@USRID;                  
   END                  
 END         
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEBANKAUDITTRAIL')
DROP PROCEDURE USP_TDS_SAVEBANKAUDITTRAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEBANKAUDITTRAIL]
@USERID INT,
@BANKID INT,
@AUDITTYPE INT,
@AUDITDATE DATETIME,
@AUDITREMARKS VARCHAR(500),
@BRANCH VARCHAR(MAX)=NULL
AS
  BEGIN
 DECLARE @AUDITID INT;
 SET @AUDITID =-1;
    IF(@AUDITREMARKS ='')
     BEGIN
  SELECT @AUDITREMARKS=@BRANCH+'^'+BANKNAME+'^'+BSRCODE+'^'+BRANCHNAME FROM REMITTINGBANK WITH(NOLOCK) WHERE BANKID=@BANKID
     END
    INSERT INTO REMITTINGBANKAUDIT(RECORDID, USERID, AUDITTYPE, AUDITDATE, AUDITREMARKS)
    VALUES (@BANKID, @USERID,@AUDITTYPE,CONVERT(VARCHAR(20),@AUDITDATE,120),@AUDITREMARKS)
    SET @AUDITID = SCOPE_IDENTITY();
 SELECT @AUDITID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEBANKCOUNTRYCODE')
DROP PROCEDURE USP_TDS_SAVEBANKCOUNTRYCODE
GO
CREATE PROCEDURE USP_TDS_SAVEBANKCOUNTRYCODE
@COUNTRYID INT,
@COUNTRYCODE VARCHAR(5),
@COUNTRYNAME VARCHAR(75),
@BANKCOUNTRYID INT
AS
  BEGIN
	 IF EXISTS(SELECT BANKCOUNTRYID FROM BANKCOUNTRYCODE WITH(NOLOCK) WHERE BANKCOUNTRYCODE = @COUNTRYCODE AND 
																													 BANKCOUNTRYID <> @BANKCOUNTRYID)
		   BEGIN
			 SET @BANKCOUNTRYID = -2;
		   END 
	 IF(@BANKCOUNTRYID <> -1)
	    BEGIN 
		   UPDATE BANKCOUNTRYCODE SET COUNTRYID = @COUNTRYID, BANKCOUNTRYCODE = @COUNTRYCODE, BANKCOUNTRYNAME = @COUNTRYNAME
		   WHERE BANKCOUNTRYID = @BANKCOUNTRYID  
		END
	 ELSE
		BEGIN
			 INSERT INTO BANKCOUNTRYCODE(COUNTRYID, BANKCOUNTRYCODE, BANKCOUNTRYNAME)
			 VALUES(@COUNTRYID, @COUNTRYCODE,@COUNTRYNAME) 
			 SET @BANKCOUNTRYID = SCOPE_IDENTITY();
		 END 
	 SELECT @BANKCOUNTRYID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEBANKFORMSACCESS')
DROP PROCEDURE USP_TDS_SAVEBANKFORMSACCESS
GO
CREATE PROCEDURE [USP_TDS_SAVEBANKFORMSACCESS]
	@BANKID INT,
	@BANKNAME VARCHAR(100),
	@BRANCHNAME VARCHAR(100),
	@BSRCODE VARCHAR(7)
AS
	BEGIN
		IF((SELECT COUNT(BSRCODE) FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BSRCODE AND BANKID<>@BANKID)>0)
			BEGIN
				SELECT @BANKID=BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BSRCODE;
			END
		ELSE
			BEGIN
				IF @BANKID=-1
					BEGIN
						INSERT INTO REMITTINGBANK(BANKNAME,BRANCHNAME,BSRCODE)
						VALUES(@BANKNAME,@BRANCHNAME,@BSRCODE)
						SET @BANKID=SCOPE_IDENTITY()
					END
				ELSE
					BEGIN
						UPDATE REMITTINGBANK SET BANKNAME=@BANKNAME,BRANCHNAME=@BRANCHNAME,BSRCODE=@BSRCODE
									WHERE BANKID=@BANKID
						END
			END
		SELECT @BANKID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEBULKCHALLANDETAIL')
DROP PROCEDURE USP_TDS_SAVEBULKCHALLANDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEBULKCHALLANDETAIL]
   @CHALLANID INT,
   @BRANCHID INT,
   @QUARTER TINYINT,
   @FORMID TINYINT,
   @ERETURNID INT,
   @LINKDEDCOUNT INT,
   @ISNILCHALLAN VARCHAR(1),
   @ISUPDATECHALLAN TINYINT,
   @MODEOFPAYMENT TINYINT,
   @BANKCHALLANNO VARCHAR(5),
   @LASTBANKCHALLANNO VARCHAR(5),
   @TRNVOUCHERNO VARCHAR(9),
   @LASTTRNVOUCHERNO VARCHAR(9),
   @BANKID INT,
   @LASTBANKID INT,
   @CHALLANPAIDDATE SMALLDATETIME=NULL,
   @LASTCHALLANPAIDDATE SMALLDATETIME=NULL,
   @DATEOFDEBIT SMALLDATETIME=NULL,
   @SECTIONID INT,
   @INCOMETAX NUMERIC(14,2),
   @SURCHARGE NUMERIC(14,2),
   @EDUCATIONCESS NUMERIC(14,2),
   @INTEREST NUMERIC(14,2),
   @PENALTY NUMERIC(14,2),
   @OTHERS NUMERIC(14,2),
   @CHALLANTOTAL NUMERIC(14,2),
   @LASTCHALLANTOTAL NUMERIC(14,2),
   @ISCOMPANY BIT,
   @CHEQUENO VARCHAR(15),
   @CHEQUEDATE SMALLDATETIME=NULL,
   @CHEQUEDRAWNON VARCHAR(50),
   @TVRECEIPTNUMBER VARCHAR(7),
   @TRANREFNO VARCHAR(20)
AS
 BEGIN
     DECLARE @SERIALNO INT
  IF @CHALLANID=-1
   BEGIN
    SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
    INSERT INTO CHALLANDETAIL(BRANCHID,FORMID,[QUARTER],ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,
            LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,
            DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
            ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TVRECEIPTNUMBER,TRANREFNO,SERIALNO,ISAUTOGENERATED,ISOLTASINCLUDED)
    VALUES(@BRANCHID,@FORMID,@QUARTER,@ERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,@ISUPDATECHALLAN,@MODEOFPAYMENT,@BANKCHALLANNO,
       @LASTBANKCHALLANNO,@TRNVOUCHERNO,@LASTTRNVOUCHERNO,@BANKID,@LASTBANKID,@CHALLANPAIDDATE,@LASTCHALLANPAIDDATE,
                      @DATEOFDEBIT,@SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@LASTCHALLANTOTAL,
       @ISCOMPANY,@CHEQUENO,@CHEQUEDATE,@CHEQUEDRAWNON,@TVRECEIPTNUMBER,@TRANREFNO,@SERIALNO+1,0,0)
    SET @CHALLANID=SCOPE_IDENTITY();
    IF(@CHALLANID>0)
     UPDATE LOCKQUARTER SET FLAG=0 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
                SELECT @CHALLANID;
   END
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEBULKCHALLANDETAILMONTHWISE')
DROP PROCEDURE USP_TDS_SAVEBULKCHALLANDETAILMONTHWISE
GO
CREATE PROCEDURE [USP_TDS_SAVEBULKCHALLANDETAILMONTHWISE]
   @CHALLANID INT,
   @BRANCHID INT,
   @QUARTER TINYINT,
   @ERETURNID INT,
   @LINKDEDCOUNT INT,
   @ISNILCHALLAN VARCHAR(1),
   @ISUPDATECHALLAN TINYINT,
   @MODEOFPAYMENT TINYINT,
   @BANKCHALLANNO VARCHAR(5),
   @LASTBANKCHALLANNO VARCHAR(5),
   @TRNVOUCHERNO VARCHAR(9),
   @LASTTRNVOUCHERNO VARCHAR(9),
   @BANKID INT,
   @LASTBANKID INT,
   @CHALLANPAIDDATE SMALLDATETIME=NULL,
   @LASTCHALLANPAIDDATE SMALLDATETIME=NULL,
   @DATEOFDEBIT SMALLDATETIME=NULL,
   @SECTIONID INT,
   @INCOMETAX NUMERIC(14,2),
   @SURCHARGE NUMERIC(14,2),
   @EDUCATIONCESS NUMERIC(14,2),
   @INTEREST NUMERIC(14,2),
   @PENALTY NUMERIC(14,2),
   @OTHERS NUMERIC(14,2),
   @CHALLANTOTAL NUMERIC(14,2),
   @LASTCHALLANTOTAL NUMERIC(14,2),
   @ISCOMPANY BIT,
   @CHEQUENO VARCHAR(15),
   @CHEQUEDATE SMALLDATETIME=NULL,
   @CHEQUEDRAWNON VARCHAR(50),
   @TVRECEIPTNUMBER VARCHAR(7),
   @TRANREFNO VARCHAR(20)
AS
 BEGIN
     DECLARE @SERIALNO INT
     DECLARE @FORMID INT
     SELECT @FORMID= FORMID FROM TAXSECTIONS WITH(NOLOCK) WHERE SECTIONID=@SECTIONID
		IF @CHALLANID=-1
			BEGIN
				SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
				INSERT INTO CHALLANDETAIL(BRANCHID,FORMID,[QUARTER],ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,
										  LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,
										  DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
										  ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TVRECEIPTNUMBER,TRANREFNO,SERIALNO,ISAUTOGENERATED,ISOLTASINCLUDED)
				VALUES(@BRANCHID,@FORMID,@QUARTER,@ERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,@ISUPDATECHALLAN,@MODEOFPAYMENT,@BANKCHALLANNO,
					  @LASTBANKCHALLANNO,@TRNVOUCHERNO,@LASTTRNVOUCHERNO,@BANKID,@LASTBANKID,@CHALLANPAIDDATE,@LASTCHALLANPAIDDATE,
                      @DATEOFDEBIT,@SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@LASTCHALLANTOTAL,
					  @ISCOMPANY,@CHEQUENO,@CHEQUEDATE,@CHEQUEDRAWNON,@TVRECEIPTNUMBER,@TRANREFNO,@SERIALNO+1,1,0)
				SET @CHALLANID=SCOPE_IDENTITY();
				IF(@CHALLANID>0)
					UPDATE LOCKQUARTER SET FLAG=0 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
                SELECT @CHALLANID;
			END
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECERTDETAIL')
DROP PROCEDURE USP_TDS_SAVECERTDETAIL
GO
CREATE PROCEDURE USP_TDS_SAVECERTDETAIL  
@CERTDETAILID INT,  
@DEDUCTEEID INT,  
@SECTIONID INT,  
@CERTNO VARCHAR(10),  
@RATE NUMERIC(8,2),  
@CERTLIMIT NUMERIC(13,2),  
@VALIDFROM SMALLDATETIME,   
@VALIDTO SMALLDATETIME  
AS  
   BEGIN  
	  IF(@CERTDETAILID = -1)  
	   BEGIN  
			INSERT INTO CERTDETAIL(DEDUCTEEID, SECTIONID, CERTNO, CERTLIMIT, TDSRATE, VALIDFROM, VALIDTO)  
			VALUES(@DEDUCTEEID, @SECTIONID, @CERTNO, @CERTLIMIT, @RATE, @VALIDFROM, @VALIDTO)  
			SET @CERTDETAILID = SCOPE_IDENTITY();  
	   END  
	  ELSE  
	   BEGIN  
			UPDATE CERTDETAIL SET SECTIONID = @SECTIONID, CERTNO = @CERTNO, CERTLIMIT = @CERTLIMIT, TDSRATE = @RATE, VALIDFROM = @VALIDFROM,  
					  VALIDTO = @VALIDTO  
			WHERE CERTDETAILID = @CERTDETAILID    
	   END  
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECHALLANAUDITTRAIL')
DROP PROCEDURE USP_TDS_SAVECHALLANAUDITTRAIL
GO
CREATE PROCEDURE [USP_TDS_SAVECHALLANAUDITTRAIL]
@USERID INT,
@CHALLANID INT = NULL,
@AUDITTYPE INT,
@AUDITDATE DATETIME,
@AUDITREMARKS VARCHAR(500),
@BRANCHID INT =NULL,
@FORMID INT = NULL,
@QUARTER INT = NULL
AS
  BEGIN
 DECLARE @AUDITID INT;
 SET @AUDITID =-1;
 IF(@CHALLANID IS NULL)
   BEGIN
  INSERT INTO CHALLANDETAILAUDIT(RECORDID, USERID, AUDITTYPE, AUDITDATE, AUDITREMARKS)
  SELECT CHALLANID, @USERID AS USERID, 3 AS AUDITTYPE, @AUDITDATE,
    CAST(BRANCHID AS VARCHAR) + '^' + CAST(FORMID AS VARCHAR) + '^'+ CAST(QUARTER AS VARCHAR)+'^'+
    CAST(CHALLANTOTAL AS VARCHAR)+ '^' + CAST(SECTIONID AS VARCHAR) + '^' + CAST(BANKCHALLANNO AS VARCHAR) + '^' +
    CASE WHEN CHALLANPAIDDATE IS NULL THEN 'NULL' ELSE CONVERT(VARCHAR(20),CHALLANPAIDDATE,103) END + '^'+ CAST(TRNVOUCHERNO AS VARCHAR)+'^' AS AUDITREMARKS
  FROM CHALLANDETAIL WITH(NOLOCK)
  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
  SET @AUDITID = SCOPE_IDENTITY();
   END
 ELSE
   BEGIN
   IF(@AUDITREMARKS = '')
   BEGIN
      SELECT @AUDITREMARKS = CAST(BRANCHID AS VARCHAR) + '^' + CAST(FORMID AS VARCHAR) + '^'+ CAST(QUARTER AS VARCHAR)+'^'+
    CAST(CHALLANTOTAL AS VARCHAR)+ '^' + CAST(SECTIONID AS VARCHAR) + '^' + CAST(BANKCHALLANNO AS VARCHAR) + '^' +
    CASE WHEN CHALLANPAIDDATE IS NULL THEN 'NULL' ELSE CONVERT(VARCHAR(20),CHALLANPAIDDATE,103) END + '^'+ CAST(TRNVOUCHERNO AS VARCHAR)+'^'
      FROM CHALLANDETAIL
      WHERE CHALLANID = @CHALLANID
   END
  INSERT INTO CHALLANDETAILAUDIT(RECORDID, USERID, AUDITTYPE, AUDITDATE, AUDITREMARKS)
  VALUES (@CHALLANID, @USERID,@AUDITTYPE,CONVERT(VARCHAR(20),@AUDITDATE,120),@AUDITREMARKS)
  SET @AUDITID = SCOPE_IDENTITY();
      END
    SELECT @AUDITID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECHALLANDETAIL')
DROP PROCEDURE USP_TDS_SAVECHALLANDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVECHALLANDETAIL]  
   @CHALLANID INT,  
   @BRANCHID INT,  
   @QUARTER TINYINT,  
   @FORMID TINYINT,  
   @ERETURNID INT,  
   @LINKDEDCOUNT INT,  
   @ISNILCHALLAN VARCHAR(1),  
   @ISUPDATECHALLAN TINYINT,  
   @MODEOFPAYMENT TINYINT,  
   @BANKCHALLANNO VARCHAR(5),  
   @LASTBANKCHALLANNO VARCHAR(5),  
   @TRNVOUCHERNO VARCHAR(9),  
   @LASTTRNVOUCHERNO VARCHAR(9),  
   @BANKID INT,  
   @LASTBANKID INT,  
   @CHALLANPAIDDATE SMALLDATETIME=NULL,  
   @LASTCHALLANPAIDDATE SMALLDATETIME=NULL,  
   @DATEOFDEBIT SMALLDATETIME=NULL,  
   @SECTIONID INT,  
   @INCOMETAX NUMERIC(14,2),  
   @SURCHARGE NUMERIC(14,2),  
   @EDUCATIONCESS NUMERIC(14,2),  
   @INTEREST NUMERIC(14,2),  
   @PENALTY NUMERIC(14,2),  
   @OTHERS NUMERIC(14,2),  
   @CHALLANTOTAL NUMERIC(14,2),  
   @LASTCHALLANTOTAL NUMERIC(14,2),  
   @ISCOMPANY BIT,  
   @CHEQUENO VARCHAR(15),  
   @CHEQUEDATE SMALLDATETIME=NULL,  
   @CHEQUEDRAWNON VARCHAR(50),  
   @TVRECEIPTNUMBER VARCHAR(7),  
   @TRANREFNO VARCHAR(20),
   @FEE NUMERIC(14,2) = NULL,
   @MINORHEAD INT = NULL  
AS  
 BEGIN  
     --FOR MAINTAINING RUNNING SERIAL NUMBER BASED ON BRANCH,FORM AND QUARTER  
     DECLARE @SERIALNO INT  
  IF @CHALLANID=-1  
   BEGIN  
       SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER  
    INSERT INTO CHALLANDETAIL(BRANCHID,FORMID,[QUARTER],ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,  
            LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,  
            DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,  
            ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TVRECEIPTNUMBER,TRANREFNO,SERIALNO,CINSTATUS, FEE, MINORHEAD)  
           VALUES(@BRANCHID,@FORMID,@QUARTER,@ERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,@ISUPDATECHALLAN,@MODEOFPAYMENT,@BANKCHALLANNO,  
            @LASTBANKCHALLANNO,@TRNVOUCHERNO,@LASTTRNVOUCHERNO,@BANKID,@LASTBANKID,@CHALLANPAIDDATE,@LASTCHALLANPAIDDATE,  
            @DATEOFDEBIT,@SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@LASTCHALLANTOTAL,  
            @ISCOMPANY,@CHEQUENO,@CHEQUEDATE,@CHEQUEDRAWNON,@TVRECEIPTNUMBER,@TRANREFNO,@SERIALNO+1,'NOT VERIFIED', @FEE , @MINORHEAD)  
    SET @CHALLANID=SCOPE_IDENTITY();  
   END  
  ELSE  
   BEGIN  
    UPDATE CHALLANDETAIL SET BRANCHID=@BRANCHID,FORMID=@FORMID,[QUARTER]=@QUARTER,ERETURNID=@ERETURNID,LINKDEDCOUNT=@LINKDEDCOUNT,ISNILCHALLAN=@ISNILCHALLAN,  
           ISUPDATECHALLAN=@ISUPDATECHALLAN,MODEOFPAYMENT=@MODEOFPAYMENT,BANKCHALLANNO=@BANKCHALLANNO,LASTBANKCHALLANNO=@LASTBANKCHALLANNO,  
           TRNVOUCHERNO=@TRNVOUCHERNO,LASTTRNVOUCHERNO=@LASTTRNVOUCHERNO,BANKID=@BANKID,LASTBANKID=@LASTBANKID,CHALLANPAIDDATE=@CHALLANPAIDDATE,  
           LASTCHALLANPAIDDATE=@LASTCHALLANPAIDDATE,DATEOFDEBIT=@DATEOFDEBIT,SECTIONID=@SECTIONID,INCOMETAX=@INCOMETAX,SURCHARGE=@SURCHARGE,  
           EDUCATIONCESS=@EDUCATIONCESS,INTEREST=@INTEREST,PENALTY=@PENALTY,OTHERS=@OTHERS,CHALLANTOTAL=@CHALLANTOTAL,LASTCHALLANTOTAL=@LASTCHALLANTOTAL,  
           ISCOMPANY=@ISCOMPANY,CHEQUENO=@CHEQUENO,CHEQUEDATE=@CHEQUEDATE,CHEQUEDRAWNON=@CHEQUEDRAWNON,  
           TVRECEIPTNUMBER=@TVRECEIPTNUMBER,TRANREFNO=@TRANREFNO,FEE = @FEE, MINORHEAD = @MINORHEAD
    WHERE CHALLANID=@CHALLANID;  
   END  
  SELECT @CHALLANID;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECHALLANDETAIL_F005')
DROP PROCEDURE USP_TDS_SAVECHALLANDETAIL_F005
GO
CREATE PROCEDURE [USP_TDS_SAVECHALLANDETAIL_F005]           
   @CHALLANID INT,            
   @BRANCHID INT,            
   @QUARTER TINYINT,            
   @FORMID TINYINT,            
   @ERETURNID INT,            
   @LINKDEDCOUNT INT,            
   @ISNILCHALLAN VARCHAR(1),            
   @ISUPDATECHALLAN TINYINT,            
   @MODEOFPAYMENT TINYINT,            
   @BANKCHALLANNO VARCHAR(5)=NULL,            
   @LASTBANKCHALLANNO VARCHAR(5)=NULL,            
   @TRNVOUCHERNO VARCHAR(9),            
   @LASTTRNVOUCHERNO VARCHAR(9),            
   @BSRCODE VARCHAR(7)=NULL,            
   @CHALLANPAIDDATE SMALLDATETIME=NULL,            
   @LASTCHALLANPAIDDATE SMALLDATETIME=NULL,              
   @SECTIONID INT,            
   @INCOMETAX NUMERIC(14,2)=NULL,            
   @SURCHARGE NUMERIC(14,2)=NULL,            
   @EDUCATIONCESS NUMERIC(14,2)=NULL,            
   @INTEREST NUMERIC(14,2)=NULL,            
   @PENALTY NUMERIC(14,2)=NULL,            
   @OTHERS NUMERIC(14,2)=NULL,            
   @CHALLANTOTAL NUMERIC(14,2)=NULL,            
   @LASTCHALLANTOTAL NUMERIC(14,2)=NULL,            
   @ISCOMPANY BIT,            
   @TVRECEIPTNUMBER VARCHAR(7),            
   @TRANREFNO VARCHAR(20) ,         
   @MINORHEAD INT=200        
AS           
 BEGIN           
 DECLARE @BANKID INT;         
 DECLARE @SERIALNO INT  ;          
    IF(EXISTS(SELECT BANKID FROM REMITTINGBANK WHERE BSRCODE=@BSRCODE))          
  BEGIN          
   SELECT @BANKID=BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BSRCODE;          
  END          
 ELSE          
  BEGIN          
   INSERT INTO REMITTINGBANK(BANKNAME,BRANCHNAME,BSRCODE) VALUES(@BSRCODE,@BSRCODE,@BSRCODE)          
   SET @BANKID=SCOPE_IDENTITY();          
  END           
     --FOR MAINTAINING RUNNING SERIAL NUMBER BASED ON BRANCH,FORM AND QUARTER            
  IF EXISTS(SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE (CHALLANPAIDDATE=@CHALLANPAIDDATE OR CHALLANPAIDDATE IS NULL) AND BANKCHALLANNO=@BANKCHALLANNO AND BANKID=@BANKID AND BRANCHID=@BRANCHID AND SECTIONID=@SECTIONID AND ISCOMPANY=@ISCOMPANY)      BEGIN        
   SELECT @CHALLANID=CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE CHALLANPAIDDATE=@CHALLANPAIDDATE AND BANKCHALLANNO=@BANKCHALLANNO AND BANKID=@BANKID AND BRANCHID=@BRANCHID  AND SECTIONID=@SECTIONID AND ISCOMPANY=@ISCOMPANY;        
    UPDATE CHALLANDETAIL SET CHALLANTOTAL=@CHALLANTOTAL,LASTCHALLANTOTAL=@CHALLANTOTAL,INCOMETAX=@INCOMETAX , SURCHARGE=@SURCHARGE, EDUCATIONCESS=@EDUCATIONCESS,MINORHEAD=@MINORHEAD      
    WHERE CHALLANID=@CHALLANID      
     END        
  ELSE        
 BEGIN                 
     SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER            
     INSERT INTO CHALLANDETAIL(BRANCHID,FORMID,[QUARTER],ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,            
            LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,            
           SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,            
            ISCOMPANY,TVRECEIPTNUMBER,TRANREFNO,SERIALNO,MINORHEAD)            
           VALUES(@BRANCHID,@FORMID,@QUARTER,@ERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,@ISUPDATECHALLAN,@MODEOFPAYMENT,@BANKCHALLANNO,            
            @LASTBANKCHALLANNO,@TRNVOUCHERNO,@LASTTRNVOUCHERNO,@BANKID,@BANKID,@CHALLANPAIDDATE,@LASTCHALLANPAIDDATE,            
            @SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@LASTCHALLANTOTAL,            
            @ISCOMPANY,@TVRECEIPTNUMBER,@TRANREFNO,@SERIALNO+1,@MINORHEAD)            
     SET @CHALLANID=SCOPE_IDENTITY();             
  END          
      SELECT @CHALLANID;            
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECHALLANDETAIL_F008')
DROP PROCEDURE USP_TDS_SAVECHALLANDETAIL_F008
GO
CREATE PROCEDURE [USP_TDS_SAVECHALLANDETAIL_F008]               
   @CHALLANID INT,                
   @BRANCHID INT,                
   @QUARTER TINYINT,                
   @FORMID TINYINT,                
   @ERETURNID INT,                
   @LINKDEDCOUNT INT,                
   @ISNILCHALLAN VARCHAR(1),                
   @ISUPDATECHALLAN TINYINT,                
   @MODEOFPAYMENT TINYINT,                
   @BANKCHALLANNO VARCHAR(9)=NULL,                
   @LASTBANKCHALLANNO VARCHAR(9)=NULL,                
   @TRNVOUCHERNO VARCHAR(9),                
   @LASTTRNVOUCHERNO VARCHAR(9),                
   @BSRCODE VARCHAR(7)=NULL,                
   @CHALLANPAIDDATE SMALLDATETIME=NULL,                
   @LASTCHALLANPAIDDATE SMALLDATETIME=NULL,                  
   @SECTIONID INT,                
   @INCOMETAX NUMERIC(14,2)=NULL,                
   @SURCHARGE NUMERIC(14,2)=NULL,                
   @EDUCATIONCESS NUMERIC(14,2)=NULL,                
   @INTEREST NUMERIC(14,2)=NULL,                
   @PENALTY NUMERIC(14,2)=NULL,                
   @OTHERS NUMERIC(14,2)=NULL,                
   @CHALLANTOTAL NUMERIC(14,2)=NULL,                
   @LASTCHALLANTOTAL NUMERIC(14,2)=NULL,                
   @ISCOMPANY BIT,                
   @TVRECEIPTNUMBER VARCHAR(7),                
   @TRANREFNO VARCHAR(20)              
AS               
 BEGIN               
 DECLARE @BANKID INT;             
 DECLARE @SERIALNO INT  ;              
    IF(EXISTS(SELECT BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BSRCODE))              
  BEGIN              
   SELECT @BANKID=BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BSRCODE;              
  END              
 ELSE              
  BEGIN              
   INSERT INTO REMITTINGBANK(BANKNAME,BRANCHNAME,BSRCODE) VALUES(@BSRCODE,@BSRCODE,@BSRCODE)              
   SET @BANKID=SCOPE_IDENTITY();              
  END               
     --FOR MAINTAINING RUNNING SERIAL NUMBER BASED ON BRANCH,FORM AND QUARTER                
  IF EXISTS(SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE CHALLANPAIDDATE=@CHALLANPAIDDATE AND BANKCHALLANNO=@BANKCHALLANNO AND BANKID=@BANKID AND BRANCHID=@BRANCHID  AND SECTIONID=@SECTIONID AND ISCOMPANY=@ISCOMPANY AND FORMID = @FORMID)             BEGIN            
    SELECT @CHALLANID=CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE CHALLANPAIDDATE=@CHALLANPAIDDATE AND BANKCHALLANNO=@BANKCHALLANNO AND BANKID=@BANKID AND BRANCHID=@BRANCHID  AND SECTIONID=@SECTIONID AND ISCOMPANY=@ISCOMPANY AND FORMID = @FORMID;         UPDATE CHALLANDETAIL SET CHALLANTOTAL=CHALLANTOTAL+@CHALLANTOTAL,LASTCHALLANTOTAL=LASTCHALLANTOTAL+@CHALLANTOTAL,INCOMETAX=INCOMETAX+@INCOMETAX , SURCHARGE=SURCHARGE+@SURCHARGE, EDUCATIONCESS=EDUCATIONCESS+@EDUCATIONCESS          
    WHERE CHALLANID=@CHALLANID          
     END            
  ELSE            
 BEGIN                     
     SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER                
     INSERT INTO CHALLANDETAIL(BRANCHID,FORMID,[QUARTER],ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,                
            LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,                
           SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,                
            ISCOMPANY,TVRECEIPTNUMBER,TRANREFNO,SERIALNO)                
           VALUES(@BRANCHID,@FORMID,@QUARTER,@ERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,@ISUPDATECHALLAN,@MODEOFPAYMENT,@BANKCHALLANNO,                
            @LASTBANKCHALLANNO,@TRNVOUCHERNO,@LASTTRNVOUCHERNO,@BANKID,@BANKID,@CHALLANPAIDDATE,@LASTCHALLANPAIDDATE,                
            @SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@LASTCHALLANTOTAL,        
  @ISCOMPANY,@TVRECEIPTNUMBER,@TRANREFNO,@SERIALNO+1)                
     SET @CHALLANID=SCOPE_IDENTITY();                 
END              
      SELECT @CHALLANID;                
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECHALLANDETAILFORMAT3')
DROP PROCEDURE USP_TDS_SAVECHALLANDETAILFORMAT3
GO
CREATE PROCEDURE [USP_TDS_SAVECHALLANDETAILFORMAT3]
	@CHALLANID INT,
	@BRANCHID INT,
	@QUARTER TINYINT,
	@FORMID TINYINT,
	@BANKCHALLANNO VARCHAR(5),
	@BANKID INT,
	@CHALLANPAIDDATE SMALLDATETIME=NULL,
	@DATEOFDEBIT SMALLDATETIME=NULL,
	@SECTIONID INT,
	@INCOMETAX NUMERIC(14,2),
	@SURCHARGE NUMERIC(14,2),
	@EDUCATIONCESS NUMERIC(14,2),
	@CHALLANTOTAL NUMERIC(14,2),
	@ISCOMPANY BIT
AS
	BEGIN
		IF NOT EXISTS(SELECT CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND BANKCHALLANNO=@BANKCHALLANNO AND BANKID =@BANKID AND CHALLANPAIDDATE=@CHALLANPAIDDATE)
		BEGIN
			DECLARE @SERIALNO INT;
			SELECT @SERIALNO =  ISNULL(MAX(SERIALNO),0)+1 FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
			INSERT INTO CHALLANDETAIL (BRANCHID,FORMID,[QUARTER],ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,
									   LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,
									   DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
									   ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TVRECEIPTNUMBER,TRANREFNO,SERIALNO)
			VALUES(@BRANCHID,@FORMID,@QUARTER,0,0,'Y',0,2,@BANKCHALLANNO,
				   @BANKCHALLANNO,'','',@BANKID,@BANKID,@CHALLANPAIDDATE,@CHALLANPAIDDATE,
				   @DATEOFDEBIT,@SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,0,0,0,@CHALLANTOTAL,@CHALLANTOTAL,
				   @ISCOMPANY,'',NULL,'','','',@SERIALNO)
			SET @CHALLANID=SCOPE_IDENTITY();
		END
		ELSE
		BEGIN
			SELECT @CHALLANID = CHALLANID FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND BANKCHALLANNO=@BANKCHALLANNO AND BANKID =@BANKID AND CHALLANPAIDDATE=@CHALLANPAIDDATE;
		END
		SELECT @CHALLANID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECHALLANF004')
DROP PROCEDURE USP_TDS_SAVECHALLANF004
GO
CREATE PROCEDURE [USP_TDS_SAVECHALLANF004]
 @CHALLANID INT,
	  @BRANCHID INT,
	  @QUARTER INT,
	  @FORMID INT,
	  @ERETURNID INT,
	  @LINKDEDCOUNT INT,
	  @ISNILCHALLAN VARCHAR(1),
	  @ISUPDATECHALLAN INT,
	  @MODEOFPAYMENT INT,
	  @BANKCHALLANNO VARCHAR(5),
	  @LASTBANKCHALLANNO VARCHAR(5),
	  @TRNVOUCHERNO VARCHAR(9)=NULL,
	  @LASTTRNVOUCHERNO VARCHAR(9)=NULL,
	  @BSRCODE VARCHAR(10),
	  @CHALLANPAIDDATE SMALLDATETIME=NULL,
	  @LASTCHALLANPAIDDATE SMALLDATETIME=NULL,
	  @DATEOFDEBIT SMALLDATETIME=NULL,
	  @SECTIONID INT,
	  @INCOMETAX NUMERIC(14,2),
	  @SURCHARGE NUMERIC(14,2),
	  @EDUCATIONCESS NUMERIC(14,2),
	  @INTEREST NUMERIC(14,2),
	  @PENALTY NUMERIC(14,2),
	  @OTHERS NUMERIC(14,2),
	  @CHALLANTOTAL NUMERIC(14,2),
	  @LASTCHALLANTOTAL NUMERIC(14,2),
	  @ISCOMPANY BIT,
	  @CHEQUENO VARCHAR(15)=NULL,
	  @CHEQUEDATE SMALLDATETIME=NULL,
	  @CHEQUEDRAWNON VARCHAR(50)=NULL,
	  @TVRECEIPTNUMBER VARCHAR(7)=NULL,
	  @TRANREFNO VARCHAR(20)=NULL
AS
	BEGIN
	 DECLARE @SERIALNO INT;	
	 DECLARE @BANKID INT;
	 SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
	 IF EXISTS(SELECT BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BSRCODE)	
		BEGIN
			SELECT @BANKID=BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BSRCODE;
		END
	ELSE
	BEGIN
		INSERT INTO REMITTINGBANK VALUES(@BSRCODE, @BSRCODE, @BSRCODE)
		SET @BANKID= SCOPE_IDENTITY();
	END	
	INSERT INTO CHALLANDETAIL(BRANCHID,FORMID,[QUARTER],ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,
										  LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,
										  DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
										  ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TVRECEIPTNUMBER,TRANREFNO,SERIALNO, MINORHEAD)
								   VALUES(@BRANCHID,@FORMID,@QUARTER,@ERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,@ISUPDATECHALLAN,@MODEOFPAYMENT,@BANKCHALLANNO,
										  @LASTBANKCHALLANNO,@TRNVOUCHERNO,@LASTTRNVOUCHERNO,@BANKID,@BANKID,@CHALLANPAIDDATE,@LASTCHALLANPAIDDATE,
										  @DATEOFDEBIT,@SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@LASTCHALLANTOTAL,
										  @ISCOMPANY,@CHEQUENO,@CHEQUEDATE,@CHEQUEDRAWNON,@TVRECEIPTNUMBER,@TRANREFNO,@SERIALNO+1,200)
				SET @CHALLANID=SCOPE_IDENTITY();
				SELECT 	@CHALLANID		
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveChallanForPayment')
DROP PROCEDURE USP_TDS_SaveChallanForPayment
GO
CREATE PROCEDURE USP_TDS_SaveChallanForPayment
    @MONTH INT,
    @FINANCIALYEAR INT,
    @CLIENTID INT
AS
BEGIN
    DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
    DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);	
    DECLARE @TEMPDATE DATETIME, @RESULT INT,@FORMID INT, @CHALLANID INT,@QUARTER INT,@BANKID INT,@ALLOW92A92B INT, @MONTHYEAR INT, @BSR VARCHAR(7);
    CREATE TABLE #TEMPPARKEDAMOUNT(MONTHYEAR INT,BRANCHID INT,FORMTYPE INT,ACCOUNTNO VARCHAR(20),AMOUNT NUMERIC(17,2))
    CREATE TABLE #DIFFERSMP (BRANCHID INT, FORMTYPE INT, FORMID INT)
	CREATE TABLE #DEDUCTIONDET (DEDUCTIONID INT,DEDUCTEEID INT,BRANCHID INT,FORMID INT,QUARTER INT,ENTRYTYPE INT,DEDUCTEDDATE SMALLDATETIME,EXCLUDEINAC BIT,SECTIONID INT,TOTALDEDUCTED NUMERIC(13,2),
					INCOMETAX NUMERIC(13,2),SURCHARGE NUMERIC(13,2),EDUCATIONCESS NUMERIC(13,2))
	-- 24Q -> 100, 26QI -> 200, 26QV -> 300, 26QVS -> 400, 27Q -> 500
    SET @TEMPDATE = GETDATE() ;
    SET @RESULT = 0;
    IF(@MONTH < 4)
	   SET @FINANCIALYEAR = @FINANCIALYEAR+1
    IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)
	   SET @QUARTER = 1
    ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)
	   SET @QUARTER = 2
    ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)
	   SET @QUARTER = 3
    ELSE 
	   SET @QUARTER = 4
    IF (@CLIENTID = 1 OR @CLIENTID = 9) 
	   SET @BSR = '0290179' 
    ELSE IF (@CLIENTID = 3) 
	   SET @BSR = '0321931' 
    ELSE IF (@CLIENTID = 5)
	   SET @BSR = '0242465' 
    ELSE IF (@CLIENTID = 7) 
	   SET @BSR = '0282930'
    ELSE IF (@CLIENTID = 8)
	   SET @BSR = '0341101'
    ELSE IF (@CLIENTID = 10)
	   SET @BSR = '0310589'
    ELSE IF (@CLIENTID = 11)
	   SET @BSR = '0331906' 
    ELSE IF (@CLIENTID = 12)
	   SET @BSR = '0360743'
	ELSE IF (@CLIENTID = 14)
	   SET @BSR = '0350218'
	ELSE IF (@CLIENTID = 15)
	   SET @BSR = '6320396'
    ELSE 
	   SET @BSR = '0130191'
    SELECT @BANKID = BANKID 
    FROM REMITTINGBANK WITH(NOLOCK)
    WHERE BSRCODE = @BSR
    SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS
    SET @MONTHYEAR = CONVERT(INT, (CONVERT(VARCHAR, @MONTH) + CONVERT(VARCHAR, @FINANCIALYEAR)))
    IF(@CLIENTID = -1)
	   BEGIN
		  INSERT INTO #TEMPPARKEDAMOUNT 
		  EXEC USP_TDS_GETREMAININGPARKEDAMOUNT @MONTH,@MONTHYEAR
	   END
    ELSE
	   BEGIN
		  INSERT INTO #TEMPPARKEDAMOUNT
		  SELECT MONTHYEAR, BRANCHID,
			CASE WHEN FORMTYPE = '24Q' THEN 100
				WHEN FORMTYPE = '26QI' THEN 200
				WHEN FORMTYPE = '26QV' THEN 300
				WHEN FORMTYPE = '26QVS' THEN 400
				ELSE 500 END AS FORMTYPE , ACCOUNTNO, AMOUNT FROM PARKEDAMOUNT WITH(NOLOCK) WHERE MONTHYEAR = @MONTHYEAR
	   END
    BEGIN TRANSACTION 
	   BEGIN TRY			
		  IF (EXISTS(SELECT ID FROM PARKEDAMOUNT (NOLOCK) WHERE MONTHYEAR = @MONTHYEAR) 
				AND EXISTS(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL (NOLOCK) WHERE MONTH(DEDUCTEDDATE) = @MONTH))
			 BEGIN
				SELECT @CHALLANID = ISNULL(MAX(BANKCHALLANNO) + 1, 60000) 
				FROM CHALLANDETAIL (NOLOCK)
				WHERE CONVERT(VARCHAR(8), CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112) 
				    AND ISAUTOGENERATED = 1 
				SELECT FORMID 
				INTO #CHALLAN 
				FROM CHALLANMAKEPAYMENT CMP
				    INNER JOIN TAXSECTIONS TS 
					   ON TS.SECTIONID = CMP.SECTIONID 
				GROUP BY FORMID
				SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
					INCOMETAX,SURCHARGE,EDUCATIONCESS,TRANSSTATUS
				INTO #DEDTEMP
				FROM DEDUCTIONDETAIL WITH(NOLOCK)
				WHERE MONTH(DEDUCTEDDATE) = @MONTH
				IF(@CLIENTID = 11)
				BEGIN
					INSERT INTO #DEDUCTIONDET
					SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
						INCOMETAX,SURCHARGE,EDUCATIONCESS
					FROM #DEDTEMP
					WHERE ISNULL(TRANSSTATUS,2) = 2
					EXCEPT
					SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
						INCOMETAX,SURCHARGE,EDUCATIONCESS
					FROM #DEDTEMP 
					WHERE ISNULL(TRANSSTATUS,2) = 2 AND FORMID = 2 AND ENTRYTYPE = 1 AND SECTIONID <> 5 
				END
				ELSE IF(@CLIENTID = 5)
					BEGIN
						INSERT INTO #DEDUCTIONDET 
						SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,
							ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
							INCOMETAX,SURCHARGE,EDUCATIONCESS
						FROM #DEDTEMP
						WHERE FORMID IN (1, 3)
							OR (FORMID = 2 AND SECTIONID = 5 AND ENTRYTYPE = 4)
							OR (FORMID = 2 AND SECTIONID <> 5 AND ENTRYTYPE <> 1)
					END
				ELSE
				BEGIN
					INSERT INTO #DEDUCTIONDET
					SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,
						ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
						INCOMETAX,SURCHARGE,EDUCATIONCESS
					FROM #DEDTEMP
				END
				IF OBJECT_ID('TEMPDB..#DEDTEMP') IS NOT NULL
					DROP TABLE #DEDTEMP
				SELECT DEDUCTEEID
				INTO #DEDUCTION
				FROM #DEDUCTIONDET DD WITH(NOLOCK) 
				    INNER JOIN #CHALLAN C ON DD.FORMID = C.FORMID
				WHERE MONTH(DEDUCTEDDATE) = @MONTH
				GROUP BY DEDUCTEEID
				SELECT * INTO #UNLINKED FROM
				(
				    SELECT DEDUCTIONID,DD.DEDUCTEEID,DD.BRANCHID,DD.FORMID,QUARTER,ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
					   INCOMETAX,SURCHARGE,EDUCATIONCESS 
				    FROM #DEDUCTIONDET DD WITH(NOLOCK)
					   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
				    WHERE MONTH(DEDUCTEDDATE) = @MONTH 
					   AND D.PAN LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) 
							 THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END 
					   AND NOT EXISTS
					   (
						  SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK) WHERE DEDUCTIONID = DD.DEDUCTIONID
					   )
				)U
				IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID IN (2, 3))
				    BEGIN
					   INSERT INTO @NONEMPLOYEE
					   SELECT D.DEDUCTEEID, NE.DEDUCTEECODE 
					   FROM DEDUCTEE D WITH(NOLOCK)
						  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
						  INNER JOIN #DEDUCTION DD ON D.DEDUCTEEID = DD.DEDUCTEEID
				    END
				IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID = 1)
				    BEGIN 
					   INSERT INTO @EMPLOYEE
					   SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE 
					   FROM DEDUCTEE D WITH(NOLOCK)
						  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
						  INNER JOIN #DEDUCTION DD ON D.DEDUCTEEID = DD.DEDUCTEEID			
				    END
				SELECT * INTO #DEDUCTEE FROM
				(
				    SELECT * FROM @EMPLOYEE
				    UNION 
				    SELECT * FROM @NONEMPLOYEE  
				)DE
				SELECT CB.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,CB.NOCHALLANPAY 
				INTO #BRANCHES
				FROM BRANCHDEDUCTORS BD1 WITH(NOLOCK)
				    INNER JOIN DEDUCTOR D1 WITH(NOLOCK) ON BD1.DEDUCTORID = D1.DEDUCTORID 
				    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON BD1.BRANCHID = CB.BRANCHID 
				WHERE BD1.QUARTER = @QUARTER AND UPPER(D1.TAN) <> 'TANAPPLIED'
				GROUP BY CB.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,CB.NOCHALLANPAY
				SELECT CB.BRANCHID, CB.PARENTBRANCHID,SUM(DD.TOTALDEDUCTED) AS TDS , 
					CASE WHEN DD.FORMID = 1 THEN 100 
					    WHEN DD.FORMID = 3 THEN 500 
					    WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN 200
					    WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN 400 
					    ELSE 300
					    END AS FORMTYPE
				INTO #RESULT
				 FROM COMPANYBRANCH CB WITH (NOLOCK) 
					INNER JOIN #UNLINKED DD WITH (NOLOCK)  ON CB.BRANCHID = DD.BRANCHID  
					INNER JOIN TAXSECTIONS TS WITH (NOLOCK)  ON TS.SECTIONID = DD.SECTIONID  
				 WHERE MONTH(DEDUCTEDDATE) = @MONTH 
				 GROUP BY CB.BRANCHID, TS.SECTIONID, DD.FORMID, CB.PARENTBRANCHID, DD.ENTRYTYPE
				SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.FORMTYPE , SUM(RESULT.TDS) AS TDS 
				INTO #FINAL
				FROM  #RESULT RESULT
				GROUP BY RESULT.BRANCHID, RESULT.FORMTYPE, RESULT.PARENTBRANCHID
				SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.FORMTYPE, ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT 
				INTO #SUPERFINAL
				FROM #FINAL FINAL
				   LEFT JOIN #TEMPPARKEDAMOUNT PA WITH (NOLOCK) 
					  ON PA.BRANCHID = FINAL.BRANCHID AND PA.FORMTYPE = FINAL.FORMTYPE  
				WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 
					  AND (MONTHYEAR = @MONTHYEAR OR  PA.MONTHYEAR IS NULL)    
				INSERT INTO #DIFFERSMP
				SELECT CB.BRANCHID, SUPERFINAL.FORMTYPE, 
				    CASE WHEN SUPERFINAL.FORMTYPE = 200 OR SUPERFINAL.FORMTYPE = 300 OR SUPERFINAL.FORMTYPE = 400 THEN 2 
					   WHEN SUPERFINAL.FORMTYPE = 100 THEN 1 
					   ELSE 3 
					   END AS [FORMID] 
				    FROM #SUPERFINAL SUPERFINAL 
					INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) 
					   ON SUPERFINAL.BRANCHID = CB.BRANCHID
					INNER JOIN COMPANYBRANCH CB1 WITH (NOLOCK) 
					   ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID 
					ORDER BY CB1.BRANCHID 
					IF ((SELECT COUNT(BRANCHID) FROM #DIFFERSMP)= 0)
					BEGIN
						INSERT INTO #DIFFERSMP (BRANCHID, FORMTYPE, FORMID) VALUES(0, 1000 , 0)
					END
					SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, BRANCHID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, 
					   DEDUCTEDDATE, FORMID, QUARTER,
					   CASE WHEN FORMID = 1 THEN 100 
						  WHEN FORMID = 3 THEN 500 
						  WHEN (@CLIENTID <> 11 AND FORMID=2 AND SECTIONID=5 AND ENTRYTYPE=4) OR (@CLIENTID = 11 AND FORMID=2 AND SECTIONID=5) THEN 200
						  WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID <> 5) THEN 400 
						  ELSE 300 
						  END AS FORMTYPE, DE.DEDUCTEECODE,
					   CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 1 
						  WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE <> 4 AND SECTIONID NOT IN (5, 17)) THEN 0
						  WHEN (@CLIENTID <> 1 AND (ENTRYTYPE=4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5,17)))) THEN 1 ELSE 0 END ISFINACLE 
				    INTO #REQDATA 
				    FROM #UNLINKED DD WITH(NOLOCK)
					   INNER JOIN #DEDUCTEE DE ON DD.DEDUCTEEID = DE.DEDUCTEEID
					SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,
							 TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,
							 SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(DD.TOTALDEDUCTED) TOTALDEDUCTED,
							 0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID, ISFINACLE
					INTO #TEMPRESULT
						  FROM #REQDATA DD
							 INNER JOIN #BRANCHES CB ON CB.BRANCHID = DD.BRANCHID												
							 INNER JOIN TAXSECTIONS TS WITH (NOLOCK)  ON DD.SECTIONID = TS.SECTIONID --AND TS.FORMID = DD.FORMID	
							 LEFT JOIN #DIFFERSMP DFL WITH (NOLOCK)  ON DD.BRANCHID = DFL.BRANCHID AND DD.FORMTYPE = DFL.FORMTYPE
						  WHERE DD.TOTALDEDUCTED > 0 
							 AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
							 AND DD.QUARTER = @QUARTER							
							 AND DFL.BRANCHID IS NULL
						  GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID, ISFINACLE
					SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, DEDUCTEECODE, 
						  ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,
						  ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, 
						  (ISNULL(CEILING(SUM(INCOMETAX)), 0) + ISNULL(CEILING(SUM(SURCHARGE)), 0) + ISNULL(CEILING(SUM(EDUCATIONCESS)),0)) TOTALDEDUCTED, 
						  MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE
					INTO #TEMPQ
					   FROM #TEMPRESULT RESULT
					   GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE
				    SELECT BRANCHNAME, Q.BRANCHID, Q.SECTIONID, SECTIONNAME, Q.DEDUCTEECODE, 
					   INCOMETAX, SURCHARGE, EDUCATIONCESS, Q.TOTALDEDUCTED, HASPARTPAYMENT, Q.QUARTER, FORMID, ISFINACLE 
				    INTO #TEMPSMP
				    FROM #TEMPQ Q
				    INNER JOIN CHALLANMAKEPAYMENT CMP WITH (NOLOCK)  
					   ON Q.BRANCHID = CMP.BRANCHID AND Q.SECTIONID = CMP.SECTIONID 
						  AND Q.QUARTER = CMP.QUARTER AND Q.DEDUCTEECODE = CMP.DEDUCTEECODE 
						  AND Q.TOTALDEDUCTED = CMP.TOTALDEDUCTED
				    EXEC('ALTER TABLE #TEMPSMP ADD CHALLANID INT IDENTITY(' + @CHALLANID + ', 1)')
					SELECT BRANCHID, FORMID, QUARTER, MAX(SERIALNO) AS SERIALNO
					INTO #TEMPY 
					 FROM CHALLANDETAIL WITH (NOLOCK) 
					 GROUP BY BRANCHID, FORMID, QUARTER
					SELECT ROW_NUMBER() OVER (PARTITION BY T.BRANCHID, T.FORMID, T.QUARTER ORDER BY T.BRANCHID) AS NUM,
						  SERIALNO, CHALLANID, T.BRANCHID, SECTIONID,
						  DEDUCTEECODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED,
						  T.FORMID, T.QUARTER 
					INTO #TEMPDATA
					   FROM #TEMPSMP T 
						  LEFT JOIN #TEMPY Y
						  ON T.BRANCHID = Y.BRANCHID AND T.FORMID = Y.FORMID AND T.QUARTER = Y.QUARTER  
				    /* INSERT INTO CHALLAN*/					
				    INSERT INTO CHALLANDETAIL (SERIALNO, BRANCHID, QUARTER, FORMID, ERETURNID, LINKDEDCOUNT, ISNILCHALLAN, 
					   ISUPDATECHALLAN, MODEOFPAYMENT, BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, 
					   CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, 
					   PENALTY, OTHERS, CHALLANTOTAL, LASTCHALLANTOTAL, ISCOMPANY, CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, 
					   TVRECEIPTNUMBER, ISAUTOGENERATED, ISOLTASINCLUDED, TEMPDATE, ISTTUMINCLUDED, MINORHEAD)                      
				    SELECT (NUM + ISNULL(SERIALNO, 0)) AS SERIALNO, BRANCHID, QUARTER, FORMID, 0 AS ERETURNID, 0 AS LINKEDCOUNT, 'N' AS ISNILLCHALLAN,
					   0 AS ISUPDATECHALLAN, 2 AS MODEOFPAYMENT, CHALLANID AS BANKCHALLANNO, CHALLANID AS LASTBANKCHALLANNO, '' AS TRNVOUCHERNO,
					   '' AS LASTTRNVOUCHERNO, @BANKID AS BANKID, @BANKID AS LASTBANKID, @TEMPDATE AS CHALLANPAIDDATE, @TEMPDATE AS CHALLANPAIDDATE,
					   NULL AS DATEOFDEBIT, CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID, INCOMETAX, SURCHARGE, 
					   EDUCATIONCESS, 0 INTEREST, 0 PENALTY, 0 OTHERS, TOTALDEDUCTED AS CHALLANTOTAL,
					   TOTALDEDUCTED AS LASTCHALLANTOTAL, CASE WHEN DEDUCTEECODE = 2 THEN 0 ELSE 1 END AS ISCOMPANY,
					   '' CHEQUENO, NULL CHEQUEDATE, '' CHEQUEDRAWNON, '' TRANREFNO, '' TVRECEIPTNUMBER, 1 AS ISAUTOGENERATED, 
					   0 AS ISOLTASINCLUDED, @TEMPDATE, 0 AS ISTTUMINCLUDED, 200 AS MINORHEAD
				    FROM #TEMPDATA DATA
				    /*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/
				    SELECT DD.DEDUCTIONID, FORMID, TOTALDEDUCTED, DEDUCTEEID, SECTIONID, BRANCHID, DEDUCTEDDATE, 
					   CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 1 
						  WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE <> 4 AND SECTIONID NOT IN (5, 17)) THEN 0
						  WHEN (@CLIENTID <> 1 AND (ENTRYTYPE=4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5,17)))) THEN 1 ELSE 0 END ISFINACLE 
				    INTO #UDED
				    FROM #UNLINKED DD WITH (NOLOCK)
				    WHERE MONTH(DEDUCTEDDATE) = @MONTH
				  SELECT CHALLANID, BANKCHALLANNO, CHALLANPAIDDATE 
					INTO #TEMPCHALL
				  FROM CHALLANDETAIL WITH (NOLOCK)  
				  WHERE CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112)
					 AND ISAUTOGENERATED = 1
				SELECT DD.DEDUCTIONID, CHALL.CHALLANID, DD.BRANCHID AS BRANCHID
				INTO #TEMPDEDCHALINK
				    FROM #UDED DD
					   INNER JOIN #DEDUCTEE D WITH (NOLOCK) 
						  ON D.DEDUCTEEID=DD.DEDUCTEEID 
					   INNER JOIN #TEMPSMP T WITH (NOLOCK) 
						  ON DD.BRANCHID = T.BRANCHID 
							 AND DD.SECTIONID = T.SECTIONID 
							 AND (ISNULL(D.DEDUCTEECODE,2) = T.DEDUCTEECODE) 
							 AND DD.ISFINACLE = T.ISFINACLE
					   LEFT JOIN #DIFFERSMP DL WITH (NOLOCK) 
						  ON DD.BRANCHID = DL.BRANCHID 
							 AND DD.FORMID = DL.FORMID
					   INNER JOIN #TEMPCHALL CHALL ON CHALL.BANKCHALLANNO = T.CHALLANID
					   WHERE DD.TOTALDEDUCTED > 0 
						  AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
					   GROUP BY DD.DEDUCTIONID, CHALL.CHALLANID, DD.BRANCHID
				    INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID) 
				    SELECT DEDUCTIONID, CHALLANID, BRANCHID AS BRANCHID
				    FROM #TEMPDEDCHALINK
				    SET @RESULT = 1
			 END
			 COMMIT 
		  END TRY	
		  BEGIN CATCH
			 SET @RESULT = -1
			 ROLLBACK
		  END CATCH
    IF (@RESULT = 1)
	   BEGIN
		  UPDATE CHALLANDETAIL SET CHALLANPAIDDATE = NULL, LASTCHALLANPAIDDATE = NULL,
			 BANKCHALLANNO = NULL, LASTBANKCHALLANNO = NULL 
		  WHERE ISAUTOGENERATED = 1 
			 AND TEMPDATE = @TEMPDATE
		  DELETE FROM CHALLANMAKEPAYMENT
	   END
    IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNT') IS NOT NULL
	   DROP TABLE #TEMPPARKEDAMOUNT
    IF OBJECT_ID('TEMPDB..#CHALLAN') IS NOT NULL
	   DROP TABLE #CHALLAN
    IF OBJECT_ID('TEMPDB..#DEDUCTIONDET') IS NOT NULL
	   DROP TABLE #DEDUCTIONDET
    IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
	   DROP TABLE #DEDUCTION
    IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
	   DROP TABLE #DEDUCTEE
    IF OBJECT_ID('TEMPDB..#UDED') IS NOT NULL
	   DROP TABLE #UDED
    IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
	   DROP TABLE #UNLINKED
    IF OBJECT_ID('TEMPDB..#REQDATA') IS NOT NULL
	   DROP TABLE #REQDATA
    IF OBJECT_ID('TEMPDB..#BRANCHES') IS NOT NULL
	   DROP TABLE #BRANCHES
    IF OBJECT_ID('TEMPDB..#DIFFERSMP') IS NOT NULL
	   DROP TABLE #DIFFERSMP
    IF OBJECT_ID('TEMPDB..#TEMPSMP') IS NOT NULL
	   DROP TABLE #TEMPSMP
    IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL
	   DROP TABLE #RESULT
	IF OBJECT_ID('TEMPDB..#TEMPRESULT') IS NOT NULL
	   DROP TABLE #TEMPRESULT
    IF OBJECT_ID('TEMPDB..#FINAL') IS NOT NULL
	   DROP TABLE #FINAL
    IF OBJECT_ID('TEMPDB..#SUPERFINAL') IS NOT NULL
	   DROP TABLE #SUPERFINAL
	IF OBJECT_ID('TEMPDB..#TEMPQ') IS NOT NULL
	   DROP TABLE #TEMPQ
	IF OBJECT_ID('TEMPDB..#TEMPY') IS NOT NULL
	   DROP TABLE #TEMPY
	IF OBJECT_ID('TEMPDB..#TEMPDATA') IS NOT NULL
	   DROP TABLE #TEMPDATA
	IF OBJECT_ID('TEMPDB..#TEMPCHALL') IS NOT NULL
	   DROP TABLE #TEMPCHALL
	IF OBJECT_ID('TEMPDB..#TEMPDEDCHALINK') IS NOT NULL
	   DROP TABLE #TEMPDEDCHALINK   
    SELECT @RESULT
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveChallanForPayment02')
DROP PROCEDURE USP_TDS_SaveChallanForPayment02
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveChallanForPayment02] 
    @MONTH INT,
    @CLIENTID INT,          
    @FINANCIALYEAR INT        
AS          
BEGIN          
    DECLARE @TEMPDATE DATETIME;   
    DECLARE @RESULT INT,@CHALLANID INT,@BANKID INT,@QUARTER INT,@ALLOW92A92B INT,@MONTHYEAR VARCHAR(6);
    CREATE TABLE #DIFFERSMP (BRANCHID INT, FORMTYPE VARCHAR(5), FORMID INT)	
    BEGIN TRANSACTION           
	   BEGIN TRY       
		  SET @RESULT = 0  
		  SET @TEMPDATE = GETDATE() ;  
		  IF(@MONTH < 4)          
			 SET @FINANCIALYEAR = @FINANCIALYEAR + 1     
		  IF (EXISTS(SELECT ID FROM PARKEDAMOUNT WITH(NOLOCK) WHERE MONTHYEAR = CONVERT(INT, (CONVERT(VARCHAR, @MONTH) + CONVERT(VARCHAR, @FINANCIALYEAR)))) 
			 AND EXISTS(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE MONTH(DEDUCTEDDATE) = @MONTH))
		  BEGIN             
			 SELECT @CHALLANID = ISNULL(MAX(BANKCHALLANNO) + 1, 1) 
			 FROM CHALLANDETAIL WITH(NOLOCK) 
			 WHERE CONVERT(VARCHAR(8), CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112) 
				AND ISAUTOGENERATED = 1           
			 IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)          
				SET @QUARTER = 1          
			 ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)          
				SET @QUARTER = 2          
			 ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)          
				SET @QUARTER = 3          
			 ELSE           
				SET @QUARTER = 4  
			 SELECT @BANKID = BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE = CASE WHEN @CLIENTID = 6 THEN '0350218' ELSE '0261632' END         
			 SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS WITH(NOLOCK)            
			 SET @MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR)          
			 SELECT *
			 INTO #DEDUCTIONDET
			 FROM DEDUCTIONDETAIL WITH(NOLOCK)
			 WHERE MONTH(DEDUCTEDDATE) = @MONTH 
			 SELECT * INTO #UNLINKED    
			 FROM    
			 (
				 SELECT DEDUCTIONID FROM #DEDUCTIONDET WITH(NOLOCK) WHERE MONTH(DEDUCTEDDATE) = @MONTH AND FORMID IN (2,3)    
				 EXCEPT    
				 SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK)    
			 ) UD       
			 INSERT INTO #DIFFERSMP
			 SELECT CB.BRANCHID, SUPERFINAL.FORMTYPE,           
				CASE WHEN SUPERFINAL.FORMTYPE = '26QI' OR SUPERFINAL.FORMTYPE = '26QV' THEN 2 
				    WHEN SUPERFINAL.FORMTYPE = '24Q' THEN 1 ELSE 3 END AS [FORMID]  
			 FROM 
			 (            
				SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.FORMTYPE, ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT 
				FROM 
				(            
				    SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.SECTIONID AS FORMTYPE, SUM(RESULT.TDS) AS TDS 
				    FROM 
				    (            
					   SELECT CB.BRANCHID, CB.PARENTBRANCHID,           
						  CASE WHEN DD.FORMID = 1 THEN '24Q' --WHEN DD.FORMID = 3 THEN '27Q'           
							 WHEN (DD.FORMID = 3 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 17) THEN '27Q'           
							 WHEN (TS.SECTIONID = 17 AND DD.ENTRYTYPE = 1 ) THEN '27QV'  
							 WHEN (DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) THEN '26QI' ELSE '26QV' END AS SECTIONID,          
							 SUM(DD.TOTALDEDUCTED) AS TDS   
					   FROM #DEDUCTIONDET DD WITH(NOLOCK)           
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID
						  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID            
						  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = DD.DEDUCTEEID             
						  INNER JOIN #UNLINKED DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID   
						  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID            
					   WHERE MONTH(DD.DEDUCTEDDATE) = @MONTH          
					   GROUP BY CB.BRANCHID, TS.SECTIONID, DD.FORMID, CB.PARENTBRANCHID, DD.ENTRYTYPE            
				    ) AS RESULT 
				    GROUP BY RESULT.BRANCHID, RESULT.SECTIONID, RESULT.PARENTBRANCHID          
				) FINAL    
				LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK) ON PA.BRANCHID = FINAL.BRANCHID AND PA.FORMTYPE = FINAL.FORMTYPE             
				WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 AND (MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL)           
			 ) SUPERFINAL            
			 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON SUPERFINAL.BRANCHID = CB.BRANCHID          
			 INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID           
			 ORDER BY CB1.BRANCHID
 			IF ((SELECT COUNT(BRANCHID) FROM #DIFFERSMP)= 0)
				BEGIN
					INSERT INTO #DIFFERSMP (BRANCHID, FORMTYPE, FORMID) VALUES(0, 'ABC', 0)
				END           
			 SELECT BRANCHNAME, Q.BRANCHID, Q.SECTIONID, SECTIONNAME, ISNULL(Q.DEDUCTEECODE, 1) AS DEDUCTEECODE,           
				INCOMETAX, SURCHARGE, EDUCATIONCESS, Q.TOTALDEDUCTED, HASPARTPAYMENT, Q.QUARTER, FORMID, ISFINACLE     
			 INTO #TEMPSMP          
			 FROM           
			 (          
				SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, DEDUCTEECODE,           
				    ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,          
				    ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, ISNULL(CEILING(SUM(TOTALDEDUCTED)), 0) TOTALDEDUCTED,           
				    MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE          
				FROM           
				(          
				    SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,          
					   TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, NE.DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,          
					   SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(DD.TOTALDEDUCTED) TOTALDEDUCTED,          
					   0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID, ISFINACLE          
				    FROM           
				    (          
					   SELECT DEDUCTEEID, DEDUCTIONID, BRANCHID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, 
						  DEDUCTEDDATE, FORMID, QUARTER,          
						  CASE WHEN FORMID = 1 THEN '24Q' --WHEN FORMID = 3 THEN '27Q'           
    							 WHEN (FORMID = 3 AND ENTRYTYPE = 4 AND SECTIONID = 17) THEN '27Q'            
							 WHEN (SECTIONID = 17 AND ENTRYTYPE = 1) THEN '27QV' 
							 WHEN (FORMID=2 AND SECTIONID=5 AND ENTRYTYPE=4) THEN '26QI' ELSE '26QV' END AS FORMTYPE,           
						  CASE WHEN ENTRYTYPE=4 THEN 1 ELSE 0 END ISFINACLE 
					   FROM #DEDUCTIONDET WITH(NOLOCK)          
				    ) DD	        
					   INNER JOIN #UNLINKED DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID     
					   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID          
					   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID          
					   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID AND TS.FORMID = DD.FORMID           
					   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID           
					   LEFT JOIN #DIFFERSMP DFL WITH(NOLOCK) ON DD.BRANCHID = DFL.BRANCHID AND DD.FORMTYPE = DFL.FORMTYPE          
				    WHERE DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH          
					   AND CB.BRANCHID IN 
					   (
						  SELECT BRANCHID 
						  FROM BRANCHDEDUCTORS BD1 WITH(NOLOCK) 
							 INNER JOIN DEDUCTOR D1 WITH(NOLOCK) ON BD1.DEDUCTORID = D1.DEDUCTORID           
						  WHERE BD1.QUARTER = @QUARTER AND UPPER(D1.TAN) <> 'TANAPPLIED'
					   )
					   AND DFL.BRANCHID IS NULL           
				    GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID, ISFINACLE             
				) RESULT WHERE FORMID <> 1          
				GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE          
			 ) Q          
			 INNER JOIN CHALLANMAKEPAYMENT CMP WITH(NOLOCK)           
				ON Q.BRANCHID = CMP.BRANCHID AND Q.SECTIONID = CMP.SECTIONID 
				 AND Q.QUARTER = CMP.QUARTER AND Q.DEDUCTEECODE = CMP.DEDUCTEECODE         
				    AND Q.TOTALDEDUCTED = CMP.TOTALDEDUCTED       
			 EXEC('ALTER TABLE #TEMPSMP ADD CHALLANID INT IDENTITY(' + @CHALLANID + ', 1)')            
			 /* INSERT INTO CHALLAN*/          
			 INSERT INTO CHALLANDETAIL (SERIALNO, BRANCHID, QUARTER, FORMID, ERETURNID, LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT,           
				BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE,           
				LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, PENALTY, OTHERS, CHALLANTOTAL,           
				LASTCHALLANTOTAL, ISCOMPANY, CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, ISAUTOGENERATED,           
				ISOLTASINCLUDED, TEMPDATE, ISTTUMINCLUDED, MINORHEAD)                                
			 SELECT (NUM + ISNULL(SERIALNO, 0)) AS SERIALNO, BRANCHID, QUARTER, FORMID, 0 AS ERETURNID, 0 AS LINKEDCOUNT, 'N' AS ISNILLCHALLAN,          
				0 AS ISUPDATECHALLAN, 2 AS MODEOFPAYMENT, CHALLANID AS BANKCHALLANNO, CHALLANID AS LASTBANKCHALLANNO, '' AS TRNVOUCHERNO,          
				'' AS LASTTRNVOUCHERNO, @BANKID AS BANKID, @BANKID AS LASTBANKID, @TEMPDATE AS CHALLANPAIDDATE, GETDATE() AS CHALLANPAIDDATE,          
				NULL AS DATEOFDEBIT, CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID, INCOMETAX, SURCHARGE, 
				EDUCATIONCESS, 0 INTEREST, 0 PENALTY, 0 OTHERS, TOTALDEDUCTED AS CHALLANTOTAL,          
				TOTALDEDUCTED AS LASTCHALLANTOTAL, CASE WHEN DEDUCTEECODE = 2 THEN 0 ELSE 1 END AS ISCOMPANY,          
				'' CHEQUENO, NULL CHEQUEDATE, '' CHEQUEDRAWNON, '' TRANREFNO, '' TVRECEIPTNUMBER, 1 AS ISAUTOGENERATED,           
				0 AS ISOLTASINCLUDED, @TEMPDATE, 0 AS ISTTUMINCLUDED, 200 AS MINORHEAD      
			 FROM          
			 (          
				SELECT ROW_NUMBER() OVER (PARTITION BY T.BRANCHID, T.FORMID, T.QUARTER ORDER BY T.BRANCHID) AS NUM,          
				    SERIALNO, CHALLANID, T.BRANCHID, SECTIONID, DEDUCTEECODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED,          
				    T.FORMID, T.QUARTER           
				FROM #TEMPSMP T 
				LEFT JOIN 
				(    
				    SELECT BRANCHID, FORMID, QUARTER, MAX(SERIALNO) AS SERIALNO 
				    FROM CHALLANDETAIL WITH(NOLOCK)           
				    GROUP BY BRANCHID, FORMID, QUARTER           
				) Y          
				ON T.BRANCHID = Y.BRANCHID AND T.FORMID = Y.FORMID AND T.QUARTER = Y.QUARTER          
			 ) DATA          
			 /*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/          
			 INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID)           
			 SELECT DISTINCT DD.DEDUCTIONID, CHALL.CHALLANID, DD.BRANCHID AS BRANCHID          
			 FROM           
			 (          
				SELECT DEDUCTIONID, FORMID, TOTALDEDUCTED, DEDUCTEEID, SECTIONID, BRANCHID, DEDUCTEDDATE,           
				    CASE WHEN ENTRYTYPE = 4 THEN 1 ELSE 0 END ISFINACLE           
				FROM #DEDUCTIONDET WITH(NOLOCK)            
				WHERE MONTH(DEDUCTEDDATE) = @MONTH
				    AND DEDUCTIONID IN (SELECT DEDUCTIONID FROM #UNLINKED)
			 ) DD           
			 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID           
			 LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = DD.DEDUCTEEID           
			 LEFT JOIN DEDCHALINK CD WITH(NOLOCK) ON DD.DEDUCTIONID = CD.DEDUCTIONID AND CD.BRANCHID = DD.BRANCHID          
			 INNER JOIN #TEMPSMP T WITH(NOLOCK) ON DD.BRANCHID = T.BRANCHID AND DD.SECTIONID = T.SECTIONID 
				AND (NE.DEDUCTEECODE = T.DEDUCTEECODE) AND DD.ISFINACLE = T.ISFINACLE          
			 LEFT JOIN #DIFFERSMP DL WITH(NOLOCK) ON DD.BRANCHID = DL.BRANCHID AND DD.FORMID = DL.FORMID          
			 INNER JOIN           
			 (          
				SELECT CHALLANID, BANKCHALLANNO, CHALLANPAIDDATE 
				FROM CHALLANDETAIL  WITH(NOLOCK)          
				WHERE CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112) 
				    AND ISAUTOGENERATED = 1        
			 ) CHALL ON CHALL.BANKCHALLANNO = T.CHALLANID
			 WHERE DD.TOTALDEDUCTED > 0 
				AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
				AND CD.DEDCHALINKID IS NULL           
			 SET @RESULT = 1          
		  END          
		  COMMIT           
	   END TRY           
    BEGIN CATCH          
	   SET @RESULT = -1          
	   ROLLBACK  
    END CATCH          
    IF (@RESULT = 1)          
	   BEGIN			
		  UPDATE CHALLANDETAIL SET CHALLANPAIDDATE = NULL, LASTCHALLANPAIDDATE = NULL, BANKCHALLANNO = NULL, 
			 LASTBANKCHALLANNO = NULL 
		  WHERE ISAUTOGENERATED = 1 AND TEMPDATE = @TEMPDATE          
		  DELETE FROM CHALLANMAKEPAYMENT          
	   END          
    SELECT @RESULT
    IF OBJECT_ID('TEMPDB..#DEDUCTIONDET') IS NOT NULL
	   DROP TABLE #DEDUCTIONDET
    IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
	   DROP TABLE #UNLINKED
    IF OBJECT_ID('TEMPDB..#DIFFERSMP') IS NOT NULL
	   DROP TABLE #DIFFERSMP
    IF OBJECT_ID('TEMPDB..#TEMPSMP') IS NOT NULL
	   DROP TABLE #TEMPSMP
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveChallanForPayment03')
DROP PROCEDURE USP_TDS_SaveChallanForPayment03
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveChallanForPayment03]
    @MONTH INT,
    @CLIENTID INT,          
    @FINANCIALYEAR INT        
AS          
BEGIN          
    DECLARE @TEMPDATE DATETIME;   
    DECLARE @RESULT INT,@CHALLANID INT,@BANKID INT,@QUARTER INT,@ALLOW92A92B INT,@MONTHYEAR VARCHAR(6);
    DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
    DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
    CREATE TABLE #DIFFERSMP (BRANCHID INT, FORMTYPE VARCHAR(5), FORMID INT)	
    BEGIN TRANSACTION           
	   BEGIN TRY       
		  SET @RESULT = 0  
		  SET @TEMPDATE = GETDATE() ;  
		  IF(@MONTH < 4)          
			 SET @FINANCIALYEAR = @FINANCIALYEAR + 1     
		  IF (EXISTS(SELECT ID FROM PARKEDAMOUNT WITH(NOLOCK) WHERE MONTHYEAR = CONVERT(INT, (CONVERT(VARCHAR, @MONTH) + CONVERT(VARCHAR, @FINANCIALYEAR)))) 
			 AND EXISTS(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE MONTH(DEDUCTEDDATE) = @MONTH))     
		  BEGIN             
			 SELECT @CHALLANID = ISNULL(MAX(BANKCHALLANNO) + 1, 1) 
			 FROM CHALLANDETAIL WITH(NOLOCK) 
			 WHERE CONVERT(VARCHAR(8), CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112) 
				AND ISAUTOGENERATED = 1           
			 IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)          
				SET @QUARTER = 1          
			 ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)          
				SET @QUARTER = 2          
			 ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)          
				SET @QUARTER = 3          
			 ELSE           
				SET @QUARTER = 4  
			 SELECT @BANKID = BANKID 
			 FROM REMITTINGBANK WITH(NOLOCK) 
			 WHERE BSRCODE = CASE WHEN @CLIENTID = 6 THEN '0350218' ELSE '0261632' END         
			 SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS WITH(NOLOCK)            
			 SET @MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR)          
			 SELECT *
			 INTO #DEDUCTIONDET
			 FROM DEDUCTIONDETAIL WITH(NOLOCK)
			 WHERE MONTH(DEDUCTEDDATE) = @MONTH 
			 SELECT FORMID 
			 INTO #CHALLAN 
			 FROM CHALLANMAKEPAYMENT CMP WITH(NOLOCK)
				INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = CMP.SECTIONID 
			 GROUP BY FORMID
			 SELECT DEDUCTEEID
			 INTO #DEDUCTION
			 FROM #DEDUCTIONDET DD WITH(NOLOCK) 
				INNER JOIN #CHALLAN C ON DD.FORMID = C.FORMID
			 WHERE MONTH(DEDUCTEDDATE) = @MONTH
			 GROUP BY DEDUCTEEID
			 SELECT * INTO #UNLINKED    
			 FROM    
			 (    
				SELECT DEDUCTIONID 
				FROM #DEDUCTIONDET WITH(NOLOCK) 
				WHERE MONTH(DEDUCTEDDATE) = @MONTH    
				EXCEPT    
				SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK)    
			 )UD       
			 IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID IN (2,3))
				BEGIN
				    INSERT INTO @NONEMPLOYEE
				    SELECT D.DEDUCTEEID, NE.DEDUCTEECODE 
				    FROM DEDUCTEE D WITH(NOLOCK)
					   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
						  ON D.DEDUCTEEID = NE.DEDUCTEEID  
					   INNER JOIN #DEDUCTION DD 
						  ON D.DEDUCTEEID = DD.DEDUCTEEID
				END
			 IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID = 1)
				BEGIN 
				    INSERT INTO @EMPLOYEE
				    SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE 
				    FROM DEDUCTEE D WITH(NOLOCK)
					   INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
					   INNER JOIN #DEDUCTION DD ON D.DEDUCTEEID = DD.DEDUCTEEID			
				END
			 SELECT * INTO #DEDUCTEE 
			 FROM
				(
				    SELECT * FROM @EMPLOYEE
				    UNION 
				    SELECT * FROM @NONEMPLOYEE  
				)DE
			INSERT INTO #DIFFERSMP
			 SELECT CB.BRANCHID, SUPERFINAL.FORMTYPE,           
				CASE WHEN SUPERFINAL.FORMTYPE = '26QI' OR SUPERFINAL.FORMTYPE = '26QV' THEN 2 
				    WHEN SUPERFINAL.FORMTYPE = '24Q' THEN 1 
				    ELSE 3 END AS [FORMID]  
			 FROM
			 (            
				SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.FORMTYPE, ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT 
				FROM 
				(            
				    SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.SECTIONID AS FORMTYPE, SUM(RESULT.TDS) AS TDS 
				    FROM
				    (            
					   SELECT CB.BRANCHID, CB.PARENTBRANCHID,           
						  CASE WHEN DD.FORMID = 1 THEN '24Q'            
							 WHEN (DD.FORMID = 3) THEN '27Q'           
							 WHEN (DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
							 ELSE '26QV' END AS SECTIONID,          
						  SUM(DD.TOTALDEDUCTED) AS TDS   
					   FROM #DEDUCTIONDET DD WITH(NOLOCK)           
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID 
						  INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID           
						  INNER JOIN #UNLINKED DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID   
						  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID            
					   WHERE MONTH(DEDUCTEDDATE) = @MONTH          
					   GROUP BY CB.BRANCHID, TS.SECTIONID, DD.FORMID, CB.PARENTBRANCHID, 
						  CASE WHEN DD.FORMID = 1 THEN '24Q'            
							 WHEN (DD.FORMID = 3) THEN '27Q'           
							 WHEN (DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' ELSE '26QV' END
				    ) AS RESULT GROUP BY RESULT.BRANCHID, RESULT.SECTIONID, RESULT.PARENTBRANCHID          
				) FINAL          
				LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK) 
				    ON PA.BRANCHID = FINAL.BRANCHID 
				    AND PA.FORMTYPE = FINAL.FORMTYPE             
				WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 
				    AND (MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL)           
			 ) SUPERFINAL            
			 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
				ON SUPERFINAL.BRANCHID = CB.BRANCHID          
			 INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) 
				ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID           
			 ORDER BY CB1.BRANCHID           
			IF ((SELECT COUNT(BRANCHID) FROM #DIFFERSMP)= 0)
					BEGIN
						INSERT INTO #DIFFERSMP (BRANCHID, FORMTYPE, FORMID) VALUES(0, 'ABC', 0)
					END
			 SELECT BRANCHNAME, Q.BRANCHID, Q.SECTIONID, SECTIONNAME, ISNULL(Q.DEDUCTEECODE, 1) AS DEDUCTEECODE,           
				INCOMETAX, SURCHARGE, EDUCATIONCESS, Q.TOTALDEDUCTED, HASPARTPAYMENT, Q.QUARTER, FORMID
			 INTO #TEMPSMP          
			 FROM           
			 (          
				SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, DEDUCTEECODE,           
				    ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,          
				    ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, 
				    (ISNULL(CEILING(SUM(INCOMETAX)), 0) + ISNULL(CEILING(SUM(SURCHARGE)), 0) + ISNULL(CEILING(SUM(EDUCATIONCESS)),0)) TOTALDEDUCTED,
				    MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID
				FROM           
				(          
				    SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,          
					   TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, D.DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,          
					   SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(DD.TOTALDEDUCTED) TOTALDEDUCTED,          
					   0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID
				    FROM           
				    (          
					   SELECT DEDUCTEEID, DEDUCTIONID, BRANCHID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, 
						  DEDUCTEDDATE, FORMID, QUARTER,          
						  CASE WHEN FORMID = 1 THEN '24Q'           
							 WHEN (FORMID = 3) THEN '27Q'            
							 WHEN (FORMID=2 AND SECTIONID=5) THEN '26QI' 
							 ELSE '26QV' END AS FORMTYPE
					   FROM #DEDUCTIONDET WITH(NOLOCK)          
				    ) DD          
				    INNER JOIN #UNLINKED DL WITH(NOLOCK) 
					   ON DD.DEDUCTIONID = DL.DEDUCTIONID  
				    INNER JOIN #DEDUCTEE D WITH(NOLOCK) 
					   ON D.DEDUCTEEID = DD.DEDUCTEEID     
				    INNER JOIN TAXSECTIONS TS WITH(NOLOCK) 
					   ON DD.SECTIONID = TS.SECTIONID AND TS.FORMID = DD.FORMID           
				    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
					   ON CB.BRANCHID = DD.BRANCHID           
				    LEFT JOIN #DIFFERSMP DFL WITH(NOLOCK) 
					   ON DD.BRANCHID = DFL.BRANCHID 
						  AND DD.FORMTYPE = DFL.FORMTYPE          
				    WHERE DD.TOTALDEDUCTED > 0 
					   AND MONTH(DD.DEDUCTEDDATE) = @MONTH          
					   AND CB.BRANCHID IN  (
							 SELECT BRANCHID 
							 FROM BRANCHDEDUCTORS BD1 WITH(NOLOCK) 
								INNER JOIN DEDUCTOR D1 WITH(NOLOCK) 
								    ON BD1.DEDUCTORID = D1.DEDUCTORID           
							 WHERE BD1.QUARTER = @QUARTER 
								AND UPPER(D1.TAN) <> 'TANAPPLIED'
									   )
					   AND DFL.BRANCHID IS NULL           
				    GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID
				) RESULT
				GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID
			 ) Q          
			 INNER JOIN CHALLANMAKEPAYMENT CMP WITH(NOLOCK)           
				ON Q.BRANCHID = CMP.BRANCHID 
				    AND Q.SECTIONID = CMP.SECTIONID 
				    AND Q.QUARTER = CMP.QUARTER 
				    AND Q.DEDUCTEECODE = CMP.DEDUCTEECODE         
				    AND Q.TOTALDEDUCTED = CMP.TOTALDEDUCTED       
			 EXEC('ALTER TABLE #TEMPSMP ADD CHALLANID INT IDENTITY(' + @CHALLANID + ', 1)')            
			 /* INSERT INTO CHALLAN*/          
			 INSERT INTO CHALLANDETAIL (SERIALNO, BRANCHID, QUARTER, FORMID, ERETURNID, LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT,           
				BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE,           
                    LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, PENALTY, OTHERS, CHALLANTOTAL,           
                    LASTCHALLANTOTAL, ISCOMPANY, CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, ISAUTOGENERATED,           
                    ISOLTASINCLUDED, TEMPDATE, ISTTUMINCLUDED, MINORHEAD)                                
			 SELECT (NUM + ISNULL(SERIALNO, 0)) AS SERIALNO, BRANCHID, QUARTER, FORMID, 0 AS ERETURNID, 0 AS LINKEDCOUNT, 'N' AS ISNILLCHALLAN,          
				0 AS ISUPDATECHALLAN, 2 AS MODEOFPAYMENT, CHALLANID AS BANKCHALLANNO, CHALLANID AS LASTBANKCHALLANNO, '' AS TRNVOUCHERNO,          
				'' AS LASTTRNVOUCHERNO, @BANKID AS BANKID, @BANKID AS LASTBANKID, @TEMPDATE AS CHALLANPAIDDATE, GETDATE() AS CHALLANPAIDDATE,          
				NULL AS DATEOFDEBIT, CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID, INCOMETAX, SURCHARGE, 
				EDUCATIONCESS, 0 INTEREST, 0 PENALTY, 0 OTHERS, TOTALDEDUCTED AS CHALLANTOTAL,          
				TOTALDEDUCTED AS LASTCHALLANTOTAL, CASE WHEN DEDUCTEECODE = 2 THEN 0 ELSE 1 END AS ISCOMPANY,          
				'' CHEQUENO, NULL CHEQUEDATE, '' CHEQUEDRAWNON, '' TRANREFNO, '' TVRECEIPTNUMBER, 1 AS ISAUTOGENERATED,           
				0 AS ISOLTASINCLUDED, @TEMPDATE, 0 AS ISTTUMINCLUDED, 200 AS MINORHEAD      
			 FROM          
			 (          
				SELECT ROW_NUMBER() OVER (PARTITION BY T.BRANCHID, T.FORMID, T.QUARTER ORDER BY T.BRANCHID) AS NUM,          
				    SERIALNO, CHALLANID, T.BRANCHID, SECTIONID, DEDUCTEECODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED,          
				    T.FORMID, T.QUARTER           
				FROM #TEMPSMP T 
				LEFT JOIN 
				(    
				    SELECT BRANCHID, FORMID, QUARTER, MAX(SERIALNO) AS SERIALNO 
				    FROM CHALLANDETAIL WITH(NOLOCK)           
				    GROUP BY BRANCHID, FORMID, QUARTER           
				) Y          
				    ON T.BRANCHID = Y.BRANCHID AND T.FORMID = Y.FORMID AND T.QUARTER = Y.QUARTER          
			 ) DATA          
			 /*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/          
			 INSERT INTO DEDCHALINK(DEDUCTIONID, CHALLANID, BRANCHID)           
			 SELECT DISTINCT DD.DEDUCTIONID, CHALL.CHALLANID, DD.BRANCHID AS BRANCHID          
			 FROM           
			 (          
				SELECT DEDUCTIONID, FORMID, TOTALDEDUCTED, DEDUCTEEID, SECTIONID, BRANCHID, DEDUCTEDDATE
				FROM #DEDUCTIONDET WITH(NOLOCK)            
				WHERE MONTH(DEDUCTEDDATE) = @MONTH          
			 ) DD           
			 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID           
			 LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = DD.DEDUCTEEID           
			 LEFT JOIN DEDCHALINK CD WITH(NOLOCK) ON DD.DEDUCTIONID = CD.DEDUCTIONID AND CD.BRANCHID = DD.BRANCHID          
			 INNER JOIN #TEMPSMP T WITH(NOLOCK) ON DD.BRANCHID = T.BRANCHID AND DD.SECTIONID = T.SECTIONID 
				AND (ISNULL(NE.DEDUCTEECODE,2) = T.DEDUCTEECODE)
			 LEFT JOIN #DIFFERSMP DL WITH(NOLOCK) ON DD.BRANCHID = DL.BRANCHID AND DD.FORMID = DL.FORMID          
			 INNER JOIN           
			 (          
				SELECT CHALLANID, BANKCHALLANNO, CHALLANPAIDDATE FROM CHALLANDETAIL  WITH(NOLOCK)          
				WHERE CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112) 
				    AND ISAUTOGENERATED = 1
			 ) CHALL ON CHALL.BANKCHALLANNO = T.CHALLANID          
			 WHERE DD.TOTALDEDUCTED > 0 
				AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
				AND CD.DEDCHALINKID IS NULL           
			 SET @RESULT = 1          
		  END
		  COMMIT          
	   END TRY           
	   BEGIN CATCH          
		  SET @RESULT = -1          
		  ROLLBACK          
	   END CATCH                    
    IF (@RESULT = 1)          
	   BEGIN          
		  UPDATE CHALLANDETAIL SET CHALLANPAIDDATE = NULL, LASTCHALLANPAIDDATE = NULL, BANKCHALLANNO = NULL,
			 LASTBANKCHALLANNO = NULL 
		  WHERE ISAUTOGENERATED = 1 AND TEMPDATE = @TEMPDATE          
		  DELETE FROM CHALLANMAKEPAYMENT          
	   END          
    SELECT @RESULT          
    IF OBJECT_ID('TEMPDB..#DEDUCTIONDET') IS NOT NULL
	   DROP TABLE #DEDUCTIONDET
    IF OBJECT_ID('TEMPDB..#CHALLAN') IS NOT NULL
	   DROP TABLE #CHALLAN
    IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
	   DROP TABLE #DEDUCTION
    IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
	   DROP TABLE #DEDUCTEE 
    IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
	   DROP TABLE #UNLINKED
    IF OBJECT_ID('TEMPDB..#DIFFERSMP') IS NOT NULL
	   DROP TABLE #DIFFERSMP
    IF OBJECT_ID('TEMPDB..#TEMPSMP') IS NOT NULL
	   DROP TABLE #TEMPSMP
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveChallanForPayment05')
DROP PROCEDURE USP_TDS_SaveChallanForPayment05
GO
CREATE PROCEDURE USP_TDS_SaveChallanForPayment05 --- USP_TDS_SaveChallanForPayment05 6,2018,8
    @MONTH INT,
    @FINANCIALYEAR INT,
    @CLIENTID INT
AS
BEGIN
    DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
    DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);	
    DECLARE @TEMPDATE DATETIME, @RESULT INT,@FORMID INT, @CHALLANID INT,@QUARTER INT,@BANKID INT,@ALLOW92A92B INT, @MONTHYEAR INT, @BSR VARCHAR(7);
    CREATE TABLE #TEMPPARKED(MONTHYEAR INT,BRANCHID INT,FORMTYPE INT,AMOUNT NUMERIC(17,2))
    CREATE TABLE #DIFFERSMP (BRANCHID INT, FORMTYPE INT, FORMID INT)
	CREATE TABLE #DEDUCTIONDET (DEDUCTIONID INT,DEDUCTEEID INT,BRANCHID INT,FORMID INT,QUARTER INT,ENTRYTYPE INT,DEDUCTEDDATE SMALLDATETIME,EXCLUDEINAC BIT,SECTIONID INT,TOTALDEDUCTED NUMERIC(13,2),
					INCOMETAX NUMERIC(13,2),SURCHARGE NUMERIC(13,2),EDUCATIONCESS NUMERIC(13,2),RTBRANCHID INT)
	-- 24Q -> 100, 26QI -> 200, 26QV -> 300, 26QVS -> 400, 27Q -> 500
    SET @TEMPDATE = GETDATE() ;
    SET @RESULT = 0;
    IF(@MONTH < 4)
	   SET @FINANCIALYEAR = @FINANCIALYEAR+1
	SELECT @QUARTER = DBO.UDF_TDS_GETQUARTER(@MONTH)
    IF (@CLIENTID = 8)
	   SET @BSR = '0341101'
    SELECT @BANKID = BANKID 
    FROM REMITTINGBANK WITH(NOLOCK)
    WHERE BSRCODE = @BSR
    SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS
    SET @MONTHYEAR = CONVERT(INT, (CONVERT(VARCHAR, @MONTH) + CONVERT(VARCHAR, @FINANCIALYEAR)))
	SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,ENTRYTYPE,
		   DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
		   INCOMETAX,SURCHARGE,EDUCATIONCESS,RTBRANCHID 
	INTO #DED
	FROM DEDUCTIONDETAIL WITH(NOLOCK) 
	WHERE MONTH(DEDUCTEDDATE) = @MONTH AND QUARTER = @QUARTER 
		AND DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK))
	SELECT RTBRANCHID,
		   CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
				WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) 
						OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
				WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN '26QVS'
				ELSE '26QV' END AS FORMTYPE,
		SUM(TOTALDEDUCTED) AS AMOUNT
	INTO #AMTDET
	FROM #DED DD WITH(NOLOCK) 
		INNER JOIN TAXSECTIONS TS WITH (NOLOCK) ON TS.SECTIONID = DD.SECTIONID 
	WHERE MONTH(DEDUCTEDDATE) = @MONTH AND ISNULL(RTBRANCHID,0) <> 0
	GROUP BY DD.FORMID,RTBRANCHID,
		   CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
				WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) 
						OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
				WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN '26QVS'
				ELSE '26QV' END
	SELECT DISTINCT PA.*
	INTO #PARKED 
	FROM PARKEDAMOUNT PA WITH(NOLOCK)
		INNER JOIN #AMTDET AD WITH (NOLOCK) ON AD.RTBRANCHID = PA.BRANCHID AND AD.FORMTYPE = PA.FORMTYPE 
	WHERE MONTHYEAR = @MONTHYEAR 
	AND PA.AMOUNT >= AD.AMOUNT 
	SELECT DD.DEDUCTIONID
	INTO #EXCDEDIDS
	FROM PARKEDAMOUNT PA WITH(NOLOCK)
		INNER JOIN #AMTDET AD WITH (NOLOCK) ON AD.RTBRANCHID = PA.BRANCHID AND AD.FORMTYPE = PA.FORMTYPE
		INNER JOIN #DED DD WITH(NOLOCK) ON DD.RTBRANCHID = AD.RTBRANCHID
					AND AD.FORMTYPE = (CASE WHEN DD.FORMID = 1 THEN '24Q' WHEN DD.FORMID = 3 THEN '27Q' 
							WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID = 5) 
									OR (@CLIENTID = 11 AND DD.FORMID = 2 AND DD.SECTIONID = 5) THEN '26QI' 
							WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND DD.SECTIONID <> 5) THEN '26QVS'
							ELSE '26QV' END)
	WHERE MONTHYEAR = @MONTHYEAR AND PA.AMOUNT < AD.AMOUNT 
	SELECT BRANCHID, RTBRANCHID, SUM(TOTALDEDUCTED) AS TOTALDEDUCTED
	INTO #FORM24BRANCHES
	FROM #DED DD WITH(NOLOCK)  
	WHERE FORMID = 1 
		AND ISNULL(RTBRANCHID,0) <> 0
		AND MONTH(DEDUCTEDDATE) = @MONTH
		AND DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM #EXCDEDIDS)
	GROUP BY BRANCHID, RTBRANCHID
	SELECT MONTHYEAR, BRANCHID, FORMTYPE, SUM(TOTALDEDUCTED) AMOUNT
	INTO #TEMPPARKEDAMOUNTDET
	FROM
	(SELECT MONTHYEAR,FB.BRANCHID, FORMTYPE, TOTALDEDUCTED, AMOUNT
	 FROM #FORM24BRANCHES FB
		INNER JOIN #PARKED P ON P.BRANCHID = FB.RTBRANCHID
	 WHERE ISNULL(FORMTYPE, '') = '24Q'
		AND AMOUNT >= TOTALDEDUCTED
	) DPA
	GROUP BY MONTHYEAR, BRANCHID, FORMTYPE
	UNION
	SELECT MONTHYEAR,
			CASE WHEN ISZORO = 0 THEN CB.PARENTBRANCHID ELSE CB.BRANCHID END AS BRANCHID,
		FORMTYPE,SUM(AMOUNT) AS AMOUNT 
	FROM #PARKED PA WITH(NOLOCK)
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = PA.BRANCHID 
	WHERE MONTHYEAR = @MONTHYEAR 
		AND ISNULL(FORMTYPE, '') <> ''
		AND ISNULL(FORMTYPE, '') <> '24Q'
	GROUP BY MONTHYEAR,
			CASE WHEN ISZORO = 0 THEN CB.PARENTBRANCHID ELSE CB.BRANCHID END,FORMTYPE
	INSERT INTO #TEMPPARKED
	SELECT MONTHYEAR,BRANCHID,
		CASE WHEN FORMTYPE = '24Q' THEN 100
			 WHEN FORMTYPE = '26QI' THEN 200
			 WHEN FORMTYPE = '26QV' THEN 300
			 WHEN FORMTYPE = '26QVS' THEN 400
			 ELSE 500 END AS FORMTYPE , SUM(AMOUNT) AS AMOUNT 
	FROM #TEMPPARKEDAMOUNTDET TPA WITH(NOLOCK) 
	WHERE MONTHYEAR = @MONTHYEAR 
	GROUP BY MONTHYEAR,BRANCHID,FORMTYPE
	ORDER BY BRANCHID
	IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNTDET') IS NOT NULL
	   DROP TABLE #TEMPPARKEDAMOUNTDET
    BEGIN TRANSACTION 
	   BEGIN TRY			
		  IF (EXISTS(SELECT ID FROM PARKEDAMOUNT (NOLOCK) WHERE MONTHYEAR = @MONTHYEAR) 
				AND EXISTS(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL (NOLOCK) WHERE MONTH(DEDUCTEDDATE) = @MONTH))
			 BEGIN
				SELECT @CHALLANID = ISNULL(MAX(BANKCHALLANNO) + 1, 60000) 
				FROM CHALLANDETAIL (NOLOCK)
				WHERE CONVERT(VARCHAR(8), CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112) 
				    AND ISAUTOGENERATED = 1 
				SELECT FORMID 
				INTO #CHALLAN 
				FROM CHALLANMAKEPAYMENT CMP
				    INNER JOIN TAXSECTIONS TS 
					   ON TS.SECTIONID = CMP.SECTIONID 
				GROUP BY FORMID
				INSERT INTO #DEDUCTIONDET
				SELECT DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,ENTRYTYPE,
					   DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
					   INCOMETAX,SURCHARGE,EDUCATIONCESS,RTBRANCHID
				FROM #DED WITH(NOLOCK)
				WHERE MONTH(DEDUCTEDDATE) = @MONTH 
					AND DEDUCTIONID NOT IN (SELECT DEDUCTIONID FROM #EXCDEDIDS)
				GROUP BY DEDUCTIONID,DEDUCTEEID,BRANCHID,FORMID,QUARTER,ENTRYTYPE,
					   DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
					   INCOMETAX,SURCHARGE,EDUCATIONCESS,RTBRANCHID
				ORDER BY BRANCHID
				IF OBJECT_ID('TEMPDB..#DED') IS NOT NULL
					DROP TABLE #DED
				IF OBJECT_ID('TEMPDB..#AMTDET') IS NOT NULL
					DROP TABLE #AMTDET
				IF OBJECT_ID('TEMPDB..#PARKED') IS NOT NULL
					DROP TABLE #PARKED 
				IF OBJECT_ID('TEMPDB..#EXCDEDIDS') IS NOT NULL
					DROP TABLE #EXCDEDIDS
				SELECT TP.MONTHYEAR, DD.BRANCHID, TP.FORMTYPE, TP.AMOUNT 
				INTO #TEMPPARKEDAMOUNT
				FROM #TEMPPARKED TP WITH(NOLOCK)
				INNER JOIN #DEDUCTIONDET DD WITH(NOLOCK) ON TP.BRANCHID = DD.BRANCHID
				WHERE MONTHYEAR = @MONTHYEAR
				GROUP BY TP.MONTHYEAR, DD.BRANCHID, TP.FORMTYPE, TP.AMOUNT 
				SELECT DEDUCTEEID
				INTO #DEDUCTION
				FROM #DEDUCTIONDET DD WITH(NOLOCK) 
				    INNER JOIN #CHALLAN C ON DD.FORMID = C.FORMID
				WHERE MONTH(DEDUCTEDDATE) = @MONTH
				GROUP BY DEDUCTEEID
				SELECT * INTO #UNLINKED FROM
				(
				    SELECT DEDUCTIONID,DD.DEDUCTEEID,DD.BRANCHID,DD.FORMID,QUARTER,
						ENTRYTYPE,DEDUCTEDDATE,EXCLUDEINAC,SECTIONID,TOTALDEDUCTED,
						INCOMETAX,SURCHARGE,EDUCATIONCESS,RTBRANCHID 
				    FROM #DEDUCTIONDET DD WITH(NOLOCK)
					   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
				    WHERE MONTH(DEDUCTEDDATE) = @MONTH 
					   AND D.PAN LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) 
							 THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END 
					   AND NOT EXISTS
					   (
						  SELECT DEDUCTIONID 
						  FROM DEDCHALINK WITH(NOLOCK) 
						  WHERE DEDUCTIONID = DD.DEDUCTIONID
					   )
					   AND ISNULL(RTBRANCHID,0) <> 0
				)U
				IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID IN (2, 3))
				    BEGIN
					   INSERT INTO @NONEMPLOYEE
					   SELECT D.DEDUCTEEID, NE.DEDUCTEECODE 
					   FROM DEDUCTEE D WITH(NOLOCK)
						  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
						  INNER JOIN #DEDUCTION DD ON D.DEDUCTEEID = DD.DEDUCTEEID
				    END
				IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID = 1)
				    BEGIN 
					   INSERT INTO @EMPLOYEE
					   SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE 
					   FROM DEDUCTEE D WITH(NOLOCK)
						  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
						  INNER JOIN #DEDUCTION DD ON D.DEDUCTEEID = DD.DEDUCTEEID			
				    END
				SELECT * INTO #DEDUCTEE FROM
				(
				    SELECT * FROM @EMPLOYEE
				    UNION 
				    SELECT * FROM @NONEMPLOYEE  
				)DE
				SELECT CB.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,CB.NOCHALLANPAY 
				INTO #BRANCHES
				FROM BRANCHDEDUCTORS BD1 WITH(NOLOCK)
				    INNER JOIN DEDUCTOR D1 WITH(NOLOCK) ON BD1.DEDUCTORID = D1.DEDUCTORID 
				    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON BD1.BRANCHID = CB.BRANCHID 
				WHERE BD1.QUARTER = @QUARTER AND UPPER(D1.TAN) <> 'TANAPPLIED'
				GROUP BY CB.BRANCHID,CB.BRANCHCODE,CB.BRANCHNAME,CB.NOCHALLANPAY
				SELECT CB.BRANCHID, CB.PARENTBRANCHID, DD.RTBRANCHID, TS.SECTIONID, 
						CASE WHEN DD.FORMID = 1 THEN 100 
							 WHEN DD.FORMID = 3 THEN 500 
							 WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN 200
							 WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN 400 
							 ELSE 300
						END AS FORMTYPE,
					    SUM(DD.TOTALDEDUCTED) AS TDS 
				INTO #RESULT
				FROM COMPANYBRANCH CB WITH (NOLOCK) 
					INNER JOIN #UNLINKED DD WITH (NOLOCK)  ON CB.BRANCHID = DD.BRANCHID  
					INNER JOIN TAXSECTIONS TS WITH (NOLOCK)  ON TS.SECTIONID = DD.SECTIONID  
				WHERE MONTH(DEDUCTEDDATE) = @MONTH 
				GROUP BY CB.BRANCHID, CB.PARENTBRANCHID,DD.RTBRANCHID, TS.SECTIONID,
					CASE WHEN DD.FORMID = 1 THEN 100 
						 WHEN DD.FORMID = 3 THEN 500 
					     WHEN (@CLIENTID <> 11 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID = 5) OR (@CLIENTID = 11 AND DD.FORMID = 2 AND TS.SECTIONID = 5) THEN 200
					     WHEN (@CLIENTID = 1 AND DD.FORMID = 2 AND DD.ENTRYTYPE = 4 AND TS.SECTIONID <> 5) THEN 400 
					     ELSE 300
					END 
				SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.FORMTYPE , SUM(RESULT.TDS) AS TDS 
				INTO #FINAL
				FROM  #RESULT RESULT
				GROUP BY RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.FORMTYPE
				SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.FORMTYPE, ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT 
				INTO #SUPERFINAL
				FROM #FINAL FINAL
				   LEFT JOIN #TEMPPARKEDAMOUNT PA WITH (NOLOCK) 
					  ON PA.BRANCHID = FINAL.BRANCHID AND PA.FORMTYPE = FINAL.FORMTYPE  
				WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 
					  AND (MONTHYEAR = @MONTHYEAR OR  PA.MONTHYEAR IS NULL) 
				INSERT INTO #DIFFERSMP
				SELECT CB.BRANCHID, SUPERFINAL.FORMTYPE, 
				    CASE WHEN SUPERFINAL.FORMTYPE = 200 OR SUPERFINAL.FORMTYPE = 300 OR SUPERFINAL.FORMTYPE = 400 THEN 2 
						 WHEN SUPERFINAL.FORMTYPE = 100 THEN 1 
					     ELSE 3 
					     END AS [FORMID] 
				FROM #SUPERFINAL SUPERFINAL 
					INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) 
					   ON SUPERFINAL.BRANCHID = CB.BRANCHID
				ORDER BY CB.BRANCHID 
				IF ((SELECT COUNT(BRANCHID) FROM #DIFFERSMP)= 0)
					BEGIN
						INSERT INTO #DIFFERSMP (BRANCHID, FORMTYPE, FORMID) VALUES(0, 1000 , 0)
					END
				SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, BRANCHID, SECTIONID, 
					INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, 
					DEDUCTEDDATE, FORMID, QUARTER,
				   CASE WHEN FORMID = 1 THEN 100 
					    WHEN FORMID = 3 THEN 500 
					    WHEN (@CLIENTID <> 11 AND FORMID=2 AND SECTIONID=5 AND ENTRYTYPE=4) OR (@CLIENTID = 11 AND FORMID=2 AND SECTIONID=5) THEN 200
					    WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE = 4 AND SECTIONID <> 5) THEN 400 
					    ELSE 300 
					    END AS FORMTYPE, DE.DEDUCTEECODE,
				   CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 1 
					    WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE <> 4 AND SECTIONID NOT IN (5, 17)) THEN 0
					    WHEN (@CLIENTID <> 1 AND (ENTRYTYPE=4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5,17)))) THEN 1 
					    ELSE 0 
					    END ISFINACLE 
			    INTO #REQDATA 
			    FROM #UNLINKED DD WITH(NOLOCK)
				   INNER JOIN #DEDUCTEE DE ON DD.DEDUCTEEID = DE.DEDUCTEEID
				SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,
					TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,
					SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(DD.TOTALDEDUCTED) TOTALDEDUCTED,
					0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID, ISFINACLE
				INTO #TEMPRESULT
				FROM #REQDATA DD
					INNER JOIN #BRANCHES CB ON CB.BRANCHID = DD.BRANCHID												
					INNER JOIN TAXSECTIONS TS WITH (NOLOCK)  ON DD.SECTIONID = TS.SECTIONID --AND TS.FORMID = DD.FORMID	
					LEFT JOIN #DIFFERSMP DFL WITH (NOLOCK)  ON DD.BRANCHID = DFL.BRANCHID AND DD.FORMTYPE = DFL.FORMTYPE
				WHERE DD.TOTALDEDUCTED > 0 
					AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
					AND DD.QUARTER = @QUARTER							
					AND DFL.BRANCHID IS NULL
				GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME,
						CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID, ISFINACLE
				SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, DEDUCTEECODE, 
					ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,
					ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, 
					(ISNULL(CEILING(SUM(INCOMETAX)), 0) + ISNULL(CEILING(SUM(SURCHARGE)), 0) + ISNULL(CEILING(SUM(EDUCATIONCESS)),0)) TOTALDEDUCTED, 
					MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE
				INTO #TEMPQ
				FROM #TEMPRESULT RESULT
				GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE
				SELECT ID,BRANCHID,QUARTER,SECTIONID,
					DEDUCTEECODE,TOTALDEDUCTED 
				INTO #CHAMAKEPAYMENT
				FROM CHALLANMAKEPAYMENT
				SELECT BRANCHNAME, Q.BRANCHID, Q.SECTIONID, SECTIONNAME, Q.DEDUCTEECODE, 
					INCOMETAX, SURCHARGE, EDUCATIONCESS, Q.TOTALDEDUCTED, HASPARTPAYMENT,
					Q.QUARTER, FORMID, ISFINACLE 
				INTO #TEMPSMP
				FROM #TEMPQ Q
					INNER JOIN #CHAMAKEPAYMENT CMP WITH (NOLOCK)  
						ON Q.BRANCHID = CMP.BRANCHID AND Q.SECTIONID = CMP.SECTIONID 
						AND Q.QUARTER = CMP.QUARTER AND Q.DEDUCTEECODE = CMP.DEDUCTEECODE 
						AND Q.TOTALDEDUCTED = CMP.TOTALDEDUCTED
				EXEC('ALTER TABLE #TEMPSMP ADD CHALLANID INT IDENTITY(' + @CHALLANID + ', 1)')
				SELECT BRANCHID, FORMID, QUARTER, MAX(SERIALNO) AS SERIALNO
				INTO #TEMPY 
				FROM CHALLANDETAIL WITH (NOLOCK) 
				GROUP BY BRANCHID, FORMID, QUARTER
				SELECT ROW_NUMBER() OVER (PARTITION BY T.BRANCHID, T.FORMID, T.QUARTER ORDER BY T.BRANCHID) AS NUM,
					SERIALNO, CHALLANID, T.BRANCHID, SECTIONID,
					DEDUCTEECODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED,
					T.FORMID, T.QUARTER 
				INTO #TEMPDATA
				FROM #TEMPSMP T 
					LEFT JOIN #TEMPY Y
						ON T.BRANCHID = Y.BRANCHID AND T.FORMID = Y.FORMID AND T.QUARTER = Y.QUARTER			
				/* INSERT INTO CHALLAN*/					
				INSERT INTO CHALLANDETAIL (SERIALNO, BRANCHID, QUARTER, FORMID, ERETURNID, LINKDEDCOUNT, ISNILCHALLAN, 
					ISUPDATECHALLAN, MODEOFPAYMENT, BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, 
					CHALLANPAIDDATE, LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, 
					PENALTY, OTHERS, CHALLANTOTAL, LASTCHALLANTOTAL, ISCOMPANY, CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, 
					TVRECEIPTNUMBER, ISAUTOGENERATED, ISOLTASINCLUDED, TEMPDATE, ISTTUMINCLUDED, MINORHEAD)                      
				SELECT (NUM + ISNULL(SERIALNO, 0)) AS SERIALNO, BRANCHID, QUARTER, FORMID, 0 AS ERETURNID, 0 AS LINKEDCOUNT, 'N' AS ISNILLCHALLAN,
					0 AS ISUPDATECHALLAN, 2 AS MODEOFPAYMENT, CHALLANID AS BANKCHALLANNO, CHALLANID AS LASTBANKCHALLANNO, '' AS TRNVOUCHERNO,
					'' AS LASTTRNVOUCHERNO, @BANKID AS BANKID, @BANKID AS LASTBANKID, @TEMPDATE AS CHALLANPAIDDATE, @TEMPDATE AS CHALLANPAIDDATE,
					NULL AS DATEOFDEBIT, CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID, INCOMETAX, SURCHARGE, 
					EDUCATIONCESS, 0 INTEREST, 0 PENALTY, 0 OTHERS, TOTALDEDUCTED AS CHALLANTOTAL,
					TOTALDEDUCTED AS LASTCHALLANTOTAL, CASE WHEN DEDUCTEECODE = 2 THEN 0 ELSE 1 END AS ISCOMPANY,
					'' CHEQUENO, NULL CHEQUEDATE, '' CHEQUEDRAWNON, '' TRANREFNO, '' TVRECEIPTNUMBER, 1 AS ISAUTOGENERATED, 
					0 AS ISOLTASINCLUDED, @TEMPDATE, 0 AS ISTTUMINCLUDED, 200 AS MINORHEAD
				FROM #TEMPDATA DATA
				/*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/
				SELECT DD.DEDUCTIONID, FORMID, TOTALDEDUCTED, DEDUCTEEID, SECTIONID, BRANCHID, DEDUCTEDDATE, 
					CASE WHEN (@CLIENTID = 1 AND ENTRYTYPE = 4) THEN 1 
						 WHEN (@CLIENTID = 1 AND FORMID = 2 AND ENTRYTYPE <> 4 AND SECTIONID NOT IN (5, 17)) THEN 0
				         WHEN (@CLIENTID <> 1 AND (ENTRYTYPE=4 OR (ENTRYTYPE <> 4 AND SECTIONID NOT IN(5,17)))) THEN 1 
				         ELSE 0 END ISFINACLE 
				INTO #UDED
				FROM #UNLINKED DD WITH (NOLOCK)
				WHERE MONTH(DEDUCTEDDATE) = @MONTH
				SELECT CHALLANID, BANKCHALLANNO, CHALLANPAIDDATE 
				INTO #TEMPCHALL
				FROM CHALLANDETAIL WITH (NOLOCK)  
				WHERE CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112)
				AND ISAUTOGENERATED = 1
				SELECT DD.DEDUCTIONID, CHALL.CHALLANID, DD.BRANCHID AS BRANCHID
				INTO #TEMPDEDCHALINK
				FROM #UDED DD
				   INNER JOIN #DEDUCTEE D WITH (NOLOCK) 
					  ON D.DEDUCTEEID=DD.DEDUCTEEID 
				   INNER JOIN #TEMPSMP T WITH (NOLOCK) 
					  ON DD.BRANCHID = T.BRANCHID 
						 AND DD.SECTIONID = T.SECTIONID 
						 AND (ISNULL(D.DEDUCTEECODE,2) = T.DEDUCTEECODE) 
						 AND DD.ISFINACLE = T.ISFINACLE
				   LEFT JOIN #DIFFERSMP DL WITH (NOLOCK) 
					  ON DD.BRANCHID = DL.BRANCHID 
						 AND DD.FORMID = DL.FORMID
				   INNER JOIN #TEMPCHALL CHALL ON CHALL.BANKCHALLANNO = T.CHALLANID
				  WHERE DD.TOTALDEDUCTED > 0 AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
				  GROUP BY DD.DEDUCTIONID, CHALL.CHALLANID, DD.BRANCHID
				INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID) 
				SELECT DEDUCTIONID, CHALLANID, BRANCHID AS BRANCHID
				FROM #TEMPDEDCHALINK
				SET @RESULT = 1
			 END
			 COMMIT 
		  END TRY	
		  BEGIN CATCH
			 SET @RESULT = -1
			 ROLLBACK
		  END CATCH
    IF (@RESULT = 1)
	   BEGIN
		  UPDATE CHALLANDETAIL SET CHALLANPAIDDATE = NULL, LASTCHALLANPAIDDATE = NULL,
			 BANKCHALLANNO = NULL, LASTBANKCHALLANNO = NULL 
		  WHERE ISAUTOGENERATED = 1 
			 AND TEMPDATE = @TEMPDATE
		  DELETE FROM CHALLANMAKEPAYMENT
	   END
    IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNT') IS NOT NULL
	   DROP TABLE #TEMPPARKEDAMOUNT
    IF OBJECT_ID('TEMPDB..#CHALLAN') IS NOT NULL
	   DROP TABLE #CHALLAN
    IF OBJECT_ID('TEMPDB..#DEDUCTIONDET') IS NOT NULL
	   DROP TABLE #DEDUCTIONDET
    IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
	   DROP TABLE #DEDUCTION
    IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
	   DROP TABLE #DEDUCTEE
    IF OBJECT_ID('TEMPDB..#UDED') IS NOT NULL
	   DROP TABLE #UDED
    IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
	   DROP TABLE #UNLINKED
    IF OBJECT_ID('TEMPDB..#REQDATA') IS NOT NULL
	   DROP TABLE #REQDATA
    IF OBJECT_ID('TEMPDB..#BRANCHES') IS NOT NULL
	   DROP TABLE #BRANCHES
    IF OBJECT_ID('TEMPDB..#DIFFERSMP') IS NOT NULL
	   DROP TABLE #DIFFERSMP
    IF OBJECT_ID('TEMPDB..#TEMPSMP') IS NOT NULL
	   DROP TABLE #TEMPSMP
    IF OBJECT_ID('TEMPDB..#RESULT') IS NOT NULL
	   DROP TABLE #RESULT
	IF OBJECT_ID('TEMPDB..#TEMPRESULT') IS NOT NULL
	   DROP TABLE #TEMPRESULT
    IF OBJECT_ID('TEMPDB..#FINAL') IS NOT NULL
	   DROP TABLE #FINAL
    IF OBJECT_ID('TEMPDB..#SUPERFINAL') IS NOT NULL
	   DROP TABLE #SUPERFINAL
	IF OBJECT_ID('TEMPDB..#TEMPQ') IS NOT NULL
	   DROP TABLE #TEMPQ
	IF OBJECT_ID('TEMPDB..#TEMPY') IS NOT NULL
	   DROP TABLE #TEMPY
	IF OBJECT_ID('TEMPDB..#TEMPDATA') IS NOT NULL
	   DROP TABLE #TEMPDATA
	IF OBJECT_ID('TEMPDB..#TEMPCHALL') IS NOT NULL
	   DROP TABLE #TEMPCHALL
	IF OBJECT_ID('TEMPDB..#TEMPDEDCHALINK') IS NOT NULL
	   DROP TABLE #TEMPDEDCHALINK
	IF OBJECT_ID('TEMPDB..#AMTDET') IS NOT NULL
		DROP TABLE #AMTDET
	IF OBJECT_ID('TEMPDB..#PARKED') IS NOT NULL
		DROP TABLE #PARKED 
	IF OBJECT_ID('TEMPDB..#EXCDEDIDS') IS NOT NULL
		DROP TABLE #EXCDEDIDS	   
    SELECT @RESULT
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveChallanForPaymentCBI')
DROP PROCEDURE USP_TDS_SaveChallanForPaymentCBI
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveChallanForPaymentCBI] 
    @MONTH INT,
    @FINANCIALYEAR INT,
    @CLIENTID INT
AS
BEGIN
    DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
    DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);	
    DECLARE @TEMPDATE DATETIME, @RESULT INT,@FORMID INT, @CHALLANID INT,@QUARTER INT,@BANKID INT,@ALLOW92A92B INT, @MONTHYEAR INT;
    CREATE TABLE #TEMPPARKEDAMOUNT(MONTHYEAR INT,BRANCHID INT,FORMTYPE VARCHAR(10),ACCOUNTNO VARCHAR(20),AMOUNT NUMERIC(17,2))
    CREATE TABLE #DIFFERSMP (BRANCHID INT, BGLCODE VARCHAR(5), FORMID INT)
    SELECT DEDUCTIONID, ENTRYTYPE
    INTO #MANUALDEDUCTIONTD
    FROM DEDUCTIONDETAIL WITH(NOLOCK)
    WHERE MONTH(DEDUCTEDDATE) = @MONTH
    AND ENTRYTYPE = 1 AND SECTIONID = 5
    SET @TEMPDATE = GETDATE();
    SET @RESULT = 0;
    IF(@MONTH < 4)
	   SET @FINANCIALYEAR = @FINANCIALYEAR+1
    IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)
	   SET @QUARTER = 1
    ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)
	   SET @QUARTER = 2
    ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)
	   SET @QUARTER = 3
    ELSE 
	   SET @QUARTER = 4
    SELECT @BANKID = BANKID 
    FROM REMITTINGBANK 
    WHERE BSRCODE = '0282930'
    SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS
    SET @MONTHYEAR = CONVERT(INT, (CONVERT(VARCHAR, @MONTH) + CONVERT(VARCHAR, @FINANCIALYEAR)))
    IF(@CLIENTID = -1)
	   BEGIN
		  INSERT INTO #TEMPPARKEDAMOUNT 
		  EXEC USP_TDS_GETREMAININGPARKEDAMOUNT @MONTH,@MONTHYEAR
	   END
    ELSE
	   BEGIN
		  INSERT INTO #TEMPPARKEDAMOUNT
		  SELECT MONTHYEAR,BRANCHID,FORMTYPE,ACCOUNTNO,AMOUNT FROM PARKEDAMOUNT WHERE MONTHYEAR = @MONTHYEAR
	   END
    DECLARE @BGLID INT;
    SELECT TOP 1 @BGLID = BGLCODEID FROM TDSRATE WHERE BGLCODE = '55800'
    SELECT * 
    INTO #DEDUCTIONDETPAY
    FROM DEDUCTIONDETAIL WITH(NOLOCK)
	   WHERE MONTH(PAYMENTDATE) = @MONTH
    SELECT DEDUCTIONID 
    INTO #BGUPD 
    FROM #DEDUCTIONDETPAY WITH(NOLOCK)
    WHERE FORMID = 1 
	   AND MONTH(PAYMENTDATE) = @MONTH 
	   AND QUARTER = @QUARTER
	   AND ISNULL(BGLCODEID, 0) <> @BGLID
	   AND SECTIONID IN (1, 2, 25)
    UPDATE DEDUCTIONDETAIL 
    SET BGLCODEID = @BGLID
    WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #BGUPD)
    DROP TABLE #BGUPD
    DROP TABLE #DEDUCTIONDETPAY
    BEGIN TRANSACTION 
	   BEGIN TRY
			UPDATE DEDUCTIONDETAIL SET ENTRYTYPE = 4 WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #MANUALDEDUCTIONTD)
			SELECT * 
			INTO #DEDUCTIONDET
			FROM DEDUCTIONDETAIL WITH(NOLOCK)
			WHERE MONTH(DEDUCTEDDATE) = @MONTH			
		  IF (EXISTS(SELECT ID FROM PARKEDAMOUNT (NOLOCK) WHERE MONTHYEAR = @MONTHYEAR) 
			 AND EXISTS(SELECT DEDUCTIONID FROM #DEDUCTIONDET (NOLOCK) WHERE MONTH(DEDUCTEDDATE) = @MONTH))
			 BEGIN
				SELECT @CHALLANID = ISNULL(MAX(BANKCHALLANNO) + 1, 60000) 
				FROM CHALLANDETAIL WITH(NOLOCK) 
				WHERE CONVERT(VARCHAR(8), CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112) 
				    AND ISAUTOGENERATED = 1 
				SELECT FORMID 
				INTO #CHALLAN 
				FROM CHALLANMAKEPAYMENT CMP WITH(NOLOCK)
				    INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = CMP.SECTIONID 
				GROUP BY FORMID
				SELECT DEDUCTEEID
				INTO #DEDUCTION
				FROM #DEDUCTIONDET DD WITH(NOLOCK) 
				    INNER JOIN #CHALLAN C ON DD.FORMID = C.FORMID
				WHERE MONTH(DEDUCTEDDATE) = @MONTH 
				    AND QUARTER = @QUARTER
				GROUP BY DEDUCTEEID
				SELECT * 
				INTO #UNLINKED 
				FROM
				(
				    SELECT DEDUCTIONID 
				    FROM #DEDUCTIONDET DD WITH(NOLOCK)
					   INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = DD.DEDUCTEEID
				    WHERE MONTH(DEDUCTEDDATE) = @MONTH 
					   AND D.PAN LIKE CASE WHEN (@CLIENTID <> 3 OR (D.PAN = 'PANNOTAVBL' OR D.PAN = 'PANINVALID' OR D.PAN = 'PANAPPLIED')) 
						  THEN '%%' ELSE ('[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]') END 
					   AND NOT EXISTS
					   (
						  SELECT DEDUCTIONID 
						  FROM DEDCHALINK WITH(NOLOCK) 
						  WHERE DEDUCTIONID = DD.DEDUCTIONID
					   ) AND QUARTER = @QUARTER
				)U
				IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID IN (2,3))
				    BEGIN
    					   INSERT INTO @NONEMPLOYEE
					   SELECT D.DEDUCTEEID, NE.DEDUCTEECODE 
					   FROM DEDUCTEE D WITH(NOLOCK)
						  INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID  
						  INNER JOIN #DEDUCTION DD ON D.DEDUCTEEID = DD.DEDUCTEEID
				    END
				IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID = 1)
				    BEGIN 
					   INSERT INTO @EMPLOYEE
					   SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE 
					   FROM DEDUCTEE D WITH(NOLOCK)
						  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
						  INNER JOIN #DEDUCTION DD ON D.DEDUCTEEID = DD.DEDUCTEEID			
				    END
				SELECT * INTO #DEDUCTEE FROM
				(
				    SELECT * FROM @EMPLOYEE
				    UNION 
				    SELECT * FROM @NONEMPLOYEE  
				)DE
				SELECT BRANCHID 
				INTO #BRANCHES
				FROM BRANCHDEDUCTORS BD1 
				    INNER JOIN DEDUCTOR D1 ON BD1.DEDUCTORID = D1.DEDUCTORID 
				WHERE BD1.QUARTER = @QUARTER 
				    AND UPPER(D1.TAN) <> 'TANAPPLIED'
				GROUP BY BRANCHID   
				SELECT * INTO #TDSRATE FROM TDSRATE WITH(NOLOCK)
				INSERT INTO #DIFFERSMP
				SELECT CB.BRANCHID, SUPERFINAL.BGLCODE,FORMID
				FROM
				(  
				    SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.BGLCODE, FINAL.FORMID, ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT 
				    FROM    
				    (  
					   SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.BGLCODE, RESULT.FORMID, SUM(RESULT.TDS) AS TDS 
					   FROM   
					   (  
						  SELECT CB.BRANCHID, CB.PARENTBRANCHID, BGLCODE, DD.FORMID ,SUM(DD.TOTALDEDUCTED) AS TDS  
						  FROM COMPANYBRANCH CB WITH (NOLOCK) 
							 INNER JOIN #DEDUCTIONDET DD WITH (NOLOCK)  ON CB.BRANCHID = DD.BRANCHID  
							 INNER JOIN TAXSECTIONS TS WITH (NOLOCK)  ON TS.SECTIONID = DD.SECTIONID
							 INNER JOIN #TDSRATE TR ON DD.BGLCODEID = TR.BGLCODEID  
							 INNER JOIN #UNLINKED DCL WITH (NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID     
						  WHERE MONTH(DEDUCTEDDATE) = @MONTH 
						  GROUP BY CB.BRANCHID, BGLCODE, TS.SECTIONID, DD.FORMID, CB.PARENTBRANCHID, DD.ENTRYTYPE  
					   ) AS RESULT GROUP BY RESULT.BRANCHID, RESULT.BGLCODE, RESULT.FORMID, RESULT.PARENTBRANCHID
				    ) FINAL
				    LEFT JOIN #TEMPPARKEDAMOUNT PA WITH (NOLOCK) 
					   ON PA.BRANCHID = FINAL.BRANCHID 
						  AND PA.FORMTYPE COLLATE SQL_Latin1_General_CP1_CI_AS = FINAL.BGLCODE COLLATE SQL_Latin1_General_CP1_CI_AS 
					   WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 
						  AND (MONTHYEAR = @MONTHYEAR OR  PA.MONTHYEAR IS NULL) 
				) SUPERFINAL  
				INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) 
				    ON SUPERFINAL.BRANCHID = CB.BRANCHID
				INNER JOIN COMPANYBRANCH CB1 WITH (NOLOCK) 
				    ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID 
				ORDER BY CB1.BRANCHID 
				IF ((SELECT COUNT(BRANCHID) FROM #DIFFERSMP)= 0)
					BEGIN
						INSERT INTO #DIFFERSMP (BRANCHID, BGLCODE, FORMID) VALUES(0, '0000', 0)
					END
				SELECT BGLCODEID, BRANCHID 
				INTO #INVALIDBGLCODES 
				FROM #DIFFERSMP DSP
				    INNER JOIN #TDSRATE TR ON DSP.BGLCODE = TR.BGLCODE
				GROUP BY BGLCODEID,BRANCHID
				SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, BRANCHID, DD.SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, DEDUCTEDDATE, 
				    BGLCODE, FORMID, QUARTER, DE.DEDUCTEECODE,
				    CASE WHEN ENTRYTYPE = 4 THEN 1 ELSE 0 END ISFINACLE 
				INTO #REQDATA 
				FROM #DEDUCTIONDET DD WITH(NOLOCK)
				    INNER JOIN #TDSRATE TR ON DD.BGLCODEID = TR.BGLCODEID
				    INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID  
				    INNER JOIN #DEDUCTEE DE ON DD.DEDUCTEEID = DE.DEDUCTEEID
				SELECT BRANCHNAME, Q.BRANCHID, Q.SECTIONID, SECTIONNAME, Q.DEDUCTEECODE, 
				    INCOMETAX, SURCHARGE, EDUCATIONCESS, Q.TOTALDEDUCTED, HASPARTPAYMENT, Q.QUARTER, FORMID, ISFINACLE 
				INTO #TEMPSMP
				FROM 
				(
				    SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, DEDUCTEECODE, 
					   ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,
					   ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, 
					   (ISNULL(CEILING(SUM(INCOMETAX)), 0) + ISNULL(CEILING(SUM(SURCHARGE)), 0) + ISNULL(CEILING(SUM(EDUCATIONCESS)),0)) TOTALDEDUCTED, 
					   MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID, ISFINACLE
				    FROM 
				    (
					   SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,
						  TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,
						  SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(DD.TOTALDEDUCTED) TOTALDEDUCTED,
						  0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID, ISFINACLE
					   FROM #REQDATA DD
						  INNER JOIN #BRANCHES B 
							 ON B.BRANCHID = DD.BRANCHID												
						  INNER JOIN TAXSECTIONS TS WITH (NOLOCK) 
							 ON DD.SECTIONID = TS.SECTIONID
						  INNER JOIN COMPANYBRANCH CB WITH (NOLOCK) 
							 ON CB.BRANCHID = DD.BRANCHID 
						  LEFT JOIN #DIFFERSMP DFL WITH (NOLOCK) 
							 ON DD.BRANCHID = DFL.BRANCHID 
								AND DD.BGLCODE COLLATE SQL_Latin1_General_CP1_CI_AS = DFL.BGLCODE COLLATE SQL_Latin1_General_CP1_CI_AS
					   WHERE DD.TOTALDEDUCTED > 0 
						  AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
						  AND DD.QUARTER = @QUARTER							
						  AND DFL.BRANCHID IS NULL
					   GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID, ISFINACLE			
				    ) RESULT 
				    GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID, ISFINACLE
				) Q
				INNER JOIN CHALLANMAKEPAYMENT CMP WITH (NOLOCK)  
				    ON Q.BRANCHID = CMP.BRANCHID AND Q.SECTIONID = CMP.SECTIONID 
					   AND Q.QUARTER = CMP.QUARTER AND Q.DEDUCTEECODE = CMP.DEDUCTEECODE 
					   AND Q.TOTALDEDUCTED = CMP.TOTALDEDUCTED
				EXEC('ALTER TABLE #TEMPSMP ADD CHALLANID INT IDENTITY(' + @CHALLANID + ', 1)')  
				/* INSERT INTO CHALLAN*/
				INSERT INTO CHALLANDETAIL (SERIALNO, BRANCHID, QUARTER, FORMID, ERETURNID, LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT, 
				    BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE, 
				    LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, PENALTY, OTHERS, CHALLANTOTAL, 
				    LASTCHALLANTOTAL, ISCOMPANY, CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, ISAUTOGENERATED, 
				    ISOLTASINCLUDED, TEMPDATE, ISTTUMINCLUDED, MINORHEAD)                      
				SELECT (NUM + ISNULL(SERIALNO, 0)) AS SERIALNO, BRANCHID, QUARTER, FORMID, 0 AS ERETURNID, 0 AS LINKEDCOUNT, 'N' AS ISNILLCHALLAN,
				    0 AS ISUPDATECHALLAN, 2 AS MODEOFPAYMENT, CHALLANID AS BANKCHALLANNO, CHALLANID AS LASTBANKCHALLANNO, '' AS TRNVOUCHERNO,
				    '' AS LASTTRNVOUCHERNO, @BANKID AS BANKID, @BANKID AS LASTBANKID, @TEMPDATE AS CHALLANPAIDDATE, @TEMPDATE AS CHALLANPAIDDATE,
				    NULL AS DATEOFDEBIT, CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID, INCOMETAX, SURCHARGE, 
				    EDUCATIONCESS, 0 INTEREST, 0 PENALTY, 0 OTHERS, TOTALDEDUCTED AS CHALLANTOTAL,
				    TOTALDEDUCTED AS LASTCHALLANTOTAL, CASE WHEN DEDUCTEECODE = 2 THEN 0 ELSE 1 END AS ISCOMPANY,
				    '' CHEQUENO, NULL CHEQUEDATE, '' CHEQUEDRAWNON, '' TRANREFNO, '' TVRECEIPTNUMBER, 1 AS ISAUTOGENERATED, 
				    0 AS ISOLTASINCLUDED, @TEMPDATE, 0 AS ISTTUMINCLUDED, 200 AS MINORHEAD
				FROM
				(
				    SELECT ROW_NUMBER() OVER (PARTITION BY T.BRANCHID, T.FORMID, T.QUARTER ORDER BY T.BRANCHID) AS NUM,
					   SERIALNO, CHALLANID, T.BRANCHID,SECTIONID,
					   DEDUCTEECODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED,
					   T.FORMID, T.QUARTER 
				    FROM #TEMPSMP T 
					   LEFT JOIN
					   (  
						  SELECT BRANCHID, FORMID, QUARTER, MAX(SERIALNO) AS SERIALNO 
						  FROM CHALLANDETAIL WITH (NOLOCK) 
						  GROUP BY BRANCHID, FORMID, QUARTER 
					   ) Y
						  ON T.BRANCHID = Y.BRANCHID AND T.FORMID = Y.FORMID AND T.QUARTER = Y.QUARTER
				) DATA
				/*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/
				SELECT DD.DEDUCTIONID, FORMID, TOTALDEDUCTED, DEDUCTEEID, SECTIONID, BRANCHID, DEDUCTEDDATE, 
				    CASE WHEN ENTRYTYPE = 4 THEN 1 ELSE 0 END ISFINACLE 
				INTO #UDED
				FROM #DEDUCTIONDET DD WITH (NOLOCK)
				    INNER JOIN #UNLINKED UL ON DD.DEDUCTIONID = UL.DEDUCTIONID 
				WHERE MONTH(DEDUCTEDDATE) = @MONTH 
				    AND NOT EXISTS
				    (
					   SELECT BGLCODEID 
					   FROM #INVALIDBGLCODES IBGL 
					   WHERE IBGL.BGLCODEID =  DD.BGLCODEID 
						  AND IBGL.BRANCHID = DD.BRANCHID
				    ) AND QUARTER = @QUARTER
				INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID) 
				SELECT DD.DEDUCTIONID, CHALL.CHALLANID, DD.BRANCHID AS BRANCHID
				FROM #UDED DD
				    INNER JOIN #DEDUCTEE D WITH (NOLOCK) 
					   ON D.DEDUCTEEID=DD.DEDUCTEEID 
				    INNER JOIN #TEMPSMP T WITH (NOLOCK) 
					   ON DD.BRANCHID = T.BRANCHID 
						  AND DD.SECTIONID = T.SECTIONID 
						  AND (ISNULL(D.DEDUCTEECODE,2) = T.DEDUCTEECODE) 
						  AND DD.ISFINACLE = T.ISFINACLE
				    LEFT JOIN #DIFFERSMP DL WITH (NOLOCK) 
					   ON DD.BRANCHID = DL.BRANCHID 
						  AND DD.FORMID = DL.FORMID
				    INNER JOIN 
				    (
					   SELECT CHALLANID, BANKCHALLANNO, CHALLANPAIDDATE 
					   FROM CHALLANDETAIL WITH (NOLOCK)  
					   WHERE CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112)
						  AND ISAUTOGENERATED = 1
				    ) CHALL ON CHALL.BANKCHALLANNO = T.CHALLANID
				WHERE DD.TOTALDEDUCTED > 0 
				    AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
				GROUP BY DD.DEDUCTIONID, CHALL.CHALLANID, DD.BRANCHID
				UPDATE DEDUCTIONDETAIL SET ENTRYTYPE = 1 WHERE DEDUCTIONID IN (SELECT DEDUCTIONID FROM #MANUALDEDUCTIONTD)
				SET @RESULT = 1
			 END
		  COMMIT 
		  END TRY	
		  BEGIN CATCH
			 SET @RESULT = -1
			 ROLLBACK
		  END CATCH
	   IF (@RESULT = 1)
		  BEGIN
			 UPDATE CHALLANDETAIL SET CHALLANPAIDDATE = NULL, LASTCHALLANPAIDDATE = NULL,BANKCHALLANNO = NULL, 
				LASTBANKCHALLANNO = NULL 
			 WHERE ISAUTOGENERATED = 1 AND TEMPDATE = @TEMPDATE
			 DELETE FROM CHALLANMAKEPAYMENT
		  END
    SELECT @RESULT
    IF OBJECT_ID('TEMPDB..#TEMPPARKEDAMOUNT') IS NOT NULL
	   DROP TABLE #TEMPPARKEDAMOUNT
    IF OBJECT_ID('TEMPDB..#DEDUCTIONDETPAY') IS NOT NULL
	   DROP TABLE #DEDUCTIONDETPAY
    IF OBJECT_ID('TEMPDB..#BGUPD') IS NOT NULL
	   DROP TABLE #BGUPD
    IF OBJECT_ID('TEMPDB..#DEDUCTIONDET') IS NOT NULL
	   DROP TABLE #DEDUCTIONDET
    IF OBJECT_ID('TEMPDB..#CHALLAN') IS NOT NULL
	   DROP TABLE #CHALLAN
    IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
	   DROP TABLE #DEDUCTION
    IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
	   DROP TABLE #UNLINKED
    IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
	   DROP TABLE #DEDUCTEE
    IF OBJECT_ID('TEMPDB..#BRANCHES') IS NOT NULL
	   DROP TABLE #BRANCHES
    IF OBJECT_ID('TEMPDB..#TDSRATE') IS NOT NULL
	   DROP TABLE #TDSRATE
    IF OBJECT_ID('TEMPDB..#DIFFERSMP') IS NOT NULL
	   DROP TABLE #DIFFERSMP
    IF OBJECT_ID('TEMPDB..#INVALIDBGLCODES') IS NOT NULL
	   DROP TABLE #INVALIDBGLCODES
    IF OBJECT_ID('TEMPDB..#REQDATA') IS NOT NULL
	   DROP TABLE #REQDATA
    IF OBJECT_ID('TEMPDB..#TEMPSMP') IS NOT NULL
	   DROP TABLE #TEMPSMP
    IF OBJECT_ID('TEMPDB..#UDED') IS NOT NULL
	   DROP TABLE #UDED
	IF OBJECT_ID('TEMPDB..#MANUALDEDUCTIONTD') IS NOT NULL
	   DROP TABLE #MANUALDEDUCTIONTD
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveChallanForPaymentJK')
DROP PROCEDURE USP_TDS_SaveChallanForPaymentJK
GO
CREATE PROCEDURE USP_TDS_SaveChallanForPaymentJK 
    @MONTH INT,
    @CLIENTID INT,          
    @FINANCIALYEAR INT        
AS          
BEGIN          
    DECLARE @TEMPDATE DATETIME;   
    DECLARE @RESULT INT,@CHALLANID INT,@BANKID INT,@QUARTER INT,@ALLOW92A92B INT,@MONTHYEAR VARCHAR(6);
    DECLARE @EMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
    DECLARE @NONEMPLOYEE TABLE(DEDUCTEEID INT, DEDUCTEECODE INT);
    CREATE TABLE #DIFFERSMP (BRANCHID INT, FORMTYPE VARCHAR(5), FORMID INT)	
    BEGIN TRANSACTION           
	   BEGIN TRY       
		  SET @RESULT = 0  
		  SET @TEMPDATE = GETDATE() ;  
		  IF(@MONTH < 4)          
			 SET @FINANCIALYEAR = @FINANCIALYEAR + 1     
		  IF (EXISTS(SELECT ID FROM PARKEDAMOUNT WITH(NOLOCK) WHERE MONTHYEAR = CONVERT(INT, (CONVERT(VARCHAR, @MONTH) + CONVERT(VARCHAR, @FINANCIALYEAR)))) 
			 AND EXISTS(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE MONTH(DEDUCTEDDATE) = @MONTH))     
		  BEGIN             
			 SELECT @CHALLANID = ISNULL(MAX(BANKCHALLANNO) + 1, 1) 
			 FROM CHALLANDETAIL WITH(NOLOCK) 
			 WHERE CONVERT(VARCHAR(8), CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112) 
				AND ISAUTOGENERATED = 1           
			 IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)          
				SET @QUARTER = 1          
			 ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)          
				SET @QUARTER = 2          
			 ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)          
				SET @QUARTER = 3          
			 ELSE           
				SET @QUARTER = 4  
			 SELECT @BANKID = BANKID 
			 FROM REMITTINGBANK WITH(NOLOCK) 
			 WHERE BSRCODE = CASE WHEN @CLIENTID = 15 THEN '6320396' ELSE '0261632' END         
			 SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS WITH(NOLOCK)            
			 SET @MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR)          
			 SELECT *
			 INTO #DEDUCTIONDET
			 FROM DEDUCTIONDETAIL WITH(NOLOCK)
			 WHERE MONTH(DEDUCTEDDATE) = @MONTH 
			 SELECT FORMID 
			 INTO #CHALLAN 
			 FROM CHALLANMAKEPAYMENT CMP WITH(NOLOCK)
				INNER JOIN TAXSECTIONS TS ON TS.SECTIONID = CMP.SECTIONID 
			 GROUP BY FORMID
			 SELECT DEDUCTEEID
			 INTO #DEDUCTION
			 FROM #DEDUCTIONDET DD WITH(NOLOCK) 
				INNER JOIN #CHALLAN C ON DD.FORMID = C.FORMID
			 WHERE MONTH(DEDUCTEDDATE) = @MONTH
			 GROUP BY DEDUCTEEID
			 SELECT * INTO #UNLINKED    
			 FROM    
			 (    
				SELECT DEDUCTIONID 
				FROM #DEDUCTIONDET WITH(NOLOCK) 
				WHERE MONTH(DEDUCTEDDATE) = @MONTH    
				EXCEPT    
				SELECT DEDUCTIONID FROM DEDCHALINK WITH(NOLOCK)    
			 )UD       
			 IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID IN (2,3))
				BEGIN
				    INSERT INTO @NONEMPLOYEE
				    SELECT D.DEDUCTEEID, NE.DEDUCTEECODE 
				    FROM DEDUCTEE D WITH(NOLOCK)
					   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
						  ON D.DEDUCTEEID = NE.DEDUCTEEID  
					   INNER JOIN #DEDUCTION DD 
						  ON D.DEDUCTEEID = DD.DEDUCTEEID
				END
			 IF EXISTS(SELECT FORMID FROM #CHALLAN WHERE FORMID = 1)
				BEGIN 
				    INSERT INTO @EMPLOYEE
				    SELECT D.DEDUCTEEID, 2 AS DEDUCTEECODE 
				    FROM DEDUCTEE D WITH(NOLOCK)
					   INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID  
					   INNER JOIN #DEDUCTION DD ON D.DEDUCTEEID = DD.DEDUCTEEID			
				END
			 SELECT * INTO #DEDUCTEE 
			 FROM
				(
				    SELECT * FROM @EMPLOYEE
				    UNION 
				    SELECT * FROM @NONEMPLOYEE  
				)DE
			INSERT INTO #DIFFERSMP
			 SELECT CB.BRANCHID, SUPERFINAL.FORMTYPE,           
				CASE WHEN SUPERFINAL.FORMTYPE = '26QI' OR SUPERFINAL.FORMTYPE = '26QV' THEN 2 
				    WHEN SUPERFINAL.FORMTYPE = '24Q' THEN 1 
				    ELSE 3 END AS [FORMID]  
			 FROM
			 (            
				SELECT FINAL.BRANCHID, FINAL.PARENTBRANCHID, FINAL.FORMTYPE, ABS(ISNULL(AMOUNT, 0) - TDS) AS BALANCEAMOUNT 
				FROM 
				(            
				    SELECT RESULT.BRANCHID, RESULT.PARENTBRANCHID, RESULT.SECTIONID AS FORMTYPE, SUM(RESULT.TDS) AS TDS 
				    FROM
				    (            
					   SELECT CB.BRANCHID, CB.PARENTBRANCHID,           
						  CASE WHEN DD.FORMID = 1 THEN '24Q'            
							 WHEN (DD.FORMID = 3) THEN '27Q'           
							 WHEN (DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' 
							 ELSE '26QV' END AS SECTIONID,          
						  SUM(DD.TOTALDEDUCTED) AS TDS   
					   FROM #DEDUCTIONDET DD WITH(NOLOCK)           
						  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID 
						  INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID           
						  INNER JOIN #UNLINKED DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID   
						  INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = DD.BRANCHID            
					   WHERE MONTH(DEDUCTEDDATE) = @MONTH          
					   GROUP BY CB.BRANCHID, TS.SECTIONID, DD.FORMID, CB.PARENTBRANCHID, 
						  CASE WHEN DD.FORMID = 1 THEN '24Q'            
							 WHEN (DD.FORMID = 3) THEN '27Q'           
							 WHEN (DD.FORMID = 2 AND TS.SECTIONID = 5) THEN '26QI' ELSE '26QV' END
				    ) AS RESULT GROUP BY RESULT.BRANCHID, RESULT.SECTIONID, RESULT.PARENTBRANCHID          
				) FINAL          
				LEFT JOIN PARKEDAMOUNT PA WITH(NOLOCK) 
				    ON PA.BRANCHID = FINAL.BRANCHID 
				    AND PA.FORMTYPE = FINAL.FORMTYPE             
				WHERE FLOOR(ISNULL(AMOUNT, 0)) - TDS < 0 
				    AND (MONTHYEAR = CAST(@MONTH AS VARCHAR) + CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL)           
			 ) SUPERFINAL            
			 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
				ON SUPERFINAL.BRANCHID = CB.BRANCHID          
			 INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) 
				ON SUPERFINAL.PARENTBRANCHID = CB1.BRANCHID           
			 ORDER BY CB1.BRANCHID           
			IF ((SELECT COUNT(BRANCHID) FROM #DIFFERSMP)= 0)
					BEGIN
						INSERT INTO #DIFFERSMP (BRANCHID, FORMTYPE, FORMID) VALUES(0, 'ABC', 0)
					END
			 SELECT BRANCHNAME, Q.BRANCHID, Q.SECTIONID, SECTIONNAME, ISNULL(Q.DEDUCTEECODE, 1) AS DEDUCTEECODE,           
				INCOMETAX, SURCHARGE, EDUCATIONCESS, Q.TOTALDEDUCTED, HASPARTPAYMENT, Q.QUARTER, FORMID
			 INTO #TEMPSMP          
			 FROM           
			 (          
				SELECT BRANCHNAME, BRANCHID, SECTIONID, SECTIONNAME, DEDUCTEECODE,           
				    ISNULL(CEILING(SUM(INCOMETAX)), 0) INCOMETAX, ISNULL(CEILING(SUM(SURCHARGE)), 0) SURCHARGE,          
				    ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS, 
				    (ISNULL(CEILING(SUM(INCOMETAX)), 0) + ISNULL(CEILING(SUM(SURCHARGE)), 0) + ISNULL(CEILING(SUM(EDUCATIONCESS)),0)) TOTALDEDUCTED,
				    MAX(HASPARTPAYMENT) HASPARTPAYMENT, QUARTER, FORMID
				FROM           
				(          
				    SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME, CB.BRANCHID, DD.SECTIONID,          
					   TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME, D.DEDUCTEECODE, SUM(DD.INCOMETAX) INCOMETAX,          
					   SUM(DD.SURCHARGE) SURCHARGE, SUM(DD.EDUCATIONCESS) EDUCATIONCESS, SUM(DD.TOTALDEDUCTED) TOTALDEDUCTED,          
					   0 HASPARTPAYMENT, DD.QUARTER, DD.FORMID
				    FROM           
				    (          
					   SELECT DEDUCTEEID, DEDUCTIONID, BRANCHID, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, 
						  DEDUCTEDDATE, FORMID, QUARTER,          
						  CASE WHEN FORMID = 1 THEN '24Q'           
							 WHEN (FORMID = 3) THEN '27Q'            
							 WHEN (FORMID=2 AND SECTIONID=5) THEN '26QI' 
							 ELSE '26QV' END AS FORMTYPE
					   FROM #DEDUCTIONDET WITH(NOLOCK)          
				    ) DD          
				    INNER JOIN #UNLINKED DL WITH(NOLOCK) 
					   ON DD.DEDUCTIONID = DL.DEDUCTIONID  
				    INNER JOIN #DEDUCTEE D WITH(NOLOCK) 
					   ON D.DEDUCTEEID = DD.DEDUCTEEID     
				    INNER JOIN TAXSECTIONS TS WITH(NOLOCK) 
					   ON DD.SECTIONID = TS.SECTIONID AND TS.FORMID = DD.FORMID           
				    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
					   ON CB.BRANCHID = DD.BRANCHID           
				    LEFT JOIN #DIFFERSMP DFL WITH(NOLOCK) 
					   ON DD.BRANCHID = DFL.BRANCHID 
						  AND DD.FORMTYPE = DFL.FORMTYPE          
				    WHERE DD.TOTALDEDUCTED > 0 
					   AND MONTH(DD.DEDUCTEDDATE) = @MONTH          
					   AND CB.BRANCHID IN  (
							 SELECT BRANCHID 
							 FROM BRANCHDEDUCTORS BD1 WITH(NOLOCK) 
								INNER JOIN DEDUCTOR D1 WITH(NOLOCK) 
								    ON BD1.DEDUCTORID = D1.DEDUCTORID           
							 WHERE BD1.QUARTER = @QUARTER 
								AND UPPER(D1.TAN) <> 'TANAPPLIED'
									   )
					   AND DFL.BRANCHID IS NULL           
				    GROUP BY DD.SECTIONID, SECTIONNAME, DEDUCTEECODE, TAXNAME, CB.BRANCHNAME, CB.BRANCHCODE, CB.BRANCHID, DD.QUARTER, DD.FORMID
				) RESULT
				GROUP BY SECTIONID, SECTIONNAME, DEDUCTEECODE, BRANCHNAME, BRANCHID, QUARTER, FORMID
			 ) Q          
			 INNER JOIN CHALLANMAKEPAYMENT CMP WITH(NOLOCK)           
				ON Q.BRANCHID = CMP.BRANCHID 
				    AND Q.SECTIONID = CMP.SECTIONID 
				    AND Q.QUARTER = CMP.QUARTER 
				    AND Q.DEDUCTEECODE = CMP.DEDUCTEECODE         
				    AND Q.TOTALDEDUCTED = CMP.TOTALDEDUCTED       
			 EXEC('ALTER TABLE #TEMPSMP ADD CHALLANID INT IDENTITY(' + @CHALLANID + ', 1)')            
			 /* INSERT INTO CHALLAN*/          
			 INSERT INTO CHALLANDETAIL (SERIALNO, BRANCHID, QUARTER, FORMID, ERETURNID, LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT,           
				BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE,           
                    LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, PENALTY, OTHERS, CHALLANTOTAL,           
                    LASTCHALLANTOTAL, ISCOMPANY, CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, ISAUTOGENERATED,           
                    ISOLTASINCLUDED, TEMPDATE, ISTTUMINCLUDED, MINORHEAD)                                
			 SELECT (NUM + ISNULL(SERIALNO, 0)) AS SERIALNO, BRANCHID, QUARTER, FORMID, 0 AS ERETURNID, 0 AS LINKEDCOUNT, 'N' AS ISNILLCHALLAN,          
				0 AS ISUPDATECHALLAN, 2 AS MODEOFPAYMENT, CHALLANID AS BANKCHALLANNO, CHALLANID AS LASTBANKCHALLANNO, '' AS TRNVOUCHERNO,          
				'' AS LASTTRNVOUCHERNO, @BANKID AS BANKID, @BANKID AS LASTBANKID, @TEMPDATE AS CHALLANPAIDDATE, GETDATE() AS CHALLANPAIDDATE,          
				NULL AS DATEOFDEBIT, CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END AS SECTIONID, INCOMETAX, SURCHARGE, 
				EDUCATIONCESS, 0 INTEREST, 0 PENALTY, 0 OTHERS, TOTALDEDUCTED AS CHALLANTOTAL,          
				TOTALDEDUCTED AS LASTCHALLANTOTAL, CASE WHEN DEDUCTEECODE = 2 THEN 0 ELSE 1 END AS ISCOMPANY,          
				'' CHEQUENO, NULL CHEQUEDATE, '' CHEQUEDRAWNON, '' TRANREFNO, '' TVRECEIPTNUMBER, 1 AS ISAUTOGENERATED,           
				0 AS ISOLTASINCLUDED, @TEMPDATE, 0 AS ISTTUMINCLUDED, 200 AS MINORHEAD      
			 FROM          
			 (          
				SELECT ROW_NUMBER() OVER (PARTITION BY T.BRANCHID, T.FORMID, T.QUARTER ORDER BY T.BRANCHID) AS NUM,          
				    SERIALNO, CHALLANID, T.BRANCHID, SECTIONID, DEDUCTEECODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED,          
				    T.FORMID, T.QUARTER           
				FROM #TEMPSMP T 
				LEFT JOIN 
				(    
				    SELECT BRANCHID, FORMID, QUARTER, MAX(SERIALNO) AS SERIALNO 
				    FROM CHALLANDETAIL WITH(NOLOCK)           
				    GROUP BY BRANCHID, FORMID, QUARTER           
				) Y          
				    ON T.BRANCHID = Y.BRANCHID AND T.FORMID = Y.FORMID AND T.QUARTER = Y.QUARTER          
			 ) DATA          
			 /*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/          
			 INSERT INTO DEDCHALINK(DEDUCTIONID, CHALLANID, BRANCHID)           
			 SELECT DISTINCT DD.DEDUCTIONID, CHALL.CHALLANID, DD.BRANCHID AS BRANCHID       
			 FROM           
			 (          
				SELECT DEDUCTIONID, FORMID, TOTALDEDUCTED, DEDUCTEEID, SECTIONID, BRANCHID, DEDUCTEDDATE
				FROM #DEDUCTIONDET WITH(NOLOCK)            
				WHERE MONTH(DEDUCTEDDATE) = @MONTH          
			 ) DD           
			 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID           
			 LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = DD.DEDUCTEEID           
			 LEFT JOIN DEDCHALINK CD WITH(NOLOCK) ON DD.DEDUCTIONID = CD.DEDUCTIONID AND CD.BRANCHID = DD.BRANCHID          
			 INNER JOIN #TEMPSMP T WITH(NOLOCK) ON DD.BRANCHID = T.BRANCHID AND DD.SECTIONID = T.SECTIONID 
				AND (ISNULL(NE.DEDUCTEECODE,2) = T.DEDUCTEECODE)
			 LEFT JOIN #DIFFERSMP DL WITH(NOLOCK) ON DD.BRANCHID = DL.BRANCHID AND DD.FORMID = DL.FORMID          
			 INNER JOIN           
			 (          
				SELECT CHALLANID, BANKCHALLANNO, CHALLANPAIDDATE FROM CHALLANDETAIL  WITH(NOLOCK)          
				WHERE CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) = CONVERT(VARCHAR(8), GETDATE(), 112) 
				    AND ISAUTOGENERATED = 1
			 ) CHALL ON CHALL.BANKCHALLANNO = T.CHALLANID          
			 WHERE DD.TOTALDEDUCTED > 0 
				AND MONTH(DD.DEDUCTEDDATE) = @MONTH 
				AND CD.DEDCHALINKID IS NULL           
			 SET @RESULT = 1          
		  END
		  COMMIT          
	   END TRY           
	   BEGIN CATCH          
		  SET @RESULT = -1          
		  ROLLBACK          
	   END CATCH                    
    IF (@RESULT = 1)          
	   BEGIN          
		  UPDATE CHALLANDETAIL SET CHALLANPAIDDATE = NULL, LASTCHALLANPAIDDATE = NULL, BANKCHALLANNO = NULL,
			 LASTBANKCHALLANNO = NULL 
		  WHERE ISAUTOGENERATED = 1 AND TEMPDATE = @TEMPDATE          
		  DELETE FROM CHALLANMAKEPAYMENT          
	   END          
    SELECT @RESULT          
    IF OBJECT_ID('TEMPDB..#DEDUCTIONDET') IS NOT NULL
	   DROP TABLE #DEDUCTIONDET
    IF OBJECT_ID('TEMPDB..#CHALLAN') IS NOT NULL
	   DROP TABLE #CHALLAN
    IF OBJECT_ID('TEMPDB..#DEDUCTION') IS NOT NULL
	   DROP TABLE #DEDUCTION
    IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
	   DROP TABLE #DEDUCTEE 
    IF OBJECT_ID('TEMPDB..#UNLINKED') IS NOT NULL
	   DROP TABLE #UNLINKED
    IF OBJECT_ID('TEMPDB..#DIFFERSMP') IS NOT NULL
	   DROP TABLE #DIFFERSMP
    IF OBJECT_ID('TEMPDB..#TEMPSMP') IS NOT NULL
	   DROP TABLE #TEMPSMP
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECHALLANINSQL')
DROP PROCEDURE USP_TDS_SAVECHALLANINSQL
GO
CREATE PROCEDURE [USP_TDS_SAVECHALLANINSQL]
 @MONTH INT	,
 @FINANCIALYEAR INT,
 @BULKMAKEPAYMENT BIT=0
AS
BEGIN
DECLARE @TEMPDATE DATETIME;
SET @TEMPDATE=GETDATE() ;
DECLARE @RESULT INT
SET @RESULT=0
BEGIN TRANSACTION
		BEGIN TRY
		IF(@MONTH<4)
		SET @FINANCIALYEAR=@FINANCIALYEAR+1
IF (EXISTS(SELECT * FROM PARKEDAMOUNT WITH(NOLOCK) WHERE MONTHYEAR=CONVERT(INT,(CONVERT(VARCHAR,@MONTH)+CONVERT(VARCHAR,@FINANCIALYEAR)))) AND EXISTS(SELECT * FROM DEDUCTIONDETAIL WHERE MONTH(DEDUCTEDDATE)=@MONTH))
BEGIN
 DECLARE @FORMID INT
 DECLARE @VAR INT
    IF @MONTH >9
    SET @VAR=2
    ELSE
    SET @VAR=1
     DECLARE @CHALLANID INT
 SELECT @CHALLANID=ISNULL(MAX(BANKCHALLANNO)+1,60000) FROM CHALLANDETAIL WITH(NOLOCK) WHERE CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) =CONVERT(VARCHAR(8), GETDATE(), 112) AND ISAUTOGENERATED=1
     DECLARE @QUARTER INT
    IF (@MONTH=4 OR @MONTH=5 OR @MONTH=6)
    SET @QUARTER=1
    ELSE IF (@MONTH=7 OR @MONTH=8 OR @MONTH=9)
    SET @QUARTER=2
    ELSE IF (@MONTH=10 OR @MONTH=11 OR @MONTH=12)
    SET @QUARTER=3
    ELSE
    SET @QUARTER=4
    DECLARE @BANKID INT
    SELECT @BANKID=BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE='0290179'
 DECLARE @ALLOW92A92B INT;
	SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS WITH(NOLOCK)
	DECLARE @MONTHYEAR VARCHAR(6)
	SET @MONTHYEAR=CAST(@MONTH AS VARCHAR)+CAST(@FINANCIALYEAR AS VARCHAR)
	EXEC USP_TDS_CHALLANSQL_PA @MONTHYEAR
	SELECT  CB.BRANCHID,SUPERFINAL.FORMTYPE,CASE WHEN SUPERFINAL.FORMTYPE='26QI' OR SUPERFINAL.FORMTYPE='26QV' THEN 2  WHEN SUPERFINAL.FORMTYPE='24Q' THEN 1 ELSE 3 END AS [FORMID] INTO #DIFFER FROM
 (
 SELECT FINAL.BRANCHID,FINAL.PARENTBRANCHID,FINAL.FORMTYPE,ABS(ISNULL(AMOUNT,0)-TDS) AS BALANCEAMOUNT  FROM
 (
  SELECT RESULT.BRANCHID,RESULT.PARENTBRANCHID,RESULT.SECTIONID AS FORMTYPE,SUM(RESULT.TDS) AS TDS FROM
  (
    SELECT CB.BRANCHID,CB.PARENTBRANCHID,CASE WHEN DD.FORMID=1 THEN '24Q' WHEN DD.FORMID=3 THEN '27Q' WHEN (DD.FORMID=2 AND DD.ENTRYTYPE=4 AND TS.SECTIONID=5) THEN '26QI' ELSE '26QV' END AS SECTIONID,SUM(DD.TOTALDEDUCTED) AS TDS FROM COMPANYBRANCH CB WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID
        INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID
        LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID
        LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
    WHERE  DCL.DEDCHALINKID IS NULL AND MONTH(DEDUCTEDDATE)=@MONTH
    GROUP BY CB.BRANCHID,TS.SECTIONID,DD.FORMID,CB.PARENTBRANCHID,DD.ENTRYTYPE
  ) AS RESULT GROUP BY RESULT.BRANCHID,RESULT.SECTIONID,RESULT.PARENTBRANCHID
 ) FINAL
        LEFT JOIN PARKEDAMOUNT PA ON PA.BRANCHID=FINAL.BRANCHID AND PA.FORMTYPE=FINAL.FORMTYPE
        WHERE FLOOR(ISNULL(AMOUNT,0))-TDS < 0 AND (MONTHYEAR=CAST(@MONTH AS VARCHAR)+CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL )
  )SUPERFINAL
        INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON SUPERFINAL.BRANCHID=CB.BRANCHID
        INNER JOIN COMPANYBRANCH CB1 WITH(NOLOCK) ON SUPERFINAL.PARENTBRANCHID=CB1.BRANCHID
        ORDER BY CB1.BRANCHID
SELECT BRANCHNAME,BRANCHID,SECTIONID,SECTIONNAME,ISNULL(DEDUCTEECODE,1) AS DEDUCTEECODE, INCOMETAX,SURCHARGE,EDUCATIONCESS ,TOTALDEDUCTED,HASPARTPAYMENT,QUARTER,FORMID,ISFINACLE  INTO #TEMP
	FROM
	(
		SELECT BRANCHNAME,BRANCHID,SECTIONID,SECTIONNAME,DEDUCTEECODE,ISNULL(CEILING(SUM(INCOMETAX)),0) INCOMETAX,ISNULL(CEILING(SUM(SURCHARGE)),0) SURCHARGE,ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS,ISNULL(CEILING(SUM(TOTALDEDUCTED)),0) TOTALDEDUCTED, MAX(HASPARTPAYMENT) HASPARTPAYMENT,QUARTER,FORMID,ISFINACLE
		FROM
		(
			SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME,CB.BRANCHID, DD.SECTIONID,TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME ,NE.DEDUCTEECODE,SUM(DD.INCOMETAX) INCOMETAX,SUM(DD.SURCHARGE) SURCHARGE,SUM(DD.EDUCATIONCESS) EDUCATIONCESS,SUM(TOTALDEDUCTED) TOTALDEDUCTED,0 HASPARTPAYMENT,DD.QUARTER,DD.FORMID,ISFINACLE
			FROM
			(
			SELECT DEDUCTEEID,DEDUCTIONID,BRANCHID,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,FORMID,QUARTER,CASE WHEN FORMID=1 THEN '24Q' WHEN FORMID=3 THEN '27Q' WHEN (FORMID=2 AND SECTIONID=5 AND ENTRYTYPE=4) THEN '26QI' ELSE '26QV' END AS FORMTYPE,CASE WHEN ENTRYTYPE=4 THEN 1 ELSE 0 END ISFINACLE FROM DEDUCTIONDETAIL) DD
			LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID
			LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
			INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID AND TS.FORMID = DD.FORMID
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID
			LEFT JOIN #DIFFER DFL ON DD.BRANCHID=DFL.BRANCHID AND DD.FORMTYPE=DFL.FORMTYPE
			WHERE DD.TOTALDEDUCTED>0 AND MONTH(DD.DEDUCTEDDATE)=@MONTH
			AND CB.BRANCHID IN (SELECT BRANCHID FROM BRANCHDEDUCTORS BD1 INNER JOIN DEDUCTOR D1 ON BD1.DEDUCTORID=D1.DEDUCTORID
		    WHERE BD1.QUARTER=@QUARTER AND UPPER(D1.TAN)  <> 'TANAPPLIED')
			 AND DL.DEDCHALINKID IS NULL AND DFL.BRANCHID IS NULL
			GROUP BY DD.SECTIONID,SECTIONNAME,DEDUCTEECODE,TAXNAME,CB.BRANCHNAME,CB.BRANCHCODE,CB.BRANCHID,DD.QUARTER,DD.FORMID,ISFINACLE
		) RESULT WHERE FORMID<>1
		GROUP BY SECTIONID,SECTIONNAME,DEDUCTEECODE,BRANCHNAME,BRANCHID,QUARTER,FORMID,ISFINACLE
	) Q
	EXEC('ALTER TABLE #TEMP ADD CHALLANID INT IDENTITY(' + @CHALLANID + ', 1)')
	/* INSERT INTO CHALLAN*/
     INSERT INTO CHALLANDETAIL(SERIALNO, BRANCHID, QUARTER, FORMID, ERETURNID, LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT,
                      BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE,
                      LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, PENALTY, OTHERS, CHALLANTOTAL,
                      LASTCHALLANTOTAL, ISCOMPANY, CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, ISAUTOGENERATED,
                      ISOLTASINCLUDED,TEMPDATE,ISTTUMINCLUDED)
						SELECT (NUM+ISNULL(SERIALNO,0)) AS SERIALNO,BRANCHID,QUARTER,FORMID,0 AS ERETURNID,0 AS LINKEDCOUNT,'N' AS ISNILLCHALLAN,0 AS ISUPDATECHALLAN,
							   2 AS MODEOFPAYMENT,CHALLANID AS BANKCHALLANNO,CHALLANID AS LASTBANKCHALLANNO,'' AS TRNVOUCHERNO,'' AS LASTTRNVOUCHERNO,
							   @BANKID AS BANKID,@BANKID AS LASTBANKID,@TEMPDATE AS CHALLANPAIDDATE,GETDATE() AS CHALLANPAIDDATE,NULL AS DATEOFDEBIT,
							  SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,0 INTEREST,0 PENALTY,0 OTHERS,TOTALDEDUCTED AS CHALLANTOTAL,
							  TOTALDEDUCTED AS LASTCHALLANTOTAL,CASE WHEN DEDUCTEECODE=2  THEN 0 ELSE 1 END AS ISCOMPANY,
							  '' CHEQUENO,NULL CHEQUEDATE,'' CHEQUEDRAWNON,'' TRANREFNO,'' TVRECEIPTNUMBER,1 AS ISAUTOGENERATED,
											 0 AS ISOLTASINCLUDED,@TEMPDATE,0 AS ISTTUMINCLUDED  FROM
												(
													SELECT ROW_NUMBER() OVER (PARTITION BY T.BRANCHID,T.FORMID,T.QUARTER ORDER BY T.BRANCHID)  AS NUM,SERIALNO,
													CHALLANID,T.BRANCHID,SECTIONID,DEDUCTEECODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,T.FORMID,T.QUARTER FROM #TEMP T
													LEFT JOIN
													(
														SELECT BRANCHID,FORMID,QUARTER,MAX(SERIALNO) AS SERIALNO FROM CHALLANDETAIL WITH(NOLOCK)
														GROUP BY BRANCHID,FORMID,QUARTER
													) Y
													   ON T.BRANCHID= Y.BRANCHID AND T.FORMID= Y.FORMID AND T.QUARTER = Y.QUARTER
												) DATA
	/*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/
	INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID)
	SELECT DISTINCT
	DD.DEDUCTIONID,CHALL.CHALLANID,
	DD.BRANCHID AS BRANCHID
	FROM (SELECT DEDUCTIONID,FORMID,TOTALDEDUCTED,DEDUCTEEID,SECTIONID,BRANCHID,DEDUCTEDDATE,CASE WHEN ENTRYTYPE=4 THEN 1 ELSE 0 END ISFINACLE FROM  DEDUCTIONDETAIL WITH(NOLOCK) WHERE MONTH(DEDUCTEDDATE)=@MONTH) DD INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID=DD.DEDUCTEEID
	LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID
	LEFT JOIN DEDCHALINK CD WITH(NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID AND CD.BRANCHID=DD.BRANCHID
	INNER JOIN #TEMP T ON DD.BRANCHID=T.BRANCHID AND DD.SECTIONID=T.SECTIONID AND (NE.DEDUCTEECODE=T.DEDUCTEECODE) AND DD.ISFINACLE=T.ISFINACLE
	LEFT JOIN #DIFFER DL ON DD.BRANCHID=DL.BRANCHID AND DD.FORMID=DL.FORMID
	INNER JOIN
	(
	 SELECT CHALLANID,BANKCHALLANNO,CHALLANPAIDDATE FROM CHALLANDETAIL WITH(NOLOCK) WHERE CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) =CONVERT(VARCHAR(8), GETDATE(), 112)
	  ) CHALL ON CHALL.BANKCHALLANNO=T.CHALLANID
	WHERE  DD.TOTALDEDUCTED>0 AND MONTH(DD.DEDUCTEDDATE)=@MONTH  AND CD.DEDCHALINKID IS NULL
	SET @RESULT=1
	END
	IF(@BULKMAKEPAYMENT=1)
	BEGIN
	UPDATE CHALLANDETAIL SET CHALLANPAIDDATE=NULL, LASTCHALLANPAIDDATE=NULL,BANKCHALLANNO=NULL,LASTBANKCHALLANNO=NULL WHERE ISAUTOGENERATED=1 AND TEMPDATE=@TEMPDATE
	END
	END TRY
		BEGIN CATCH
			SET @RESULT=-1
		ROLLBACK
		END CATCH
	COMMIT
	SELECT @RESULT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECHALLANINSQLBRANCHWISE')
DROP PROCEDURE USP_TDS_SAVECHALLANINSQLBRANCHWISE
GO
CREATE PROCEDURE [USP_TDS_SAVECHALLANINSQLBRANCHWISE]
 @MONTH INT ,
 @FINANCIALYEAR INT,
 @BRANCHID INT,
 @FORMTYPE VARCHAR(10)
AS
BEGIN
DECLARE @RESULT INT
SET @RESULT=0
  IF(@MONTH<4)
		SET @FINANCIALYEAR=@FINANCIALYEAR+1
IF (EXISTS(SELECT * FROM PARKEDAMOUNT WITH(NOLOCK) WHERE MONTHYEAR=CONVERT(INT,(CONVERT(VARCHAR,@MONTH)+CONVERT(VARCHAR,@FINANCIALYEAR)))) AND EXISTS(SELECT * FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE MONTH(DEDUCTEDDATE)=@MONTH))
BEGIN
 DECLARE @DATE DATETIME
 DECLARE @FORMID INT
 DECLARE @VAR INT
    IF @MONTH >9
    SET @VAR=2
    ELSE
    SET @VAR=1
    DECLARE @CHALLANID INT
 SELECT @CHALLANID=ISNULL(MAX(BANKCHALLANNO)+1,60000) FROM CHALLANDETAIL WITH(NOLOCK) WHERE CONVERT(VARCHAR(8),CHALLANPAIDDATE, 112) =CONVERT(VARCHAR(8), GETDATE(), 112) AND ISAUTOGENERATED=1
    DECLARE @BANKID INT
    SELECT @BANKID=BANKID FROM REMITTINGBANK WHERE BSRCODE='0290179'
 DECLARE @ALLOW92A92B INT;
 SELECT @ALLOW92A92B = ALLOW92A92B FROM DEFAULTSETTINGS
 SELECT  CB.BRANCHID,SUPERFINAL.FORMTYPE,CASE WHEN SUPERFINAL.FORMTYPE='26QI' OR SUPERFINAL.FORMTYPE='26QV' THEN 2  WHEN SUPERFINAL.FORMTYPE='24Q' THEN 1 ELSE 3 END AS [FORMID] INTO #DIFFER FROM
 (
 SELECT FINAL.BRANCHID,FINAL.PARENTBRANCHID,FINAL.FORMTYPE,ABS(ISNULL(AMOUNT,0)-TDS) AS BALANCEAMOUNT  FROM
 (
  SELECT RESULT.BRANCHID,RESULT.PARENTBRANCHID,RESULT.SECTIONID AS FORMTYPE,SUM(RESULT.TDS) AS TDS FROM
  (
    SELECT CB.BRANCHID,CB.PARENTBRANCHID,CASE WHEN DD.FORMID=1 THEN '24Q' WHEN DD.FORMID=3 THEN '27Q' WHEN (DD.FORMID=2 AND DD.ENTRYTYPE=4 AND TS.SECTIONID=5) THEN '26QI' ELSE '26QV' END AS SECTIONID,SUM(DD.TOTALDEDUCTED) AS TDS FROM COMPANYBRANCH CB WITH(NOLOCK) INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID
        INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID=DD.SECTIONID
        LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID
        LEFT JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID=DCL.DEDUCTIONID
    WHERE  DCL.DEDCHALINKID IS NULL AND MONTH(DEDUCTEDDATE)=@MONTH
    GROUP BY CB.BRANCHID,TS.SECTIONID,DD.FORMID,CB.PARENTBRANCHID,DD.ENTRYTYPE
  ) AS RESULT GROUP BY RESULT.BRANCHID,RESULT.SECTIONID,RESULT.PARENTBRANCHID
 ) FINAL
        LEFT JOIN PARKEDAMOUNT PA ON PA.BRANCHID=FINAL.BRANCHID AND PA.FORMTYPE=FINAL.FORMTYPE
        WHERE FLOOR(ISNULL(AMOUNT,0))-TDS < 0 AND (MONTHYEAR=CAST(@MONTH AS VARCHAR)+CAST(@FINANCIALYEAR AS VARCHAR) OR  PA.MONTHYEAR IS NULL )
  )SUPERFINAL
        INNER JOIN COMPANYBRANCH CB ON SUPERFINAL.BRANCHID=CB.BRANCHID
        INNER JOIN COMPANYBRANCH CB1 ON SUPERFINAL.PARENTBRANCHID=CB1.BRANCHID
        ORDER BY CB1.BRANCHID
SELECT BRANCHNAME,BRANCHID,SECTIONID,SECTIONNAME,ISNULL(DEDUCTEECODE,1) AS DEDUCTEECODE, INCOMETAX,SURCHARGE,EDUCATIONCESS ,TOTALDEDUCTED,HASPARTPAYMENT,QUARTER,FORMID,FORMTYPE,ISFINACLE INTO #TEMP
 FROM
 (
  SELECT BRANCHNAME,BRANCHID,SECTIONID,SECTIONNAME,DEDUCTEECODE,ISNULL(CEILING(SUM(INCOMETAX)),0) INCOMETAX,ISNULL(CEILING(SUM(SURCHARGE)),0) SURCHARGE,ISNULL(CEILING(SUM(EDUCATIONCESS)),0) EDUCATIONCESS,ISNULL(CEILING(SUM(TOTALDEDUCTED)),0) TOTALDEDUCTED, MAX(HASPARTPAYMENT) HASPARTPAYMENT
,QUARTER,FORMID,FORMTYPE,ISFINACLE
  FROM
  (
   SELECT CB.BRANCHNAME + ' ('+ CB.BRANCHCODE + ')' AS BRANCHNAME,CB.BRANCHID, DD.SECTIONID,TS.SECTIONNAME + '('+ TS.TAXNAME + ')' AS SECTIONNAME ,NE.DEDUCTEECODE,SUM(DD.INCOMETAX) INCOMETAX,SUM(DD.SURCHARGE) SURCHARGE,SUM(DD.EDUCATIONCESS) EDUCATIONCESS,   SUM(TOTALDEDUCTED) TOTALDEDUCTED,0 HASPARTPAYMENT,QUARTER,DD.FORMID,DD.FORMTYPE,ISFINACLE
   FROM (SELECT DEDUCTEEID,DEDUCTIONID,BRANCHID,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,DEDUCTEDDATE,FORMID,QUARTER,CASE WHEN FORMID=1 THEN '24Q' WHEN FORMID=3 THEN '27Q' WHEN (FORMID=2 AND SECTIONID=5 AND ENTRYTYPE=4) THEN '26QI' ELSE '26QV' END AS FORMTYPE,CASE WHEN ENTRYTYPE=4 THEN 1 ELSE 0 END ISFINACLE FROM DEDUCTIONDETAIL) DD 
   LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DD.DEDUCTIONID = DL.DEDUCTIONID AND DD.BRANCHID = DL.BRANCHID
   LEFT JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
   LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
   INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID AND TS.FORMID = DD.FORMID
   INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=DD.BRANCHID
   LEFT JOIN #DIFFER DFL ON DD.BRANCHID=DFL.BRANCHID AND DD.FORMTYPE=DFL.FORMTYPE
   WHERE DD.TOTALDEDUCTED>0 AND MONTH(DD.DEDUCTEDDATE)=@MONTH AND DL.DEDCHALINKID IS NULL AND DFL.BRANCHID IS NULL
   GROUP BY DD.SECTIONID,SECTIONNAME,DEDUCTEECODE,TAXNAME,CB.BRANCHNAME,CB.BRANCHCODE,CB.BRANCHID,DD.QUARTER,DD.FORMID,DD.FORMTYPE,ISFINACLE
  ) RESULT WHERE FORMTYPE=@FORMTYPE AND BRANCHID=@BRANCHID
  GROUP BY SECTIONID,SECTIONNAME,DEDUCTEECODE,BRANCHNAME,BRANCHID,QUARTER,FORMID,FORMTYPE,ISFINACLE
 ) Q
 EXEC('ALTER TABLE #TEMP ADD CHALLANID INT IDENTITY(' + @CHALLANID + ', 1)')
 /* INSERT INTO CHALLAN*/
   SET @DATE=GETDATE()
     INSERT INTO CHALLANDETAIL(SERIALNO, BRANCHID, QUARTER, FORMID, ERETURNID, LINKDEDCOUNT, ISNILCHALLAN, ISUPDATECHALLAN, MODEOFPAYMENT,
                      BANKCHALLANNO, LASTBANKCHALLANNO, TRNVOUCHERNO, LASTTRNVOUCHERNO, BANKID, LASTBANKID, CHALLANPAIDDATE,
                      LASTCHALLANPAIDDATE, DATEOFDEBIT, SECTIONID, INCOMETAX, SURCHARGE, EDUCATIONCESS, INTEREST, PENALTY, OTHERS, CHALLANTOTAL,
                      LASTCHALLANTOTAL, ISCOMPANY, CHEQUENO, CHEQUEDATE, CHEQUEDRAWNON, TRANREFNO, TVRECEIPTNUMBER, ISAUTOGENERATED,
                      ISOLTASINCLUDED,TEMPDATE,ISTTUMINCLUDED)
      SELECT (NUM+ISNULL(SERIALNO,0)) AS SERIALNO,BRANCHID,QUARTER,FORMID,0 AS ERETURNID,0 AS LINKEDCOUNT,'N' AS ISNILLCHALLAN,0 AS ISUPDATECHALLAN,
          2 AS MODEOFPAYMENT,CHALLANID AS BANKCHALLANNO,CHALLANID AS LASTBANKCHALLANNO,'' AS TRNVOUCHERNO,'' AS LASTTRNVOUCHERNO,
          @BANKID AS BANKID,@BANKID AS LASTBANKID,NULL AS CHALLANPAIDDATE,NULL AS CHALLANPAIDDATE,NULL AS DATEOFDEBIT,
         SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,0 INTEREST,0 PENALTY,0 OTHERS,TOTALDEDUCTED AS CHALLANTOTAL,
         TOTALDEDUCTED AS LASTCHALLANTOTAL,CASE WHEN DEDUCTEECODE=2  THEN 0 ELSE 1 END AS ISCOMPANY,
         '' CHEQUENO,NULL CHEQUEDATE,'' CHEQUEDRAWNON,'' TRANREFNO,'' TVRECEIPTNUMBER,1 AS ISAUTOGENERATED,
            0 AS ISOLTASINCLUDED,@DATE AS TEMPDATE,0 AS ISTTUMINCLUDED  FROM
            (
             SELECT ROW_NUMBER() OVER (PARTITION BY T.BRANCHID,T.FORMID,T.QUARTER ORDER BY T.BRANCHID)  AS NUM,SERIALNO,
             CHALLANID,T.BRANCHID,SECTIONID,DEDUCTEECODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,T.FORMID,T.QUARTER FROM #TEMP T
             LEFT JOIN
             (
              SELECT BRANCHID,FORMID,QUARTER,MAX(SERIALNO) AS SERIALNO FROM CHALLANDETAIL WITH(NOLOCK)
              GROUP BY BRANCHID,FORMID,QUARTER
             ) Y
                ON T.BRANCHID= Y.BRANCHID AND T.FORMID= Y.FORMID AND T.QUARTER = Y.QUARTER
            ) DATA
 /*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/
 SELECT DISTINCT
 DD.DEDUCTIONID,CHALL.CHALLANID,
 DD.BRANCHID AS BRANCHID INTO #LINK
 FROM (SELECT DEDUCTIONID,FORMID,TOTALDEDUCTED,DEDUCTEEID,SECTIONID,BRANCHID,DEDUCTEDDATE,CASE WHEN ENTRYTYPE=4 THEN 1 ELSE 0 END ISFINACLE FROM  DEDUCTIONDETAIL WHERE MONTH(DEDUCTEDDATE)=@MONTH) DD INNER JOIN DEDUCTEE D ON D.DEDUCTEEID=DD.DEDUCTEEID
 LEFT JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID=DD.DEDUCTEEID
 LEFT JOIN DEDCHALINK CD WITH(NOLOCK) ON DD.DEDUCTIONID=CD.DEDUCTIONID AND CD.BRANCHID=DD.BRANCHID
 INNER JOIN #TEMP T ON DD.BRANCHID=T.BRANCHID AND DD.SECTIONID=T.SECTIONID AND (NE.DEDUCTEECODE=T.DEDUCTEECODE) AND DD.ISFINACLE=T.ISFINACLE
 LEFT JOIN #DIFFER DL ON DD.BRANCHID=DL.BRANCHID AND DD.FORMID=DL.FORMID
 INNER JOIN
 (
	  SELECT CHALLANID,BANKCHALLANNO,CHALLANPAIDDATE FROM CHALLANDETAIL WITH(NOLOCK) WHERE CONVERT(VARCHAR(8),TEMPDATE, 112) =CONVERT(VARCHAR(8), GETDATE(), 112)
	  AND BRANCHID=@BRANCHID AND TEMPDATE=@DATE
 ) CHALL ON CHALL.BANKCHALLANNO=T.CHALLANID
 WHERE  DD.TOTALDEDUCTED>0 AND MONTH(DD.DEDUCTEDDATE)=@MONTH  AND CD.DEDCHALINKID IS NULL
 /*SELECT UNLINKED DEDUCTIONS FOR GIVEN SECTIONID AND LINK IT FOR GIVEN CHALLNID*/
 INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID)
 SELECT DEDUCTIONID,CHALLANID,BRANCHID FROM
 #LINK
 UPDATE CHALLANDETAIL SET BANKCHALLANNO=NULL,LASTBANKCHALLANNO=NULL WHERE CHALLANID IN (SELECT DISTINCT CHALLANID FROM #LINK)
 SET @RESULT=1
 END
 SELECT @RESULT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveChapterVIAdet')
DROP PROCEDURE USP_TDS_SaveChapterVIAdet
GO
CREATE PROCEDURE USP_TDS_SaveChapterVIAdet
@COMID INT,  
@SALARYSECTIONID INT,
@GROSS NUMERIC(13,2),
@QUALIFYING NUMERIC(13,2),
@DEDUCTIBLE NUMERIC(13,2),
@CONDI BIT = NULL,
@ISSELF BIT = NULL 
AS
 BEGIN 
	DECLARE @CHAPTERVIADETID INT;
	SET @CHAPTERVIADETID = -1;
	IF(@SALARYSECTIONID = 6 OR @SALARYSECTIONID = 25)
	 BEGIN
		SELECT @CHAPTERVIADETID = CHAPTERVIADETAILID FROM CHAPTERVIADET WITH(NOLOCK)  WHERE SALARYSECTIONID = @SALARYSECTIONID AND COMID = @COMID AND ISSELF = @ISSELF
	 END
	ELSE
	 BEGIN
		SELECT @CHAPTERVIADETID = CHAPTERVIADETAILID FROM CHAPTERVIADET WITH(NOLOCK) WHERE SALARYSECTIONID = @SALARYSECTIONID AND COMID = @COMID
	 END
    IF (@CHAPTERVIADETID <> -1)
	  BEGIN		  
		UPDATE CHAPTERVIADET SET GROSSAMOUNT = @GROSS , QUALIFYINGAMOUNT = @QUALIFYING, DEDUCTIBLEAMOUNT = @DEDUCTIBLE
		WHERE CHAPTERVIADETAILID = @CHAPTERVIADETID --AND SALARYSECTIONID = @SALARYSECTIONID
	  END
	ELSE
	  BEGIN
	   INSERT INTO CHAPTERVIADET (COMID, SALARYSECTIONID,GROSSAMOUNT, QUALIFYINGAMOUNT,DEDUCTIBLEAMOUNT, CONDI, ISSELF)
	   VALUES(@COMID,@SALARYSECTIONID,@GROSS,@QUALIFYING,@DEDUCTIBLE,@CONDI, @ISSELF)
	   SET @CHAPTERVIADETID = SCOPE_IDENTITY();
	  END
	IF(@SALARYSECTIONID = 18)
	 BEGIN
		IF EXISTS(SELECT OTHERINCOMEID FROM OTHERINCOME WITH(NOLOCK) WHERE COMID = @COMID)
		 BEGIN
			UPDATE OTHERINCOME SET INTERESTONSB = @GROSS 
			FROM OTHERINCOME WHERE COMID = @COMID
		 END
	   ELSE
	    BEGIN
			INSERT INTO OTHERINCOME(COMID, INTERESTONSB)
			VALUES(@COMID, @GROSS)
	    END
	 END
   SELECT @CHAPTERVIADETID  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveChapterVIADetails')
DROP PROCEDURE USP_TDS_SaveChapterVIADetails
GO
CREATE PROCEDURE [USP_TDS_SaveChapterVIADetails]  
 @SALARYDETAILID INT,  
 @CHAPTERVIADETAILID INT,   
 @SALARYSECTIONID INT,  
 @GROSSAMOUNT NUMERIC(12,2),  
 @QUALIFYINGAMOUNT NUMERIC(12,2),  
 @DEDUCTIBLEAMOUNT NUMERIC(12,2),  
 @REMARKS VARCHAR(50)   
AS  
 BEGIN  
  INSERT INTO CHAPTERVIADETAIL(SALARYDETAILID,SALARYSECTIONID,GROSSAMOUNT,QUALIFYINGAMOUNT,DEDUCTIBLEAMOUNT,REMARKS)  
  VALUES (@SALARYDETAILID,@SALARYSECTIONID ,@GROSSAMOUNT,@QUALIFYINGAMOUNT,@DEDUCTIBLEAMOUNT,@REMARKS);  
  SET @CHAPTERVIADETAILID = SCOPE_IDENTITY();  
  SELECT @CHAPTERVIADETAILID  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECHAPTERVIADETAILSF004')
DROP PROCEDURE USP_TDS_SAVECHAPTERVIADETAILSF004
GO
CREATE PROCEDURE [USP_TDS_SAVECHAPTERVIADETAILSF004]
	@SALARYDETAILID INT,
	@SALARYSECTIONID INT,
	@GROSSAMOUNT NUMERIC(12,2),
	@QUALIFYINGAMOUNT NUMERIC(12,2),
	@DEDUCTIBLEAMOUNT NUMERIC(12,2),
	@REMARKS VARCHAR(50)
AS
	BEGIN
		INSERT INTO CHAPTERVIADETAIL(SALARYDETAILID,SALARYSECTIONID,GROSSAMOUNT,QUALIFYINGAMOUNT,DEDUCTIBLEAMOUNT,REMARKS)
		VALUES      (@SALARYDETAILID,@SALARYSECTIONID ,@GROSSAMOUNT,@QUALIFYINGAMOUNT,@DEDUCTIBLEAMOUNT,@REMARKS);
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveChapterVIADetailsPayFile')
DROP PROCEDURE USP_TDS_SaveChapterVIADetailsPayFile
GO
CREATE PROCEDURE  USP_TDS_SaveChapterVIADetailsPayFile 
@MONTHID INT    
AS    
  BEGIN
	 -- SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED    
	  SET NOCOUNT ON
	     SELECT DISTINCT COMID INTO #SALDETAIL FROM SALDETAIL WITH(NOLOCK) WHERE MONTHID = @MONTHID 
	  	 SELECT SD.COMID, EM.BRANCHID 
		 INTO #COMID 
		 FROM #SALDETAIL SD
		 INNER JOIN 
		 (
			 SELECT DISTINCT COMID, BRANCHID FROM EMPWORKMONTH WITH(NOLOCK) WHERE MONTHID = @MONTHID
		 ) EM ON EM.COMID = SD.COMID	
		GROUP BY SD.COMID, EM.BRANCHID 
		SELECT D.DEDUCTEEID, SD.COMID, ISNULL(C80CID, -1) AS C80CID, SUM(NETAMT)NETAMT
		INTO #SAL
		FROM SALDETAIL SD WITH(NOLOCK)  
		 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID  
		 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID  
		 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID 
		 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.BRANCHID = LC.BRANCHID AND E.DEDUCTEEID = D.DEDUCTEEID
		 INNER JOIN #COMID C ON C.COMID = SD.COMID AND C.BRANCHID = LC.BRANCHID  
		 WHERE ISNULL(C80CID, -1) > 0 AND ISNULL(SH.INCLUDEINTAX,0) = 1 
		 GROUP BY SD.COMID, ISNULL(C80CID, -1),D.DEDUCTEEID
		 SELECT D.DEDUCTEEID, CVIA.COMID , C80.C80CID, SUM(GROSS)GROSS, SUM(QUALIFYING)QUALIFYING, SUM(DEDUCTIBLE)DEDUCTIBLE
		 INTO #C80 
		  FROM CHAPTERVIADET CVIA WITH(NOLOCK) 
		 INNER JOIN CVIA80CDET C80 WITH(NOLOCK) ON C80.CHAPTERVIADETID = CVIA.CHAPTERVIADETAILID 
		 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = CVIA.COMID  
		 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID 
		 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.BRANCHID = LC.BRANCHID AND E.DEDUCTEEID = D.DEDUCTEEID
		 INNER JOIN #COMID C ON C.COMID = CVIA.COMID AND C.BRANCHID = LC.BRANCHID  
		 GROUP BY CVIA.COMID, C80.C80CID,D.DEDUCTEEID
		SELECT S.DEDUCTEEID, 3 AS SALARYSECTIONID, NETAMT INTO #C80CDET FROM
		(
			SELECT COMID, C80CID FROM #SAL
			EXCEPT
			SELECT COMID, C80CID FROM #C80
		)T
		INNER JOIN 
		#SAL S ON S.COMID = T.COMID AND S.C80CID = T.C80CID
		SELECT DEDUCTEEID, SALARYSECTIONID, SUM(GROSS)GROSS,  SUM(QUALIFYING)QUALIFYING,  CASE WHEN SUM(DEDUCTIBLE) > 100000 THEN 100000 ELSE SUM(DEDUCTIBLE) END AS DEDUCTIBLE
		INTO #CHAPTERVIA 
		FROM
		(
		 SELECT DEDUCTEEID,SALARYSECTIONID, NETAMT AS GROSS,NETAMT AS QUALIFYING, NETAMT AS DEDUCTIBLE FROM #C80CDET
		 UNION ALL 
		 SELECT DEDUCTEEID,3 AS SALARYSECTIONID, GROSS,QUALIFYING,DEDUCTIBLE FROM #C80 
		 UNION ALL 
		 SELECT D.DEDUCTEEID, 15 AS C80CID, OS.AMOUNT AS GROSS,OS.AMOUNT AS QUALIFYING,OS.AMOUNT AS DEDUCTIBLE FROM OTHERINCOME O  WITH(NOLOCK) 
		 INNER JOIN OTHERINCOMESOURCES OS WITH(NOLOCK) ON O.OTHERINCOMEID = OS.OTHERINCOMEID  
		 INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = O.COMID  
		 INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID 
		 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.BRANCHID = LC.BRANCHID AND E.DEDUCTEEID = D.DEDUCTEEID 
		 INNER JOIN #COMID C ON C.COMID = O.COMID AND C.BRANCHID = LC.BRANCHID   
		 WHERE OS.SOURCEID = 2
		)CVIA  
		GROUP BY DEDUCTEEID, SALARYSECTIONID
		UPDATE CHAPTERVIADETAIL SET GROSSAMOUNT = CVIA.GROSS, QUALIFYINGAMOUNT = CVIA.QUALIFYING, DEDUCTIBLEAMOUNT = CVIA.DEDUCTIBLE
		FROM CHAPTERVIADETAIL DET 
		INNER JOIN SALARYDETAIL SD ON DET.SALARYDETAILID = SD.SALARYDETAILID
	    INNER JOIN #CHAPTERVIA CVIA ON CVIA.SALARYSECTIONID = DET.SALARYSECTIONID AND CVIA.DEDUCTEEID = SD.DEDUCTEEID
		SELECT SALARYSECTIONID,SD.SALARYDETAILID, SD.DEDUCTEEID,LC.BRANCHID,LC.COMID
		INTO #SALDETAILSTEMP
		 FROM SALARYDETAIL SD
	   LEFT JOIN CHAPTERVIADETAIL CDET WITH(NOLOCK) ON SD.SALARYDETAILID = CDET.SALARYDETAILID
	   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
       INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID 
	   INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID 
	   SELECT SD.SALARYSECTIONID,SD.SALARYDETAILID, SD.DEDUCTEEID INTO #SALDETAILS 
	   FROM #SALDETAILSTEMP SD
       INNER JOIN #COMID C WITH(NOLOCK) ON C.COMID = SD.COMID AND C.BRANCHID = SD.BRANCHID    
      INSERT INTO CHAPTERVIADETAIL (SALARYDETAILID, SALARYSECTIONID, GROSSAMOUNT, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT)
	  SELECT C.SALARYDETAILID, CDET.SALARYSECTIONID, GROSS, QUALIFYING, DEDUCTIBLE
	  FROM #CHAPTERVIA CDET 
	  LEFT JOIN #SALDETAILS C ON C.DEDUCTEEID = CDET.DEDUCTEEID 
	  WHERE C.SALARYSECTIONID IS NULL AND CDET.GROSS > 0
	  UPDATE SALARYDETAIL SET TOTALDEDUNDERCHAPTERVIA = CVIA.DEDUCTIBLEAMOUNT, TOTALTAXABLEINCOME = GROSSTOTALINCOME - CVIA.DEDUCTIBLEAMOUNT
	   FROM SALARYDETAIL SD
	   INNER JOIN 
	   (
	    SELECT SUM(DEDUCTIBLEAMOUNT)DEDUCTIBLEAMOUNT, SALARYDETAILID FROM CHAPTERVIADETAIL WITH(NOLOCK) 
	    GROUP BY  SALARYDETAILID
	   )CVIA ON CVIA.SALARYDETAILID = SD.SALARYDETAILID
	   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
       INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID 
	   INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID 
	   INNER JOIN #COMID C WITH(NOLOCK) ON C.COMID = LC.COMID AND C.BRANCHID = LC.BRANCHID
	SET NOCOUNT OFF
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECITTDSADDRESS')
DROP PROCEDURE USP_TDS_SAVECITTDSADDRESS
GO
CREATE PROCEDURE [USP_TDS_SAVECITTDSADDRESS]
	@BRANCHID INT,
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@CITY VARCHAR(25),
	@PINCODE VARCHAR(6)
AS
	BEGIN
		IF((SELECT ID FROM CITTDSBRANCH WITH(NOLOCK) WHERE BRANCHID=@BRANCHID)>0)
			BEGIN
				UPDATE CITTDSBRANCH SET ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,CITY = @CITY,PINCODE = @PINCODE
				WHERE  BRANCHID = @BRANCHID;
			END
		ELSE
			BEGIN
				INSERT INTO CITTDSBRANCH(BRANCHID,ADDRESS1,ADDRESS2,ADDRESS3,CITY,PINCODE)
				VALUES(@BRANCHID,@ADDRESS1,@ADDRESS2,@ADDRESS3,@CITY,@PINCODE)
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveCompanyBranch')
DROP PROCEDURE USP_TDS_SaveCompanyBranch
GO
CREATE PROCEDURE [USP_TDS_SaveCompanyBranch]      
 @BRANCHID INT,      
 @PARENTBRANCHID INT,      
 @BRANCHNAME NVARCHAR(100),      
 @BRANCHCODE NVARCHAR(7),  
 @ISZORO BIT=NULL,  
 @EXCLUDECHALLANPAY BIT=NULL ,
 @EMAILADDRESS VARCHAR(100) = NULL,
 @ADDITIONALFIELD1 VARCHAR(100) = NULL,
 @ISOPTION1 BIT=0     
AS      
BEGIN      
 IF(@PARENTBRANCHID = -1)      
  BEGIN      
   SET @PARENTBRANCHID = 0;      
  END      
 DECLARE @BASEID INT;      
 DECLARE @PARENTBASEID VARCHAR(50);      
 IF(@BRANCHNAME = 'ADMIN' AND (SELECT COUNT(BRANCHID) FROM COMPANYBRANCH WHERE BRANCHNAME = @BRANCHNAME AND BRANCHID <> @BRANCHID)>0)      
  BEGIN      
   SET @BRANCHID = -4;      
  END      
 ELSE IF((SELECT COUNT(BRANCHCODE) FROM COMPANYBRANCH WHERE BRANCHCODE=@BRANCHCODE AND BRANCHID <> @BRANCHID) > 0)      
  BEGIN      
   SET @BRANCHID = -1;      
  END      
 ELSE      
  BEGIN      
   IF @BRANCHID = -1      
    BEGIN      
     SELECT @BASEID = ISNULL(MAX(BASEID),0) + 1 FROM COMPANYBRANCH;      
     SET  @PARENTBASEID = dbo.UDF_TDS_GetFormatedParentBaseID(@BASEID);      
     IF(@PARENTBRANCHID <> 0)      
      BEGIN      
       SELECT  @PARENTBASEID = PARENTBASEID + @PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = @PARENTBRANCHID;      
      END      
     INSERT INTO COMPANYBRANCH(PARENTBRANCHID,BRANCHNAME,BRANCHCODE,BASEID,PARENTBASEID,ISZORO,NOCHALLANPAY,EMAILADDRESS,ADDITIONALFIELD1,ISOPTION1)      
     VALUES (@PARENTBRANCHID,@BRANCHNAME,@BRANCHCODE,@BASEID,@PARENTBASEID,@ISZORO,@EXCLUDECHALLANPAY,@EMAILADDRESS,@ADDITIONALFIELD1,@ISOPTION1)      
     SET  @BRANCHID = SCOPE_IDENTITY();      
    END      
    ELSE      
    BEGIN      
     IF EXISTS (SELECT PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = @PARENTBRANCHID AND PARENTBASEID LIKE      
                (SELECT PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID)+'%')      
      BEGIN      
       SET @BRANCHID = -2;      
      END      
     ELSE      
      BEGIN                
       IF EXISTS(SELECT BRANCHID FROM COMPANYBRANCH WHERE PARENTBRANCHID=@BRANCHID)      
       BEGIN -- Selected Branch is a Parent Branch      
       IF EXISTS(SELECT BRANCHID FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID AND PARENTBRANCHID = @PARENTBRANCHID)      
        BEGIN -- Parent Branch is not Updated      
         UPDATE COMPANYBRANCH       
         SET  PARENTBRANCHID=@PARENTBRANCHID,      
           BRANCHNAME=@BRANCHNAME,      
           BRANCHCODE=@BRANCHCODE,  
           ISZORO=@ISZORO,  
           NOCHALLANPAY=@EXCLUDECHALLANPAY ,
           EMAILADDRESS=@EMAILADDRESS,
           ADDITIONALFIELD1 = @ADDITIONALFIELD1,
           ISOPTION1 = @ISOPTION1 
         WHERE BRANCHID=@BRANCHID                    
        END      
       ELSE      
        BEGIN -- Parent Branch is Changed by User      
         SELECT @PARENTBASEID = PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID      
         DECLARE @PBLENGTH INT;      
         SET @PBLENGTH = LEN(@PARENTBASEID);              
         DECLARE @NEWPBID VARCHAR(50);          
         SELECT @NEWPBID = ISNULL(PARENTBASEID,'') FROM COMPANYBRANCH WHERE BRANCHID = @PARENTBRANCHID;      
         SELECT @BASEID = BASEID FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID;      
         IF(@NEWPBID IS NULL)             
          SET  @NEWPBID = dbo.UDF_TDS_GetFormatedParentBaseID(@BASEID);             
         ELSE              
          SET  @NEWPBID = @NEWPBID + dbo.UDF_TDS_GetFormatedParentBaseID(@BASEID);      
         UPDATE COMPANYBRANCH       
         SET  PARENTBRANCHID=@PARENTBRANCHID,      
           BRANCHNAME=@BRANCHNAME,      
           BRANCHCODE=@BRANCHCODE,       
           PARENTBASEID=@NEWPBID,  
           ISZORO=@ISZORO,  
           NOCHALLANPAY=@EXCLUDECHALLANPAY,
           EMAILADDRESS=@EMAILADDRESS,
           ADDITIONALFIELD1 = @ADDITIONALFIELD1,
           ISOPTION1 = @ISOPTION1      
         WHERE BRANCHID=@BRANCHID       
         UPDATE COMPANYBRANCH       
         SET  PARENTBASEID=@NEWPBID+SUBSTRING(PARENTBASEID,@PBLENGTH+1,50)      
        WHERE PARENTBASEID LIKE @PARENTBASEID+'%';              
        END      
       END      
      ELSE      
       BEGIN -- Selected Branch is a Last Branch (Having no child branche)      
        SELECT @PARENTBASEID = PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = @PARENTBRANCHID;      
        SELECT @BASEID = BASEID FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID;      
        IF(@PARENTBASEID IS NULL)             
         SET  @PARENTBASEID = dbo.UDF_TDS_GetFormatedParentBaseID(@BASEID);             
        ELSE              
         SET  @PARENTBASEID = @PARENTBASEID + dbo.UDF_TDS_GetFormatedParentBaseID(@BASEID);      
        UPDATE COMPANYBRANCH       
        SET  PARENTBRANCHID=@PARENTBRANCHID,      
          BRANCHNAME=@BRANCHNAME,      
          BRANCHCODE=@BRANCHCODE,       
          PARENTBASEID=@PARENTBASEID,  
          ISZORO=@ISZORO,  
          NOCHALLANPAY=@EXCLUDECHALLANPAY,
          EMAILADDRESS=@EMAILADDRESS,
          ADDITIONALFIELD1=@ADDITIONALFIELD1,
          ISOPTION1 = @ISOPTION1      
        WHERE BRANCHID=@BRANCHID      
       END      
      END       
    END      
    END      
  SELECT @BRANCHID      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECOMPANYBRANCHES')
DROP PROCEDURE USP_TDS_SAVECOMPANYBRANCHES
GO
CREATE PROCEDURE [USP_TDS_SAVECOMPANYBRANCHES]
 @BRANCHID INT,
 @PARENTBRANCHNAME NVARCHAR(100),
 @BRANCHNAME NVARCHAR(100),
 @BRANCHCODE NVARCHAR(7),
 @ISZORO BIT=NULL,
 @EXCLUDECHALLANPAY BIT=NULL,
 @EMAIL VARCHAR(500)=NULL
 AS
 BEGIN
  DECLARE @BASEID INT;
  DECLARE @PARENTBASEID VARCHAR(50);
  DECLARE @PARENTBRANCHID INT;
  SELECT @BASEID = ISNULL(MAX(BASEID),0) + 1 FROM COMPANYBRANCH WITH(NOLOCK);
      SET  @PARENTBASEID = DBO.UDF_TDS_GETFORMATEDPARENTBASEID(@BASEID);
      SELECT @PARENTBRANCHID=BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHNAME=@PARENTBRANCHNAME
      IF(@PARENTBRANCHID <> 0)
       BEGIN
        SELECT  @PARENTBASEID = PARENTBASEID + @PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @PARENTBRANCHID;
       END
      INSERT INTO COMPANYBRANCH(PARENTBRANCHID,BRANCHNAME,BRANCHCODE,BASEID,PARENTBASEID,ISZORO,EMAILADDRESS)
      VALUES (@PARENTBRANCHID,@BRANCHNAME,@BRANCHCODE,@BASEID,@PARENTBASEID,@ISZORO,@EMAIL)
      SET @BRANCHID = SCOPE_IDENTITY();
      SELECT @BRANCHID;
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECORRCHALLANDETAIL')
DROP PROCEDURE USP_TDS_SAVECORRCHALLANDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_SAVECORRCHALLANDETAIL]
	  @CHALLANID INT,
	  @CHALLANSERIALNO INT,
	  @BRANCHID INT,
	  @QUARTER TINYINT,
	  @FORMID TINYINT,	  
	  @LINKDEDCOUNT INT,
	  @ISNILCHALLAN VARCHAR(1),
	  @ISUPDATECHALLAN TINYINT,
	  @MODEOFPAYMENT TINYINT,
	  @BANKCHALLANNO VARCHAR(5),	  
	  @TRNVOUCHERNO VARCHAR(9),	  
	  @BANKID INT,	  
	  @CHALLANPAIDDATE SMALLDATETIME=NULL,	  
	  @DATEOFDEBIT SMALLDATETIME=NULL,
	  @SECTIONID INT,
	  @INCOMETAX NUMERIC(14,2),
	  @SURCHARGE NUMERIC(14,2),
	  @EDUCATIONCESS NUMERIC(14,2),
	  @INTEREST NUMERIC(14,2),
	  @PENALTY NUMERIC(14,2),
	  @OTHERS NUMERIC(14,2),
	  @CHALLANTOTAL NUMERIC(14,2),	  
	  @CHEQUENO VARCHAR(15),
	  @CHEQUEDATE SMALLDATETIME=NULL,
	  @CHEQUEDRAWNON VARCHAR(50),
	  @ISCOMPANY BIT,
	  @CORRECTIONSTATUS SMALLINT,
	  @TVRECEIPTNUMBER VARCHAR(7),
	  @FEE NUMERIC(13,2)= NULL,
	  @MINORHEAD INT = NULL  
AS
BEGIN		 
	   DECLARE @CHALLANERETURNID INT 
	   DECLARE @EXPECTEDDID INT
	   IF @CHALLANID = -1
	   BEGIN
			SET @CHALLANID = NULL;
	   END
	   SELECT @EXPECTEDDID=EXPECTEDDID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE CHALLANSERIALNO=@CHALLANSERIALNO AND CHALLANID=@CHALLANID
	       --ONLY FOR EXISTING CHALLAN I.E ANY UPDATION ARE DONE FOR THE REGULAR CHALLAN I.E FROM REGULAR FVU FILE                           
	   IF @CORRECTIONSTATUS=2
		BEGIN  
		   /*IF ALREADY CHALLAN IS CREATED */
		   IF EXISTS(SELECT CHALLANSERIALNO FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID 
	                               AND QUARTER=@QUARTER AND CORRECTIONSTATUS=2 AND CHALLANSERIALNO=@CHALLANSERIALNO)
			BEGIN
				 UPDATE CORRCHALLANDETAIL SET BRANCHID=@BRANCHID,FORMID=@FORMID,[QUARTER]=@QUARTER,CHALLANID=@CHALLANID,											
												ISNILCHALLAN=@ISNILCHALLAN,ISUPDATECHALLAN=@ISUPDATECHALLAN,MODEOFPAYMENT=@MODEOFPAYMENT,
												BANKCHALLANNO=@BANKCHALLANNO,TRNVOUCHERNO=@TRNVOUCHERNO,BANKID=@BANKID,CHALLANPAIDDATE=@CHALLANPAIDDATE,
												DATEOFDEBIT=@DATEOFDEBIT,SECTIONID=@SECTIONID,INCOMETAX=@INCOMETAX,SURCHARGE=@SURCHARGE,
												EDUCATIONCESS=@EDUCATIONCESS,INTEREST=@INTEREST,PENALTY=@PENALTY,OTHERS=@OTHERS,
												CHALLANTOTAL=@CHALLANTOTAL,CHEQUENO=@CHEQUENO,CHEQUEDATE=@CHEQUEDATE,CHEQUEDRAWNON=@CHEQUEDRAWNON,
												ISCOMPANY=@ISCOMPANY,CORRECTIONSTATUS=@CORRECTIONSTATUS,TVRECEIPTNUMBER=@TVRECEIPTNUMBER,EXPECTEDDID=@EXPECTEDDID,
												FEE = @FEE, MINORHEAD = @MINORHEAD
										  WHERE BRANCHID=@BRANCHID AND 
												FORMID=@FORMID AND 
												QUARTER=@QUARTER AND 
												CHALLANSERIALNO=@CHALLANSERIALNO AND
												CORRECTIONSTATUS=@CORRECTIONSTATUS
			END
			--IF CHALLAN DOES NOT EXISTS WITH CORRECTIONSTATUS 2 I.E  THEN COPY SAME CHALLAN OF FVU I.E 
		   --CORRECTIONSTATUS 1 AND GET CHALLANID FROM CHALLANDETAIL AND UPDATE CORRECTIONSTATUS IE. CORRECTIONSTATUS=2
	       ELSE
			   BEGIN 
				   INSERT INTO CORRCHALLANDETAIL(CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,
												 MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,
												 CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,
												 INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,ISCOMPANY,
												 CORRECTIONSTATUS,CHALLANID,TVRECEIPTNUMBER,CHALLANEDITMODE,EXPECTEDDID, FEE, MINORHEAD)
										  SELECT CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,@ISUPDATECHALLAN,
												 @MODEOFPAYMENT,@BANKCHALLANNO,BANKCHALLANNO,@TRNVOUCHERNO,TRNVOUCHERNO,@BANKID,BANKID,
												 @CHALLANPAIDDATE,CHALLANPAIDDATE,DATEOFDEBIT,@SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,
												 @INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,CHALLANTOTAL,@CHEQUENO,@CHEQUEDATE,@CHEQUEDRAWNON,@ISCOMPANY,
												 2,@CHALLANID,@TVRECEIPTNUMBER,CHALLANEDITMODE,@EXPECTEDDID, @FEE, @MINORHEAD
											FROM CORRCHALLANDETAIL 
											WHERE BRANCHID=@BRANCHID AND 
												  FORMID=@FORMID AND 
												  QUARTER=@QUARTER AND 
												  CHALLANSERIALNO=@CHALLANSERIALNO
			 END	      
		END
	   --FOR NEWLY ADDED CHALLAN WHICH WILL BE HAVING CORRECTIONSTATUS AS 5   
	   ELSE IF @CORRECTIONSTATUS=5
		BEGIN
		    IF @CHALLANSERIALNO=-1
		    BEGIN
				SELECT @CHALLANSERIALNO=ISNULL(MAX(CHALLANSERIALNO),0)+1 FROM CORRCHALLANDETAIL WITH(NOLOCK)
																	   WHERE BRANCHID=@BRANCHID AND 
																			 FORMID=@FORMID AND 
																			 QUARTER=@QUARTER
				DECLARE @MASTERCHALLANSERIALNO INT
				SELECT @MASTERCHALLANSERIALNO=ISNULL(MAX(SERIALNO),0)+1 FROM CHALLANDETAIL WITH(NOLOCK)
																	   WHERE BRANCHID=@BRANCHID 
																		 AND FORMID=@FORMID 
																		 AND QUARTER=@QUARTER
				--CHECKING FOR GREATER SERIAL NUMBER AND SETTING GREATER NUMBER TO CHALLANSERIALNO
				IF(@MASTERCHALLANSERIALNO>@CHALLANSERIALNO)
				BEGIN
					SET @CHALLANSERIALNO=@MASTERCHALLANSERIALNO
				END
				SELECT @CHALLANERETURNID=ISNULL(MAX(CHALLANERETURNID),0)+1 FROM CORRCHALLANDETAIL WITH(NOLOCK)
																		  WHERE BRANCHID=@BRANCHID
																			AND FORMID=@FORMID
																			AND QUARTER=@QUARTER
				INSERT INTO CORRCHALLANDETAIL(CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,
												 MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,
												 CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,
												 INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,ISCOMPANY,
												 CORRECTIONSTATUS,TVRECEIPTNUMBER,CHALLANEDITMODE, FEE, MINORHEAD)
										VALUES(@CHALLANSERIALNO,@BRANCHID,@FORMID,@QUARTER,@CHALLANERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,@ISUPDATECHALLAN,
											   @MODEOFPAYMENT,@BANKCHALLANNO,@BANKCHALLANNO,@TRNVOUCHERNO,@TRNVOUCHERNO,@BANKID,@BANKID,
											   @CHALLANPAIDDATE,@CHALLANPAIDDATE,@DATEOFDEBIT,@SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,
											   @INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@CHALLANTOTAL,@CHEQUENO,@CHEQUEDATE,@CHEQUEDRAWNON,@ISCOMPANY,
											   @CORRECTIONSTATUS,@TVRECEIPTNUMBER,'', @FEE, @MINORHEAD)
		    END
		    ELSE
		    BEGIN
				UPDATE CORRCHALLANDETAIL SET BRANCHID=@BRANCHID,FORMID=@FORMID,[QUARTER]=@QUARTER,
												LINKDEDCOUNT=@LINKDEDCOUNT,
												ISNILCHALLAN=@ISNILCHALLAN,ISUPDATECHALLAN=@ISUPDATECHALLAN,MODEOFPAYMENT=@MODEOFPAYMENT,
												BANKCHALLANNO=@BANKCHALLANNO,
												TRNVOUCHERNO=@TRNVOUCHERNO,												
												BANKID=@BANKID,
												CHALLANPAIDDATE=@CHALLANPAIDDATE,											
												DATEOFDEBIT=@DATEOFDEBIT,SECTIONID=@SECTIONID,
												INCOMETAX=@INCOMETAX,SURCHARGE=@SURCHARGE,EDUCATIONCESS=@EDUCATIONCESS,INTEREST=@INTEREST,
												PENALTY=@PENALTY,OTHERS=@OTHERS,CHALLANTOTAL=@CHALLANTOTAL,
												CHEQUENO=@CHEQUENO,CHEQUEDATE=@CHEQUEDATE,CHEQUEDRAWNON=@CHEQUEDRAWNON,ISCOMPANY=@ISCOMPANY,
												CORRECTIONSTATUS=@CORRECTIONSTATUS,
												TVRECEIPTNUMBER=@TVRECEIPTNUMBER,FEE = @FEE, MINORHEAD = @MINORHEAD
										  WHERE BRANCHID=@BRANCHID AND 
												FORMID=@FORMID AND 
												QUARTER=@QUARTER AND 
												CHALLANSERIALNO=@CHALLANSERIALNO AND
												CORRECTIONSTATUS=@CORRECTIONSTATUS
		    END
		END
	   ELSE IF(@CORRECTIONSTATUS = 7)
	    BEGIN
		   UPDATE CORRCHALLANDETAIL SET LINKDEDCOUNT=@LINKDEDCOUNT,
												ISNILCHALLAN=@ISNILCHALLAN,ISUPDATECHALLAN=@ISUPDATECHALLAN,
												MODEOFPAYMENT=@MODEOFPAYMENT,BANKCHALLANNO=@BANKCHALLANNO,
												TRNVOUCHERNO=@TRNVOUCHERNO,BANKID=@BANKID,CHALLANPAIDDATE=@CHALLANPAIDDATE,											
												DATEOFDEBIT=@DATEOFDEBIT,SECTIONID=@SECTIONID,INCOMETAX=@INCOMETAX,
												SURCHARGE=@SURCHARGE,EDUCATIONCESS=@EDUCATIONCESS,INTEREST=@INTEREST,
												PENALTY=@PENALTY,OTHERS=@OTHERS,CHALLANTOTAL=@CHALLANTOTAL,
												CHEQUENO=@CHEQUENO,CHEQUEDATE=@CHEQUEDATE,CHEQUEDRAWNON=@CHEQUEDRAWNON,
												ISCOMPANY=@ISCOMPANY,CORRECTIONSTATUS=@CORRECTIONSTATUS,UPDATEINDICATOR = 1,
												TVRECEIPTNUMBER=@TVRECEIPTNUMBER,FEE = @FEE, MINORHEAD = @MINORHEAD
			WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND CHALLANSERIALNO=@CHALLANSERIALNO AND
					  CORRECTIONSTATUS=@CORRECTIONSTATUS 
	    END 
		SELECT @CHALLANSERIALNO
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveCorrDeductionDetail')
DROP PROCEDURE USP_TDS_SaveCorrDeductionDetail
GO
CREATE PROCEDURE USP_TDS_SaveCorrDeductionDetail
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTIONSLNO INT,
	@DEDUCTIONID INT,
	@SECTIONID INT,
	@DEDUCTEESERIALNO INT,
	@DEDUCTIONERETURNID INT,
	@MODE CHAR(1),
	@PAYMENTMADE NUMERIC(13,2),
	@PAYMENTDATE SMALLDATETIME,
	@INCOMETAX NUMERIC(13,2),
	@INCOMETAXRATE NUMERIC(6,3) ,
	@SURCHARGE NUMERIC(13,2),
	@SURCHARGERATE NUMERIC(6,3),
	@EDUCATIONCESS NUMERIC(13,2),
	@EDUCATIONCESSRATE NUMERIC(6,3),
	@ISTAXINFOEDITABLE BIT,
	@TAXRATE NUMERIC(7,4),	
	@TOTALDEDUCTED NUMERIC(14,2),
	@DEDUCTEDDATE SMALLDATETIME = NULL,
	@ISBOOKENTRY BIT,
	@CHALLANSERIALNO INT,
	@NONDEDREASON TINYINT,	
	@ISGROSSINGUP BIT,
	@UTN CHAR(16),
	@ISPANVALIDBYITD BIT,
	@CORRECTIONSTATUS INT,
	@FINYEAR INT,
	@CERTNO VARCHAR(15) = NULL,
	@TDSRATEASPER CHAR(1) = NULL,
	@COUNTRYID INT = NULL,
	@REMITTANCEID INT = NULL,
	@ACKNO VARCHAR(15) = NULL,
	@EMAILDED VARCHAR(75) = NULL,
    @CONTACTNODED VARCHAR(15) = NULL,
	@ADDRESSDED VARCHAR(150) = NULL,
	@IDENTNUMDED VARCHAR(25) = NULL,
	@REMARKS1 VARCHAR(10) = NULL,
	@REMARKS3 VARCHAR(10) = NULL 
AS
	BEGIN
		DECLARE @CHALLANERETURNID INT , @PREVCHALLANERETURNID INT ;
		SELECT @CHALLANERETURNID = CHALLANERETURNID 
		FROM CORRCHALLANDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
			AND [QUARTER] = @QUARTER AND CHALLANSERIALNO = @CHALLANSERIALNO 		
		IF (@CORRECTIONSTATUS = 2)
			BEGIN
				IF EXISTS(SELECT DEDUCTIONSERIALNO 
						  FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
						  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
								AND [QUARTER] = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO 
								AND CORRECTIONSTATUS = 2)
					BEGIN
						UPDATE CORRDEDUCTIONDETAIL 
						SET MODE = @MODE,PAYMENTMADE = @PAYMENTMADE,PAYMENTDATE = @PAYMENTDATE,INCOMETAX = @INCOMETAX,
							INCOMETAXRATE = @INCOMETAXRATE,SURCHARGE = @SURCHARGE,SURCHARGERATE = @SURCHARGERATE,
							EDUCATIONCESS = @EDUCATIONCESS,ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE,
							EDUCATIONCESSRATE = @EDUCATIONCESSRATE,TAXRATE = @TAXRATE,TOTALDEDUCTED = @TOTALDEDUCTED,
						    DEDUCTEDDATE = @DEDUCTEDDATE,ISBOOKENTRY = @ISBOOKENTRY,NONDEDREASON = @NONDEDREASON,
						    ISGROSSINGUP = @ISGROSSINGUP,UTN = @UTN,ISPANVALIDBYITD = @ISPANVALIDBYITD,
						    CORRECTIONSTATUS = @CORRECTIONSTATUS, CERTNO = @CERTNO, ACKNO= @ACKNO, 
						    TDSRATEASPER = @TDSRATEASPER, COUNTRYID=@COUNTRYID, REMITTANCEID = @REMITTANCEID, 
						    EMAILDED = @EMAILDED, CONTACTNODED = @CONTACTNODED,
						    ADDRESSDED = @ADDRESSDED, IDENTNUMDED = @IDENTNUMDED,
						    REMARKS1 = @REMARKS1, REMARKS3 = @REMARKS3
						WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER 
								AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CORRECTIONSTATUS = @CORRECTIONSTATUS;
					END
				ELSE
					BEGIN					
						IF NOT EXISTS (SELECT CHALLANSERIALNO 
									   FROM CORRCHALLANDETAIL WITH(NOLOCK)
									   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
											 [QUARTER] = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID 
											 AND CORRECTIONSTATUS = 2 )
							BEGIN
								INSERT INTO CORRCHALLANDETAIL(CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,
															  LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,
															  BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,
															  BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,
															  SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
															  CHALLANTOTAL,LASTCHALLANTOTAL,CHEQUENO,CORRECTIONSTATUS,CHALLANID,
															  CHALLANEDITMODE, FEE, MINORHEAD,TVRECEIPTNUMBER)
							    SELECT CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,
									   LINKDEDCOUNT,ISNILCHALLAN,0,MODEOFPAYMENT,
									   BANKCHALLANNO,BANKCHALLANNO,TRNVOUCHERNO,TRNVOUCHERNO,
									   BANKID,BANKID,CHALLANPAIDDATE,CHALLANPAIDDATE,DATEOFDEBIT,
									   SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
									   CHALLANTOTAL,CHALLANTOTAL,CHEQUENO,2,CHALLANID,
									   CHALLANEDITMODE, FEE, MINORHEAD,TVRECEIPTNUMBER
								FROM CORRCHALLANDETAIL WITH(NOLOCK)
								WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
									  QUARTER = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID 
									  AND CORRECTIONSTATUS = 1;
							END
						INSERT INTO CORRDEDUCTIONDETAIL(BRANCHID,FORMID,[QUARTER],DEDUCTIONSERIALNO,
									DEDUCTIONID,SECTIONID,DEDUCTEESERIALNO,DEDUCTIONERETURNID,MODE,
									PAYMENTMADE,PAYMENTDATE,INCOMETAX,LASTINCOMETAX,INCOMETAXRATE,
									SURCHARGE,LASTSURCHARGE,SURCHARGERATE,EDUCATIONCESS,LASTEDUCATIONCESS,
									EDUCATIONCESSRATE,ISTAXINFOEDITABLE,TAXRATE,TOTALDEDUCTED,LASTTOTALDEDUCTED,
									DEDUCTEDDATE,ISBOOKENTRY,CHALLANERETURNID,NONDEDREASON,ISGROSSINGUP,UTN,
									ISPANVALIDBYITD,CORRECTIONSTATUS, CERTNO, ACKNO, TDSRATEASPER, REMITTANCEID,
									COUNTRYID,EMAILDED, CONTACTNODED,ADDRESSDED, IDENTNUMDED, REMARKS1, REMARKS3)
						SELECT 	BRANCHID,FORMID,[QUARTER],DEDUCTIONSERIALNO,
								DEDUCTIONID,SECTIONID,DEDUCTEESERIALNO,DEDUCTIONERETURNID,MODE,
								PAYMENTMADE,PAYMENTDATE,INCOMETAX,INCOMETAX,INCOMETAXRATE,
								SURCHARGE,SURCHARGE,SURCHARGERATE,EDUCATIONCESS,EDUCATIONCESS,
								EDUCATIONCESSRATE,ISTAXINFOEDITABLE,TAXRATE,TOTALDEDUCTED,TOTALDEDUCTED,
								DEDUCTEDDATE,ISBOOKENTRY,CHALLANERETURNID,NONDEDREASON,ISGROSSINGUP,UTN,
								ISPANVALIDBYITD,2 AS CORRECTIONSTATUS,CERTNO,ACKNO ,TDSRATEASPER, REMITTANCEID, 
								COUNTRYID, EMAILDED, CONTACTNODED, ADDRESSDED, IDENTNUMDED, REMARKS1, REMARKS3													
						FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
							AND [QUARTER] = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO;
						UPDATE CORRDEDUCTIONDETAIL 
						SET MODE = @MODE,PAYMENTMADE = @PAYMENTMADE,PAYMENTDATE = @PAYMENTDATE,
							INCOMETAX = @INCOMETAX,INCOMETAXRATE = @INCOMETAXRATE,SURCHARGE = @SURCHARGE,
						    SURCHARGERATE = @SURCHARGERATE,EDUCATIONCESS = @EDUCATIONCESS,
						    EDUCATIONCESSRATE = @EDUCATIONCESSRATE,ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE,
						    TAXRATE = @TAXRATE,TOTALDEDUCTED = @TOTALDEDUCTED,DEDUCTEDDATE = @DEDUCTEDDATE,
						    ISBOOKENTRY = @ISBOOKENTRY,NONDEDREASON = @NONDEDREASON,ISGROSSINGUP = @ISGROSSINGUP,
						    UTN = @UTN,ISPANVALIDBYITD = @ISPANVALIDBYITD, CERTNO = @CERTNO, ACKNO= @ACKNO, 
						    TDSRATEASPER = @TDSRATEASPER, COUNTRYID=@COUNTRYID,REMITTANCEID = @REMITTANCEID, 
						    EMAILDED = @EMAILDED, CONTACTNODED = @CONTACTNODED, ADDRESSDED = @ADDRESSDED, 
						    IDENTNUMDED = @IDENTNUMDED, REMARKS1 = @REMARKS1, REMARKS3 = @REMARKS3
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER 
							AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CORRECTIONSTATUS = 2;
					END
			END		
		/*DELETE*/
		ELSE IF(@CORRECTIONSTATUS = 4)
			BEGIN
				IF NOT EXISTS(SELECT DEDUCTIONSERIALNO 
							  FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
							  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
									[QUARTER] = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO 
									AND CORRECTIONSTATUS = 4)					
				BEGIN						
						IF NOT EXISTS (SELECT CHALLANSERIALNO 
									   FROM CORRCHALLANDETAIL WITH(NOLOCK)
									   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER 
											AND CHALLANERETURNID = @CHALLANERETURNID AND CORRECTIONSTATUS = 2 )
							BEGIN
								INSERT INTO CORRCHALLANDETAIL(CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,
															  LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,
															  BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,
															  BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,
															  SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
															  CHALLANTOTAL,LASTCHALLANTOTAL,CHEQUENO,CORRECTIONSTATUS,CHALLANID,
															  CHALLANEDITMODE,FEE, MINORHEAD,TVRECEIPTNUMBER)
								SELECT CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,
									   LINKDEDCOUNT,ISNILCHALLAN,0,MODEOFPAYMENT,
									   BANKCHALLANNO,BANKCHALLANNO,TRNVOUCHERNO,TRNVOUCHERNO,
									   BANKID,BANKID,CHALLANPAIDDATE,CHALLANPAIDDATE,DATEOFDEBIT,
									   SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
									   CHALLANTOTAL,CHALLANTOTAL,CHEQUENO,2,CHALLANID,
									   CHALLANEDITMODE, FEE, MINORHEAD,TVRECEIPTNUMBER
								FROM   CORRCHALLANDETAIL WITH(NOLOCK)
								WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
									AND QUARTER = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID;
							END
						INSERT INTO CORRDEDUCTIONDETAIL(BRANCHID,FORMID,[QUARTER],DEDUCTIONSERIALNO,
														DEDUCTIONID,SECTIONID,DEDUCTEESERIALNO,DEDUCTIONERETURNID,
														MODE,PAYMENTMADE,PAYMENTDATE,INCOMETAX,LASTINCOMETAX,
														INCOMETAXRATE,SURCHARGE,LASTSURCHARGE,SURCHARGERATE,
														EDUCATIONCESS,LASTEDUCATIONCESS,EDUCATIONCESSRATE,
														ISTAXINFOEDITABLE,TAXRATE,TOTALDEDUCTED,LASTTOTALDEDUCTED,
														DEDUCTEDDATE,ISBOOKENTRY,CHALLANERETURNID,NONDEDREASON,
														ISGROSSINGUP,UTN,ISPANVALIDBYITD,CORRECTIONSTATUS, CERTNO,
														ACKNO, TDSRATEASPER, REMITTANCEID,COUNTRYID,EMAILDED,
														CONTACTNODED, ADDRESSDED, IDENTNUMDED, REMARKS1, REMARKS3)
						SELECT 	BRANCHID,FORMID,[QUARTER],DEDUCTIONSERIALNO,
								DEDUCTIONID,SECTIONID,DEDUCTEESERIALNO,DEDUCTIONERETURNID,
								MODE,PAYMENTMADE,PAYMENTDATE,INCOMETAX,INCOMETAX,
								INCOMETAXRATE,SURCHARGE,SURCHARGE,SURCHARGERATE,
								EDUCATIONCESS,EDUCATIONCESS,EDUCATIONCESSRATE,
								ISTAXINFOEDITABLE,TAXRATE,TOTALDEDUCTED,TOTALDEDUCTED,
								DEDUCTEDDATE,ISBOOKENTRY,CHALLANERETURNID,NONDEDREASON,
								ISGROSSINGUP,UTN,ISPANVALIDBYITD,4 AS CORRECTIONSTATUS,CERTNO,
								ACKNO, TDSRATEASPER, REMITTANCEID,COUNTRYID, EMAILDED, 
								CONTACTNODED, ADDRESSDED, IDENTNUMDED, REMARKS1, REMARKS3													
						FROM    CORRDEDUCTIONDETAIL WITH(NOLOCK)
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
							   AND [QUARTER] = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO;
						UPDATE CORRDEDUCTIONDETAIL 
						SET MODE = @MODE,PAYMENTMADE = @PAYMENTMADE,PAYMENTDATE = @PAYMENTDATE,
							INCOMETAX = @INCOMETAX,INCOMETAXRATE = @INCOMETAXRATE,SURCHARGE = @SURCHARGE,
							SURCHARGERATE = @SURCHARGERATE,EDUCATIONCESS = @EDUCATIONCESS,
							EDUCATIONCESSRATE = @EDUCATIONCESSRATE,ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE,
							TAXRATE = @TAXRATE,TOTALDEDUCTED = @TOTALDEDUCTED,DEDUCTEDDATE = @DEDUCTEDDATE,
							ISBOOKENTRY = @ISBOOKENTRY,NONDEDREASON = @NONDEDREASON,ISGROSSINGUP = @ISGROSSINGUP,
							UTN = @UTN,ISPANVALIDBYITD = @ISPANVALIDBYITD, CERTNO = @CERTNO, ACKNO= @ACKNO,
							TDSRATEASPER = @TDSRATEASPER, COUNTRYID=@COUNTRYID, REMITTANCEID = @REMITTANCEID, 
							EMAILDED = @EMAILDED, CONTACTNODED = @CONTACTNODED, ADDRESSDED = @ADDRESSDED, 
							IDENTNUMDED = @IDENTNUMDED, REMARKS1 = @REMARKS1, REMARKS3 = @REMARKS3
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER 
							AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CORRECTIONSTATUS = @CORRECTIONSTATUS;
				END
			END
		/*ADD*/			
		ELSE IF (@CORRECTIONSTATUS = 5)
			BEGIN
				/*NON DEDUCTION*/
				IF @CHALLANERETURNID IS NULL
						BEGIN
							/*CHECKING FOR DUMMY CHALLAN BASED ON SECTION AND CORRECTION STATUS (UPDATE OR ADD)*/
							IF EXISTS (SELECT CHALLANSERIALNO 
									   FROM CORRCHALLANDETAIL WITH(NOLOCK)
									   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
											 AND SECTIONID = CASE WHEN (@SECTIONID = 23 OR @SECTIONID = 24)
																	 THEN 15 
																  ELSE @SECTIONID 
																  END AND CHALLANTOTAL = 0 
											 AND (CORRECTIONSTATUS = 2 OR CORRECTIONSTATUS = 5))
								BEGIN									
									SELECT @CHALLANERETURNID = CHALLANERETURNID 
									FROM CORRCHALLANDETAIL WITH(NOLOCK)
									WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
										  AND SECTIONID = CASE WHEN (@SECTIONID = 23 OR @SECTIONID = 24) 
																  THEN 15 
															   ELSE @SECTIONID END 
										  AND CHALLANTOTAL = 0 AND (CORRECTIONSTATUS=2 OR CORRECTIONSTATUS = 5);
								END
							ELSE
								BEGIN
									/*CHECKING FOR DUMMY CHALLAN BASED ON SECTION AND CORRECTION STATUS(INSERT).IF IT EXISTS,CREATE A COPY OF THAT RECORD WITH CORRECTION STATUS AS UPDATE*/
									IF EXISTS (SELECT CHALLANSERIALNO 
											   FROM CORRCHALLANDETAIL WITH(NOLOCK)
											   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER 
													 AND SECTIONID = CASE WHEN (@SECTIONID = 23 OR @SECTIONID = 24) 
																			  THEN 15 
																		  ELSE @SECTIONID END 
													 AND CHALLANTOTAL = 0 AND CORRECTIONSTATUS = 1)
										BEGIN
											SELECT @CHALLANERETURNID = CHALLANERETURNID 
											FROM CORRCHALLANDETAIL WITH(NOLOCK)
											WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER 
												  AND SECTIONID= CASE WHEN (@SECTIONID = 23 OR @SECTIONID = 24) 
																	      THEN 15 
																	  ELSE @SECTIONID END 
												  AND CHALLANTOTAL = 0 AND CORRECTIONSTATUS = 1;
											INSERT INTO CORRCHALLANDETAIL(CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,
																		  LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,
																		  BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,
																		  BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,
																		  SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
																		  CHALLANTOTAL,LASTCHALLANTOTAL,CHEQUENO,CORRECTIONSTATUS,CHALLANID,
																		  CHALLANEDITMODE,EXPECTEDDID, FEE, MINORHEAD,TVRECEIPTNUMBER)
											SELECT CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,
												   LINKDEDCOUNT,ISNILCHALLAN,0,MODEOFPAYMENT,BANKCHALLANNO,
												   BANKCHALLANNO,TRNVOUCHERNO,TRNVOUCHERNO,BANKID,
												   BANKID,CHALLANPAIDDATE,CHALLANPAIDDATE,DATEOFDEBIT,
												   SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,
												   CHALLANTOTAL,CHALLANTOTAL,CHEQUENO,2,CHALLANID,
												   '' AS CHALLANEDITMODE,EXPECTEDDID, FEE, MINORHEAD,TVRECEIPTNUMBER
											FROM   CORRCHALLANDETAIL WITH(NOLOCK)
											WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
													AND QUARTER = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID ;
										END
									ELSE
										BEGIN
											/*CREATE A NEW DUMMY CHALLAN WITH CORRECTION STATUS AS ADD*/
											SET @CHALLANERETURNID =( SELECT ISNULL(MAX(CHALLANERETURNID),0) + 1 
																	 FROM CORRCHALLANDETAIL WITH(NOLOCK)
																	 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER );
											INSERT INTO CORRCHALLANDETAIL(CHALLANSERIALNO,BRANCHID,CHALLANID,[QUARTER],FORMID,
																		  CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,
																		  MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,
																		  LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,
																		  DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,
																		  OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,ISCOMPANY,CHEQUENO,CHEQUEDATE,
																		  CHEQUEDRAWNON,TRANREFNO,CORRECTIONSTATUS,CHALLANEDITMODE, MINORHEAD) 
											VALUES(@CHALLANERETURNID,@BRANCHID,NULL,@QUARTER,@FORMID,
												   @CHALLANERETURNID,0,'Y',0,3,'','','','',-1,-1,
												   CASE WHEN @QUARTER = 1 
															THEN '30/Jun/' + CAST(@FINYEAR AS VARCHAR)
														ELSE CASE WHEN @QUARTER = 2 
																		THEN '30/Sep/' + CAST(@FINYEAR AS VARCHAR)
																  ELSE CASE WHEN @QUARTER =3 
																				THEN '31/Dec/' + CAST(@FINYEAR AS VARCHAR)
																			ELSE '31/Mar/' + CAST(@FINYEAR + 1 AS VARCHAR)
																		END
														      END
												   END,
												   NULL,NULL,
												   CASE WHEN (@SECTIONID = 23 OR @SECTIONID = 24) 
															THEN 15 
														ELSE @SECTIONID 
												   END,
												   0,0,0,0,0,0,0,0,NULL,'',NULL,NULL,NULL,5,'', -1)
										END
								END
							END
				/*IF TAX IS DEDUCTED FOR THE DEDUCTION*/
				ELSE
					BEGIN	
						IF EXISTS (SELECT CORRECTIONSTATUS 
								   FROM CORRCHALLANDETAIL WITH(NOLOCK)
								   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
										 AND QUARTER = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID 
										 AND CORRECTIONSTATUS IN (1,2))
							BEGIN
								IF NOT EXISTS (SELECT CORRECTIONSTATUS 
											   FROM CORRCHALLANDETAIL WITH(NOLOCK)
											   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
													AND CHALLANERETURNID = @CHALLANERETURNID AND CORRECTIONSTATUS = 2)
									BEGIN														
										INSERT INTO CORRCHALLANDETAIL(CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],
																	  CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,
																	  ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,
																	  LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,
																	  BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,
																	  DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,
																	  INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
																	  CHEQUENO,CORRECTIONSTATUS,CHALLANID,CHALLANEDITMODE,
																	  EXPECTEDDID, FEE, MINORHEAD,TVRECEIPTNUMBER)
										SELECT CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],
											   CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,
											   0 AS ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,
											   BANKCHALLANNO,TRNVOUCHERNO,TRNVOUCHERNO,
											   BANKID,BANKID,CHALLANPAIDDATE,CHALLANPAIDDATE,
											   DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,
											   INTEREST,PENALTY,OTHERS,CHALLANTOTAL,CHALLANTOTAL,
											   CHEQUENO,2,CHALLANID,CHALLANEDITMODE,
											   EXPECTEDDID, FEE, MINORHEAD,TVRECEIPTNUMBER
										FROM   CORRCHALLANDETAIL WITH(NOLOCK)
										WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
												AND QUARTER = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID ;								
									END									
							END
					END
				IF EXISTS (SELECT DEDUCTIONSERIALNO 
						   FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
						   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER 
										AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CORRECTIONSTATUS = 5)
					BEGIN						
						SELECT @PREVCHALLANERETURNID = CHALLANERETURNID	
						FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER 
							  AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CORRECTIONSTATUS = 5;
						IF @PREVCHALLANERETURNID <> @CHALLANERETURNID
							BEGIN
								SELECT @DEDUCTIONERETURNID = ISNULL(MAX(DEDUCTIONERETURNID),0) + 1 
								FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
								WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
										AND QUARTER = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID;
							END
						ELSE
							BEGIN
								SELECT @DEDUCTIONERETURNID = DEDUCTIONERETURNID 
								FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
								WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
										AND QUARTER = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO;
							END												
						UPDATE CORRDEDUCTIONDETAIL 
						SET SECTIONID = @SECTIONID,MODE = @MODE,PAYMENTMADE = @PAYMENTMADE,
							PAYMENTDATE = @PAYMENTDATE,INCOMETAX = @INCOMETAX,
							INCOMETAXRATE = @INCOMETAXRATE,SURCHARGE = @SURCHARGE,
							SURCHARGERATE = @SURCHARGERATE,EDUCATIONCESS = @EDUCATIONCESS,
							EDUCATIONCESSRATE = @EDUCATIONCESSRATE,ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE,
							TAXRATE = @TAXRATE,TOTALDEDUCTED = @TOTALDEDUCTED,DEDUCTEDDATE = @DEDUCTEDDATE,
							ISBOOKENTRY = @ISBOOKENTRY,CHALLANERETURNID = @CHALLANERETURNID,
							DEDUCTIONERETURNID = @DEDUCTIONERETURNID,NONDEDREASON = @NONDEDREASON,
							ISGROSSINGUP = @ISGROSSINGUP,UTN = @UTN,ISPANVALIDBYITD = @ISPANVALIDBYITD,
							CORRECTIONSTATUS = @CORRECTIONSTATUS, CERTNO = @CERTNO, ACKNO= @ACKNO, 
							TDSRATEASPER = @TDSRATEASPER, COUNTRYID=@COUNTRYID, REMITTANCEID = @REMITTANCEID,
							EMAILDED = @EMAILDED, CONTACTNODED = @CONTACTNODED, ADDRESSDED = @ADDRESSDED, 
							IDENTNUMDED = @IDENTNUMDED, REMARKS1 = @REMARKS1, REMARKS3 = @REMARKS3
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER 
							AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CORRECTIONSTATUS = @CORRECTIONSTATUS;
					END	
				ELSE
					BEGIN
						IF (@DEDUCTIONSLNO = -1)
							BEGIN						
								DECLARE @MASTERDEDUCTIONSERIALNO INT;
								SELECT @DEDUCTIONSLNO = ISNULL(MAX(DEDUCTIONSERIALNO),0) + 1 
								FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
								WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER;
								SELECT @MASTERDEDUCTIONSERIALNO = ISNULL(MAX(SERIALNO),0) + 1 
								FROM DEDUCTIONDETAIL WITH(NOLOCK)
								WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER;
								IF(@MASTERDEDUCTIONSERIALNO>@DEDUCTIONSLNO)
									BEGIN
										SET @DEDUCTIONSLNO = @MASTERDEDUCTIONSERIALNO;
									END
							END
						SELECT @DEDUCTIONERETURNID = ISNULL(MAX(DEDUCTIONERETURNID),0) + 1 
						FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
						WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
							AND QUARTER = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID;
						INSERT INTO CORRDEDUCTIONDETAIL(BRANCHID,FORMID,[QUARTER],DEDUCTIONSERIALNO,DEDUCTIONID,
														SECTIONID,DEDUCTEESERIALNO,DEDUCTIONERETURNID,MODE,PAYMENTMADE,
														PAYMENTDATE,INCOMETAX,LASTINCOMETAX,INCOMETAXRATE,SURCHARGE,
														LASTSURCHARGE,SURCHARGERATE,EDUCATIONCESS,LASTEDUCATIONCESS,
														EDUCATIONCESSRATE,ISTAXINFOEDITABLE,TAXRATE,TOTALDEDUCTED,
														LASTTOTALDEDUCTED,DEDUCTEDDATE,ISBOOKENTRY,CHALLANERETURNID,
														NONDEDREASON,ISGROSSINGUP,UTN,ISPANVALIDBYITD,CORRECTIONSTATUS, 
														CERTNO, ACKNO, TDSRATEASPER, COUNTRYID, REMITTANCEID,EMAILDED, 
														CONTACTNODED, ADDRESSDED, IDENTNUMDED, REMARKS1, REMARKS3)
												VALUES (@BRANCHID,@FORMID,@QUARTER,@DEDUCTIONSLNO,NULL,
													    @SECTIONID,@DEDUCTEESERIALNO,@DEDUCTIONERETURNID,@MODE,@PAYMENTMADE,
													    @PAYMENTDATE,@INCOMETAX,@INCOMETAX,@INCOMETAXRATE,@SURCHARGE,
													    @SURCHARGE,@SURCHARGERATE,@EDUCATIONCESS,@EDUCATIONCESS,
													    @EDUCATIONCESSRATE,@ISTAXINFOEDITABLE,@TAXRATE,@TOTALDEDUCTED,
													    @TOTALDEDUCTED,@DEDUCTEDDATE,@ISBOOKENTRY,@CHALLANERETURNID,
													    @NONDEDREASON,@ISGROSSINGUP,@UTN,@ISPANVALIDBYITD,@CORRECTIONSTATUS, 
													    @CERTNO, @ACKNO, @TDSRATEASPER, @COUNTRYID, @REMITTANCEID,@EMAILDED, 
													    @CONTACTNODED, @ADDRESSDED, @IDENTNUMDED, @REMARKS1, @REMARKS3)												
					END				
			END
	    /*EXISTING*/
		ELSE IF(@CORRECTIONSTATUS = 7 AND @TOTALDEDUCTED > 0)
		    BEGIN
				UPDATE CORRDEDUCTIONDETAIL 
				SET MODE = @MODE,PAYMENTMADE = @PAYMENTMADE,PAYMENTDATE = @PAYMENTDATE,INCOMETAX = @INCOMETAX,
					INCOMETAXRATE = @INCOMETAXRATE,SURCHARGE = @SURCHARGE,SURCHARGERATE = @SURCHARGERATE,
					EDUCATIONCESS = @EDUCATIONCESS,ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE,
					EDUCATIONCESSRATE = @EDUCATIONCESSRATE,TAXRATE = @TAXRATE,TOTALDEDUCTED = @TOTALDEDUCTED,
					DEDUCTEDDATE = @DEDUCTEDDATE,ISBOOKENTRY = @ISBOOKENTRY,NONDEDREASON = @NONDEDREASON,
					ISGROSSINGUP = @ISGROSSINGUP,UTN = @UTN,ISPANVALIDBYITD = @ISPANVALIDBYITD,
					CORRECTIONSTATUS = @CORRECTIONSTATUS, CERTNO = @CERTNO, ACKNO= @ACKNO, 
					CHALLANERETURNID = @CHALLANERETURNID,TDSRATEASPER = @TDSRATEASPER, COUNTRYID=@COUNTRYID, 
					REMITTANCEID = @REMITTANCEID, UPDATEINDICATOR = 1, DEDUCTEESERIALNO = @DEDUCTEESERIALNO,
					EMAILDED = @EMAILDED, CONTACTNODED = @CONTACTNODED, ADDRESSDED = @ADDRESSDED, 
					IDENTNUMDED = @IDENTNUMDED, REMARKS1 = @REMARKS1, REMARKS3 = @REMARKS3
				WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER 
						AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CORRECTIONSTATUS = @CORRECTIONSTATUS;
				UPDATE CORRCHALLANDETAIL 
				SET UPDATEINDICATOR = 1
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
					AND QUARTER = @QUARTER AND CHALLANERETURNID = @CHALLANERETURNID 
					AND CORRECTIONSTATUS = @CORRECTIONSTATUS
		    END 
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveCorrDeductorDetail')
DROP PROCEDURE USP_TDS_SaveCorrDeductorDetail
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveCorrDeductorDetail]
	@BRANCHID INT,
    @FORMID INT,
    @QUARTER INT,
	@DEDUCTORID INT,	
	@DEDUCTORNAME VARCHAR(75),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@PINCODE VARCHAR(6),
	@STATEID INT,	
	@ISADDRCHANGED BIT,
	@STDCODE VARCHAR(5),	
	@PHONENO VARCHAR(10),	
	@EMAILADDRESS VARCHAR(75),	
	@PAN VARCHAR(10),
	@TAN VARCHAR(10),	
	@FINANCIALYEAR INT,	
	@STATUSID SMALLINT,
	@DEDUCTORTYPEID INT,
	@GOVTADDSTATEID INT,
	@GOVTADDPAOCODE VARCHAR(20),
	@GOVTADDPAOREGNNO VARCHAR(20),
	@GOVTADDDDOCODE VARCHAR(20),
	@GOVTADDDDOREGNNO VARCHAR(20),
	@GOVTADDMINISTRY INT,
	@GOVTADDOTHERNAME VARCHAR(20),	
	@RPNAME VARCHAR(75),
	@RPDESIGNATION VARCHAR(20),
	@RPADDRESS1 VARCHAR(75),
	@RPADDRESS2 VARCHAR(75),
	@RPADDRESS3 VARCHAR(75),
	@RPADDRESS4 VARCHAR(75),
	@RPADDRESS5 VARCHAR(75),
	@RPSTATEID INT,
	@RPPINCODE VARCHAR(6),
	@RPISADDRCHANGED BIT,
	@RPSTDCODE VARCHAR(5),
	@RPPHONENO VARCHAR(10),
	@RPMOBILENO VARCHAR(10),
	@RPEMAILADDRESS VARCHAR(75),	
	@CORRECTIONSTATUS SMALLINT,
	@GOVTADDAIN VARCHAR(7) = NULL,
	@ALTERNATESTD VARCHAR(5) = NULL,
	@ALTERNATEPHONE VARCHAR(10) = NULL,
	@ALTERNATEEMAIL VARCHAR(75) = NULL,
	@RPALTERNATESTD VARCHAR(5) = NULL,
	@RPALTERNATEPHONE VARCHAR(10) = NULL,
	@RPALTERNATEEMAIL VARCHAR(75) = NULL,
	@TANREGISTRATION VARCHAR(10) = NULL,
	@GSTIN VARCHAR(15) = NULL
AS
	BEGIN
		IF EXISTS(SELECT DEDUCTORID FROM CORRDEDUCTOR WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND CORRECTIONSTATUS = 2)
			BEGIN
				IF @FORMID = 1
					BEGIN
						DECLARE @CURRSTATUSID INT,@SECTIONID INT;
						SELECT TOP 1 @CURRSTATUSID = STATUSID FROM CORRDEDUCTOR WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND 
										QUARTER = @QUARTER  ORDER BY CORRECTIONSTATUS DESC ;
						IF @CURRSTATUSID <> @STATUSID
							BEGIN
							   IF(@STATUSID=1)
								BEGIN
								SET @SECTIONID=1
								END
								ELSE
								BEGIN
								SET @SECTIONID=2
								END
								UPDATE CORRCHALLANDETAIL SET SECTIONID = @SECTIONID
								WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = @QUARTER;
								UPDATE CORRDEDUCTIONDETAIL SET SECTIONID = @SECTIONID
								WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = @QUARTER;								
							END
					END
				UPDATE CORRDEDUCTOR SET DEDUCTORNAME=@DEDUCTORNAME,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,
										ADDRESS5=@ADDRESS5,STATEID=@STATEID,ISADDRCHANGED=@ISADDRCHANGED,FINANCIALYEAR=@FINANCIALYEAR,[TAN]=@TAN,PAN=@PAN,
										PINCODE=@PINCODE,EMAILADDRESS=@EMAILADDRESS,STDCODE=@STDCODE,PHONENO=@PHONENO,STATUSID=@STATUSID,
										DEDUCTORTYPEID=@DEDUCTORTYPEID,LASTDEDUCTORTYPEID=@DEDUCTORTYPEID,GOVTADDSTATEID=@GOVTADDSTATEID,
										GOVTADDPAOCODE=@GOVTADDPAOCODE,GOVTADDPAOREGNNO=@GOVTADDPAOREGNNO,GOVTADDDDOCODE=@GOVTADDDDOCODE,
										GOVTADDDDOREGNNO=@GOVTADDDDOREGNNO,GOVTADDMINISTRY=@GOVTADDMINISTRY,GOVTADDOTHERNAME=@GOVTADDOTHERNAME,
										RPNAME=@RPNAME,RPDESIGNATION=@RPDESIGNATION,RPADDRESS1=@RPADDRESS1,RPADDRESS2= @RPADDRESS2,RPADDRESS3= @RPADDRESS3,
										RPADDRESS4= @RPADDRESS4,RPADDRESS5=@RPADDRESS5,RPSTATEID= @RPSTATEID,RPPINCODE= @RPPINCODE,RPISADDRCHANGED =@RPISADDRCHANGED,
										RPMOBILENO = @RPMOBILENO,RPEMAILADDRESS=@RPEMAILADDRESS,RPSTDCODE= @RPSTDCODE,RPPHONENO = @RPPHONENO,
										CORRECTIONSTATUS=@CORRECTIONSTATUS,GOVTADDAIN = @GOVTADDAIN,ALTERNATESTD = @ALTERNATESTD, ALTERNATEPHONE = @ALTERNATEPHONE,
										ALTERNATEEMAIL = @ALTERNATEEMAIL, RPALTERNATESTD = @RPALTERNATESTD, RPALTERNATEPHONE = @RPALTERNATEPHONE,
										RPALTERNATEEMAIL = @RPALTERNATEEMAIL,TANREGISTRATION = @TANREGISTRATION, GSTIN = @GSTIN
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND DEDUCTORID = @DEDUCTORID AND CORRECTIONSTATUS = 2;				
			END									
		ELSE
			BEGIN
				INSERT INTO CORRDEDUCTOR(DEDUCTORID,BRANCHID,[QUARTER],FORMID,DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,ISADDRCHANGED,
										 FINANCIALYEAR,[TAN],LASTTAN,PAN,PINCODE,EMAILADDRESS,STDCODE,PHONENO,STATUSID,DEDUCTORTYPEID,LASTDEDUCTORTYPEID,GOVTADDSTATEID,GOVTADDPAOCODE,
										 GOVTADDPAOREGNNO,GOVTADDDDOCODE,GOVTADDDDOREGNNO,GOVTADDMINISTRY,GOVTADDOTHERNAME,RPNAME,RPADDRESS1,
										 RPADDRESS2,RPADDRESS3,RPADDRESS4,RPADDRESS5,RPSTATEID,RPPINCODE,RPISADDRCHANGED,RPDESIGNATION,RPMOBILENO,
										 RPEMAILADDRESS,RPSTDCODE,RPPHONENO,CORRECTIONSTATUS,GOVTADDAIN,ALTERNATESTD,ALTERNATEPHONE,ALTERNATEEMAIL,RPALTERNATESTD,
										 RPALTERNATEPHONE,RPALTERNATEEMAIL,TANREGISTRATION, GSTIN)
				VALUES(@DEDUCTORID,@BRANCHID,@QUARTER,@FORMID,@DEDUCTORNAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@ISADDRCHANGED,
					   @FINANCIALYEAR,@TAN,@TAN,@PAN,@PINCODE,@EMAILADDRESS,@STDCODE,@PHONENO,@STATUSID,@DEDUCTORTYPEID,@DEDUCTORTYPEID,@GOVTADDSTATEID,@GOVTADDPAOCODE,
					   @GOVTADDPAOREGNNO,@GOVTADDDDOCODE,@GOVTADDDDOREGNNO,@GOVTADDMINISTRY,@GOVTADDOTHERNAME,@RPNAME,@RPADDRESS1,
					   @RPADDRESS2,@RPADDRESS3,@RPADDRESS4,@RPADDRESS5,@RPSTATEID,@RPPINCODE,@RPISADDRCHANGED,@RPDESIGNATION,@RPMOBILENO,
					   @RPEMAILADDRESS,@RPSTDCODE,@RPPHONENO,@CORRECTIONSTATUS, @GOVTADDAIN,@ALTERNATESTD, @ALTERNATEPHONE, @ALTERNATEEMAIL, @RPALTERNATESTD,
					  @RPALTERNATEPHONE, @RPALTERNATEEMAIL, @TANREGISTRATION, @GSTIN);				
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECORRDEFAULTDETAILS')
DROP PROCEDURE USP_TDS_SAVECORRDEFAULTDETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVECORRDEFAULTDETAILS]
@TAN VARCHAR(10),
@NAME VARCHAR(100),
@CATEGORY VARCHAR(75),
@RECEIPTNO VARCHAR(15),
@QUARTER VARCHAR(5),
@FORMID VARCHAR(15),
@SHORTDEDUCTIONSCOUNT INT,
@SHORTPAYMENTCOUNT INT,
@LATEPAYMENTCOUNT INT,
@AMOUNT NUMERIC(13,2),
@BRANCHID INT
AS
BEGIN
	INSERT INTO CORRDEFAULTDETAILS (TAN,NAME,CATEGORY,RECEIPTNO,QUARTER,FORMID,SHORTDEDUCTIONSCOUNT,SHORTPAYMENTCOUNT,LATEPAYMENTCOUNT,AMOUNT,BRANCHID) VALUES
	(@TAN,@NAME,@CATEGORY,@RECEIPTNO,@QUARTER,@FORMID,@SHORTDEDUCTIONSCOUNT,@SHORTPAYMENTCOUNT,@LATEPAYMENTCOUNT,@AMOUNT,@BRANCHID)
	SELECT @@IDENTITY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECORRDEFAULTSTATEMENT')
DROP PROCEDURE USP_TDS_SAVECORRDEFAULTSTATEMENT
GO
CREATE PROCEDURE [USP_TDS_SAVECORRDEFAULTSTATEMENT]
@DEFAULTID INT,
@SNO INT,
@PRNNO VARCHAR(20),
@PRNDATE SMALLDATETIME
AS
BEGIN
	 INSERT INTO CORRDEFAULTSTATEMENT(DEFAULTID,SNO,PRNNO,PRNDATE)
			VALUES(@DEFAULTID,@SNO,@PRNNO,@PRNDATE)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECORRDEFLATEPAYMENTS')
DROP PROCEDURE USP_TDS_SAVECORRDEFLATEPAYMENTS
GO
CREATE PROCEDURE [USP_TDS_SAVECORRDEFLATEPAYMENTS]
(
	@DEFAULTID INT,
	@SNO INT,
	@CHALLANRECNO INT,
	@DEDUCTEESNO INT,
	@PAN VARCHAR(10),
	@NAME VARCHAR(75) ,
	@PAYMENTDATE SMALLDATETIME,
	@BOOKCASHFLAG VARCHAR(1),
	@TAXDEPOSITED DECIMAL(13,2),
	@DEDUCTIONDATE SMALLDATETIME,
	@DEPOSITDATE SMALLDATETIME ,
	@DUEDATE SMALLDATETIME ,
	@MONTHSOFDEFAULT INT,
	@LATEPAYMENTINTERESTA DECIMAL(13,2),
	@LATEPAYMENTINTERESTC DECIMAL(13,2),
	@CHALLANNO INT,
	@CORRECTIONTYPE INT,
	@REASON  VARCHAR(75)=NULL
)
AS
BEGIN
	 INSERT INTO CORRDEFAULTLATEPAYMENTS(DEFAULTID,SNO,CHALLANRECNO,DEDUCTEESNO,PAN,NAME,PAYMENTDATE,BOOKCASHFLAG,TAXDEPOSITED,DEDUCTIONDATE,DEPOSITDATE,DUEDATE,MONTHSOFDEFAULT,
										LATEPAYMENTINTERESTA,LATEPAYMENTINTERESTC,CHALLANNO,CORRECTIONTYPE,REASON)
								VALUES(@DEFAULTID,@SNO,@CHALLANRECNO,@DEDUCTEESNO,@PAN,@NAME,@PAYMENTDATE,@BOOKCASHFLAG,@TAXDEPOSITED,@DEDUCTIONDATE,@DEPOSITDATE,@DUEDATE,@MONTHSOFDEFAULT,
										@LATEPAYMENTINTERESTA,@LATEPAYMENTINTERESTC,@CHALLANNO,@CORRECTIONTYPE,@REASON)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECORRECTIONDETAILS')
DROP PROCEDURE USP_TDS_SAVECORRECTIONDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_SAVECORRECTIONDETAILS]
    @BRANCHID INT,
    @FORMID SMALLINT,
    @QUARTER SMALLINT,
    @ACKNO VARCHAR(15),
	@PREACKNO VARCHAR(15),
    @ACKFILEDDATE SMALLDATETIME,
    @REVISENUMBER INT,
    @ISVALIDCORRERETURN BIT,
    @ISFINALUPDATE BIT,
    @ISCANCELLED BIT,
    @FILEDDATE SMALLDATETIME
AS
	BEGIN
	 DECLARE @ACKID INT;
	 SET @ACKID = -1;
	 SELECT @ACKID=ACKID 
	 FROM ACKNO WITH(NOLOCK) 
	 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
	 IF(@REVISENUMBER=1)
		BEGIN
			IF(@ACKID<>-1)
				BEGIN
					UPDATE ACKNO 
					SET ORGNUM=@ACKNO 
					WHERE ACKID=@ACKID
				END
			ELSE
				BEGIN
					INSERT INTO ACKNO(BRANCHID,FORMID,QUARTER,ORGNUM,ORGFILEDDATE,ERETURNGENDATE,ISVALID,ISNILLRETURN,RECEIPTNO,ISUPLOADED)
						VALUES(@BRANCHID,@FORMID,@QUARTER,@ACKNO,@FILEDDATE,GETDATE(),0,0,NULL,0)
				END
		END
	 ELSE
		BEGIN
			DECLARE @RREVISENUMBER INT
		    SET @RREVISENUMBER=@REVISENUMBER-1
		    IF EXISTS(SELECT REVISENUMBER 
					  FROM ACKNOREV 
					  WHERE ACKID=@ACKID AND REVISENUMBER=@RREVISENUMBER)
				BEGIN
					UPDATE ACKNOREV 
					SET REVNUM=@PREACKNO,
						REVFILEDDATE=(CASE WHEN REVFILEDDATE IS NULL OR REVFILEDDATE = '' THEN @ACKFILEDDATE ELSE REVFILEDDATE END) 
					WHERE ACKID=@ACKID AND REVISENUMBER=@RREVISENUMBER
				END
			ELSE  IF EXISTS(SELECT ACKNOREVID 
							FROM ACKNOREV 
							WHERE ACKID=@ACKID AND REVISENUMBER IS NULL)
				BEGIN
					UPDATE ACKNOREV 
					SET REVNUM=@PREACKNO,
					REVFILEDDATE = (CASE WHEN REVFILEDDATE IS NULL OR REVFILEDDATE = '' THEN @ACKFILEDDATE ELSE REVFILEDDATE END),
					REVISENUMBER=@RREVISENUMBER
					WHERE ACKID=@ACKID AND REVISENUMBER IS NULL 
				END
		    ELSE
				BEGIN
					INSERT INTO ACKNOREV(ACKID,REVNUM,REVFILEDDATE,REVISENUMBER) 
						VALUES(@ACKID,@PREACKNO,@ACKFILEDDATE,@RREVISENUMBER)
				END
	    END
	 IF EXISTS(SELECT REVISENUMBER FROM CORRECTIONDETAILS WITH(NOLOCK)
			   WHERE BRANCHID=@BRANCHID
				 AND FORMID=@FORMID
				 AND QUARTER=@QUARTER
				 AND REVISENUMBER=@REVISENUMBER)
		BEGIN
			UPDATE CORRECTIONDETAILS 
			SET ISVALIDCORRERETURN=@ISVALIDCORRERETURN,ISFINALUPDATE=@ISFINALUPDATE,ISCANCELLED=@ISCANCELLED,FILEDDATE=@FILEDDATE
			WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND REVISENUMBER=@REVISENUMBER
		END
	 ELSE
		BEGIN
			INSERT INTO CORRECTIONDETAILS(BRANCHID,FORMID,QUARTER,REVISENUMBER,ISVALIDCORRERETURN,ISFINALUPDATE,ISCANCELLED,FILEDDATE)
			VALUES (@BRANCHID,@FORMID,@QUARTER,@REVISENUMBER,@ISVALIDCORRERETURN,@ISFINALUPDATE,@ISCANCELLED,@FILEDDATE)
		END
     SELECT @REVISENUMBER
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECORREMPLOYEE')
DROP PROCEDURE USP_TDS_SAVECORREMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_SAVECORREMPLOYEE]    
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @DEDUCTEESERIALNO INT,    
 @DEDUCTEEID INT,    
 @NAME VARCHAR(75),    
 @PAN VARCHAR(10),    
 @GENDER INT,    
 @SENIORCITIZEN INT,    
 @ISSALARY BIT = NULL    
AS      
 BEGIN          
  DECLARE @ADDRESS1 VARCHAR(25),@ADDRESS2 VARCHAR(25),@ADDRESS3 VARCHAR(25),@ADDRESS4 VARCHAR(25),          
  @ADDRESS5 VARCHAR(25),@PINCODE VARCHAR(6),@REFERENCENO VARCHAR(20),          
  @PHONENO VARCHAR(15),@EMAILADDRESS VARCHAR(75),@DESIGNATION VARCHAR(20);          
  DECLARE @STATEID INT,@SALUTATION SMALLINT;         
  DECLARE @EMPLOYMENTFROM SMALLDATETIME,@EMPLOYMENTTO SMALLDATETIME;         
  SELECT @SALUTATION = D.SALUTATION ,@ADDRESS1 = D.ADDRESS1,@ADDRESS2 = D.ADDRESS2,@ADDRESS3 = D.ADDRESS3,@ADDRESS4 = D.ADDRESS4,@ADDRESS5 = D.ADDRESS5,          
      @STATEID = D.STATEID,@PINCODE = D.PINCODE,@EMPLOYMENTFROM = E.EMPLOYMENTFROM,@EMPLOYMENTTO = E.EMPLOYMENTTO,--@GENDER = E.GENDER,@ISSENIORCITIZEN = E.ISSENIORCITIZEN,          
      @DEDUCTEEID = D.DEDUCTEEID,@DESIGNATION=ISNULL(E.DESIGNATION,''),@PHONENO=ISNULL(D.PHONENO,''),@EMAILADDRESS=ISNULL(D.EMAILADDRESS,'')          
  FROM  DEDUCTEE D WITH(NOLOCK)
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID          
  WHERE  D.BRANCHID = @BRANCHID AND D.NAME = @NAME AND D.PAN = @PAN;          
  IF EXISTS (SELECT NAME FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND NAME = @NAME AND PAN = @PAN)          
   BEGIN    
    /*GET DATA FROM CORREMPLOYEE TABLE*/          
    SELECT @ADDRESS1 = ADDRESS1,@ADDRESS2 = ADDRESS2,@ADDRESS3 = ADDRESS3,@ADDRESS4 = ADDRESS4,@ADDRESS5 = ADDRESS5,          
        @STATEID = STATEID,@PINCODE = PINCODE,@EMPLOYMENTFROM = EMPLOYMENTFROM,@EMPLOYMENTTO = EMPLOYMENTTO,        
        @DEDUCTEEID = DEDUCTEEID,@DESIGNATION=ISNULL(DESIGNATION,''),          
        @PHONENO=ISNULL(PHONENO,''),@EMAILADDRESS=ISNULL(EMAILADDRESS,'')        
    FROM   CORREMPLOYEE          
    WHERE  BRANCHID = @BRANCHID AND NAME = @NAME AND PAN = @PAN;          
    /* UPDATE CORREMPLOYEE TABLE */         
    IF (@ISSALARY = 1)      
     BEGIN      
        IF EXISTS(SELECT NAME FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND NAME = @NAME AND PAN = @PAN AND CORRECTIONSTATUS = 2)      
         BEGIN      
			 DELETE FROM CORREMPLOYEE WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND NAME = @NAME AND PAN = @PAN AND CORRECTIONSTATUS = 2      
         END      
        INSERT INTO CORREMPLOYEE(BRANCHID,FORMID,[QUARTER],DEDUCTEESERIALNO,DEDUCTEEID,SALUTATION,NAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,          
           STATEID,PINCODE,GENDER,ISSENIORCITIZEN,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,PHONENO,EMAILADDRESS,PAN,LASTPAN,          
           UPDATEINDICATOR,CORRECTIONSTATUS)          
        VALUES(@BRANCHID,@FORMID,@QUARTER,@DEDUCTEESERIALNO,@DEDUCTEEID,@SALUTATION,@NAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,          
        @STATEID,@PINCODE,@GENDER,@SENIORCITIZEN,@DESIGNATION,@EMPLOYMENTFROM,@EMPLOYMENTTO,@PHONENO,@EMAILADDRESS,@PAN,@PAN,1,2);    
        UPDATE CORREMPLOYEE SET GENDER = @GENDER, ISSENIORCITIZEN = @SENIORCITIZEN         
        WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND NAME = @NAME AND PAN = @PAN AND CORRECTIONSTATUS <> 1    
     END    
    ELSE      
     BEGIN      
	   UPDATE CORREMPLOYEE SET DEDUCTEEID = @DEDUCTEEID,NAME = @NAME,ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,          
			 ADDRESS4 = @ADDRESS4,ADDRESS5 = @ADDRESS5,STATEID = @STATEID,PINCODE = @PINCODE,          
			 DESIGNATION = @DESIGNATION, EMPLOYMENTFROM = @EMPLOYMENTFROM,EMPLOYMENTTO = @EMPLOYMENTTO,PHONENO = @PHONENO,          
			 EMAILADDRESS = @EMAILADDRESS,PAN = @PAN, ISSENIORCITIZEN = @SENIORCITIZEN, GENDER = @GENDER        
	   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS <> 1;       
     END      
   END      
  ELSE          
   BEGIN          
    --SELECT @DEDUCTEESERIALNO = ISNULL(MAX(DEDUCTEESERIALNO),0) + 1 FROM CORREMPLOYEE          
    --WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER;  
    INSERT INTO CORREMPLOYEE(BRANCHID,FORMID,[QUARTER],DEDUCTEESERIALNO,DEDUCTEEID,SALUTATION,NAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,          
           STATEID,PINCODE,GENDER,ISSENIORCITIZEN,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,PHONENO,EMAILADDRESS,PAN,LASTPAN,          
           UPDATEINDICATOR,CORRECTIONSTATUS)          
    VALUES(@BRANCHID,@FORMID,@QUARTER,@DEDUCTEESERIALNO,@DEDUCTEEID,@SALUTATION,@NAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,          
        @STATEID,@PINCODE,@GENDER,@SENIORCITIZEN,@DESIGNATION,@EMPLOYMENTFROM,@EMPLOYMENTTO,@PHONENO,@EMAILADDRESS,@PAN,@PAN,1,1);          
   END          
  SELECT @DEDUCTEESERIALNO;          
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECORREMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_SAVECORREMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVECORREMPLOYEEDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESLNO INT,
	@SALUTATION TINYINT,
	@NAME VARCHAR(75),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@STATEID INT,
	@PINCODE VARCHAR(6),
	@GENDER CHAR(1),
	@ISSENIORCITIZEN SMALLINT,
	@DESIGNATION VARCHAR(20),
	@EMPLOYMENTFROM SMALLDATETIME,
	@EMPLOYMENTTO SMALLDATETIME,
	@PHONENO VARCHAR(15),
	@EMAILADDRESS VARCHAR(75),
	@PAN VARCHAR(10),
	@PANREFERENCE VARCHAR(10),
	@UPDATEINDICATOR TINYINT,
	@CORRECTIONSTATUS SMALLINT
AS
	BEGIN
		DECLARE @RETURNVALUE INT ;
		/*CHECK FOR DUPLICATE NAME AND PAN*/
		IF EXISTS (SELECT DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND NAME = @NAME AND PAN = @PAN AND DEDUCTEESERIALNO <> @DEDUCTEESLNO AND BRANCHID = @BRANCHID)
			BEGIN
				SET @RETURNVALUE = -1 ;
			END
		ELSE IF EXISTS (SELECT E.SERIALNO FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID WHERE D.BRANCHID = @BRANCHID AND D.NAME=@NAME AND PAN=@PAN AND E.SERIALNO <> @DEDUCTEESLNO AND BRANCHID = @BRANCHID)
			BEGIN
				SET @RETURNVALUE = -1 ;
			END
		ELSE
			BEGIN
				/*NEW RECORD*/
				IF @DEDUCTEESLNO = -1
					BEGIN
						DECLARE @MASTERDEDUCTEESLNO INT,@CORRDEDUCTEESLNO INT;
						SELECT @MASTERDEDUCTEESLNO = ISNULL(MAX(E.SERIALNO),0) + 1 FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID WHERE D.BRANCHID = @BRANCHID;
						SELECT @CORRDEDUCTEESLNO = ISNULL(MAX(DEDUCTEESERIALNO),0) + 1 FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
						IF @MASTERDEDUCTEESLNO > @CORRDEDUCTEESLNO
							BEGIN
								SET @DEDUCTEESLNO = @MASTERDEDUCTEESLNO ;
							END
						ELSE
							BEGIN
								SET @DEDUCTEESLNO = @CORRDEDUCTEESLNO ;
							END
						INSERT INTO CORREMPLOYEE(BRANCHID,FORMID,[QUARTER],DEDUCTEESERIALNO,SALUTATION,NAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,
				 								 STATEID,PINCODE,GENDER,ISSENIORCITIZEN,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,PHONENO,EMAILADDRESS,PAN,PANREFERENCE,LASTPAN,LASTPANREFERENCE,UPDATEINDICATOR,CORRECTIONSTATUS)
						VALUES(@BRANCHID,@FORMID,@QUARTER,@DEDUCTEESLNO,@SALUTATION,@NAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,
							   @STATEID,@PINCODE,@GENDER,@ISSENIORCITIZEN,@DESIGNATION,@EMPLOYMENTFROM,@EMPLOYMENTTO,@PHONENO,@EMAILADDRESS,@PAN,@PANREFERENCE,@PAN,@PANREFERENCE,@UPDATEINDICATOR,@CORRECTIONSTATUS);
						SET @RETURNVALUE = 1;
					END
				/*UPDATE THE EXISTING RECORD*/
				ELSE
					BEGIN
						UPDATE CORREMPLOYEE SET SALUTATION=@SALUTATION,NAME=@NAME,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,
												ADDRESS5=@ADDRESS5,STATEID=@STATEID,PINCODE=@PINCODE,GENDER=@GENDER,ISSENIORCITIZEN=@ISSENIORCITIZEN,DESIGNATION=@DESIGNATION,
												EMPLOYMENTFROM=@EMPLOYMENTFROM,EMPLOYMENTTO=@EMPLOYMENTTO,PHONENO=@PHONENO,EMAILADDRESS=@EMAILADDRESS,PAN=@PAN,PANREFERENCE=@PANREFERENCE,LASTPAN=@PAN,LASTPANREFERENCE=@PANREFERENCE
						WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESLNO AND CORRECTIONSTATUS = @CORRECTIONSTATUS;
						SET @RETURNVALUE = 1 ;
					END
			END
		SELECT @RETURNVALUE;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveCorrNonEmployee')
DROP PROCEDURE USP_TDS_SaveCorrNonEmployee
GO
CREATE PROCEDURE USP_TDS_SaveCorrNonEmployee
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESERIALNO INT,
	@DEDUCTEEID INT,
	@NAME VARCHAR(75),
	@ISAPPLICABLE26 BIT,
	@ISAPPLICABLE27 BIT,
	@PAN VARCHAR(10),
	@LASTPAN VARCHAR(10),
	@CODE SMALLINT   
AS
	BEGIN
		DECLARE @ADDRESS1 VARCHAR(25),@ADDRESS2 VARCHAR(25),@ADDRESS3 VARCHAR(25),
				@ADDRESS4 VARCHAR(25),@ADDRESS5 VARCHAR(25),@PINCODE VARCHAR(6),
				@REFERENCENO VARCHAR(20),@PHONENO VARCHAR(15),@EMAILADDRESS VARCHAR(75);
		DECLARE @STATEID INT;
		DECLARE @SALUTATION SMALLINT;
		DECLARE @ISTRANSPORTER BIT;
		DECLARE @PANREFERENCE VARCHAR(10);
		SELECT @SALUTATION = D.SALUTATION,@ADDRESS1 = D.ADDRESS1,@ADDRESS2 = D.ADDRESS2,
			   @ADDRESS3 = D.ADDRESS3,@ADDRESS4 = D.ADDRESS4,@ADDRESS5 = D.ADDRESS5,
			   @STATEID = D.STATEID,@PINCODE = D.PINCODE,@PHONENO = D.PHONENO,
			   @EMAILADDRESS = D.EMAILADDRESS,@DEDUCTEEID = D.DEDUCTEEID,
			   @ISTRANSPORTER = NE.ISTRANSPORTER,@PANREFERENCE = D.PANREFERENCE
		FROM   DEDUCTEE D WITH(NOLOCK)
					INNER JOIN NONEMPLOYEE NE 
						ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE  D.BRANCHID = @BRANCHID AND D.NAME = @NAME AND D.PAN = @PAN;
		IF EXISTS (SELECT NAME 
				   FROM CORRNONEMPLOYEE WITH(NOLOCK)
				   WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
				   AND [QUARTER] = @QUARTER AND NAME = @NAME 
				   AND PAN = @PAN AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO)
			BEGIN
				/* Get data from CORRNONEMPLOYEE table */
				SELECT @SALUTATION = SALUTATION,@ADDRESS1 = ADDRESS1,@ADDRESS2 = ADDRESS2,
					   @ADDRESS3 = ADDRESS3,@ADDRESS4 = ADDRESS4,@ADDRESS5 = ADDRESS5,
					   @STATEID = STATEID,@PINCODE = PINCODE,@PHONENO = PHONENO,
					   @EMAILADDRESS = EMAILADDRESS,@DEDUCTEEID = DEDUCTEEID,
					   @ISTRANSPORTER = ISTRANSPORTER,@PANREFERENCE = PANREFERENCE
				FROM   CORRNONEMPLOYEE WITH(NOLOCK)
				WHERE  BRANCHID = @BRANCHID AND NAME = @NAME AND PAN = @PAN;
				/*Update CORRNONEMPLOYEE table */
				UPDATE CORRNONEMPLOYEE 
				SET DEDUCTEEID = @DEDUCTEEID,NAME = @NAME,SALUTATION = @SALUTATION,
					ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,
					ADDRESS4 = @ADDRESS4,ADDRESS5 = @ADDRESS5,STATEID = @STATEID,
					PINCODE = @PINCODE,ISAPPLICABLE26 = @ISAPPLICABLE26,
				    ISAPPLICABLE27 = @ISAPPLICABLE27,ISTRANSPORTER = @ISTRANSPORTER,
				    PHONENO = @PHONENO,EMAILADDRESS = @EMAILADDRESS,PAN = @PAN--,CODE = @CODE
				WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID 
					AND QUARTER = @QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO;
			END
		ELSE IF EXISTS(SELECT NAME 
					   FROM DEDUCTEE D WITH(NOLOCK)
							INNER JOIN NONEMPLOYEE NE 
									ON D.DEDUCTEEID = NE.DEDUCTEEID 
					   WHERE D.BRANCHID = @BRANCHID AND NAME = @NAME 
							AND PAN = @PAN AND NE.SERIALNO = @DEDUCTEESERIALNO)
			BEGIN
				--SELECT @DEDUCTEESERIALNO = ISNULL(MAX(SERIALNO),1) FROM NONEMPLOYEE NE
				--INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = NE.DEDUCTEEID			
				--WHERE BRANCHID = @BRANCHID AND NAME = @NAME AND PAN = @PAN
				SELECT @CODE = ISNULL(DEDUCTEECODE,1) 
				FROM DEDUCTEE D WITH(NOLOCK)
					INNER JOIN NONEMPLOYEE NE 
							ON D.DEDUCTEEID = NE.DEDUCTEEID 
				WHERE D.BRANCHID = @BRANCHID AND NAME = @NAME 
					AND PAN = @PAN AND SERIALNO =  @DEDUCTEESERIALNO
				INSERT INTO CORRNONEMPLOYEE(BRANCHID,FORMID,[QUARTER],DEDUCTEESERIALNO,DEDUCTEEID,
											NAME,SALUTATION,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,
											STATEID,PINCODE,ISAPPLICABLE26,ISAPPLICABLE27,ISTRANSPORTER,
											PHONENO,EMAILADDRESS,PAN,PANREFERENCE,LASTPAN,LASTPANREFERENCE,
											CODE,UPDATEINDICATOR,CORRECTIONSTATUS)
				VALUES(@BRANCHID,@FORMID,@QUARTER,@DEDUCTEESERIALNO,@DEDUCTEEID,
					   @NAME,@SALUTATION,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,
					   @STATEID,@PINCODE,@ISAPPLICABLE26,@ISAPPLICABLE27,@ISTRANSPORTER,
					   @PHONENO,@EMAILADDRESS,@PAN,@PANREFERENCE,@LASTPAN,@PANREFERENCE,
					   @CODE,1,1);
			END
		ELSE 
			BEGIN
				SELECT @DEDUCTEESERIALNO = ISNULL(MAX(DEDUCTEESERIALNO),0) + 1 
				FROM CORRNONEMPLOYEE WITH(NOLOCK)				
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER;
				INSERT INTO CORRNONEMPLOYEE(BRANCHID,FORMID,[QUARTER],DEDUCTEESERIALNO,DEDUCTEEID,
											NAME,SALUTATION,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,
											STATEID,PINCODE,ISAPPLICABLE26,ISAPPLICABLE27,ISTRANSPORTER,
											PHONENO,EMAILADDRESS,PAN,LASTPAN,CODE,UPDATEINDICATOR,CORRECTIONSTATUS)
				VALUES(@BRANCHID,@FORMID,@QUARTER,@DEDUCTEESERIALNO,@DEDUCTEEID,
					   @NAME,@SALUTATION,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,
					   @STATEID,@PINCODE,@ISAPPLICABLE26,@ISAPPLICABLE27,@ISTRANSPORTER,
					   @PHONENO,@EMAILADDRESS,@PAN,@LASTPAN,@CODE,1,1);
			END
		SELECT @DEDUCTEESERIALNO;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECORRNONEMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_SAVECORRNONEMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVECORRNONEMPLOYEEDETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESLNO INT,
	@DEDUCTEEID INT,
	@SALUTATION TINYINT,
	@NAME VARCHAR(75),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@STATEID INT,
	@PINCODE VARCHAR(6),
	@ISAPPLICABLE26 BIT,
	@ISAPPLICABLE27 BIT,
	@PHONENO VARCHAR(15),
	@EMAILADDRESS VARCHAR(75),
	@PAN VARCHAR(10),
	@PANREFERENCE VARCHAR(10),
	@CODE SMALLINT,
	@ISTRANSPORTER BIT,
	@UPDATEINDICATOR TINYINT,
	@CORRECTIONSTATUS SMALLINT
	AS
		BEGIN
			DECLARE @RETURNVALUE INT;
			/*CHECK FOR DUPLICATE NAME AND PAN*/
			IF EXISTS (SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND NAME=@NAME AND PAN=@PAN AND DEDUCTEESERIALNO <> @DEDUCTEESLNO)
				BEGIN
					SET @RETURNVALUE = -1 ;
				END
			ELSE IF EXISTS (SELECT NE.SERIALNO FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID WHERE D.BRANCHID = @BRANCHID AND D.NAME=@NAME AND D.PAN=@PAN AND NE.SERIALNO <> @DEDUCTEESLNO)
				BEGIN
					SET @RETURNVALUE = -1 ;
				END
			ELSE
				BEGIN
					IF(@DEDUCTEESLNO = -1)
						BEGIN
							DECLARE @MASTERMAXSERIALNO INT;
							SELECT @DEDUCTEESLNO =(ISNULL(MAX(DEDUCTEESERIALNO),0))+1 FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID;
							SELECT @MASTERMAXSERIALNO=(ISNULL(MAX(NE.SERIALNO),0))+1 FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID=NE.DEDUCTEEID WHERE D.BRANCHID=@BRANCHID;
							IF(@MASTERMAXSERIALNO > @DEDUCTEESLNO)
								BEGIN
									SET @DEDUCTEESLNO = @MASTERMAXSERIALNO;
								END
							ELSE
								BEGIN
									SET @DEDUCTEESLNO = @DEDUCTEESLNO ;
								END
							INSERT INTO CORRNONEMPLOYEE(BRANCHID,FORMID,[QUARTER],DEDUCTEESERIALNO,SALUTATION,NAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,
													    STATEID,PINCODE,ISAPPLICABLE26,ISAPPLICABLE27,PHONENO,EMAILADDRESS,PAN,PANREFERENCE,LASTPAN,LASTPANREFERENCE,CODE,ISTRANSPORTER,UPDATEINDICATOR,CORRECTIONSTATUS)
							VALUES(@BRANCHID,@FORMID,@QUARTER,@DEDUCTEESLNO,@SALUTATION,@NAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,
								   @STATEID,@PINCODE,@ISAPPLICABLE26,@ISAPPLICABLE27,@PHONENO,@EMAILADDRESS,@PAN,@PANREFERENCE,@PAN,@PANREFERENCE,@CODE,@ISTRANSPORTER,@UPDATEINDICATOR,@CORRECTIONSTATUS);
							SET @RETURNVALUE = 1;
						END
					ELSE
						BEGIN
							UPDATE CORRNONEMPLOYEE SET SALUTATION=@SALUTATION,NAME=@NAME,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,
													   ADDRESS5=@ADDRESS5,STATEID=@STATEID,PINCODE=@PINCODE,ISAPPLICABLE26=@ISAPPLICABLE26,ISAPPLICABLE27=@ISAPPLICABLE27,PHONENO=@PHONENO,
											           EMAILADDRESS=@EMAILADDRESS,PAN=@PAN,PANREFERENCE=@PANREFERENCE,LASTPAN=@PAN,LASTPANREFERENCE=@PANREFERENCE,CODE=@CODE,ISTRANSPORTER = @ISTRANSPORTER,UPDATEINDICATOR = @UPDATEINDICATOR
							WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESLNO AND CORRECTIONSTATUS = @CORRECTIONSTATUS;
							SET @RETURNVALUE = 1;
						END
				END
			SELECT @RETURNVALUE;
		END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveCorrSalaryDetail')
DROP PROCEDURE USP_TDS_SaveCorrSalaryDetail
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveCorrSalaryDetail]
	@BRANCHID INT,
	@DEDUCTEESERIALNO INT,				
	@GROSSSALARY NUMERIC(12,2),
	@ET NUMERIC(12,2),
	@PT NUMERIC(12,2),
	@DEDUCTIONUS16 NUMERIC(12,2),
	@INCOMEFROMSALARIES NUMERIC(12,2),
	@OTHERINCOME NUMERIC(12,2),
	@GROSSTOTALINCOME NUMERIC(12,2),
	@VIA80CCE NUMERIC(12,2),
	@VIA80CCF NUMERIC(12,2),
	@VIA80CCG NUMERIC(12,2),
	@VIAOTHERS NUMERIC(12,2),
	@TOTALDEDUNDERCHAPTERVIA NUMERIC(12,2),
	@TOTALTAXABLEINCOME NUMERIC(12,2),
	@TAXONTOTALINCOME NUMERIC(12,2),
	@SURCHARGE NUMERIC(12,2),
	@EDUCATIONCESS NUMERIC(12,2),
	@RELIEFUS89 NUMERIC(12,2),
	@NETTAXPAYABLE NUMERIC(12,2),
	@TOTALTDS NUMERIC(12,2),
	@TAXPAYABLE NUMERIC(12,2),
	@CORRECTIONSTATUS SMALLINT,
	@CURRENTTAXABLEINCOME NUMERIC(12,2) = NULL,
	@PREVTAXABLEINCOME NUMERIC(12,2) = NULL,
	@CURRENTTDS NUMERIC(12,2) = NULL,
	@PREVTDS NUMERIC(12,2) = NULL,
	@ISTDSATHIGHERRATE BIT = 0,
	@PANLL1 VARCHAR(10) = NULL, 
	@NAMELL1 VARCHAR(75) = NULL, 
	@PANLL2 VARCHAR(10)= NULL, 
	@NAMELL2 VARCHAR(75) = NULL,
	@PANLL3 VARCHAR(10) = NULL, 
	@NAMELL3 VARCHAR(75) = NULL, 
	@PANLL4 VARCHAR(10) = NULL, 
	@NAMELL4 VARCHAR(75) = NULL, 
	@PANLEND1 VARCHAR(10) = NULL, 
	@NAMELEND1 VARCHAR(75) = NULL, 
	@PANLEND2 VARCHAR(10) = NULL, 
	@NAMELEND2 VARCHAR(75) = NULL, 
	@PANLEND3 VARCHAR(10) = NULL, 
	@NAMELEND3 VARCHAR(75) = NULL, 
	@PANLEND4 VARCHAR(10) = NULL, 
	@NAMELEND4 VARCHAR(75) = NULL, 
	@SAFNAME VARCHAR(75) = NULL,
	@SAFFROMDATE SMALLDATETIME = NULL, 
	@SAFTODATE SMALLDATETIME = NULL, 
	@AMTREPAID NUMERIC(12,2) = NULL, 
	@SAFTAXRATE NUMERIC(7,4) = NULL, 
	@SAFTAXDEDUCTED NUMERIC(12,2) = NULL
AS
	BEGIN
		DECLARE @CORRDEDUCTEESERIALNO INT;
		IF @CORRECTIONSTATUS = 2
			BEGIN 
				DECLARE @EXPECTEDSID INT;
				DECLARE @NEWSID INT;
				SET @NEWSID = -1;
				--if salary detail is updating more than one time then deleting the existing records and adding once agin
				IF EXISTS(SELECT DEDUCTEESERIALNO FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS <> 1)
					BEGIN
						IF EXISTS(SELECT DEDUCTEESERIALNO FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS = 2)
						BEGIN
							SELECT @NEWSID = CORRDEDUCTEESERIALNO FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS = 2;
						END
						DELETE FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS <> 1;
					END
				IF(@NEWSID = -1)
					BEGIN
						SELECT @CORRDEDUCTEESERIALNO = ISNULL(MAX(CORRDEDUCTEESERIALNO),0) + 1 FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID;
						SELECT @EXPECTEDSID = EXPECTEDSID FROM CORRDEDUCTOR WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4;
						IF(@EXPECTEDSID > @CORRDEDUCTEESERIALNO)
							BEGIN
								SET @CORRDEDUCTEESERIALNO = @EXPECTEDSID;
							END	
					END
				ELSE
					BEGIN
						SET @CORRDEDUCTEESERIALNO = @NEWSID;
					END
				--Deleting the record i.e copying the record with DELETE(4) status and Creating as new Record with status ADD(5)
				INSERT INTO CORRSALARYDETAIL(DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,DEDUCTEEID,BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,
											 OTHERINCOME,GROSSTOTALINCOME,LASTGROSSTOTALINCOME,VIA80CCE,VIA80CCF,VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,
											 TOTALTAXABLEINCOME,TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,RELIEFUS89,NETTAXPAYABLE,TOTALTDS,TAXPAYABLE,
											 CORRECTIONSTATUS,RECORDSTATUS, CURRENTTAXABLEINCOME, PREVTAXABLEINCOME, CURRENTTDS, PREVTDS, ISTDSATHIGHERRATE, PANLL1, NAMELL1, PANLL2, NAMELL2,
											 PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, 
											 SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED)
				SELECT DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,DEDUCTEEID,BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,OTHERINCOME,GROSSTOTALINCOME,GROSSTOTALINCOME,VIA80CCE,VIA80CCF,VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,
											 TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,RELIEFUS89,NETTAXPAYABLE,TOTALTDS,TAXPAYABLE,4,0, CURRENTTAXABLEINCOME, PREVTAXABLEINCOME, CURRENTTDS, PREVTDS, ISTDSATHIGHERRATE, PANLL1, NAMELL1, PANLL2, NAMELL2,
											 PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, 
											 SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED
				FROM   CORRSALARYDETAIL 
				WHERE  BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO;
				INSERT INTO CORRSALARYDETAIL(DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,
											 OTHERINCOME,GROSSTOTALINCOME,VIA80CCE,VIA80CCF,VIA80CCG, VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,
											 TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,RELIEFUS89,NETTAXPAYABLE,TOTALTDS,TAXPAYABLE,
											 CORRECTIONSTATUS,RECORDSTATUS, CURRENTTAXABLEINCOME, PREVTAXABLEINCOME, CURRENTTDS, PREVTDS, ISTDSATHIGHERRATE, PANLL1, NAMELL1, PANLL2, NAMELL2,
											 PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, 
											 SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED)
									VALUES  (@DEDUCTEESERIALNO,@CORRDEDUCTEESERIALNO,@BRANCHID,@GROSSSALARY,@ET,@PT,@DEDUCTIONUS16,@INCOMEFROMSALARIES,
										     @OTHERINCOME,@GROSSTOTALINCOME,@VIA80CCE,@VIA80CCF,@VIA80CCG, @VIAOTHERS,@TOTALDEDUNDERCHAPTERVIA,@TOTALTAXABLEINCOME,
										     @TAXONTOTALINCOME,@SURCHARGE,@EDUCATIONCESS,@RELIEFUS89,@NETTAXPAYABLE,@TOTALTDS,@TAXPAYABLE,
										     @CORRECTIONSTATUS,1, @CURRENTTAXABLEINCOME, @PREVTAXABLEINCOME, @CURRENTTDS, @PREVTDS, @ISTDSATHIGHERRATE, @PANLL1, @NAMELL1, @PANLL2, @NAMELL2,
											 @PANLL3, @NAMELL3, @PANLL4, @NAMELL4, @PANLEND1, @NAMELEND1, @PANLEND2, @NAMELEND2, @PANLEND3, @NAMELEND3, @PANLEND4, @NAMELEND4, @SAFNAME, @SAFFROMDATE, 
											 @SAFTODATE, @AMTREPAID, @SAFTAXRATE, @SAFTAXDEDUCTED);
			END
		ELSE IF @CORRECTIONSTATUS = 4
			BEGIN
				--if salary detail is updating more than one time then deleting the existing records and adding once agin
				IF EXISTS(SELECT DEDUCTEESERIALNO FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS NOT IN(1,5))
					BEGIN
						DELETE FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS NOT IN(1,5);
					END
				--Deleting the record i.e copying the record with DELETE(4) status and Creating as new Record with status ADD(5)
				INSERT INTO CORRSALARYDETAIL(DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,DEDUCTEEID,BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,
											 OTHERINCOME,GROSSTOTALINCOME,LASTGROSSTOTALINCOME,VIA80CCE,VIA80CCG,VIA80CCF,VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,
										     TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,RELIEFUS89,NETTAXPAYABLE,TOTALTDS,TAXPAYABLE,
										     CORRECTIONSTATUS,RECORDSTATUS, CURRENTTAXABLEINCOME, PREVTAXABLEINCOME, CURRENTTDS, PREVTDS, ISTDSATHIGHERRATE, PANLL1, NAMELL1, PANLL2, NAMELL2,
											 PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, 
											 SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED)
				SELECT DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,DEDUCTEEID,BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,OTHERINCOME,GROSSTOTALINCOME,
					   GROSSTOTALINCOME,VIA80CCE,VIA80CCG,VIA80CCF,VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,
					   RELIEFUS89,NETTAXPAYABLE,TOTALTDS,TAXPAYABLE,4,1, CURRENTTAXABLEINCOME, PREVTAXABLEINCOME, CURRENTTDS, PREVTDS, ISTDSATHIGHERRATE, PANLL1, 
					   NAMELL1, PANLL2, NAMELL2, PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4,
					   SAFNAME, SAFFROMDATE, SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED
				FROM   CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO;
			END
		ELSE IF @CORRECTIONSTATUS = 5
			BEGIN
				--if salary detail is updating more than one time then deleting the existing records and adding once agin
				IF EXISTS(SELECT DEDUCTEESERIALNO FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS NOT IN(1,4))
					BEGIN
						SELECT @CORRDEDUCTEESERIALNO = CORRDEDUCTEESERIALNO FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS NOT IN(1,4);
						DELETE FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND CORRECTIONSTATUS NOT IN(1,4);
					END
				ELSE
					BEGIN					
						SELECT @CORRDEDUCTEESERIALNO = ISNULL(MAX(CORRDEDUCTEESERIALNO),0) + 1 FROM CORRSALARYDETAIL WHERE BRANCHID = @BRANCHID;
					END
					SELECT @EXPECTEDSID = EXPECTEDSID FROM CORRDEDUCTOR WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4;
					IF(@EXPECTEDSID > @CORRDEDUCTEESERIALNO)
						BEGIN
							SET @CORRDEDUCTEESERIALNO = @EXPECTEDSID;
						END					
					INSERT INTO CORRSALARYDETAIL(DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,
												 OTHERINCOME,GROSSTOTALINCOME,VIA80CCE,VIA80CCF,VIA80CCG,VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,
												 TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,RELIEFUS89,NETTAXPAYABLE,TOTALTDS,TAXPAYABLE,
												 CORRECTIONSTATUS,RECORDSTATUS, CURRENTTAXABLEINCOME, PREVTAXABLEINCOME, CURRENTTDS, PREVTDS, ISTDSATHIGHERRATE, PANLL1, 
											     NAMELL1, PANLL2, NAMELL2, PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, 
											     PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED)
										  VALUES(@DEDUCTEESERIALNO,@CORRDEDUCTEESERIALNO,@BRANCHID,@GROSSSALARY,@ET,@PT,@DEDUCTIONUS16,@INCOMEFROMSALARIES,
												 @OTHERINCOME,@GROSSTOTALINCOME,@VIA80CCE,@VIA80CCF,@VIA80CCG,@VIAOTHERS,@TOTALDEDUNDERCHAPTERVIA,@TOTALTAXABLEINCOME,
												 @TAXONTOTALINCOME,@SURCHARGE,@EDUCATIONCESS,@RELIEFUS89,@NETTAXPAYABLE,@TOTALTDS,@TAXPAYABLE,
												 @CORRECTIONSTATUS,1, @CURRENTTAXABLEINCOME, @PREVTAXABLEINCOME, @CURRENTTDS, @PREVTDS, @ISTDSATHIGHERRATE, @PANLL1, @NAMELL1, 
												 @PANLL2, @NAMELL2, @PANLL3, @NAMELL3, @PANLL4, @NAMELL4, @PANLEND1, @NAMELEND1, @PANLEND2, @NAMELEND2, @PANLEND3, @NAMELEND3, 
												 @PANLEND4, @NAMELEND4, @SAFNAME, @SAFFROMDATE, @SAFTODATE, @AMTREPAID, @SAFTAXRATE, @SAFTAXDEDUCTED)
	  END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECORRSHORTPAYMENTS')
DROP PROCEDURE USP_TDS_SAVECORRSHORTPAYMENTS
GO
CREATE PROCEDURE [USP_TDS_SAVECORRSHORTPAYMENTS]
(
	@DEFAULTID INT,
	@SNO INT,
	@CHALLANRECNO INT,
	@CHALLANVOUNO INT,
	@BSRCODE VARCHAR(7),
	@DEPOSITDATE SMALLDATETIME,
	@SECTIONCODE VARCHAR,
	@CHALLANAMT INT,
	@TDSMAPPED INT,
	@TDSDEPOSITED INT,
	@SHORTPAYMNETAMT DECIMAL(13,2),
	@SHORTPAYINTAMT DECIMAL(13,2),
	@CHALLANNO INT,
	@CORRTYPE INT,
	@REASON VARCHAR=NULL
)
AS
BEGIN
		INSERT INTO CORRDEFAULTSHORTPAYMENTS(DEFAULTID,SNO,CHALLANRECNO,CHALLANVOUNO,BSRCODE,DEPOSITDATE,SECTIONCODE,CHALLANAMT,TDSMAPPED,TDSDEPOSITED,SHORTPAYMNETAMT,
											 SHORTPAYINTAMT,CHALLANNO,CORRTYPE,REASON)
		VALUES	(@DEFAULTID,@SNO,@CHALLANRECNO,@CHALLANVOUNO,@BSRCODE,@DEPOSITDATE,@SECTIONCODE,@CHALLANAMT,@TDSMAPPED,@TDSDEPOSITED,@SHORTPAYMNETAMT,
											 @SHORTPAYINTAMT,@CHALLANNO,@CORRTYPE,@REASON)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECVIA80CDET')
DROP PROCEDURE USP_TDS_SAVECVIA80CDET
GO
CREATE PROCEDURE [USP_TDS_SAVECVIA80CDET]  
@COMID INT,      
@CHAPTERVIADETID INT,      
@C80CID INT,      
@GROSS NUMERIC(13,2),      
@QUALIFYING NUMERIC(13,2),
@FINYEAR INT      
AS      
BEGIN      
 DECLARE @CVIA80CDETID INT;      
 SET @CVIA80CDETID = -1;
 DECLARE @CHAPTERVIA TABLE(CHAPTERVIAID INT);      
  IF EXISTS(SELECT CVIA80CDETID FROM CVIA80CDET DET WITH(NOLOCK)
				INNER JOIN CHAPTERVIADET CVIA WITH(NOLOCK) ON CVIA.CHAPTERVIADETAILID = DET.CHAPTERVIADETID
			    WHERE CVIA.COMID = @COMID AND C80CID = @C80CID AND CVIA.SALARYSECTIONID = 3)      
    BEGIN      
		SELECT @CVIA80CDETID = CVIA80CDETID FROM CVIA80CDET DET WITH(NOLOCK)
		    INNER JOIN CHAPTERVIADET CVIA WITH(NOLOCK) ON CVIA.CHAPTERVIADETAILID = DET.CHAPTERVIADETID
			WHERE CVIA.COMID = @COMID AND C80CID = @C80CID
	   UPDATE CVIA80CDET SET GROSS = @GROSS , QUALIFYING = @QUALIFYING, ISORIGINAL = 1
	   FROM CVIA80CDET DET WITH(NOLOCK) 
	   INNER JOIN CHAPTERVIADET CVIA WITH(NOLOCK) ON CVIA.CHAPTERVIADETAILID = DET.CHAPTERVIADETID
	   WHERE CVIA.COMID = @COMID AND C80CID = @C80CID
    END
  ELSE      
    BEGIN   
		IF EXISTS(SELECT CHAPTERVIADETAILID FROM CHAPTERVIADET WITH(NOLOCK) WHERE COMID = @COMID AND SALARYSECTIONID = 3)
		 BEGIN
			SELECT @CHAPTERVIADETID = CHAPTERVIADETAILID FROM CHAPTERVIADET WITH(NOLOCK) WHERE COMID = @COMID AND SALARYSECTIONID = 3 
		 END
		ELSE
		 BEGIN
			INSERT INTO @CHAPTERVIA
			EXEC USP_TDS_SAVECHAPTERVIADET @COMID, 3, 0, 0, 0
			SELECT @CHAPTERVIADETID = CHAPTERVIAID FROM @CHAPTERVIA
		 END
		INSERT INTO CVIA80CDET(CHAPTERVIADETID, C80CID, GROSS, QUALIFYING, ISORIGINAL)      
		VALUES(@CHAPTERVIADETID, @C80CID, @GROSS, @QUALIFYING,1)      
		SET @CVIA80CDETID = SCOPE_IDENTITY();      
    END      
	   SELECT @GROSS = SUM(GROSS), @QUALIFYING = SUM(QUALIFYING) FROM CVIA80CDET CDET  WITH (NOLOCK)      
		INNER JOIN CHAPTERVIADET CVIA WITH (NOLOCK) ON CDET.CHAPTERVIADETID = CVIA.CHAPTERVIADETAILID      
		WHERE CVIA.COMID = @COMID       
	    GROUP BY CDET.CHAPTERVIADETID    
	    UPDATE CHAPTERVIADET SET GROSSAMOUNT = @GROSS ,     
		QUALIFYINGAMOUNT = CASE WHEN @FINYEAR > 2013 THEN (CASE WHEN @QUALIFYING > 150000 THEN 150000 ELSE @QUALIFYING END) ELSE (CASE WHEN @QUALIFYING > 100000 THEN 100000 ELSE @QUALIFYING END) END,      
		DEDUCTIBLEAMOUNT = CASE WHEN @FINYEAR > 2013 THEN (CASE WHEN @QUALIFYING > 0 THEN (CASE WHEN @QUALIFYING > 150000 THEN 150000 ELSE @QUALIFYING END) ELSE 0 END) ELSE (CASE WHEN @QUALIFYING > 0 THEN (CASE WHEN @QUALIFYING > 100000 THEN 100000 ELSE @QUALIFYING END) ELSE 0 END) END      
        WHERE COMID = @COMID AND SALARYSECTIONID = 3      
    SELECT @CVIA80CDETID      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVECVIA80CDETAILS')
DROP PROCEDURE USP_TDS_SAVECVIA80CDETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVECVIA80CDETAILS]
	@CVIA80CDETID INT,
	@CHAPTERVIADETAILID INT,
	@C80CID INT,
	@GROSSAMOUNT NUMERIC(12,2),
	@QUALIFYINGAMOUNT NUMERIC(12,2),
	@DEDUCTIBLEAMOUNT NUMERIC(12,2)
AS
	BEGIN
		INSERT INTO CVIA80CDET(CVIA80CDETID,CHAPTERVIADETID,C80CID,GROSS,QUALIFYING,DEDUCTIBLE)
		VALUES      (@CVIA80CDETID,@CHAPTERVIADETAILID,@C80CID,@GROSSAMOUNT,@QUALIFYINGAMOUNT,@DEDUCTIBLEAMOUNT);
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveDataAudit')
DROP PROCEDURE USP_TDS_SaveDataAudit
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveDataAudit]  
 @Type VARCHAR(20),  
 @UserID INT,  
 @Description VARCHAR(200),
 @BranchID INT  
AS  
BEGIN  
 INSERT INTO DATAAUDIT(CHGDATETIME,TYPE,USERID,DESCRIPTION,BRANCHID)  
 VALUES(GETDATE(),@Type,@UserID,@Description,@BranchID)  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveDeducteeDetail')
DROP PROCEDURE USP_TDS_SaveDeducteeDetail
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveDeducteeDetail] 
 @BRANCHID INT,                  
 @DEDUCTEEID INT,                  
 @ISDEDUCTEEANEMPLOYEE BIT,                  
 @SALUTATION TINYINT,                  
 @NAME VARCHAR(75),                  
 @PAN VARCHAR(10),                  
 @PANREFERENCE VARCHAR(10),                  
 @ADDRESS1 VARCHAR(25),                  
 @ADDRESS2 VARCHAR(25),                  
 @ADDRESS3 VARCHAR(25),                  
 @ADDRESS4 VARCHAR(25),                  
 @ADDRESS5 VARCHAR(25),                  
 @STATEID INT,                  
 @PINCODE VARCHAR(6),                  
 @PHONENO VARCHAR(15),                  
 @EMAILADDRESS VARCHAR(75),                  
 @REFERENCENO VARCHAR(20) ,                
 @PANSTATUS VARCHAR(MAX),            
 @ISPANEXIXTS BIT=NULL,            
 @OUTSRNO INT=NULL OUTPUT,            
 @OUTNAME VARCHAR(75)=NULL OUTPUT,    
 @ENTRYBRANCHID INT=NULL,    
 @ENTRYDATE SMALLDATETIME=NULL,
 @EMPTYPE BIT = NULL,  
 @ISSB BIT=NULL,
 @ISOBC BIT=NULL       
AS                  
 BEGIN         
 --IB        
 IF(@ISPANEXIXTS IS NULL)        
 BEGIN                 
   IF @ISDEDUCTEEANEMPLOYEE = 1 /* To check for Employee Name & PAN duplication */                  
    BEGIN                  
  IF EXISTS (SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) 
				 ON D.DEDUCTEEID = E.DEDUCTEEID WHERE D.NAME = @NAME AND D.PAN = @PAN AND PAN NOT IN ('PANAPPLIED', 'PANNOTAVBL', 'PANINVALID') AND D.DEDUCTEEID <> @DEDUCTEEID  AND D.BRANCHID = @BRANCHID)                  
   BEGIN                  
    SET @DEDUCTEEID = -2;                  
   END                  
    END                    
   ELSE IF @ISDEDUCTEEANEMPLOYEE = 0 /* To check for NonEmployee Name & PAN duplication */                  
    BEGIN                  
  IF ((@ISOBC <> 1 AND @ISSB <> 1) AND EXISTS (SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
			 ON D.DEDUCTEEID = NE.DEDUCTEEID WHERE D.NAME = @NAME AND D.PAN = @PAN  AND PAN NOT IN ('PANAPPLIED', 'PANNOTAVBL', 'PANINVALID') AND D.DEDUCTEEID <> @DEDUCTEEID AND D.BRANCHID = @BRANCHID))                
   BEGIN              
    SET @DEDUCTEEID = -2;                  
   END                  
    END           
 END 
 IF(@ISSB=1 AND EXISTS(SELECT PAN FROM DEFAULTSETTINGS WITH(NOLOCK) WHERE PAN=@PAN))  
 BEGIN  
  SET @DEDUCTEEID=-4;  
 END                  
  --IB            
  IF(EXISTS(SELECT PAN FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
	 ON D.DEDUCTEEID = NE.DEDUCTEEID  WHERE D.PAN=@PAN AND D.DEDUCTEEID <> @DEDUCTEEID AND @ISPANEXIXTS=1 AND PAN<>'PANAPPLIED' AND D.PAN<>'PANINVALID' AND D.PAN<>'PANNOTAVBL' AND D.BRANCHID = @BRANCHID))            
 BEGIN            
  SET @DEDUCTEEID = -3;               
  SELECT @OUTNAME=NAME,@OUTSRNO=NE.SERIALNO FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)             
  ON NE.DEDUCTEEID=D.DEDUCTEEID            
  WHERE PAN=@PAN AND D.BRANCHID = @BRANCHID           
 END                  
  IF @DEDUCTEEID <> -2  OR  @DEDUCTEEID<>-3               
   BEGIN                  
    IF (@DEDUCTEEID = -1) /* New Entry */                  
     BEGIN                  
      INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,                  
            STATEID,PINCODE,PHONENO,EMAILADDRESS,REFERENCENO,PANSTATUS,ENTRYBRANCHID,ENTRYDATE,EMPTYPE)                     
      VALUES    (@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,                  
            @PHONENO,@EMAILADDRESS,@REFERENCENO,@PANSTATUS,@ENTRYBRANCHID,@ENTRYDATE, @EMPTYPE);                  
      SELECT @DEDUCTEEID = SCOPE_IDENTITY();                  
     END                  
    ELSE /* Existing Entry */                  
     BEGIN      
 UPDATE DEDUCTEE 
      SET SALUTATION = @SALUTATION,NAME = @NAME,PAN = @PAN,PANREFERENCE = @PANREFERENCE,                  
          ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,ADDRESS5 = @ADDRESS5,                  
          STATEID = @STATEID,PINCODE = @PINCODE,PHONENO = @PHONENO,EMAILADDRESS = @EMAILADDRESS ,                  
          REFERENCENO=@REFERENCENO                  
      WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID;                  
     END                  
   END                       
  SELECT @DEDUCTEEID;                  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEDUCTEEDETAILACCESS')
DROP PROCEDURE USP_TDS_SAVEDEDUCTEEDETAILACCESS
GO
CREATE PROCEDURE [USP_TDS_SAVEDEDUCTEEDETAILACCESS]
	@BRANCHID INT,
	@DEDUCTEEID INT,
	@ISDEDUCTEEANEMPLOYEE BIT,
	@SALUTATION TINYINT,
	@NAME VARCHAR(75),
	@PAN VARCHAR(10),
	@PANREFERENCE VARCHAR(10),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@STATEID INT,
	@PINCODE VARCHAR(6),
	@PHONENO VARCHAR(15),
	@EMAILADDRESS VARCHAR(75),
	@REFERENCENO VARCHAR(20)
AS
	BEGIN
		IF @ISDEDUCTEEANEMPLOYEE = 1 /* TO CHECK FOR EMPLOYEE NAME & PAN DUPLICATION */
			BEGIN
				IF EXISTS (SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID WHERE D.NAME = @NAME AND D.PAN = @PAN AND D.DEDUCTEEID <> @DEDUCTEEID  AND D.BRANCHID = @BRANCHID)
					BEGIN
						SET @DEDUCTEEID = -2;
					END
			END
		--ELSE IF @ISDEDUCTEEANEMPLOYEE = 0 /* TO CHECK FOR NONEMPLOYEE NAME & PAN DUPLICATION */
		IF @DEDUCTEEID <> -2
			BEGIN
				IF (@DEDUCTEEID = -1) /* NEW ENTRY */
					BEGIN
						INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,
											 STATEID,PINCODE,PHONENO,EMAILADDRESS,REFERENCENO)
						VALUES				(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,
											 @PHONENO,@EMAILADDRESS,@REFERENCENO);
						SELECT @DEDUCTEEID = SCOPE_IDENTITY();
					END
				ELSE /* EXISTING ENTRY */
					BEGIN
						UPDATE DEDUCTEE
						SET    SALUTATION = @SALUTATION,NAME = @NAME,PAN = @PAN,PANREFERENCE = @PANREFERENCE,
							   ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,ADDRESS5 = @ADDRESS5,
							   STATEID = @STATEID,PINCODE = @PINCODE,PHONENO = @PHONENO,EMAILADDRESS = @EMAILADDRESS ,
							   REFERENCENO=@REFERENCENO
						WHERE  BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID;
					END
			END
		SELECT @DEDUCTEEID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEDUCTIONAUDITDETAILS')
DROP PROCEDURE USP_TDS_SAVEDEDUCTIONAUDITDETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVEDEDUCTIONAUDITDETAILS]
	@DEDUCTIONID INT,
	@USERID INT,
	@AUDITTYPE INT,
	@TRANSSTATUS INT,
	@AUDITREMARKS VARCHAR(MAX)
	,@ISINSERT INT,
	@USERNAME VARCHAR(100)
AS
BEGIN
	IF(@ISINSERT=1)
	BEGIN
	--IF((SELECT COUNT(*) FROM DEDUCTIONDETAILAUDIT WHERE RECORDID=@DEDUCTIONID)<2)
		INSERT INTO DEDUCTIONDETAILAUDIT(RECORDID,USERID,AUDITTYPE,TRANSSTATUS,AUDITDATE,AUDITREMARKS,USERNAME)
		VALUES(@DEDUCTIONID,@USERID,@AUDITTYPE,@TRANSSTATUS,GETDATE(),@AUDITREMARKS,@USERNAME)
	END
	ELSE
	BEGIN
		DELETE FROM DEDUCTIONDETAILAUDIT 
		WHERE RECORDID=@DEDUCTIONID;
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveDeductionAuditTrail')
DROP PROCEDURE USP_TDS_SaveDeductionAuditTrail
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveDeductionAuditTrail]                    
@USERID INT,                    
@TRANSSTATUS INT,                   
@DEDUCTIONID INT,                   
@AUDITTYPE INT,            
@AUDITDATE DATETIME,                   
@AUDITREMARKS VARCHAR(500),          
@ISCHECKER BIT = 0,          
@BRANCHID INT = NULL,          
@FORMID INT = NULL,          
@QUARTER INT = NULL                   
AS                    
  BEGIN 
 DECLARE @AUDITID INT;                    
 SET @AUDITID =-1;                    
    IF(@DEDUCTIONID IS NOT NULL)          
    BEGIN          
     IF(@AUDITREMARKS = '')              
   BEGIN    
      SELECT @AUDITREMARKS = CAST(C.BRANCHCODE AS VARCHAR) + '^' + CAST(DR.TAN AS VARCHAR) + '^'+ CAST(CB.BRANCHNAME AS VARCHAR)+'^'+ CASE WHEN @AUDITTYPE = 1 THEN 'Addition' WHEN @AUDITTYPE = 2 THEN 'Modification' ELSE 'Deletion' END +'^' + CONVERT(VARCHAR, @AUDITDATE, 103) +'^' +               
      CAST(U.USERNAME AS VARCHAR) + '^'+ CAST(DD.SERIALNO AS VARCHAR) + '^'+ CAST(ISNULL(DD.ADDITIONALFIELD1,'') AS VARCHAR) + '^' + CAST(D.NAME AS VARCHAR) + '^'+ CAST(D.PAN AS VARCHAR) + '^' + CASE WHEN DD.FORMID = 1 THEN 'From24' WHEN DD.FORMID = 2 THEN 'Form26' ELSE 'Form27' END + '^' + CAST(TS.SECTIONNAME AS VARCHAR) + '^' +
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(TS.SECTIONNAME AS VARCHAR) END + '^' + CAST(DD.PAYMENTMADE AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.PAYMENTMADE AS VARCHAR) END + '^' + CAST(DD.TAXRATE AS VARCHAR) + '^' + 
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TAXRATE AS VARCHAR) END + '^' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TOTALDEDUCTED AS VARCHAR) END + '^'     
      FROM DEDUCTIONDETAIL DD WITH(NOLOCK)          
      INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
      INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON DD.BRANCHID = C.BRANCHID
      LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON C.PARENTBRANCHID = CB.BRANCHID
      INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND BD.QUARTER = DD.QUARTER
      INNER JOIN DEDUCTOR DR WITH(NOLOCK) ON DR.DEDUCTORID = BD.DEDUCTORID
      INNER JOIN USERMASTER U WITH(NOLOCK) ON U.USERID = @USERID
	  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID               
      WHERE DD.DEDUCTIONID = @DEDUCTIONID               
   END   
      INSERT INTO DEDUCTIONDETAILAUDIT(RECORDID, USERID, AUDITTYPE,TRANSSTATUS, AUDITDATE, AUDITREMARKS)   
     VALUES (@DEDUCTIONID, @USERID,@AUDITTYPE,@TRANSSTATUS,CONVERT(VARCHAR(20),@AUDITDATE,120),@AUDITREMARKS)                    
      SET @AUDITID = SCOPE_IDENTITY();  
      UPDATE DEDUCTIONDETAIL SET AUDITID = @AUDITID, TRANSSTATUS = @TRANSSTATUS   
   WHERE DEDUCTIONID = @DEDUCTIONID                    
       END            
    ELSE          
       BEGIN   
    IF(@ISCHECKER = 0)          
	 BEGIN 	               
		 INSERT INTO DEDUCTIONDETAILAUDIT(RECORDID, USERID, AUDITTYPE,TRANSSTATUS, AUDITDATE, AUDITREMARKS)           
		 SELECT DEDUCTIONID, 1 AS USERID, 3 AS AUDITTYPE,4 AS TRANSSTATUS,@AUDITDATE AS AUDITDATE, CAST(C.BRANCHCODE AS VARCHAR) + '^' + CAST(DR.TAN AS VARCHAR) + '^'+ CAST(CB.BRANCHNAME AS VARCHAR)+'^'+ CASE WHEN @AUDITTYPE = 1 THEN 'Addition' WHEN @AUDITTYPE = 2 THEN 'Modification' ELSE 'Deletion' END +'^' + CONVERT(VARCHAR, @AUDITDATE, 103) +'^' +               
      CAST(U.USERNAME AS VARCHAR) + '^'+ CAST(DD.SERIALNO AS VARCHAR) + '^'+ CAST(ISNULL(DD.ADDITIONALFIELD1,'') AS VARCHAR) + '^' + CAST(D.NAME AS VARCHAR) + '^'+ CAST(D.PAN AS VARCHAR) + '^' + CASE WHEN DD.FORMID = 1 THEN 'Form24' WHEN DD.FORMID = 2 THEN 'Form26' ELSE 'Form27' END + '^' + CAST(TS.SECTIONNAME AS VARCHAR) + '^' +
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(TS.SECTIONNAME AS VARCHAR) END + '^' + CAST(DD.PAYMENTMADE AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.PAYMENTMADE AS VARCHAR) END + '^' + CAST(DD.TAXRATE AS VARCHAR) + '^' + 
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TAXRATE AS VARCHAR) END + '^' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TOTALDEDUCTED AS VARCHAR) END + '^' AS AUDITREMARKS FROM DEDUCTIONDETAIL DD WITH(NOLOCK)         
		 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
		 INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON DD.BRANCHID = C.BRANCHID
		  LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON C.PARENTBRANCHID = CB.BRANCHID
		  INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND BD.QUARTER = DD.QUARTER
		  INNER JOIN DEDUCTOR DR WITH(NOLOCK) ON DR.DEDUCTORID = BD.DEDUCTORID
		  INNER JOIN USERMASTER U WITH(NOLOCK) ON U.USERID = @USERID
		  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID          
		 INNER JOIN DEDUCTIONDETAILAUDIT DA WITH(NOLOCK) ON DD.DEDUCTIONID = DA.RECORDID          
		 WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DA.TRANSSTATUS = 2          
		 UNION          
		 SELECT RECORDID, 1 AS USERID, 3 AS AUDITTYPE,5 AS TRANSSTATUS,@AUDITDATE AS AUDITDATE, CAST(C.BRANCHCODE AS VARCHAR) + '^' + CAST(DR.TAN AS VARCHAR) + '^'+ CAST(CB.BRANCHNAME AS VARCHAR)+'^'+ CASE WHEN @AUDITTYPE = 1 THEN 'Addition' WHEN @AUDITTYPE = 2 THEN 'Modification' ELSE 'Deletion' END +'^' + CONVERT(VARCHAR, @AUDITDATE, 103) +'^' +               
      CAST(U.USERNAME AS VARCHAR) + '^'+ CAST(DD.SERIALNO AS VARCHAR) + '^'+ CAST(ISNULL(DD.ADDITIONALFIELD1,'') AS VARCHAR) + '^' + CAST(D.NAME AS VARCHAR) + '^'+ CAST(D.PAN AS VARCHAR) + '^' + CASE WHEN DD.FORMID = 1 THEN 'Form24' WHEN DD.FORMID = 2 THEN 'Form26' ELSE 'Form27' END + '^' + CAST(TS.SECTIONNAME AS VARCHAR) + '^' +
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(TS.SECTIONNAME AS VARCHAR) END + '^' + CAST(DD.PAYMENTMADE AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.PAYMENTMADE AS VARCHAR) END + '^' + CAST(DD.TAXRATE AS VARCHAR) + '^' + 
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TAXRATE AS VARCHAR) END + '^' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TOTALDEDUCTED AS VARCHAR) END + '^' AS AUDITREMARKS FROM DEDUCTIONDETAIL DD WITH(NOLOCK)         
		 INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
		 INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON DD.BRANCHID = C.BRANCHID
		  LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON C.PARENTBRANCHID = CB.BRANCHID
		  INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND BD.QUARTER = DD.QUARTER
		  INNER JOIN DEDUCTOR DR WITH(NOLOCK) ON DR.DEDUCTORID = BD.DEDUCTORID
		  INNER JOIN USERMASTER U WITH(NOLOCK) ON U.USERID = @USERID
		  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID          
		 INNER JOIN DEDUCTIONDETAILAUDIT DA WITH(NOLOCK) ON DD.DEDUCTIONID = DA.RECORDID          
		 WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER
		 GROUP BY DA.RECORDID, DD.BRANCHID, DD.FORMID, DD.QUARTER, NAME, D.PAN, PAYMENTMADE, PAYMENTDATE, TOTALDEDUCTED, DEDUCTEDDATE, SECTIONNAME,ENTRYTYPE,
					 C.BRANCHCODE,DR.TAN,CB.BRANCHNAME,U.USERNAME,DD.SERIALNO,DD.ADDITIONALFIELD1,DD.TAXRATE         
		 HAVING (COUNT(DA.RECORDID) = 1 AND ENTRYTYPE <> 4)
	    SELECT MAX(AUDITID)AUDITID, RECORDID INTO #TEMPAUDIT FROM DEDUCTIONDETAILAUDIT DA WITH(NOLOCK)          
		WHERE RECORDID = @DEDUCTIONID
		GROUP BY RECORDID     
		 UPDATE DEDUCTIONDETAIL SET AUDITID = DA.AUDITID          
		 FROM DEDUCTIONDETAIL DD          
		 INNER JOIN #TEMPAUDIT DA ON DD.DEDUCTIONID = DA.RECORDID          
		 WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER          
		 UPDATE DEDUCTIONDETAIL SET TRANSSTATUS = DA.TRANSSTATUS          
		 FROM DEDUCTIONDETAIL DD 
		 INNER JOIN              
		 DEDUCTIONDETAILAUDIT DA ON DD.AUDITID = DA.AUDITID          
		 WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER          
   END          
    ELSE           
   BEGIN       
      INSERT INTO DEDUCTIONDETAILAUDIT(RECORDID, USERID, AUDITTYPE,TRANSSTATUS, AUDITDATE, AUDITREMARKS)           
      SELECT DEDUCTIONID, 1 AS USERID, 3 AS AUDITTYPE,5 AS TRANSSTATUS,@AUDITDATE AS AUDITDATE, CAST(C.BRANCHCODE AS VARCHAR) + '^' + CAST(DR.TAN AS VARCHAR) + '^'+ CAST(CB.BRANCHNAME AS VARCHAR)+'^'+ CASE WHEN @AUDITTYPE = 1 THEN 'Addition' WHEN @AUDITTYPE = 2 THEN 'Modification' ELSE 'Deletion' END +'^' + CONVERT(VARCHAR, @AUDITDATE, 103) +'^' +               
      CAST(U.USERNAME AS VARCHAR) + '^'+ CAST(DD.SERIALNO AS VARCHAR) + '^'+ CAST(ISNULL(DD.ADDITIONALFIELD1,'') AS VARCHAR) + '^' + CAST(D.NAME AS VARCHAR) + '^'+ CAST(D.PAN AS VARCHAR) + '^' + CASE WHEN DD.FORMID = 1 THEN 'Form24' WHEN DD.FORMID = 2 THEN 'Form26' ELSE 'Form27' END + '^' + CAST(TS.SECTIONNAME AS VARCHAR) + '^' +
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(TS.SECTIONNAME AS VARCHAR) END + '^' + CAST(DD.PAYMENTMADE AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.PAYMENTMADE AS VARCHAR) END + '^' + CAST(DD.TAXRATE AS VARCHAR) + '^' + 
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TAXRATE AS VARCHAR) END + '^' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TOTALDEDUCTED AS VARCHAR) END + '^' AS AUDITREMARKS FROM DEDUCTIONDETAIL DD WITH(NOLOCK)          
      INNER JOIN DEDUCTEE D WITH(NOLOCK)  ON D.DEDUCTEEID = DD.DEDUCTEEID
      INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON DD.BRANCHID = C.BRANCHID
      LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON C.PARENTBRANCHID = CB.BRANCHID
      INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND BD.QUARTER = DD.QUARTER
      INNER JOIN DEDUCTOR DR WITH(NOLOCK) ON DR.DEDUCTORID = BD.DEDUCTORID
      INNER JOIN USERMASTER U WITH(NOLOCK) ON U.USERID = @USERID
	  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID          
      WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND DD.QUARTER = @QUARTER AND DD.TRANSSTATUS = 4       
	  SELECT MAX(AUDITID)AUDITID, RECORDID INTO #TEMPAUDIT1 FROM DEDUCTIONDETAILAUDIT DA WITH(NOLOCK)          
		WHERE RECORDID = @DEDUCTIONID
		GROUP BY RECORDID     
      UPDATE DEDUCTIONDETAIL SET AUDITID = DA.AUDITID          
      FROM DEDUCTIONDETAIL DD           
      INNER JOIN #TEMPAUDIT1 DA ON DD.DEDUCTIONID = DA.RECORDID          
      WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER          
      UPDATE DEDUCTIONDETAIL SET TRANSSTATUS = DA.TRANSSTATUS    
      FROM DEDUCTIONDETAIL DD          
      INNER JOIN              
      DEDUCTIONDETAILAUDIT DA ON DD.AUDITID = DA.AUDITID          
      WHERE DD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DD.TRANSSTATUS = 4          
   END          
    END              
   SELECT @AUDITID;          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEDUCTIONCHALLANDETAILAUDIT24')
DROP PROCEDURE USP_TDS_SAVEDEDUCTIONCHALLANDETAILAUDIT24
GO
CREATE PROC USP_TDS_SAVEDEDUCTIONCHALLANDETAILAUDIT24
	@BRANCHCODES VARCHAR(MAX),  
	@USERID INT,  
	@MONTH TINYINT  
AS  
BEGIN  
		SELECT * INTO #BRANCHES FROM UDF_TDS_SPLITSTRING(@BRANCHCODES, ',');
		INSERT INTO DEDUCTIONDETAILAUDIT  	 
		SELECT DD.DEDUCTIONID,@USERID,1,2,GETDATE(),CAST(CB.BRANCHCODE AS VARCHAR) + '^' + CAST(DR.TAN AS VARCHAR) + '^'+ CAST(C.BRANCHNAME AS VARCHAR)+'^'+ 'Addition' +'^' + CONVERT(VARCHAR, GETDATE(), 103) +'^' +               
			CAST(U.USERNAME AS VARCHAR) + '^'+ CAST(DD.SERIALNO AS VARCHAR) + '^'+ CAST(ISNULL(DD.ADDITIONALFIELD1,'') AS VARCHAR) + '^' + CAST(D.NAME AS VARCHAR) + '^'+ CAST(D.PAN AS VARCHAR) + '^' + CASE WHEN DD.FORMID = 1 THEN 'Form24' WHEN DD.FORMID = 2 THEN 'Form26' ELSE 'Form27' END + '^' + 
			CAST(TS.SECTIONNAME AS VARCHAR) + '^' + CAST(TS.SECTIONNAME AS VARCHAR) + '^' + CAST(DD.PAYMENTMADE AS VARCHAR) + '^'+ CAST(DD.PAYMENTMADE AS VARCHAR) + '^' +  CAST(DD.TAXRATE AS VARCHAR) + '^' +  CAST(DD.TAXRATE AS VARCHAR) + '^' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '^' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '^',''   
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) 
				ON DD.BRANCHID = CB.BRANCHID
			INNER JOIN #BRANCHES B 
				ON CB.BRANCHCODE = B.DATA 
			INNER JOIN DEDUCTEE D  WITH(NOLOCK) 
				ON D.DEDUCTEEID =DD.DEDUCTEEID  
			INNER JOIN EMPLOYEE NE  WITH(NOLOCK) 
				ON NE.DEDUCTEEID=D.DEDUCTEEID
			LEFT JOIN COMPANYBRANCH C WITH(NOLOCK) 
				ON CB.PARENTBRANCHID = C.BRANCHID
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) 
				ON DD.BRANCHID = BD.BRANCHID AND BD.QUARTER = DD.QUARTER
			INNER JOIN DEDUCTOR DR WITH(NOLOCK) 
				ON DR.DEDUCTORID = BD.DEDUCTORID
			INNER JOIN USERMASTER U WITH(NOLOCK) 
				ON U.USERID = @USERID
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) 
				ON TS.SECTIONID = DD.SECTIONID  
		WHERE MONTH(DD.PAYMENTDATE)=@MONTH 
			AND DD.ENTRYTYPE=4 
			AND DD.AUDITID IS NULL  
		SELECT RECORDID,DA.AUDITID AUDITID INTO #AUDIT FROM DEDUCTIONDETAIL DD WITH(NOLOCK)    
			INNER JOIN DEDUCTIONDETAILAUDIT DA WITH(NOLOCK) 
				ON DA.RECORDID = DD.DEDUCTIONID   
		WHERE DD.AUDITID IS NULL 
			AND DD.ENTRYTYPE=4
		UPDATE DEDUCTIONDETAIL SET AUDITID = DA.AUDITID  
			FROM DEDUCTIONDETAIL DD   
			INNER JOIN #AUDIT DA 
				ON DA.RECORDID = DD.DEDUCTIONID   
		WHERE DD.AUDITID IS NULL AND DD.ENTRYTYPE=4     
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveDeductionChallanDetailAuditF008')
DROP PROCEDURE USP_TDS_SaveDeductionChallanDetailAuditF008
GO
CREATE PROC [dbo].[USP_TDS_SaveDeductionChallanDetailAuditF008] 
	@BRANCHCODES VARCHAR(MAX),  
	@USERID INT,  
	@MONTH TINYINT  
AS  
BEGIN  
	SELECT * INTO #BRANCHES FROM UDF_TDS_SPLITSTRING(@BRANCHCODES, ',');
	INSERT INTO DEDUCTIONDETAILAUDIT  	 
	 SELECT DD.DEDUCTIONID,@USERID,1,2,GETDATE(),CAST(CB.BRANCHCODE AS VARCHAR) + '^' + CAST(DR.TAN AS VARCHAR) + '^'+ CAST(C.BRANCHNAME AS VARCHAR)+'^'+ 'Addition' +'^' + CONVERT(VARCHAR, GETDATE(), 103) +'^' +               
      CAST(U.USERNAME AS VARCHAR) + '^'+ CAST(DD.SERIALNO AS VARCHAR) + '^'+ CAST(ISNULL(DD.ADDITIONALFIELD1,'') AS VARCHAR) + '^' + CAST(D.NAME AS VARCHAR) + '^'+ CAST(D.PAN AS VARCHAR) + '^' + CASE WHEN DD.FORMID = 1 THEN 'Form24' WHEN DD.FORMID = 2 THEN 'Form26' ELSE 'Form27' END + '^' + 
      CAST(TS.SECTIONNAME AS VARCHAR) + '^' + CAST(TS.SECTIONNAME AS VARCHAR) + '^' + CAST(DD.PAYMENTMADE AS VARCHAR) + '^'+ CAST(DD.PAYMENTMADE AS VARCHAR) + '^' +  CAST(DD.TAXRATE AS VARCHAR) + '^' +  CAST(DD.TAXRATE AS VARCHAR) + '^' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '^' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '^',''   
	 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON DD.BRANCHID = CB.BRANCHID
	 INNER JOIN #BRANCHES B ON CB.BRANCHCODE = B.DATA 
	 INNER JOIN DEDUCTEE D  WITH(NOLOCK) ON D.DEDUCTEEID =DD.DEDUCTEEID  
	 INNER JOIN NONEMPLOYEE NE  WITH(NOLOCK) ON NE.DEDUCTEEID=D.DEDUCTEEID
	 LEFT JOIN COMPANYBRANCH C WITH(NOLOCK) ON CB.PARENTBRANCHID = C.BRANCHID
      INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND BD.QUARTER = DD.QUARTER
      INNER JOIN DEDUCTOR DR WITH(NOLOCK) ON DR.DEDUCTORID = BD.DEDUCTORID
      INNER JOIN USERMASTER U WITH(NOLOCK) ON U.USERID = @USERID
	  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID  
	 WHERE MONTH(DD.PAYMENTDATE)=@MONTH AND DD.ENTRYTYPE=4 AND DD.AUDITID IS NULL  
	 SELECT RECORDID,DA.AUDITID AUDITID INTO #AUDIT FROM DEDUCTIONDETAIL DD WITH(NOLOCK)    
	 INNER JOIN DEDUCTIONDETAILAUDIT DA WITH(NOLOCK) ON DA.RECORDID = DD.DEDUCTIONID   
	 WHERE DD.AUDITID IS NULL AND DD.ENTRYTYPE=4
	 UPDATE DEDUCTIONDETAIL SET AUDITID = DA.AUDITID  
	 FROM DEDUCTIONDETAIL DD   
	 INNER JOIN #AUDIT DA ON DA.RECORDID = DD.DEDUCTIONID   
	 WHERE DD.AUDITID IS NULL AND DD.ENTRYTYPE=4     
	 --INSERT INTO CHALLANDETAILAUDIT(RECORDID,USERID,AUDITTYPE,AUDITDATE,AUDITREMARKS)  
	 --SELECT DISTINCT  CD.CHALLANID ,@USERID,1,GETDATE(),CAST(CD.BRANCHID AS VARCHAR)+'^'+CAST(DD.FORMID AS VARCHAR)+'^'+  
	 --  CAST(DD.QUARTER AS VARCHAR)+'^'+CAST(CD.CHALLANTOTAL AS VARCHAR)+'^'+CAST(CD.SECTIONID AS VARCHAR)+'^'+  
	 --  CAST(CD.BANKCHALLANNO AS VARCHAR)+'^'+CAST(CONVERT(VARCHAR(20), CD.CHALLANPAIDDATE, 103) AS VARCHAR)+'^'+  
	 --  CAST(CD.TRNVOUCHERNO AS VARCHAR)+'^'  
		--FROM CHALLANDETAIL CD  WITH(NOLOCK)
	 --INNER JOIN DEDCHALINK DL  WITH(NOLOCK) ON DL.CHALLANID=CD.CHALLANID AND DL.BRANCHID=CD.BRANCHID 
	 --INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CD.BRANCHID = CB.BRANCHID
	 --INNER JOIN #BRANCHES B ON CB.BRANCHCODE = B.DATA   
	 --INNER JOIN DEDUCTIONDETAIL DD  WITH(NOLOCK) ON DD.DEDUCTIONID =DL.DEDUCTIONID AND DD.BRANCHID= DL.BRANCHID  
	 --LEFT JOIN CHALLANDETAILAUDIT CA  WITH(NOLOCK) ON CA.RECORDID=CD.CHALLANID  
	 --WHERE CA.RECORDID IS NULL  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEDUCTIONCHALLANLINK')
DROP PROCEDURE USP_TDS_SAVEDEDUCTIONCHALLANLINK
GO
CREATE PROCEDURE [dbo].[USP_TDS_SAVEDEDUCTIONCHALLANLINK]
	@DEDCHALINKID	INT,
	@DEDUCTIONID	VARCHAR(MAX),
	@CHALLANID		INT,
	@BRANCHID		INT
AS
	BEGIN
		SELECT * INTO #DEDIDLIST FROM UDF_TDS_SPLITSTRING(@DEDUCTIONID,',');
		IF(@DEDCHALINKID= -1)
			BEGIN
				INSERT INTO DEDCHALINK(DEDUCTIONID,CHALLANID,BRANCHID)
				SELECT DATA, @CHALLANID, @BRANCHID FROM #DEDIDLIST
				SET			@DEDCHALINKID=SCOPE_IDENTITY();
			END
		ELSE
			BEGIN
				UPDATE	DEDCHALINK SET DEDUCTIONID=@DEDUCTIONID,CHALLANID=@CHALLANID
				WHERE	DEDCHALINKID=@DEDCHALINKID AND BRANCHID=@BRANCHID;
			END
	END
	SELECT @DEDCHALINKID;
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEDUCTIONDETAILFORMAT3')
DROP PROCEDURE USP_TDS_SAVEDEDUCTIONDETAILFORMAT3
GO
CREATE PROCEDURE [USP_TDS_SAVEDEDUCTIONDETAILFORMAT3]      
 @DEDUCTIONID INT,      
 @QUARTER INT,      
 @BRANCHID INT,      
 @FORMID INT,      
 @DEDUCTEEID INT,      
 @ERETURNID INT,      
 @MODE CHAR(1),      
 @INCOMETAX NUMERIC(14,2),      
 @SURCHARGE NUMERIC(14,2),      
 @EDUCATIONCESS NUMERIC(14,2),      
 @TOTALDEDUCTED NUMERIC(14,2),      
 @PAYMENTMADE NUMERIC(14,2),      
 @PAYMENTDATE SMALLDATETIME,      
 @DEDUCTEDDATE SMALLDATETIME=NULL,      
 @SECTIONID INT,      
 @INCOMETAXRATE NUMERIC(6,3) ,      
 @SURCHARGERATE NUMERIC(6,3),      
 @EDUCATIONCESSRATE NUMERIC(6,3),      
 @TAXRATE NUMERIC(7,4),      
 @ISTAXINFOEDITABLE BIT,      
 @NONDEDREASON TINYINT,      
 @ISBOOKENTRY BIT,      
 @ISGROSSINGUP BIT,      
 @UTN CHAR(16),      
 @ISPANVALIDBYITD BIT,      
 @ORGINCOMETAX NUMERIC(14,2),      
 @ORGSURCHARGE NUMERIC(14,2),      
 @ORGEDUCATIONCESS NUMERIC(14,2),      
 @ORGTOTALDEDUCTED NUMERIC(14,2),      
 @ORGPAYMENTMADE NUMERIC(14,2),      
 @PARTPAYMENTID INT,      
 @ISORIGINALENTRY TINYINT,    
 @COUNTRYID INT,  
 @CERTNO VARCHAR(20)      
AS      
 BEGIN      
     DECLARE @SERIALNO INT;      
  SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0),@PARTPAYMENTID=ISNULL(MAX(PARTPAYMENTID),0) FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;      
  INSERT INTO DEDUCTIONDETAIL([QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,      
         SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,SERIALNO,      
         ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID,COUNTRYID,CERTNO)      
       VALUES (@QUARTER,@BRANCHID,@FORMID,@DEDUCTEEID,@ERETURNID,@MODE,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@TOTALDEDUCTED,@PAYMENTMADE,@PAYMENTDATE,@DEDUCTEDDATE,      
         @SECTIONID,@INCOMETAXRATE,@SURCHARGERATE,@EDUCATIONCESSRATE,@TAXRATE,@ISTAXINFOEDITABLE,@NONDEDREASON,      
         @ISBOOKENTRY,@ISGROSSINGUP,@UTN,@ISPANVALIDBYITD,@SERIALNO + 1,      
         @ORGINCOMETAX,@ORGSURCHARGE,@ORGEDUCATIONCESS,@ORGTOTALDEDUCTED,@ORGPAYMENTMADE,@PARTPAYMENTID + 1,@COUNTRYID,@CERTNO)      
  SET @DEDUCTIONID = SCOPE_IDENTITY();      
  SELECT  @DEDUCTIONID;      
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEDUCTIONDETAILFORMAT4')
DROP PROCEDURE USP_TDS_SAVEDEDUCTIONDETAILFORMAT4
GO
CREATE PROCEDURE [USP_TDS_SAVEDEDUCTIONDETAILFORMAT4]
 @DEDUCTIONID INT,
 @QUARTER INT,
 @BRANCHID INT,
 @FORMID INT,
 @DEDUCTEEID INT,
 @ERETURNID INT,
 @MODE CHAR(1),
 @INCOMETAX NUMERIC(14,2),
 @SURCHARGE NUMERIC(14,2),
 @EDUCATIONCESS NUMERIC(14,2),
 @TOTALDEDUCTED NUMERIC(14,2),
 @PAYMENTMADE NUMERIC(14,2),
 @PAYMENTDATE SMALLDATETIME,
 @DEDUCTEDDATE SMALLDATETIME=NULL,
 @SECTIONID INT,
 @INCOMETAXRATE NUMERIC(6,3) ,
 @SURCHARGERATE NUMERIC(6,3),
 @EDUCATIONCESSRATE NUMERIC(6,3),
 @TAXRATE NUMERIC(7,4),
 @ISTAXINFOEDITABLE BIT,
 @NONDEDREASON TINYINT,
 @ISBOOKENTRY BIT,
 @ISGROSSINGUP BIT,
 @UTN CHAR(16),
 @ISPANVALIDBYITD BIT,
 @ORGINCOMETAX NUMERIC(14,2),
 @ORGSURCHARGE NUMERIC(14,2),
 @ORGEDUCATIONCESS NUMERIC(14,2),
 @ORGTOTALDEDUCTED NUMERIC(14,2),
 @ORGPAYMENTMADE NUMERIC(14,2),
 @PARTPAYMENTID INT,
 @ISORIGINALENTRY TINYINT
AS
 BEGIN
     DECLARE @SERIALNO INT;
  SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0),@PARTPAYMENTID=ISNULL(MAX(PARTPAYMENTID),0) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
  INSERT INTO DEDUCTIONDETAIL([QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,
         SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,SERIALNO,
         ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID)
       VALUES (@QUARTER,@BRANCHID,@FORMID,@DEDUCTEEID,@ERETURNID,@MODE,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@TOTALDEDUCTED,@PAYMENTMADE,@PAYMENTDATE,@DEDUCTEDDATE,
         @SECTIONID,@INCOMETAXRATE,@SURCHARGERATE,@EDUCATIONCESSRATE,@TAXRATE,@ISTAXINFOEDITABLE,@NONDEDREASON,
         @ISBOOKENTRY,@ISGROSSINGUP,@UTN,@ISPANVALIDBYITD,@SERIALNO + 1,
         @ORGINCOMETAX,@ORGSURCHARGE,@ORGEDUCATIONCESS,@ORGTOTALDEDUCTED,@ORGPAYMENTMADE,@PARTPAYMENTID + 1)
  SET @DEDUCTIONID = SCOPE_IDENTITY();
  SELECT  @DEDUCTIONID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveDeductionDetails')
DROP PROCEDURE USP_TDS_SaveDeductionDetails
GO
CREATE PROCEDURE USP_TDS_SaveDeductionDetails
	@DEDUCTIONID INT,                                        
	@QUARTER INT,                                        
	@BRANCHID INT,                                      
	@FORMID INT,                                      
	@DEDUCTEEID INT,        
	@ERETURNID INT,                                      
	@MODE CHAR(1),        
	@INCOMETAX NUMERIC(13,2),                                        
	@SURCHARGE NUMERIC(13,2),        
	@EDUCATIONCESS NUMERIC(13,2),        
	@TOTALDEDUCTED NUMERIC(14,2),        
	@PAYMENTMADE NUMERIC(13,2),        
	@PAYMENTDATE SMALLDATETIME,        
	@DEDUCTEDDATE SMALLDATETIME=NULL,
	@SECTIONID INT,        
	@INCOMETAXRATE NUMERIC(6,3),        
	@SURCHARGERATE NUMERIC(6,3),
	@EDUCATIONCESSRATE NUMERIC(6,3),
	@TAXRATE NUMERIC(7,4),                                        
	@ISTAXINFOEDITABLE BIT,
	@NONDEDREASON TINYINT,                                      
	@ISBOOKENTRY BIT,                                        
	@ISGROSSINGUP BIT,                                        
	@UTN CHAR(16),                                        
	@ISPANVALIDBYITD BIT,                                        
	@ORGINCOMETAX NUMERIC(13,2),                                        
	@ORGSURCHARGE NUMERIC(13,2),                                        
	@ORGEDUCATIONCESS NUMERIC(13,2),                                        
	@ORGTOTALDEDUCTED NUMERIC(14,2),                                        
	@ORGPAYMENTMADE NUMERIC(14,2),
	@PARTPAYMENTID INT,                                        
	@ISORIGINALENTRY TINYINT,                                        
	@ENTRYTYPE TINYINT ,                                      
	@BGLCODEID INT = NULL ,                                      
	@REPORTPAYMENTID INT = NULL,                                    
	@ISINCLUDEDDEDUCTION BIT = 0,                    
	@EXCLUDEST NUMERIC(13,2)=  NULL ,                          
	@SERVICETAX NUMERIC(13,2)=  NULL,
	@SBCESS NUMERIC(13,2)= NULL,
	@KKCESS NUMERIC(13,2)= NULL,              
	@VALUEOFPURCHASE NUMERIC(13,2) = NULL,              
	@CERTDATE SMALLDATETIME = NULL,      
	@ORDERID INT = NULL,    
	@INCLUDEST BIT = NULL,  
	@ADDLAMOUNT1 NUMERIC(13,2) = NULL,    
	@ADDLAMOUNT2 NUMERIC(13,2) = NULL,  
	@INVOICENO VARCHAR(20) = NULL,  
	@INVOICEDATE SMALLDATETIME = NULL,
	@CERTNO VARCHAR(20) = NULL,
	@TDSRATEASPER CHAR(1) = NULL,
	@ACKNO VARCHAR(15) = NULL,
	@REMITTANCEID INT = NULL,
	@COUNTRYID INT = NULL,
	@CERTDETAILID INT = NULL,
	@FINYEAR INT = 2014,
	@ISTHRESHOLDCROSSED BIT,
	@TRANSSTATUS INT = NULL,
	@ADDITIONALFIELD1 VARCHAR(25) = NULL,
	@EMAILDED VARCHAR(75) = NULL,
	@CONTACTNODED VARCHAR(15) = NULL,
	@ADDRESSDED VARCHAR(150) = NULL,                  
	@IDENTNUMDED VARCHAR(25) = NULL,
	@RTBRANCHID INT = NULL,
	@REMARKS1 VARCHAR(10) = NULL,
	@REMARKS3 VARCHAR(10) = NULL 
	AS
	BEGIN                  
		DECLARE @SERIALNO INT, @QUERY NVARCHAR(MAX), @DEDUCTEEBRANCH INT;     
		DECLARE @IT NUMERIC(13,2),@SC NUMERIC(13,2),@EC NUMERIC(13,2),@TD NUMERIC(14,2),@PM NUMERIC(14,2);   
		DECLARE @VALIDFROM SMALLDATETIME, @VALIDTO SMALLDATETIME, @CONTAXRATE NUMERIC(13,2);
		CREATE TABLE #SECTIONS (SECTIONID INT)
		IF(@SECTIONID = 23 OR @SECTIONID = 24)
			BEGIN	
				INSERT INTO #SECTIONS				
				SELECT 23 AS SECTIONID
				UNION 
				SELECT 24 AS SECTIONID			
			END 
		ELSE
			BEGIN 
				INSERT INTO #SECTIONS
				SELECT @SECTIONID
			END
		SET @DEDUCTEEBRANCH = NULL;
		SELECT @DEDUCTEEBRANCH = BRANCHID FROM REPORTPAYMENT WITH(NOLOCK) WHERE ID = @REPORTPAYMENTID   
		SELECT @VALIDFROM = VALIDFROM, @VALIDTO = VALIDTO 
		FROM CERTDETAIL C WITH(NOLOCK)				
		WHERE DEDUCTEEID = @DEDUCTEEID 
			AND SECTIONID = CASE WHEN @SECTIONID IN (23,24) THEN 15 ELSE @SECTIONID END     
		SELECT @CONTAXRATE = TDSRATE 
		FROM CERTDETAIL WITH(NOLOCK)
		WHERE DEDUCTEEID = @DEDUCTEEID 
			AND SECTIONID = CASE WHEN @SECTIONID IN (23,24) THEN 15 ELSE @SECTIONID END
		SET @CONTAXRATE = ISNULL(@CONTAXRATE,-1)
		SET @VALIDFROM = COALESCE(@VALIDFROM, CAST(CAST(@FINYEAR AS VARCHAR)+'-04-01' AS SMALLDATETIME))
		SET @VALIDTO =  COALESCE(@VALIDTO, CAST(CAST(@FINYEAR + 1 AS VARCHAR)+'-03-31' AS SMALLDATETIME))
		IF(@ORGINCOMETAX > 0 AND @DEDUCTEDDATE IS NULL)
			BEGIN 
				SET @DEDUCTEDDATE = @PAYMENTDATE;
			END 
		IF((SELECT COUNT(ID) FROM REPORTPAYMENT WITH(NOLOCK) WHERE ID = @REPORTPAYMENTID) = 0 AND  ISNULL(@REPORTPAYMENTID,0) > 0)
			BEGIN 
				SET @DEDUCTIONID = -2 			 
			END 
		ELSE
			BEGIN 
			/*If deduction is getting saved from Main screen of deduction*/                       
				IF(@ISORIGINALENTRY = 1)
					BEGIN 
						IF(@PARTPAYMENTID = -1)
							BEGIN 
								--IF NOT EXISTS(SELECT REPORTPAYMENTID FROM DEDUCTIONDETAIL WITH(UPDLOCK,SERIALIZABLE) WHERE REPORTPAYMENTID = @REPORTPAYMENTID)
									--BEGIN
								SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0),@PARTPAYMENTID=ISNULL(MAX(PARTPAYMENTID),0) 
								FROM DEDUCTIONDETAIL WITH(NOLOCK)
								WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;  
								INSERT INTO DEDUCTIONDETAIL([QUARTER], BRANCHID, FORMID, DEDUCTEEID, ERETURNID, MODE, INCOMETAX,
															SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, PAYMENTMADE, PAYMENTDATE,
															DEDUCTEDDATE, SECTIONID, INCOMETAXRATE, SURCHARGERATE, EDUCATIONCESSRATE,
															TAXRATE, ISTAXINFOEDITABLE, NONDEDREASON, ISBOOKENTRY, ISGROSSINGUP, UTN, 
															ISPANVALIDBYITD, SERIALNO, ORGINCOMETAX, ORGSURCHARGE, ORGEDUCATIONCESS, 
															ORGTOTALDEDUCTED, ORGPAYMENTMADE, ADDITIONALFIELD1, PARTPAYMENTID, ENTRYTYPE, 
															BGLCODEID, REPORTPAYMENTID, RPAMOUNT1, RPAMOUNT2, RPSBCESS, RPKKCESS, 
															TOTALPURCHASEVALUE, CERTIFICATEDATE, CREATEDON, ORDERID,
															INCLUDEST, ADDLAMOUNT1, ADDLAMOUNT2, INVOICENO, INVOICEDATE, CERTNO, 
															TDSRATEASPER, ACKNO, REMITTANCEID, COUNTRYID, DEDUCTEEBRANCH, CERTDETAILID, 
															TRANSSTATUS, EMAILDED, CONTACTNODED, ADDRESSDED, IDENTNUMDED, RTBRANCHID, 
															REMARKS1, REMARKS3) 
													VALUES (@QUARTER, @BRANCHID, @FORMID, @DEDUCTEEID, @ERETURNID, @MODE, @INCOMETAX, 
															@SURCHARGE, @EDUCATIONCESS, @TOTALDEDUCTED, @PAYMENTMADE, @PAYMENTDATE, 
															@DEDUCTEDDATE, @SECTIONID, @INCOMETAXRATE, @SURCHARGERATE, @EDUCATIONCESSRATE, 
															@TAXRATE, @ISTAXINFOEDITABLE, @NONDEDREASON, @ISBOOKENTRY, @ISGROSSINGUP, @UTN,    
															@ISPANVALIDBYITD, @SERIALNO + 1, @ORGINCOMETAX, @ORGSURCHARGE, @ORGEDUCATIONCESS, 
															@ORGTOTALDEDUCTED, @ORGPAYMENTMADE, @ADDITIONALFIELD1, @PARTPAYMENTID + 1, @ENTRYTYPE,     
															@BGLCODEID, @REPORTPAYMENTID, @EXCLUDEST, @SERVICETAX, @SBCESS, @KKCESS, 
															@VALUEOFPURCHASE, @CERTDATE, CONVERT(VARCHAR(30),GETDATE(),109), @ORDERID, 
															@INCLUDEST, @ADDLAMOUNT1, @ADDLAMOUNT2, @INVOICENO, @INVOICEDATE, @CERTNO, 
															@TDSRATEASPER, @ACKNO, @REMITTANCEID, @COUNTRYID, @DEDUCTEEBRANCH, @CERTDETAILID, 
															@TRANSSTATUS, @EMAILDED, @CONTACTNODED, @ADDRESSDED, @IDENTNUMDED, @RTBRANCHID, 
															@REMARKS1, @REMARKS3)
								SET @DEDUCTIONID = SCOPE_IDENTITY();--DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK)
								--WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID
								--END
								--   ELSE
								--   BEGIN
								--   SET @DEDUCTIONID = - 3;
								--   END	
							END 
						ELSE
							BEGIN
								/* Check for entry in PARTPAYMENTDETAILS based on BRANCHID,FORMID,QUARTER & PARTPAYMENTID */          
								IF EXISTS(SELECT PARTPAYMENTID FROM PARTPAYMENTDETAILS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)                                
									BEGIN 
										SELECT @IT = SUM(INCOMETAX),@SC = SUM(SURCHARGE),
											   @EC = SUM(EDUCATIONCESS),@TD = SUM(TOTALDEDUCTED),
											   @PM = SUM(PAYMENTMADE)                                        
										FROM DEDUCTIONDETAIL WITH(NOLOCK)                                       
										WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
										IF(@IT < @ORGINCOMETAX OR @SC < @ORGSURCHARGE OR @EC < @ORGEDUCATIONCESS OR @TD < @TOTALDEDUCTED)                                        
											BEGIN 
												SET @DEDUCTIONID = -2;   
											END
										ELSE
											BEGIN 
												UPDATE DEDUCTIONDETAIL 
												SET DEDUCTEEID = @DEDUCTEEID, MODE = @MODE, PAYMENTDATE = @PAYMENTDATE,
													DEDUCTEDDATE = @DEDUCTEDDATE, SECTIONID = @SECTIONID, INCOMETAXRATE = @INCOMETAXRATE,
													SURCHARGERATE = @SURCHARGERATE, EDUCATIONCESSRATE = @EDUCATIONCESSRATE,                                        
													TAXRATE = @TAXRATE, ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE, NONDEDREASON = @NONDEDREASON, 
													ISBOOKENTRY = @ISBOOKENTRY, ISGROSSINGUP = @ISGROSSINGUP, UTN = @UTN,
													ISPANVALIDBYITD = @ISPANVALIDBYITD, ORGINCOMETAX = @ORGINCOMETAX, 
													ORGSURCHARGE = @ORGSURCHARGE,ORGEDUCATIONCESS = @ORGEDUCATIONCESS,                                        
													ORGTOTALDEDUCTED = @ORGTOTALDEDUCTED, ORGPAYMENTMADE = @ORGPAYMENTMADE, 
													ADDITIONALFIELD1 = @ADDITIONALFIELD1, BGLCODEID = @BGLCODEID, 
													TOTALPURCHASEVALUE = @VALUEOFPURCHASE, CERTIFICATEDATE = @CERTDATE, 
													ADDLAMOUNT1=@ADDLAMOUNT1, ADDLAMOUNT2=@ADDLAMOUNT2 ,INCLUDEST=@INCLUDEST, 
													INVOICENO = @INVOICENO, INVOICEDATE = @INVOICEDATE, CERTNO = @CERTNO, 
													TDSRATEASPER = @TDSRATEASPER, ACKNO = @ACKNO, REMITTANCEID=@REMITTANCEID,
													COUNTRYID = @COUNTRYID, EMAILDED = @EMAILDED, CONTACTNODED = @CONTACTNODED, 
													ADDRESSDED = @ADDRESSDED, IDENTNUMDED = @IDENTNUMDED,
													REMARKS1 = @REMARKS1, REMARKS3 = @REMARKS3
												WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID 
													AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID; 
												EXEC USP_TDS_UpdatePartPaymentBalance @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID    
											END  
									END 
								ELSE
									BEGIN 
										UPDATE DEDUCTIONDETAIL 
										SET DEDUCTEEID = @DEDUCTEEID, MODE = @MODE, PAYMENTDATE = @PAYMENTDATE,
											PAYMENTMADE = @PAYMENTMADE, INCOMETAX = @INCOMETAX, SURCHARGE = @SURCHARGE,                                        
											EDUCATIONCESS = @EDUCATIONCESS, TOTALDEDUCTED = @TOTALDEDUCTED,
											DEDUCTEDDATE = @DEDUCTEDDATE, SECTIONID = @SECTIONID, INCOMETAXRATE = @INCOMETAXRATE,                                        
											SURCHARGERATE = @SURCHARGERATE, EDUCATIONCESSRATE = @EDUCATIONCESSRATE,
											TAXRATE = @TAXRATE, ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE, NONDEDREASON = @NONDEDREASON,                                        
											ISBOOKENTRY = @ISBOOKENTRY, ISGROSSINGUP = @ISGROSSINGUP, UTN = @UTN,
											ISPANVALIDBYITD = @ISPANVALIDBYITD, ORGINCOMETAX = @ORGINCOMETAX, ORGSURCHARGE = @ORGSURCHARGE,                                
											ORGEDUCATIONCESS = @ORGEDUCATIONCESS, ORGTOTALDEDUCTED = @ORGTOTALDEDUCTED,
											ORGPAYMENTMADE = @ORGPAYMENTMADE, ADDITIONALFIELD1 = @ADDITIONALFIELD1, BGLCODEID = @BGLCODEID,
											TOTALPURCHASEVALUE = @VALUEOFPURCHASE, CERTIFICATEDATE = @CERTDATE, ORDERID = @ORDERID, 
											ADDLAMOUNT1 = @ADDLAMOUNT1, ADDLAMOUNT2 = @ADDLAMOUNT2, INCLUDEST=@INCLUDEST,
											INVOICENO = @INVOICENO, INVOICEDATE = @INVOICEDATE, CERTNO = @CERTNO, TDSRATEASPER = @TDSRATEASPER, 
											ACKNO = @ACKNO, REMITTANCEID=@REMITTANCEID, COUNTRYID = @COUNTRYID, EMAILDED = @EMAILDED, 
											CONTACTNODED = @CONTACTNODED, ADDRESSDED = @ADDRESSDED, IDENTNUMDED = @IDENTNUMDED,
											REMARKS1 = @REMARKS1, REMARKS3 = @REMARKS3                               
										WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
											AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID; 
										SELECT @DEDUCTIONID = DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) 
										WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
											AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID                                        
									END  
							END     
						END
					ELSE
						BEGIN 
							IF(@DEDUCTIONID = -1)                                        
								BEGIN 
									/*                                          
									1. - Get the Top record based on PartPaymentID                                          
									2. - Copy the record with linked incometax,surcharge,educationcess and totaldeducated amount                                          
									3. - Update PartPaymentDetails for updating remaining amount (Calling USP_TDS_UpdatePartPaymentBalance procedure)                                          
									*/      
									SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)+1 
									FROM DEDUCTIONDETAIL WITH(NOLOCK) 
									WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;  
									IF EXISTS(SELECT PARTDETAILID 
											  FROM PARTPAYMENTDETAILS WITH(NOLOCK) 
											  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
												AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)                                        
										BEGIN 
											INSERT INTO DEDUCTIONDETAIL(SERIALNO,[QUARTER], BRANCHID, FORMID, DEDUCTEEID, ERETURNID,
																		MODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, 
																		PAYMENTMADE, PAYMENTDATE, DEDUCTEDDATE, SECTIONID, INCOMETAXRATE,
																		SURCHARGERATE, EDUCATIONCESSRATE, TAXRATE, ISTAXINFOEDITABLE, 
																		NONDEDREASON, ISBOOKENTRY, ISGROSSINGUP, UTN, ISPANVALIDBYITD,                                        
																		ORGINCOMETAX, ORGSURCHARGE, ORGEDUCATIONCESS, ORGTOTALDEDUCTED, 
																		ORGPAYMENTMADE, ADDITIONALFIELD1, PARTPAYMENTID, ENTRYTYPE, BGLCODEID,
																		REPORTPAYMENTID, RPAMOUNT1, RPAMOUNT2, RPSBCESS, RPKKCESS, 
																		TOTALPURCHASEVALUE, CERTIFICATEDATE, ORDERID, INCLUDEST, 
																		ADDLAMOUNT1, ADDLAMOUNT2, INVOICENO, INVOICEDATE, CERTNO,
																		TDSRATEASPER, ACKNO, REMITTANCEID, COUNTRYID, DEDUCTEEBRANCH, 
																		CERTDETAILID, EMAILDED, CONTACTNODED, ADDRESSDED, IDENTNUMDED,
																		RTBRANCHID, REMARKS1, REMARKS3) 
														SELECT TOP 1 @SERIALNO, [QUARTER], BRANCHID, FORMID, DEDUCTEEID, ERETURNID,
																	MODE, @INCOMETAX, @SURCHARGE, @EDUCATIONCESS, @TOTALDEDUCTED,
																	@PAYMENTMADE, PAYMENTDATE, DEDUCTEDDATE, SECTIONID, INCOMETAXRATE,
																	SURCHARGERATE, EDUCATIONCESSRATE, TAXRATE, ISTAXINFOEDITABLE, 
																	NONDEDREASON, ISBOOKENTRY, ISGROSSINGUP, UTN, ISPANVALIDBYITD,
																	ORGINCOMETAX, ORGSURCHARGE, ORGEDUCATIONCESS, ORGTOTALDEDUCTED, 
																	ORGPAYMENTMADE, ADDITIONALFIELD1, PARTPAYMENTID, ENTRYTYPE, BGLCODEID, 
																	REPORTPAYMENTID, @EXCLUDEST, @SERVICETAX, @SBCESS, @KKCESS, 
																	@VALUEOFPURCHASE, @CERTDATE, @ORDERID, @INCLUDEST, 
																	@ADDLAMOUNT1, @ADDLAMOUNT2, @INVOICENO, @INVOICEDATE, @CERTNO, 
																	@TDSRATEASPER, @ACKNO, @REMITTANCEID,@COUNTRYID, @DEDUCTEEBRANCH, 
																	@CERTDETAILID, @EMAILDED, @CONTACTNODED, @ADDRESSDED, @IDENTNUMDED, 
																	@RTBRANCHID, @REMARKS1, @REMARKS3                               
														 FROM DEDUCTIONDETAIL WITH(NOLOCK)     
														 WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID 
															AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;     
											SET @DEDUCTIONID = SCOPE_IDENTITY();		
										END
									ELSE
										BEGIN 
											/*For first partpayment records*/    
											UPDATE DEDUCTIONDETAIL 
											SET INCOMETAX = @INCOMETAX, SURCHARGE = @SURCHARGE,
												EDUCATIONCESS = @EDUCATIONCESS, TOTALDEDUCTED = @TOTALDEDUCTED, 
												PAYMENTMADE = @PAYMENTMADE, TOTALPURCHASEVALUE = @VALUEOFPURCHASE, 
												ORDERID = @ORDERID                                
											WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID 
												AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
											SELECT @DEDUCTIONID = DEDUCTIONID 
											FROM  DEDUCTIONDETAIL  WITH(NOLOCK) 
											WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID 
												AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;                  
										END 
									EXEC USP_TDS_UpdatePartPaymentBalance @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID;    
								END
							ELSE
								BEGIN 
									UPDATE DEDUCTIONDETAIL 
									SET INCOMETAX = @INCOMETAX, SURCHARGE = @SURCHARGE,
										EDUCATIONCESS = @EDUCATIONCESS, TOTALDEDUCTED = @TOTALDEDUCTED,
										PAYMENTMADE = @PAYMENTMADE, TOTALPURCHASEVALUE = @VALUEOFPURCHASE, 
										ORDERID = @ORDERID                                     
									WHERE  DEDUCTIONID = @DEDUCTIONID 
									/*Updating Balance in PARTPAYMENTDETAILS table*/                                              
									EXEC USP_TDS_UpdatePartPaymentBalance @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID     
								END   
						END   
				--IF(@ISINCLUDEDDEDUCTION = 1 AND @TOTALDEDUCTED > 0)
				IF((@ISINCLUDEDDEDUCTION = 1 AND  @TOTALDEDUCTED > 0) OR (@CONTAXRATE = 0 AND @ISINCLUDEDDEDUCTION = 1 AND  @TOTALDEDUCTED = 0))
					BEGIN
						SET @QUERY ='UPDATE DEDUCTIONDETAIL 
									SET REFDEDUCTIONID = ' + CAST(@DEDUCTIONID AS VARCHAR) + '    
									FROM DEDUCTIONDETAIL DD 
										INNER JOIN #SECTIONS S ON S.SECTIONID = DD.SECTIONID                 
									WHERE DEDUCTEEID = '+ CAST(@DEDUCTEEID AS VARCHAR) + ' AND 
										((TOTALDEDUCTED = 0 AND (NONDEDREASON = 5 OR NONDEDREASON = 3))) AND            
										REFDEDUCTIONID IS NULL AND DEDUCTIONID <> '+ CAST(@DEDUCTIONID AS VARCHAR) 
											+ ' AND PAYMENTDATE BETWEEN ''' + CAST(@VALIDFROM AS VARCHAR) 
											+ ''' AND ''' + CAST(@VALIDTO AS VARCHAR) +''''                      
						EXEC SP_EXECUTESQL @QUERY;      
					END  
			END 
		DROP TABLE #SECTIONS  
		SELECT @DEDUCTIONID; 
	END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEDUCTIONDETAILSF005')
DROP PROCEDURE USP_TDS_SAVEDEDUCTIONDETAILSF005
GO
CREATE PROCEDURE [USP_TDS_SAVEDEDUCTIONDETAILSF005]
 @DEDUCTIONID INT,
 @QUARTER INT,
 @BRANCHID INT,
 @FORMID INT,
 @DEDUCTEEID INT,
 @ERETURNID INT,
 @MODE CHAR(1),
 @INCOMETAX NUMERIC(13,2)=NULL,
 @SURCHARGE NUMERIC(13,2)=NULL,
 @EDUCATIONCESS NUMERIC(13,2)=NULL,
 @TOTALDEDUCTED NUMERIC(14,2)=NULL,
 @PAYMENTMADE NUMERIC(13,2)=NULL,
 @PAYMENTDATE SMALLDATETIME,
 @DEDUCTEDDATE SMALLDATETIME=NULL,
 @SECTIONID INT,
 @INCOMETAXRATE NUMERIC(6,3)=NULL ,
 @SURCHARGERATE NUMERIC(6,3)=NULL,
 @EDUCATIONCESSRATE NUMERIC(6,3)=NULL,
 @TAXRATE NUMERIC(7,4)=NULL,
 @ISTAXINFOEDITABLE BIT,
 @NONDEDREASON TINYINT,
 @ISBOOKENTRY BIT,
 @ISGROSSINGUP BIT,
 @UTN CHAR(16),
 @ISPANVALIDBYITD BIT,
 @ORGINCOMETAX NUMERIC(13,2)=NULL,
 @ORGSURCHARGE NUMERIC(13,2)=NULL,
 @ORGEDUCATIONCESS NUMERIC(13,2)=NULL,
 @ORGTOTALDEDUCTED NUMERIC(14,2)=NULL,
 @ORGPAYMENTMADE NUMERIC(14,2)=NULL,
 @PARTPAYMENTID INT,
 @ISORIGINALENTRY TINYINT
AS
 BEGIN
     DECLARE @SERIALNO INT;
     /*IF DEDUCTION IS GETTING SAVED FROM MAIN SCREEN OF DEDUCTION*/
     IF(@ISORIGINALENTRY = 1)
   BEGIN
    IF(@PARTPAYMENTID = -1)
     BEGIN
      SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0),@PARTPAYMENTID=ISNULL(MAX(PARTPAYMENTID),0) FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
      INSERT INTO DEDUCTIONDETAIL([QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,
             SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,SERIALNO,
             ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID)
           VALUES (@QUARTER,@BRANCHID,@FORMID,@DEDUCTEEID,@ERETURNID,@MODE,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@TOTALDEDUCTED,@PAYMENTMADE,@PAYMENTDATE,@DEDUCTEDDATE,
             @SECTIONID,@INCOMETAXRATE,@SURCHARGERATE,@EDUCATIONCESSRATE,@TAXRATE,@ISTAXINFOEDITABLE,@NONDEDREASON,
             @ISBOOKENTRY,@ISGROSSINGUP,@UTN,@ISPANVALIDBYITD,@SERIALNO + 1,
             @ORGINCOMETAX,@ORGSURCHARGE,@ORGEDUCATIONCESS,@ORGTOTALDEDUCTED,@ORGPAYMENTMADE,@PARTPAYMENTID + 1)
      SET @DEDUCTIONID = SCOPE_IDENTITY();
     END
    ELSE
     BEGIN
      /* CHECK FOR ENTRY IN PARTPAYMENTDETAILS BASED ON BRANCHID,FORMID,QUARTER & PARTPAYMENTID */
      IF EXISTS(SELECT PARTPAYMENTID FROM PARTPAYMENTDETAILS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)
       BEGIN
        DECLARE @IT NUMERIC(13,2),@SC NUMERIC(13,2),@EC NUMERIC(13,2),@TD NUMERIC(14,2),@PM NUMERIC(14,2);
        SELECT @IT = SUM(INCOMETAX),@SC = SUM(SURCHARGE),@EC = SUM(EDUCATIONCESS),@TD = SUM(TOTALDEDUCTED),@PM = SUM(PAYMENTMADE)
        FROM   DEDUCTIONDETAIL
        WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
        IF(@IT < @ORGINCOMETAX OR @SC < @ORGSURCHARGE OR @EC < @ORGEDUCATIONCESS OR @TD < @TOTALDEDUCTED)
         BEGIN
          SET @DEDUCTIONID = -2;
         END
        ELSE
         BEGIN
          UPDATE DEDUCTIONDETAIL SET DEDUCTEEID = @DEDUCTEEID,MODE = @MODE,PAYMENTDATE = @PAYMENTDATE,DEDUCTEDDATE = @DEDUCTEDDATE,
                   SECTIONID = @SECTIONID,INCOMETAXRATE = @INCOMETAXRATE,SURCHARGERATE = @SURCHARGERATE,EDUCATIONCESSRATE = @EDUCATIONCESSRATE,
                   TAXRATE = @TAXRATE,ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE,NONDEDREASON = @NONDEDREASON,ISBOOKENTRY = @ISBOOKENTRY,ISGROSSINGUP = @ISGROSSINGUP,
                   UTN = @UTN,ISPANVALIDBYITD = @ISPANVALIDBYITD,ORGINCOMETAX = @ORGINCOMETAX,ORGSURCHARGE = @ORGSURCHARGE,ORGEDUCATIONCESS = @ORGEDUCATIONCESS,
                   ORGTOTALDEDUCTED = @ORGTOTALDEDUCTED,ORGPAYMENTMADE = @ORGPAYMENTMADE
          WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
          /*UPDATING BALANCE IN PARTPAYMENTDETAILS TABLE*/
          EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID
         END
       END
      ELSE
       BEGIN
        UPDATE DEDUCTIONDETAIL SET DEDUCTEEID = @DEDUCTEEID,MODE = @MODE,PAYMENTDATE = @PAYMENTDATE,PAYMENTMADE = @PAYMENTMADE,INCOMETAX = @INCOMETAX,SURCHARGE = @SURCHARGE,
                 EDUCATIONCESS = @EDUCATIONCESS,TOTALDEDUCTED = @TOTALDEDUCTED,DEDUCTEDDATE = @DEDUCTEDDATE,SECTIONID = @SECTIONID,INCOMETAXRATE = @INCOMETAXRATE,
                 SURCHARGERATE = @SURCHARGERATE,EDUCATIONCESSRATE = @EDUCATIONCESSRATE,TAXRATE = @TAXRATE,ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE,NONDEDREASON = @NONDEDREASON,
                 ISBOOKENTRY = @ISBOOKENTRY,ISGROSSINGUP = @ISGROSSINGUP,UTN = @UTN,ISPANVALIDBYITD = @ISPANVALIDBYITD,ORGINCOMETAX = @ORGINCOMETAX,ORGSURCHARGE = @ORGSURCHARGE,
                 ORGEDUCATIONCESS = @ORGEDUCATIONCESS,ORGTOTALDEDUCTED = @ORGTOTALDEDUCTED,ORGPAYMENTMADE = @ORGPAYMENTMADE
        WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
        SELECT @DEDUCTIONID = DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID
       END
     END
   END
  /*IF DEDUCTION IS GETTING SAVED FROM PART PAYMENT SCREEN*/
  ELSE
   BEGIN
    IF(@DEDUCTIONID = -1)
     BEGIN
      /*
       1. - GET THE TOP RECORD BASED ON PARTPAYMENTID
       2. - COPY THE RECORD WITH LINKED INCOMETAX,SURCHARGE,EDUCATIONCESS AND TOTALDEDUCATED AMOUNT
       3. - UPDATE PARTPAYMENTDETAILS FOR UPDATING REMAINING AMOUNT (CALLING USP_TDS_UPDATEPARTPAYMENTBALANCE PROCEDURE)
      */
      SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)+1 FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
      IF EXISTS(SELECT PARTDETAILID FROM PARTPAYMENTDETAILS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)
       BEGIN
        INSERT INTO DEDUCTIONDETAIL(SERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
               TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,
               EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,
               ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID)
        SELECT TOP 1 @SERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,
            @TOTALDEDUCTED,@PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,
            TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,ORGINCOMETAX,ORGSURCHARGE,
            ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID
        FROM   DEDUCTIONDETAIL WITH(NOLOCK)
        WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
        SET @DEDUCTIONID = SCOPE_IDENTITY();
       END
      ELSE
       BEGIN
        /*FOR FIRST PARTPAYMENT RECORDS*/
        UPDATE DEDUCTIONDETAIL
        SET    INCOMETAX = @INCOMETAX,SURCHARGE = @SURCHARGE,EDUCATIONCESS = @EDUCATIONCESS,TOTALDEDUCTED = @TOTALDEDUCTED,PAYMENTMADE = @PAYMENTMADE
        WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
        SELECT @DEDUCTIONID = DEDUCTIONID
        FROM   DEDUCTIONDETAIL WITH(NOLOCK)
        WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
       END
      EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID;
    END
    ELSE
     BEGIN
      UPDATE DEDUCTIONDETAIL
 SET    INCOMETAX = @INCOMETAX,SURCHARGE = @SURCHARGE,EDUCATIONCESS = @EDUCATIONCESS,TOTALDEDUCTED = @TOTALDEDUCTED,PAYMENTMADE = @PAYMENTMADE
      WHERE  DEDUCTIONID = @DEDUCTIONID
      EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID
     END
    END
  SELECT  @DEDUCTIONID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEDUCTIONDETAILSFROMTEXTFILE')
DROP PROCEDURE USP_TDS_SAVEDEDUCTIONDETAILSFROMTEXTFILE
GO
CREATE PROCEDURE [USP_TDS_SAVEDEDUCTIONDETAILSFROMTEXTFILE]
	@DEDUCTIONID INT,
	@QUARTER INT,
	@BRANCHID INT,
	@FORMID INT,
	@DEDUCTEEID INT,
	@ERETURNID INT,
	@MODE CHAR(1),
	@INCOMETAX NUMERIC(13,2),
	@SURCHARGE NUMERIC(13,2),
	@EDUCATIONCESS NUMERIC(13,2),
	@TOTALDEDUCTED NUMERIC(14,2),
	@PAYMENTMADE NUMERIC(13,2),
	@PAYMENTDATE SMALLDATETIME,
	@DEDUCTEDDATE SMALLDATETIME=NULL,
	@SECTIONID INT,
	@INCOMETAXRATE NUMERIC(6,3) ,
	@SURCHARGERATE NUMERIC(6,3),
	@EDUCATIONCESSRATE NUMERIC(6,3),
	@TAXRATE NUMERIC(7,4),
	@ISTAXINFOEDITABLE BIT,
	@NONDEDREASON TINYINT,
	@ISBOOKENTRY BIT,
	@ISGROSSINGUP BIT,
	@UTN CHAR(16),
	@ISPANVALIDBYITD BIT,
	@ORGINCOMETAX NUMERIC(13,2),
	@ORGSURCHARGE NUMERIC(13,2),
	@ORGEDUCATIONCESS NUMERIC(13,2),
	@ORGTOTALDEDUCTED NUMERIC(14,2),
	@ORGPAYMENTMADE NUMERIC(14,2),
	@PARTPAYMENTID INT,
	@ISORIGINALENTRY TINYINT,
	@ADDITIONALFIELD1 VARCHAR(25),
	@ENTRYTYPE TINYINT
AS
	BEGIN
	    DECLARE @SERIALNO INT;
	    /*IF DEDUCTION IS GETTING SAVED FROM MAIN SCREEN OF DEDUCTION*/
	    IF(@ISORIGINALENTRY = 1)
			BEGIN
				IF(@PARTPAYMENTID = -1)
					BEGIN
						SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0),@PARTPAYMENTID=ISNULL(MAX(PARTPAYMENTID),0) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
						INSERT INTO DEDUCTIONDETAIL([QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,
													SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,SERIALNO,
													ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID,ADDITIONALFIELD1,ENTRYTYPE)
											VALUES (@QUARTER,@BRANCHID,@FORMID,@DEDUCTEEID,@ERETURNID,@MODE,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@TOTALDEDUCTED,@PAYMENTMADE,@PAYMENTDATE,@DEDUCTEDDATE,
													@SECTIONID,@INCOMETAXRATE,@SURCHARGERATE,@EDUCATIONCESSRATE,@TAXRATE,@ISTAXINFOEDITABLE,@NONDEDREASON,
													@ISBOOKENTRY,@ISGROSSINGUP,@UTN,@ISPANVALIDBYITD,@SERIALNO + 1,
													@ORGINCOMETAX,@ORGSURCHARGE,@ORGEDUCATIONCESS,@ORGTOTALDEDUCTED,@ORGPAYMENTMADE,@PARTPAYMENTID + 1,@ADDITIONALFIELD1,@ENTRYTYPE)
						SET @DEDUCTIONID = SCOPE_IDENTITY();
					END
				ELSE
					BEGIN
						/* CHECK FOR ENTRY IN PARTPAYMENTDETAILS BASED ON BRANCHID,FORMID,QUARTER & PARTPAYMENTID */
						IF EXISTS(SELECT PARTPAYMENTID FROM PARTPAYMENTDETAILS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)
							BEGIN
								DECLARE @IT NUMERIC(13,2),@SC NUMERIC(13,2),@EC NUMERIC(13,2),@TD NUMERIC(14,2),@PM NUMERIC(14,2);
								SELECT @IT = SUM(INCOMETAX),@SC = SUM(SURCHARGE),@EC = SUM(EDUCATIONCESS),@TD = SUM(TOTALDEDUCTED),@PM = SUM(PAYMENTMADE)
								FROM   DEDUCTIONDETAIL WITH(NOLOCK)
								WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
								IF(@IT < @ORGINCOMETAX OR @SC < @ORGSURCHARGE OR @EC < @ORGEDUCATIONCESS OR @TD < @TOTALDEDUCTED)
									BEGIN
										SET @DEDUCTIONID = -2;
									END
								ELSE
									BEGIN
										UPDATE DEDUCTIONDETAIL SET DEDUCTEEID = @DEDUCTEEID,MODE = @MODE,PAYMENTDATE = @PAYMENTDATE,DEDUCTEDDATE = @DEDUCTEDDATE,
																   SECTIONID = @SECTIONID,INCOMETAXRATE = @INCOMETAXRATE,SURCHARGERATE = @SURCHARGERATE,EDUCATIONCESSRATE = @EDUCATIONCESSRATE,
																   TAXRATE = @TAXRATE,ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE,NONDEDREASON = @NONDEDREASON,ISBOOKENTRY = @ISBOOKENTRY,ISGROSSINGUP = @ISGROSSINGUP,
																   UTN = @UTN,ISPANVALIDBYITD = @ISPANVALIDBYITD,ORGINCOMETAX = @ORGINCOMETAX,ORGSURCHARGE = @ORGSURCHARGE,ORGEDUCATIONCESS = @ORGEDUCATIONCESS,
																   ORGTOTALDEDUCTED = @ORGTOTALDEDUCTED,ORGPAYMENTMADE = @ORGPAYMENTMADE,ADDITIONALFIELD1=@ADDITIONALFIELD1
										WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
										/*UPDATING BALANCE IN PARTPAYMENTDETAILS TABLE*/
										EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID
									END
							END
						ELSE
							BEGIN
								UPDATE DEDUCTIONDETAIL SET DEDUCTEEID = @DEDUCTEEID,MODE = @MODE,PAYMENTDATE = @PAYMENTDATE,PAYMENTMADE = @PAYMENTMADE,INCOMETAX = @INCOMETAX,SURCHARGE = @SURCHARGE,
														   EDUCATIONCESS = @EDUCATIONCESS,TOTALDEDUCTED = @TOTALDEDUCTED,DEDUCTEDDATE = @DEDUCTEDDATE,SECTIONID = @SECTIONID,INCOMETAXRATE = @INCOMETAXRATE,
														   SURCHARGERATE = @SURCHARGERATE,EDUCATIONCESSRATE = @EDUCATIONCESSRATE,TAXRATE = @TAXRATE,ISTAXINFOEDITABLE = @ISTAXINFOEDITABLE,NONDEDREASON = @NONDEDREASON,
														   ISBOOKENTRY = @ISBOOKENTRY,ISGROSSINGUP = @ISGROSSINGUP,UTN = @UTN,ISPANVALIDBYITD = @ISPANVALIDBYITD,ORGINCOMETAX = @ORGINCOMETAX,ORGSURCHARGE = @ORGSURCHARGE,
														   ORGEDUCATIONCESS = @ORGEDUCATIONCESS,ORGTOTALDEDUCTED = @ORGTOTALDEDUCTED,ORGPAYMENTMADE = @ORGPAYMENTMADE
								WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
								SELECT @DEDUCTIONID = DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID
							END
					END
			END
		/*IF DEDUCTION IS GETTING SAVED FROM PART PAYMENT SCREEN*/
		ELSE
			BEGIN
				IF(@DEDUCTIONID = -1)
					BEGIN
						/*
							1. - GET THE TOP RECORD BASED ON PARTPAYMENTID
							2. - COPY THE RECORD WITH LINKED INCOMETAX,SURCHARGE,EDUCATIONCESS AND TOTALDEDUCATED AMOUNT
							3. - UPDATE PARTPAYMENTDETAILS FOR UPDATING REMAINING AMOUNT (CALLING USP_TDS_UPDATEPARTPAYMENTBALANCE PROCEDURE)
						*/
						SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)+1 FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
						IF EXISTS(SELECT PARTDETAILID FROM PARTPAYMENTDETAILS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)
							BEGIN
								INSERT INTO DEDUCTIONDETAIL(SERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
															TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,
															EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,
															ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID)
								SELECT TOP 1 @SERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,
											 @TOTALDEDUCTED,@PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,
											 TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,ORGINCOMETAX,ORGSURCHARGE,
											 ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID
								FROM   DEDUCTIONDETAIL WITH(NOLOCK)
								WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
								SET @DEDUCTIONID = SCOPE_IDENTITY();
							END
						ELSE
							BEGIN
								/*FOR FIRST PARTPAYMENT RECORDS*/
								UPDATE DEDUCTIONDETAIL
								SET    INCOMETAX = @INCOMETAX,SURCHARGE = @SURCHARGE,EDUCATIONCESS = @EDUCATIONCESS,TOTALDEDUCTED = @TOTALDEDUCTED,PAYMENTMADE = @PAYMENTMADE
								WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
								SELECT @DEDUCTIONID = DEDUCTIONID
								FROM   DEDUCTIONDETAIL WITH(NOLOCK)
								WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
							END
						EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID;
				END
				ELSE
					BEGIN
						UPDATE DEDUCTIONDETAIL
						SET    INCOMETAX = @INCOMETAX,SURCHARGE = @SURCHARGE,EDUCATIONCESS = @EDUCATIONCESS,TOTALDEDUCTED = @TOTALDEDUCTED,PAYMENTMADE = @PAYMENTMADE
						WHERE  DEDUCTIONID = @DEDUCTIONID
						EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID
					END
				END
		SELECT 	@DEDUCTIONID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEDUCTIONFORIMPORT')
DROP PROCEDURE USP_TDS_SAVEDEDUCTIONFORIMPORT
GO
CREATE PROCEDURE [USP_TDS_SAVEDEDUCTIONFORIMPORT]
@BRANCHID INT,
@QUARTER INT,
@SECTIONID INT,
@DEDUCTEEID INT,
@TRANSACTIONSEQNO VARCHAR(20),
@PAYMENTMADE NUMERIC(13,2),
@PAYMENTDATE SMALLDATETIME,
@ITRATE NUMERIC(4,2) = NULL,
@ITAMOUNT NUMERIC(13,2) = NULL,
@SURCHARGERATE NUMERIC(4,2) = NULL,
@SURCHARGE NUMERIC(13,2) = NULL,
@CESSRATE NUMERIC(4,2) = NULL,
@CESS NUMERIC(13,2) = NULL,
@TAXRATE NUMERIC(4,2) = NULL,
@TOTALDEDUCTED NUMERIC(13,2) = NULL,
@DEDUCTEDDATE SMALLDATETIME = NULL,
@NONDEDREASON INT,
@ENTRYTYPE INT
AS
 BEGIN
  DECLARE @DEDUCTIONID INT, @SERIALNO INT, @PARTPAYMENTID INT;
  SET @DEDUCTIONID = -1;SET @PARTPAYMENTID=-1;
  SELECT @DEDUCTIONID = DEDUCTIONID FROM DEDUCTIONDETAIL WHERE TRANSACTIONSEQNO = @TRANSACTIONSEQNO  AND BRANCHID = @BRANCHID
  IF(@DEDUCTIONID = -1)
   BEGIN
     SELECT @SERIALNO = ISNULL(MAX(ISNULL(SERIALNO,0)),0) + 1 FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = @QUARTER
        SELECT @PARTPAYMENTID = ISNULL(MAX(ISNULL(DD.PARTPAYMENTID,0)),0) + 1 FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
        WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = 1 AND DD.QUARTER = @QUARTER
        INSERT INTO DEDUCTIONDETAIL (SERIALNO, QUARTER, BRANCHID, FORMID, DEDUCTEEID, ERETURNID, MODE, INCOMETAX, SURCHARGE, EDUCATIONCESS, TOTALDEDUCTED, PAYMENTMADE,
                      PAYMENTDATE, DEDUCTEDDATE, SECTIONID, INCOMETAXRATE, SURCHARGERATE, EDUCATIONCESSRATE, TAXRATE, NONDEDREASON, ISBOOKENTRY,
                      ISGROSSINGUP, UTN, ISPANVALIDBYITD, ISTAXINFOEDITABLE, ORGINCOMETAX, ORGSURCHARGE, ORGEDUCATIONCESS, ORGTOTALDEDUCTED,
                      PARTPAYMENTID, ORGPAYMENTMADE, ENTRYTYPE, TRANSACTIONSEQNO)
                     VALUES (@SERIALNO, @QUARTER, @BRANCHID , 1, @DEDUCTEEID, 0, '', @ITAMOUNT, @SURCHARGE, @CESS, @TOTALDEDUCTED, @PAYMENTMADE,
     @PAYMENTDATE, @DEDUCTEDDATE, @SECTIONID, @ITRATE, @SURCHARGERATE, @CESSRATE, @TAXRATE, @NONDEDREASON, 0, 0, '', 0, 1, @ITAMOUNT,@SURCHARGE, @CESS,@TOTALDEDUCTED,
     @PARTPAYMENTID, @PAYMENTMADE,  @ENTRYTYPE, @TRANSACTIONSEQNO)
     SET @DEDUCTIONID = SCOPE_IDENTITY();
   END
  ELSE
   BEGIN
    UPDATE DEDUCTIONDETAIL SET DEDUCTEEID = @DEDUCTEEID , INCOMETAX = @ITAMOUNT, @SURCHARGE = @SURCHARGE, EDUCATIONCESS = @CESS , TOTALDEDUCTED = @TOTALDEDUCTED,
                    PAYMENTMADE = @PAYMENTMADE, PAYMENTDATE = @PAYMENTDATE, DEDUCTEDDATE = @DEDUCTEDDATE, INCOMETAXRATE = @ITRATE,
                    SURCHARGERATE = @SURCHARGERATE, EDUCATIONCESSRATE = @CESSRATE, TAXRATE = @TAXRATE, NONDEDREASON = @NONDEDREASON,
                    ORGINCOMETAX = @ITAMOUNT, ORGSURCHARGE = @SURCHARGE, ORGEDUCATIONCESS = @CESS, ORGTOTALDEDUCTED = @TOTALDEDUCTED
      WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND  TRANSACTIONSEQNO = @TRANSACTIONSEQNO
   END
   SELECT @DEDUCTIONID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveDeductor')
DROP PROCEDURE USP_TDS_SaveDeductor
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveDeductor]    
 @DEDUCTORID INT,    
 @DEDUCTORNAME VARCHAR(75),    
 @BRANCHID INT,    
 @ADDRESS1 VARCHAR(25),
 @ADDRESS2 VARCHAR(25),    
 @ADDRESS3 VARCHAR(25),    
 @ADDRESS4 VARCHAR(25),    
 @ADDRESS5 VARCHAR(25),    
 @STATEID INT,    
 @ISADDRCHANGED BIT,    
 @FINANCIALYEAR INT,    
 @TAN VARCHAR(10),    
 @PAN VARCHAR(10),    
 @PINCODE VARCHAR(6),    
 @EMAILADDRESS VARCHAR(75),    
 @STDCODE VARCHAR(5),    
 @PHONENO VARCHAR(10),    
 @ISRESIDENT BIT,    
 @ISTDSEXISTING BIT,    
 @FAXNO VARCHAR(10),    
 @RETURNTYPE TINYINT,    
 @ISAOAPPROVED BIT,    
 @AOAPPROVALNUM VARCHAR(25),    
 @AODESIGNATION VARCHAR(30),    
 @QUARTER INT,    
 @STATUSID INT,    
 @DEDUCTORTYPEID INT,    
 @GOVTADDSTATEID INT,    
 @GOVTADDPAOCODE VARCHAR(20),    
 @GOVTADDPAOREGNNO VARCHAR(20),    
 @GOVTADDDDOCODE VARCHAR(20),    
 @GOVTADDDDOREGNNO VARCHAR(20),    
 @GOVTADDMINISTRY INT,    
 @GOVTADDOTHERNAME VARCHAR(20),    
 @TANREGISTRATION VARCHAR(20),
 @GOVTADDAIN VARCHAR(100), 
 @GOVTADDMAINMINISTRY INT,
 @ALTERNATEEMAIL VARCHAR(75),
 @ALTERNATESTD VARCHAR(5),
 @ALTERNATEPHONE VARCHAR(10),
 @GSTIN VARCHAR(15) = NULL
AS    
 BEGIN    
  IF(@DEDUCTORID=-1)    
   BEGIN        
    INSERT INTO DEDUCTOR(DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,ISADDRCHANGED,FINANCIALYEAR,    
         [TAN],PAN,PINCODE,EMAILADDRESS,STDCODE,PHONENO,ISRESIDENT,ISTDSEXISTING,FAXNO,RETURNTYPE,ISAOAPPROVED,     
         AODESIGNATION,STATUSID,DEDUCTORTYPEID,GOVTADDSTATEID,GOVTADDPAOCODE,GOVTADDPAOREGNNO,    
         GOVTADDDDOCODE,GOVTADDDDOREGNNO,GOVTADDMINISTRY,GOVTADDOTHERNAME,TANREGISTRATION,GOVTADDAIN,GOVTADDMAINMINISTRY,
        ALTERNATEEMAIL,ALTERNATESTD, ALTERNATEPHONE, GSTIN)    
		VALUES(@DEDUCTORNAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@ISADDRCHANGED,@FINANCIALYEAR,    
        @TAN,@PAN,@PINCODE,@EMAILADDRESS,@STDCODE,@PHONENO, @ISRESIDENT,@ISTDSEXISTING,@FAXNO,@RETURNTYPE,    
        @ISAOAPPROVED,@AODESIGNATION,@STATUSID,@DEDUCTORTYPEID,@GOVTADDSTATEID,    
        @GOVTADDPAOCODE,@GOVTADDPAOREGNNO,@GOVTADDDDOCODE,@GOVTADDDDOREGNNO,@GOVTADDMINISTRY,@GOVTADDOTHERNAME,
        @TANREGISTRATION,@GOVTADDAIN,@GOVTADDMAINMINISTRY, @ALTERNATEEMAIL,@ALTERNATESTD,@ALTERNATEPHONE, @GSTIN)    
    SET @DEDUCTORID=SCOPE_IDENTITY();    
    --Insertion into BRANCHDEDUCTORS     
    INSERT INTO BRANCHDEDUCTORS(BRANCHID,[QUARTER],DEDUCTORID) VALUES(@BRANCHID,@QUARTER,@DEDUCTORID);    
   END    
  ELSE    
   BEGIN    
    DECLARE @CURRENTSTATUSID INT,@SECTIONID INT    
    SELECT @CURRENTSTATUSID=STATUSID FROM DEDUCTOR WHERE DEDUCTORID=@DEDUCTORID;          
    UPDATE DEDUCTOR SET DEDUCTORNAME=@DEDUCTORNAME,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,    
         ADDRESS5=@ADDRESS5,STATEID=@STATEID,ISADDRCHANGED=@ISADDRCHANGED,FINANCIALYEAR=@FINANCIALYEAR,[TAN]=@TAN,PAN=@PAN,    
         PINCODE=@PINCODE,EMAILADDRESS=@EMAILADDRESS,STDCODE=@STDCODE,PHONENO=@PHONENO,ISRESIDENT=@ISRESIDENT,    
         ISTDSEXISTING=@ISTDSEXISTING,FAXNO=@FAXNO,RETURNTYPE=@RETURNTYPE,ISAOAPPROVED=@ISAOAPPROVED,--AOAPPROVALNUM=@AOAPPROVALNUM,
         AODESIGNATION=@AODESIGNATION,STATUSID=@STATUSID,DEDUCTORTYPEID=@DEDUCTORTYPEID,GOVTADDSTATEID=@GOVTADDSTATEID,GOVTADDPAOCODE=@GOVTADDPAOCODE,GOVTADDPAOREGNNO=@GOVTADDPAOREGNNO,    
         GOVTADDDDOCODE=@GOVTADDDDOCODE,GOVTADDDDOREGNNO=@GOVTADDDDOREGNNO,GOVTADDMINISTRY=@GOVTADDMINISTRY,GOVTADDOTHERNAME=@GOVTADDOTHERNAME,    
         TANREGISTRATION=@TANREGISTRATION,GOVTADDAIN = @GOVTADDAIN,GOVTADDMAINMINISTRY = @GOVTADDMAINMINISTRY,ALTERNATEEMAIL = @ALTERNATEEMAIL,
         ALTERNATESTD = @ALTERNATESTD, ALTERNATEPHONE = @ALTERNATEPHONE, GSTIN = @GSTIN
    WHERE DEDUCTORID=@DEDUCTORID;    
    --IF(@CURRENTSTATUSID<>@STATUSID)    
    -- BEGIN
      IF(@STATUSID=1)    
       BEGIN    
		 IF(@DEDUCTORTYPEID = 3 AND @FINANCIALYEAR > 2012)
		  SET  @SECTIONID = 25;
		 ELSE
          SET @SECTIONID=1;
       END    
      ELSE IF(@STATUSID=2)    
       BEGIN         
        SET @SECTIONID=2;    
       END    
      --UPDATE D SET D.STATUSID=@STATUSID,D.DEDUCTORTYPEID=@DEDUCTORTYPEID,D.GOVTADDSTATEID=@GOVTADDSTATEID,D.GOVTADDPAOCODE=@GOVTADDPAOCODE,    
      --    D.GOVTADDPAOREGNNO=@GOVTADDPAOREGNNO,D.GOVTADDDDOCODE=@GOVTADDDDOCODE,D.GOVTADDDDOREGNNO=@GOVTADDDDOREGNNO,D.GOVTADDMINISTRY=@GOVTADDMINISTRY,    
      --    D.GOVTADDOTHERNAME=@GOVTADDOTHERNAME 
     --   FROM DEDUCTOR D INNER JOIN BRANCHDEDUCTORS BD ON D.DEDUCTORID=BD.DEDUCTORID WHERE BD.BRANCHID=@BRANCHID    
      /* IF Allow 92A92b is Checked in Default settings Dont Update*/    
      IF((SELECT ALLOW92A92B FROM DEFAULTSETTINGS)=0)    
      BEGIN    
       UPDATE CHALLANDETAIL SET SECTIONID=@SECTIONID WHERE BRANCHID=@BRANCHID AND FORMID=1;     
       UPDATE DEDUCTIONDETAIL SET SECTIONID=@SECTIONID WHERE BRANCHID=@BRANCHID AND FORMID=1;          
      END    
     --END    
  END    
  SELECT @DEDUCTORID;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDEFAULTSETTINGS')
DROP PROCEDURE USP_TDS_SAVEDEFAULTSETTINGS
GO
CREATE PROCEDURE [dbo].[USP_TDS_SAVEDEFAULTSETTINGS]            
          @ID INT,                      
          @PAN VARCHAR(10),    
          @PASSWORD VARCHAR(50),            
          @STATUS SMALLINT,            
          @DEDUCTORTYPE SMALLINT,            
          @ENABLEREFERENCE BIT,            
          @MODEOFPAYMENT SMALLINT,            
          @ROUNDOFF SMALLINT,            
          @ALLOW92A92B SMALLINT,          
          @LOCKQ1 BIT,          
          @LOCKQ2 BIT,          
          @LOCKQ3 BIT,          
          @LOCKQ4 BIT,      
          @DEFAULTPAN VARCHAR(10),      
          @ENABLETHRESHOLD BIT,
          @PWDEXPIRYDAYS INT=NULL,
          @RETAINPREVPWD INT=NULL,
          @IDLETIMEOUT INT=NULL,
          @BLOCKTAXPAYMENT BIT,
		  @LOCKEDMONTHS VARCHAR(50),
		  @BLOCKSALMODIFICATION BIT,
		  @BLOCKFORM16 BIT,
		  @BLOCKFORM16A BIT       
AS            
BEGIN            
  DECLARE @RETURNVALUE INT             
  SET @RETURNVALUE=1            
  IF(@ENABLEREFERENCE=0 OR @ALLOW92A92B=0)            
  BEGIN             
   SET @RETURNVALUE=DBO.UDF_TDS_GETDEFAULTSETTINGSTATUS(@ALLOW92A92B,@ENABLEREFERENCE)            
  END                
  IF @RETURNVALUE > 0            
   BEGIN            
     IF EXISTS(SELECT ID FROM DEFAULTSETTINGS WITH(NOLOCK) WHERE ID=@ID)            
      BEGIN            
       UPDATE DEFAULTSETTINGS SET PAN=@PAN,[STATUS]=@STATUS,DEDUCTORTYPE=@DEDUCTORTYPE,            
                                  ENABLEREFERENCE=@ENABLEREFERENCE,MODEOFPAYMENT=@MODEOFPAYMENT ,            
                                  ROUNDOFF=@ROUNDOFF,ALLOW92A92B=@ALLOW92A92B , LOCKQ1=@LOCKQ1,     
                                  LOCKQ2=@LOCKQ2, LOCKQ3=@LOCKQ3, LOCKQ4=@LOCKQ4, DEFAULTPAN=@DEFAULTPAN  ,    
                                  ENABLETHRESHOLD=@ENABLETHRESHOLD, DEFAULTPWD = @PASSWORD,PWDEXPIRYDAYS = @PWDEXPIRYDAYS,
                                  RETAINPREVPWD=@RETAINPREVPWD,BLOCKTAXPAYMENT=@BLOCKTAXPAYMENT,LOCKEDMONTHS=@LOCKEDMONTHS,
                                  BLOCKSALMODIFICATION=@BLOCKSALMODIFICATION,BLOCKFORM16 = @BLOCKFORM16,BLOCKFORM16A = @BLOCKFORM16A,
								  IDLETIMEOUT = @IDLETIMEOUT
             WHERE ID=@ID            
      END            
     ELSE            
      BEGIN            
       INSERT INTO DEFAULTSETTINGS(PAN,[STATUS],DEDUCTORTYPE,ENABLEREFERENCE,MODEOFPAYMENT,ROUNDOFF,ALLOW92A92B, LOCKQ1, LOCKQ2, LOCKQ3, LOCKQ4,DEFAULTPAN,ENABLETHRESHOLD,DEFAULTPWD,PWDEXPIRYDAYS,RETAINPREVPWD,BLOCKTAXPAYMENT,LOCKEDMONTHS,BLOCKSALMODIFICATION,BLOCKFORM16,BLOCKFORM16A,IDLETIMEOUT)            
           VALUES(@PAN,@STATUS,@DEDUCTORTYPE,@ENABLEREFERENCE,@MODEOFPAYMENT,@ROUNDOFF,@ALLOW92A92B, @LOCKQ1, @LOCKQ2, @LOCKQ3, @LOCKQ4,@DEFAULTPAN,@ENABLETHRESHOLD,@PASSWORD,@PWDEXPIRYDAYS,@RETAINPREVPWD,@BLOCKTAXPAYMENT,@LOCKEDMONTHS,@BLOCKSALMODIFICATION,@BLOCKFORM16,@BLOCKFORM16A,@IDLETIMEOUT)            
       SET @ID=SCOPE_IDENTITY();            
      END            
      SELECT @ID            
       END            
       ELSE             
       SELECT @RETURNVALUE            
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEDTFDETAILS')
DROP PROCEDURE USP_TDS_SAVEDTFDETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVEDTFDETAILS]  
@SCALE INT,  
@AMOUNT NUMERIC(13,2)  
AS  
IF NOT EXISTS(SELECT S.SCALE FROM SCALE S WITH(NOLOCK) WHERE SCALE=@SCALE)
 BEGIN  
 INSERT INTO SCALE(SCALE,AMOUNT) VALUES(@SCALE,@AMOUNT)  
 END  
ELSE  
    UPDATE SCALE SET AMOUNT=@AMOUNT WHERE SCALE=@SCALE
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEMAILSETTINGS')
DROP PROCEDURE USP_TDS_SAVEEMAILSETTINGS
GO
CREATE PROCEDURE [USP_TDS_SAVEEMAILSETTINGS] 
@EMAILSETTINGSID INT,
@BRANCHID INT,
@CONNECTIONTYPE INT,
@HOST NVARCHAR(MAX),
@USERNAME VARCHAR(50),
@PASSWORD VARCHAR(50),
@ISAUTODETECT BIT,
@PORTNO VARCHAR(10),
@ISENABLESSL BIT,
@SUBJECT NVARCHAR(MAX),
@BOBY NVARCHAR(MAX)
AS
BEGIN
	IF @EMAILSETTINGSID = -1
	BEGIN
		INSERT INTO EMAILSETTINGS(BRANCHID,CONNECTIONTYPE,HOST,USERNAME,PASSWORD,ISAUTODETECT,PORTNO,
								 ISENABLESSL,SUBJECT,BODY)
		VALUES(@BRANCHID,@CONNECTIONTYPE,@HOST,@USERNAME,@PASSWORD,@ISAUTODETECT,@PORTNO,@ISENABLESSL,
				@SUBJECT,@BOBY);
	END
	ELSE
	BEGIN
		UPDATE EMAILSETTINGS SET BRANCHID=@BRANCHID,CONNECTIONTYPE=@CONNECTIONTYPE,HOST=@HOST,USERNAME=@USERNAME,
				PASSWORD=@PASSWORD,ISAUTODETECT=@ISAUTODETECT,PORTNO=@PORTNO,ISENABLESSL=@ISENABLESSL,
				SUBJECT=@SUBJECT,BODY=@BOBY WHERE BRANCHID=@BRANCHID AND EMAILSETTINGSID=@EMAILSETTINGSID;
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveEmailStatus')
DROP PROCEDURE USP_TDS_SaveEmailStatus
GO
CREATE PROCEDURE USP_TDS_SaveEmailStatus
@STATUS VARCHAR(50),
@RECORDID INT
AS
BEGIN
	UPDATE EMAILQUEUE SET STATUS = @STATUS WHERE RECORDID = @RECORDID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEMPLOYEE')
DROP PROCEDURE USP_TDS_SAVEEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_SAVEEMPLOYEE]
	@DEDUCTEEID INT,
	@EMPLOYEEID INT,
	@BRANCHID INT,
	@SALUTATION VARCHAR(5),
	@NAME VARCHAR(75),
	@PAN VARCHAR(10),
	@PANREFERENCE VARCHAR(10),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@STATEID INT,
	@PINCODE VARCHAR(6),
	@PHONENO VARCHAR(15),
	@EMAILADDRESS VARCHAR(75),
	@DESIGNATION VARCHAR(20),
	@EMPLOYMENTFROM SMALLDATETIME,
	@EMPLOYMENTTO SMALLDATETIME,
	@GENDER CHAR(1),
	@ISSENIORCITIZEN BIT
AS
	BEGIN
		DECLARE @SERIALNO INT,@RETURNVALUE INT;
		IF EXISTS (SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID WHERE D.NAME = @NAME AND D.PAN = @PAN AND D.DEDUCTEEID <> @DEDUCTEEID  AND D.BRANCHID = @BRANCHID)
			BEGIN
				SET @RETURNVALUE = -1;
			END
		ELSE
			BEGIN
				IF (@DEDUCTEEID = -1 AND @EMPLOYEEID = -1)
					BEGIN
						INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,
											 STATEID,PINCODE,PHONENO,EMAILADDRESS)
						VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,
							   @PHONENO,@EMAILADDRESS)
						SET @DEDUCTEEID=SCOPE_IDENTITY();
						SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0) FROM DEDUCTEE INNER JOIN EMPLOYEE ON DEDUCTEE.DEDUCTEEID=EMPLOYEE.DEDUCTEEID WHERE BRANCHID=@BRANCHID
						INSERT INTO EMPLOYEE(DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,ISSENIORCITIZEN,SERIALNO)
						VALUES(@DEDUCTEEID,@DESIGNATION,@EMPLOYMENTFROM,@EMPLOYMENTTO,@GENDER,@ISSENIORCITIZEN,@SERIALNO+1)
						SET @EMPLOYEEID=SCOPE_IDENTITY();
						SET @RETURNVALUE = 1;
					END
				ELSE
					BEGIN
						SET @RETURNVALUE = @DEDUCTEEID ;
						UPDATE DEDUCTEE SET BRANCHID=@BRANCHID,SALUTATION=@SALUTATION,NAME=@NAME,PAN=@PAN,PANREFERENCE=@PANREFERENCE,
											ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,
											STATEID=@STATEID,PINCODE=@PINCODE,PHONENO=@PHONENO,EMAILADDRESS=@EMAILADDRESS
						WHERE DEDUCTEEID=@DEDUCTEEID;
						UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYMENTFROM,EMPLOYMENTTO=@EMPLOYMENTTO,
											GENDER=@GENDER,ISSENIORCITIZEN=@ISSENIORCITIZEN
						WHERE DEDUCTEEID=@DEDUCTEEID AND EMPLOYEEID=@EMPLOYEEID;
						DECLARE @DEDUCTEEPAN VARCHAR(10),@DEDUCTEEPANREFERENCE VARCHAR(10)
						DECLARE @DEDUCTIONPAN VARCHAR(10),@DEDUCTIONPANREFERENCE VARCHAR(10)
						IF((SELECT COUNT(DEDUCTEEID) FROM DBO.DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID) >0)
							BEGIN
								SELECT @DEDUCTEEPAN=DEDUCTEEPAN,@DEDUCTEEPANREFERENCE=DEDUCTEEPANREF FROM DEDUCTIONDETAIL WHERE DEDUCTEEID=@DEDUCTEEID
									IF(@DEDUCTEEPAN<>@PAN OR @DEDUCTEEPANREFERENCE<>@PANREFERENCE)
										BEGIN
											UPDATE DEDUCTIONDETAIL SET LASTDEDUCTEEPAN=@DEDUCTEEPAN,LASTDEDUCTEEPANREF=@DEDUCTEEPANREFERENCE WHERE DEDUCTEEID=@DEDUCTEEID
											UPDATE DEDUCTIONDETAIL SET DEDUCTEEPAN=@PAN,DEDUCTEEPANREF=@PANREFERENCE WHERE DEDUCTEEID=@DEDUCTEEID
										END
							END
					END
			END
		SELECT @RETURNVALUE;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveEmployeeCOMID')
DROP PROCEDURE USP_TDS_SaveEmployeeCOMID
GO
CREATE PROCEDURE USP_TDS_SaveEmployeeCOMID
	@BRANCHID INT,
	@EMPLOYEEID INT,
	@COMID INT = NULL
AS  
 BEGIN
		IF(NOT EXISTS(SELECT COMID FROM LINKTOTC WITH(NOLOCK) WHERE EMPLOYEEID = @EMPLOYEEID))
		BEGIN
			IF(@COMID IS NULL)  
			BEGIN
				SELECT @COMID = ISNULL(MAX(COMID),0) + 1 FROM LINKTOTC WITH(NOLOCK) 
			END
			INSERT INTO LINKTOTC VALUES(@BRANCHID , @EMPLOYEEID, @COMID);
		END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_SAVEEMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEEMPLOYEEDETAIL]       
 @BRANCHID INT,      
 @EMPLOYEEID INT,      
 @DEDUCTEEID INT,      
 @DESIGNATION VARCHAR(20),      
 @EMPLOYMENTFROM SMALLDATETIME,      
 @EMPLOYMENTTO SMALLDATETIME,      
 @GENDER CHAR(1),      
 @ISSENIORCITIZEN SMALLINT,      
 @REFERENCENO VARCHAR(20),  
 @ACCOUNTNO VARCHAR(15) = NULL,  
 @PPONUMBER VARCHAR(20) = NULL,
 @DATEOFBIRTH SMALLDATETIME = NULL      
AS      
 BEGIN      
  DECLARE @SERIALNO INT;
  DECLARE @ISDUPLICATE INT
  SET @ISDUPLICATE=0
  /* GET THE MAX SERIAL NO FOR THE EMPLOYEE */        
  SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0) + 1 FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID       
  WHERE  D.BRANCHID = @BRANCHID;      
  /* CHECK FOR UNIQUE REFERENCE NO IF REFERENCE NO IS ENABLED*/      
 IF((SELECT ENABLEREFERENCE FROM DEFAULTSETTINGS WITH(NOLOCK))=1)  
 BEGIN   
  SELECT @ISDUPLICATE=COUNT(D.DEDUCTEEID) FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID=E.DEDUCTEEID WHERE BRANCHID=@BRANCHID AND D.DEDUCTEEID<> @DEDUCTEEID AND D.REFERENCENO=@REFERENCENO AND REFERENCENO IS NOT NULL AND REFERENCENO<>''      
    END      
 IF(@ISDUPLICATE=0)      
      BEGIN        
		  IF (@EMPLOYEEID = -1)
		   BEGIN      
			 INSERT INTO EMPLOYEE(DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,ISSENIORCITIZEN,SERIALNO,ACCOUNTNO,PPONUMBER, DATEOFBIRTH)      
			 VALUES (@DEDUCTEEID,@DESIGNATION,@EMPLOYMENTFROM,@EMPLOYMENTTO,@GENDER,@ISSENIORCITIZEN,@SERIALNO,@ACCOUNTNO, @PPONUMBER,@DATEOFBIRTH);      
			 SET @EMPLOYEEID= SCOPE_IDENTITY();      
		   END      
		  ELSE      
		   BEGIN      
			 UPDATE EMPLOYEE       
			 SET DESIGNATION = @DESIGNATION,EMPLOYMENTFROM = @EMPLOYMENTFROM,EMPLOYMENTTO = @EMPLOYMENTTO,DATEOFBIRTH = @DATEOFBIRTH,     
			  GENDER = @GENDER,ISSENIORCITIZEN = @ISSENIORCITIZEN, ACCOUNTNO = @ACCOUNTNO, PPONUMBER = @PPONUMBER       
			 WHERE  DEDUCTEEID = @DEDUCTEEID AND EMPLOYEEID = @EMPLOYEEID;      
		   END  		     
			UPDATE DEDUCTEE SET CODE = 0    
			FROM DEDUCTEE D     
			INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID    
			WHERE D.BRANCHID = @BRANCHID
			SELECT @EMPLOYEEID;         
      END       
 ELSE      
      SELECT -1  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEMPLOYEEFORMAT3')
DROP PROCEDURE USP_TDS_SAVEEMPLOYEEFORMAT3
GO
CREATE PROCEDURE [USP_TDS_SAVEEMPLOYEEFORMAT3]    
 @DEDUCTEEID INT,    
 @EMPLOYEEID INT,    
 @BRANCHID INT,    
 @SALUTATION INT,    
 @NAME VARCHAR(75),    
 @PAN VARCHAR(10),    
 @PANREFERENCE VARCHAR(10),    
 @ADDRESS1 VARCHAR(25),    
 @ADDRESS2 VARCHAR(25),    
 @ADDRESS3 VARCHAR(25),    
 @ADDRESS4 VARCHAR(25),    
 @ADDRESS5 VARCHAR(25),    
 @STATEID INT,    
 @PINCODE VARCHAR(6),                    
 @PHONENO VARCHAR(15),    
 @EMAILADDRESS VARCHAR(75),    
 @ISEXCLUDED INT,    
 @DESIGNATION VARCHAR(25),    
 @EMPLOYEMENTFROM DATETIME=NULL,    
 @EMPLOYEMENTTO DATETIME=NULL,    
 @GENDER INT,    
 @ISSENIORCITIZEN SMALLINT    
AS    
 BEGIN    
  DECLARE @SERIALNO INT,@RETURNVALUE INT;    
  --DECLARE @PANREFERENCE VARCHAR(10);    
  /* CHECK IF DEDUCTEE EXISTS ALREADY*/     
  SELECT @DEDUCTEEID = D.DEDUCTEEID,@EMPLOYEEID = E.EMPLOYEEID    
  FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID    
  WHERE BRANCHID = @BRANCHID  AND D.NAME = @NAME AND D.PAN = @PAN;    
  IF(@DEDUCTEEID=-1 AND @EMPLOYEEID=-1)    
    BEGIN    
     IF @PAN = 'PANNOTAVBL'    
     BEGIN    
      SET @PANREFERENCE ='NOPAN';  
      SET  @PANREFERENCE =@PANREFERENCE +  DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHID(@BRANCHID, 1);
     END                    
     SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)     
     FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = EMPLOYEE.DEDUCTEEID     
     WHERE  BRANCHID = @BRANCHID;    
     INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS,ISEXCLUDED)    
     VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS,@ISEXCLUDED)    
     SET @DEDUCTEEID = SCOPE_IDENTITY();    
     INSERT INTO EMPLOYEE(DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,SERIALNO,ISSENIORCITIZEN)    
     VALUES(@DEDUCTEEID,@DESIGNATION,@EMPLOYEMENTFROM,@EMPLOYEMENTTO,@GENDER,@SERIALNO+1,@ISSENIORCITIZEN)    
     SET @EMPLOYEEID=SCOPE_IDENTITY();    
    END       
   ELSE    
    BEGIN    
     UPDATE DEDUCTEE SET ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,    
          ADDRESS5 = @ADDRESS5,STATEID = @STATEID,PINCODE = @PINCODE,PHONENO = @PHONENO,EMAILADDRESS=@EMAILADDRESS    
                 WHERE  DEDUCTEEID = @DEDUCTEEID;    
      UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYEMENTFROM, EMPLOYMENTTO=@EMPLOYEMENTTO, GENDER=@GENDER, ISSENIORCITIZEN=@ISSENIORCITIZEN     
     WHERE  DEDUCTEEID = @DEDUCTEEID AND EMPLOYEEID = @EMPLOYEEID;         
    END    
  SELECT @DEDUCTEEID;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEMPLOYEEFORMAT4')
DROP PROCEDURE USP_TDS_SAVEEMPLOYEEFORMAT4
GO
CREATE PROCEDURE [USP_TDS_SAVEEMPLOYEEFORMAT4]          
 @DEDUCTEEID INT,          
 @EMPLOYEEID INT,          
 @CUSTOMERID VARCHAR(20),        
 @BRANCHID INT,          
 @SALUTATION INT,          
 @NAME VARCHAR(75),          
 @PAN VARCHAR(10),          
 @PANREFERENCE VARCHAR(10),          
 @ADDRESS1 VARCHAR(25),          
 @ADDRESS2 VARCHAR(25),          
 @ADDRESS3 VARCHAR(25),          
 @ADDRESS4 VARCHAR(25),          
 @ADDRESS5 VARCHAR(25),          
 @STATEID INT,          
 @PINCODE VARCHAR(6),                          
 @PHONENO VARCHAR(15),          
 @EMAILADDRESS VARCHAR(75),          
 @ISEXCLUDED INT,          
 @DESIGNATION VARCHAR(25),          
 @EMPLOYEMENTFROM DATETIME=NULL,          
 @EMPLOYEMENTTO DATETIME=NULL,          
 @GENDER INT,          
 @ISSENIORCITIZEN SMALLINT          
AS          
 BEGIN          
  DECLARE @SERIALNO INT,@RETURNVALUE INT;          
  --DECLARE @PANREFERENCE VARCHAR(10);          
  /* CHECK IF DEDUCTEE EXISTS ALREADY*/           
  SELECT @DEDUCTEEID = D.DEDUCTEEID,@EMPLOYEEID = E.EMPLOYEEID          
  FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID          
  WHERE BRANCHID = @BRANCHID  AND D.REFERENCENO=@CUSTOMERID;        
  IF(@DEDUCTEEID=-1 AND @EMPLOYEEID=-1)          
    BEGIN          
     IF (@PAN = 'PANNOTAVBL' OR @PAN = 'PANINVALID' OR @PAN = 'PANAPPLIED')    
    BEGIN              
	  SET @PANREFERENCE = 'NOPAN';       
	  SET @PANREFERENCE = @PANREFERENCE + DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHID(@BRANCHID ,1)    
    END                      
    BEGIN          
     SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)           
     FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = EMPLOYEE.DEDUCTEEID           
     WHERE  BRANCHID = @BRANCHID;          
     INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,REFERENCENO,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS,ISEXCLUDED)          
     VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@CUSTOMERID,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS,@ISEXCLUDED)          
     SET @DEDUCTEEID = SCOPE_IDENTITY();          
     INSERT INTO EMPLOYEE(DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,SERIALNO,ISSENIORCITIZEN)          
     VALUES(@DEDUCTEEID,@DESIGNATION,@EMPLOYEMENTFROM,@EMPLOYEMENTTO,@GENDER,@SERIALNO+1,@ISSENIORCITIZEN)          
     SET @EMPLOYEEID=SCOPE_IDENTITY();          
     SET @RETURNVALUE = @DEDUCTEEID;          
    END             
    END          
   ELSE          
    BEGIN          
    SET @RETURNVALUE = @DEDUCTEEID ;          
     UPDATE DEDUCTEE SET ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,NAME=@NAME, PAN=@PAN, PANREFERENCE=@PANREFERENCE,       
          ADDRESS5 = @ADDRESS5,STATEID = @STATEID,PINCODE = @PINCODE,PHONENO = @PHONENO,EMAILADDRESS=@EMAILADDRESS          
                 WHERE  REFERENCENO=@CUSTOMERID;          
      UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYEMENTFROM, EMPLOYMENTTO=@EMPLOYEMENTTO, GENDER=@GENDER, ISSENIORCITIZEN=@ISSENIORCITIZEN           
     WHERE  DEDUCTEEID = @DEDUCTEEID AND EMPLOYEEID = @EMPLOYEEID;               
    END          
  SELECT @DEDUCTEEID;          
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEMPLOYEEFORMAT7')
DROP PROCEDURE USP_TDS_SAVEEMPLOYEEFORMAT7
GO
CREATE PROCEDURE USP_TDS_SAVEEMPLOYEEFORMAT7                 
@DEDUCTEEID INT,                  
@EMPLOYEEID INT,                  
@BRANCHID INT,                  
@EMPLOYEEREFNO VARCHAR(20),             
@SALUTATION INT,                  
@NAME VARCHAR(75),                  
@PAN VARCHAR(10),                  
@PANREFERENCE VARCHAR(10),                  
@ADDRESS1 VARCHAR(25),                  
@ADDRESS2 VARCHAR(25),                  
@ADDRESS3 VARCHAR(25),                  
@ADDRESS4 VARCHAR(25),                  
@ADDRESS5 VARCHAR(25),                  
@STATEID INT,                  
@PINCODE VARCHAR(6),                                  
@PHONENO VARCHAR(15),                  
@EMAILADDRESS VARCHAR(75),                  
@ISEXCLUDED INT,                  
@DESIGNATION VARCHAR(25),                  
@EMPLOYEMENTFROM SMALLDATETIME=NULL,                  
@EMPLOYEMENTTO SMALLDATETIME=NULL,                  
@GENDER INT,                  
@ISSENIORCITIZEN SMALLINT,        
@WORKINGBRANCHID INT = NULL        
AS                  
	BEGIN                  
	DECLARE @SERIALNO INT,@RETURNVALUE INT;                  
	/* CHECK IF DEDUCTEE EXISTS ALREADY*/                     
	SELECT @DEDUCTEEID = D.DEDUCTEEID, @EMPLOYEEID = E.EMPLOYEEID FROM DEDUCTEE D WITH(NOLOCK)
	INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID                  
	WHERE D.BRANCHID = @BRANCHID AND D.REFERENCENO = @EMPLOYEEREFNO;            
	--SET @PANREFERENCE='NOPAN';                
	IF(@DEDUCTEEID = -1 AND @EMPLOYEEID = -1)  
		BEGIN                      
			IF @PAN = 'PANNOTAVBL' OR @PAN = 'PANINVALID' OR @PAN = 'PANAPPLIED'                
				BEGIN                  
					SET @PANREFERENCE = 'NOPAN';                
					SET @PANREFERENCE = @PANREFERENCE + DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHID(@BRANCHID, 1);              
				END                           
			SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)                   
			FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN EMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = EMPLOYEE.DEDUCTEEID                   
			WHERE  BRANCHID = @BRANCHID;                  
			INSERT INTO DEDUCTEE(BRANCHID, SALUTATION, NAME, PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5,
						STATEID, PINCODE, PHONENO, EMAILADDRESS, ISEXCLUDED, REFERENCENO)                  
			VALUES(@BRANCHID,@SALUTATION, @NAME, @PAN, @PANREFERENCE, @ADDRESS1, @ADDRESS2, @ADDRESS3, @ADDRESS4, @ADDRESS5,
						@STATEID, @PINCODE, @PHONENO, @EMAILADDRESS, @ISEXCLUDED, @EMPLOYEEREFNO)                  
			SET @DEDUCTEEID = SCOPE_IDENTITY();                  
			INSERT INTO EMPLOYEE(DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,SERIALNO,ISSENIORCITIZEN, 
							WORKINGBRANCHID)                  
			VALUES(@DEDUCTEEID,@DESIGNATION,@EMPLOYEMENTFROM,@EMPLOYEMENTTO,@GENDER,@SERIALNO+1,@ISSENIORCITIZEN, 
							@WORKINGBRANCHID)                  
			SET @EMPLOYEEID = SCOPE_IDENTITY();                  
			SET @RETURNVALUE = @DEDUCTEEID;        
		END                  
	ELSE                  
		BEGIN                  
			SET @RETURNVALUE = @DEDUCTEEID ;                  
			UPDATE DEDUCTEE SET ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2, ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4, 
					PAN = @PAN , PANREFERENCE = (
					CASE WHEN @PAN NOT IN('PANNOTAVBL' ,'PANINVALID','PANAPPLIED') THEN '' 
							WHEN PAN <> @PAN 
								THEN ( 'NOPAN' + DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHID(@BRANCHID, 1))
					ELSE   PANREFERENCE END),
					NAME = @NAME ,ADDRESS5 = @ADDRESS5, STATEID = @STATEID,
					PINCODE = @PINCODE, PHONENO = @PHONENO, EMAILADDRESS = @EMAILADDRESS                  
			WHERE  DEDUCTEEID = @DEDUCTEEID;            
			UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYEMENTFROM, EMPLOYMENTTO=@EMPLOYEMENTTO, 
					GENDER=@GENDER, ISSENIORCITIZEN=@ISSENIORCITIZEN,        
					WORKINGBRANCHID = @WORKINGBRANCHID                    
			WHERE  DEDUCTEEID = @DEDUCTEEID AND EMPLOYEEID = @EMPLOYEEID;                       
		END                  
	SELECT @RETURNVALUE;                  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEMPLOYEELINKTOTC')
DROP PROCEDURE USP_TDS_SAVEEMPLOYEELINKTOTC
GO
CREATE PROCEDURE  USP_TDS_SAVEEMPLOYEELINKTOTC        
@REFERENCENOS NVARCHAR(MAX)        
AS        
BEGIN
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
  SET NOCOUNT ON
  SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFERENCENOS,',')
  INSERT INTO LINKTOTC        
  SELECT D.BRANCHID, E.EMPLOYEEID , ROW_NUMBER() OVER(ORDER BY E.EMPLOYEEID) +  (SELECT MAX(COMID) FROM LINKTOTC) COMID FROM DEDUCTEE D  
 INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID  
 LEFT JOIN LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID
 INNER JOIN #REFNO R ON R.DATA = D.REFERENCENO  
 WHERE LC.COMID IS NULL  
 GROUP BY E.EMPLOYEEID, D.BRANCHID    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEMPWORKMONTH')
DROP PROCEDURE USP_TDS_SAVEEMPWORKMONTH
GO
CREATE PROCEDURE  USP_TDS_SAVEEMPWORKMONTH    
@BRANCHCODES NVARCHAR(MAX),    
@REFNOS NVARCHAR(MAX),    
@MONTHID INT    
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON
SELECT * INTO #BRANCHES FROM DBO.UDF_TDS_SPLITSTRING(@BRANCHCODES,',')
SELECT * INTO #REFNO FROM DBO.UDF_TDS_SPLITSTRING(@REFNOS,',')    
INSERT INTO EMPWORKMONTH(BRANCHID, MONTHID, COMID)    
SELECT LC.BRANCHID, @MONTHID AS MONTHID,LC.COMID FROM DEDUCTEE D    
INNER JOIN EMPLOYEE  E    
ON E.DEDUCTEEID=D.DEDUCTEEID    
INNER JOIN LINKTOTC LC    
ON D.BRANCHID=LC.BRANCHID AND LC.EMPLOYEEID=E.EMPLOYEEID    
INNER JOIN COMPANYBRANCH C     
ON C.BRANCHID=D.BRANCHID
INNER JOIN #BRANCHES B ON B.DATA = C.BRANCHCODE
INNER JOIN #REFNO R ON R.DATA = D.REFERENCENO        
EXCEPT    
SELECT EWM.BRANCHID,MONTHID,COMID FROM EMPWORKMONTH EWM
INNER JOIN COMPANYBRANCH CB ON EWM.BRANCHID = CB.BRANCHID
INNER JOIN #BRANCHES B ON B.DATA = CB.BRANCHCODE    
WHERE MONTHID=@MONTHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEERETURNID')
DROP PROCEDURE USP_TDS_SAVEERETURNID
GO
CREATE PROCEDURE [USP_TDS_SAVEERETURNID]
@ISDEDUCTION BIT,
@ERETURNID INT,
@ID INT
AS
BEGIN
  IF @ISDEDUCTION=1
	 UPDATE DEDUCTIONDETAIL SET ERETURNID=@ERETURNID WHERE DEDUCTIONID=@ID
 ELSE
	UPDATE CHALLANDETAIL SET ERETURNID=@ERETURNID WHERE CHALLANID=@ID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEXCELIMPORTSATTUS')
DROP PROCEDURE USP_TDS_SAVEEXCELIMPORTSATTUS
GO
CREATE PROCEDURE USP_TDS_SAVEEXCELIMPORTSATTUS  
@BRANCHID INT,        
@QUARTER INT,        
@ISVALID BIT,        
@ISREQACTIVE BIT,        
@QUEUEID VARCHAR(10),    
@CURSTATUS INT        
AS        
BEGIN        
	IF EXISTS(SELECT STATUSID FROM EXCELIMPORTSTATUS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER)        
	BEGIN        
		UPDATE EXCELIMPORTSTATUS SET ISVALID = @ISVALID, 
		ISREQACTIVE = @ISREQACTIVE, QUEUEID=@QUEUEID, CURREQ = 1, 
		CURSTATUS = @CURSTATUS        
		WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER  
	END        
	ELSE        
	BEGIN        
		INSERT INTO EXCELIMPORTSTATUS
		(BRANCHID,QUARTER,ISVALID,ISREQACTIVE,QUEUEID,CURREQ,CURSTATUS)        
		VALUES(@BRANCHID,@QUARTER,@ISVALID,@ISREQACTIVE,@QUEUEID,1,
		@CURSTATUS)        
	END        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEEXCELUSERBRANCH')
DROP PROCEDURE USP_TDS_SAVEEXCELUSERBRANCH
GO
CREATE PROCEDURE [USP_TDS_SAVEEXCELUSERBRANCH]
@ROWNO INT,
@BRANCHNAME VARCHAR(100),
@BRANCHCODE INT,
@PBRANCHNAME VARCHAR(100),
@PBRANCHCODE INT,
@USERNAME VARCHAR(20),
@PASSWORD VARCHAR(50),
@ISBRANCHADMIN BIT
AS
BEGIN
	INSERT INTO USERBRANCH (ROWNO, BRANCHNAME, BRANCHCODE, PBRANCHNAME, PBRANCHCODE, USERNAME, PASSWORD, ISBRANCHADMIN)
			VALUES
				(@ROWNO, @BRANCHNAME, @BRANCHCODE, @PBRANCHNAME, @PBRANCHCODE, @USERNAME, @PASSWORD, @ISBRANCHADMIN)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFORM16ADETAILF005')
DROP PROCEDURE USP_TDS_SAVEFORM16ADETAILF005
GO
CREATE PROCEDURE [USP_TDS_SAVEFORM16ADETAILF005]
@BRANCHID INT,
@DEDUCTIONID INT,
@TDSCERTDATE SMALLDATETIME
AS
BEGIN
  INSERT INTO FORM16A(BRANCHID, DEDUCTIONID, SECTIONID, TDSCERTIFICATENO, CERTIFICATEDATE)
 VALUES
 (@BRANCHID, @DEDUCTIONID,5,0,@TDSCERTDATE)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFORM16ADETAILS')
DROP PROCEDURE USP_TDS_SAVEFORM16ADETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVEFORM16ADETAILS]
 @BRANCHID INT,
 @DEDUCTIONID INT,
 @SECTIONID INT,
 @CERTNO INT,
 @PRINTCERTNO VARCHAR(10),
 @CERTDATE SMALLDATETIME=NULL,
 @ISCERTGIVEN BIT,
@OLDCERTNO VARCHAR(10)
AS
 BEGIN
  IF((SELECT COUNT(DEDUCTIONID) FROM FORM16A WITH(NOLOCK) WHERE DEDUCTIONID=@DEDUCTIONID AND BRANCHID=@BRANCHID)=0)
   BEGIN
    INSERT INTO FORM16A(BRANCHID,DEDUCTIONID,SECTIONID,TDSCERTIFICATENO,PRINTCERTIFICATENO,CERTIFICATEDATE,ISCERTIFICATEGIVEN)
    VALUES(@BRANCHID,@DEDUCTIONID,@SECTIONID,@CERTNO,@PRINTCERTNO,@CERTDATE,@ISCERTGIVEN);
   END
  ELSE
   BEGIN
    UPDATE FORM16A
    SET TDSCERTIFICATENO=@CERTNO,PRINTCERTIFICATENO=@PRINTCERTNO,CERTIFICATEDATE=@CERTDATE,ISCERTIFICATEGIVEN=@ISCERTGIVEN
    WHERE PRINTCERTIFICATENO = @OLDCERTNO AND BRANCHID=@BRANCHID;
   END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFORM16CERTIFICATENODETAIL')
DROP PROCEDURE USP_TDS_SAVEFORM16CERTIFICATENODETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEFORM16CERTIFICATENODETAIL]
 @BRANCHID INT,
 @SECTIONID INT,
 @CERTNO INT,
 @PRINTCERTNO VARCHAR(10),
 @CERTDATE SMALLDATETIME = NULL,
 @ISCERTGIVEN BIT,
@SERIALNO INT
AS
 BEGIN
   DECLARE @DEDUCTEEID INT;
   SELECT @DEDUCTEEID = D.DEDUCTEEID FROM DEDUCTEE  D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID WHERE E.SERIALNO = @SERIALNO;
  IF((SELECT COUNT(DEDUCTEEID) FROM FORM16 WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID) = 0)
   BEGIN
    INSERT INTO FORM16(BRANCHID,DEDUCTIONID,SECTIONID,TDSCERTIFICATENO,PRINTCERTIFICATENO,CERTIFICATEDATE,ISCERTIFICATEGIVEN, DEDUCTEEID)
    VALUES(@BRANCHID,NULL,@SECTIONID,@CERTNO,@PRINTCERTNO,@CERTDATE,@ISCERTGIVEN,@DEDUCTEEID);
   END
  ELSE
   BEGIN
    UPDATE FORM16
    SET   TDSCERTIFICATENO = @CERTNO,PRINTCERTIFICATENO = @PRINTCERTNO,CERTIFICATEDATE = @CERTDATE,ISCERTIFICATEGIVEN = @ISCERTGIVEN
    WHERE  BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID
   END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFORM26QAA')
DROP PROCEDURE USP_TDS_SAVEFORM26QAA
GO
CREATE PROCEDURE USP_TDS_SAVEFORM26QAA
	 @SERIALNO INT,
	 @BRANCHID INT,  
	 @OLDBRANCHID INT,  
	 @TDACCNO VARCHAR(50),  
	 @OLDTDACCNO VARCHAR(50),  
	 @OPENINGDATE VARCHAR(50),  
	 @DEPOSITEDAMOUNT DECIMAL,  
	 @CLOSUREDATE VARCHAR(50)  
AS    
	BEGIN     
		DECLARE @AMT1 TINYINT = 0
		DECLARE @AMT2 TINYINT = 0
		DECLARE @AMT3 TINYINT = 0
		DECLARE @AMT4 TINYINT = 0
		DECLARE @AMT5 TINYINT = 0
		IF(@DEPOSITEDAMOUNT < 25000)
			SET @AMT1 = 1
		IF(@DEPOSITEDAMOUNT >= 25000 AND @DEPOSITEDAMOUNT < 50000)
			SET @AMT2 = 1
		IF(@DEPOSITEDAMOUNT >= 50000 AND @DEPOSITEDAMOUNT < 100000)
			SET @AMT3 = 1
		IF(@DEPOSITEDAMOUNT >= 100000 AND @DEPOSITEDAMOUNT < 500000)
			SET @AMT4 = 1
		IF(@DEPOSITEDAMOUNT >= 500000)
			SET @AMT5 = 1
		IF((SELECT COUNT(BRANCHID)FROM TERMDEPOSIT26QAA WITH (NOLOCK) 
			WHERE BRANCHID = @OLDBRANCHID AND TDACCNO = @OLDTDACCNO) > 0)
			BEGIN
				UPDATE TERMDEPOSIT26QAA 
				SET BRANCHID = @BRANCHID, 
					TDACCNO = @TDACCNO, 
					OPENINGDATE = @OPENINGDATE, 
				    DEPOSITEDAMOUNT = @DEPOSITEDAMOUNT, 
					CLOSUREDATE = @CLOSUREDATE,					
					AMT1 = @AMT1,
					AMT2 = @AMT2,
					AMT3 = @AMT3,
					AMT4 = @AMT4,
					AMT5 = @AMT5
				WHERE BRANCHID = @OLDBRANCHID AND
					  TDACCNO = @OLDTDACCNO
			END	
		ELSE
			BEGIN
				SET @SERIALNO = (SELECT MAX(SERIALNO) + 1 FROM TERMDEPOSIT26QAA WITH (NOLOCK))
				INSERT INTO TERMDEPOSIT26QAA 
					(SERIALNO, BRANCHID, TDACCNO, OPENINGDATE, DEPOSITEDAMOUNT, CLOSUREDATE,
					 AMT1, AMT2, AMT3, AMT4, AMT5)
				VALUES
					(@SERIALNO, @BRANCHID, @TDACCNO, @OPENINGDATE, @DEPOSITEDAMOUNT, @CLOSUREDATE,
					 @AMT1, @AMT2, @AMT3, @AMT4, @AMT5)
			END	
	END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFORM27A')
DROP PROCEDURE USP_TDS_SAVEFORM27A
GO
CREATE PROCEDURE [USP_TDS_SAVEFORM27A]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDCOUNT INT,
	@DEDAMOUNTPAID NUMERIC(14,2),
	@DEDTDSAMOUNT NUMERIC(14,2),
	@CHACOUNT INT,
	@CHAAMOUNT NUMERIC(14,2),
	@TOTALCHAAMOUNT NUMERIC(14,2),
	@MEDIAUSED VARCHAR(20),
	@NUMOFMEDIA INT,
	@PLACEFILED VARCHAR(50),
	@DATEFILED SMALLDATETIME= NULL
AS
	BEGIN
		IF((SELECT COUNT(FORM27AID) FROM FORM27A WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER)=0)
			BEGIN
				INSERT INTO FORM27A (BRANCHID,FORMID,QUARTER,DEDCOUNT,DEDAMOUNTPAID,DEDTDSAMOUNT,CHACOUNT,CHAAMOUNT,TOTALCHAAMOUNT,MEDIAUSED,NUMOFMEDIA,PLACEFILED,DATEFILED)
				VALUES(@BRANCHID,@FORMID,@QUARTER,@DEDCOUNT,@DEDAMOUNTPAID,@DEDTDSAMOUNT,@CHACOUNT,@CHAAMOUNT,@TOTALCHAAMOUNT,@MEDIAUSED,@NUMOFMEDIA,@PLACEFILED,@DATEFILED)
			END
		ELSE
			BEGIN
				UPDATE FORM27A SET BRANCHID=@BRANCHID,FORMID=@FORMID,QUARTER=@QUARTER,DEDCOUNT=@DEDCOUNT,DEDAMOUNTPAID=@DEDAMOUNTPAID,DEDTDSAMOUNT=@DEDTDSAMOUNT,CHACOUNT=@CHACOUNT,CHAAMOUNT=@CHAAMOUNT,TOTALCHAAMOUNT=@TOTALCHAAMOUNT,MEDIAUSED=@MEDIAUSED,
								   NUMOFMEDIA=@NUMOFMEDIA,PLACEFILED=@PLACEFILED,DATEFILED=@DATEFILED
				WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveFVUBatchHeader')
DROP PROCEDURE USP_TDS_SaveFVUBatchHeader
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveFVUBatchHeader]
	@BRANCHID INT,
    @FORMID INT,
    @QUARTER INT,
	@DEDUCTORID INT,	
	@DEDUCTORNAME VARCHAR(75),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@STATEID INT,
	@PINCODE VARCHAR(6),
	@ISADDRCHANGED BIT,
	@PHONENO VARCHAR(10),
	@STDCODE VARCHAR(5),	
	@EMAILADDRESS VARCHAR(75),
	@TAN VARCHAR(10),
	@PAN VARCHAR(10),	
	@FINANCIALYEAR INT,	
	@STATUSID SMALLINT,
	@DEDUCTORTYPEID INT,
	@GOVTADDSTATEID INT,
	@GOVTADDPAOCODE VARCHAR(20),
	@GOVTADDPAOREGNNO VARCHAR(20),
	@GOVTADDDDOCODE VARCHAR(20),
	@GOVTADDDDOREGNNO VARCHAR(20),
	@GOVTADDMINISTRY INT,
	@GOVTADDOTHERNAME VARCHAR(20),	
	@PERSONNAME VARCHAR(75),
	@RESPDESIGNATION VARCHAR(20),
	@RESPADDRESS1 VARCHAR(75),
	@RESPADDRESS2 VARCHAR(75),
	@RESPADDRESS3 VARCHAR(75),
	@RESPADDRESS4 VARCHAR(75),
	@RESPADDRESS5 VARCHAR(75),
	@RESPSTATEID INT,
	@RESPPINCODE VARCHAR(6),
	@RESPISADDRCHANGED BIT,
	@RESPPHONENO VARCHAR(10),
	@RESPSTDCODE VARCHAR(5),
	@RESPEMAILADDRESS VARCHAR(75),
	@RESMOBILENO VARCHAR(12),
	@CORRECTIONSTATUS SMALLINT,
	@EXPECTEDCID INT,
	@EXPECTEDSID INT,
	@GOVTADDAIN VARCHAR(7) = NULL,
	@ALTERNATESTD VARCHAR(5) = NULL,
	@ALTERNATEPHONE VARCHAR(10) = NULL,
	@ALTERNATEEMAIL VARCHAR(75) = NULL,
	@RPALTERNATESTD VARCHAR(5) = NULL,
	@RPALTERNATEPHONE VARCHAR(10) = NULL,
	@RPALTERNATEEMAIL VARCHAR(75) = NULL,
	@TANREGISTRATION VARCHAR(10) = NULL,
	@GSTIN VARCHAR(15) = NULL
AS
	BEGIN         
		SELECT @DEDUCTORID=DEDUCTORID FROM BRANCHDEDUCTORS WHERE BRANCHID=@BRANCHID AND [QUARTER]=@QUARTER;
		INSERT INTO CORRDEDUCTOR(DEDUCTORID,BRANCHID,[QUARTER],FORMID,DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,ISADDRCHANGED,
								 FINANCIALYEAR,[TAN],PAN,PINCODE,EMAILADDRESS,STDCODE,PHONENO,STATUSID,DEDUCTORTYPEID,GOVTADDSTATEID,GOVTADDPAOCODE,
								 GOVTADDPAOREGNNO,GOVTADDDDOCODE,GOVTADDDDOREGNNO,GOVTADDMINISTRY,GOVTADDOTHERNAME,RPNAME,RPADDRESS1,
								 RPADDRESS2,RPADDRESS3,RPADDRESS4,RPADDRESS5,RPSTATEID,RPPINCODE,RPISADDRCHANGED,RPDESIGNATION,
								 RPEMAILADDRESS,RPSTDCODE,RPPHONENO,RPMOBILENO,CORRECTIONSTATUS,EXPECTEDCID,EXPECTEDSID, GOVTADDAIN, ALTERNATESTD,
								ALTERNATEPHONE, ALTERNATEEMAIL, RPALTERNATESTD, RPALTERNATEPHONE, RPALTERNATEEMAIL, TANREGISTRATION, GSTIN)
		VALUES(@DEDUCTORID,@BRANCHID,@QUARTER,@FORMID,@DEDUCTORNAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@ISADDRCHANGED,
			   @FINANCIALYEAR,@TAN,@PAN,@PINCODE,@EMAILADDRESS,@STDCODE,@PHONENO,@STATUSID,@DEDUCTORTYPEID,@GOVTADDSTATEID,@GOVTADDPAOCODE,
			   @GOVTADDPAOREGNNO,@GOVTADDDDOCODE,@GOVTADDDDOREGNNO,@GOVTADDMINISTRY,@GOVTADDOTHERNAME,@PERSONNAME,@RESPADDRESS1,
			   @RESPADDRESS2,@RESPADDRESS3,@RESPADDRESS4,@RESPADDRESS5,@RESPSTATEID,@RESPPINCODE,@RESPISADDRCHANGED,@RESPDESIGNATION,
			   @RESPEMAILADDRESS,@RESPSTDCODE,@RESPPHONENO,@RESMOBILENO,@CORRECTIONSTATUS,@EXPECTEDCID,@EXPECTEDSID, @GOVTADDAIN, @ALTERNATESTD, 
			   @ALTERNATEPHONE, @ALTERNATEEMAIL, @RPALTERNATESTD, @RPALTERNATEPHONE, @RPALTERNATEEMAIL, @TANREGISTRATION, @GSTIN);						   
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUCHALLANDETAIL')
DROP PROCEDURE USP_TDS_SAVEFVUCHALLANDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUCHALLANDETAIL]
   @CHALLANID INT,
   @CHALLANSERIALNO INT,
   @BRANCHID INT,
   @QUARTER TINYINT,
   @FORMID TINYINT,
   @CHALLANERETURNID INT,
   @LINKDEDCOUNT INT,
   @ISNILCHALLAN VARCHAR(1),
   @ISUPDATECHALLAN TINYINT,
   @MODEOFPAYMENT TINYINT,
   @BANKCHALLANNO VARCHAR(5),
   @LASTBANKCHALLANNO VARCHAR(5),
   @TRNVOUCHERNO VARCHAR(9),
   @LASTTRNVOUCHERNO VARCHAR(9),
   @BANKID INT,
   @LASTBANKID INT,
   @CHALLANPAIDDATE SMALLDATETIME=NULL,
   @LASTCHALLANPAIDDATE SMALLDATETIME=NULL,
   @DATEOFDEBIT SMALLDATETIME=NULL,
   @SECTIONID INT,
   @INCOMETAX NUMERIC(14,2),
   @SURCHARGE NUMERIC(14,2),
   @EDUCATIONCESS NUMERIC(14,2),
   @INTEREST NUMERIC(14,2),
   @PENALTY NUMERIC(14,2),
   @OTHERS NUMERIC(14,2),
   @CHALLANTOTAL NUMERIC(14,2),
   @LASTCHALLANTOTAL NUMERIC(14,2),
   @CHEQUENO VARCHAR(15),
   @TVRECEIPTNUMBER VARCHAR(7)=NULL,
   @EXPECTEDDID INT,
   @CHALLANEDITMODE VARCHAR(1) ,
   @PENDINGAMOUNT NUMERIC(13,2)
AS
BEGIN
      DECLARE @MASTERCHALLANSERIALNO INT,@CORRCHALLANSERIALNO INT
      SET @MASTERCHALLANSERIALNO =-1
      SET @CORRCHALLANSERIALNO =-1
      SET @CHALLANID=-1
   SET @CHALLANSERIALNO=-1
   IF NOT EXISTS(SELECT CHALLANERETURNID FROM CORRCHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND
                QUARTER=@QUARTER AND CHALLANERETURNID=@CHALLANERETURNID)
   BEGIN
    SELECT TOP 1 @CHALLANID=CD.CHALLANID,
     @CHALLANSERIALNO=CD.SERIALNO FROM CHALLANDETAIL CD WITH(NOLOCK)
              LEFT JOIN
               CORRCHALLANDETAIL CCD WITH(NOLOCK)
             ON CCD.CHALLANID=CD.CHALLANID AND
             CCD.CHALLANSERIALNO=CD.SERIALNO AND
             CCD.BRANCHID=CD.BRANCHID AND
             CCD.FORMID=CD.FORMID AND
             CCD.QUARTER=CD.QUARTER AND
             CCD.SECTIONID=CD.SECTIONID AND
             CCD.INCOMETAX=CD.INCOMETAX AND
             CCD.SURCHARGE=CD.SURCHARGE AND
             CCD.EDUCATIONCESS=CD.EDUCATIONCESS AND
             CCD.INTEREST=CD.INTEREST AND
                (CCD.PENALTY+CCD.OTHERS)=(CD.PENALTY+CD.OTHERS) AND
             CCD.CHALLANTOTAL=CD.CHALLANTOTAL AND
             CCD.BANKCHALLANNO=CD.BANKCHALLANNO AND
             CCD.TRNVOUCHERNO=CD.TRNVOUCHERNO AND
             CCD.CHALLANPAIDDATE=CD.CHALLANPAIDDATE
           WHERE CD.BRANCHID =@BRANCHID AND CD.FORMID=@FORMID AND CD.QUARTER=@QUARTER AND
              CCD.CHALLANID IS NULL AND CCD.CHALLANSERIALNO IS NULL AND
              CD.SECTIONID=@SECTIONID AND CD.INCOMETAX=@INCOMETAX AND CD.SURCHARGE=@SURCHARGE AND
              CD.EDUCATIONCESS=@EDUCATIONCESS AND CD.INTEREST=@INTEREST AND
              CD.OTHERS+CD.PENALTY=@OTHERS+@PENALTY AND CD.CHALLANTOTAL=@CHALLANTOTAL AND
              CD.BANKCHALLANNO=@BANKCHALLANNO AND
              CD.TRNVOUCHERNO=@TRNVOUCHERNO AND CD.CHALLANPAIDDATE=@CHALLANPAIDDATE
          ORDER BY CD.CHALLANID
      /*IF CHALLANID AND SERIALNO DOESNOT EXISTS THEN TAKING MAX SERIALNO FROM CHALLANDETAIL AND CORRCHALLAN TABLE AND SETTING SERIALNO*/
     IF(@CHALLANSERIALNO=-1)
     BEGIN
      SET @CHALLANID=NULL
      SELECT @CORRCHALLANSERIALNO=ISNULL(MAX(CHALLANSERIALNO),0)+1 FROM CORRCHALLANDETAIL WITH(NOLOCK)
                   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
      SELECT @MASTERCHALLANSERIALNO=ISNULL(MAX(SERIALNO),0)+1 FROM CHALLANDETAIL WITH(NOLOCK)
                   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
      IF(@MASTERCHALLANSERIALNO>@CORRCHALLANSERIALNO)
      BEGIN
       SET @CHALLANSERIALNO=@MASTERCHALLANSERIALNO
      END
ELSE
      BEGIN
       SET @CHALLANSERIALNO=@CORRCHALLANSERIALNO
      END
    END
   INSERT INTO CORRCHALLANDETAIL(CHALLANID,CHALLANSERIALNO,BRANCHID,FORMID,[QUARTER],CHALLANERETURNID,LINKDEDCOUNT,ISNILCHALLAN,
            ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,
            BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,DATEOFDEBIT,SECTIONID,INCOMETAX,
            SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,CHEQUENO,
           TVRECEIPTNUMBER,CORRECTIONSTATUS,EXPECTEDDID,CHALLANEDITMODE, PENDINGAMOUNT)
          VALUES(@CHALLANID,@CHALLANSERIALNO,@BRANCHID,@FORMID,@QUARTER,@CHALLANERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,
           @ISUPDATECHALLAN,@MODEOFPAYMENT,@BANKCHALLANNO,@LASTBANKCHALLANNO,@TRNVOUCHERNO,@LASTTRNVOUCHERNO,
           @BANKID,@LASTBANKID,@CHALLANPAIDDATE,@LASTCHALLANPAIDDATE,@DATEOFDEBIT,@SECTIONID,@INCOMETAX,
           @SURCHARGE,@EDUCATIONCESS,@INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@LASTCHALLANTOTAL,@CHEQUENO,
           @TVRECEIPTNUMBER,1,@EXPECTEDDID,@CHALLANEDITMODE, @PENDINGAMOUNT)
   END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_SAVEFVUDEDUCTIONDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUDEDUCTIONDETAIL]
    @DEDUCTIONSERIALNO INT,
    @DEDUCTIONID INT,
	@QUARTER INT,
	@BRANCHID INT,
	@FORMID INT,
	@DEDUCTEESERIALNO INT,
	@DEDUCTIONERETURNID INT,
	@MODE CHAR(1),
	@INCOMETAX NUMERIC(13,2),
	@SURCHARGE NUMERIC(13,2),
	@EDUCATIONCESS NUMERIC(13,2),
	@TOTALDEDUCTED NUMERIC(14,2),
	@PAYMENTMADE NUMERIC(13,2),
	@PAYMENTDATE SMALLDATETIME,
	@DEDUCTEDDATE SMALLDATETIME=NULL,
	@SECTIONID INT,
	@INCOMETAXRATE NUMERIC(6,3) ,
	@SURCHARGERATE NUMERIC(6,3),
	@EDUCATIONCESSRATE NUMERIC(6,3),
	@TAXRATE NUMERIC(7,4),
	@ISTAXINFOEDITABLE BIT,
	@NONDEDREASON TINYINT,
	@ISBOOKENTRY BIT,
	@ISGROSSINGUP BIT,
	@CHALLANERETURNID INT
AS
BEGIN
	DECLARE @MASTERDEDUCTIONSERIALNO INT,@CORRDEDUCTIONSERIALNO INT,@DEDUCTIONCOUNT INT
	SET @MASTERDEDUCTIONSERIALNO =-1;
	SET @CORRDEDUCTIONSERIALNO =-1;
	SET @DEDUCTIONID=-1
	SET @DEDUCTIONSERIALNO=-1
	/*GETTING THE DEDUCTIONID AND SERIALNO FROM DEDUCTIONDETAIL TABLE*/
	SELECT @DEDUCTIONID=ISNULL(MAX(DD.DEDUCTIONID),-1),
		   @DEDUCTIONSERIALNO=ISNULL(MAX(DD.SERIALNO),-1),
		   @DEDUCTIONCOUNT=COUNT(DD.DEDUCTIONID)
	  FROM DEDUCTIONDETAIL 	DD
		WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.[QUARTER]=@QUARTER AND
		  DD.PAYMENTDATE=@PAYMENTDATE AND DD.INCOMETAX=@INCOMETAX AND
		  DD.SURCHARGE=@SURCHARGE AND DD.EDUCATIONCESS=@EDUCATIONCESS AND
		  DD.TOTALDEDUCTED=@TOTALDEDUCTED AND DD.SECTIONID=@SECTIONID AND DD.PAYMENTMADE=@PAYMENTMADE
		GROUP BY DD.BRANCHID
	IF(@DEDUCTIONCOUNT<>1)
	BEGIN
		SET @DEDUCTIONID=NULL
		SET @DEDUCTIONSERIALNO=-1
	END
    /*IF DEDUCTIONID AND SERIALNO DOESNOT EXISTS THEN TAKING MAX SERIALNO FROM DEDUCTIONDETAIL AND CORRDEDUCTION TABLE AND SETTING SERIALNO*/
	IF(@DEDUCTIONSERIALNO = -1)
	BEGIN
	SELECT @CORRDEDUCTIONSERIALNO=ISNULL(MAX(DEDUCTIONSERIALNO),0)+1 FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
																	WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
	SELECT @MASTERDEDUCTIONSERIALNO=ISNULL(MAX(SERIALNO),0)+1 FROM DEDUCTIONDETAIL WITH(NOLOCK)
															 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER;
	  IF(@MASTERDEDUCTIONSERIALNO>@CORRDEDUCTIONSERIALNO)
	  BEGIN
		  SET @DEDUCTIONSERIALNO=@MASTERDEDUCTIONSERIALNO
	  END
	  ELSE
	  BEGIN
		  SET @DEDUCTIONSERIALNO=@CORRDEDUCTIONSERIALNO
	  END
	END
	INSERT INTO CORRDEDUCTIONDETAIL(DEDUCTIONID,DEDUCTIONSERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEESERIALNO,DEDUCTIONERETURNID,
									MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,
									INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,
									ISGROSSINGUP,CHALLANERETURNID,CORRECTIONSTATUS)
							VALUES (@DEDUCTIONID,@DEDUCTIONSERIALNO,@QUARTER,@BRANCHID,@FORMID,@DEDUCTEESERIALNO,@DEDUCTIONERETURNID,
									@MODE,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@TOTALDEDUCTED,@PAYMENTMADE,@PAYMENTDATE,@DEDUCTEDDATE,@SECTIONID,
									@INCOMETAXRATE,@SURCHARGERATE,@EDUCATIONCESSRATE,@TAXRATE,@ISTAXINFOEDITABLE,@NONDEDREASON,@ISBOOKENTRY,
									@ISGROSSINGUP,@CHALLANERETURNID,1)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUEMPLOYEE')
DROP PROCEDURE USP_TDS_SAVEFVUEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUEMPLOYEE]
     @BRANCHID INT,
     @FORMID SMALLINT,
     @QUARTER SMALLINT,
     @DEDUCTEESERIALNO INT,
     @DEDUCTEEID INT,
     @NAME VARCHAR(75),
     @PAN VARCHAR(10),
     @PANREFERENCE VARCHAR(10),
     @EMPLOYMENTFROM SMALLDATETIME=NULL,
     @EMPLOYMENTTO SMALLDATETIME=NULL,
     @FINANCIALYEAR INT ,
     @PANFLAG CHAR,
     @PANCOUNTER INT
AS
BEGIN
  DECLARE @ADDRESS1 VARCHAR(25),@ADDRESS2 VARCHAR(25),@ADDRESS3 VARCHAR(25),@ADDRESS4 VARCHAR(25),@ADDRESS5 VARCHAR(25)
  DECLARE @PINCODE VARCHAR(6),@PHONENO VARCHAR(15),@EMAILADDRESS VARCHAR(75),@DESIGNATION VARCHAR(25)
  DECLARE @STATEID INT;
  DECLARE @SALUTATION SMALLINT,@GENDER SMALLINT;
  DECLARE @ISSENIORCITIZEN BIT
  DECLARE @CORRDEDUCTEESERIALNO INT;
  SET @CORRDEDUCTEESERIALNO =-1;
  IF(@FINANCIALYEAR=2009)
  BEGIN
   SELECT @CORRDEDUCTEESERIALNO=DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) WHERE NAME=@NAME AND PAN=@PAN AND PANREFERENCE=@PANREFERENCE AND
                 BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
  END
  ELSE
  BEGIN
   SELECT @CORRDEDUCTEESERIALNO=DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) WHERE NAME=@NAME AND PAN=@PAN AND
                BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
  END
  IF(@CORRDEDUCTEESERIALNO=-1)
  BEGIN
    DECLARE @CEMAXSERIALNO INT,@MASTERMAXSERIALNO INT,@MASTERSERIALNO INT;
    SET @MASTERSERIALNO =-1
       IF(@FINANCIALYEAR=2009)
       BEGIN
     SELECT TOP 1 @DEDUCTEEID=D.DEDUCTEEID,@MASTERSERIALNO=E.SERIALNO,
         @SALUTATION=D.SALUTATION,@ADDRESS1=D.ADDRESS1,
         @ADDRESS2=D.ADDRESS2,@ADDRESS3=D.ADDRESS3,@ADDRESS4=D.ADDRESS4,
         @ADDRESS5=D.ADDRESS5,@STATEID=D.STATEID,@PINCODE=D.PINCODE,
         @GENDER=E.GENDER,@ISSENIORCITIZEN=E.ISSENIORCITIZEN,
         @PHONENO=D.PHONENO,@DESIGNATION=E.DESIGNATION,
         @EMPLOYMENTFROM=E.EMPLOYMENTFROM,@EMPLOYMENTTO=E.EMPLOYMENTTO,
         @EMAILADDRESS=D.EMAILADDRESS FROM DEDUCTEE D WITH(NOLOCK)
                 INNER JOIN
                 EMPLOYEE E WITH(NOLOCK)
                ON D.DEDUCTEEID=E.DEDUCTEEID
                 LEFT JOIN
                   CORREMPLOYEE CE WITH(NOLOCK)
                ON D.DEDUCTEEID=CE.DEDUCTEEID AND
                   E.SERIALNO=CE.DEDUCTEESERIALNO AND
                   D.NAME=CE.NAME AND
                   D.PAN=CE.PAN AND
                   ISNULL(D.PANREFERENCE,'')=CE.PANREFERENCE AND
                   D.BRANCHID=CE.BRANCHID
                   AND CE.FORMID=@FORMID AND CE.QUARTER=@QUARTER
                WHERE D.BRANCHID=@BRANCHID
                 AND D.NAME=@NAME
                 AND D.PAN=@PAN
                 AND ISNULL(D.PANREFERENCE,'')=@PANREFERENCE
                 AND CE.DEDUCTEEID IS NULL
               ORDER BY D.DEDUCTEEID
    END
    ELSE
    BEGIN
     SELECT TOP 1 @DEDUCTEEID=D.DEDUCTEEID,@MASTERSERIALNO=E.SERIALNO,
         @SALUTATION=D.SALUTATION,@ADDRESS1=D.ADDRESS1,
         @ADDRESS2=D.ADDRESS2,@ADDRESS3=D.ADDRESS3,@ADDRESS4=D.ADDRESS4,
         @ADDRESS5=D.ADDRESS5,@STATEID=D.STATEID,@PINCODE=D.PINCODE,
         @GENDER=E.GENDER,@ISSENIORCITIZEN=E.ISSENIORCITIZEN,
         @PHONENO=D.PHONENO,@DESIGNATION=E.DESIGNATION,
         @EMPLOYMENTFROM=E.EMPLOYMENTFROM,@EMPLOYMENTTO=E.EMPLOYMENTTO,
         @EMAILADDRESS=D.EMAILADDRESS FROM DEDUCTEE D WITH(NOLOCK)
                 INNER JOIN
                 EMPLOYEE E WITH(NOLOCK)
                ON D.DEDUCTEEID=E.DEDUCTEEID
                 LEFT JOIN
                   CORREMPLOYEE CE WITH(NOLOCK)
ON D.DEDUCTEEID=CE.DEDUCTEEID AND
                   E.SERIALNO=CE.DEDUCTEESERIALNO AND
                   D.NAME=CE.NAME AND
                   D.PAN=CE.PAN AND
                   D.BRANCHID=CE.BRANCHID
                   AND CE.FORMID=@FORMID AND CE.QUARTER=@QUARTER
                WHERE D.BRANCHID=@BRANCHID
                 AND D.NAME=@NAME
                 AND D.PAN=@PAN
                 AND CE.DEDUCTEEID IS NULL
               ORDER BY D.DEDUCTEEID
    END
    /*DOES NOT EXISTS IN MASTER TABLE;SO GETTING MAX SERIALNO FROM BOTH EMPLOYEE AND CORREMPLOYEE TABLE AND SETTING SERIALNO*/
    IF(@MASTERSERIALNO=-1)
    BEGIN
    /*GETTING MAXSERIAL NUMBER FROM CORREMPLOYEE TABLE */
        SET @DEDUCTEEID=NULL
        SELECT @STATEID=STATEID FROM DEDUCTOR D WITH(NOLOCK)
              INNER  JOIN
            BRANCHDEDUCTORS BD WITH(NOLOCK)
             ON D.DEDUCTORID =BD.DEDUCTORID
            WHERE BRANCHID=@BRANCHID AND QUARTER=@QUARTER
     SELECT @CEMAXSERIALNO=(ISNULL(MAX(DEDUCTEESERIALNO),0))+1
       FROM CORREMPLOYEE
       WHERE BRANCHID=@BRANCHID
      AND FORMID=@FORMID
      AND QUARTER=@QUARTER
     /*GETTING MAXSERIAL NUMBER FROM MASTER TABLE*/
     SELECT @MASTERMAXSERIALNO=(ISNULL(MAX(E.SERIALNO),0))+1
       FROM DEDUCTEE D WITH(NOLOCK)
        INNER JOIN
       EMPLOYEE E WITH(NOLOCK)
      ON D.DEDUCTEEID=E.DEDUCTEEID
      WHERE D.BRANCHID=@BRANCHID
     /*SETTING THE MAX NUMBER FROM EITHER MASTER TABLE OR CORRNONEMPLOYEE TABLE*/
     IF(@MASTERMAXSERIALNO>@CEMAXSERIALNO)
     BEGIN
      SET @DEDUCTEESERIALNO=@MASTERMAXSERIALNO
     END
     ELSE
     BEGIN
      SET @DEDUCTEESERIALNO=@CEMAXSERIALNO
     END
    END
    ELSE
    BEGIN
     SET @DEDUCTEESERIALNO=@MASTERSERIALNO
    END
    INSERT INTO CORREMPLOYEE(BRANCHID,FORMID,QUARTER,DEDUCTEESERIALNO,DEDUCTEEID,NAME,PAN,PANREFERENCE,LASTPAN,LASTPANREFERENCE,
           SALUTATION,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS,
           GENDER,ISSENIORCITIZEN,DESIGNATION,
           EMPLOYMENTFROM,EMPLOYMENTTO,UPDATEINDICATOR,CORRECTIONSTATUS, PANFLAG, PANCOUNTER)
          VALUES(@BRANCHID,@FORMID,@QUARTER,@DEDUCTEESERIALNO,@DEDUCTEEID,@NAME,@PAN,@PANREFERENCE,@PAN,@PANREFERENCE,
           @SALUTATION,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS,
           @GENDER,@ISSENIORCITIZEN,@DESIGNATION,
           @EMPLOYMENTFROM,@EMPLOYMENTTO,1,1, @PANFLAG, @PANCOUNTER)
  END
  ELSE
  BEGIN
    SET @DEDUCTEESERIALNO=@CORRDEDUCTEESERIALNO
  END
  SELECT @DEDUCTEESERIALNO
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUNONEMPLOYEE')
DROP PROCEDURE USP_TDS_SAVEFVUNONEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUNONEMPLOYEE]
     @BRANCHID INT,
     @QUARTER SMALLINT,
     @FORMID SMALLINT,
     @DEDUCTEESERIALNO INT,
     @DEDUCTEEID INT,
     @NAME VARCHAR(75),
     @PAN VARCHAR(10),
     @PANREFERENCE VARCHAR(10),
     @ISAPPLICABLE26 BIT,
     @ISAPPLICABLE27 BIT,
     @ISTRANSPORTER BIT=NULL,
     @CODE SMALLINT,
     @FINANCIALYEAR INT ,
     @PANFLAG CHAR,
     @PANCOUNTER INT
AS
BEGIN
  DECLARE @ADDRESS1 VARCHAR(25),@ADDRESS2 VARCHAR(25),@ADDRESS3 VARCHAR(25),@ADDRESS4 VARCHAR(25),@ADDRESS5 VARCHAR(25),
  @PINCODE VARCHAR(6),@REFERENCENO VARCHAR(20),@PHONENO VARCHAR(15),@EMAILADDRESS VARCHAR(75);
  DECLARE @STATEID INT;
  DECLARE @SALUTATION SMALLINT;
  DECLARE @CORRDEDUCTEESERIALNO INT;
  SET @CORRDEDUCTEESERIALNO =-1
  IF(@FINANCIALYEAR=2009)
  BEGIN
   SELECT @CORRDEDUCTEESERIALNO=DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE NAME=@NAME AND PAN=@PAN AND PANREFERENCE=@PANREFERENCE AND
                 BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
  END
  ELSE
  BEGIN
   SELECT @CORRDEDUCTEESERIALNO=DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE NAME=@NAME AND PAN=@PAN AND
                 BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
  END
  IF(@CORRDEDUCTEESERIALNO=-1)
  BEGIN
      DECLARE @CNEMAXSERIALNO INT,@MASTERMAXSERIALNO INT,@MASTERSERIALNO INT
     SET @MASTERSERIALNO = -1;
      IF(@FINANCIALYEAR=2009)
      BEGIN
       SELECT TOP 1 @DEDUCTEEID=D.DEDUCTEEID,@MASTERSERIALNO=NE.SERIALNO,
           @ADDRESS1=D.ADDRESS1,@ADDRESS2=D.ADDRESS2,@ADDRESS3=D.ADDRESS3,
           @ADDRESS4=D.ADDRESS4,@ADDRESS5=D.ADDRESS5,@STATEID=D.STATEID,
           @PINCODE=D.PINCODE,@PHONENO=D.PHONENO,@EMAILADDRESS=D.EMAILADDRESS,
           @SALUTATION=D.SALUTATION FROM DEDUCTEE D WITH(NOLOCK)
                 INNER JOIN
                 NONEMPLOYEE NE WITH(NOLOCK)
                ON D.DEDUCTEEID=NE.DEDUCTEEID
                 LEFT JOIN
                   CORRNONEMPLOYEE CE WITH(NOLOCK)
                ON D.DEDUCTEEID=CE.DEDUCTEEID AND
                   NE.SERIALNO=CE.DEDUCTEESERIALNO AND
                   D.NAME=CE.NAME AND
                   D.PAN=CE.PAN AND
                   ISNULL(D.PANREFERENCE,'')=CE.PANREFERENCE AND
                   D.BRANCHID=CE.BRANCHID
                   AND CE.FORMID=@FORMID AND CE.QUARTER=@QUARTER
                WHERE D.BRANCHID=@BRANCHID
                 AND D.NAME=@NAME
                 AND D.PAN=@PAN
                 AND ISNULL(D.PANREFERENCE,'')=@PANREFERENCE
                 AND CE.DEDUCTEEID IS NULL
               ORDER BY D.DEDUCTEEID
     END
     ELSE
     BEGIN
      SELECT TOP 1 @DEDUCTEEID=D.DEDUCTEEID,@MASTERSERIALNO=NE.SERIALNO,
           @ADDRESS1=D.ADDRESS1,@ADDRESS2=D.ADDRESS2,@ADDRESS3=D.ADDRESS3,
           @ADDRESS4=D.ADDRESS4,@ADDRESS5=D.ADDRESS5,@STATEID=D.STATEID,
           @PINCODE=D.PINCODE,@PHONENO=D.PHONENO,@EMAILADDRESS=D.EMAILADDRESS,
           @SALUTATION=D.SALUTATION FROM DEDUCTEE D WITH(NOLOCK)
                 INNER JOIN
                 NONEMPLOYEE NE WITH(NOLOCK)
                ON D.DEDUCTEEID=NE.DEDUCTEEID
                 LEFT JOIN
                   CORRNONEMPLOYEE CE WITH(NOLOCK)
                ON D.DEDUCTEEID=CE.DEDUCTEEID AND
                   NE.SERIALNO=CE.DEDUCTEESERIALNO AND
                   D.NAME=CE.NAME AND
                   D.PAN=CE.PAN AND
                   ISNULL(D.PANREFERENCE,'')=CE.PANREFERENCE AND
                   D.BRANCHID=CE.BRANCHID
                   AND CE.FORMID=@FORMID AND CE.QUARTER=@QUARTER
                WHERE D.BRANCHID=@BRANCHID
                 AND D.NAME=@NAME
                 AND D.PAN=@PAN
                 AND CE.DEDUCTEEID IS NULL
               ORDER BY D.DEDUCTEEID
     END
    IF(@MASTERSERIALNO=-1)
    BEGIN
     SET @DEDUCTEEID=NULL
     SELECT @STATEID=STATEID FROM DEDUCTOR D
              INNER  JOIN
            BRANCHDEDUCTORS BD
 ON D.DEDUCTORID =BD.DEDUCTORID
            WHERE BRANCHID=@BRANCHID AND QUARTER=@QUARTER
     /*GETTING MAXSERIAL NUMBER FROM CORRNONEMPLOYEE TABLE */
     SELECT @CNEMAXSERIALNO=(ISNULL(MAX(DEDUCTEESERIALNO),0))+1
       FROM CORRNONEMPLOYEE
       WHERE BRANCHID=@BRANCHID
      AND FORMID=@FORMID
      AND QUARTER=@QUARTER
     /*GETTING MAXSERIAL NUMBER FROM MASTER TABLE*/
     SELECT @MASTERMAXSERIALNO=(ISNULL(MAX(NE.SERIALNO),0))+1
       FROM DEDUCTEE D WITH(NOLOCK)
        INNER JOIN
       NONEMPLOYEE NE WITH(NOLOCK)
      ON D.DEDUCTEEID=NE.DEDUCTEEID
      WHERE D.BRANCHID=@BRANCHID
     /*SETTING THE MAX NUMBER FROM EITHER MASTER TABLE OR CORRNONEMPLOYEE TABLE*/
     IF(@MASTERMAXSERIALNO>@CNEMAXSERIALNO)
     BEGIN
      SET @DEDUCTEESERIALNO=@MASTERMAXSERIALNO
     END
     ELSE
     BEGIN
      SET @DEDUCTEESERIALNO=@CNEMAXSERIALNO
     END
      END
      ELSE
      BEGIN
       SET @DEDUCTEESERIALNO=@MASTERSERIALNO
      END
   INSERT INTO CORRNONEMPLOYEE(BRANCHID,QUARTER,FORMID,DEDUCTEESERIALNO,DEDUCTEEID,NAME,PAN,PANREFERENCE,LASTPAN,LASTPANREFERENCE,
          SALUTATION,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,
          PINCODE,PHONENO,EMAILADDRESS,
          ISAPPLICABLE26,ISAPPLICABLE27,ISTRANSPORTER,CODE,UPDATEINDICATOR,CORRECTIONSTATUS, PANFLAG, PANCOUNTER)
           VALUES(@BRANCHID,@QUARTER,@FORMID,@DEDUCTEESERIALNO,@DEDUCTEEID,@NAME,@PAN,@PANREFERENCE,@PAN,@PANREFERENCE,
            @SALUTATION,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,
            @PINCODE,@PHONENO,@EMAILADDRESS,
            @ISAPPLICABLE26,@ISAPPLICABLE27,@ISTRANSPORTER,@CODE,1,1, @PANFLAG, @PANCOUNTER)
  END
  ELSE
  BEGIN
   SET @DEDUCTEESERIALNO=@CORRDEDUCTEESERIALNO
  END
  SELECT @DEDUCTEESERIALNO
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUREGULARCHALLANDETAIL')
DROP PROCEDURE USP_TDS_SAVEFVUREGULARCHALLANDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUREGULARCHALLANDETAIL]
		  @BRANCHID INT,
		  @FORMID SMALLINT,
		  @QUARTER SMALLINT,
		  @ERETURNID INT,
		  @LINKDEDCOUNT INT,
		  @ISNILCHALLAN VARCHAR(1),
		  @ISUPDATECHALLAN TINYINT,
		  @MODEOFPAYMENT TINYINT,
		  @BANKCHALLANNO VARCHAR(5),
		  @LASTBANKCHALLANNO VARCHAR(5),
		  @TRNVOUCHERNO VARCHAR(9),
		  @LASTTRNVOUCHERNO VARCHAR(9),
		  @BANKID INT,
		  @LASTBANKID INT,
		  @CHALLANPAIDDATE SMALLDATETIME=NULL,
		  @LASTCHALLANPAIDDATE SMALLDATETIME=NULL,
		  @DATEOFDEBIT SMALLDATETIME=NULL,
		  @SECTIONID INT,
		  @INCOMETAX NUMERIC(14,2),
		  @SURCHARGE NUMERIC(14,2),
		  @EDUCATIONCESS NUMERIC(14,2),
		  @INTEREST NUMERIC(14,2),
		  @PENALTY NUMERIC(14,2),
		  @OTHERS NUMERIC(14,2),
		  @CHALLANTOTAL NUMERIC(14,2),
		  @LASTCHALLANTOTAL NUMERIC(14,2),
		  @ISCOMPANY BIT,
		  @CHEQUENO VARCHAR(15),
		  @CHEQUEDATE SMALLDATETIME=NULL,
		  @CHEQUEDRAWNON VARCHAR(50),
		  @TVRECEIPTNUMBER VARCHAR(7),
		  @TRANREFNO VARCHAR(20),
		  @SERIALNO INT
AS
BEGIN
			DECLARE @CHALLANID INT
			INSERT INTO CHALLANDETAIL(BRANCHID,FORMID,[QUARTER],ERETURNID,LINKDEDCOUNT,ISNILCHALLAN,ISUPDATECHALLAN,MODEOFPAYMENT,BANKCHALLANNO,
									  LASTBANKCHALLANNO,TRNVOUCHERNO,LASTTRNVOUCHERNO,BANKID,LASTBANKID,CHALLANPAIDDATE,LASTCHALLANPAIDDATE,
									  DATEOFDEBIT,SECTIONID,INCOMETAX,SURCHARGE,EDUCATIONCESS,INTEREST,PENALTY,OTHERS,CHALLANTOTAL,LASTCHALLANTOTAL,
									  ISCOMPANY,CHEQUENO,CHEQUEDATE,CHEQUEDRAWNON,TVRECEIPTNUMBER,TRANREFNO,SERIALNO)
							   VALUES(@BRANCHID,@FORMID,@QUARTER,@ERETURNID,@LINKDEDCOUNT,@ISNILCHALLAN,@ISUPDATECHALLAN,@MODEOFPAYMENT,@BANKCHALLANNO,
									  @LASTBANKCHALLANNO,@TRNVOUCHERNO,@LASTTRNVOUCHERNO,@BANKID,@LASTBANKID,@CHALLANPAIDDATE,@LASTCHALLANPAIDDATE,
									  @DATEOFDEBIT,@SECTIONID,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@INTEREST,@PENALTY,@OTHERS,@CHALLANTOTAL,@LASTCHALLANTOTAL,
									  @ISCOMPANY,@CHEQUENO,@CHEQUEDATE,@CHEQUEDRAWNON,@TVRECEIPTNUMBER,@TRANREFNO,@SERIALNO)
			SET @CHALLANID=SCOPE_IDENTITY();
		SELECT @CHALLANID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUREGULARDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_SAVEFVUREGULARDEDUCTIONDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUREGULARDEDUCTIONDETAIL]
  @BRANCHID INT,
  @FORMID INT,
  @QUARTER INT,
  @DEDUCTEEID INT,
  @ERETURNID INT,
  @MODE CHAR(1),
  @INCOMETAX NUMERIC(13,2),
  @SURCHARGE NUMERIC(13,2),
  @EDUCATIONCESS NUMERIC(13,2),
  @TOTALDEDUCTED NUMERIC(14,2),
  @PAYMENTMADE NUMERIC(13,2),
  @PAYMENTDATE SMALLDATETIME,
  @DEDUCTEDDATE SMALLDATETIME=NULL,
  @SECTIONID INT,
  @INCOMETAXRATE NUMERIC(6,3),
  @SURCHARGERATE NUMERIC(6,3),
  @EDUCATIONCESSRATE NUMERIC(6,3),
  @TAXRATE NUMERIC(7,4),
  @ISTAXINFOEDITABLE BIT,
  @NONDEDREASON TINYINT,
  @ISBOOKENTRY BIT,
  @ISGROSSINGUP BIT,
  @UTN VARCHAR(16),
  @ISPANVALIDBYITD BIT,
  @CHALLANID INT ,
  @ENTRYTYPE SMALLINT
AS
BEGIN
   DECLARE @DEDUCTIONID INT,@SERIALNO INT;
   SET @DEDUCTIONID =-1
   SET @SERIALNO =-1
   DECLARE @PARTPAYMENTID INT;
   SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0)+1,@PARTPAYMENTID=ISNULL(MAX(PARTPAYMENTID),0)+1 FROM DEDUCTIONDETAIL WITH(NOLOCK)
      WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
   INSERT INTO DEDUCTIONDETAIL(BRANCHID,FORMID,QUARTER,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,TOTALDEDUCTED,PAYMENTMADE,
          PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,
          NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,SERIALNO,
          ORGPAYMENTMADE,ORGINCOMETAX,ORGEDUCATIONCESS,ORGSURCHARGE,ORGTOTALDEDUCTED,PARTPAYMENTID,ENTRYTYPE)
         VALUES(@BRANCHID,@FORMID,@QUARTER,@DEDUCTEEID,@ERETURNID,@MODE,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,@TOTALDEDUCTED,@PAYMENTMADE,
          @PAYMENTDATE,@DEDUCTEDDATE,@SECTIONID,@INCOMETAXRATE,@SURCHARGERATE,@EDUCATIONCESSRATE,@TAXRATE,@ISTAXINFOEDITABLE,
          @NONDEDREASON,@ISBOOKENTRY,@ISGROSSINGUP,@UTN,@ISPANVALIDBYITD,@SERIALNO,
          @PAYMENTMADE,@INCOMETAX,@EDUCATIONCESS,@SURCHARGE,@TOTALDEDUCTED,@PARTPAYMENTID,@ENTRYTYPE)
   SET @DEDUCTIONID=SCOPE_IDENTITY();
   IF(@CHALLANID<>-1)
   BEGIN
    INSERT INTO DEDCHALINK(BRANCHID,CHALLANID,DEDUCTIONID)
        VALUES(@BRANCHID,@CHALLANID,@DEDUCTIONID)
   END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveFVURegularDeductor')
DROP PROCEDURE USP_TDS_SaveFVURegularDeductor
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveFVURegularDeductor]
		@BRANCHID INT,
		@QUARTER INT,
		@DEDUCTORNAME VARCHAR(75),			
		@ADDRESS1 VARCHAR(25),
		@ADDRESS2 VARCHAR(25),
		@ADDRESS3 VARCHAR(25),
		@ADDRESS4 VARCHAR(25),
		@ADDRESS5 VARCHAR(25),
		@STATEID INT,
		@ISADDRCHANGED BIT,
		@FINANCIALYEAR INT,
		@TAN VARCHAR(10),
		@PAN VARCHAR(10),
		@PINCODE VARCHAR(6),
		@EMAILADDRESS VARCHAR(75),
		@STDCODE VARCHAR(5),
		@PHONENO VARCHAR(10),
		@ISRESIDENT BIT,
		@ISTDSEXISTING BIT,
		@FAXNO VARCHAR(10),
		@RETURNTYPE TINYINT,
		@ISAOAPPROVED BIT,
		@AOAPPROVALNUM VARCHAR(25),
		@AODESIGNATION VARCHAR(30),			
		@STATUSID INT,
		@DEDUCTORTYPEID INT,
		@GOVTADDSTATEID INT,
		@GOVTADDPAOCODE VARCHAR(20),
		@GOVTADDPAOREGNNO VARCHAR(20),
		@GOVTADDDDOCODE VARCHAR(20),
		@GOVTADDDDOREGNNO VARCHAR(20),
		@GOVTADDMINISTRY INT,
		@GOVTADDOTHERNAME VARCHAR(20),
		@ALTERNATEEMAILADDRESS VARCHAR(75) = NULL,
		@ALTERNATESTDCODE VARCHAR(5) = NULL,
		@ALTERNATEPHONENO VARCHAR(10) = NULL,
		@GOVTADDAIN VARCHAR(10) = NULL,
		@TANREGISTRATION VARCHAR(10) = NULL,
		@GSTIN VARCHAR(15) = NULL
AS
BEGIN	
			DECLARE @DEDUCTORID INT,@PREVIOUSTATUSID INT,@SECTIONID INT;
			SET @DEDUCTORID =-1;SET @PREVIOUSTATUSID =-1;SET @SECTIONID =-1;
			SELECT @DEDUCTORID=D.DEDUCTORID,@PREVIOUSTATUSID=D.STATUSID
				 FROM DEDUCTOR D 
				INNER JOIN BRANCHDEDUCTORS BD ON D.DEDUCTORID=BD.DEDUCTORID 
				WHERE BD.BRANCHID=@BRANCHID AND BD.QUARTER=@QUARTER
			IF (@DEDUCTORID <> -1)
				BEGIN			
					UPDATE DEDUCTOR SET DEDUCTORNAME=@DEDUCTORNAME,
										ADDRESS1=@ADDRESS1,
										ADDRESS2=@ADDRESS2,
										ADDRESS3=@ADDRESS3,
										ADDRESS4=@ADDRESS4,
										ADDRESS5=@ADDRESS5,
										STATEID=@STATEID,
										ISADDRCHANGED=@ISADDRCHANGED,
										FINANCIALYEAR=@FINANCIALYEAR,
										TAN=@TAN,
										PAN=@PAN,
										PINCODE=@PINCODE,
										EMAILADDRESS=@EMAILADDRESS,
										STDCODE=@STDCODE,
										PHONENO=@PHONENO,
										ISRESIDENT=@ISRESIDENT,
										ISTDSEXISTING=@ISTDSEXISTING,
										FAXNO=@FAXNO,
										RETURNTYPE=@RETURNTYPE,
										ISAOAPPROVED=@ISAOAPPROVED,
										--AOAPPROVALNUM=@AOAPPROVALNUM,
										AODESIGNATION=@AODESIGNATION,
										STATUSID=@STATUSID,
										DEDUCTORTYPEID=@DEDUCTORTYPEID,
										GOVTADDSTATEID=@GOVTADDSTATEID,
										GOVTADDPAOCODE=@GOVTADDPAOCODE,
										GOVTADDPAOREGNNO=@GOVTADDPAOREGNNO,
										GOVTADDDDOCODE=@GOVTADDDDOCODE,
										GOVTADDDDOREGNNO=@GOVTADDDDOREGNNO,
										GOVTADDMINISTRY=@GOVTADDMINISTRY,
										GOVTADDOTHERNAME=@GOVTADDOTHERNAME,
										ALTERNATESTD=@ALTERNATESTDCODE,
										ALTERNATEPHONE=@ALTERNATEPHONENO,
										ALTERNATEEMAIL=@ALTERNATEEMAILADDRESS,
										GOVTADDAIN=@GOVTADDAIN,
										TANREGISTRATION = @TANREGISTRATION,
										GSTIN = @GSTIN
								   FROM DEDUCTOR D
										INNER JOIN
										BRANCHDEDUCTORS BD
									 ON D.DEDUCTORID=BD.DEDUCTORID 
								  WHERE BD.BRANCHID=@BRANCHID AND BD.QUARTER=@QUARTER
					IF(@PREVIOUSTATUSID<>@STATUSID)
							BEGIN
								IF(@STATUSID=1)
									BEGIN
										SET @SECTIONID=1;
									END
								ELSE IF(@STATUSID=2)
									BEGIN					
										SET @SECTIONID=2;
									END						
								UPDATE CHALLANDETAIL SET SECTIONID=@SECTIONID WHERE BRANCHID=@BRANCHID AND FORMID=1; 
								UPDATE DEDUCTIONDETAIL SET SECTIONID=@SECTIONID WHERE BRANCHID=@BRANCHID AND FORMID=1; 					
						 END
				END 
			ELSE 
				BEGIN
					INSERT INTO DEDUCTOR(DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,ISADDRCHANGED,FINANCIALYEAR,
											[TAN],PAN,PINCODE,EMAILADDRESS,STDCODE,PHONENO,ISRESIDENT,ISTDSEXISTING,FAXNO,RETURNTYPE,ISAOAPPROVED, 
											AODESIGNATION,STATUSID,DEDUCTORTYPEID,GOVTADDSTATEID,GOVTADDPAOCODE,GOVTADDPAOREGNNO,
											GOVTADDDDOCODE,GOVTADDDDOREGNNO,GOVTADDMINISTRY,GOVTADDOTHERNAME, ALTERNATEEMAIL, ALTERNATESTD, 
												ALTERNATEPHONE, GOVTADDAIN, TANREGISTRATION, GSTIN)
								 VALUES(@DEDUCTORNAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@ISADDRCHANGED,@FINANCIALYEAR,
										@TAN,@PAN,@PINCODE,@EMAILADDRESS,@STDCODE,@PHONENO, @ISRESIDENT,@ISTDSEXISTING,@FAXNO,@RETURNTYPE,@ISAOAPPROVED,
										@AODESIGNATION,@STATUSID,@DEDUCTORTYPEID,@GOVTADDSTATEID,@GOVTADDPAOCODE,@GOVTADDPAOREGNNO,
										@GOVTADDDDOCODE,@GOVTADDDDOREGNNO,@GOVTADDMINISTRY,@GOVTADDOTHERNAME, @ALTERNATEEMAILADDRESS, @ALTERNATESTDCODE,
										@ALTERNATEPHONENO, @GOVTADDAIN, @TANREGISTRATION, @GSTIN)
					SET @DEDUCTORID=SCOPE_IDENTITY();			
					INSERT INTO BRANCHDEDUCTORS(BRANCHID,[QUARTER],DEDUCTORID) 
										VALUES(@BRANCHID,@QUARTER,@DEDUCTORID);
				END		 
	  SELECT @DEDUCTORID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUREGULAREMPLOYEE')
DROP PROCEDURE USP_TDS_SAVEFVUREGULAREMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUREGULAREMPLOYEE]
		@BRANCHID INT,
		@SALUTATION VARCHAR(5),
		@NAME VARCHAR(75),
		@PAN VARCHAR(10),
		@PANREFERENCE VARCHAR(10),
		@ADDRESS1 VARCHAR(25),
		@ADDRESS2 VARCHAR(25),
		@ADDRESS3 VARCHAR(25),
		@ADDRESS4 VARCHAR(25),
		@ADDRESS5 VARCHAR(25),
		@STATEID INT,
		@PINCODE VARCHAR(6),
		@PHONENO VARCHAR(15),
		@EMAILADDRESS VARCHAR(75),
		@DESIGNATION VARCHAR(20),
		@EMPLOYMENTFROM SMALLDATETIME,
		@EMPLOYMENTTO SMALLDATETIME,
		@GENDER SMALLINT,
		@ISSENIORCITIZEN BIT,
		@FINANCIALYEAR INT
AS
BEGIN
		DECLARE @DEDUCTEEID INT,@SERIALNO INT
		SET @DEDUCTEEID =-1;
		SELECT @DEDUCTEEID=D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		WHERE BRANCHID=@BRANCHID AND NAME=@NAME AND PAN=@PAN AND PANREFERENCE=@PANREFERENCE
		IF(@DEDUCTEEID=-1)
		BEGIN
			INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,
								 ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS)
						 VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,
								@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS)
			SET @DEDUCTEEID=SCOPE_IDENTITY();
			SELECT @SERIALNO=(ISNULL(MAX(SERIALNO),0))+1 FROM DEDUCTEE D WITH(NOLOCK)
															  INNER JOIN
															  EMPLOYEE E WITH(NOLOCK)
														   ON D.DEDUCTEEID=E.DEDUCTEEID
														WHERE BRANCHID=@BRANCHID
			INSERT INTO EMPLOYEE(DEDUCTEEID,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,GENDER,ISSENIORCITIZEN,SERIALNO)
					VALUES(@DEDUCTEEID,@DESIGNATION,@EMPLOYMENTFROM,@EMPLOYMENTTO,@GENDER,@ISSENIORCITIZEN,@SERIALNO)
		END
		ELSE
		BEGIN
			UPDATE DEDUCTEE SET SALUTATION=@SALUTATION,
								NAME=@NAME,
								PAN=@PAN,
								PANREFERENCE=@PANREFERENCE,
								ADDRESS1=@ADDRESS1,
								ADDRESS2=@ADDRESS2,
								ADDRESS3=@ADDRESS3,
								ADDRESS4=@ADDRESS4,
								ADDRESS5=@ADDRESS5,
								STATEID=@STATEID,
								PINCODE=@PINCODE,
								PHONENO=@PHONENO,
								EMAILADDRESS=@EMAILADDRESS
						  WHERE DEDUCTEEID=@DEDUCTEEID
			UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,
								EMPLOYMENTFROM=@EMPLOYMENTFROM,
								EMPLOYMENTTO=@EMPLOYMENTTO,
								GENDER=@GENDER,
								ISSENIORCITIZEN=@ISSENIORCITIZEN
						  WHERE DEDUCTEEID=@DEDUCTEEID
		END
	SELECT @DEDUCTEEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUREGULARNONEMPLOYEE')
DROP PROCEDURE USP_TDS_SAVEFVUREGULARNONEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUREGULARNONEMPLOYEE]
		@BRANCHID INT,
		@SALUTATION VARCHAR(5),
		@NAME VARCHAR(75),
		@PAN VARCHAR(10),
		@PANREFERENCE VARCHAR(10),
		@ADDRESS1 VARCHAR(25),
		@ADDRESS2 VARCHAR(25),
		@ADDRESS3 VARCHAR(25),
		@ADDRESS4 VARCHAR(25),
		@ADDRESS5 VARCHAR(25),
		@STATEID INT,
		@PINCODE VARCHAR(6),
		@PHONENO VARCHAR(15),
		@EMAILADDRESS VARCHAR(75),
		@DEDUCTEECODE INT,
		@ISAPPLICABLE26 BIT,
		@ISAPPLICABLE27 BIT,
		@ISTRANSPORTER BIT,
		@FINANCIALYEAR INT
AS
BEGIN
		DECLARE @DEDUCTEEID INT,@SERIALNO INT
		SET @DEDUCTEEID =-1;
		SELECT @DEDUCTEEID=D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
		WHERE BRANCHID=@BRANCHID AND NAME=@NAME AND PAN=@PAN AND PANREFERENCE=@PANREFERENCE
		IF(@DEDUCTEEID=-1)
		BEGIN
			INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,
									 ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS)
							 VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,
									@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS)
			SET @DEDUCTEEID=SCOPE_IDENTITY();
			SELECT @SERIALNO=(ISNULL(MAX(SERIALNO),0))+1 FROM DEDUCTEE D WITH(NOLOCK)
																  INNER JOIN
																  NONEMPLOYEE NE WITH(NOLOCK)
															   ON D.DEDUCTEEID=NE.DEDUCTEEID
															WHERE BRANCHID=@BRANCHID
			INSERT INTO NONEMPLOYEE(DEDUCTEEID,DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,ISTRANSPORTER,SERIALNO)
						VALUES(@DEDUCTEEID,@DEDUCTEECODE,@ISAPPLICABLE26,@ISAPPLICABLE27,@ISTRANSPORTER,@SERIALNO)
		END
		ELSE
		BEGIN
			UPDATE DEDUCTEE SET SALUTATION=@SALUTATION,
								NAME=@NAME,
								PAN=@PAN,
								PANREFERENCE=@PANREFERENCE,
								ADDRESS1=@ADDRESS1,
								ADDRESS2=@ADDRESS2,
								ADDRESS3=@ADDRESS3,
								ADDRESS4=@ADDRESS4,
								ADDRESS5=@ADDRESS5,
								STATEID=@STATEID,
								PINCODE=@PINCODE,
								PHONENO=@PHONENO,
								EMAILADDRESS=@EMAILADDRESS
						  WHERE DEDUCTEEID=@DEDUCTEEID
			UPDATE NONEMPLOYEE SET DEDUCTEECODE=@DEDUCTEECODE,
								   ISTRANSPORTER=@ISTRANSPORTER,
								   ISAPPLICABLE26=@ISAPPLICABLE26,
								   ISAPPLICABLE27=@ISAPPLICABLE27
							 WHERE DEDUCTEEID=@DEDUCTEEID
		END
	SELECT @DEDUCTEEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUREGULARRESPONSIBLEPERSON')
DROP PROCEDURE USP_TDS_SAVEFVUREGULARRESPONSIBLEPERSON
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUREGULARRESPONSIBLEPERSON]
	@DEDUCTORID INT,
	@PERSONNAME VARCHAR(75),
	@ADDRESS1 VARCHAR(75),
	@ADDRESS2 VARCHAR(75),
	@ADDRESS3 VARCHAR(75),
	@ADDRESS4 VARCHAR(75),
	@ADDRESS5 VARCHAR(75),
	@STATEID INT,
	@PINCODE VARCHAR(6),
	@ISADDRCHANGED BIT,
	@STDCODE VARCHAR(5),
	@PHONENUMBER VARCHAR(10),
	@DESIGNATION VARCHAR(20),
	@EMAILADDRESS VARCHAR(75),
	@MOBILENO VARCHAR(12),
	@FAXNO VARCHAR(10),
	@GENDER CHAR(1),
	@FATHERNAME VARCHAR(75),
	@ALTERNATEEMAILADDRESS VARCHAR(75) = NULL,
	@ALTERNATESTDCODE VARCHAR(5) = NULL,
	@ALTERNATEPHONENO VARCHAR(10) = NULL
AS
	BEGIN
		DECLARE @PERSONID INT;
		SET @PERSONID =-1;
		SELECT @PERSONID=PERSONID FROM RESPONSIBLEPERSON WITH(NOLOCK) WHERE DEDUCTORID=@DEDUCTORID
		IF(@PERSONID=-1)
			BEGIN
				INSERT INTO RESPONSIBLEPERSON(DEDUCTORID,PERSONNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,ISADDRCHANGED,
											  DESIGNATION,EMAILADDRESS,STDCODE,PHONENO,MOBILENO,FAXNO,GENDER,FATHERNAME, ALTERNATEEMAIL, ALTERNATEPHONE, ALTERNATESTD) 
				VALUES(@DEDUCTORID,@PERSONNAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@PINCODE,@STATEID,@ISADDRCHANGED,@DESIGNATION,
					   @EMAILADDRESS,@STDCODE,@PHONENUMBER,@MOBILENO,@FAXNO,@GENDER,@FATHERNAME, @ALTERNATEEMAILADDRESS, @ALTERNATEPHONENO, @ALTERNATESTDCODE)
				SET @PERSONID=SCOPE_IDENTITY();                                       
			END
		ELSE
			BEGIN
				UPDATE RESPONSIBLEPERSON SET PERSONNAME=@PERSONNAME,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,
											 ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID,ISADDRCHANGED=@ISADDRCHANGED,DESIGNATION=@DESIGNATION,EMAILADDRESS=@EMAILADDRESS,STDCODE=@STDCODE,PHONENO=@PHONENUMBER,MOBILENO=@MOBILENO,
											 FAXNO=@FAXNO,GENDER=@GENDER,FATHERNAME=@FATHERNAME, ALTERNATEEMAIL = @ALTERNATEEMAILADDRESS,
											 ALTERNATESTD=@ALTERNATESTDCODE, ALTERNATEPHONE = @ALTERNATEPHONENO
				WHERE DEDUCTORID=@DEDUCTORID AND PERSONID=@PERSONID		                          
			END
		SELECT @PERSONID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUREGULARSALARYDETAIL')
DROP PROCEDURE USP_TDS_SAVEFVUREGULARSALARYDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUREGULARSALARYDETAIL]
			@BRANCHID INT,
			@DEDUCTEEID INT,
			@BASICSALARY NUMERIC(12,2),
			@TAXABLEALLOWANCE NUMERIC(12,2),
			@PERKACCUNFURNISHED NUMERIC(12,2),
			@PERKFURNISHEDVALUE NUMERIC(12,2),
			@COSTOFFURNITURE NUMERIC(12,2),
			@FURNITURERENTALS NUMERIC(12,2),
			@PERQVALUEOFFURNITURE  NUMERIC(12,2),
			@PERKFURNISHEDTOTAL NUMERIC(12,2),
			@RENTPAIDBYEMP NUMERIC(12,2),
			@VALUEOFPERQUISITES NUMERIC(12,2),
			@CONVEYANCE NUMERIC(12,2),
			@REMUNERATION NUMERIC(12,2),
			@TAXABLELTC NUMERIC(12,2),
			@OTHERBENEFITS NUMERIC(12,2),
			@PFINEXCESSOF12PERC NUMERIC(12,2),
			@EXCESSINTERESTCREDITED NUMERIC(12,2),
			@TOTALPERQUISITE NUMERIC(12,2),
			@TAXABLEPERQUISITES NUMERIC(12,2),
			@EXEMPTEDALLOWANCES NUMERIC(12,2),
			@GROSSSALARY NUMERIC(12,2),
			@DEDUCTIONUS16 NUMERIC(12,2),
			@INCOMEFROMSALARIES NUMERIC(12,2),
			@ISOTHERINCOMEDETAILSOPTED BIT,
			@SALARYFROMPREVEMP NUMERIC(12,2),
			@INCOMEFROMHOUSEPROPERTY NUMERIC(12,2),
			@INCOMEFROMBUSINESS NUMERIC(12,2),
			@CAPITALGAINS NUMERIC(12,2),
			@INCOMEFROMOTHERSOURCES NUMERIC(12,2),
			@OTHERINCOME NUMERIC(12,2),
			@GROSSTOTALINCOME NUMERIC(12,2),
			@TOTALDEDUNDERCHAPTERVIA NUMERIC(12,2),
			@TOTALTAXABLEINCOME NUMERIC(12,2),
			@TAXONTOTALINCOME NUMERIC(12,2),
			@SURCHARGE NUMERIC(12,2),
			@EDUCATIONCESS NUMERIC(12,2),
			@TOTALINCOMETAXPAYABLE NUMERIC(12,2),
			@RELIEFUS89 NUMERIC(12,2),
			@NETTAXPAYABLE NUMERIC(12,2),
			@TDSITDEDUCTED NUMERIC(12,2),
			@TDSSURCHARGEDEDUCTED NUMERIC(12,2),
			@EDUCESSDEDUCTED NUMERIC(12,2),
			@PREVEMPINCOMETAX NUMERIC(12,2),
			@PREVEMPSURCHARGE NUMERIC(12,2),
			@PREVEMPCESS NUMERIC(12,2),
			@MANUALINCOMETAX NUMERIC(12,2),
			@MANUALSURCHARGE NUMERIC(12,2),
			@MANUALCESS NUMERIC(12,2),
			@TOTALTDS NUMERIC(12,2),
			@TAXPAYABLE NUMERIC(12,2)
AS
BEGIN
		 BEGIN
			DECLARE @SALARYDETAILID INT
			INSERT INTO SALARYDETAIL(DEDUCTEEID,BRANCHID,BASICSALARY,TAXABLEALLOWANCE,PERKACCUNFURNISHED,PERKFURNISHEDVALUE,COSTOFFURNITURE,
										 FURNITURERENTALS,PERQVALUEOFFURNITURE,PERKFURNISHEDTOTAL,RENTPAIDBYEMP,VALUEOFPERQUISITES,CONVEYANCE,
										 REMUNERATION,TAXABLELTC,OTHERBENEFITS,PFINEXCESSOF12PERC,EXCESSINTERESTCREDITED,TOTALPERQUISITE,
										 TAXABLEPERQUISITES,EXEMPTEDALLOWANCES,GROSSSALARY,DEDUCTIONUS16,INCOMEFROMSALARIES,ISOTHERINCOMEDETAILSOPTED,
										 SALARYFROMPREVEMP,INCOMEFROMHOUSEPROPERTY,INCOMEFROMBUSINESS,CAPITALGAINS,INCOMEFROMOTHERSOURCES,OTHERINCOME,
										 GROSSTOTALINCOME,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,
										 TOTALINCOMETAXPAYABLE,RELIEFUS89,NETTAXPAYABLE,TDSITDEDUCTED,TDSSURCHARGEDEDUCTED,EDUCESSDEDUCTED,
										 PREVEMPINCOMETAX,PREVEMPSURCHARGE,PREVEMPCESS,MANUALINCOMETAX,MANUALSURCHARGE,MANUALCESS,TOTALTDS,TAXPAYABLE)
								VALUES  (@DEDUCTEEID,@BRANCHID,@BASICSALARY,@TAXABLEALLOWANCE,@PERKACCUNFURNISHED,@PERKFURNISHEDVALUE,@COSTOFFURNITURE,
										 @FURNITURERENTALS,@PERQVALUEOFFURNITURE,@PERKFURNISHEDTOTAL,@RENTPAIDBYEMP,@VALUEOFPERQUISITES,@CONVEYANCE,
										 @REMUNERATION,@TAXABLELTC,@OTHERBENEFITS,@PFINEXCESSOF12PERC,@EXCESSINTERESTCREDITED,@TOTALPERQUISITE,
										 @TAXABLEPERQUISITES,@EXEMPTEDALLOWANCES,@GROSSSALARY,@DEDUCTIONUS16,@INCOMEFROMSALARIES,@ISOTHERINCOMEDETAILSOPTED,
										 @SALARYFROMPREVEMP,@INCOMEFROMHOUSEPROPERTY,@INCOMEFROMBUSINESS,@CAPITALGAINS,@INCOMEFROMOTHERSOURCES,@OTHERINCOME,
										 @GROSSTOTALINCOME,@TOTALDEDUNDERCHAPTERVIA,@TOTALTAXABLEINCOME,@TAXONTOTALINCOME,@SURCHARGE,@EDUCATIONCESS,
										 @TOTALINCOMETAXPAYABLE,@RELIEFUS89,@NETTAXPAYABLE,@TDSITDEDUCTED,@TDSSURCHARGEDEDUCTED,@EDUCESSDEDUCTED,
										 @PREVEMPINCOMETAX,@PREVEMPSURCHARGE,@PREVEMPCESS,@MANUALINCOMETAX,@MANUALSURCHARGE,@MANUALCESS,@TOTALTDS,@TAXPAYABLE);
				SET @SALARYDETAILID=SCOPE_IDENTITY();
		 END
		 SELECT @SALARYDETAILID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEFVUSALARYDETAIL')
DROP PROCEDURE USP_TDS_SAVEFVUSALARYDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEFVUSALARYDETAIL]
 @BRANCHID INT,
 @DEDUCTEESERIALNO INT,
 @CORRDEDUCTEESERIALNO INT,
 @DEDUCTEEID INT,
 @EMPLOYEENAME VARCHAR(75),
 @GENDER SMALLINT,
 @ISSENIORCITIZEN BIT,
 @EMPLOYMENTFROM SMALLDATETIME,
 @EMPLOYMENTTO SMALLDATETIME,
 @PAN VARCHAR(10),
 @PANREFERENCE VARCHAR(10),
 @GROSSSALARY NUMERIC(12,2),
 @ET NUMERIC(12,2),
 @PT NUMERIC(12,2),
 @DEDUCTIONUS16 NUMERIC(12,2),
 @INCOMEFROMSALARIES NUMERIC(12,2),
 @OTHERINCOME NUMERIC(12,2),
 @GROSSTOTALINCOME NUMERIC(12,2),
 @VIA80CCE NUMERIC(12,2),
 @VIA80CCF NUMERIC(12,2),
 @VIAOTHERS NUMERIC(12,2),
 @TOTALDEDUNDERCHAPTERVIA NUMERIC(12,2),
 @TOTALTAXABLEINCOME NUMERIC(12,2),
 @TAXONTOTALINCOME NUMERIC(12,2),
 @SURCHARGE NUMERIC(12,2),
 @EDUCATIONCESS NUMERIC(12,2),
 @RELIEFUS89 NUMERIC(12,2),
 @NETTAXPAYABLE NUMERIC(12,2),
 @TOTALTDS NUMERIC(12,2),
 @TAXPAYABLE NUMERIC(12,2),
 @CORRECTIONSTATUS SMALLINT,
 @FINANCIALYEAR INT ,
 @PANFLAG CHAR,
 @PANCOUNTER INT
AS
 BEGIN
  IF(@FINANCIALYEAR = 2009)
   BEGIN
    SELECT @DEDUCTEESERIALNO = DEDUCTEESERIALNO
    FROM   CORREMPLOYEE WITH(NOLOCK)
    WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4 AND NAME = @EMPLOYEENAME AND PAN = @PAN
           AND ISNULL(PANREFERENCE,'')=ISNULL(@PANREFERENCE,'')
   END
  ELSE
   BEGIN
    SELECT @DEDUCTEESERIALNO = DEDUCTEESERIALNO
    FROM   CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4 AND NAME = @EMPLOYEENAME AND PAN = @PAN;
   END
  /*****IF DEDUCTEESERIALNO EXISTS UPADATING CORREMPLOYEE TABLE*****/
  IF(@DEDUCTEESERIALNO <> -1)
   BEGIN
    UPDATE CORREMPLOYEE SET GENDER = @GENDER,ISSENIORCITIZEN = @ISSENIORCITIZEN,EMPLOYMENTFROM = @EMPLOYMENTFROM,EMPLOYMENTTO = @EMPLOYMENTFROM
    WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4 AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO;
   END
  /*****IF DEDUCTEESERIALNO DOES NOT EXISTS SEARCHING IN EMPLOYEE TABLE AND UPDATING;
  IN EMPLOYEE TABLE ALSO DOESNOT EXISTS THEN TAKING MAX FROM CORREMPLOYEE AND EMPLOYEE TABLE AND INSERTING CORREMPLOYEE TABLE*****/
  ELSE
   BEGIN
    DECLARE @CEMAXSERIALNO INT,@MASTERMAXSERIALNO INT,@MASTERSERIALNO INT;
    SET @MASTERSERIALNO = -1;
       IF(@FINANCIALYEAR = 2009)
     BEGIN
      SELECT TOP 1 @DEDUCTEEID = D.DEDUCTEEID,@MASTERSERIALNO = E.SERIALNO
      FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
            LEFT JOIN CORREMPLOYEE CE WITH(NOLOCK) ON D.DEDUCTEEID = CE.DEDUCTEEID AND E.SERIALNO = CE.DEDUCTEESERIALNO
               AND D.NAME = CE.NAME AND D.PAN = CE.PAN AND ISNULL(D.PANREFERENCE,'') = CE.PANREFERENCE
               AND D.BRANCHID = CE.BRANCHID AND CE.FORMID = 1 AND CE.QUARTER = 4
      WHERE  D.BRANCHID = @BRANCHID AND D.NAME = @EMPLOYEENAME AND D.PAN = @PAN AND ISNULL(D.PANREFERENCE,'') = @PANREFERENCE
               AND CE.DEDUCTEEID IS NULL
      ORDER BY D.DEDUCTEEID;
     END
    ELSE
     BEGIN
      SELECT TOP 1 @DEDUCTEEID = D.DEDUCTEEID,@MASTERSERIALNO = E.SERIALNO
      FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
            LEFT JOIN CORREMPLOYEE CE WITH(NOLOCK) ON D.DEDUCTEEID = CE.DEDUCTEEID AND E.SERIALNO = CE.DEDUCTEESERIALNO AND D.NAME = CE.NAME
                  AND D.PAN = CE.PAN AND D.BRANCHID = CE.BRANCHID AND CE.FORMID = 1 AND CE.QUARTER = 4
      WHERE  D.BRANCHID = @BRANCHID AND D.NAME = @EMPLOYEENAME AND D.PAN = @PAN AND CE.DEDUCTEEID IS NULL
      ORDER BY D.DEDUCTEEID;
     END
    /*DOES NOT EXISTS IN MASTER TABLE;SO GETTING MAX SERIALNO FROM BOTH EMPLOYEE AND CORREMPLOYEE TABLE AND SETTING SERIALNO*/
    IF(@MASTERSERIALNO = -1)
     BEGIN
   SELECT @CEMAXSERIALNO = (ISNULL(MAX(DEDUCTEESERIALNO),0)) + 1
      FROM   CORREMPLOYEE
      WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4;
      SELECT @MASTERMAXSERIALNO = (ISNULL(MAX(E.SERIALNO),0)) + 1
      FROM   DEDUCTEE D INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
      WHERE  D.BRANCHID = @BRANCHID;
      IF(@MASTERMAXSERIALNO > @CEMAXSERIALNO)
       BEGIN
        SET @DEDUCTEESERIALNO = @MASTERMAXSERIALNO;
       END
      ELSE
       BEGIN
        SET @DEDUCTEESERIALNO = @CEMAXSERIALNO;
       END
     END
    ELSE
     BEGIN
      SET @DEDUCTEESERIALNO = @MASTERSERIALNO;
     END
     INSERT INTO CORREMPLOYEE(BRANCHID,FORMID,QUARTER,DEDUCTEESERIALNO,DEDUCTEEID,NAME,PAN,PANREFERENCE,LASTPAN,LASTPANREFERENCE,
            EMPLOYMENTFROM,EMPLOYMENTTO,UPDATEINDICATOR,CORRECTIONSTATUS, PANFLAG, PANCOUNTER, SALUTATION, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5,
           PINCODE, GENDER, ISSENIORCITIZEN, DESIGNATION, PHONENO, EMAILADDRESS)
              VALUES(@BRANCHID,1,4,@DEDUCTEESERIALNO,@DEDUCTEEID,@EMPLOYEENAME,@PAN,@PANREFERENCE,@PAN,@PANREFERENCE,
            @EMPLOYMENTFROM,@EMPLOYMENTTO,1,1, @PANFLAG, @PANCOUNTER,0,'','','','','','', 0, 0, '', '','')
   END
   IF NOT EXISTS(SELECT DEDUCTEESERIALNO FROM CORRSALARYDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND
         CORRDEDUCTEESERIALNO = @CORRDEDUCTEESERIALNO AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO)
   BEGIN
   INSERT INTO CORRSALARYDETAIL(DEDUCTEESERIALNO,CORRDEDUCTEESERIALNO,DEDUCTEEID,BRANCHID,GROSSSALARY,ET,PT,DEDUCTIONUS16,INCOMEFROMSALARIES,OTHERINCOME,GROSSTOTALINCOME,
           VIA80CCE,VIA80CCF,VIAOTHERS,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,TAXONTOTALINCOME,SURCHARGE,EDUCATIONCESS,RELIEFUS89,NETTAXPAYABLE,
           TOTALTDS,TAXPAYABLE,CORRECTIONSTATUS,RECORDSTATUS)
        VALUES  (@DEDUCTEESERIALNO,@CORRDEDUCTEESERIALNO,NULL,@BRANCHID,@GROSSSALARY,@ET,@PT,@DEDUCTIONUS16,@INCOMEFROMSALARIES,@OTHERINCOME,@GROSSTOTALINCOME,
           @VIA80CCE,@VIA80CCF,@VIAOTHERS,@TOTALDEDUNDERCHAPTERVIA,@TOTALTAXABLEINCOME,@TAXONTOTALINCOME,@SURCHARGE,@EDUCATIONCESS,@RELIEFUS89,@NETTAXPAYABLE,
           @TOTALTDS,@TAXPAYABLE,@CORRECTIONSTATUS,1);
   END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEHRAEXEMTIONAMOUNT')
DROP PROCEDURE USP_TDS_SAVEHRAEXEMTIONAMOUNT
GO
CREATE PROCEDURE [USP_TDS_SAVEHRAEXEMTIONAMOUNT]    
@GROSSAMOUNT2 NUMERIC(13,2),    
@GROSSAMOUNT1 NUMERIC(13,2),  
@EXEMPTAMT NUMERIC(13,2),    
@NETAMT NUMERIC(13,2),    
@ISMETRORESIDENT BIT,    
@RENTPAID  NUMERIC(13,2),    
@COMID INT,    
@MONTH INT,  
@BRANCHID INT    
AS    
 BEGIN    
 DECLARE @SALDETAILID INT, @TOTAMT NUMERIC(13,2),@AMT NUMERIC(13,2),@RENTAMT NUMERIC(13,2),@HRAAMT NUMERIC(13,2);    
 IF EXISTS(SELECT SALDETAILID FROM SALDETAIL WITH(NOLOCK) WHERE COMID = @COMID AND MONTHID = @MONTH AND SALARYHEADID = 3)    
  BEGIN  
  SELECT @SALDETAILID = SALDETAILID FROM SALDETAIL WITH(NOLOCK) WHERE COMID = @COMID AND MONTHID = @MONTH AND SALARYHEADID = 3;    
  UPDATE SALDETAIL SET GROSSAMT2 = @GROSSAMOUNT2, EXEMPTAMT= @EXEMPTAMT, NETAMT = GROSSAMT1 + @GROSSAMOUNT2 - @EXEMPTAMT
	 WHERE SALDETAILID = @SALDETAILID;    
  IF EXISTS(SELECT RENTDETAILID FROM RENTDETAILS WITH(NOLOCK) WHERE SALDETAILID = @SALDETAILID)    
   BEGIN  
     UPDATE RENTDETAILS SET ISMETRORESIDENT = @ISMETRORESIDENT, RENTPAID = @RENTPAID WHERE SALDETAILID = @SALDETAILID    
   END    
  ELSE    
   BEGIN    
   INSERT INTO RENTDETAILS(SALDETAILID,ISMETRORESIDENT, RENTPAID)    
   VALUES(@SALDETAILID, @ISMETRORESIDENT, @RENTPAID)    
   END    
  END    
 ELSE    
  BEGIN  
    IF NOT EXISTS(SELECT MONTHID FROM EMPWORKMONTH WITH(NOLOCK) WHERE MONTHID = @MONTH AND BRANCHID = @BRANCHID AND COMID = @COMID)      
   BEGIN      
    INSERT INTO EMPWORKMONTH(BRANCHID, COMID, MONTHID)      
    VALUES(@BRANCHID, @COMID,@MONTH)  
   END   
   INSERT INTO SALDETAIL(MONTHID, COMID, SALARYHEADID, GROSSAMT1, GROSSAMT2, GROSSAMT3, EXEMPTAMT, NETAMT)    
   VALUES(@MONTH, @COMID,3,0,@GROSSAMOUNT2,0, @EXEMPTAMT, @NETAMT)    
   SET @SALDETAILID = SCOPE_IDENTITY();    
   INSERT INTO RENTDETAILS(SALDETAILID,ISMETRORESIDENT, RENTPAID)    
   VALUES(@SALDETAILID, @ISMETRORESIDENT, @RENTPAID)    
  END      
  SELECT @SALDETAILID;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEIMPORT_F003TEXT')
DROP PROCEDURE USP_TDS_SAVEIMPORT_F003TEXT
GO
CREATE PROCEDURE [USP_TDS_SAVEIMPORT_F003TEXT]
@FORMID INT,
@QUARTER INT ,
@SECTIONID INT,
@BRANCHID INT,
@NAME VARCHAR(100),
@PAN VARCHAR(15),
@CODE INT=NULL,
@ADDRESS1 VARCHAR(30),
@ADDRESS2 VARCHAR(30),
@ADDRESS3 VARCHAR(30),
@ADDRESS4 VARCHAR(30),
@CITY VARCHAR(30),
@STATECODE INT,
@PINCODE VARCHAR(10)=NULL,
@PAYMENTMADE NUMERIC(13,2),
@PAYMENTDATE SMALLDATETIME,
@NONDEDUCTIONENTRY VARCHAR(2),
@ITRATE NUMERIC(5,3)=NULL,
@ITAMOUNT NUMERIC(13,2)=NULL,
@SURCHARGERATE NUMERIC(5,3)=NULL,
@SURCHARGEAMOUNT NUMERIC(13,2)=NULL,
@CESSRATE NUMERIC(5,3)=NULL,
@CESSAMOUNT NUMERIC(13,2)=NULL,
@TOTALTAXDEDUCTED NUMERIC(13,2)=NULL
AS
 BEGIN
  DECLARE @ID INT;
  INSERT INTO IMPORT_F003(FORMID,QUARTER,SECTIONID,BRANCHID,NAME,PAN,CODE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, STATECODE, PINCODE,
        PAYMENTMADE, PAYMENTDATE, NONDEDUCTIONENTRY, ITRATE, ITAMOUNT, SURCHARGERATE, SURCHARGEAMOUNT, CESSRATE, CESSAMOUNT,
        TOTALTAXDEDUCTED)
  VALUES(@FORMID, @QUARTER, @SECTIONID, @BRANCHID, @NAME, @PAN, @CODE, @ADDRESS1, @ADDRESS2, @ADDRESS3, @ADDRESS4, @CITY, @STATECODE, @PINCODE,
    @PAYMENTMADE, @PAYMENTDATE, @NONDEDUCTIONENTRY, @ITRATE, @ITAMOUNT, @SURCHARGERATE, @SURCHARGEAMOUNT, @CESSRATE, @CESSAMOUNT,
    @TOTALTAXDEDUCTED)
  SET @ID=SCOPE_IDENTITY();
  SELECT @ID;
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEIMPORT_F004TEXT')
DROP PROCEDURE USP_TDS_SAVEIMPORT_F004TEXT
GO
CREATE PROCEDURE [USP_TDS_SAVEIMPORT_F004TEXT]
@FORMID INT,
@QUARTER INT ,
@CUSTOMERID VARCHAR(20),
@SECTIONID INT,
@BRANCHID INT,
@NAME VARCHAR(100),
@PAN VARCHAR(15),
@CODE INT=NULL,
@ADDRESS1 VARCHAR(30),
@ADDRESS2 VARCHAR(30),
@ADDRESS3 VARCHAR(30),
@ADDRESS4 VARCHAR(30),
@CITY VARCHAR(30),
@STATECODE INT,
@PINCODE VARCHAR(10)=NULL,
@PAYMENTMADE NUMERIC(13,2),
@PAYMENTDATE SMALLDATETIME,
@NONDEDUCTIONENTRY VARCHAR(2),
@ITRATE NUMERIC(5,3)=NULL,
@ITAMOUNT NUMERIC(13,2)=NULL,
@SURCHARGERATE NUMERIC(5,3)=NULL,
@SURCHARGEAMOUNT NUMERIC(13,2)=NULL,
@CESSRATE NUMERIC(5,3)=NULL,
@CESSAMOUNT NUMERIC(13,2)=NULL,
@TOTALTAXDEDUCTED NUMERIC(13,2)=NULL
AS
 BEGIN
  DECLARE @ID INT;
  INSERT INTO IMPORT_F004(FORMID,QUARTER,CUSTOMERID,SECTIONID,BRANCHID,NAME,PAN,CODE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, STATECODE, PINCODE,
        PAYMENTMADE, PAYMENTDATE, NONDEDUCTIONENTRY, ITRATE, ITAMOUNT, SURCHARGERATE, SURCHARGEAMOUNT, CESSRATE, CESSAMOUNT,
        TOTALTAXDEDUCTED)
  VALUES(@FORMID, @QUARTER, @CUSTOMERID,@SECTIONID, @BRANCHID, @NAME, @PAN, @CODE, @ADDRESS1, @ADDRESS2, @ADDRESS3, @ADDRESS4, @CITY, @STATECODE, @PINCODE,
    @PAYMENTMADE, @PAYMENTDATE, @NONDEDUCTIONENTRY, @ITRATE, @ITAMOUNT, @SURCHARGERATE, @SURCHARGEAMOUNT, @CESSRATE, @CESSAMOUNT,
    @TOTALTAXDEDUCTED)
  SET @ID=SCOPE_IDENTITY();
  SELECT @ID;
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEIMPORTSTATUSDETAIL')
DROP PROCEDURE USP_TDS_SAVEIMPORTSTATUSDETAIL
GO
CREATE PROCEDURE USP_TDS_SAVEIMPORTSTATUSDETAIL    
@BRANCHID INT,    
@MONTHID INT,    
@ISVALID BIT,    
@ISREQACTIVE BIT,    
@QUEUEID VARCHAR(10),
@CURSTATUS INT    
AS    
BEGIN    
IF EXISTS(SELECT STATUSID FROM IMPORTSTATUS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID)    
BEGIN    
UPDATE IMPORTSTATUS SET ISVALID = @ISVALID, ISREQACTIVE = @ISREQACTIVE, QUEUEID=@QUEUEID, CURREQ = 1, CURSTATUS = @CURSTATUS    
WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID    
END    
ELSE    
BEGIN    
INSERT INTO IMPORTSTATUS(BRANCHID,MONTHID,ISVALID,ISREQACTIVE,QUEUEID,CURREQ,CURSTATUS)    
VALUES(@BRANCHID,@MONTHID,@ISVALID,@ISREQACTIVE,@QUEUEID,1,@CURSTATUS)    
END    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVELOAN')
DROP PROCEDURE USP_TDS_SAVELOAN
GO
CREATE PROCEDURE [USP_TDS_SAVELOAN]    
@ID INT,    
@NAME VARCHAR(100)    
AS    
 BEGIN    
 IF NOT EXISTS(SELECT NAME FROM LOAN WITH(NOLOCK) WHERE NAME = @NAME AND LOANID <> @ID)  
   BEGIN  
   IF(@ID <> -1)    
    BEGIN    
    UPDATE LOAN SET NAME = @NAME WHERE LOANID = @ID    
    END    
   ELSE    
    BEGIN    
    INSERT INTO LOAN(NAME) VALUES(@NAME)    
    SET @ID = SCOPE_IDENTITY();    
    END    
    END  
  ELSE  
    BEGIN  
  SET @ID = -2;  
    END  
    SELECT @ID;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveLoanDetails')
DROP PROCEDURE USP_TDS_SaveLoanDetails
GO
CREATE PROCEDURE USP_TDS_SaveLoanDetails        
@COMID INT,
@BRANCHID INT,   
@MONTHID INT,     
@LOANDETAILID INT,        
@LOANID INT,        
@GROSSAMT NUMERIC(13,2),        
@EXEMPTAMT NUMERIC(13,2)        
AS          
 BEGIN          
   DECLARE @TAXABLEPERKID INT, @TOTALGROSS NUMERIC(13,2), @TOTALEXEMPT NUMERIC(13,2);        
      IF NOT EXISTS(SELECT MONTHID FROM EMPWORKMONTH WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND COMID = @COMID)    
	  BEGIN    
		   INSERT INTO EMPWORKMONTH(BRANCHID, COMID, MONTHID)    
		   VALUES(@BRANCHID, @COMID,@MONTHID)
	  END   
   IF (@LOANDETAILID <> -1)        
    BEGIN         
       UPDATE LOANDETAIL SET GROSSAMT = @GROSSAMT, EXEMPTAMT = @EXEMPTAMT, NETAMT = @GROSSAMT - @EXEMPTAMT, LOANID = @LOANID        
		FROM LOANDETAIL         
		WHERE LOANDETAILID = @LOANDETAILID        
    END        
   ELSE        
    BEGIN        
   IF EXISTS(SELECT TAXABLEPERKID FROM TAXABLEPERQUISITE WHERE COMID = @COMID AND PERKID = 6 AND MONTHID = @MONTHID)         
    BEGIN        
		 SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WHERE COMID = @COMID AND PERKID = 6 AND MONTHID = @MONTHID;           
    END        
   ELSE        
    BEGIN        
     INSERT INTO TAXABLEPERQUISITE (MONTHID, COMID, PERKID, GROSSAMT, EXEMPTAMT, TAXABLEAMT)        
     VALUES(@MONTHID,@COMID,6,@GROSSAMT, @EXEMPTAMT, @GROSSAMT - @EXEMPTAMT)        
     SET @TAXABLEPERKID = SCOPE_IDENTITY();        
    END      
    IF NOT EXISTS(SELECT LOANDETAILID FROM LOANDETAIL WHERE LOANID = @LOANID AND TAXABLEPERKID = @TAXABLEPERKID)    
     BEGIN             
		   INSERT INTO LOANDETAIL(TAXABLEPERKID, LOANID, GROSSAMT, EXEMPTAMT, NETAMT)        
		   VALUES(@TAXABLEPERKID, @LOANID, @GROSSAMT, @EXEMPTAMT, @GROSSAMT - @EXEMPTAMT)          
		   SET @LOANDETAILID = SCOPE_IDENTITY();       
     END    
    ELSE    
     BEGIN    
		SELECT @LOANDETAILID = LOANDETAILID FROM LOANDETAIL WHERE LOANID = @LOANID    
		UPDATE LOANDETAIL SET GROSSAMT = @GROSSAMT, EXEMPTAMT = @EXEMPTAMT,     
			NETAMT = @GROSSAMT - @EXEMPTAMT       
		FROM LOANDETAIL         
		WHERE LOANDETAILID = @LOANDETAILID AND TAXABLEPERKID = @TAXABLEPERKID       
     END    
    END        
    SELECT @TOTALGROSS = SUM(LD.GROSSAMT), @TOTALEXEMPT = SUM(LD.EXEMPTAMT)          
    FROM LOANDETAIL LD         
    INNER JOIN TAXABLEPERQUISITE T ON T.TAXABLEPERKID = LD.TAXABLEPERKID        
    WHERE T.COMID  = @COMID AND T.MONTHID = @MONTHID
    UPDATE TAXABLEPERQUISITE SET GROSSAMT = @TOTALGROSS, EXEMPTAMT =  @TOTALEXEMPT,        
    TAXABLEAMT = @TOTALGROSS - @TOTALEXEMPT         
    WHERE COMID  = @COMID AND PERKID = 6  AND MONTHID = @MONTHID
  SELECT @LOANDETAILID;        
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVELOCKEDDETAILS')
DROP PROCEDURE USP_TDS_SAVELOCKEDDETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVELOCKEDDETAILS]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@FLAG BIT
AS
BEGIN
   DECLARE @RETURNVALUE INT
   SET @RETURNVALUE=0
   IF NOT EXISTS(SELECT BRANCHID FROM LOCKQUARTER WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER)
       BEGIN
		INSERT INTO LOCKQUARTER VALUES(@BRANCHID,@FORMID,@QUARTER,@FLAG,GETDATE())
		SET @RETURNVALUE=1
	   END
   ELSE
       BEGIN
		UPDATE LOCKQUARTER SET FLAG=@FLAG,LOCKTIME=GETDATE() WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
		SET @RETURNVALUE=1
	   END
	 SELECT @RETURNVALUE
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveMedicalReimbursement')
DROP PROCEDURE USP_TDS_SaveMedicalReimbursement
GO
CREATE PROCEDURE [USP_TDS_SaveMedicalReimbursement]
@COMID INT,
@BRANCHID INT,
@MONTHID INT,
@MEDICALREMID INT,
@GROSS NUMERIC(13,2),
@RECOVERED NUMERIC(13,2),
@NETAMT NUMERIC(13,2)
AS  
  BEGIN  
	 DECLARE @TAXABLEPERKID INT;	 
   IF NOT EXISTS(SELECT MONTHID FROM EMPWORKMONTH WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND COMID = @COMID)    
	  BEGIN    
		   INSERT INTO EMPWORKMONTH(BRANCHID, COMID, MONTHID)    
		   VALUES(@BRANCHID, @COMID,@MONTHID)
	  END   
	 IF EXISTS(SELECT TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK)  WHERE COMID = @COMID AND PERKID = 16 AND MONTHID = @MONTHID)
	   BEGIN
			SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH (NOLOCK) WHERE COMID = @COMID AND PERKID = 16 AND MONTHID = @MONTHID;
			IF EXISTS(SELECT MR.TAXABLEPERKID FROM MEDICALREIMBURSEMENT MR WITH (NOLOCK) 
					 INNER JOIN TAXABLEPERQUISITE TP WITH (NOLOCK) ON TP.TAXABLEPERKID = MR.TAXABLEPERKID
					 WHERE MEDICALREMID  = @MEDICALREMID AND TP.COMID = @COMID AND MONTHID = @MONTHID)
			   BEGIN
				UPDATE MEDICALREIMBURSEMENT SET GROSSAMT = @GROSS , EXEMPTAMT = @RECOVERED, NETAMT = @NETAMT
				WHERE TAXABLEPERKID = @TAXABLEPERKID AND MEDICALREMID = @MEDICALREMID				
			   END
			ELSE
			   BEGIN
				INSERT INTO MEDICALREIMBURSEMENT(TAXABLEPERKID,MEDICALREMID, GROSSAMT, EXEMPTAMT, NETAMT)
				VALUES(@TAXABLEPERKID,@MEDICALREMID,@GROSS, @RECOVERED,@NETAMT)
			   END
	   END
	 ELSE
	   BEGIN
		 INSERT INTO TAXABLEPERQUISITE (MONTHID, COMID, PERKID, GROSSAMT, EXEMPTAMT, TAXABLEAMT)
		 VALUES(@MONTHID,@COMID, 16, 0, 0, 0)
		 SET @TAXABLEPERKID = SCOPE_IDENTITY();
		 INSERT INTO MEDICALREIMBURSEMENT(TAXABLEPERKID,MEDICALREMID, GROSSAMT, EXEMPTAMT, NETAMT)
		 VALUES(@TAXABLEPERKID,@MEDICALREMID,@GROSS, @RECOVERED,@NETAMT)
	   END 
		UPDATE TAXABLEPERQUISITE SET GROSSAMT = MR.GROSSAMT, EXEMPTAMT = MR.EXEMPTAMT,TAXABLEAMT = MR.NETAMT
		FROM TAXABLEPERQUISITE TP
		INNER JOIN 
		(
			SELECT SUM(GROSSAMT)GROSSAMT, SUM(EXEMPTAMT)EXEMPTAMT, SUM(NETAMT)NETAMT,TAXABLEPERKID FROM MEDICALREIMBURSEMENT
			GROUP BY TAXABLEPERKID
		)
		MR ON TP.TAXABLEPERKID =  MR.TAXABLEPERKID
		WHERE TP.COMID = @COMID AND MONTHID = @MONTHID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEMSACCESSDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_SAVEMSACCESSDEDUCTIONDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEMSACCESSDEDUCTIONDETAIL]
	@DEDUCTIONID INT,
	@QUARTER INT,
	@BRANCHID INT,
	@FORMID INT,
	@DEDUCTEEID INT,
	@ERETURNID INT,
	@MODE CHAR(1),
	@INCOMETAX NUMERIC(13,2),
	@SURCHARGE NUMERIC(13,2),
	@EDUCATIONCESS NUMERIC(13,2),
	@TOTALDEDUCTED NUMERIC(14,2),
	@PAYMENTMADE NUMERIC(13,2),
	@PAYMENTDATE SMALLDATETIME,
	@DEDUCTEDDATE SMALLDATETIME=NULL,
	@SECTIONID INT,
	@INCOMETAXRATE NUMERIC(6,3) ,
	@SURCHARGERATE NUMERIC(6,3),
	@EDUCATIONCESSRATE NUMERIC(6,3),
	@TAXRATE NUMERIC(7,4),
	@ISTAXINFOEDITABLE BIT,
	@NONDEDREASON TINYINT,
	@ISBOOKENTRY BIT,
	@ISGROSSINGUP BIT,
	@UTN CHAR(16),
	@ISPANVALIDBYITD BIT,
	@ORGINCOMETAX NUMERIC(13,2),
	@ORGSURCHARGE NUMERIC(13,2),
	@ORGEDUCATIONCESS NUMERIC(13,2),
	@ORGTOTALDEDUCTED NUMERIC(14,2),
	@ORGPAYMENTMADE NUMERIC(14,2),
	@PARTPAYMENTID INT
AS
	BEGIN
		DECLARE @SERIALNO INT;
		SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0) + 1 FROM DEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
		INSERT INTO DEDUCTIONDETAIL(BRANCHID,FORMID,[QUARTER],SERIALNO,DEDUCTEEID,SECTIONID,ERETURNID,MODE,PAYMENTMADE,PAYMENTDATE,INCOMETAX,INCOMETAXRATE,
								    SURCHARGE,SURCHARGERATE,EDUCATIONCESS,EDUCATIONCESSRATE,TAXRATE,TOTALDEDUCTED,ISTAXINFOEDITABLE,DEDUCTEDDATE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,
									ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID)
							 VALUES(@BRANCHID,@FORMID,@QUARTER,@SERIALNO,@DEDUCTEEID,@SECTIONID,@ERETURNID,@MODE,@PAYMENTMADE,@PAYMENTDATE,@INCOMETAX,@INCOMETAXRATE,
									@SURCHARGE,@SURCHARGERATE,@EDUCATIONCESS,@EDUCATIONCESSRATE,@TAXRATE,@TOTALDEDUCTED,@ISTAXINFOEDITABLE,@DEDUCTEDDATE,@NONDEDREASON,@ISBOOKENTRY,@ISGROSSINGUP,@UTN,@ISPANVALIDBYITD,
									@ORGINCOMETAX,@ORGSURCHARGE,@ORGEDUCATIONCESS,@ORGTOTALDEDUCTED,@ORGPAYMENTMADE,@PARTPAYMENTID);
		SET @DEDUCTIONID = SCOPE_IDENTITY();
		SELECT @DEDUCTIONID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEMSACCESSPARTPAYMENTDETAIL')
DROP PROCEDURE USP_TDS_SAVEMSACCESSPARTPAYMENTDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVEMSACCESSPARTPAYMENTDETAIL]
	@DEDUCTIONID INT,
	@QUARTER INT,
	@BRANCHID INT,
	@FORMID INT,
	@DEDUCTEEID INT,
	@ERETURNID INT,
	@MODE CHAR(1),
	@INCOMETAX NUMERIC(13,2),
	@SURCHARGE NUMERIC(13,2),
	@EDUCATIONCESS NUMERIC(13,2),
	@TOTALDEDUCTED NUMERIC(14,2),
	@PAYMENTMADE NUMERIC(13,2),
	@PAYMENTDATE SMALLDATETIME,
	@DEDUCTEDDATE SMALLDATETIME=NULL,
	@SECTIONID INT,
	@INCOMETAXRATE NUMERIC(6,3) ,
	@SURCHARGERATE NUMERIC(6,3),
	@EDUCATIONCESSRATE NUMERIC(6,3),
	@TAXRATE NUMERIC(7,4),
	@ISTAXINFOEDITABLE BIT,
	@NONDEDREASON TINYINT,
	@ISBOOKENTRY BIT,
	@ISGROSSINGUP BIT,
	@UTN CHAR(16),
	@ISPANVALIDBYITD BIT,
	@ORGINCOMETAX NUMERIC(13,2),
	@ORGSURCHARGE NUMERIC(13,2),
	@ORGEDUCATIONCESS NUMERIC(13,2),
	@ORGTOTALDEDUCTED NUMERIC(14,2),
	@ORGPAYMENTMADE NUMERIC(14,2),
	@PARTPAYMENTID INT
AS
	BEGIN
		DECLARE @SERIALNO INT;
		SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)+1 FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
		INSERT INTO DEDUCTIONDETAIL(BRANCHID,FORMID,[QUARTER],SERIALNO,DEDUCTEEID,SECTIONID,ERETURNID,MODE,PAYMENTMADE,PAYMENTDATE,INCOMETAX,INCOMETAXRATE,
								    SURCHARGE,SURCHARGERATE,EDUCATIONCESS,EDUCATIONCESSRATE,TAXRATE,TOTALDEDUCTED,ISTAXINFOEDITABLE,DEDUCTEDDATE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,
									ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID)
							 VALUES(@BRANCHID,@FORMID,@QUARTER,@SERIALNO,@DEDUCTEEID,@SECTIONID,@ERETURNID,@MODE,@PAYMENTMADE,@PAYMENTDATE,@INCOMETAX,@INCOMETAXRATE,
									@SURCHARGE,@SURCHARGERATE,@EDUCATIONCESS,@EDUCATIONCESSRATE,@TAXRATE,@TOTALDEDUCTED,@ISTAXINFOEDITABLE,@DEDUCTEDDATE,@NONDEDREASON,@ISBOOKENTRY,@ISGROSSINGUP,@UTN,@ISPANVALIDBYITD,
									@ORGINCOMETAX,@ORGSURCHARGE,@ORGEDUCATIONCESS,@ORGTOTALDEDUCTED,@ORGPAYMENTMADE,@PARTPAYMENTID);
		SET @DEDUCTIONID = SCOPE_IDENTITY();
		EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID;
		SELECT @DEDUCTIONID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVENEWBRANCHANDDEDUCTORDETAIL')
DROP PROCEDURE USP_TDS_SAVENEWBRANCHANDDEDUCTORDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVENEWBRANCHANDDEDUCTORDETAIL]
@BRANCHCODE VARCHAR(6),
@BRANCHNAME VARCHAR(75),
@PARENTBRANCHCODE VARCHAR(6),
@ADDRESS1 VARCHAR(25) = NULL,
@ADDRESS2 VARCHAR(25) = NULL,
@ADDRESS3 VARCHAR(25) = NULL,
@ADDRESS4 VARCHAR(25) = NULL,
@ADDRESS5 VARCHAR(25) = NULL,
@STATEID INT,
@FINYEAR INT,
@TAN VARCHAR(10),
@PINCODE VARCHAR(6) = NULL,
@DEDEMAILADDRESS VARCHAR(75) = NULL,
@STDCODE VARCHAR(5) = NULL,
@PHONENO VARCHAR(10) = NULL,
@NAME VARCHAR(75),
@DESIGNATION VARCHAR(20),
@MOBILENUMBER VARCHAR(10) = NULL,
@EMAILADDRESS VARCHAR(75) = NULL,
@QUARTER INT
AS
 BEGIN
  DECLARE @DEDUCTORNAME VARCHAR(75), @PAN VARCHAR(10), @STATUS INT, @DEDUCTORTYPE INT,
         @BASEID INT, @PARENTBRANCHID INT, @PARENTBASEID VARCHAR(50), @BRANCHID INT, @DEDUCTORID INT,
         @PERSONID INT, @COUNT INT;
  SET @DEDUCTORNAME = 'UNION BANK OF INDIA';
  SET @BRANCHID =-1;
  SET @DEDUCTORID = -1;
  SET @PERSONID = -1; SET @COUNT = 1;
  SELECT @PAN = ISNULL(PAN, ''), @DEDUCTORTYPE = DEDUCTORTYPE, @STATUS = STATUS FROM DEFAULTSETTINGS WITH(NOLOCK);
  SELECT @BASEID = ISNULL(MAX(BASEID),0) + 1 FROM COMPANYBRANCH WITH(NOLOCK);
  SET  @PARENTBASEID = DBO.UDF_TDS_GETFORMATEDPARENTBASEID(@BASEID);
  SELECT @PARENTBRANCHID = BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE = @PARENTBRANCHCODE;
  SELECT  @PARENTBASEID = PARENTBASEID + @PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHID = @PARENTBRANCHID;
                INSERT INTO COMPANYBRANCH(PARENTBRANCHID, BRANCHNAME, BASEID, PARENTBASEID,BRANCHCODE)
          VALUES (@PARENTBRANCHID, @BRANCHNAME, @BASEID, @PARENTBASEID, @BRANCHCODE)
         SET @BRANCHID = SCOPE_IDENTITY();
  WHILE(@QUARTER <= 4)
   BEGIN
     INSERT INTO DEDUCTOR (DEDUCTORNAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, ISADDRCHANGED,
               FINANCIALYEAR, TAN, PAN, PINCODE, EMAILADDRESS, STDCODE, PHONENO, ISRESIDENT, ISTDSEXISTING, FAXNO, RETURNTYPE,
               ISAOAPPROVED, AOAPPROVALNUM, AODESIGNATION, STATUSID, DEDUCTORTYPEID, GOVTADDSTATEID, GOVTADDPAOCODE,
               GOVTADDPAOREGNNO, GOVTADDDDOCODE, GOVTADDDDOREGNNO, GOVTADDMINISTRY, GOVTADDOTHERNAME,
               TANREGISTRATION)
           VALUES(@DEDUCTORNAME, ISNULL(@ADDRESS1,''), @ADDRESS2, @ADDRESS3, @ADDRESS4, @ADDRESS5, @STATEID, 0,
               @FINYEAR, @TAN, @PAN, @PINCODE, @DEDEMAILADDRESS, @STDCODE, @PHONENO, 1,1,NULL,2,
               0,'','',@STATUS, @DEDUCTORTYPE, 0,'','','','',-1,'','')
           SET @DEDUCTORID = SCOPE_IDENTITY();
        INSERT INTO RESPONSIBLEPERSON(DEDUCTORID, PERSONNAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, PINCODE, STATEID,
                     ISADDRCHANGED, DESIGNATION, EMAILADDRESS, STDCODE, PHONENO, MOBILENO, FAXNO, GENDER, FATHERNAME)
               VALUES(@DEDUCTORID, @NAME, @ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@PINCODE,@STATEID,
                    0,@DESIGNATION, @EMAILADDRESS, '','',@MOBILENUMBER,NULL,1,'')
           SET @PERSONID= SCOPE_IDENTITY();
        INSERT INTO BRANCHDEDUCTORS(BRANCHID, QUARTER, DEDUCTORID)
                   VALUES (@BRANCHID, @QUARTER, @DEDUCTORID)
           SET @QUARTER = @QUARTER + 1;
    END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVENEWBRANCHANDDEDUCTORDETAILGENERAL')
DROP PROCEDURE USP_TDS_SAVENEWBRANCHANDDEDUCTORDETAILGENERAL
GO
CREATE PROCEDURE USP_TDS_SAVENEWBRANCHANDDEDUCTORDETAILGENERAL  
@BRANCHCODE VARCHAR(6),      
@ADDRESS1 VARCHAR(25) = NULL,    
@ADDRESS2 VARCHAR(25) = NULL,    
@ADDRESS3 VARCHAR(25) = NULL,    
@ADDRESS4 VARCHAR(25) = NULL,    
@ADDRESS5 VARCHAR(25) = NULL,    
@STATEID INT,    
@FINYEAR INT,    
@TAN VARCHAR(10),    
@PINCODE VARCHAR(6) = NULL,    
@DEDEMAILADDRESS VARCHAR(75) = NULL,    
@STDCODE VARCHAR(5) = NULL,    
@PHONENO VARCHAR(10) = NULL,    
@NAME VARCHAR(75),    
@DESIGNATION VARCHAR(20),    
@MOBILENUMBER VARCHAR(10) = NULL,    
@EMAILADDRESS VARCHAR(75) = NULL,
@TANREGISTRATION VARCHAR(10),    
@QUARTER INT,
@DEDUCTORNAME VARCHAR(75)    
AS    
 BEGIN    
  DECLARE @PAN VARCHAR(10), @STATUS INT, @DEDUCTORTYPE INT,--@DEDUCTORNAME VARCHAR(75),     
         @BASEID INT, @PARENTBRANCHID INT, @PARENTBASEID VARCHAR(50), @BRANCHID INT, @DEDUCTORID INT,    
         @PERSONID INT, @COUNT INT;    
  --SET @DEDUCTORNAME = 'CANARA BANK';    
  SET @BRANCHID = (SELECT BRANCHID FROM COMPANYBRANCH WHERE BRANCHCODE = @BRANCHCODE);    
  SET @DEDUCTORID = -1;    
  SET @PERSONID = -1; SET @COUNT = 1;    
  SELECT @PAN = ISNULL(PAN, ''), @DEDUCTORTYPE = DEDUCTORTYPE, @STATUS = STATUS FROM DEFAULTSETTINGS;      
  WHILE(@QUARTER <= 4)    
   BEGIN    
     INSERT INTO DEDUCTOR (DEDUCTORNAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, ISADDRCHANGED,    
               FINANCIALYEAR, TAN, PAN, PINCODE, EMAILADDRESS, STDCODE, PHONENO, ISRESIDENT, ISTDSEXISTING, FAXNO, RETURNTYPE,    
               ISAOAPPROVED, AOAPPROVALNUM, AODESIGNATION, STATUSID, DEDUCTORTYPEID, GOVTADDSTATEID, GOVTADDPAOCODE,    
               GOVTADDPAOREGNNO, GOVTADDDDOCODE, GOVTADDDDOREGNNO, GOVTADDMINISTRY, GOVTADDOTHERNAME,    
               TANREGISTRATION)    
           VALUES(@DEDUCTORNAME, ISNULL(@ADDRESS1,''), @ADDRESS2, @ADDRESS3, @ADDRESS4, @ADDRESS5, @STATEID, 0,    
               @FINYEAR, @TAN, @PAN, @PINCODE, @DEDEMAILADDRESS, @STDCODE, @PHONENO, 1,1,NULL,2,    
               0,'','',@STATUS, @DEDUCTORTYPE, 0,'','','','',-1,'',@TANREGISTRATION)    
           SET @DEDUCTORID = SCOPE_IDENTITY();    
        INSERT INTO RESPONSIBLEPERSON(DEDUCTORID, PERSONNAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, PINCODE, STATEID,    
                     ISADDRCHANGED, DESIGNATION, EMAILADDRESS, STDCODE, PHONENO, MOBILENO, FAXNO, GENDER, FATHERNAME)    
               VALUES(@DEDUCTORID, @NAME, @ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@PINCODE,@STATEID,    
                    0,@DESIGNATION, @EMAILADDRESS, '','',@MOBILENUMBER,NULL,1,'')    
           SET @PERSONID= SCOPE_IDENTITY();   
           INSERT INTO BRANCHDEDUCTORS(BRANCHID, QUARTER, DEDUCTORID)    
                   VALUES (@BRANCHID, @QUARTER, @DEDUCTORID)   
           SET @QUARTER = @QUARTER + 1;    
    END    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVENONEMPLOYEE')
DROP PROCEDURE USP_TDS_SAVENONEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_SAVENONEMPLOYEE]
	@DEDUCTEEID INT,
	@NONEMPLOYEEID INT,
	@BRANCHID INT,
	@SALUTATION VARCHAR(5),
	@NAME VARCHAR(75),
	@PAN VARCHAR(10),
	@PANREFERENCE VARCHAR(10),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@STATEID INT,
	@PINCODE VARCHAR(6),
	@PHONENO VARCHAR(15),
	@EMAILADDRESS VARCHAR(75),
	@DEDUCTEECODE INT,
	@ISAPPLICABLE26 BIT,
	@ISAPPLICABLE27 BIT,
	@ISTRANSPORTER BIT
AS
	BEGIN
		DECLARE @SERIALNO INT,@RETURNVALUE INT;
		IF EXISTS (SELECT D.DEDUCTEEID FROM DEDUCTEE D INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID WHERE D.NAME = @NAME AND D.PAN = @PAN  AND D.DEDUCTEEID <> @DEDUCTEEID AND D.BRANCHID = @BRANCHID)
			BEGIN
				SET @RETURNVALUE = -1;
			END
		ELSE
			BEGIN
				IF (@DEDUCTEEID = -1 AND @NONEMPLOYEEID = -1)
					BEGIN
						SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0) FROM DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=NONEMPLOYEE.DEDUCTEEID WHERE BRANCHID=@BRANCHID
						INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS)
						VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS)
						SET @DEDUCTEEID=SCOPE_IDENTITY();
						INSERT INTO NONEMPLOYEE(DEDUCTEEID,DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,SERIALNO,ISTRANSPORTER)
						VALUES(@DEDUCTEEID,@DEDUCTEECODE,@ISAPPLICABLE26,@ISAPPLICABLE27,@SERIALNO+1,@ISTRANSPORTER)
						SET @NONEMPLOYEEID=SCOPE_IDENTITY();
						SET @RETURNVALUE = 1;
					END
				ELSE
					BEGIN
						SET @RETURNVALUE = @DEDUCTEEID ;
						UPDATE DEDUCTEE SET BRANCHID=@BRANCHID,SALUTATION=@SALUTATION,NAME=@NAME,PAN=@PAN,PANREFERENCE=@PANREFERENCE,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,
										    ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,STATEID=@STATEID,PINCODE=@PINCODE,PHONENO=@PHONENO,EMAILADDRESS=@EMAILADDRESS WHERE DEDUCTEEID=@DEDUCTEEID
						UPDATE NONEMPLOYEE SET DEDUCTEECODE=@DEDUCTEECODE,ISAPPLICABLE26=@ISAPPLICABLE26,ISAPPLICABLE27=@ISAPPLICABLE27,ISTRANSPORTER=@ISTRANSPORTER
						WHERE  DEDUCTEEID=@DEDUCTEEID AND NONEMPLOYEEID=@NONEMPLOYEEID;
						DECLARE @DEDUCTEEPAN VARCHAR(10),@DEDUCTEEPANREFERENCE VARCHAR(10);
						SELECT @DEDUCTEEPAN=DEDUCTEEPAN,@DEDUCTEEPANREFERENCE=DEDUCTEEPANREF FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID
						IF(@DEDUCTEEPAN<>@PAN OR @DEDUCTEEPANREFERENCE<>@PANREFERENCE)
							BEGIN
								UPDATE DEDUCTIONDETAIL SET LASTDEDUCTEEPAN=@DEDUCTEEPAN,LASTDEDUCTEEPANREF=@DEDUCTEEPANREFERENCE WHERE DEDUCTEEID=@DEDUCTEEID
								UPDATE DEDUCTIONDETAIL SET DEDUCTEEPAN=@PAN,DEDUCTEEPANREF=@PANREFERENCE WHERE DEDUCTEEID=@DEDUCTEEID
							END
					END
			END
			SELECT @RETURNVALUE;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveNonEmployeeDetail')
DROP PROCEDURE USP_TDS_SaveNonEmployeeDetail
GO
CREATE PROCEDURE [dbo].[USP_TDS_SaveNonEmployeeDetail]  
 @BRANCHID INT,  
 @NONEMPLOYEEID INT,  
 @DEDUCTEEID INT,  
 @DEDUCTEECODE INT,  
 @ISAPPLICABLE26 BIT,  
 @ISAPPLICABLE27 BIT,  
 @ISAPPLICABLE27E BIT=NULL,  
 @ISTRANSPORTER BIT,  
 @REFERENCENO VARCHAR(20),  
 @ACCOUNTNUMBER VARCHAR(20)=NULL,  
 @IFSCCODE VARCHAR(20)=NULL,  
 @STATUS TINYINT=NULL,  
 @CONTAXRATE NUMERIC(7,4)=NULL,  
 @CONLIMIT NUMERIC(13,2)=NULL,  
 @MAKETDSFROMFIRSTPAY BIT=NULL,  
 @BANKNAME VARCHAR(75)=NULL,  
 @BRANCHNAME VARCHAR(25)=NULL,  
 @STREGNO VARCHAR(15)=NULL,
 @GSTIN VARCHAR(15)=NULL,
 @MOBILENO VARCHAR(10)=NULL,
 @FAX VARCHAR(10)=NULL,
 @CONTACTPERSONNAME VARCHAR(75)=NULL,
 @PERSONDESIGNATION VARCHAR(30)=NULL  
AS  
 BEGIN  
  DECLARE @SERIALNO INT;  
  DECLARE @ISDUPLICATE INT  
  SET @ISDUPLICATE=0  
  /* Get the MAX serial no for the NonEmployee */  
  SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0) FROM
  (
	  SELECT (ISNULL(MAX(SERIALNO),0) + 1)SERIALNO FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) 
				 ON D.DEDUCTEEID = NE.DEDUCTEEID  
	  WHERE  D.BRANCHID = @BRANCHID  
	  UNION
	  SELECT (ISNULL(MAX(DEDUCTEESERIALNO),0) + 1)SERIALNO FROM CORRNONEMPLOYEE CNE WITH(NOLOCK)  
	  WHERE  CNE.BRANCHID = @BRANCHID
  )T
  /* CHECK for UNIQUE REFERENCE NO IF REFERENCE NO IS ENABLED*/  
  IF((SELECT ENABLEREFERENCE FROM DEFAULTSETTINGS WITH(NOLOCK))=1)  
   BEGIN  
    SELECT @ISDUPLICATE=COUNT(D.DEDUCTEEID) FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK)ON D.DEDUCTEEID=NE.DEDUCTEEID  
   WHERE BRANCHID=@BRANCHID AND D.DEDUCTEEID<>@DEDUCTEEID AND D.REFERENCENO=@REFERENCENO AND ISNULL(REFERENCENO,'') <>''  
   END  
  IF(@CONTAXRATE=-1)  
      BEGIN  
  SET  @CONTAXRATE=NULL;  
  SET @CONLIMIT=NULL;  
   END  
 IF(@ISDUPLICATE=0)  
   BEGIN  
     IF @NONEMPLOYEEID = -1  
   BEGIN  
    INSERT INTO NONEMPLOYEE(SERIALNO,DEDUCTEEID,DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,ISAPPLICABLE27E,ISTRANSPORTER,ACCOUNTNUMBER,IFSCCODE,STATUS,CONTAXRATE,CONLIMIT,MAKETDSFROMFIRSTPAYMENT,BANKNAME,BRANCHNAME,STREGNO,MOBILENO,FAX,CONTACTPERSONNAME,PERSONDESIGNATION,GSTIN)  
    VALUES                 (@SERIALNO,@DEDUCTEEID,@DEDUCTEECODE,@ISAPPLICABLE26,@ISAPPLICABLE27,@ISAPPLICABLE27E,@ISTRANSPORTER,@ACCOUNTNUMBER,@IFSCCODE,@STATUS,@CONTAXRATE,@CONLIMIT,@MAKETDSFROMFIRSTPAY,@BANKNAME,@BRANCHNAME,@STREGNO,@MOBILENO,@FAX,@CONTACTPERSONNAME,@PERSONDESIGNATION,@GSTIN)  
    SET @NONEMPLOYEEID = SCOPE_IDENTITY();  
   END  
     ELSE  
   BEGIN  
    UPDATE NONEMPLOYEE  
    SET DEDUCTEECODE = @DEDUCTEECODE,ISAPPLICABLE26 = @ISAPPLICABLE26,ISAPPLICABLE27 = @ISAPPLICABLE27,ISAPPLICABLE27E = @ISAPPLICABLE27E,ISTRANSPORTER = @ISTRANSPORTER ,  
   ACCOUNTNUMBER=@ACCOUNTNUMBER,IFSCCODE=@IFSCCODE,STATUS=@STATUS,CONTAXRATE=@CONTAXRATE,CONLIMIT=@CONLIMIT,MAKETDSFROMFIRSTPAYMENT=@MAKETDSFROMFIRSTPAY,BANKNAME=@BANKNAME,BRANCHNAME=@BRANCHNAME,STREGNO=@STREGNO,
   MOBILENO=@MOBILENO,FAX=@FAX,CONTACTPERSONNAME=@CONTACTPERSONNAME,PERSONDESIGNATION=@PERSONDESIGNATION,GSTIN=@GSTIN   
    WHERE  DEDUCTEEID = @DEDUCTEEID AND NONEMPLOYEEID = @NONEMPLOYEEID;  
   END  
     UPDATE DEDUCTEE SET CODE = NE.DEDUCTEECODE  
   FROM DEDUCTEE D  
   INNER JOIN NONEMPLOYEE NE ON NE.DEDUCTEEID = D.DEDUCTEEID  
   WHERE BRANCHID = @BRANCHID  
    END  
    ELSE  
  SELECT -1  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVENONEMPLOYEEF005')
DROP PROCEDURE USP_TDS_SAVENONEMPLOYEEF005
GO
CREATE PROCEDURE [USP_TDS_SAVENONEMPLOYEEF005]
 @DEDUCTEEID INT,
 @CUSTOMERID VARCHAR(20),
 @NONEMPLOYEEID INT,
 @BRANCHID INT,
 @SALUTATION VARCHAR(5),
 @NAME VARCHAR(75),
 @PAN VARCHAR(10),
 @PANREFERENCE VARCHAR(10),
 @ADDRESS1 VARCHAR(25),
 @ADDRESS2 VARCHAR(25),
 @ADDRESS3 VARCHAR(25),
 @ADDRESS4 VARCHAR(25),
 @ADDRESS5 VARCHAR(25),
 @STATEID INT,
 @PINCODE VARCHAR(6),
 @PHONENO VARCHAR(15),
 @EMAILADDRESS VARCHAR(75),
 @DEDUCTEECODE INT,
 @ISAPPLICABLE26 BIT,
 @ISAPPLICABLE27 BIT,
 @ISTRANSPORTER BIT,
 @ISEXCLUDED INT
AS
BEGIN
  DECLARE @SERIALNO INT,@RETURNVALUE INT;
  IF EXISTS (SELECT D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID WHERE NAME=@NAME AND PAN=@PAN AND D.REFERENCENO=@CUSTOMERID AND ADDRESS1=@ADDRESS1 AND D.BRANCHID = @BRANCHID)
   BEGIN
    SELECT @DEDUCTEEID=D.DEDUCTEEID FROM DEDUCTEE D INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID WHERE D.REFERENCENO=@CUSTOMERID AND D.BRANCHID = @BRANCHID AND NAME=@NAME AND ADDRESS1=@ADDRESS1 AND PAN=@PAN;
    UPDATE DEDUCTEE SET SALUTATION=@SALUTATION, PANREFERENCE=@PANREFERENCE,ADDRESS2=@ADDRESS2, ADDRESS3=@ADDRESS3,
      ADDRESS4=@ADDRESS4, ADDRESS5=@ADDRESS5, STATEID=@STATEID, PINCODE=@PINCODE, PHONENO=@PHONENO, EMAILADDRESS=@EMAILADDRESS, ISEXCLUDED=@ISEXCLUDED
    WHERE REFERENCENO=@CUSTOMERID AND BRANCHID=@BRANCHID AND NAME=@NAME AND ADDRESS1=@ADDRESS1 AND PAN=@PAN;
    UPDATE NONEMPLOYEE SET DEDUCTEECODE=@DEDUCTEECODE, ISAPPLICABLE26=@ISAPPLICABLE26, ISAPPLICABLE27=@ISAPPLICABLE27, ISTRANSPORTER=@ISTRANSPORTER
    WHERE DEDUCTEEID=@DEDUCTEEID;
    SET @RETURNVALUE=@DEDUCTEEID;
   END
  ELSE
   BEGIN
 INSERT INTO DEDUCTEE(BRANCHID, SALUTATION, NAME, PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, PINCODE, REFERENCENO,
       PHONENO, EMAILADDRESS, ISEXCLUDED)
    VALUES
    (@BRANCHID, @SALUTATION, @NAME, @PAN, @PANREFERENCE, @ADDRESS1, @ADDRESS2, @ADDRESS3, @ADDRESS4, @ADDRESS5, @STATEID, @PINCODE, @CUSTOMERID,
      @PHONENO, @EMAILADDRESS, @ISEXCLUDED)
      SET @DEDUCTEEID=SCOPE_IDENTITY();
    SELECT @SERIALNO=ISNULL(MAX(SERIALNO),0) FROM DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID=NONEMPLOYEE.DEDUCTEEID WHERE BRANCHID=@BRANCHID;
 INSERT INTO NONEMPLOYEE (SERIALNO, DEDUCTEEID, DEDUCTEECODE, ISAPPLICABLE26, ISAPPLICABLE27, ISTRANSPORTER)
    VALUES
    (@SERIALNO+1, @DEDUCTEEID, @DEDUCTEECODE, @ISAPPLICABLE26, @ISAPPLICABLE27, @ISTRANSPORTER)
    SET @NONEMPLOYEEID=SCOPE_IDENTITY();
 SET @RETURNVALUE=@DEDUCTEEID;
   END
   SELECT @RETURNVALUE;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVENONEMPLOYEEFORMAT3')
DROP PROCEDURE USP_TDS_SAVENONEMPLOYEEFORMAT3
GO
CREATE PROCEDURE [USP_TDS_SAVENONEMPLOYEEFORMAT3]              
 @DEDUCTEEID INT,              
 @NONEMPLOYEEID INT,              
 @BRANCHID INT,              
 @SALUTATION INT,              
 @NAME VARCHAR(75),              
 @PAN VARCHAR(10),              
 @PANREFERENCE VARCHAR(10),              
 @ADDRESS1 VARCHAR(25),              
 @ADDRESS2 VARCHAR(25),              
 @ADDRESS3 VARCHAR(25),              
 @ADDRESS4 VARCHAR(25),              
 @ADDRESS5 VARCHAR(25),              
 @STATEID INT,              
 @PINCODE VARCHAR(6)=NULL,                              
 @PHONENO VARCHAR(15),              
 @EMAILADDRESS VARCHAR(75),              
 @DEDUCTEECODE INT,              
 @ISAPPLICABLE26 BIT,              
 @ISAPPLICABLE27 BIT,              
 @ISTRANSPORTER BIT,              
 @ISEXCLUDED INT              
AS              
 BEGIN              
   DECLARE @SERIALNO INT,@RETURNVALUE INT;          
   SELECT @DEDUCTEEID = D.DEDUCTEEID, @NONEMPLOYEEID = NE.NONEMPLOYEEID               
   FROM   DEDUCTEE D WITH(NOLOCK)        
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID              
   WHERE BRANCHID = @BRANCHID  AND D.NAME = @NAME AND D.PAN = @PAN;              
   IF(@DEDUCTEEID = -1 AND @NONEMPLOYEEID = -1)      
   BEGIN             
   IF @PAN = 'PANNOTAVBL'  OR @PAN = 'PANAPPLIED' OR @PAN = 'PANINVALID'     
    BEGIN            
      SET @PANREFERENCE = 'NOPAN';      
      SET @PANREFERENCE = @PANREFERENCE + DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHID(@BRANCHID, 0);      
    END             
    SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)            
   FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID               
   WHERE  BRANCHID = @BRANCHID;              
   INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS,ISEXCLUDED)              
   VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS,@ISEXCLUDED)              
   SET @DEDUCTEEID = SCOPE_IDENTITY();              
   INSERT INTO NONEMPLOYEE(DEDUCTEEID,DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,SERIALNO,ISTRANSPORTER)              
   VALUES(@DEDUCTEEID,@DEDUCTEECODE,@ISAPPLICABLE26,@ISAPPLICABLE27,@SERIALNO+1,@ISTRANSPORTER)              
   SET @NONEMPLOYEEID=SCOPE_IDENTITY();              
   SET @RETURNVALUE = @DEDUCTEEID;                
   END          
   ELSE        
   BEGIN        
    SET @RETURNVALUE = @DEDUCTEEID ;                          
      UPDATE DEDUCTEE SET ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,              
                  ADDRESS5 = @ADDRESS5,STATEID = @STATEID,PINCODE = @PINCODE,PHONENO = @PHONENO,EMAILADDRESS=@EMAILADDRESS              
                 WHERE  DEDUCTEEID = @DEDUCTEEID;                      
      UPDATE NONEMPLOYEE SET DEDUCTEECODE = @DEDUCTEECODE,ISAPPLICABLE26 = @ISAPPLICABLE26,ISAPPLICABLE27 = @ISAPPLICABLE27,        
       ISTRANSPORTER = @ISTRANSPORTER              
    WHERE  DEDUCTEEID = @DEDUCTEEID AND NONEMPLOYEEID = @NONEMPLOYEEID;              
       END              
     SELECT @DEDUCTEEID;               
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVENONEMPLOYEEFORMAT4')
DROP PROCEDURE USP_TDS_SAVENONEMPLOYEEFORMAT4
GO
CREATE PROCEDURE [USP_TDS_SAVENONEMPLOYEEFORMAT4]        
 @DEDUCTEEID INT,          
 @NONEMPLOYEEID INT,          
 @CUSTOMERID VARCHAR(20),        
 @BRANCHID INT,          
 @SALUTATION INT,          
 @NAME VARCHAR(75),          
 @PAN VARCHAR(10),          
 @PANREFERENCE VARCHAR(10),          
 @ADDRESS1 VARCHAR(25),          
 @ADDRESS2 VARCHAR(25),          
 @ADDRESS3 VARCHAR(25),          
 @ADDRESS4 VARCHAR(25),          
 @ADDRESS5 VARCHAR(25),          
 @STATEID INT,          
 @PINCODE VARCHAR(6)=NULL,                          
 @PHONENO VARCHAR(15),          
 @EMAILADDRESS VARCHAR(75),          
 @DEDUCTEECODE INT,          
 @ISAPPLICABLE26 BIT,          
 @ISAPPLICABLE27 BIT,          
 @ISTRANSPORTER BIT,          
 @ISEXCLUDED INT          
AS          
 BEGIN          
  DECLARE @SERIALNO INT,@RETURNVALUE INT;          
  --DECLARE @PANREFERENCE VARCHAR(10);          
  /* CHECK IF DEDUCTEE EXISTS ALREADY*/           
  SELECT @DEDUCTEEID = D.DEDUCTEEID,@NONEMPLOYEEID = NE.NONEMPLOYEEID           
  FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID          
  WHERE BRANCHID = @BRANCHID  AND D.REFERENCENO=@CUSTOMERID;
  IF(@DEDUCTEEID = -1 AND @NONEMPLOYEEID = -1)          
     BEGIN         
      IF (@PAN = 'PANNOTAVBL' OR @PAN = 'PANINVALID' OR @PAN = 'PANAPPLIED')
		 BEGIN          
				SET @PANREFERENCE = 'NOPAN';   
				SET @PANREFERENCE = @PANREFERENCE + DBO.UDF_TDS_GETPANREFERENCEBASEDONBRANCHID(@BRANCHID ,0)
		 END        
    /*IF PAN IS NOT AVAILABLE GET PANREFERENCE*/          
    BEGIN          
     SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)           
     FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID           
     WHERE  BRANCHID = @BRANCHID;          
     INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,REFERENCENO,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS,ISEXCLUDED)          
     VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@CUSTOMERID,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS,@ISEXCLUDED)          
     SET @DEDUCTEEID = SCOPE_IDENTITY();          
     INSERT INTO NONEMPLOYEE(DEDUCTEEID,DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,SERIALNO,ISTRANSPORTER)          
     VALUES(@DEDUCTEEID,@DEDUCTEECODE,@ISAPPLICABLE26,@ISAPPLICABLE27,@SERIALNO+1,@ISTRANSPORTER)          
     SET @NONEMPLOYEEID=SCOPE_IDENTITY();          
     SET @RETURNVALUE = @DEDUCTEEID;          
    END             
   END          
  ELSE          
   BEGIN          
           SET @RETURNVALUE = @DEDUCTEEID ;          
     UPDATE DEDUCTEE SET ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,NAME=@NAME, PAN=@PAN,-- PANREFERENCE=@PANREFERENCE,     
          ADDRESS5 = @ADDRESS5,STATEID = @STATEID,PINCODE = @PINCODE,PHONENO = @PHONENO,EMAILADDRESS=@EMAILADDRESS          
                 WHERE  REFERENCENO = @CUSTOMERID;          
      UPDATE NONEMPLOYEE SET DEDUCTEECODE = @DEDUCTEECODE,ISAPPLICABLE26 = @ISAPPLICABLE26,ISAPPLICABLE27 = @ISAPPLICABLE27,ISTRANSPORTER = @ISTRANSPORTER          
     WHERE  DEDUCTEEID = @DEDUCTEEID AND NONEMPLOYEEID = @NONEMPLOYEEID;          
   END          
  SELECT @DEDUCTEEID;          
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVENONEMPLOYEEFROMTEXTFILE')
DROP PROCEDURE USP_TDS_SAVENONEMPLOYEEFROMTEXTFILE
GO
CREATE PROCEDURE [USP_TDS_SAVENONEMPLOYEEFROMTEXTFILE]
	@DEDUCTEEID INT,
	@NONEMPLOYEEID INT,
	@BRANCHID INT,
	@SALUTATION TINYINT,
	@NAME VARCHAR(75),
	@PAN VARCHAR(10),
	@PANREFERENCE VARCHAR(10),
	@ADDRESS1 VARCHAR(25),
	@ADDRESS2 VARCHAR(25),
	@ADDRESS3 VARCHAR(25),
	@ADDRESS4 VARCHAR(25),
	@ADDRESS5 VARCHAR(25),
	@STATEID INT,
	@PINCODE VARCHAR(6)=NULL,
	@PHONENO VARCHAR(15),
	@EMAILADDRESS VARCHAR(75),
	@DEDUCTEECODE INT,
	@ISAPPLICABLE26 BIT,
	@ISAPPLICABLE27 BIT,
	@ISTRANSPORTER BIT
AS
	BEGIN
		DECLARE @SERIALNO INT,@RETURNVALUE INT;
		/* CHECK IF DEDUCTEE EXISTS ALREADY*/
		SELECT @DEDUCTEEID = D.DEDUCTEEID,@NONEMPLOYEEID = NE.NONEMPLOYEEID
		FROM   DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
		WHERE BRANCHID = @BRANCHID  AND D.NAME = @NAME AND D.PAN = @PAN;
		IF(@DEDUCTEEID = -1 AND @NONEMPLOYEEID = -1)
		   BEGIN
				/*IF PAN IS NOT AVAILABLE GET PANREFERENCE*/
				IF @PAN = 'PANNOTAVBL'
					BEGIN
						SET @PANREFERENCE = DBO.UDF_TDS_GETPANREFERENCEFORIMPORT(@BRANCHID,0);
					END
				BEGIN
					SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)
					FROM   DEDUCTEE WITH(NOLOCK) INNER JOIN NONEMPLOYEE WITH(NOLOCK) ON DEDUCTEE.DEDUCTEEID = NONEMPLOYEE.DEDUCTEEID
					WHERE  BRANCHID = @BRANCHID;
					INSERT INTO DEDUCTEE(BRANCHID,SALUTATION,NAME,PAN,PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,PHONENO,EMAILADDRESS,ISEXCLUDED)
					VALUES(@BRANCHID,@SALUTATION,@NAME,@PAN,@PANREFERENCE,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@STATEID,@PINCODE,@PHONENO,@EMAILADDRESS,0)
					SET @DEDUCTEEID = SCOPE_IDENTITY();
					INSERT INTO NONEMPLOYEE(DEDUCTEEID,DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,SERIALNO,ISTRANSPORTER)
					VALUES(@DEDUCTEEID,@DEDUCTEECODE,@ISAPPLICABLE26,@ISAPPLICABLE27,@SERIALNO+1,@ISTRANSPORTER)
					SET @NONEMPLOYEEID=SCOPE_IDENTITY();
					SET @RETURNVALUE = @DEDUCTEEID;
				END
			END
		ELSE
			BEGIN
		         SET @RETURNVALUE = @DEDUCTEEID ;
				 UPDATE DEDUCTEE SET SALUTATION = @SALUTATION,ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,ADDRESS4 = @ADDRESS4,
									 ADDRESS5 = @ADDRESS5,STATEID = @STATEID,PINCODE = @PINCODE,PHONENO = @PHONENO,EMAILADDRESS=@EMAILADDRESS,ISEXCLUDED=0
                 WHERE  DEDUCTEEID = @DEDUCTEEID;
	 			 UPDATE NONEMPLOYEE SET DEDUCTEECODE = @DEDUCTEECODE,ISAPPLICABLE26 = @ISAPPLICABLE26,ISAPPLICABLE27 = @ISAPPLICABLE27,ISTRANSPORTER = @ISTRANSPORTER
				 WHERE  DEDUCTEEID = @DEDUCTEEID AND NONEMPLOYEEID = @NONEMPLOYEEID;
			END
		SELECT @DEDUCTEEID;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveNonEmployeeGSTIN')
DROP PROCEDURE USP_TDS_SaveNonEmployeeGSTIN
GO
CREATE PROCEDURE USP_TDS_SaveNonEmployeeGSTIN
@GSTIN VARCHAR(15),
@DEDUCTEEID INT
AS
BEGIN
	UPDATE NONEMPLOYEE SET GSTIN = @GSTIN WHERE DEDUCTEEID = @DEDUCTEEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEOLTASCHALLANS')
DROP PROCEDURE USP_TDS_SAVEOLTASCHALLANS
GO
CREATE PROCEDURE [USP_TDS_SAVEOLTASCHALLANS]
@BRANCHID INT,
@RECORD NVARCHAR(MAX),
@ASONDATE SMALLDATETIME
AS
 BEGIN
   DECLARE @SNO INT;
    INSERT INTO OLTASCHALLAN (BRANCHID, RECORD, ASONDATE)
     VALUES(@BRANCHID, @RECORD, @ASONDATE)
   SET @SNO=SCOPE_IDENTITY();
   SELECT @SNO;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEOLTASDETAILS')
DROP PROCEDURE USP_TDS_SAVEOLTASDETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVEOLTASDETAILS]
@DETAILS VARCHAR(200)
AS
BEGIN
	INSERT INTO TRACKOLTASDETAILS(DETAILS)VALUES(@DETAILS)
	IF EXISTS(SELECT * FROM DEFAULTSETTINGS WITH(NOLOCK))
	BEGIN
	DECLARE @RTNO INT
	SELECT @RTNO=ISNULL(RT1FILENO,6000) FROM DEFAULTSETTINGS WITH(NOLOCK)
	SET @RTNO=@RTNO+1
	UPDATE DEFAULTSETTINGS SET RT1FILENO=@RTNO
	END
	ELSE
	   INSERT INTO DEFAULTSETTINGS(RT1FILENO)VALUES(6000)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEOLTASDETAILS01')
DROP PROCEDURE USP_TDS_SAVEOLTASDETAILS01
GO
CREATE PROCEDURE [USP_TDS_SAVEOLTASDETAILS01]
@DETAILS VARCHAR(200),
@DBNAME VARCHAR(50)=NULL
AS
BEGIN
	INSERT INTO TRACKOLTASDETAILS(DETAILS)VALUES(@DETAILS)
	IF EXISTS(SELECT * FROM DEFAULTSETTINGS WITH(NOLOCK))
	BEGIN
	DECLARE @RTNO INT
	SELECT @RTNO=ISNULL(RT1FILENO,6000) FROM DEFAULTSETTINGS WITH(NOLOCK)
	SET @RTNO=@RTNO+1
	UPDATE DEFAULTSETTINGS SET RT1FILENO=@RTNO
	END
	ELSE
	   INSERT INTO DEFAULTSETTINGS(RT1FILENO)VALUES(6000)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEOLTASFILEDETAILS')
DROP PROCEDURE USP_TDS_SAVEOLTASFILEDETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVEOLTASFILEDETAILS]
@TTUMFILENAME VARCHAR(75),
@OLTASFIENAME VARCHAR(75),
@FILEDATE SMALLDATETIME
AS
BEGIN
	  INSERT INTO OLTASFILEDETAILS (TTUMFILENAME ,OLTASFIENAME ,FILEDATE)
	  VALUES (@TTUMFILENAME,@OLTASFIENAME,@FILEDATE)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEOTHERINCOME')
DROP PROCEDURE USP_TDS_SAVEOTHERINCOME
GO
CREATE PROCEDURE [USP_TDS_SAVEOTHERINCOME]
@COMID INT,  
@BRANCHID INT,  
--@PREVEMP NUMERIC(13,2),  
@HOUSEPROLET NUMERIC(13,2),  
@HOUSEPROSELF NUMERIC(13,2),  
@INTERESTONSB NUMERIC(13,2),  
@LGAIN NUMERIC(13,2),  
@SGAIN NUMERIC(13,2),  
@BUSINESSPROF NUMERIC(13,2) = NULL  
AS  
  BEGIN  
   DECLARE @OTHERINCOMEID INT, @SECSALARYDETAILID INT, @MONTH INT, @QUALIFYINGAMOUNT NUMERIC(13,2), @SECTIONID INT;  
        SELECT D.DEDUCTEEID  
		  INTO #DED  
		  FROM DEDUCTEE D WITH(NOLOCK)  
		  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID  
		  INNER JOIN LINKTOTC LC WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID  
		  WHERE LC.COMID = @COMID  
   SELECT @OTHERINCOMEID = OTHERINCOMEID FROM OTHERINCOME WITH(NOLOCK) WHERE COMID = @COMID  
   SET @OTHERINCOMEID = ISNULL(@OTHERINCOMEID,-1) 
   SELECT @SECTIONID = SALARYSECTIONID FROM SALARYSECTIONS WITH(NOLOCK) WHERE SECTIONNAME = '80TTA'
   IF(@OTHERINCOMEID = -1)  
	   BEGIN  
		   INSERT INTO OTHERINCOME (COMID, HOUSEPROL,HOUSEPROS, INTERESTONSB, LGAIN, SGAIN, BUSSINESSPROF)  
		   VALUES (@COMID,@HOUSEPROLET, @HOUSEPROSELF, @INTERESTONSB, @LGAIN, @SGAIN, @BUSINESSPROF)  
		   SET @OTHERINCOMEID = SCOPE_IDENTITY();  
	   END  
   ELSE  
	   BEGIN
		 UPDATE OTHERINCOME SET HOUSEPROL=@HOUSEPROLET, HOUSEPROS=@HOUSEPROSELF,  
		 INTERESTONSB = @INTERESTONSB, LGAIN = @LGAIN, SGAIN =@SGAIN, BUSSINESSPROF = @BUSINESSPROF  
		 WHERE OTHERINCOMEID = @OTHERINCOMEID AND COMID = @COMID;  
	   END  
	   IF(@INTERESTONSB > 0)
	    BEGIN
		 IF NOT EXISTS(SELECT CHAPTERVIADETAILID FROM CHAPTERVIADET WITH(NOLOCK) WHERE SALARYSECTIONID = (SELECT SALARYSECTIONID FROM SALARYSECTIONS WHERE SECTIONNAME = '80TTA') AND COMID = @COMID)
		   BEGIN
			 INSERT INTO CHAPTERVIADET (COMID, SALARYSECTIONID, GROSSAMOUNT, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT)
		     VALUES(@COMID, @SECTIONID, @INTERESTONSB,CASE WHEN @INTERESTONSB > 10000 THEN 10000 ELSE @INTERESTONSB END, CASE WHEN @INTERESTONSB > 10000 THEN 10000 ELSE @INTERESTONSB END)   
		   END 
		 ELSE
		   BEGIN
			 UPDATE CHAPTERVIADET SET GROSSAMOUNT = @INTERESTONSB, QUALIFYINGAMOUNT = CASE WHEN @INTERESTONSB > 10000 THEN 10000 ELSE @INTERESTONSB END, 
					DEDUCTIBLEAMOUNT = CASE WHEN @INTERESTONSB > 10000 THEN 10000 ELSE @INTERESTONSB END
			 WHERE COMID = @COMID AND SALARYSECTIONID  = @SECTIONID
		   END     	 
	    END
	   ELSE
		   BEGIN
			 DELETE FROM CHAPTERVIADET WHERE COMID = @COMID AND SALARYSECTIONID =  @SECTIONID
		   END
    SELECT @OTHERINCOMEID;  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEOTHERINCOMESOURCES')
DROP PROCEDURE USP_TDS_SAVEOTHERINCOMESOURCES
GO
CREATE PROCEDURE [USP_TDS_SAVEOTHERINCOMESOURCES]        
@COMID INT, 
@BRANCHID INT,
@SOURCEID INT,
@AMOUNT NUMERIC(13,2),
@EXEMPT NUMERIC(13,2) = NULL
AS        
  BEGIN        
   DECLARE @OTHERINCOMEID INT, @TOTAMOUNT NUMERIC(13,2),@SECSALARYDETAILID INT, @DEDUCTEEID INT, @GROSSAMT NUMERIC(13,2), @QUALIFYING NUMERIC(13,2), @CHAPTERVIADETID INT;
   DECLARE  @TOT TABLE(ID INT,GROSSAMT NUMERIC(13,2), QUALIFYINGAMT NUMERIC(13,2));
   DECLARE @CHAPTERVIA TABLE(CHAPTERVIAID INT);      
   DECLARE @SALARYDETAILID INT;
   CREATE TABLE #TMP(TID INT,GROSSAMT NUMERIC(13,2),QUALIFYINGAMT NUMERIC(13,2));  
   SELECT D.DEDUCTEEID
		INTO #DED
		FROM DEDUCTEE D WITH (NOLOCK)  
		INNER JOIN EMPLOYEE E WITH (NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
        INNER JOIN LINKTOTC LC WITH (NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID
        WHERE LC.COMID = @COMID
      SELECT @DEDUCTEEID = DEDUCTEEID FROM #DED
      SELECT @OTHERINCOMEID = OTHERINCOMEID FROM OTHERINCOME WITH (NOLOCK) WHERE COMID = @COMID;        
      IF NOT EXISTS(SELECT OTHERINCOMEID FROM OTHERINCOMESOURCES WITH (NOLOCK) WHERE SOURCEID = @SOURCEID AND OTHERINCOMEID = @OTHERINCOMEID)      
		 BEGIN      
		   INSERT INTO OTHERINCOMESOURCES(OTHERINCOMEID, SOURCEID, AMOUNT, EXEMPTAMT)        
		   VALUES(@OTHERINCOMEID, @SOURCEID, @AMOUNT, @EXEMPT)        
		 END      
	  ELSE      
		 BEGIN      
		   UPDATE OTHERINCOMESOURCES SET AMOUNT = @AMOUNT , EXEMPTAMT = @EXEMPT       
		   WHERE SOURCEID = @SOURCEID AND OTHERINCOMEID = @OTHERINCOMEID
		 END 		
   --     SELECT @TOTAMOUNT = SUM(ISNULL(OS.AMOUNT,0)) - SUM(ISNULL(OS.EXEMPTAMT,0)) FROM OTHERINCOMESOURCES OS WITH (NOLOCK)    
		 --INNER JOIN OTHERINCOME O WITH (NOLOCK) ON OS.OTHERINCOMEID = O.OTHERINCOMEID
		 --WHERE O.COMID = @COMID    
		 --GROUP BY O.COMID	
		 --INSERT INTO #TMP  
		 --EXEC USP_TDS_GETTOTALOFPF @BRANCHID , @COMID  
		 --INSERT INTO #TMP  
		 --SELECT 3 , OS.AMOUNT,OS.AMOUNT --OS.EXEMPTAMT  
		 --FROM OTHERINCOME O   
		 --INNER JOIN OTHERINCOMESOURCES OS ON O.OTHERINCOMEID = OS.OTHERINCOMEID  
		 --WHERE O.COMID = @COMID AND SOURCEID = 2  
		 --INSERT INTO #TMP  
		 --SELECT SALARYSECTIONID , GROSSAMOUNT, QUALIFYINGAMOUNT
		 --FROM CHAPTERVIADET CVIDET
		 --LEFT JOIN CVIA80CDET C80 ON CVIDET.CHAPTERVIADETAILID = C80.CHAPTERVIADETID
		 --WHERE CVIDET.COMID = @COMID AND C80.C80CID <> 2 AND SALARYSECTIONID = 3 
		 --INSERT INTO #TMP  
		 --SELECT SALARYSECTIONID , GROSSAMOUNT, QUALIFYINGAMOUNT
		 --FROM CHAPTERVIADET CVIDET
		 --LEFT JOIN CVIA80CDET C80 ON CVIDET.CHAPTERVIADETAILID = C80.CHAPTERVIADETID
		 --WHERE CVIDET.COMID = @COMID AND SALARYSECTIONID <> 3 
  --    IF EXISTS(SELECT SALARYDETAILID FROM SALARYDETAIL SD WITH (NOLOCK) INNER JOIN #DED D ON SD.DEDUCTEEID = D.DEDUCTEEID)
  --     BEGIN
		-- SELECT @SALARYDETAILID = SALARYDETAILID FROM SALARYDETAIL SD WITH (NOLOCK) INNER JOIN #DED D ON SD.DEDUCTEEID = D.DEDUCTEEID
		-- UPDATE SALARYDETAIL SET INCOMEFROMOTHERSOURCES = @TOTAMOUNT, TOTALDEDUNDERCHAPTERVIA = (SELECT SUM(ISNULL(QUALIFYINGAMT,0)) FROM #TMP)  
		-- FROM SALARYDETAIL SD WITH (NOLOCK) 
		-- INNER JOIN #DED D ON SD.DEDUCTEEID = D.DEDUCTEEID
  --     END
		--IF EXISTS(SELECT DEDUCTEEID FROM #DED WHERE DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM SALARYDETAIL WITH (NOLOCK) ))
		--  BEGIN
		--	INSERT INTO SALARYDETAIL(BRANCHID, DEDUCTEEID, INCOMEFROMOTHERSOURCES, TOTALDEDUNDERCHAPTERVIA)
		--	SELECT @BRANCHID, DEDUCTEEID,@TOTAMOUNT, (SELECT SUM(ISNULL(QUALIFYINGAMT,0)) FROM #TMP) FROM #DED 
		--	WHERE DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM SALARYDETAIL)
		--	SET @SALARYDETAILID = SCOPE_IDENTITY();
		--  END
	 --  	DELETE FROM CHAPTERVIADETAIL WHERE SALARYDETAILID = @SALARYDETAILID
	 --  IF ((SELECT SUM(ISNULL(QUALIFYINGAMT,0)) FROM #TMP) > 0)	  
	 --   BEGIN
		--  INSERT INTO CHAPTERVIADETAIL
		--  SELECT SALARYDETAILID, SALARYSECTIONID, SUM(GROSSAMT)GROSSAMT, SUM(QUALIFYINGAMT)QUALIFYINGAMT, SUM(DEDUCTIBLEAMT)DEDUCTIBLEAMT,'' AS REMARKS
		--  FROM
		--  (
		--   SELECT @SALARYDETAILID AS SALARYDETAILID, CASE WHEN TID IN (0,1,2,3) THEN 3 ELSE TID END AS SALARYSECTIONID,GROSSAMT,
		--		  CASE WHEN TID IN (0,1,2,3) THEN CASE WHEN ISNULL(QUALIFYINGAMT,0) > 100000 THEN 100000 ELSE ISNULL(QUALIFYINGAMT,0) END
		--							ELSE ISNULL(QUALIFYINGAMT,0) END AS QUALIFYINGAMT, 
		--		  CASE WHEN TID IN (0,1,2,3) THEN CASE WHEN ISNULL(QUALIFYINGAMT,0) > 100000 THEN 100000 ELSE ISNULL(QUALIFYINGAMT,0) END
		--							ELSE ISNULL(QUALIFYINGAMT,0) END AS DEDUCTIBLEAMT
		--		  FROM #TMP
		--   )T
		--   GROUP BY SALARYDETAILID, SALARYSECTIONID
	 --   END   
	  -- EXEC USP_TDS_UPDATEALLOWANCE @DEDUCTEEID, @COMID   
    SELECT @OTHERINCOMEID;        
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEPARKEDAMOUNT')
DROP PROCEDURE USP_TDS_SAVEPARKEDAMOUNT
GO
CREATE PROCEDURE [USP_TDS_SAVEPARKEDAMOUNT] 
@MONTHYEAR INT,
@BRANCHID INT,
@F1FORMTYPE VARCHAR(4),
@F1ACCOUNTNO VARCHAR(20),
@F1AMOUNT NUMERIC(17,2),
@F2FORMTYPE VARCHAR(4),
@F2ACCOUNTNO VARCHAR(20),
@F2AMOUNT  NUMERIC(17,2),
@F3FORMTYPE VARCHAR(4),
@F3ACCOUNTNO VARCHAR(20),
@F3AMOUNT  NUMERIC(17,2),
@F4FORMTYPE VARCHAR(4),
@F4ACCOUNTNO VARCHAR(20),
@F4AMOUNT NUMERIC(17,2)
AS  
BEGIN
  IF NOT EXISTS(SELECT * FROM PARKEDAMOUNT WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND MONTHYEAR=@MONTHYEAR)
  BEGIN
	  INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F1FORMTYPE,@F1ACCOUNTNO,@F1AMOUNT)
	  INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F2FORMTYPE,@F2ACCOUNTNO,@F2AMOUNT)
	  INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F3FORMTYPE,@F3ACCOUNTNO,@F3AMOUNT)
	  INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F4FORMTYPE,@F4ACCOUNTNO,@F4AMOUNT)   
  END	
  ELSE
   BEGIN
   /* IF DATA EXISTS ALREADY DELETE OLD DATA AND INSERT NEW*/
			DELETE FROM PARKEDAMOUNT  WHERE BRANCHID=@BRANCHID AND MONTHYEAR=@MONTHYEAR
			INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F1FORMTYPE,@F1ACCOUNTNO,@F1AMOUNT)
			INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F2FORMTYPE,@F2ACCOUNTNO,@F2AMOUNT)
			INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F3FORMTYPE,@F3ACCOUNTNO,@F3AMOUNT)
			INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F4FORMTYPE,@F4ACCOUNTNO,@F4AMOUNT)	
   END					   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveParkedAmountCB')
DROP PROCEDURE USP_TDS_SaveParkedAmountCB
GO
CREATE PROCEDURE [USP_TDS_SaveParkedAmountCB]    
@MONTHYEAR INT,    
@BRANCHID INT,    
@F1FORMTYPE VARCHAR(10),    
@F1ACCOUNTNO VARCHAR(20),    
@F1AMOUNT NUMERIC(17,2) 
AS      
BEGIN    
  IF NOT EXISTS(SELECT * FROM PARKEDAMOUNT WHERE BRANCHID=@BRANCHID AND MONTHYEAR=@MONTHYEAR AND FORMTYPE = @F1FORMTYPE)
  BEGIN    
   INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)    
      VALUES(@MONTHYEAR,@BRANCHID,@F1FORMTYPE,@F1ACCOUNTNO,@F1AMOUNT)             
  END     
  ELSE    
   BEGIN    
   /* IF Data Exists Already Delete old Data and Insert New*/    
   DELETE FROM PARKEDAMOUNT  WHERE BRANCHID=@BRANCHID AND MONTHYEAR=@MONTHYEAR    
   INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)    
      VALUES(@MONTHYEAR,@BRANCHID,@F1FORMTYPE,@F1ACCOUNTNO,@F1AMOUNT)        
   END            
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEPARKEDAMOUNTUBI')
DROP PROCEDURE USP_TDS_SAVEPARKEDAMOUNTUBI
GO
CREATE PROCEDURE [USP_TDS_SAVEPARKEDAMOUNTUBI] 
@MONTHYEAR INT,
@BRANCHID INT,
@F1FORMTYPE VARCHAR(4),
@F1ACCOUNTNO VARCHAR(20),
@F1AMOUNT NUMERIC(17,2),
@F2FORMTYPE VARCHAR(4),
@F2ACCOUNTNO VARCHAR(20),
@F2AMOUNT  NUMERIC(17,2),
@F3FORMTYPE VARCHAR(4),
@F3ACCOUNTNO VARCHAR(20),
@F3AMOUNT  NUMERIC(17,2),
@F4FORMTYPE VARCHAR(4),
@F4ACCOUNTNO VARCHAR(20),
@F4AMOUNT NUMERIC(17,2),
@F5FORMTYPE VARCHAR(10),
@F5ACCOUNTNO VARCHAR(20),
@F5AMOUNT NUMERIC(17,2)
AS  
BEGIN
  IF NOT EXISTS(SELECT * FROM PARKEDAMOUNT WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND MONTHYEAR=@MONTHYEAR)
  BEGIN
	  INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F1FORMTYPE,@F1ACCOUNTNO,@F1AMOUNT)
	  INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F2FORMTYPE,@F2ACCOUNTNO,@F2AMOUNT)
	  INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F3FORMTYPE,@F3ACCOUNTNO,@F3AMOUNT)
	  INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F4FORMTYPE,@F4ACCOUNTNO,@F4AMOUNT)
	  INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F5FORMTYPE,@F5ACCOUNTNO,@F5AMOUNT)    
  END	
  ELSE
   BEGIN
   /* IF DATA EXISTS ALREADY DELETE OLD DATA AND INSERT NEW*/
			DELETE FROM PARKEDAMOUNT  WHERE BRANCHID=@BRANCHID AND MONTHYEAR=@MONTHYEAR
			INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F1FORMTYPE,@F1ACCOUNTNO,@F1AMOUNT)
			INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F2FORMTYPE,@F2ACCOUNTNO,@F2AMOUNT)
			INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F3FORMTYPE,@F3ACCOUNTNO,@F3AMOUNT)
			INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F4FORMTYPE,@F4ACCOUNTNO,@F4AMOUNT)
			INSERT INTO PARKEDAMOUNT(MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
						VALUES(@MONTHYEAR,@BRANCHID,@F5FORMTYPE,@F5ACCOUNTNO,@F5AMOUNT) 	
   END					   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEPARTPAYMENTDEDUCTION')
DROP PROCEDURE USP_TDS_SAVEPARTPAYMENTDEDUCTION
GO
CREATE PROCEDURE [USP_TDS_SAVEPARTPAYMENTDEDUCTION]
			@BRANCHID INT,
			@FORMID SMALLINT,
			@QUARTER SMALLINT,
			@PARTPAYMENTID INT
AS
BEGIN
	DECLARE @DEDUCTIONID INT,@SERIALNO INT
	DECLARE @PAYMENTMADE NUMERIC(13,2),@INCOMETAX NUMERIC(13,2), @SURCHARGE NUMERIC(13,2),@EDUCATIONCESS NUMERIC(13,2),@TOTALDEDUCTED NUMERIC(13,2)
	SELECT @PAYMENTMADE=REMPAYMENTMADE,@INCOMETAX=REMINCOMETAX,@SURCHARGE=REMSURCHARGE,@EDUCATIONCESS=REMEDUCATIONCESS,@TOTALDEDUCTED=REMTOTALDEDUCTED
			 FROM PARTPAYMENTDETAILS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND PARTPAYMENTID=@PARTPAYMENTID
	SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0)+1 FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
	INSERT INTO DEDUCTIONDETAIL(SERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,INCOMETAX,SURCHARGE,EDUCATIONCESS,
								TOTALDEDUCTED,PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,
								EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,
								ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID)
					SELECT TOP 1 @SERIALNO,[QUARTER],BRANCHID,FORMID,DEDUCTEEID,ERETURNID,MODE,@INCOMETAX,@SURCHARGE,@EDUCATIONCESS,
								 @TOTALDEDUCTED,@PAYMENTMADE,PAYMENTDATE,DEDUCTEDDATE,SECTIONID,INCOMETAXRATE,SURCHARGERATE,
								 EDUCATIONCESSRATE,TAXRATE,ISTAXINFOEDITABLE,NONDEDREASON,ISBOOKENTRY,ISGROSSINGUP,UTN,ISPANVALIDBYITD,
								 ORGINCOMETAX,ORGSURCHARGE,ORGEDUCATIONCESS,ORGTOTALDEDUCTED,ORGPAYMENTMADE,PARTPAYMENTID
	FROM   DEDUCTIONDETAIL
	WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
	EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID
	SET @DEDUCTIONID = SCOPE_IDENTITY();
	SELECT @DEDUCTIONID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEPAYMENTSTATUS')
DROP PROCEDURE USP_TDS_SAVEPAYMENTSTATUS
GO
CREATE PROCEDURE [USP_TDS_SAVEPAYMENTSTATUS]
@VALUE BIT
AS
BEGIN
IF EXISTS(SELECT * FROM DEFAULTSETTINGS WITH(NOLOCK))
	BEGIN
	     UPDATE DEFAULTSETTINGS SET ISMAKEPAYMENT=@VALUE
	END
	ELSE
	   BEGIN
	        INSERT INTO DEFAULTSETTINGS(ISMAKEPAYMENT)VALUES(@VALUE)
	   END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEPDFSETTINGS')
DROP PROCEDURE USP_TDS_SAVEPDFSETTINGS
GO
CREATE PROCEDURE [USP_TDS_SAVEPDFSETTINGS]
	@PDFSETTINGID INT,
	@BRANCHID INT,
	@ISAPPLICABLEONPDF BIT,
	@ISAPPLICABLEONESIGNEDFILES BIT,
	@ISUSERPWDAPPLICABLE BIT,
	@ISFIRSTFIELDSELECTED BIT,
	@FIRSTFIELDSELECTED TINYINT,
	@FIRSTFIELDLENGTH INT,
	@ISSECFIELDSELECTED BIT,
	@SECFIELDSELECTED TINYINT,
	@SECFIELDLENGTH INT,
	@ISOWNERPWDAPPLICABLE BIT,
	@ISDATACOPYALLOWED BIT,
	@ISPRINTALLOWED BIT,
	@ISAUTOPWDAPPLICABLE BIT,
	@MANUALPASSWORD VARCHAR(25),
	@REASONFORSIGNING VARCHAR(100),
	@LOCATIONOFSIGNING VARCHAR(100),
	@DSFORMAT TINYINT
AS
	BEGIN
		IF @PDFSETTINGID = -1
			BEGIN
				INSERT INTO PDFSETTINGS(BRANCHID,ISAPPLICABLEONPDF,ISAPPLICABLEONDSPDF,ISUSERPWDAPPLICABLE,
									    ISFIRSTFIELDSELECTED,FIRSTFIELDSELECTED,FIRSTFIELDLENGTH,ISSECFIELDSELECTED,SECFIELDSELECTED,
										SECFIELDLENGTH,ISOWNERPWDAPPLICABLE,ISDATACOPYALLOWED,ISPRINTALLOWED,ISAUTOPWDAPPLICABLE,
										MANUALPWD,REASONFORSIGNING,LOCATIONOFSIGNING,DSFORMAT)
								 VALUES(@BRANCHID,@ISAPPLICABLEONPDF,@ISAPPLICABLEONESIGNEDFILES,@ISUSERPWDAPPLICABLE,
										@ISFIRSTFIELDSELECTED,@FIRSTFIELDSELECTED,@FIRSTFIELDLENGTH,@ISSECFIELDSELECTED,@SECFIELDSELECTED,
										@SECFIELDLENGTH,@ISOWNERPWDAPPLICABLE,@ISDATACOPYALLOWED,@ISPRINTALLOWED,@ISAUTOPWDAPPLICABLE,
										@MANUALPASSWORD,@REASONFORSIGNING,@LOCATIONOFSIGNING,@DSFORMAT);
			END
		ELSE
			BEGIN
				UPDATE PDFSETTINGS SET ISAPPLICABLEONPDF = @ISAPPLICABLEONPDF,ISAPPLICABLEONDSPDF = @ISAPPLICABLEONESIGNEDFILES,ISUSERPWDAPPLICABLE = @ISUSERPWDAPPLICABLE,
									   ISFIRSTFIELDSELECTED = @ISFIRSTFIELDSELECTED,FIRSTFIELDSELECTED = @FIRSTFIELDSELECTED,FIRSTFIELDLENGTH = @FIRSTFIELDLENGTH,ISSECFIELDSELECTED = @ISSECFIELDSELECTED,SECFIELDSELECTED = @SECFIELDSELECTED,
									   SECFIELDLENGTH = @SECFIELDLENGTH,ISOWNERPWDAPPLICABLE = @ISOWNERPWDAPPLICABLE,ISDATACOPYALLOWED = @ISDATACOPYALLOWED,ISPRINTALLOWED = @ISPRINTALLOWED,ISAUTOPWDAPPLICABLE = @ISAUTOPWDAPPLICABLE,
									   MANUALPWD = @MANUALPASSWORD,REASONFORSIGNING = @REASONFORSIGNING,LOCATIONOFSIGNING = @LOCATIONOFSIGNING,DSFORMAT = @DSFORMAT
				WHERE PDFSETTINGID = @PDFSETTINGID;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEPURCHASEORDERDETAILS')
DROP PROCEDURE USP_TDS_SAVEPURCHASEORDERDETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVEPURCHASEORDERDETAILS]    
(    
@ORDERID INT,    
@DEDUCTEEID INT,    
@ORDERNO VARCHAR(50),    
@ORDERDATE SMALLDATETIME,    
@ORDERAMOUNT NUMERIC(13,2),    
@NARRATION VARCHAR(500),  
@AMOUNTLIABLETOTAX NUMERIC(13,2),  
@TDSRATE NUMERIC(5,2),  
@NETAMCAMOUNT NUMERIC(13,2),  
@NETAMCDATE SMALLDATETIME=  NULL  
)    
AS    
BEGIN    
 IF(@ORDERID=-1)    
 BEGIN    
  INSERT INTO PURCHASEORDER(DEDUCTEEID,ORDERNO,ORDERDATE,ORDERAMOUNT,NARRATION, AMOUNTLIABLETOTAX, TDSRATE, NEXTAMCAMOUNT, NEXTAMCDATE)   
  VALUES(@DEDUCTEEID,@ORDERNO,@ORDERDATE, @ORDERAMOUNT,@NARRATION, @AMOUNTLIABLETOTAX, @TDSRATE, @NETAMCAMOUNT, @NETAMCDATE)    
 END    
  ELSE    
    BEGIN    
  UPDATE PURCHASEORDER SET DEDUCTEEID=@DEDUCTEEID,ORDERNO=@ORDERNO,ORDERDATE=@ORDERDATE,ORDERAMOUNT=@ORDERAMOUNT,  
   NARRATION=@NARRATION, AMOUNTLIABLETOTAX = @AMOUNTLIABLETOTAX,TDSRATE=@TDSRATE, NEXTAMCAMOUNT=@NETAMCAMOUNT,   
   NEXTAMCDATE=@NETAMCDATE     
  WHERE ORDERID=@ORDERID    
    END    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEQSSDATA')
DROP PROCEDURE USP_TDS_SAVEQSSDATA
GO
CREATE PROCEDURE [USP_TDS_SAVEQSSDATA]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@PRN VARCHAR(15),
@FINYEAR VARCHAR(4),
@QSSDATA VARCHAR(MAX),
@LASTRECEIVEDDATE DATETIME
AS
 BEGIN
   DECLARE @QSSID INT;
   SET @QSSID=-1;
   IF EXISTS(SELECT QSSID FROM QSSSTATEMENT WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND FINYEAR=@FINYEAR)
    BEGIN
     UPDATE QSSSTATEMENT SET PRN=@PRN , QSSDATA=@QSSDATA , LASTRECEIVEDDATE=@LASTRECEIVEDDATE WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND FINYEAR=@FINYEAR;
     SELECT @QSSID = QSSID FROM QSSSTATEMENT WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND FINYEAR=@FINYEAR;
    END
   ELSE
      BEGIN
     INSERT INTO QSSSTATEMENT (BRANCHID, FORMID, QUARTER, PRN, FINYEAR, QSSDATA, LASTRECEIVEDDATE)
           VALUES(@BRANCHID, @FORMID, @QUARTER, @PRN, @FINYEAR, @QSSDATA, @LASTRECEIVEDDATE)
       SET @QSSID=SCOPE_IDENTITY();
      END
    SELECT @QSSID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVERECORDSF005')
DROP PROCEDURE USP_TDS_SAVERECORDSF005
GO
CREATE PROCEDURE [USP_TDS_SAVERECORDSF005]
(
@CUSTOMERID VARCHAR(20),
@ADDRESS1 VARCHAR(25),
@NAME VARCHAR(75),
@PAN VARCHAR(10),
@PAYMENTMADE NUMERIC(15,2),
@PAYMENTDATE DATETIME,
@CHALLANNO VARCHAR(10),
@CHALLANPAIDDATE DATETIME,
@BSRCODE VARCHAR(10)
)
AS
BEGIN
	INSERT INTO IMPORT_F005(NAME,PAN,CUSTID,ADDRESS1,PAIDDATE,CHALLANNO,PAYMENT,CHALLANDATE,BSRCODE)
	VALUES(@NAME,@PAN,@CUSTOMERID,@ADDRESS1,@PAYMENTDATE,@CHALLANNO,@PAYMENTMADE,@CHALLANPAIDDATE,@BSRCODE)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEREMITTINGBANK')
DROP PROCEDURE USP_TDS_SAVEREMITTINGBANK
GO
CREATE PROCEDURE [USP_TDS_SAVEREMITTINGBANK]
 @BANKID INT,
 @BANKNAME VARCHAR(100),
 @BRANCHNAME VARCHAR(100),
 @BSRCODE VARCHAR(7),
 @ISFROMIMPORT BIT
AS
 BEGIN
  IF @ISFROMIMPORT = 1
   BEGIN
    IF((SELECT COUNT(BSRCODE) FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BSRCODE AND BANKID<>@BANKID)>0)
     BEGIN
      SELECT @BANKID = BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE = @BSRCODE;
     END
    ELSE
     BEGIN
      IF @BANKID=1
       BEGIN
        INSERT INTO REMITTINGBANK(BANKNAME,BRANCHNAME,BSRCODE)
        VALUES(@BANKNAME,@BRANCHNAME,@BSRCODE)
        SET @BANKID=SCOPE_IDENTITY();
       END
      ELSE
       BEGIN
        UPDATE REMITTINGBANK SET BANKNAME=@BANKNAME,BRANCHNAME=@BRANCHNAME,BSRCODE=@BSRCODE
        WHERE  BANKID=@BANKID;
       END
      SELECT @BANKID;
     END
   END
  ELSE
   BEGIN
    IF((SELECT COUNT(BSRCODE) FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE=@BSRCODE AND BANKID<>@BANKID)>0)
     BEGIN
      SET @BANKID=-1;
     END
    ELSE
     BEGIN
      IF @BANKID=-1
       BEGIN
        INSERT INTO REMITTINGBANK(BANKNAME,BRANCHNAME,BSRCODE)
        VALUES(@BANKNAME,@BRANCHNAME,@BSRCODE)
        SET @BANKID=SCOPE_IDENTITY();
       END
      ELSE
       BEGIN
    IF EXISTS(SELECT CHALLANID FROM CHALLANDETAIL CD WITH(NOLOCK) INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID = RB.BANKID AND RB.BANKID = @BANKID)
   BEGIN
    SET @BANKID = -2;
   END
    ELSE
      BEGIN
    UPDATE REMITTINGBANK SET BANKNAME=@BANKNAME,BRANCHNAME=@BRANCHNAME,BSRCODE=@BSRCODE
    WHERE BANKID=@BANKID;
   END
       END
     END
   END
  SELECT @BANKID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEREMITTINGBANKFORMAT3')
DROP PROCEDURE USP_TDS_SAVEREMITTINGBANKFORMAT3
GO
CREATE PROCEDURE [USP_TDS_SAVEREMITTINGBANKFORMAT3]
(
	@BSRCODE VARCHAR(7)
)
AS
BEGIN
	IF EXISTS(SELECT BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE = @BSRCODE)
	BEGIN
		SELECT BANKID FROM REMITTINGBANK WITH(NOLOCK) WHERE BSRCODE = @BSRCODE
	END
	ELSE
	BEGIN
		INSERT INTO REMITTINGBANK(BANKNAME,BRANCHNAME,BSRCODE) VALUES(@BSRCODE,@BSRCODE,@BSRCODE)
		SELECT SCOPE_IDENTITY();
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEREMOVEPROCESSDETAILS')
DROP PROCEDURE USP_TDS_SAVEREMOVEPROCESSDETAILS
GO
CREATE  PROCEDURE [DBO].[USP_TDS_SAVEREMOVEPROCESSDETAILS]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@PROCESSID INT ,
@ISSAVE BIT
AS
BEGIN
  IF(@ISSAVE=1)
     INSERT INTO ERETURNPROCESS(BRANCHID,FORMID,QUARTER,PROCESSID)
                        VALUES (@BRANCHID,@FORMID,@QUARTER,@PROCESSID)
  ELSE
     DELETE FROM ERETURNPROCESS WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND PROCESSID=@PROCESSID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveReportPaymentDetails')
DROP PROCEDURE USP_TDS_SaveReportPaymentDetails
GO
CREATE PROCEDURE [USP_TDS_SaveReportPaymentDetails]
    @BRANCHID INT,  
    @DEDUCTEEID INT,  
    @BGLCODEID INT,  
    @PAYMENTAMOUNT NUMERIC(13,2),  
    @EXCLUDESERVICETAX NUMERIC(13,2),  
    @SERVICETAX NUMERIC(13,2),  
    @PARENTBRANCHID INT,  
    @SBCESS NUMERIC(13,2) = 0,  
	@KKCESS NUMERIC(13,2) = 0,  
    @BILLNUM VARCHAR(25) = NULL,  
    @BILLDATE SMALLDATETIME = NULL,
    @NATOFSERVICE VARCHAR(50) = NULL,  
    @REPORTID INT
AS  
    BEGIN  
	   DECLARE @SECTIONID INT;  
	   SELECT @SECTIONID = SECTIONID FROM TDSRATE WITH(NOLOCK) WHERE BGLCODEID = @BGLCODEID  
	   IF (@REPORTID = -1)  
		  BEGIN  
			 INSERT INTO REPORTPAYMENT (BRANCHID, DEDUCTEEID, SECTIONID, BGLCODEID, PAYMENTAMOUNT, BILLNUM, 
				BILLDATE, EXCLUDESERVICETAX, SERVICETAX, PARENTBRANCHID, RPDATE, NATOFSERVICE, SBCESS, KKCESS)
			 VALUES (@BRANCHID, @DEDUCTEEID, @SECTIONID, @BGLCODEID, @PAYMENTAMOUNT, @BILLNUM, 
				@BILLDATE, @EXCLUDESERVICETAX, @SERVICETAX, @PARENTBRANCHID, CONVERT(VARCHAR(10), GETDATE(), 120), 
				@NATOFSERVICE, @SBCESS, @KKCESS)  
		  END  
	   ELSE 
		  BEGIN 
			 UPDATE REPORTPAYMENT 
			 SET 
				BRANCHID = @BRANCHID, 
				DEDUCTEEID = @DEDUCTEEID, 
				SECTIONID = @SECTIONID, 
				BGLCODEID = @BGLCODEID, 
				PAYMENTAMOUNT = @PAYMENTAMOUNT, 
				BILLNUM = @BILLNUM, 
				BILLDATE = @BILLDATE, 
				EXCLUDESERVICETAX = @EXCLUDESERVICETAX, 
				SERVICETAX = @SERVICETAX, 
				PARENTBRANCHID = @PARENTBRANCHID, 
				NATOFSERVICE = @NATOFSERVICE,
				SBCESS = @SBCESS,
				KKCESS = @KKCESS
			 WHERE ID = @REPORTID  
		  END
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVERESPONSIBLEPERSON')
DROP PROCEDURE USP_TDS_SAVERESPONSIBLEPERSON
GO
CREATE PROCEDURE [USP_TDS_SAVERESPONSIBLEPERSON]  
 @PERSONID INT,  
 @DEDUCTORID INT,  
 @PERSONNAME VARCHAR(75),  
 @ADDRESS1 VARCHAR(75),  
 @ADDRESS2 VARCHAR(75),  
 @ADDRESS3 VARCHAR(75),  
 @ADDRESS4 VARCHAR(75),  
 @ADDRESS5 VARCHAR(75),  
 @STATEID INT,  
 @PINCODE VARCHAR(6),  
 @ISADDRCHANGED BIT,  
 @STDCODE VARCHAR(5),  
 @PHONENUMBER VARCHAR(10),  
 @DESIGNATION VARCHAR(20),  
 @EMAILADDRESS VARCHAR(75),  
 @MOBILENO VARCHAR(12),  
 @FAXNO VARCHAR(10),  
 @GENDER CHAR(1),  
 @FATHERNAME VARCHAR(75),  
 @ALTERNATEEMAIL VARCHAR(75) = NULL,  
 @ALTERNATESTD VARCHAR(5) = NULL,  
 @ALTERNATEPHONE VARCHAR(10) = NULL
AS  
 BEGIN  
  DECLARE @EXISTS INT;  
  SELECT @EXISTS=COUNT(DEDUCTORID) FROM RESPONSIBLEPERSON WITH(NOLOCK) WHERE DEDUCTORID=@DEDUCTORID  
  IF(@EXISTS=0)  
   BEGIN  
    INSERT INTO RESPONSIBLEPERSON(DEDUCTORID,PERSONNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,  
          ISADDRCHANGED,DESIGNATION,EMAILADDRESS,STDCODE,PHONENO,MOBILENO,FAXNO,GENDER,FATHERNAME, ALTERNATEEMAIL,  
          ALTERNATESTD, ALTERNATEPHONE)   
    VALUES(@DEDUCTORID,@PERSONNAME,@ADDRESS1,@ADDRESS2,@ADDRESS3,@ADDRESS4,@ADDRESS5,@PINCODE,@STATEID,@ISADDRCHANGED,@DESIGNATION,  
        @EMAILADDRESS,@STDCODE,@PHONENUMBER,@MOBILENO,@FAXNO,@GENDER,@FATHERNAME, @ALTERNATEEMAIL, @ALTERNATESTD,@ALTERNATEPHONE)  
    SET @PERSONID=SCOPE_IDENTITY();                                         
   END  
  ELSE  
   BEGIN  
    UPDATE RESPONSIBLEPERSON SET PERSONNAME=@PERSONNAME,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,ADDRESS4=@ADDRESS4,  
            ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID,ISADDRCHANGED=@ISADDRCHANGED,DESIGNATION=@DESIGNATION,EMAILADDRESS=@EMAILADDRESS,STDCODE=@STDCODE,PHONENO=@PHONENUMBER,MOBILENO=@MOBILENO,  
            FAXNO=@FAXNO,GENDER=@GENDER,FATHERNAME=@FATHERNAME, ALTERNATEEMAIL = @ALTERNATEEMAIL,  
            ALTERNATESTD = @ALTERNATESTD,ALTERNATEPHONE = @ALTERNATEPHONE  
    WHERE DEDUCTORID=@DEDUCTORID;                              
   END  
  SELECT @PERSONID;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEREVACKNOWLEDGEMENTDETAIL')
DROP PROCEDURE USP_TDS_SAVEREVACKNOWLEDGEMENTDETAIL
GO
CREATE PROCEDURE [dbo].[USP_TDS_SAVEREVACKNOWLEDGEMENTDETAIL]  
 @ACKNOREVID INT,   
 @ACKID INT,  
 @REVNUM VARCHAR(15),  
 @REVFILEDDATE SMALLDATETIME=NULL  
AS  
 BEGIN  
  IF (@ACKNOREVID=-1)  
   BEGIN  
    INSERT INTO ACKNOREV(ACKID,REVNUM,REVFILEDDATE) VALUES (@ACKID,@REVNUM,@REVFILEDDATE)  
    SET @ACKNOREVID=SCOPE_IDENTITY();  
   END  
  ELSE  
   BEGIN  
    UPDATE ACKNOREV SET REVNUM=@REVNUM,REVFILEDDATE=@REVFILEDDATE WHERE  ACKNOREVID=@ACKNOREVID;  
   END  
  SELECT @ACKNOREVID;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEROLE')
DROP PROCEDURE USP_TDS_SAVEROLE
GO
--ALL SPS
CREATE PROCEDURE [USP_TDS_SAVEROLE]    
(    
@ROLEID INT,    
@ROLENAME VARCHAR(25)    
)    
AS    
BEGIN    
SET NOCOUNT ON    
IF (@ROLEID=-1)    
 BEGIN    
 IF(@ROLENAME=ANY(SELECT ROLENAME FROM ROLES WITH(NOLOCK)))    
  BEGIN    
   SELECT 0;    
  END    
 ELSE    
  BEGIN    
   INSERT INTO ROLES VALUES(@ROLENAME)    
   SELECT 1;    
  END    
 END    
ELSE    
 BEGIN    
 IF(@ROLENAME=ANY(SELECT ROLENAME FROM ROLES WITH(NOLOCK) WHERE ROLEID<>@ROLEID))    
  BEGIN    
   SELECT 0;    
  END    
 ELSE  
 BEGIN  
  UPDATE ROLES SET ROLENAME=@ROLENAME WHERE ROLEID=@ROLEID    
  SELECT 1;    
 END  
 END    
SET NOCOUNT OFF     
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEROLEFEATURES')
DROP PROCEDURE USP_TDS_SAVEROLEFEATURES
GO
CREATE PROCEDURE [USP_TDS_SAVEROLEFEATURES]    
@ROLEID INT,    
@FEATUREID INT    
AS    
BEGIN    
DECLARE @SRNO INT;  
SELECT @SRNO=(ISNULL(MAX(SERIALNO),0)+1) FROM ROLEFEATURE WITH(NOLOCK)  
 INSERT INTO ROLEFEATURE VALUES(@SRNO,@ROLEID,@FEATUREID)    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEROLEUSERS')
DROP PROCEDURE USP_TDS_SAVEROLEUSERS
GO
CREATE PROCEDURE   [DBO].[USP_TDS_SAVEROLEUSERS]          
(          
@ROLEID INT,          
@USERID INT          
)          
AS          
BEGIN          
IF(EXISTS(SELECT USERID FROM ROLEUSER WITH(NOLOCK) WHERE USERID=@USERID))          
  BEGIN         
    UPDATE ROLEUSER SET ROLEID=@ROLEID WHERE USERID=@USERID;          
  END     
  ELSE    
   BEGIN        
     INSERT INTO ROLEUSER VALUES(@ROLEID,@USERID);      
   END        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVERTFILENO')
DROP PROCEDURE USP_TDS_SAVERTFILENO
GO
CREATE PROCEDURE [USP_TDS_SAVERTFILENO]
AS
BEGIN
	IF EXISTS(SELECT * FROM DEFAULTSETTINGS WITH(NOLOCK))
		BEGIN
			DECLARE @RTNO INT
			SELECT @RTNO=ISNULL(RT1FILENO,6000) FROM DEFAULTSETTINGS WITH(NOLOCK)
			SET @RTNO=@RTNO+1
			UPDATE DEFAULTSETTINGS SET RT1FILENO=@RTNO
			UPDATE CHALLANDETAIL SET RTFILENO=@RTNO WHERE CHALLANPAIDDATE=GETDATE()
		END
		ELSE
		   INSERT INTO DEFAULTSETTINGS(RT1FILENO)VALUES(6000)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVESALARYDETAILS')
DROP PROCEDURE USP_TDS_SAVESALARYDETAILS
GO
CREATE PROCEDURE [dbo].[USP_TDS_SAVESALARYDETAILS]  
 @SALARYDETAILID INT,  
 @DEDUCTEEID INT,  
 @BRANCHID INT,    
 @BASICSALARY NUMERIC(12,2),  
 @TAXABLEALLOWANCE NUMERIC(12,2),  
 @PERKACCUNFURNISHED NUMERIC(12,2),  
 @PERKFURNISHEDVALUE NUMERIC(12,2),   
 @COSTOFFURNITURE NUMERIC(12,2),  
 @FURNITURERENTALS NUMERIC(12,2),  
 @PERQVALUEOFFURNITURE  NUMERIC(12,2),  
 @PERKFURNISHEDTOTAL NUMERIC(12,2),  
 @RENTPAIDBYEMP NUMERIC(12,2),  
 @VALUEOFPERQUISITES NUMERIC(12,2),  
 @CONVEYANCE NUMERIC(12,2),  
 @REMUNERATION NUMERIC(12,2),  
 @TAXABLELTC NUMERIC(12,2),  
 @OTHERBENEFITS NUMERIC(12,2),  
 @PFINEXCESSOF12PERC NUMERIC(12,2),  
 @EXCESSINTERESTCREDITED NUMERIC(12,2),  
 @TOTALPERQUISITE NUMERIC(12,2),   
 @TAXABLEPERQUISITES NUMERIC(12,2),   
 @EXEMPTEDALLOWANCES NUMERIC(12,2),  
 @GROSSSALARY NUMERIC(12,2),  
 @DEDUCTIONUS16 NUMERIC(12,2),  
 @INCOMEFROMSALARIES NUMERIC(12,2),  
 @ISOTHERINCOMEDETAILSOPTED BIT,  
 @SALARYFROMPREVEMP NUMERIC(12,2),  
 @INCOMEFROMHOUSEPROPERTY NUMERIC(12,2),  
 @INCOMEFROMBUSINESS NUMERIC(12,2),  
 @CAPITALGAINS NUMERIC(12,2),  
 @INCOMEFROMOTHERSOURCES NUMERIC(12,2),  
 @OTHERINCOME NUMERIC(12,2),  
 @GROSSTOTALINCOME NUMERIC(12,2),  
 @TOTALDEDUNDERCHAPTERVIA NUMERIC(12,2),  
 @TOTALTAXABLEINCOME NUMERIC(12,2),  
 @TAXONTOTALINCOME NUMERIC(12,2),   
 @SURCHARGE NUMERIC(12,2),  
 @EDUCATIONCESS NUMERIC(12,2),  
 @TOTALINCOMETAXPAYABLE NUMERIC(12,2),  
 @RELIEFUS89 NUMERIC(12,2),  
 @NETTAXPAYABLE NUMERIC(12,2),  
 @TDSITDEDUCTED NUMERIC(12,2),  
 @TDSSURCHARGEDEDUCTED NUMERIC(12,2),  
 @EDUCESSDEDUCTED NUMERIC(12,2),   
 @PREVEMPINCOMETAX NUMERIC(12,2),  
 @PREVEMPSURCHARGE NUMERIC(12,2),  
 @PREVEMPCESS NUMERIC(12,2),  
 @MANUALINCOMETAX NUMERIC(12,2),   
 @MANUALSURCHARGE NUMERIC(12,2),  
 @MANUALCESS NUMERIC(12,2),   
 @TOTALTDS NUMERIC(12,2),  
 @TAXPAYABLE NUMERIC(12,2),
 @CREDITUS87A NUMERIC(13,2) = NULL,
 @PANLL1 VARCHAR(10) = NULL, 
 @NAMELL1 VARCHAR(75) = NULL, 
 @PANLL2 VARCHAR(10)= NULL, 
 @NAMELL2 VARCHAR(75) = NULL,
 @PANLL3 VARCHAR(10) = NULL, 
 @NAMELL3 VARCHAR(75) = NULL, 
 @PANLL4 VARCHAR(10) = NULL, 
 @NAMELL4 VARCHAR(75) = NULL, 
 @PANLEND1 VARCHAR(10) = NULL, 
 @NAMELEND1 VARCHAR(75) = NULL, 
 @PANLEND2 VARCHAR(10) = NULL, 
 @NAMELEND2 VARCHAR(75) = NULL, 
 @PANLEND3 VARCHAR(10) = NULL, 
 @NAMELEND3 VARCHAR(75) = NULL, 
 @PANLEND4 VARCHAR(10) = NULL, 
 @NAMELEND4 VARCHAR(75) = NULL, 
 @SAFNAME VARCHAR(75) = NULL,
 @SAFFROMDATE SMALLDATETIME = NULL, 
 @SAFTODATE SMALLDATETIME = NULL, 
 @AMTREPAID NUMERIC(12,2) = NULL, 
 @SAFTAXRATE NUMERIC(7,4) = NULL, 
 @SAFTAXDEDUCTED NUMERIC(12,2) = NULL
AS  
 BEGIN  
  DECLARE @COUNT INT;  
  SET @COUNT=(SELECT COUNT(SALARYDETAILID) FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID);  
  IF(@COUNT=0)  
   BEGIN  
    INSERT INTO SALARYDETAIL(DEDUCTEEID,BRANCHID,BASICSALARY,TAXABLEALLOWANCE,PERKACCUNFURNISHED,PERKFURNISHEDVALUE,COSTOFFURNITURE,  
           FURNITURERENTALS,PERQVALUEOFFURNITURE,PERKFURNISHEDTOTAL,RENTPAIDBYEMP,VALUEOFPERQUISITES,CONVEYANCE,REMUNERATION,  
           TAXABLELTC,OTHERBENEFITS,PFINEXCESSOF12PERC,EXCESSINTERESTCREDITED,TOTALPERQUISITE,TAXABLEPERQUISITES,EXEMPTEDALLOWANCES,  
           GROSSSALARY,DEDUCTIONUS16,INCOMEFROMSALARIES,ISOTHERINCOMEDETAILSOPTED,SALARYFROMPREVEMP,INCOMEFROMHOUSEPROPERTY,INCOMEFROMBUSINESS ,  
           CAPITALGAINS ,INCOMEFROMOTHERSOURCES,OTHERINCOME,GROSSTOTALINCOME,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,TAXONTOTALINCOME,SURCHARGE,  
           EDUCATIONCESS ,TOTALINCOMETAXPAYABLE,RELIEFUS89,NETTAXPAYABLE,TDSITDEDUCTED,TDSSURCHARGEDEDUCTED,EDUCESSDEDUCTED,PREVEMPINCOMETAX,  
           PREVEMPSURCHARGE,PREVEMPCESS,MANUALINCOMETAX,MANUALSURCHARGE,MANUALCESS,TOTALTDS,TAXPAYABLE, CREDITUS87A, PANLL1, NAMELL1, PANLL2, NAMELL2,
           PANLL3, NAMELL3, PANLL4, NAMELL4, PANLEND1, NAMELEND1, PANLEND2, NAMELEND2, PANLEND3, NAMELEND3, PANLEND4, NAMELEND4, SAFNAME, SAFFROMDATE, 
           SAFTODATE, AMTREPAID, SAFTAXRATE, SAFTAXDEDUCTED)  
        VALUES  (@DEDUCTEEID,@BRANCHID,@BASICSALARY,@TAXABLEALLOWANCE,@PERKACCUNFURNISHED,@PERKFURNISHEDVALUE,@COSTOFFURNITURE,  
           @FURNITURERENTALS,@PERQVALUEOFFURNITURE,@PERKFURNISHEDTOTAL,@RENTPAIDBYEMP,@VALUEOFPERQUISITES,@CONVEYANCE,@REMUNERATION ,  
           @TAXABLELTC,@OTHERBENEFITS,@PFINEXCESSOF12PERC,@EXCESSINTERESTCREDITED,@TOTALPERQUISITE,@TAXABLEPERQUISITES,@EXEMPTEDALLOWANCES ,  
           @GROSSSALARY,@DEDUCTIONUS16,@INCOMEFROMSALARIES,@ISOTHERINCOMEDETAILSOPTED,@SALARYFROMPREVEMP,@INCOMEFROMHOUSEPROPERTY,@INCOMEFROMBUSINESS ,  
           @CAPITALGAINS ,@INCOMEFROMOTHERSOURCES,@OTHERINCOME,@GROSSTOTALINCOME,@TOTALDEDUNDERCHAPTERVIA,@TOTALTAXABLEINCOME,@TAXONTOTALINCOME ,@SURCHARGE ,  
           @EDUCATIONCESS ,@TOTALINCOMETAXPAYABLE,@RELIEFUS89,@NETTAXPAYABLE,@TDSITDEDUCTED,@TDSSURCHARGEDEDUCTED,@EDUCESSDEDUCTED,@PREVEMPINCOMETAX,  
@PREVEMPSURCHARGE,@PREVEMPCESS,@MANUALINCOMETAX,@MANUALSURCHARGE,@MANUALCESS,@TOTALTDS,@TAXPAYABLE,@CREDITUS87A, @PANLL1, @NAMELL1, @PANLL2, @NAMELL2,
           @PANLL3, @NAMELL3, @PANLL4, @NAMELL4, @PANLEND1, @NAMELEND1, @PANLEND2, @NAMELEND2, @PANLEND3, @NAMELEND3, @PANLEND4, @NAMELEND4, @SAFNAME, @SAFFROMDATE, 
           @SAFTODATE, @AMTREPAID, @SAFTAXRATE, @SAFTAXDEDUCTED);  
    SET @SALARYDETAILID=SCOPE_IDENTITY();  
   END  
  ELSE  
   BEGIN  
   SELECT @SALARYDETAILID = SALARYDETAILID FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID
    UPDATE SALARYDETAIL SET BASICSALARY=@BASICSALARY,TAXABLEALLOWANCE=@TAXABLEALLOWANCE,PERKACCUNFURNISHED=@PERKACCUNFURNISHED,  
              PERKFURNISHEDVALUE=@PERKFURNISHEDVALUE,COSTOFFURNITURE=@COSTOFFURNITURE,FURNITURERENTALS=@FURNITURERENTALS,  
              PERQVALUEOFFURNITURE=@PERQVALUEOFFURNITURE,PERKFURNISHEDTOTAL=@PERKFURNISHEDTOTAL,RENTPAIDBYEMP=@RENTPAIDBYEMP,  
              VALUEOFPERQUISITES=@VALUEOFPERQUISITES,CONVEYANCE=@CONVEYANCE, REMUNERATION=@REMUNERATION, TAXABLELTC=@TAXABLELTC,  
              OTHERBENEFITS=@OTHERBENEFITS,PFINEXCESSOF12PERC=@PFINEXCESSOF12PERC,EXCESSINTERESTCREDITED=@EXCESSINTERESTCREDITED,  
              TOTALPERQUISITE=@TOTALPERQUISITE,TAXABLEPERQUISITES=@TAXABLEPERQUISITES,EXEMPTEDALLOWANCES=@EXEMPTEDALLOWANCES,  
              GROSSSALARY=@GROSSSALARY,DEDUCTIONUS16=@DEDUCTIONUS16,INCOMEFROMSALARIES=@INCOMEFROMSALARIES,
              ISOTHERINCOMEDETAILSOPTED=@ISOTHERINCOMEDETAILSOPTED,SALARYFROMPREVEMP=@SALARYFROMPREVEMP,
              INCOMEFROMHOUSEPROPERTY=@INCOMEFROMHOUSEPROPERTY,INCOMEFROMBUSINESS=@INCOMEFROMBUSINESS,  
              CAPITALGAINS=@CAPITALGAINS,INCOMEFROMOTHERSOURCES=@INCOMEFROMOTHERSOURCES,OTHERINCOME=@OTHERINCOME,
              GROSSTOTALINCOME=@GROSSTOTALINCOME,TOTALDEDUNDERCHAPTERVIA=@TOTALDEDUNDERCHAPTERVIA,
              TOTALTAXABLEINCOME=@TOTALTAXABLEINCOME,TAXONTOTALINCOME=@TAXONTOTALINCOME,SURCHARGE=@SURCHARGE,
              EDUCATIONCESS =@EDUCATIONCESS ,TOTALINCOMETAXPAYABLE=@TOTALINCOMETAXPAYABLE,RELIEFUS89=@RELIEFUS89,
              NETTAXPAYABLE=@NETTAXPAYABLE,TDSITDEDUCTED=@TDSITDEDUCTED, TDSSURCHARGEDEDUCTED=@TDSSURCHARGEDEDUCTED,
              EDUCESSDEDUCTED=@EDUCESSDEDUCTED,PREVEMPINCOMETAX=@PREVEMPINCOMETAX,PREVEMPSURCHARGE=@PREVEMPSURCHARGE,
              PREVEMPCESS=@PREVEMPCESS, MANUALINCOMETAX=@MANUALINCOMETAX,MANUALSURCHARGE=@MANUALSURCHARGE,
              MANUALCESS=@MANUALCESS,TOTALTDS=@TOTALTDS,TAXPAYABLE=@TAXPAYABLE , CREDITUS87A = @CREDITUS87A, PANLL1 = @PANLL1, 
              NAMELL1 = @NAMELL1, PANLL2 = @PANLL2, NAMELL2 = @NAMELL2, PANLL3 = @PANLL3, NAMELL3 = @NAMELL3, PANLL4 = @PANLL4, 
              NAMELL4 = @NAMELL4, PANLEND1 = @PANLEND1, NAMELEND1 = @NAMELEND1, PANLEND2 = @PANLEND2, NAMELEND2 = @NAMELEND2, 
              PANLEND3 = @PANLEND3, NAMELEND3 = @NAMELEND3, PANLEND4 = @PANLEND4, NAMELEND4 = @NAMELEND4, SAFNAME = @SAFNAME, 
              SAFFROMDATE = @SAFFROMDATE, SAFTODATE = @SAFTODATE, AMTREPAID = @AMTREPAID, SAFTAXRATE = @SAFTAXRATE, SAFTAXDEDUCTED = @SAFTAXDEDUCTED
    WHERE SALARYDETAILID=@SALARYDETAILID AND BRANCHID=@BRANCHID;  
   END   
  SELECT @SALARYDETAILID;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVESALARYDETAILSF004')
DROP PROCEDURE USP_TDS_SAVESALARYDETAILSF004
GO
CREATE PROCEDURE [USP_TDS_SAVESALARYDETAILSF004]
 @SALARYDETAILID INT,
 @DEDUCTEEID INT,
 @BRANCHID INT,
 @BASICSALARY NUMERIC(12,2),
 @TAXABLEALLOWANCE NUMERIC(12,2),
 @PERKACCUNFURNISHED NUMERIC(12,2),
 @PERKFURNISHEDVALUE NUMERIC(12,2),
 @COSTOFFURNITURE NUMERIC(12,2),
 @FURNITURERENTALS NUMERIC(12,2),
 @PERQVALUEOFFURNITURE  NUMERIC(12,2)=NULL,
 @PERKFURNISHEDTOTAL NUMERIC(12,2)=NULL,
 @RENTPAIDBYEMP NUMERIC(12,2),
 @VALUEOFPERQUISITES NUMERIC(12,2)=NULL,
 @CONVEYANCE NUMERIC(12,2),
 @REMUNERATION NUMERIC(12,2),
 @TAXABLELTC NUMERIC(12,2),
 @OTHERBENEFITS NUMERIC(12,2),
 @PFINEXCESSOF12PERC NUMERIC(12,2),
 @EXCESSINTERESTCREDITED NUMERIC(12,2),
 @TOTALPERQUISITE NUMERIC(12,2),
 @TAXABLEPERQUISITES NUMERIC(12,2),
 @GROSSSALARY NUMERIC(12,2),
 @DEDUCTIONUS16 NUMERIC(12,2),
 @INCOMEFROMSALARIES NUMERIC(12,2),
 @OTHERINCOME NUMERIC(12,2),
 @INCOMEFROMHOUSEPROPERTY NUMERIC(12,2)=NULL,
 @INCOMEFROMOTHERSOURCES NUMERIC(12,2)=NULL,
 @GROSSTOTALINCOME NUMERIC(12,2),
 @TOTALDEDUNDERCHAPTERVIA NUMERIC(12,2),
 @TOTALTAXABLEINCOME NUMERIC(12,2),
 @TAXONTOTALINCOME NUMERIC(12,2),
 @SURCHARGE NUMERIC(12,2),
 @EDUCATIONCESS NUMERIC(12,2),
 @TOTALINCOMETAXPAYABLE NUMERIC(12,2),
 @RELIEFUS89 NUMERIC(12,2),
 @NETTAXPAYABLE NUMERIC(12,2),
 @TDSITDEDUCTED NUMERIC(12,2),
 @EDUCESSDEDUCTED NUMERIC(12,2),
 @PREVEMPINCOMETAX NUMERIC(12,2),
 @PREVEMPCESS NUMERIC(12,2),
 @MANUALINCOMETAX NUMERIC(12,2),
 @MANUALCESS NUMERIC(12,2),
 @TOTALTDS NUMERIC(12,2),
 @TAXPAYABLE NUMERIC(12,2)
AS
 BEGIN
   INSERT INTO SALARYDETAIL(DEDUCTEEID,BRANCHID,BASICSALARY,TAXABLEALLOWANCE,PERKACCUNFURNISHED,PERKFURNISHEDVALUE,COSTOFFURNITURE,
           FURNITURERENTALS,PERQVALUEOFFURNITURE,PERKFURNISHEDTOTAL,RENTPAIDBYEMP,VALUEOFPERQUISITES,CONVEYANCE,REMUNERATION,
           TAXABLELTC,OTHERBENEFITS,PFINEXCESSOF12PERC,EXCESSINTERESTCREDITED,TOTALPERQUISITE,TAXABLEPERQUISITES,
           GROSSSALARY,DEDUCTIONUS16,INCOMEFROMSALARIES,
           OTHERINCOME,GROSSTOTALINCOME,TOTALDEDUNDERCHAPTERVIA,TOTALTAXABLEINCOME,TAXONTOTALINCOME,SURCHARGE,
           EDUCATIONCESS ,TOTALINCOMETAXPAYABLE,RELIEFUS89,NETTAXPAYABLE,TDSITDEDUCTED,EDUCESSDEDUCTED,PREVEMPINCOMETAX,
           PREVEMPCESS,MANUALINCOMETAX,MANUALCESS,TOTALTDS,TAXPAYABLE, INCOMEFROMHOUSEPROPERTY, INCOMEFROMOTHERSOURCES)
        VALUES  (@DEDUCTEEID,@BRANCHID,@BASICSALARY,@TAXABLEALLOWANCE,@PERKACCUNFURNISHED,@PERKFURNISHEDVALUE,@COSTOFFURNITURE,
           @FURNITURERENTALS,@PERQVALUEOFFURNITURE,@PERKFURNISHEDTOTAL,@RENTPAIDBYEMP,@VALUEOFPERQUISITES,@CONVEYANCE,@REMUNERATION ,
           @TAXABLELTC,@OTHERBENEFITS,@PFINEXCESSOF12PERC,@EXCESSINTERESTCREDITED,@TOTALPERQUISITE,@TAXABLEPERQUISITES,
           @GROSSSALARY,@DEDUCTIONUS16,@INCOMEFROMSALARIES,
           @OTHERINCOME,@GROSSTOTALINCOME,@TOTALDEDUNDERCHAPTERVIA,@TOTALTAXABLEINCOME,@TAXONTOTALINCOME ,@SURCHARGE ,
           @EDUCATIONCESS ,@TOTALINCOMETAXPAYABLE,@RELIEFUS89,@NETTAXPAYABLE,@TDSITDEDUCTED,@EDUCESSDEDUCTED,@PREVEMPINCOMETAX,
           @PREVEMPCESS,@MANUALINCOMETAX,@MANUALCESS,@TOTALTDS,@TAXPAYABLE, @INCOMEFROMHOUSEPROPERTY, @INCOMEFROMOTHERSOURCES);
    SET @SALARYDETAILID=SCOPE_IDENTITY();
  SELECT @SALARYDETAILID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveSalaryHeads')
DROP PROCEDURE USP_TDS_SaveSalaryHeads
GO
CREATE PROCEDURE USP_TDS_SaveSalaryHeads
@SALARYHEADID INT,    
@SALARYHEAD VARCHAR(100),    
@ISEARNING BIT,    
@EXEMPTAMT NUMERIC(13,2),    
@BASICPER NUMERIC(4,2),    
@DAPER NUMERIC(4,2),    
@HRAPER NUMERIC(4,2),    
@EPFPER NUMERIC(4,2),
@INCLUDEUS10 BIT,
@INCLUDEINTAX BIT,
@C80CID INT,
@STARTINDEX INT = NULL,
@FIELDLENGTH INT = NULL,
@ISEDITABLE BIT = 0   
AS    
BEGIN    
 IF(@SALARYHEADID = -1)    
   BEGIN    
	  IF EXISTS(SELECT SALARYHEADID FROM SALARYHEAD WITH(NOLOCK) WHERE SALARYNAME = @SALARYHEAD)    
		BEGIN    
	   SET @SALARYHEADID = -2;    
		END    
	  ELSE    
		BEGIN    
		   SELECT @SALARYHEADID = ISNULL(MAX(SALARYHEADID) + 1 ,1) FROM SALARYHEAD WITH (NOLOCK)
		   INSERT INTO SALARYHEAD(SALARYHEADID,SALARYNAME, EARNING, EXEMPTAMT, BASICPER, DAPERC, HRAPERC, EPFPERC, INCLUDEUS10,
			 INCLUDEINTAX,C80CID,STARTINDEX,FIELDLENGTH,ISEDITABLE)    
		   VALUES(@SALARYHEADID,@SALARYHEAD, @ISEARNING, @EXEMPTAMT, @BASICPER, @DAPER, @HRAPER, @EPFPER, @INCLUDEUS10,
		    @INCLUDEINTAX,@C80CID,@STARTINDEX,@FIELDLENGTH,@ISEDITABLE)    
		END    
   END    
  ELSE    
    BEGIN    
	 IF EXISTS(SELECT SALARYHEADID FROM SALARYHEAD WITH(NOLOCK) WHERE SALARYNAME = @SALARYHEAD AND SALARYHEADID <> @SALARYHEADID)    
		BEGIN    
			SET @SALARYHEADID = -2;    
		END    
	  ELSE    
		BEGIN    
		   UPDATE SALARYHEAD SET SALARYNAME = @SALARYHEAD, EARNING = @ISEARNING, EXEMPTAMT = @EXEMPTAMT,    
			  BASICPER = @BASICPER, DAPERC = @DAPER, HRAPERC = @HRAPER, EPFPERC = @EPFPER, INCLUDEUS10 = @INCLUDEUS10,
			  INCLUDEINTAX = @INCLUDEINTAX,C80CID= @C80CID,STARTINDEX=@STARTINDEX,FIELDLENGTH=@FIELDLENGTH,
			  ISEDITABLE = @ISEDITABLE
		   WHERE SALARYHEADID = @SALARYHEADID;    
		END    
  END            
  SELECT @SALARYHEADID    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVESEC16DETAILS')
DROP PROCEDURE USP_TDS_SAVESEC16DETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVESEC16DETAILS]  
@MONTH INT,  
@COMID INT,  
@BRANCHID INT,  
@SALARYHEADID INT =NULL,  
@GROSSAMOUNT1 NUMERIC(13,2) = NULL,  
@GROSSAMOUNT2 NUMERIC(13,2) = NULL,
@RECOVERYAMT NUMERIC(13,2) = NULL  
AS  
 BEGIN  
 DECLARE @SECTION16DETID INT;  
 SET @SECTION16DETID = -1;  
 IF EXISTS(SELECT SECTION16DETID FROM SECTION16DET WITH(NOLOCK) WHERE COMID = @COMID AND SALARYSECTIONID = @SALARYHEADID AND MONTHID = @MONTH)  
   BEGIN  
     SELECT @SECTION16DETID = SECTION16DETID FROM SECTION16DET WITH(NOLOCK) WHERE COMID = @COMID AND SALARYSECTIONID = @SALARYHEADID AND MONTHID = @MONTH  
      UPDATE SECTION16DET SET GROSSAMT1 = @GROSSAMOUNT1 , GROSSAMT2 = @GROSSAMOUNT2, RECOVERYAMT = @RECOVERYAMT 
      WHERE SECTION16DETID = @SECTION16DETID  
   END  
 ELSE  
   BEGIN  
   IF NOT EXISTS(SELECT MONTHID FROM EMPWORKMONTH WITH(NOLOCK) WHERE MONTHID = @MONTH AND BRANCHID = @BRANCHID AND COMID = @COMID)  
	  BEGIN  
	   INSERT INTO EMPWORKMONTH(BRANCHID, COMID, MONTHID)  
	   VALUES(@BRANCHID, @COMID,@MONTH)  
	  END  
	   INSERT INTO SECTION16DET(SALARYSECTIONID, MONTHID, COMID, GROSSAMT1, GROSSAMT2,RECOVERYAMT)  
	   VALUES(@SALARYHEADID, @MONTH, @COMID, @GROSSAMOUNT1, @GROSSAMOUNT2, @RECOVERYAMT)  
	   SET @SECTION16DETID = SCOPE_IDENTITY();  
   END  
  SELECT @SECTION16DETID;  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVESECTION16DETAILS')
DROP PROCEDURE USP_TDS_SAVESECTION16DETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVESECTION16DETAILS]
	@SALARYDETAILID INT,
	@SECTION16DETAILID INT,
	@SALARYSECTIONID INT,
	@AMOUNT NUMERIC(12,2),
	@REMARKS VARCHAR(50)
AS
	BEGIN
		 INSERT INTO SECTION16DETAIL(SALARYDETAILID,SALARYSECTIONID,AMOUNT,REMARKS) VALUES (@SALARYDETAILID,@SALARYSECTIONID,@AMOUNT,@REMARKS);
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVESECTION16DETAILSF004')
DROP PROCEDURE USP_TDS_SAVESECTION16DETAILSF004
GO
CREATE PROCEDURE [USP_TDS_SAVESECTION16DETAILSF004]
	@SALARYDETAILID INT,
	@SALARYSECTIONID INT,
	@AMOUNT NUMERIC(12,2),
	@REMARKS VARCHAR(50)
AS
	BEGIN
		 INSERT INTO SECTION16DETAIL(SALARYDETAILID,SALARYSECTIONID,AMOUNT,REMARKS) VALUES (@SALARYDETAILID,@SALARYSECTIONID,@AMOUNT,@REMARKS);
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVESHORTDEDS')
DROP PROCEDURE USP_TDS_SAVESHORTDEDS
GO
CREATE PROCEDURE [USP_TDS_SAVESHORTDEDS]
@DEFAULTID INT,
@SNO INT ,
@CHALLANRECNO VARCHAR(20),
@DEPOSITDATE  SMALLDATETIME,
@DEDUCTEESNO INT ,
@DEEDUCTEEPAN VARCHAR(10),
@DEDUCTEENAME VARCHAR(75),
@CATEGORY VARCHAR(1),
@SECTION VARCHAR(5),
@REMARKS VARCHAR(5)=NULL,
@TAXRATEFLAG VARCHAR(2),
@TAXRATE DECIMAL(13,2),
@PAYMENTDATE SMALLDATETIME,
@AMOUTPAID DECIMAL(13,2),
@AMOUNTDEDUCTIBLE DECIMAL(13,2),
@AMOUNTDEDUCTED DECIMAL(13,2),
@SHORTDEDUCTIONAMOUNT DECIMAL(13,2),
@SHORTDEDUCTIONINTERST DECIMAL(13,2),
@DEDUCTIONDATE SMALLDATETIME,
@CHALLANNO INT,
@CORRTYPE INT,
@REASON VARCHAR(75)=''
AS
BEGIN
	INSERT INTO CORRDEFAULTSHORTDEDS(DEFAULTID,SNO,CHALLANRECNO,DEPOSITDATE,DEDUCTEESNO,DEEDUCTEEPAN,DEDUCTEENAME,CATEGORY,
										 SECTION,REMARKS,TAXRATEFLAG,TAXRATE,PAYMENTDATE,AMOUTPAID,AMOUNTDEDUCTIBLE,AMOUNTDEDUCTED,
										 SHORTDEDUCTIONAMOUNT,SHORTDEDUCTIONINTERST,DEDUCTIONDATE,CHALLANNO,CORRTYPE,REASON)
	VALUES							(@DEFAULTID,@SNO,@CHALLANRECNO,@DEPOSITDATE,@DEDUCTEESNO,@DEEDUCTEEPAN,@DEDUCTEENAME,@CATEGORY,
										@SECTION,@REMARKS,@TAXRATEFLAG,@TAXRATE,@PAYMENTDATE,@AMOUTPAID,@AMOUNTDEDUCTIBLE,@AMOUNTDEDUCTED,
										@SHORTDEDUCTIONAMOUNT,@SHORTDEDUCTIONINTERST,@DEDUCTIONDATE,@CHALLANNO,@CORRTYPE,@REASON)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVETAXABLEPERQUISTE')
DROP PROCEDURE USP_TDS_SAVETAXABLEPERQUISTE
GO
CREATE PROCEDURE [USP_TDS_SAVETAXABLEPERQUISTE]  
@COMID INT,  
@BRANCHID INT,
@MONTHID INT,
@PERKID INT,  
@VALUEOFPERQUISTE NUMERIC(13,2),  
@AMOUNTRECOVERED NUMERIC(13,2),  
@TAXABLEAMOUNT NUMERIC(13,2)  
AS  
  BEGIN  
   DECLARE @TAXABLEPERKID INT; 
   IF NOT EXISTS(SELECT MONTHID FROM EMPWORKMONTH WITH(NOLOCK) WHERE MONTHID = @MONTHID AND BRANCHID = @BRANCHID AND COMID = @COMID)    
	  BEGIN    
		   INSERT INTO EMPWORKMONTH(BRANCHID, COMID, MONTHID)    
		   VALUES(@BRANCHID, @COMID,@MONTHID)
	  END  
 IF EXISTS(SELECT TAXABLEPERKID FROM TAXABLEPERQUISITE WITH(NOLOCK) WHERE PERKID = @PERKID AND COMID = @COMID AND MONTHID = @MONTHID)  
  BEGIN  
	   SELECT @TAXABLEPERKID = TAXABLEPERKID FROM TAXABLEPERQUISITE WITH(NOLOCK) WHERE PERKID = @PERKID AND COMID = @COMID AND MONTHID = @MONTHID; 
	   UPDATE TAXABLEPERQUISITE SET GROSSAMT= @VALUEOFPERQUISTE, EXEMPTAMT= @AMOUNTRECOVERED,  
					TAXABLEAMT = @TAXABLEAMOUNT  
	   WHERE PERKID = @PERKID AND COMID = @COMID AND MONTHID = @MONTHID
  END
    ELSE  
       BEGIN  
		   INSERT INTO TAXABLEPERQUISITE (MONTHID, COMID, PERKID, GROSSAMT, EXEMPTAMT, TAXABLEAMT)  
		   VALUES(@MONTHID, @COMID, @PERKID, @VALUEOFPERQUISTE, @AMOUNTRECOVERED, @TAXABLEAMOUNT)  
		   SET @TAXABLEPERKID = SCOPE_IDENTITY();  
       END  
       SELECT @TAXABLEPERKID;  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveTaxpayable')
DROP PROCEDURE USP_TDS_SaveTaxpayable
GO
CREATE PROCEDURE [USP_TDS_SaveTaxpayable]    
@COMID INT,    
@BRANCHID INT,    
@INCOMETAX NUMERIC(13,2),    
@SURCHARGE NUMERIC(13,2),    
@CESS NUMERIC(13,2),    
@RELIEFUS89 NUMERIC(13,2),    
@PREVINCOMETAX NUMERIC(13,2),    
@MANUALINCOMETAX NUMERIC(13,2),  
@TOTALTDS NUMERIC(13,2),    
@TAXPAYABLE NUMERIC(13,2),
@TOTALTAXABLEINCOME NUMERIC(13,2) ,
@CREDITUS87A NUMERIC(13,2)   
AS    
 BEGIN    
	 UPDATE SALARYDETAIL SET TOTALTAXABLEINCOME = CAST(ROUND((@TOTALTAXABLEINCOME)*10/10,-1) AS NUMERIC(13,2)), TAXONTOTALINCOME = @INCOMETAX,    
	  SURCHARGE = @SURCHARGE, EDUCATIONCESS = @CESS,    
	  TOTALINCOMETAXPAYABLE = (@INCOMETAX - @CREDITUS87A) + @SURCHARGE + @CESS,     
	  MANUALINCOMETAX = @MANUALINCOMETAX,PREVEMPINCOMETAX = @PREVINCOMETAX, TOTALTDS = @TOTALTDS,CREDITUS87A =  @CREDITUS87A,   
	  TAXPAYABLE = @TAXPAYABLE, RELIEFUS89 = @RELIEFUS89, NETTAXPAYABLE = @INCOMETAX + @SURCHARGE + @CESS - ISNULL(@RELIEFUS89,0) - ISNULL(@CREDITUS87A,0)  
	  FROM SALARYDETAIL SD WITH (NOLOCK)    
	  INNER JOIN EMPLOYEE E WITH (NOLOCK) ON SD.DEDUCTEEID = E.DEDUCTEEID    
	  INNER JOIN DEDUCTEE D WITH (NOLOCK) ON D.DEDUCTEEID  = E.DEDUCTEEID    
	  INNER JOIN LINKTOTC LC WITH (NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID    
	  WHERE LC.COMID = @COMID AND LC.BRANCHID = @BRANCHID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVETAXSLAB')
DROP PROCEDURE USP_TDS_SAVETAXSLAB
GO
CREATE PROCEDURE USP_TDS_SAVETAXSLAB
@CATID INT,
@SLABID INT,
@INCOMEFROM NUMERIC(13,2),
@INCOMETO NUMERIC(13,2) = NULL,
@RATE NUMERIC(4,2)
AS  
BEGIN  
	IF(@SLABID <> 0)
	  BEGIN
		UPDATE TAXSLAB SET AMOUNTFROM = @INCOMEFROM, AMOUNTTO = @INCOMETO, TAXRATE = @RATE
		WHERE SLABID = @SLABID AND CATID = @CATID
	  END
	ELSE
	  BEGIN
		SELECT @SLABID = ISNULL(MAX(SLABID),0) + 1 FROM TAXSLAB WITH(NOLOCK) WHERE CATID = @CATID
		INSERT INTO TAXSLAB(SLABID , CATID, AMOUNTFROM, AMOUNTTO, TAXRATE)
		VALUES(@SLABID, @CATID,@INCOMEFROM,@INCOMETO,@RATE)		
	  END
	SELECT @SLABID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveTCInfo')
DROP PROCEDURE USP_TDS_SaveTCInfo
GO
CREATE PROCEDURE [USP_TDS_SaveTCInfo]  
	@COMID INT  
AS  
	BEGIN  
		IF(EXISTS(SELECT COMID FROM TCINFO WITH(NOLOCK) WHERE COMID = @COMID))  
		BEGIN
			UPDATE TCINFO SET ISREQUEST = 1 WHERE COMID = @COMID  
		END  
		ELSE  
		BEGIN  
			INSERT INTO TCINFO(COMID, ISREQUEST) VALUES (@COMID, 1)  
		END  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveTCInfoAll')
DROP PROCEDURE USP_TDS_SaveTCInfoAll
GO
CREATE PROCEDURE [USP_TDS_SaveTCInfoAll]  
	@COMIDS VARCHAR(MAX)  
AS  
	BEGIN
		SELECT DATA INTO #COMID FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')
		DECLARE @COUNT INT;
		DECLARE @COMID INT;
		SELECT @COUNT = COUNT(DATA) FROM #COMID
		DECLARE @I INT;
		SET @I = 1
		WHILE(@I <= @COUNT)
		BEGIN
			SELECT TOP (@I) DATA INTO #REQCOMID FROM #COMID
			DELETE FROM #REQCOMID WHERE DATA IN (SELECT TOP (@I-1) DATA FROM #REQCOMID)
			SELECT @COMID = DATA FROM #REQCOMID
			IF(EXISTS(SELECT COMID FROM TCINFO WITH(NOLOCK) WHERE COMID = @COMID))  
			BEGIN
				UPDATE TCINFO SET ISREQUEST = 1 WHERE COMID = @COMID  
			END  
			ELSE  
			BEGIN  
				INSERT INTO TCINFO(COMID, ISREQUEST) VALUES (@COMID, 1)  
			END
		DROP TABLE #REQCOMID
		END
	DROP TABLE #COMID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVETDSRATEDETAIL')
DROP PROCEDURE USP_TDS_SAVETDSRATEDETAIL
GO
CREATE PROCEDURE [USP_TDS_SAVETDSRATEDETAIL]      
@BGLCODEID INT,      
@BGLCODE VARCHAR(5),      
@DESCRIPTION VARCHAR(75),      
@SECTIONID INT,      
@THRESHOLDLIMIT NUMERIC(13,2) = NULL,      
@CATEGORY1 NUMERIC(13,2),      
@CATEGORY2 NUMERIC(13,2)       
AS      
	BEGIN      
		DECLARE @RETURNVALUE INT;      
		IF(@BGLCODEID = -1)
			BEGIN      
				INSERT INTO TDSRATE (BGLCODE, DESCRIPTION, SECTIONID, THRESHOLDLIMIT, CATEGORY1, CATEGORY2)      
				VALUES(@BGLCODE, @DESCRIPTION, @SECTIONID, @THRESHOLDLIMIT, @CATEGORY1, @CATEGORY2)      
				SET @RETURNVALUE = SCOPE_IDENTITY();      
			END      
		ELSE      
			BEGIN      
				UPDATE TDSRATE SET BGLCODE = @BGLCODE , DESCRIPTION = @DESCRIPTION, SECTIONID = @SECTIONID ,  THRESHOLDLIMIT= @THRESHOLDLIMIT,    
					CATEGORY1=@CATEGORY1, CATEGORY2=@CATEGORY2       
				WHERE BGLCODEID=@BGLCODEID;      
				SET @RETURNVALUE= @BGLCODEID;      
			END      
		SELECT @RETURNVALUE;      
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVETEXTRECORDS')
DROP PROCEDURE USP_TDS_SAVETEXTRECORDS
GO
CREATE PROCEDURE [USP_TDS_SAVETEXTRECORDS]
@BRANCHID INT,
@MONTHID INT,
@TEXT VARCHAR(MAX),
@CORRECT BIT
AS
  BEGIN
	 INSERT INTO TEXTRECORDS(TEXT, ISCORRECT, BRANCHID, MONTHID) VALUES(@TEXT, @CORRECT,@BRANCHID, @MONTHID)
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveTracesAuditInfo')
DROP PROCEDURE USP_TDS_SaveTracesAuditInfo
GO
CREATE PROCEDURE USP_TDS_SaveTracesAuditInfo
@BRANCHID INT,
@USERNAME VARCHAR(20),
@BRANCHINFO VARCHAR(200)
AS
BEGIN
	INSERT INTO TRACESAUDIT(BRANCHID,USERNAME,BRANCHINFO,REQUESTEDON)
	VALUES(@BRANCHID,@USERNAME,@BRANCHINFO,GETDATE())
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveTracesDetailsInCompany')
DROP PROCEDURE USP_TDS_SaveTracesDetailsInCompany
GO
CREATE PROCEDURE USP_TDS_SaveTracesDetailsInCompany
(                        
	@BRANCHCODE VARCHAR(100),                        
	@TRACESACNAME VARCHAR(100),                      
	@TRACESACPWD VARCHAR(100)
)                        
AS                      
BEGIN                    
	 UPDATE 
		COMPANYBRANCH SET TRACESACNAME = @TRACESACNAME, TRACESACPWD = @TRACESACPWD
	 WHERE 
		BRANCHCODE=@BRANCHCODE;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVETRACESLOGINDETAILS')
DROP PROCEDURE USP_TDS_SAVETRACESLOGINDETAILS
GO
CREATE PROCEDURE [USP_TDS_SAVETRACESLOGINDETAILS]
@BRANCHID INT,
@USERNAME NVARCHAR(50),
@PASS NVARCHAR(50),
@ISREMEMBERME BIT
AS
	BEGIN
		IF(EXISTS(SELECT BRANCHID FROM TRACESLOGINDETAILS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID))
		BEGIN
			UPDATE TRACESLOGINDETAILS SET BRANCHID=@BRANCHID,USERNAME=@USERNAME,PASS=@PASS,ISREMEMBERME=@ISREMEMBERME
			WHERE BRANCHID=@BRANCHID;
		END
		ELSE
		BEGIN
			INSERT INTO TRACESLOGINDETAILS(BRANCHID,USERNAME,PASS,ISREMEMBERME)
			VALUES(@BRANCHID,@USERNAME,@PASS,@ISREMEMBERME);
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SaveURLsToQueue')
DROP PROCEDURE USP_TDS_SaveURLsToQueue
GO
CREATE PROCEDURE USP_TDS_SaveURLsToQueue
@BRANCHID INT, 
@FORMID INT,
@QUARTER INT,
@DEDUCTEEPAN VARCHAR(10),
@EMAILURL VARCHAR(MAX),
@SMSURL VARCHAR(MAX) = NULL
AS
BEGIN
	INSERT INTO EMAILQUEUE (BRANCHID, FORMID, QUARTER, DEDUCTEEPAN, EMAILURL, SMSURL)
	VALUES (@BRANCHID, @FORMID, @QUARTER, @DEDUCTEEPAN, @EMAILURL, @SMSURL)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEUSER')
DROP PROCEDURE USP_TDS_SAVEUSER
GO
CREATE PROCEDURE [USP_TDS_SAVEUSER]
 @USERID INT,          
 @USERNAME VARCHAR(20),          
 @PASSWORD VARCHAR(50),          
 @ISSUPERADMIN BIT,          
 @ISBRANCHADMIN BIT,          
 @ISACTIVE BIT,          
 @BRANCHID INT,          
 @LastLoginTime DateTime = NULL,  
 @ISCHECKER BIT = NULL,  
 @ISAUDITOR BIT = NULL,
 @ISROLEREQUIRED BIT = 0,
 @PWDCHGDATE DATETIME = NULL, 
 @WRONGPWDCOUNT INT=NULL,
 @ISPASSWORDTRACK BIT=0 
AS          
BEGIN          
 --checking for user already exists with the same username          
 --if user exist set @userid=-1   
 DECLARE @ROLEID INT;
 SET @ROLEID = -1;
 IF((SELECT COUNT(USERNAME) FROM USERMASTER WITH(NOLOCK) WHERE USERNAME=@USERNAME AND USERID <> @USERID)>0)          
 BEGIN          
   SET @USERID=-1          
 END          
 --if doesnt exists return the current userid          
 ELSE          
 BEGIN          
  IF (@USERID= -1)  --NEW USER          
   BEGIN          
    INSERT INTO dbo.USERMASTER([USERNAME],PASSWORD,BRANCHID,ISSUPERADMIN,ISBRANCHADMIN,ISACTIVE,LastLoginTime, ISCHECKER, ISAUDITOR, WRONGPWDCOUNT)          
                   VALUES(@USERNAME,@PASSWORD,@BRANCHID,@ISSUPERADMIN,@ISBRANCHADMIN,@ISACTIVE,@LastLoginTime,@ISCHECKER, @ISAUDITOR,0)          
     SET @USERID=SCOPE_IDENTITY();   
     SELECT @ROLEID = CASE WHEN @ISSUPERADMIN = 1 THEN SAROLE
						   WHEN @ISBRANCHADMIN = 1 THEN BAROLE
						   ELSE BUROLE END FROM DEFAULTSETTINGS
  IF(@ISROLEREQUIRED = 1)
   BEGIN
   	IF(@ROLEID IS NOT NULL)
	 BEGIN
		INSERT INTO ROLEUSER VALUES(@ROLEID , @USERID)
	 END
   END 
  END         
  ELSE
  BEGIN          
     IF(@LastLoginTime IS NULL)          
      BEGIN          
           UPDATE dbo.USERMASTER SET [USERNAME]=@USERNAME,PASSWORD=@PASSWORD,[BRANCHID]=@BRANCHID,ISSUPERADMIN=@ISSUPERADMIN,          
                   ISBRANCHADMIN=@ISBRANCHADMIN,ISACTIVE=@ISACTIVE,ISCHECKER = @ISCHECKER, ISAUDITOR = @ISAUDITOR,WRONGPWDCOUNT=@WRONGPWDCOUNT,PWDCHGDATE = @PWDCHGDATE WHERE USERID=@USERID                       
      END          
     ELSE          
      BEGIN                
        UPDATE dbo.USERMASTER SET [USERNAME]=@USERNAME,PASSWORD=@PASSWORD,[BRANCHID]=@BRANCHID,ISSUPERADMIN=@ISSUPERADMIN,          
           ISBRANCHADMIN=@ISBRANCHADMIN,ISACTIVE=@ISACTIVE,LastLoginTime=@LastLoginTime,ISCHECKER = @ISCHECKER, ISAUDITOR = @ISAUDITOR,WRONGPWDCOUNT=@WRONGPWDCOUNT,PWDCHGDATE = @PWDCHGDATE WHERE USERID=@USERID          
      END          
    END       
 END
 IF(@ISPASSWORDTRACK = 1)
 BEGIN
	IF(@USERID != 1)   
		BEGIN    
			DECLARE @RETAIN INT  
			DECLARE @PWDCOUNT INT  
			DECLARE @EXISTINGPWDID INT
				IF  EXISTS (SELECT * FROM sys.tables WHERE name = N'PASSWORDHISTORY' AND type = 'U')
					BEGIN
						SELECT @EXISTINGPWDID = PWDHISTORYID FROM PASSWORDHISTORY WITH(NOLOCK) WHERE USERID = @USERID AND PASSWORD = @PASSWORD
						IF (@EXISTINGPWDID IS NULL) 
						BEGIN  
							UPDATE USERMASTER SET PASSWORD=@PASSWORD, WRONGPWDCOUNT=0 WHERE USERID=@USERID
							INSERT INTO PASSWORDHISTORY (USERID, PASSWORD) VALUES (@USERID, @PASSWORD)  
							SELECT @RETAIN = RETAINPREVPWD FROM DEFAULTSETTINGS WITH(NOLOCK) 
							SELECT @PWDCOUNT = COUNT(PWDHISTORYID) FROM PASSWORDHISTORY WITH(NOLOCK) WHERE USERID = @USERID  
								IF @PWDCOUNT > @RETAIN  
								BEGIN  
									SELECT *, ROW_NUMBER() OVER(ORDER BY PWDHISTORYID DESC) ROWNUM INTO #HISTORYREMOVE  
									FROM PASSWORDHISTORY WITH(NOLOCK)  
									WHERE USERID = @USERID  
									DELETE FROM PASSWORDHISTORY   
									WHERE USERID = @USERID AND  
									PWDHISTORYID IN   
									(SELECT PWDHISTORYID FROM #HISTORYREMOVE WITH(NOLOCK) WHERE ROWNUM > @RETAIN)  
								END  
								UPDATE USERMASTER SET PWDCHGDATE = GETDATE() WHERE USERID = @USERID
								SELECT @@ROWCOUNT
								SELECT @EXISTINGPWDID
						END
					END
		END
END          
 SELECT (@USERID)userID          
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SAVEUSERS')
DROP PROCEDURE USP_TDS_SAVEUSERS
GO
CREATE PROC [dbo].[USP_TDS_SaveUsers]        
 @USERID INT,        
 @USERNAME VARCHAR(20),        
 @PASSWORD VARCHAR(50),        
 @ISSUPERADMIN BIT,        
 @ISBRANCHADMIN BIT,        
 @ISACTIVE BIT,        
 @BRANCHID INT,        
 @LastLoginTime DateTime = NULL,  
 @ISCHECKER BIT=NULL        
AS        
BEGIN        
 INSERT INTO dbo.USERMASTER([USERNAME],PASSWORD,BRANCHID,ISSUPERADMIN,ISBRANCHADMIN,ISACTIVE,LastLoginTime,ISCHECKER)        
 VALUES(@USERNAME,@PASSWORD,@BRANCHID,@ISSUPERADMIN,@ISBRANCHADMIN,@ISACTIVE,@LastLoginTime,@ISCHECKER)        
   SET @USERID=SCOPE_IDENTITY();        
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SerialNumberResequencingInMaster')
DROP PROCEDURE USP_TDS_SerialNumberResequencingInMaster
GO
CREATE PROCEDURE [dbo].[USP_TDS_SerialNumberResequencingInMaster]
    @BRANCHID INT,
    @FORMID INT,
    @QUARTER INT
AS
BEGIN
    IF(@FORMID = 1)
    BEGIN
	   IF EXISTS(SELECT BRANCHID, SERIALNO, COUNT(SERIALNO)
				FROM EMPLOYEE E WITH(NOLOCK)
				    INNER JOIN DEDUCTEE D WITH(NOLOCK)
					   ON D.DEDUCTEEID = E.DEDUCTEEID
				WHERE BRANCHID = @BRANCHID
				GROUP BY BRANCHID, SERIALNO
				HAVING COUNT(SERIALNO) > 1)
		  BEGIN
			 SELECT ROW_NUMBER() OVER(PARTITION BY D.BRANCHID ORDER BY D.DEDUCTEEID)SERIALNO, D.DEDUCTEEID 
			 INTO #EMPSERIALNO
			 FROM DEDUCTEE D
				INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
			 WHERE BRANCHID = @BRANCHID
			 UPDATE EMPLOYEE SET SERIALNO = S.SERIALNO
			 FROM EMPLOYEE E 
			 INNER JOIN #EMPSERIALNO S ON S.DEDUCTEEID = E.DEDUCTEEID
		  END
    END
    ELSE
    BEGIN
	   IF EXISTS(SELECT BRANCHID, SERIALNO, COUNT(SERIALNO)
				FROM NONEMPLOYEE E WITH(NOLOCK)
				    INNER JOIN DEDUCTEE D WITH(NOLOCK)
					   ON D.DEDUCTEEID = E.DEDUCTEEID
				WHERE BRANCHID = @BRANCHID
				GROUP BY BRANCHID, SERIALNO
				HAVING COUNT(SERIALNO) > 1)
		  BEGIN
			 SELECT ROW_NUMBER() OVER(PARTITION BY D.BRANCHID ORDER BY D.DEDUCTEEID)SERIALNO, D.DEDUCTEEID 
			 INTO #NONEMPSERIALNO
			 FROM DEDUCTEE D
				INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID
			 WHERE BRANCHID = @BRANCHID
			 UPDATE NONEMPLOYEE SET SERIALNO = S.SERIALNO
			 FROM NONEMPLOYEE NE 
			 INNER JOIN #NONEMPSERIALNO S ON S.DEDUCTEEID = NE.DEDUCTEEID
		  END
    END
    IF EXISTS(SELECT BRANCHID, FORMID, QUARTER, SERIALNO, COUNT(SERIALNO)
			 FROM DEDUCTIONDETAIL WITH(NOLOCK)
			 WHERE BRANCHID = @BRANCHID
				AND FORMID = @FORMID
				AND QUARTER = @QUARTER
			 GROUP BY BRANCHID, FORMID, QUARTER, SERIALNO
			 HAVING COUNT(SERIALNO) > 1)
	   BEGIN
		  SELECT ROW_NUMBER() OVER(PARTITION BY D.BRANCHID, D.FORMID, D.QUARTER ORDER BY D.DEDUCTIONID)SERIALNO, D.DEDUCTIONID 
		  INTO #DEDUCTIONSERIALNO
		  FROM DEDUCTIONDETAIL D
		  WHERE BRANCHID = @BRANCHID
			 AND FORMID = @FORMID
			 AND QUARTER = @QUARTER
		  UPDATE DEDUCTIONDETAIL SET SERIALNO = S.SERIALNO
		  FROM DEDUCTIONDETAIL D 
		  INNER JOIN #DEDUCTIONSERIALNO S ON S.DEDUCTIONID = D.DEDUCTIONID
	   END
    IF OBJECT_ID('TEMPDB..#EMPSERIALNO') IS NOT NULL
	   DROP TABLE #EMPSERIALNO
    IF OBJECT_ID('TEMPDB..#NONEMPSERIALNO') IS NOT NULL
	   DROP TABLE #NONEMPSERIALNO
    IF OBJECT_ID('TEMPDB..#DEDUCTIONSERIALNO') IS NOT NULL
	   DROP TABLE #DEDUCTIONSERIALNO
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SetCorrDeductorName')
DROP PROCEDURE USP_TDS_SetCorrDeductorName
GO
CREATE PROCEDURE [dbo].[USP_TDS_SetCorrDeductorName]
	@BRANCHID INT,
	@FORMID INT,	
	@QUARTER INT,
	@DEDUCTORNAME VARCHAR(75)
AS
	BEGIN
	INSERT INTO CORRDEDUCTOR ( BRANCHID, FORMID, [QUARTER], DEDUCTORID, DEDUCTORNAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5,
				 PINCODE, STATEID, ISADDRCHANGED, STDCODE, PHONENO, EMAILADDRESS, PAN, [TAN], LASTTAN, FINANCIALYEAR, STATUSID, DEDUCTORTYPEID,
				 LASTDEDUCTORTYPEID, GOVTADDSTATEID, GOVTADDPAOCODE, GOVTADDPAOREGNNO, GOVTADDDDOCODE, GOVTADDDDOREGNNO, GOVTADDMINISTRY, GOVTADDOTHERNAME,				
				 RPNAME, RPDESIGNATION, RPADDRESS1, RPADDRESS2, RPADDRESS3, RPADDRESS4, RPADDRESS5, RPSTATEID, RPPINCODE, RPISADDRCHANGED, RPSTDCODE, RPPHONENO, RPMOBILENO,
				 RPEMAILADDRESS, CORRECTIONSTATUS, EXPECTEDCID, EXPECTEDSID,  GOVTADDAIN,ALTERNATESTD, ALTERNATEPHONE, ALTERNATEEMAIL,RPALTERNATESTD, RPALTERNATEPHONE, RPALTERNATEEMAIL,TANREGISTRATION)
		SELECT  CD.BRANCHID,CD.FORMID,CD.[QUARTER],CD.DEDUCTORID,@DEDUCTORNAME,CD.ADDRESS1,CD.ADDRESS2,CD.ADDRESS3,CD.ADDRESS4,CD.ADDRESS5,
				CD.PINCODE,CD.STATEID,CD.ISADDRCHANGED,CD.STDCODE,CD.PHONENO,CD.EMAILADDRESS,CD.PAN,CD.[TAN],CD.[TAN],CD.FINANCIALYEAR,CD.STATUSID,CD.DEDUCTORTYPEID,
				CD.DEDUCTORTYPEID,CD.GOVTADDSTATEID,CD.GOVTADDPAOCODE,CD.GOVTADDPAOREGNNO,CD.GOVTADDDDOCODE,CD.GOVTADDDDOREGNNO,CD.GOVTADDMINISTRY,CD.GOVTADDOTHERNAME,				
				CD.RPNAME,CD.RPDESIGNATION,CD.RPADDRESS1,CD.RPADDRESS2,CD.RPADDRESS3,CD.RPADDRESS4,CD.RPADDRESS5,CD.RPSTATEID,CD.RPPINCODE,CD.RPISADDRCHANGED,CD.RPSTDCODE,CD.RPPHONENO,CD.RPMOBILENO,
				CD.RPEMAILADDRESS,2,CD.EXPECTEDCID,CD.EXPECTEDSID, CD.GOVTADDAIN,ALTERNATESTD, ALTERNATEPHONE, ALTERNATEEMAIL,RPALTERNATESTD, RPALTERNATEPHONE, RPALTERNATEEMAIL,TANREGISTRATION
		FROM	CORRDEDUCTOR CD WITH(NOLOCK) 
				WHERE CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.[QUARTER] = @QUARTER; 
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SETDEFAULTVALUE')
DROP PROCEDURE USP_TDS_SETDEFAULTVALUE
GO
CREATE PROCEDURE [USP_TDS_SETDEFAULTVALUE]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@DEFAULTDATE SMALLDATETIME
AS
 BEGIN
  IF EXISTS(SELECT DATEOFDEBIT FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID =@BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER AND DATEOFDEBIT = @DEFAULTDATE)
   BEGIN
    UPDATE CHALLANDETAIL SET DATEOFDEBIT = NULL
    WHERE BRANCHID =@BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER AND DATEOFDEBIT = @DEFAULTDATE
   END
  IF EXISTS(SELECT CHEQUEDATE FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID =@BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER AND CHEQUEDATE = @DEFAULTDATE)
   BEGIN
    UPDATE CHALLANDETAIL SET CHEQUEDATE = NULL
    WHERE BRANCHID =@BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER AND CHEQUEDATE = @DEFAULTDATE
   END
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SETEMPLOYEETRANSFERFLAG')
DROP PROCEDURE USP_TDS_SETEMPLOYEETRANSFERFLAG
GO
CREATE PROCEDURE USP_TDS_SETEMPLOYEETRANSFERFLAG 
@BRANCHID INT,
@COMIDS NVARCHAR(MAX)    
AS    
BEGIN  
	SELECT * INTO #COMID FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')
	UPDATE EMPLOYEE SET ISTRANSFERED=1 
	   FROM EMPLOYEE E
	   INNER JOIN LINKTOTC LC
	   ON LC.EMPLOYEEID=E.EMPLOYEEID
	   INNER JOIN #COMID COM
	   ON LC.COMID=COM.DATA
	   WHERE LC.BRANCHID <> @BRANCHID
	   UPDATE EMPLOYEE SET ISTRANSFERED=0 
	   FROM EMPLOYEE E
	   INNER JOIN LINKTOTC LC
	   ON LC.EMPLOYEEID=E.EMPLOYEEID
	   INNER JOIN #COMID COM
	   ON LC.COMID=COM.DATA
	   WHERE LC.BRANCHID = @BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SETEXCLUDEINAC')
DROP PROCEDURE USP_TDS_SETEXCLUDEINAC
GO
CREATE PROCEDURE [USP_TDS_SETEXCLUDEINAC]  
   @ID VARCHAR(MAX),  
   @SET BIT  
  AS  
  BEGIN  
   DECLARE @QUERY NVARCHAR(MAX)  
   IF(@SET=1)  
   BEGIN  
   SET @QUERY='  
   UPDATE DEDUCTIONDETAIL SET EXCLUDEINAC=1 WHERE DEDUCTIONID IN (  
   SELECT DEDUCTIONID FROM DEDCHALLANMAKEPAYMENT DCMP WITH(NOLOCK)  
   INNER JOIN CHALLANMAKEPAYMENT CMP WITH(NOLOCK) ON DCMP.ID=CMP.ID  
   WHERE CMP.ID IN ('+ @ID+'))'  
   END  
   ELSE  
   BEGIN   
    SET @QUERY='  
   UPDATE DEDUCTIONDETAIL SET EXCLUDEINAC=0 WHERE DEDUCTIONID IN (  
   SELECT DEDUCTIONID FROM DEDCHALLANMAKEPAYMENT DCMP WITH(NOLOCK)  
   INNER JOIN CHALLANMAKEPAYMENT CMP WITH(NOLOCK) ON DCMP.ID=CMP.ID  
   WHERE CMP.ID IN ('+ @ID+'))'  
   END  
   EXEC SP_EXECUTESQL @QUERY  
   SET @QUERY='DELETE FROM DEDCHALLANMAKEPAYMENT WHERE ID IN (' + @ID + ')'  
   EXEC SP_EXECUTESQL @QUERY  
   SET @QUERY='DELETE FROM CHALLANMAKEPAYMENT WHERE ID IN (' + @ID + ')'  
   EXEC SP_EXECUTESQL @QUERY  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SetOltasStatus')
DROP PROCEDURE USP_TDS_SetOltasStatus
GO
CREATE PROCEDURE [USP_TDS_SetOltasStatus] 
	@MONTH INT,
	@BRANCHID INT=NULL,
	@FORMID INT=NULL,
	@OLTASSTATUS BIT,
	@TTUMSTATUS BIT,
	@ISNULL BIT,
	@ISFROMTTUM BIT
AS
BEGIN
	DECLARE @SQLQUERY NVARCHAR(MAX) 
    IF(@BRANCHID IS NULL AND @FORMID IS NULL)
		 BEGIN			
			--SET @SQLQUERY='UPDATE CHALLANDETAIL SET ISOLTASINCLUDED='+CAST(@OLTASSTATUS AS VARCHAR)+',ISTTUMINCLUDED='+CAST(@TTUMSTATUS AS VARCHAR)+' FROM CHALLANDETAIL CD 
			--							INNER JOIN DEDCHALINK DCL ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID
			--							WHERE ISAUTOGENERATED=1 AND ISOLTASINCLUDED=0'
			SET @SQLQUERY='SELECT CD.CHALLANID INTO #CHATOUPD FROM CHALLANDETAIL CD WITH(NOLOCK)
										INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID
										WHERE ISAUTOGENERATED=1 AND ISOLTASINCLUDED=0'
			IF(@ISNULL=1)
				BEGIN
				  IF(@ISFROMTTUM=1)
					BEGIN
						SET @SQLQUERY=@SQLQUERY+' AND BANKCHALLANNO IS NULL AND CHALLANPAIDDATE IS NULL'
					END
				 ELSE
					BEGIN
						SET @SQLQUERY=@SQLQUERY+' AND ISTTUMINCLUDED = 1'
					END	
			  END
		   ELSE
			  BEGIN
					SET @SQLQUERY=@SQLQUERY+' AND ISTTUMINCLUDED=0'
			  END
			SET @SQLQUERY = @SQLQUERY + '; UPDATE CHALLANDETAIL SET ISOLTASINCLUDED='+CAST(@OLTASSTATUS AS VARCHAR)+',ISTTUMINCLUDED='+CAST(@TTUMSTATUS AS VARCHAR)+' WHERE CHALLANID IN (SELECT CHALLANID FROM #CHATOUPD)'
		END
	ELSE
		SET @SQLQUERY='	UPDATE CHALLANDETAIL SET ISOLTASINCLUDED=1 WHERE  ISAUTOGENERATED=1 AND MONTH(CHALLANPAIDDATE)=@MONTH AND BRANCHID=@BRANCHID AND FORMID=@FORMID'
	--PRINT @SQLQUERY
	EXEC SP_EXECUTESQL @SQLQUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SETTTUMSTATUS')
DROP PROCEDURE USP_TDS_SETTTUMSTATUS
GO
CREATE PROCEDURE [USP_TDS_SETTTUMSTATUS]
@ISTRUE BIT
AS
BEGIN
	 UPDATE CHALLANDETAIL SET ISTTUMINCLUDED=@ISTRUE WHERE ISTTUMINCLUDED<>@ISTRUE AND ISOLTASINCLUDED=0
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_ShowExcludedDedDetails')
DROP PROCEDURE USP_TDS_ShowExcludedDedDetails
GO
CREATE PROCEDURE USP_TDS_ShowExcludedDedDetails 
	@STARTROW INT,
	@PAGESIZE INT,
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@SECTIONID INT,
	@NAME VARCHAR(75)
AS
	BEGIN
		/* Determine the first record and last record */
		DECLARE @FIRSTREC INT, @LASTREC INT
		SELECT @FIRSTREC = (@STARTROW - 1) * @PAGESIZE
		SELECT @LASTREC = (@STARTROW * @PAGESIZE + 1);
		--SET @LASTREC = 100;
		DECLARE @QUERY NVARCHAR(MAX);
		SELECT @BRANCHID BRANCHID, @FORMID FORMID, @QUARTER [QUARTER],DD.SERIALNO,DD.DEDUCTIONID,DD.DEDUCTEEID,DD.ERETURNID,DD.MODE,DD.SECTIONID,
			DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE,
			DD.INCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,DD.ISBOOKENTRY,
			DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD 
		INTO #DEDUCTIONDETAIL
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
			AND FORMID = @FORMID
			AND QUARTER = @QUARTER
			AND ISNULL(ERETURNID,0) = 0
		SELECT * 
		INTO #DEDUCTEE
		FROM DEDUCTEE WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
		SELECT * 
		INTO #DEDCHALINK
		FROM DEDCHALINK WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
		SELECT * 
		INTO #CHALLANDETAIL
		FROM CHALLANDETAIL WITH(NOLOCK)
		WHERE BRANCHID = @BRANCHID
		IF @FORMID = 1
			BEGIN
				SET @QUERY = 'SELECT ID = IDENTITY (INT,1,1),* INTO #EXCLUDEDDEDUCTIONS
							  FROM (
										SELECT  D.NAME+''(''+CAST(E.SERIALNO AS VARCHAR)+'')'' AS NAME,-1 AS DEDUCTEECODE,D.PAN AS PAN,D.PANREFERENCE AS PANREFERENCE,
												DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDSERIALNO,DD.DEDUCTIONID,DD.DEDUCTEEID,DD.ERETURNID,DD.MODE,DD.SECTIONID,TS.SECTIONNAME,
												DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE,
												DD.INCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,
												CD.SERIALNO AS CHALLANSLNO
										FROM    #DEDUCTIONDETAIL DD WITH(NOLOCK) 
											INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
											INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
											INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
											LEFT JOIN #DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID AND DD.BRANCHID = DCL.BRANCHID
											LEFT JOIN #CHALLANDETAIL CD WITH(NOLOCK) ON DCL.CHALLANID = CD.CHALLANID AND CD.BRANCHID = DCL.BRANCHID
										WHERE   DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) 
										-- + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.[QUARTER] = ' 
										-- + CAST(@QUARTER AS VARCHAR) + ' AND ISNULL(DD.ERETURNID,0) = 0'
			END
		ELSE
			BEGIN
				SET @QUERY = 'SELECT ID = IDENTITY (INT,1,1),* INTO #EXCLUDEDDEDUCTIONS
							  FROM (
										SELECT  D.NAME+''(''+CAST(NE.SERIALNO AS VARCHAR)+'')'' AS NAME,NE.DEDUCTEECODE,D.PAN AS PAN,D.PANREFERENCE AS PANREFERENCE,
												DD.BRANCHID,DD.FORMID,DD.[QUARTER],DD.SERIALNO AS DEDSERIALNO,DD.DEDUCTIONID,DD.DEDUCTEEID,DD.ERETURNID,DD.MODE,DD.SECTIONID,TS.SECTIONNAME,
												DD.PAYMENTMADE,DD.PAYMENTDATE,DD.TOTALDEDUCTED,DD.TAXRATE,DD.ISTAXINFOEDITABLE,DD.DEDUCTEDDATE,
												DD.INCOMETAX,DD.INCOMETAXRATE,DD.SURCHARGE,DD.SURCHARGERATE,DD.EDUCATIONCESS,DD.EDUCATIONCESSRATE,DD.NONDEDREASON,DD.ISBOOKENTRY,DD.ISGROSSINGUP,DD.UTN,DD.ISPANVALIDBYITD,
												CD.SERIALNO AS CHALLANSLNO
										FROM    #DEDUCTIONDETAIL DD WITH(NOLOCK) 
											INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID AND DD.BRANCHID = D.BRANCHID
											INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
											INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON DD.SECTIONID = TS.SECTIONID
											LEFT JOIN #DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID AND DD.BRANCHID = DCL.BRANCHID
											LEFT JOIN #CHALLANDETAIL CD WITH(NOLOCK) ON DCL.CHALLANID = CD.CHALLANID AND CD.BRANCHID = DCL.BRANCHID
										WHERE   DD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR)
										-- + ' AND DD.FORMID = ' + CAST(@FORMID AS VARCHAR) + ' AND DD.[QUARTER] = ' 
										-- + CAST(@QUARTER AS VARCHAR) + ' AND ISNULL(DD.ERETURNID,0) = 0'
			END
		IF(@SECTIONID <> -1)
			BEGIN
				SET @QUERY=@QUERY + ' AND DD.SECTIONID='+CAST(@SECTIONID AS VARCHAR)
			END
		IF(@NAME <> '')
			BEGIN
				SET @QUERY=@QUERY + ' AND D.NAME LIKE ''' + @NAME + '%'''
			END
		SET @QUERY = @QUERY + ') TEMP ORDER BY DEDSERIALNO;SELECT * FROM #EXCLUDEDDEDUCTIONS WHERE ID > ' + CAST(@FIRSTREC AS VARCHAR) + ' AND ID < ' + CAST(@LASTREC AS VARCHAR);
		EXEC SP_EXECUTESQL @QUERY;
		---PRINT @QUERY
		IF OBJECT_ID('TEMPDB..#CHALLANDETAIL') IS NOT NULL
			DROP TABLE #CHALLANDETAIL
		IF OBJECT_ID('TEMPDB..#DEDCHALINK') IS NOT NULL
			DROP TABLE #DEDCHALINK
		IF OBJECT_ID('TEMPDB..#DEDUCTEE') IS NOT NULL
			DROP TABLE #DEDUCTEE
		IF OBJECT_ID('TEMPDB..#DEDUCTIONDETAIL') IS NOT NULL
			DROP TABLE #DEDUCTIONDETAIL
		IF OBJECT_ID('TEMPDB..#EXCLUDEDDEDUCTIONS') IS NOT NULL
			DROP TABLE #EXCLUDEDDEDUCTIONS
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_SPLITINCOLUMNS')
DROP PROCEDURE USP_TDS_SPLITINCOLUMNS
GO
CREATE PROCEDURE [USP_TDS_SPLITINCOLUMNS]
@DATA VARCHAR(MAX)
AS
 BEGIN
   IF EXISTS(SELECT * FROM SYS.TABLES WHERE NAME = 'STRING_SPLIT')
    BEGIN
		DROP TABLE STRING_SPLIT;
		CREATE TABLE STRING_SPLIT (SLNO INTEGER PRIMARY KEY IDENTITY ,STRCOLUMN NVARCHAR(MAX));
     END
   DECLARE @J AS INTEGER, @L AS INTEGER, @K AS VARCHAR(MAX), @PVT AS VARCHAR(MAX), @SQL AS VARCHAR(MAX);
 SET @L = LEN(@DATA);
 WHILE ( @L > 0)
  BEGIN
   SET @J = CHARINDEX('^', @DATA)
   IF @J <> 0
    IF @J = 1
     BEGIN
      SET @DATA = RIGHT(@DATA, ( LEN(@DATA) - @J))
     END
    ELSE
    BEGIN
     SET @K = SUBSTRING(@DATA, 1, ( @J - 1 ))
     SET @DATA = RIGHT(@DATA, ( LEN(@DATA) - LEN(@K) - 1 ))
     SET @L = LEN(@DATA)
     INSERT INTO STRING_SPLIT VALUES( @K)
    END
   ELSE
    BEGIN
     INSERT INTO STRING_SPLIT VALUES(@DATA)
     SET @L = 0
    END
  END
  SELECT @PVT=COALESCE(@PVT,'')+'['+CAST(SLNO AS VARCHAR)+']'+',' FROM STRING_SPLIT
  SET @PVT = LEFT(@PVT,LEN(@PVT)-1)
 SELECT @SQL='SELECT * FROM STRING_SPLIT PIVOT (MIN(STRCOLUMN) FOR SLNO IN ('+@PVT+' )) AS P'
 EXEC (@SQL)
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_TANINFORMATION')
DROP PROCEDURE USP_TDS_TANINFORMATION
GO
CREATE PROCEDURE USP_TDS_TANINFORMATION    
 @QUARTER INT    
AS    
BEGIN    
 SELECT CB.BRANCHCODE, CB.BRANCHNAME, D.TAN,CBB.BRANCHCODE PARENTBRANCHCODE,CBB.BRANCHNAME PARENTBRANCHNAME     
 FROM COMPANYBRANCH CB WITH(NOLOCK)  
 INNER JOIN COMPANYBRANCH CBB WITH(NOLOCK) ON CBB.BRANCHID = CB.PARENTBRANCHID     
 INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID    
 INNER JOIN DEDUCTOR D WITH(NOLOCK) ON D.DEDUCTORID = BD.DEDUCTORID    
 WHERE BD.QUARTER = @QUARTER    
 ORDER BY PARENTBRANCHCODE    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_TaxComputation')
DROP PROCEDURE USP_TDS_TaxComputation
GO
CREATE PROCEDURE USP_TDS_TaxComputation
	@comID INT,
	@finYear INT
AS
BEGIN
	DECLARE @deducteeID INT;
	DECLARE @branchID INT;
	DECLARE @basicSalary NUMERIC(13,2);
	DECLARE @taxableAllowance NUMERIC(13,2) = 0;
	DECLARE @grossSalary NUMERIC(13,2);
	DECLARE @maxMonthID INT;
	SELECT BRANCHID,CASE WHEN MONTHID IN(1,2,3) THEN (MONTHID + 12) ELSE MONTHID END MONTHID,
	COMID,SCALE,HRAINDI
	INTO #EMPWORKMONTH
	FROM EMPWORKMONTH WHERE COMID = @comID
	SELECT * 
	INTO #LINKTOTC 
	FROM LINKTOTC WITH(NOLOCK)
	WHERE COMID = @comID
	SELECT E.* 
	INTO #EMPLOYEE
	FROM EMPLOYEE E WITH(NOLOCK)
	INNER JOIN #LINKTOTC LC
	ON LC.EMPLOYEEID = E.EMPLOYEEID
	SELECT D.* 
	INTO #DEDUCTEE
	FROM DEDUCTEE D WITH(NOLOCK)
	INNER JOIN #EMPLOYEE E
	ON E.DEDUCTEEID = D.DEDUCTEEID
	SET @maxMonthID = (SELECT MAX(MONTHID) FROM #EMPWORKMONTH)
	SET @branchID = (SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID = @maxMonthID)
	/* Deducteeid for last working branch */
	SELECT @deducteeID = DEDUCTEEID FROM EMPLOYEE WITH(NOLOCK) WHERE EMPLOYEEID =
	(
		SELECT EMPLOYEEID FROM LINKTOTC WITH(NOLOCK) WHERE COMID = @comID AND BRANCHID = @branchID
	)
	/*salary detail*/
	SELECT * 
	INTO #SALDETAIL
	FROM SALDETAIL WITH(NOLOCK) WHERE COMID = @comID
	/*chapter VIA data*/
	/*Chapter VIA data mannual entry*/
	SELECT CDET.GROSS,CDET.QUALIFYING,CDET.C80CID,CDET.ISORIGINAL 
	INTO #MANNUALENTRY
	FROM CVIA80CDET CDET
	INNER JOIN CHAPTERVIADET CVI
	ON CVI.CHAPTERVIADETAILID = CDET.CHAPTERVIADETID
	WHERE CVI.COMID = @comID AND ISNULL(GROSS,0) > 0
	/* Configured 80C data */
	SELECT SUM(SD.NETAMT) GROSS,SUM(SD.NETAMT) QUALIFYING 
	INTO #C80CCONFIGUREDDATA
	FROM #SALDETAIL SD 
	INNER JOIN SALARYHEAD SH WITH(NOLOCK)
	ON SH.SALARYHEADID = SD.SALARYHEADID
	WHERE SH.INCLUDEINTAX = 1 AND ISNULL(SH.C80CID,-1) > 0
	/*Chapter VIA detail all including mannual entry summary(except payfile data) */
	SELECT CHAPTERVIADETAILID,COMID,SALARYSECTIONID,
	CEILING(GROSSAMOUNT)GROSSAMOUNT,CEILING(QUALIFYINGAMOUNT)QUALIFYINGAMOUNT,
	CEILING(DEDUCTIBLEAMOUNT)DEDUCTIBLEAMOUNT,
	CONDI,ISSELF 
	INTO #CHAPTERVIADET
	FROM CHAPTERVIADET WITH(NOLOCK) 
	WHERE COMID = @comID
	/* Get final table to be updated in CHAPTERVIADETAIL */
	UPDATE #CHAPTERVIADET 
	SET QUALIFYINGAMOUNT = ISNULL((SELECT SUM(QUALIFYING) FROM #MANNUALENTRY),0) +
						   ISNULL((SELECT SUM(QUALIFYING) FROM #C80CCONFIGUREDDATA),0),
		DEDUCTIBLEAMOUNT = ISNULL((SELECT SUM(QUALIFYING) FROM #MANNUALENTRY),0) +
						   ISNULL((SELECT SUM(QUALIFYING) FROM #C80CCONFIGUREDDATA),0),
		GROSSAMOUNT = ISNULL((SELECT SUM(GROSS) FROM #MANNUALENTRY),0) +
					  ISNULL((SELECT SUM(GROSS) FROM #C80CCONFIGUREDDATA),0)
	WHERE SALARYSECTIONID = 3
	/* Other income */
	SELECT ISNULL(PREVEMP,0) PREVEMP,
	ISNULL(HOUSEPROL,0) HOUSEPROL,ISNULL(HOUSEPROS,0) HOUSEPROS,
	ISNULL(INTERESTONSB,0) INTERESTONSB,ISNULL(LGAIN,0) LGAIN,ISNULL(SGAIN,0) SGAIN,
	ISNULL(BUSSINESSPROF,0) BUSSINESSPROF
	INTO #OTHER1
	FROM OTHERINCOME WHERE COMID = @comID
	SELECT ISNULL(OS.AMOUNT,0) - ISNULL(OS.EXEMPTAMT,0) INCOMEFROMOTHERSOURCES,
	ISNULL(OI.HOUSEPROL,0) + ISNULL(OI.HOUSEPROS,0) AS INCOMEFROMHOUSEPROPERTY,   
	ISNULL(OI.LGAIN,0) + ISNULL(OI.SGAIN,0) AS CAPITALGAINS,
	OI.BUSSINESSPROF,OI.INTERESTONSB
	INTO #OTHERINCOME
	FROM OTHERINCOMESOURCES OS
	INNER JOIN OTHERINCOME OI
	ON OI.OTHERINCOMEID = OS.OTHERINCOMEID
	WHERE OI.COMID = @comID
	IF(((SELECT COUNT(*) FROM #OTHERINCOME) = 0) AND (SELECT COUNT(*) FROM #OTHER1) > 0)
	BEGIN
		INSERT INTO #OTHERINCOME(INCOMEFROMOTHERSOURCES,INCOMEFROMHOUSEPROPERTY,INTERESTONSB,CAPITALGAINS,BUSSINESSPROF)
		VALUES(0,
		(SELECT ISNULL(HOUSEPROL,0) + ISNULL(HOUSEPROS,0) FROM #OTHER1),
		(SELECT INTERESTONSB FROM #OTHER1),
		(SELECT LGAIN+SGAIN FROM #OTHER1),
		(SELECT BUSSINESSPROF FROM #OTHER1))
	END
	UPDATE SALARYDETAIL
	SET INCOMEFROMHOUSEPROPERTY = CEILING(ISNULL((SELECT SUM(INCOMEFROMHOUSEPROPERTY) FROM #OTHERINCOME),0)),
	CAPITALGAINS = CEILING(ISNULL((SELECT SUM(CAPITALGAINS) FROM #OTHERINCOME),0)),
	INCOMEFROMOTHERSOURCES=CEILING(ISNULL((SELECT SUM(INCOMEFROMOTHERSOURCES) FROM #OTHERINCOME),0)),
	OTHERINCOME = CEILING(
							ISNULL((SELECT SUM(INCOMEFROMHOUSEPROPERTY) FROM #OTHERINCOME),0) + 
							ISNULL((SELECT SUM(CAPITALGAINS) FROM #OTHERINCOME),0) + 
							ISNULL((SELECT SUM(INCOMEFROMOTHERSOURCES) FROM #OTHERINCOME),0) +
							ISNULL((SELECT SUM(INTERESTONSB) FROM #OTHERINCOME),0)
						 )
	WHERE DEDUCTEEID = @deducteeID AND BRANCHID = @branchID
	/*Section 16 data*/
	SELECT 
	ISNULL((SUM(ISNULL((ISNULL(S16.GROSSAMT1,0) + ISNULL(S16.GROSSAMT2,0) - ISNULL(RECOVERYAMT,0)),0))),0)DEDUCTIONUS16 
	INTO #SECTION16DET
	FROM SECTION16DET S16 WHERE COMID = @comID
	/*Storing summarised value and storing in SALARYDETAIL and SECTION16DETAIL table */
	UPDATE SALARYDETAIL
	SET DEDUCTIONUS16 = (SELECT DEDUCTIONUS16 FROM #SECTION16DET)
	WHERE DEDUCTEEID = @deducteeID AND BRANCHID = @branchID
	UPDATE SECTION16DETAIL
	SET AMOUNT = (SELECT DEDUCTIONUS16 FROM #SECTION16DET)
	FROM SECTION16DETAIL S16 WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID = S16.SALARYDETAILID
	WHERE SD.DEDUCTEEID = @deducteeID AND SD.BRANCHID = @branchID --AND S16.SALARYSECTIONID = 2
	/*Taxable perquisite data*/
	SELECT T.MONTHID,T.PERKID,
	CASE WHEN T.PERKID = 21 THEN T.TAXABLEAMT END AS PROFITLIEU,
	CASE WHEN T.PERKID <> 21 THEN T.TAXABLEAMT END AS TAXABLEPERQUISITE,
	CASE WHEN T.PERKID = 16 THEN T.TAXABLEAMT END AS OTHERBENEFITS 
	INTO #TAXABLEPERQUISITE
	FROM TAXABLEPERQUISITE T WHERE COMID = @comID
	SET @basicSalary = CEILING((SELECT (SELECT SUM(NETAMT) FROM #SALDETAIL SD 
	INNER JOIN SALARYHEAD SH
	ON SD.SALARYHEADID = SH.SALARYHEADID
	WHERE SH.INCLUDEUS10 = 0 AND SH.EARNING = 1 AND SH.INCLUDEINTAX = 1 
	AND ISNULL(SH.C80CID,-1) <= 0) - (SELECT ISNULL((SELECT SUM(ISNULL(NETAMT,0)) 
	FROM #SALDETAIL SD
	INNER JOIN SALARYHEAD SH
	ON SD.SALARYHEADID = SH.SALARYHEADID
	WHERE SH.INCLUDEUS10 = 0 AND SH.EARNING = 0 AND SH.INCLUDEINTAX = 1 
	AND ISNULL(SH.C80CID,-1) <= 0),0))))
	SET @taxableAllowance = CEILING(ISNULL((SELECT SUM(ISNULL(NETAMT,0)) FROM #SALDETAIL SD INNER JOIN SALARYHEAD SH ON SH.SALARYHEADID = SD.SALARYHEADID WHERE INCLUDEUS10 = 1),0))
	UPDATE SALARYDETAIL
	SET OTHERBENEFITS = ISNULL((SELECT SUM(ISNULL(OTHERBENEFITS,0)) FROM #TAXABLEPERQUISITE),0),
	VALUEOFPERQUISITES = ISNULL((SELECT SUM(ISNULL(TAXABLEPERQUISITE,0)) FROM #TAXABLEPERQUISITE),0),
	TAXABLEPERQUISITES = ISNULL((SELECT SUM(ISNULL(TAXABLEPERQUISITE,0)) FROM #TAXABLEPERQUISITE),0),
	PROFITLIEU = ISNULL((SELECT SUM(ISNULL(PROFITLIEU,0)) FROM #TAXABLEPERQUISITE),0),
	BASICSALARY = @basicSalary,
	GROSSSALARY = @basicSalary + @taxableAllowance + ISNULL((SELECT SUM(ISNULL(TAXABLEPERQUISITE,0)) FROM #TAXABLEPERQUISITE),0),
	INCOMEFROMSALARIES = @basicSalary + @taxableAllowance + ISNULL((SELECT SUM(ISNULL(TAXABLEPERQUISITE,0)) FROM #TAXABLEPERQUISITE),0) - ISNULL(DEDUCTIONUS16,0)
		WHERE DEDUCTEEID = @deducteeID AND BRANCHID = @branchID
	/*Update Chapter VIA Details according to max-limit*/
	DECLARE @c80cValue NUMERIC(13,2);
	DECLARE @totalVIA NUMERIC(13,2);
	DECLARE @totalOf3Sections NUMERIC(13,2);
	SELECT CVIA.SALARYSECTIONID,CVIA.DEDUCTIBLEAMOUNT 
	INTO #CHAPTERVIADATA
	FROM SALARYDETAIL SD
	INNER JOIN CHAPTERVIADETAIL CVIA
	ON CVIA.SALARYDETAILID = SD.SALARYDETAILID
	WHERE SD.DEDUCTEEID = @deducteeID AND SD.BRANCHID = @branchID
	AND CVIA.SALARYSECTIONID IN(3,4,20)
	SET @totalVIA = ISNULL((SELECT SUM(CVIA.DEDUCTIBLEAMOUNT) FROM #CHAPTERVIADET CVIA),0)
	/*Chapter VIA Data only from Pay File*/
	IF((SELECT COUNT(*) FROM #CHAPTERVIADET)=0)
	BEGIN
		SET	@totalVIA = ISNULL((SELECT SUM(QUALIFYING) FROM #C80CCONFIGUREDDATA),0)
	END
	ELSE
	SET @c80cValue = (SELECT SUM(DEDUCTIBLEAMOUNT) FROM #CHAPTERVIADATA WHERE SALARYSECTIONID = 3)
	SET @totalOf3Sections = (SELECT SUM(DEDUCTIBLEAMOUNT) FROM #CHAPTERVIADATA)
	IF(@finYear > 2013)
		BEGIN
		IF(@totalOf3Sections > 150000)
			BEGIN
			 IF(@c80cValue > 150000)
				SET @totalVIA = @totalVIA - @c80cValue
				SET @c80cValue = 150000
				SET @totalVIA = @totalVIA + @c80cValue
			END			
		END
	ELSE
		BEGIN
		IF(@totalOf3Sections > 100000)
			BEGIN
			 IF(@c80cValue > 100000)
				SET @totalVIA = @totalVIA - @c80cValue
				SET @c80cValue = 100000
				SET @totalVIA = @totalVIA + @c80cValue
			END
		END
	UPDATE CHAPTERVIADETAIL
	SET GROSSAMOUNT = CVIA.GROSSAMOUNT,
	DEDUCTIBLEAMOUNT = CVIA.DEDUCTIBLEAMOUNT,
	QUALIFYINGAMOUNT = CVIA.QUALIFYINGAMOUNT
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN CHAPTERVIADETAIL CVIADET WITH(NOLOCK)
	ON CVIADET.SALARYDETAILID = SD.SALARYDETAILID
	INNER JOIN #CHAPTERVIADET CVIA
	ON CVIA.CHAPTERVIADETAILID = CVIADET.CHAPTERVIADETAILID 
	AND CVIA.SALARYSECTIONID = CVIADET.SALARYDETAILID
	WHERE SD.DEDUCTEEID = @deducteeID
	UPDATE SALARYDETAIL 
	SET TOTALDEDUNDERCHAPTERVIA = @totalVIA,
	TOTALTAXABLEINCOME = GROSSTOTALINCOME - @totalVIA,
	GROSSTOTALINCOME = INCOMEFROMSALARIES + ISNULL(OTHERINCOME,0)
	WHERE DEDUCTEEID = @deducteeID AND BRANCHID = @branchID
	UPDATE SALARYDETAIL
	SET TOTALTAXABLEINCOME = 0
	WHERE DEDUCTEEID = @deducteeID AND TOTALTAXABLEINCOME < 0
	/* Keep last branch data only in e-return table. */
	IF((SELECT COUNT(*) FROM #DEDUCTEE) > 1)
	BEGIN
		DELETE FROM #DEDUCTEE WHERE DEDUCTEEID = @deducteeID
		SELECT SD.* 
		INTO #SALARYDETAIL
		FROM SALARYDETAIL SD WITH(NOLOCK)
		INNER JOIN #DEDUCTEE D
		ON D.DEDUCTEEID = SD.DEDUCTEEID
		DELETE FROM SECTION16DETAIL
		FROM SECTION16DETAIL S16 WITH(NOLOCK)
		INNER JOIN #SALARYDETAIL SD
		ON SD.SALARYDETAILID = S16.SALARYDETAILID
		DELETE FROM CHAPTERVIADETAIL
		FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
		INNER JOIN #SALARYDETAIL SD
		ON SD.SALARYDETAILID = CVIA.SALARYDETAILID
		DELETE FROM SALARYDETAIL 
		FROM SALARYDETAIL SD WITH(NOLOCK)
		INNER JOIN #DEDUCTEE D
		ON D.DEDUCTEEID = SD.DEDUCTEEID
	END
	UPDATE SALARYDETAIL
	SET BASICSALARY = CEILING(BASICSALARY),
	GROSSSALARY = CEILING(GROSSSALARY),
	INCOMEFROMSALARIES = CEILING(INCOMEFROMSALARIES),
	TOTALDEDUNDERCHAPTERVIA = CEILING(TOTALDEDUNDERCHAPTERVIA),
	TOTALTAXABLEINCOME = CEILING(TOTALTAXABLEINCOME)
	WHERE DEDUCTEEID = @deducteeID
	UPDATE CHAPTERVIADETAIL
	SET QUALIFYINGAMOUNT = CEILING(QUALIFYINGAMOUNT),
	DEDUCTIBLEAMOUNT = CEILING(DEDUCTIBLEAMOUNT),
	GROSSAMOUNT = CEILING(GROSSAMOUNT)
	WHERE SALARYDETAILID = (SELECT SALARYDETAILID FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @deducteeID)
	DROP TABLE #C80CCONFIGUREDDATA
	DROP TABLE #CHAPTERVIADATA
	DROP TABLE #CHAPTERVIADET
	DROP TABLE #EMPWORKMONTH
	DROP TABLE #MANNUALENTRY
	DROP TABLE #OTHER1
	DROP TABLE #OTHERINCOME
	DROP TABLE #SALDETAIL
	DROP TABLE #SECTION16DET
	DROP TABLE #TAXABLEPERQUISITE
	DROP TABLE #DEDUCTEE
	DROP TABLE #EMPLOYEE
	DROP TABLE #LINKTOTC
	DROP TABLE #SALARYDETAIL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_TDSREGISTER')
DROP PROCEDURE USP_TDS_TDSREGISTER
GO
CREATE PROCEDURE [dbo].[USP_TDS_TDSREGISTER] 
AS
	BEGIN
		SELECT DD.BRANCHID,DD.FORMID,DD.QUARTER,DD.TAXRATE,DD.TOTALDEDUCTED,
			   DD.SECTIONID,DD.PAYMENTDATE,DD.DEDUCTEDDATE,D.NAME,D.DEDUCTEEID,
			   D.PAN,TS.SECTIONNAME,CD.BANKCHALLANNO,CD.CHALLANPAIDDATE,CD.CHALLANTOTAL,
			   FM.PRINTCERTIFICATENO,FM.CERTIFICATEDATE,
			   CASE WHEN FM.ISCERTIFICATEGIVEN=1 THEN 'YES' ELSE 'NO' END AS ISCERTIFICATEGIVEN,
			   ISNULL(D.REFERENCENO,'') REFERENCENO
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND DD.QUARTER=BD.QUARTER     
			INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID  
			INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID  
			INNER JOIN FORMDETAILS FD WITH(NOLOCK) ON FD.FORMID=DD.FORMID     
			LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON DL.DEDUCTIONID=DD.DEDUCTIONID  
			LEFT JOIN CHALLANDETAIL CD WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID   
			LEFT JOIN FORM16A FM WITH(NOLOCK) ON FM.DEDUCTIONID = DD.DEDUCTIONID    
		WHERE  DD.FORMID IN (2,3,4) AND (DL.DEDCHALINKID IS NOT NULL)
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_TEST')
DROP PROCEDURE USP_TDS_TEST
GO
CREATE PROCEDURE USP_TDS_TEST
	@NAME VARCHAR(255)
AS
	BEGIN
		SELECT * FROM COMPANYBRANCH WHERE BRANCHNAME LIKE '%' + @NAME + '%'
	END	

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_TRACESDATAAUDIT')
DROP PROCEDURE USP_TDS_TRACESDATAAUDIT
GO
CREATE PROCEDURE USP_TDS_TRACESDATAAUDIT
@USERID INT,
@BRANCHID INT
AS
	BEGIN
		INSERT INTO TRACESDATAAUDIT(USERID,BRANCHID,LOGINDATETIME) VALUES(@USERID,@BRANCHID,GETDATE())
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_TRANSFERBRANCH')
DROP PROCEDURE USP_TDS_TRANSFERBRANCH
GO
CREATE PROCEDURE USP_TDS_TRANSFERBRANCH
@SRCZOBRANCHID INT,
@DESTZOBRANCHID INT,
@BRANCHID INT
AS
BEGIN
	DECLARE @SERIALNO INT;
	DECLARE @BASEID INT;
	DECLARE @PARENTBASEID VARCHAR(50);
	DECLARE @PANREF INT;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
		BEGIN TRANSACTION  
	     BEGIN TRY  
			SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(MAX(D.PANREFERENCE), 6, 5))              
			  WHEN 1 THEN CAST((SUBSTRING(MAX(D.PANREFERENCE), 6, 5)) + 1 AS VARCHAR)              
			  WHEN 0 THEN '00001' END FROM DEDUCTEE D WITH(NOLOCK)              
			  INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID              
			  WHERE BRANCHID = @DESTZOBRANCHID
			--SET @PANREF =  REPLICATE('0', 5 - LEN(@PANREF)) + @PANREF
			SELECT @BASEID = ISNULL(BASEID,1) FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID;      
			SET  @PARENTBASEID = dbo.UDF_TDS_GetFormatedParentBaseID(@BASEID); 
			SELECT  @PARENTBASEID = PARENTBASEID + @PARENTBASEID FROM COMPANYBRANCH WHERE BRANCHID = @DESTZOBRANCHID; 
			UPDATE COMPANYBRANCH SET PARENTBRANCHID = @DESTZOBRANCHID , PARENTBASEID = @PARENTBASEID WHERE BRANCHID = @BRANCHID AND PARENTBRANCHID = @SRCZOBRANCHID
			UPDATE DEDUCTEE SET REFDEDUCTEEID =  DD.DEDUCTEEID 
			FROM DEDUCTEE D 
			INNER JOIN  
			(SELECT DEDUCTEEID,NAME,PAN FROM DEDUCTEE WHERE BRANCHID = @SRCZOBRANCHID 
				AND EXISTS 
					(
						SELECT NAME,PAN FROM DEDUCTEE D WHERE D.NAME = NAME AND D.PAN = PAN AND D.BRANCHID = @DESTZOBRANCHID
					)
			)DD ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.NAME = DD.NAME AND D.PAN = DD.PAN WHERE BRANCHID = @DESTZOBRANCHID
			--UPDATE DEDUCTEE SET REFDEDUCTEEID = DEDUCTEEID 
			--WHERE BRANCHID = @DESTZOBRANCHID AND EXISTS 
			--(
			--	SELECT NAME,PAN FROM DEDUCTEE D WHERE D.NAME = NAME AND D.PAN = PAN AND D.BRANCHID = @SRCZOBRANCHID
			--)
			SELECT DEDUCTEEID INTO #TEMP 
			FROM DEDUCTEE D WHERE BRANCHID = @SRCZOBRANCHID AND NOT EXISTS 
			(
				SELECT NAME,PAN FROM DEDUCTEE WHERE NAME = D.NAME AND PAN = D.PAN AND BRANCHID = @DESTZOBRANCHID
			)
			INSERT INTO DEDUCTEE 
			SELECT @DESTZOBRANCHID AS BRANCHID,SALUTATION,NAME,PAN,CASE WHEN PAN IN ('PANNOTAVBL','PANAPPLIED','PANINVALID') THEN ('NOPAN' + REPLICATE('0', 5 - LEN(@PANREF + ROW_NUMBER() OVER (PARTITION BY SUBSTRING((D.PANREFERENCE), 1, 5) ORDER BY PANREFERENCE))) + CAST((@PANREF + ROW_NUMBER() OVER (PARTITION BY SUBSTRING((D.PANREFERENCE), 1, 5) ORDER BY PANREFERENCE)) AS VARCHAR)) ELSE '' END AS PANREFERENCE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,STATEID,PINCODE,REFERENCENO,PHONENO,EMAILADDRESS,ISEXCLUDED,PANSTATUS,ENTRYBRANCHID,ENTRYDATE,CODE,EMPTYPE,DEDUCTEEID 
			FROM DEDUCTEE D WHERE BRANCHID = @SRCZOBRANCHID AND NOT EXISTS 
			(
				SELECT NAME,PAN FROM DEDUCTEE WHERE NAME = D.NAME AND PAN = D.PAN AND BRANCHID = @DESTZOBRANCHID
			)
			SELECT @SERIALNO = ISNULL(MAX(SERIALNO),0) FROM DEDUCTEE D
			INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID WHERE BRANCHID = @DESTZOBRANCHID
			INSERT INTO NONEMPLOYEE 
			SELECT (@SERIALNO + (ROW_NUMBER() OVER(ORDER BY D.DEDUCTEEID))) SERIALNO,D.DEDUCTEEID,DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,ISTRANSPORTER,
			ACCOUNTNUMBER,IFSCCODE,STATUS,CONTAXRATE,CONLIMIT,MAKETDSFROMFIRSTPAYMENT,BANKNAME,BRANCHNAME,ISAPPLICABLE27E,STREGNO,CUSTTYPE,CONTACTPERSONNAME,
			PERSONDESIGNATION,MOBILENO,FAX, GSTIN
			FROM DEDUCTEE D 
			INNER JOIN NONEMPLOYEE NE ON D.REFDEDUCTEEID = NE.DEDUCTEEID
			INNER JOIN #TEMP T ON T.DEDUCTEEID = D.REFDEDUCTEEID
			WHERE BRANCHID = @DESTZOBRANCHID 
			UPDATE REPORTPAYMENT SET DEDUCTEEID = D.DEDUCTEEID,PARENTBRANCHID = @DESTZOBRANCHID
			FROM REPORTPAYMENT RP 
			INNER JOIN DEDUCTEE D ON RP.DEDUCTEEID = D.REFDEDUCTEEID 
			INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID
			WHERE RP.PARENTBRANCHID = @SRCZOBRANCHID AND RP.BRANCHID = @BRANCHID AND D.BRANCHID = @DESTZOBRANCHID AND
			NOT EXISTS 
			(
				SELECT REPORTPAYMENTID FROM DEDUCTIONDETAIL WHERE RP.ID = REPORTPAYMENTID
			)
			UPDATE DEDUCTEE SET REFDEDUCTEEID = NULL WHERE BRANCHID = @DESTZOBRANCHID AND ISNULL(EMPTYPE,0) NOT IN (0,1)
	   COMMIT 
	 END TRY	
	 BEGIN CATCH
			ROLLBACK
	END CATCH
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_TRANSFERDATA')
DROP PROCEDURE USP_TDS_TRANSFERDATA
GO
CREATE PROCEDURE [USP_TDS_TRANSFERDATA]
@DATABASE VARCHAR(MAX),
@BRANCHID INT,
@ISEMPLOYEE BIT,
@ISNONEMPLOYEE BIT
AS
 BEGIN
  DECLARE @BRANCHCODE VARCHAR(100), @COUNT INT, @DEDUCTORID INT, @ROWCOUNT INT , @SQLQUERY NVARCHAR(MAX);DECLARE @SQLQUERY1 NVARCHAR(MAX);DECLARE @SQLQUERY2 NVARCHAR(MAX);
 DECLARE @DEDUCTOR TABLE(DEDUCTORNAME VARCHAR(75), ADDRESS1 VARCHAR(25), ADDRESS2 VARCHAR(25), ADDRESS3 VARCHAR(25),  ADDRESS4 VARCHAR(25),
               ADDRESS5 VARCHAR(25), STATEID INT, ISADDRCHANGED BIT , FINANCIALYEAR INT, TAN VARCHAR(10), PAN VARCHAR(10), PINCODE VARCHAR(6),
               EMAILADDRESS VARCHAR(75), STDCODE VARCHAR(5), PHONENO VARCHAR(10), ISRESIDENT BIT, ISTDSEXISTING BIT, FAXNO VARCHAR(10),
               RETURNTYPE TINYINT, ISAOAPPROVED BIT, AOAPPROVALNUM VARCHAR(25), AODESIGNATION VARCHAR(30), STATUSID INT, DEDUCTORTYPEID INT,
               GOVTADDSTATEID INT, GOVTADDPAOCODE VARCHAR(20), GOVTADDPAOREGNNO VARCHAR(20), GOVTADDDDOCODE VARCHAR(20),
               GOVTADDDDOREGNNO VARCHAR(20), GOVTADDMINISTRY INT , GOVTADDOTHERNAME VARCHAR(20),TANREGISTRATION VARCHAR(20)) ;
  DECLARE @NONEMPLOYEE TABLE(SERIALNO INT, DEDUCTEECODE INT, ISAPPLICABLE26 BIT, ISAPPLICABLE27 BIT,ISTRANSPORTER BIT, NAME VARCHAR(75), PAN VARCHAR(10), PANREF VARCHAR(10));
  DECLARE @EMPLOYEE TABLE(SERIALNO INT, DESIGNATION VARCHAR(20), EMPLOYMENTFROM SMALLDATETIME, EMPLOYMENTTO SMALLDATETIME, GENDER VARCHAR(1), ISSENIORCITIZEN SMALLINT,NAME VARCHAR(75), PAN VARCHAR(10), PANREF VARCHAR(10));
  SELECT @BRANCHCODE = BRANCHCODE FROM COMPANYBRANCH WHERE BRANCHID = @BRANCHID;
  SET @COUNT = 1;
   SET @SQLQUERY ='SELECT DEDUCTORNAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, ISADDRCHANGED, FINANCIALYEAR,
          TAN, PAN, PINCODE, EMAILADDRESS,
                      STDCODE, PHONENO, ISRESIDENT, ISTDSEXISTING, FAXNO, RETURNTYPE, ISAOAPPROVED, AOAPPROVALNUM, AODESIGNATION, STATUSID, DEDUCTORTYPEID,
                      GOVTADDSTATEID, GOVTADDPAOCODE, GOVTADDPAOREGNNO, GOVTADDDDOCODE, GOVTADDDDOREGNNO, GOVTADDMINISTRY, GOVTADDOTHERNAME,
                      TANREGISTRATION FROM
       (
        SELECT BD.QUARTER, DEDUCTORNAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, ISADDRCHANGED, (FINANCIALYEAR + 1) AS FINANCIALYEAR , TAN, PAN, PINCODE, EMAILADDRESS,
        STDCODE, PHONENO, ISRESIDENT, ISTDSEXISTING, FAXNO, RETURNTYPE, ISAOAPPROVED, AOAPPROVALNUM, AODESIGNATION, STATUSID, DEDUCTORTYPEID,
        GOVTADDSTATEID, GOVTADDPAOCODE, GOVTADDPAOREGNNO, GOVTADDDDOCODE, GOVTADDDDOREGNNO, GOVTADDMINISTRY, GOVTADDOTHERNAME,
        TANREGISTRATION
      FROM '+@DATABASE +'.DBO.DEDUCTOR D
        INNER JOIN '+@DATABASE+'.DBO.BRANCHDEDUCTORS BD ON BD.DEDUCTORID = D.DEDUCTORID
        INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH CB ON CB.BRANCHID = BD.BRANCHID
        WHERE CB.BRANCHCODE = '''+@BRANCHCODE+'''
       ) DD
       INNER JOIN
       (
        SELECT MAX(QUARTER) QUARTER FROM '+@DATABASE+'.DBO.DEDUCTOR D
        INNER JOIN '+@DATABASE+'.DBO.BRANCHDEDUCTORS BD ON BD.DEDUCTORID = D.DEDUCTORID
        INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH CB ON CB.BRANCHID = BD.BRANCHID
        WHERE CB.BRANCHCODE = '''+@BRANCHCODE+'''
        GROUP BY BD.BRANCHID
       )AA
       ON DD.QUARTER = AA.QUARTER'
   INSERT INTO @DEDUCTOR
EXEC SP_EXECUTESQL @SQLQUERY;
   SELECT @ROWCOUNT = COUNT(*) FROM @DEDUCTOR;
 WHILE(@COUNT <=  4 AND @ROWCOUNT > 0)
      BEGIN
      IF NOT EXISTS(SELECT DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND QUARTER = @COUNT)
  BEGIN
    INSERT INTO DEDUCTOR (DEDUCTORNAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, ISADDRCHANGED, FINANCIALYEAR, TAN, PAN, PINCODE, EMAILADDRESS,
     STDCODE, PHONENO, ISRESIDENT, ISTDSEXISTING, FAXNO, RETURNTYPE, ISAOAPPROVED, AOAPPROVALNUM, AODESIGNATION, STATUSID, DEDUCTORTYPEID,
        GOVTADDSTATEID, GOVTADDPAOCODE, GOVTADDPAOREGNNO, GOVTADDDDOCODE, GOVTADDDDOREGNNO, GOVTADDMINISTRY, GOVTADDOTHERNAME,
        TANREGISTRATION)
       SELECT DEDUCTORNAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID, ISADDRCHANGED, FINANCIALYEAR, TAN, PAN, PINCODE, EMAILADDRESS,
        STDCODE, PHONENO, ISRESIDENT, ISTDSEXISTING, FAXNO, RETURNTYPE, ISAOAPPROVED, AOAPPROVALNUM, AODESIGNATION, STATUSID, DEDUCTORTYPEID,
        GOVTADDSTATEID, GOVTADDPAOCODE, GOVTADDPAOREGNNO, GOVTADDDDOCODE, GOVTADDDDOREGNNO, GOVTADDMINISTRY, GOVTADDOTHERNAME,
        TANREGISTRATION FROM @DEDUCTOR
      SET @DEDUCTORID =  IDENT_CURRENT('DEDUCTOR');
     INSERT INTO BRANCHDEDUCTORS (BRANCHID, QUARTER, DEDUCTORID)
        SELECT @BRANCHID AS BRANCHID, @COUNT , @DEDUCTORID
    SET @SQLQUERY ='SELECT '+CAST(@DEDUCTORID AS VARCHAR)+' , PERSONNAME, RP.ADDRESS1, RP.ADDRESS2, RP.ADDRESS3, RP.ADDRESS4, RP.ADDRESS5, RP.PINCODE, RP.STATEID,
            RP.ISADDRCHANGED,RP.DESIGNATION, RP.EMAILADDRESS, RP.STDCODE, RP.PHONENO, RP.MOBILENO, RP.FAXNO, RP.GENDER,
              RP.FATHERNAME  FROM  '+@DATABASE+'.DBO.RESPONSIBLEPERSON RP
             INNER JOIN  '+@DATABASE+'.DBO.DEDUCTOR D ON RP.DEDUCTORID = D.DEDUCTORID
             INNER JOIN '+@DATABASE+'.DBO.BRANCHDEDUCTORS BD ON BD.DEDUCTORID = D.DEDUCTORID
             INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH CB ON CB.BRANCHID = BD.BRANCHID
             INNER JOIN
            (
              SELECT D.DEDUCTORID FROM  '+@DATABASE+'.DBO.DEDUCTOR D
            INNER JOIN  '+@DATABASE+'.DBO.BRANCHDEDUCTORS BD ON BD.DEDUCTORID = D.DEDUCTORID
            INNER JOIN  '+@DATABASE+'.DBO.COMPANYBRANCH CB ON CB.BRANCHID = BD.BRANCHID
              WHERE CB.BRANCHCODE = '''+@BRANCHCODE+''' AND BD.QUARTER IN
              (SELECT MAX(QUARTER) FROM '+@DATABASE+'.DBO.BRANCHDEDUCTORS B INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH C ON B.BRANCHID = C.BRANCHID WHERE C.BRANCHCODE='''+@BRANCHCODE+''')
            )DR
            ON DR.DEDUCTORID = RP.DEDUCTORID
            WHERE CB.BRANCHCODE = '''+@BRANCHCODE +''''
     INSERT INTO RESPONSIBLEPERSON(DEDUCTORID,PERSONNAME, RP.ADDRESS1, RP.ADDRESS2, RP.ADDRESS3, RP.ADDRESS4, RP.ADDRESS5, RP.PINCODE, RP.STATEID,
                    RP.ISADDRCHANGED, RP.DESIGNATION, RP.EMAILADDRESS, RP.STDCODE, RP.PHONENO, RP.MOBILENO, RP.FAXNO, RP.GENDER, RP.FATHERNAME)
              EXEC SP_EXECUTESQL @SQLQUERY;
       END
  SET  @COUNT = @COUNT + 1;
 END
  IF(@ISEMPLOYEE = 1 AND @ISNONEMPLOYEE = 1)
   BEGIN
       SET @SQLQUERY='SELECT '+CAST(@BRANCHID  AS VARCHAR)+' AS BRANCHID, SALUTATION, D.NAME,D.PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5,
                  STATEID, PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, ISEXCLUDED, PANSTATUS
                                 FROM '+@DATABASE+'.DBO.DEDUCTEE D
                                 INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH CB ON D.BRANCHID = CB.BRANCHID
                                 WHERE CB.BRANCHCODE = ''' +@BRANCHCODE +''''
          INSERT INTO DEDUCTEE (BRANCHID, SALUTATION, D.NAME,D.PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID,
                                 PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, ISEXCLUDED, PANSTATUS)
          EXEC SP_EXECUTESQL @SQLQUERY
   END
  ELSE IF(@ISEMPLOYEE = 1)
      BEGIN
        SET @SQLQUERY='SELECT '+CAST(@BRANCHID AS VARCHAR)+' AS BRANCHID, SALUTATION, D.NAME,D.PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID,
                                 PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, ISEXCLUDED, PANSTATUS
                                 FROM '+@DATABASE+'.DBO.DEDUCTEE D
                                 INNER JOIN '+@DATABASE+'.DBO.EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID
                                 INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH CB ON D.BRANCHID = CB.BRANCHID
                                 WHERE CB.BRANCHCODE = ''' + @BRANCHCODE+''''
         INSERT INTO DEDUCTEE (BRANCHID, SALUTATION, D.NAME,D.PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID,
                      PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, ISEXCLUDED, PANSTATUS)
         EXEC SP_EXECUTESQL @SQLQUERY
   END
  ELSE IF(@ISNONEMPLOYEE = 1)
      BEGIN
        SET @SQLQUERY='SELECT '+CAST(@BRANCHID AS VARCHAR)+' AS BRANCHID, SALUTATION, D.NAME,D.PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID,
                                 PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, ISEXCLUDED, PANSTATUS
                                 FROM '+@DATABASE+'.DBO.DEDUCTEE D
                                 INNER JOIN '+@DATABASE+'.DBO.NONEMPLOYEE NE ON NE.DEDUCTEEID = D.DEDUCTEEID
                                 INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH CB ON D.BRANCHID = CB.BRANCHID
                                 WHERE CB.BRANCHCODE = '''+@BRANCHCODE+''''
        INSERT INTO DEDUCTEE (BRANCHID, SALUTATION, D.NAME,D.PAN, PANREFERENCE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, ADDRESS5, STATEID,
                                 PINCODE, REFERENCENO, PHONENO, EMAILADDRESS, ISEXCLUDED, PANSTATUS )
      EXEC SP_EXECUTESQL @SQLQUERY
      END
     IF(@ISEMPLOYEE = 1)
   BEGIN
    SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER (ORDER BY DD.DEDUCTEEID) AS SERIALNO, NE.DESIGNATION,
         CAST(CAST(YEAR(NE.EMPLOYMENTFROM) + 1 AS VARCHAR) + ''' + CAST('-' AS VARCHAR)  +  ''' + CAST(MONTH(NE.EMPLOYMENTFROM) AS VARCHAR) + ''' +
         CAST('-' AS VARCHAR) + ''' + CAST(DAY(NE.EMPLOYMENTFROM) AS VARCHAR) AS SMALLDATETIME), CAST(CAST(YEAR(NE.EMPLOYMENTTO)+1 AS VARCHAR) + ''' +
         CAST('-' AS VARCHAR) + ''' +CAST(MONTH(NE.EMPLOYMENTTO) AS VARCHAR) + ''' + CAST('-' AS VARCHAR) +  '''+CAST(DAY(NE.EMPLOYMENTTO) AS VARCHAR) AS SMALLDATETIME),
         NE.GENDER,NE.ISSENIORCITIZEN, DD.NAME, DD.PAN, DD.PANREFERENCE FROM
 (
        SELECT MAX(D.DEDUCTEEID)DEDUCTEEID, NAME, PAN, PANREFERENCE FROM '+@DATABASE+'.DBO.DEDUCTEE D
           INNER JOIN '+@DATABASE+'.DBO.EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
           INNER JOIN '+@DATABASE+'.DBO.COMPANYBRANCH CB ON D.BRANCHID = CB.BRANCHID
           WHERE CB.BRANCHCODE = '''+@BRANCHCODE+'''
           GROUP BY D.NAME, D.PAN , D.PANREFERENCE
          )DD
          INNER JOIN
          '+@DATABASE+'.DBO.EMPLOYEE NE ON NE.DEDUCTEEID = DD.DEDUCTEEID'
       INSERT INTO @EMPLOYEE
       EXEC SP_EXECUTESQL @SQLQUERY;
    INSERT INTO EMPLOYEE(SERIALNO, DEDUCTEEID, DESIGNATION, EMPLOYMENTFROM, EMPLOYMENTTO, GENDER,ISSENIORCITIZEN)
    SELECT ROW_NUMBER() OVER (ORDER BY D.DEDUCTEEID) AS SERIALNO,D.DEDUCTEEID, NE.DESIGNATION, NE.EMPLOYMENTFROM, NE.EMPLOYMENTTO, NE.GENDER, NE.ISSENIORCITIZEN  FROM @EMPLOYEE NE
                INNER JOIN DEDUCTEE D ON NE.NAME = D.NAME AND NE.PAN= D.PAN AND NE.PANREF = D.PANREFERENCE ORDER BY D.DEDUCTEEID
   END
  IF(@ISNONEMPLOYEE = 1)
   BEGIN
   SET @SQLQUERY = 'SELECT ROW_NUMBER() OVER (ORDER BY DD.DEDUCTEEID) AS SERIALNO,NE.DEDUCTEECODE, NE.ISAPPLICABLE26, NE.ISAPPLICABLE27,
           NE.ISTRANSPORTER, DD.NAME, DD.PAN, DD.PANREFERENCE FROM
           (
            SELECT MAX(D.DEDUCTEEID)DEDUCTEEID, NAME, PAN, PANREFERENCE FROM '+ @DATABASE+'.DBO.DEDUCTEE D
            INNER JOIN '+@DATABASE+'.DBO.NONEMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
            INNER JOIN '+ @DATABASE+'.DBO.COMPANYBRANCH CB ON D.BRANCHID = CB.BRANCHID
            WHERE CB.BRANCHCODE = '''+@BRANCHCODE+'''
            GROUP BY D.NAME, D.PAN, D.PANREFERENCE
           )DD
           INNER JOIN
            '+ @DATABASE+'.DBO.NONEMPLOYEE NE ON NE.DEDUCTEEID = DD.DEDUCTEEID'
    INSERT INTO @NONEMPLOYEE
    EXEC SP_EXECUTESQL @SQLQUERY;
    INSERT INTO NONEMPLOYEE  (SERIALNO,DEDUCTEEID, DEDUCTEECODE,ISAPPLICABLE26,ISAPPLICABLE27,ISTRANSPORTER)
    SELECT ROW_NUMBER() OVER (ORDER BY D.DEDUCTEEID) AS SERIALNO,D.DEDUCTEEID, NE.DEDUCTEECODE, NE.ISAPPLICABLE26, NE.ISAPPLICABLE27, NE.ISTRANSPORTER  FROM @NONEMPLOYEE NE
    INNER JOIN DEDUCTEE D ON NE.NAME = D.NAME AND NE.PAN= D.PAN AND NE.PANREF = D.PANREFERENCE ORDER BY D.DEDUCTEEID
   END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UDATEEXCELIMPORTRECCOUNT')
DROP PROCEDURE USP_TDS_UDATEEXCELIMPORTRECCOUNT
GO
CREATE PROCEDURE USP_TDS_UDATEEXCELIMPORTRECCOUNT
@BRANCHID INT,    
@QUARTER INT,    
@RECCOUNT INT    
AS    
BEGIN    
	UPDATE EXCELIMPORTSTATUS SET RECCOUNT = @RECCOUNT    
		WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UNDOCORRDEDUCTORCHANGES')
DROP PROCEDURE USP_TDS_UNDOCORRDEDUCTORCHANGES
GO
CREATE PROCEDURE [USP_TDS_UNDOCORRDEDUCTORCHANGES]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
AS
	BEGIN
		DELETE FROM CORRDEDUCTOR
		WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND CORRECTIONSTATUS <> 1;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UNLINKBLOCK')
DROP PROCEDURE USP_TDS_UNLINKBLOCK
GO
CREATE PROCEDURE [USP_TDS_UNLINKBLOCK]
@CHALLANID INT
AS
	BEGIN
		SELECT COUNT(A.QUARTER) FROM
		(SELECT DD.FORMID, DD.QUARTER, DD.BRANCHID FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDCHALINK DCL WITH(NOLOCK)
		ON DD.DEDUCTIONID=DCL.DEDUCTIONID
		WHERE DCL.CHALLANID=@CHALLANID) A INNER JOIN LOCKQUARTER LQ ON A.FORMID=LQ.FORMID AND A.QUARTER=LQ.QUARTER AND A.BRANCHID=LQ.BRANCHID
		WHERE LQ.FLAG=1
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATE')
DROP PROCEDURE USP_TDS_UPDATE
GO
CREATE PROCEDURE [USP_TDS_UPDATE]
@OLDID VARCHAR(5),
@NEWID VARCHAR(5)
AS
BEGIN
UPDATE DEDUCTEE SET BRANCHID = (SELECT BRANCHID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE = @NEWID)
FROM DEDUCTEE D
INNER JOIN COMPANYBRANCH CB ON D.BRANCHID = CB.BRANCHID
WHERE CB.BRANCHCODE = @OLDID
UPDATE REPORTPAYMENT SET PARENTBRANCHID = (SELECT BRANCHID FROM COMPANYBRANCH WHERE BRANCHCODE = @NEWID)
FROM REPORTPAYMENT RP
INNER JOIN COMPANYBRANCH CB ON RP.PARENTBRANCHID = CB.BRANCHID
WHERE CB.BRANCHCODE = @OLDID
UPDATE DEDUCTIONDETAIL SET BRANCHID = (SELECT BRANCHID FROM COMPANYBRANCH WHERE BRANCHCODE = @NEWID)
FROM DEDUCTIONDETAIL DD
INNER JOIN COMPANYBRANCH CB ON DD.BRANCHID = CB.BRANCHID
WHERE CB.BRANCHCODE = @OLDID
SELECT BASEID,  COL
INTO #TEMP
FROM
(
  SELECT  ((SELECT PARENTBASEID FROM COMPANYBRANCH WITH(NOLOCK) WHERE BRANCHCODE = @NEWID) + T.BASEID )COL, T.BASEID
	FROM
	(
		SELECT (DBO.UDF_TDS_GETFORMATEDPARENTBASEID(CB.BASEID)) BASEID
		 FROM COMPANYBRANCH CB WITH(NOLOCK)
		INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON C.BRANCHID = CB.PARENTBRANCHID
		WHERE C.BRANCHCODE = @OLDID
	)T
)TT
UPDATE COMPANYBRANCH SET PARENTBASEID = T.COL
FROM COMPANYBRANCH CB
INNER JOIN #TEMP T ON T.BASEID = CB.BASEID
UPDATE COMPANYBRANCH SET PARENTBRANCHID = (SELECT BRANCHID FROM COMPANYBRANCH WHERE BRANCHCODE = @NEWID)
WHERE PARENTBRANCHID = (SELECT BRANCHID FROM COMPANYBRANCH WHERE BRANCHCODE =@OLDID)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_Update80CDetails')
DROP PROCEDURE USP_TDS_Update80CDetails
GO
CREATE PROCEDURE USP_TDS_Update80CDetails
@DEDUCTEEID INT = -1,   
@COMID INT ,
@BRANCHID INT = -1
AS  
 BEGIN  
	 DECLARE @SALARYDETAILID INT, @GROSSAMT NUMERIC(13,2),@QUALIFYINGAMT NUMERIC(13,2), @CHAPTERVIADETID INT, @TOTALDEDUNDERCHAPTERVIA NUMERIC(13,2);  
	 SET @CHAPTERVIADETID= -1;
	-- CREATE TABLE #TMP(TID INT,GROSSAMT NUMERIC(13,2),QUALIFYINGAMT NUMERIC(13,2), ISORIGINAL BIT);
	-- SELECT @BRANCHID = BRANCHID FROM DEDUCTEE WHERE DEDUCTEEID = @DEDUCTEEID
	-- INSERT INTO #TMP  
	-- EXEC USP_TDS_GETACTUAL80CVALUES @COMID, @BRANCHID
	-- SELECT @GROSSAMT = SUM(GROSSAMT), @QUALIFYINGAMT = SUM(QUALIFYINGAMT) FROM #TMP  
	--IF EXISTS(SELECT CHAPTERVIADETAILID FROM CHAPTERVIADET WITH(NOLOCK) WHERE COMID = @COMID AND SALARYSECTIONID = 3)
	--  BEGIN
	--		SELECT @CHAPTERVIADETID = CHAPTERVIADETAILID FROM CHAPTERVIADET WITH(NOLOCK) WHERE COMID = @COMID AND SALARYSECTIONID = 3
	--	    UPDATE CVIA80CDET SET GROSS = (SELECT SUM(GROSSAMT) FROM #TMP WHERE TID = CVIADET.C80CID),
	--										QUALIFYING = (SELECT SUM(QUALIFYINGAMT) FROM #TMP WHERE TID = CVIADET.C80CID)
	--		 FROM CVIA80CDET CVIADET WITH(NOLOCK)
	--		 INNER JOIN CHAPTERVIADET CDET WITH(NOLOCK) ON CDET.CHAPTERVIADETAILID = CVIADET.CHAPTERVIADETID
	--		 WHERE CDET.COMID = @COMID 
	--		 INSERT INTO CVIA80CDET(CHAPTERVIADETID, C80CID, GROSS, QUALIFYING, ISORIGINAL)
	--		 SELECT @CHAPTERVIADETID, TID, GROSSAMT, QUALIFYINGAMT, T.ISORIGINAL FROM #TMP T
	--		 WHERE T.TID NOT IN
	--		 (
	--			SELECT CVIADET.C80CID FROM CHAPTERVIADET CDET WITH(NOLOCK) 
	--				INNER JOIN CVIA80CDET CVIADET WITH(NOLOCK) ON CDET.CHAPTERVIADETAILID = CVIADET.CHAPTERVIADETID
	--			WHERE COMID = @COMID
	--		 )
	--  END
 --   ELSE
 --    BEGIN
	--	 INSERT INTO CHAPTERVIADET(COMID, SALARYSECTIONID, GROSSAMOUNT, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT)
	--	 VALUES(@COMID, 3, 0,0,0)
	--	 SET @CHAPTERVIADETID = SCOPE_IDENTITY();
	--	  INSERT INTO CVIA80CDET(CHAPTERVIADETID, C80CID, GROSS, QUALIFYING, ISORIGINAL)
	--	  SELECT @CHAPTERVIADETID, * FROM #TMP T		 
 --    END    
	   UPDATE CHAPTERVIADET SET GROSSAMOUNT = (SELECT SUM(GROSS) FROM CVIA80CDET WHERE CHAPTERVIADETID = CDET.CHAPTERVIADETAILID), 
											 QUALIFYINGAMOUNT = (SELECT SUM(QUALIFYING) FROM CVIA80CDET WHERE CHAPTERVIADETID = CDET.CHAPTERVIADETAILID),
											 DEDUCTIBLEAMOUNT = (SELECT SUM(QUALIFYING) FROM CVIA80CDET WHERE CHAPTERVIADETID = CDET.CHAPTERVIADETAILID)
		FROM CHAPTERVIADET CDET WITH(NOLOCK)
			WHERE COMID = @COMID AND SALARYSECTIONID = 3	
    --SELECT @CHAPTERVIADETID;  
   SELECT 1; 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATE80CDETAILSPAYFILE')
DROP PROCEDURE USP_TDS_UPDATE80CDETAILSPAYFILE
GO
CREATE PROCEDURE  USP_TDS_UPDATE80CDETAILSPAYFILE --152    
@COMID INT,  
@BRANCHID INT    
AS    
DECLARE @CHAPTERVIADETAILID INT, @GROSS NUMERIC(13,2), @QUALIFYING NUMERIC(13,2);    
DECLARE @TOT TABLE (ID INT, GROSS NUMERIC(13,2), QUALIFYING NUMERIC(13,2))    
INSERT INTO @TOT    
EXEC USP_TDS_GETTOTALOFPF @BRANCHID, @COMID    
SELECT @GROSS = GROSS, @QUALIFYING = QUALIFYING FROM @TOT WHERE ID = 3    
IF EXISTS(SELECT CHAPTERVIADETAILID FROM CHAPTERVIADET WITH(NOLOCK) WHERE COMID=@COMID AND SALARYSECTIONID=3)    
 BEGIN    
   SELECT @CHAPTERVIADETAILID = CHAPTERVIADETAILID FROM CHAPTERVIADET WITH(NOLOCK) WHERE COMID=@COMID AND SALARYSECTIONID=3     
 END    
ELSE    
 BEGIN       
   INSERT INTO  CHAPTERVIADET VALUES(@COMID,3,0,0,0,NULL,NULL)    
   SET @CHAPTERVIADETAILID = SCOPE_IDENTITY()    
 END    
IF EXISTS(SELECT CHAPTERVIADETID FROM CVIA80CDET WITH(NOLOCK) WHERE CHAPTERVIADETID =@CHAPTERVIADETAILID AND C80CID=2)    
 BEGIN    
   UPDATE CVIA80CDET SET GROSS = @GROSS , QUALIFYING = @QUALIFYING    
   FROM CVIA80CDET CDET    
   WHERE CHAPTERVIADETID =@CHAPTERVIADETAILID AND C80CID=2    
 END    
ELSE    
 BEGIN       
   INSERT INTO CVIA80CDET(CHAPTERVIADETID,C80CID,GROSS,QUALIFYING) VALUES(@CHAPTERVIADETAILID,2,@GROSS,@QUALIFYING)       
 END    
 SELECT @GROSS = SUM(GROSS), @QUALIFYING = SUM(QUALIFYING) FROM CVIA80CDET WITH(NOLOCK)     
 WHERE CHAPTERVIADETID =@CHAPTERVIADETAILID    
 GROUP BY CHAPTERVIADETID    
 UPDATE CHAPTERVIADET SET GROSSAMOUNT = @GROSS, QUALIFYINGAMOUNT = @QUALIFYING, DEDUCTIBLEAMOUNT = @QUALIFYING    
 WHERE CHAPTERVIADETAILID = @CHAPTERVIADETAILID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEACCOMODATION')
DROP PROCEDURE USP_TDS_UPDATEACCOMODATION
GO
CREATE PROCEDURE USP_TDS_UPDATEACCOMODATION 
@COMIDS NVARCHAR(MAX)
AS
   BEGIN
			SELECT * INTO #COMIDS FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')  
			SELECT COMID, MONTHID, NETAMT AS PERQUISTE, DTF AS RECOVERED, NETAMT - DTF AS TAXABLE , PERKID
			INTO #PERQUISTES
			FROM
					(
						SELECT EM.COMID, EM.MONTHID,SD.NETAMT,CASE WHEN HRAINDI IN (4,7) THEN CEILING((AMOUNT * 0.25)/100) ELSE 0 END AS DTF , 1 AS PERKID
						FROM EMPWORKMONTH EM WITH(NOLOCK)
						INNER JOIN #COMIDS C ON C.DATA = EM.COMID 
						INNER JOIN SCALE S WITH(NOLOCK) ON S.SCALE = EM.SCALE
						INNER JOIN SALDETAIL SD WITH(NOLOCK) ON SD.COMID = EM.COMID AND SD.MONTHID = EM.MONTHID
						INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SH.SALARYHEADID = SD.SALARYHEADID
						WHERE ABBREVATION = 'DTQ'
					)D
					DELETE FROM TAXABLEPERQUISITE 
					FROM TAXABLEPERQUISITE T
					INNER JOIN #COMIDS C ON C.DATA = T.COMID 
					WHERE T.PERKID = 1
					INSERT INTO TAXABLEPERQUISITE
					SELECT P.MONTHID, P.COMID, 1 AS PERKID,P.PERQUISTE,P.RECOVERED, P.TAXABLE  FROM #PERQUISTES P
					LEFT JOIN TAXABLEPERQUISITE T ON T.COMID = P.COMID AND T.MONTHID = P.MONTHID AND T.PERKID = P.PERKID
					WHERE T.TAXABLEPERKID IS NULL
					UPDATE TAXABLEPERQUISITE SET GROSSAMT = P.PERQUISTE, EXEMPTAMT = P.RECOVERED, TAXABLEAMT = P.TAXABLE
					FROM TAXABLEPERQUISITE T
					INNER JOIN #PERQUISTES P ON P.COMID = T.COMID AND P.MONTHID = T.MONTHID AND P.PERKID = T.PERKID					
	 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateACKDetail')
DROP PROCEDURE USP_TDS_UpdateACKDetail
GO
CREATE PROCEDURE [USP_TDS_UpdateACKDetail]
@RECEIPTNO VARCHAR(8),
@BRANCHID INT,
@FORMID INT,
@QUARTER INT ,
@PRN VARCHAR(15)
AS
 BEGIN
  DECLARE @ACKID INT;
  SET @ACKID=-1;
   IF EXISTS(SELECT ACKID FROM ACKNO WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER)
     BEGIN
    UPDATE ACKNO SET RECEIPTNO=@RECEIPTNO WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER;
    SELECT @ACKID = ACKID FROM ACKNO WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
     END
  ELSE
    BEGIN
     INSERT INTO ACKNO(BRANCHID , FORMID , QUARTER, ORGNUM, RECEIPTNO, ISVALID) VALUES(@BRANCHID, @FORMID, @QUARTER, @PRN, @RECEIPTNO,1)
     SET @ACKID= SCOPE_IDENTITY();
    END
  SELECT @ACKID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEACKNOWLEDGEMENTDETAIL')
DROP PROCEDURE USP_TDS_UPDATEACKNOWLEDGEMENTDETAIL
GO
CREATE PROCEDURE [USP_TDS_UPDATEACKNOWLEDGEMENTDETAIL]
 @ACKID INT ,
@ORGNUM VARCHAR(15)
AS
 BEGIN
    UPDATE ACKNO SET ORGNUM= @ORGNUM WHERE ACKID=@ACKID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateAllowance')
DROP PROCEDURE USP_TDS_UpdateAllowance
GO
CREATE PROCEDURE USP_TDS_UpdateAllowance 
@DEDUCTEEID INT,                
@COMID INT,
@FINYEAR INT
AS                
 BEGIN                
		 DECLARE @SALARYDETAILID INT, 
				 @INCLUDEUS10 NUMERIC(13,2),
				 @BRANCHID INT, 
				 @BASIC INT, 
				 @EARNING NUMERIC(13,2),   
				 @DEDUCTION NUMERIC(13,2), 
				 @ET NUMERIC(13,2), 
				 @PT NUMERIC(13,2), 
				 @DEDUCTIONUS16 NUMERIC(13,2), 
				 @PROFITLIEU NUMERIC(13,2), 
				 @CHAPTERVIADETID INT,
				 @VALUEOFPERQUISITES NUMERIC(13,2), 
				 @TAXABLEPERQUISITES NUMERIC(13,2),
				 @GROSSAMT NUMERIC(13,2),
				 @QUALIFYINGAMT NUMERIC(13,2),
				 @INCOMEFROMOTHERSOURCES NUMERIC(13,2),
				 @PREVEMP NUMERIC(13,2), 
				 @INCOMEFROMSALARIES NUMERIC(13,2),
				 @REFERENCENO VARCHAR(10),     
				 @CAPITALGAINS NUMERIC(13,2),
				 @INCOMEFROMHOUSEPROPERTY NUMERIC(13,2), 
				 @OTHERINCOME NUMERIC(13,2), 
				 @INTERESTONSB NUMERIC(13,2);   
		 CREATE TABLE #SALDET
							(
								BASICSALARY NUMERIC(13,2),
								INCLUDEUS10 NUMERIC(13,2), 
								ET NUMERIC(13,2), 
								PT NUMERIC(13,2)
							);   
		 DECLARE @tmp TABLE(TID INT,GROSSAMT NUMERIC(13,2),QUALIFYINGAMT NUMERIC(13,2));  
		 SELECT @BRANCHID = BRANCHID,@REFERENCENO = REFERENCENO FROM DEDUCTEE WHERE DEDUCTEEID = @DEDUCTEEID;  
		 SET @SALARYDETAILID = -1
		 INSERT INTO #SALDET
		 EXEC USP_TDS_GetTotalGrossSalary @COMID, @BRANCHID
		 SELECT * INTO #LINKTOTC FROM LINKTOTC WITH(NOLOCK) WHERE COMID = @COMID
		 SELECT * INTO #EMPWORKMONTH FROM EMPWORKMONTH WITH(NOLOCK) WHERE COMID = @COMID
		 SELECT E.* INTO #EMPLOYEE FROM EMPLOYEE E WITH(NOLOCK)
		 INNER JOIN #LINKTOTC LTC ON LTC.EMPLOYEEID = E.EMPLOYEEID
		 SELECT D.* INTO #DEDUCTEE FROM DEDUCTEE D WITH(NOLOCK)
		 INNER JOIN #EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID
		 SELECT SD.* INTO #SALARYDETAIL FROM SALARYDETAIL SD WITH(NOLOCK)
		 INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
		SELECT MIN(MONTHID)MINMONTHID, MAX(MONTHID)MAXMONTHID, BRANCHID ,REFERENCENO
		INTO #TABLE1
		FROM
		(
			SELECT CASE WHEN EM.MONTHID = 1 THEN 13 WHEN EM.MONTHID = 2 THEN 14 WHEN EM.MONTHID = 3 THEN 15 ELSE EM.MONTHID END AS MONTHID,D.BRANCHID, D.REFERENCENO
			FROM #SALARYDETAIL SD WITH(NOLOCK)
			INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID
			INNER JOIN #EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
			INNER JOIN #LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID 
			INNER JOIN #EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = LC.COMID AND EM.BRANCHID = LC.BRANCHID
			WHERE D.REFERENCENO = @REFERENCENO AND D.BRANCHID = @BRANCHID
		)D
		GROUP BY BRANCHID, REFERENCENO
		SELECT MIN(MONTHID)MINMONTHID, MAX(MONTHID)MAXMONTHID, BRANCHID ,REFERENCENO
		INTO #TABLE2
		FROM
		(
			SELECT CASE WHEN EM.MONTHID = 1 THEN 13 WHEN EM.MONTHID = 2 THEN 14 WHEN EM.MONTHID = 3 THEN 15 ELSE EM.MONTHID END AS MONTHID,D.BRANCHID, D.REFERENCENO
			FROM #SALARYDETAIL SD WITH(NOLOCK)
			INNER JOIN #DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID
			INNER JOIN #EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
			INNER JOIN #LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID 
			INNER JOIN #EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = LC.COMID AND EM.BRANCHID = LC.BRANCHID
			WHERE D.REFERENCENO = @REFERENCENO AND D.BRANCHID <> @BRANCHID
		)D
		GROUP BY BRANCHID, REFERENCENO
		 SELECT @PROFITLIEU = SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE TA WITH(NOLOCK) 
							INNER JOIN #LINKTOTC LC WITH(NOLOCK)  ON TA.COMID = LC.COMID
							INNER JOIN #EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = LC.COMID AND LC.BRANCHID = EM.BRANCHID AND TA.MONTHID = EM.MONTHID
			   WHERE LC.COMID = @COMID AND PERKID = 21 AND LC.BRANCHID = @BRANCHID
		 SELECT @BASIC = BASICSALARY +  ISNULL(@PROFITLIEU,0), @INCLUDEUS10 = INCLUDEUS10, @DEDUCTIONUS16 = ET + PT FROM #SALDET   
		 SELECT @TAXABLEPERQUISITES = SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE TA WITH(NOLOCK) 
							INNER JOIN #LINKTOTC LC WITH(NOLOCK)  ON TA.COMID = LC.COMID
							INNER JOIN #EMPWORKMONTH EM WITH(NOLOCK)  ON EM.COMID = LC.COMID AND LC.BRANCHID = EM.BRANCHID AND TA.MONTHID = EM.MONTHID
			  WHERE LC.COMID = @COMID AND PERKID <> 21 AND LC.BRANCHID = @BRANCHID
		 SELECT @INCOMEFROMOTHERSOURCES = SUM(OS.AMOUNT  - OS.EXEMPTAMT) FROM OTHERINCOME OI WITH(NOLOCK)        
				 INNER JOIN OTHERINCOMESOURCES OS WITH(NOLOCK) ON OS.OTHERINCOMEID = OI.OTHERINCOMEID      
			  WHERE OI.COMID = @COMID       
		 SELECT @CAPITALGAINS = LGAIN + SGAIN,@INTERESTONSB = INTERESTONSB,     
			  @INCOMEFROMHOUSEPROPERTY = HOUSEPROL + HOUSEPROS FROM OTHERINCOME OI WITH(NOLOCK)       
			  WHERE OI.COMID = @COMID			      
		  IF EXISTS(SELECT SALARYDETAILID FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID)
			  BEGIN      
			   SELECT @SALARYDETAILID = SALARYDETAILID FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID 
			  SELECT @OTHERINCOME = ISNULL(@INCOMEFROMSALARIES,0) + ISNULL(@PREVEMP,0) + ISNULL(@CAPITALGAINS,0) + ISNULL(@INTERESTONSB,0) + 
						ISNULL(@INCOMEFROMHOUSEPROPERTY,0) + ISNULL(@INCOMEFROMOTHERSOURCES,0);
			   UPDATE SALARYDETAIL SET BASICSALARY = ISNULL(@BASIC,0), TAXABLEALLOWANCE = ISNULL(@INCLUDEUS10,0), 
								TAXABLEPERQUISITES = @TAXABLEPERQUISITES,TOTALPERQUISITE = @TAXABLEPERQUISITES,
								GROSSSALARY = ISNULL(@BASIC,0) + ISNULL(@INCLUDEUS10,0) + ISNULL(@TAXABLEPERQUISITES,0),
								DEDUCTIONUS16 = @DEDUCTIONUS16, 								
								INCOMEFROMSALARIES = ISNULL(@BASIC,0) + ISNULL(@INCLUDEUS10,0) + ISNULL(TAXABLEPERQUISITES,0) - ISNULL(@DEDUCTIONUS16,0),
								VALUEOFPERQUISITES = @TAXABLEPERQUISITES,CAPITALGAINS = ISNULL(@CAPITALGAINS,0), INCOMEFROMHOUSEPROPERTY= ISNULL(@INCOMEFROMHOUSEPROPERTY,0),
								INCOMEFROMOTHERSOURCES = ISNULL(@INCOMEFROMOTHERSOURCES,0),
								GROSSTOTALINCOME =  ISNULL(@BASIC,0) + ISNULL(@INCLUDEUS10,0) + ISNULL(TAXABLEPERQUISITES,0) - ISNULL(@DEDUCTIONUS16,0) +  ISNULL(OTHERINCOME,0)
			   WHERE SALARYDETAILID = @SALARYDETAILID 
			   UPDATE SECTION16DETAIL 
			   SET AMOUNT = CASE WHEN SALARYSECTIONID = 1 THEN (SELECT ET FROM #SALDET) ELSE (SELECT PT FROM #SALDET) END 
			   WHERE SALARYDETAILID = @SALARYDETAILID
			  END        
			ELSE        
			  BEGIN        
				INSERT INTO SALARYDETAIL(DEDUCTEEID, BRANCHID,BASICSALARY, TAXABLEALLOWANCE,GROSSSALARY,DEDUCTIONUS16, INCOMEFROMSALARIES, GROSSTOTALINCOME,        
						TOTALTAXABLEINCOME,VALUEOFPERQUISITES,TOTALPERQUISITE,TAXABLEPERQUISITES,PROFITLIEU,CAPITALGAINS, INCOMEFROMHOUSEPROPERTY,     
						 INCOMEFROMOTHERSOURCES)    
					VALUES(@DEDUCTEEID, @BRANCHID,ISNULL(@BASIC,0),ISNULL(@INCLUDEUS10,0), ISNULL(@BASIC,0) + ISNULL(@INCLUDEUS10,0), @DEDUCTIONUS16,        
					 ISNULL(@BASIC,0) + ISNULL(@INCLUDEUS10,0) - ISNULL(@DEDUCTIONUS16,0), ISNULL(@BASIC,0) + ISNULL(@INCLUDEUS10,0) - ISNULL(@DEDUCTIONUS16,0),        
					 ISNULL(@BASIC,0) + ISNULL(@INCLUDEUS10,0) - @DEDUCTIONUS16 ,
					 ISNULL(@TAXABLEPERQUISITES,0), ISNULL(@TAXABLEPERQUISITES,0), ISNULL(@TAXABLEPERQUISITES,0),ISNULL(@PROFITLIEU,0), ISNULL(@CAPITALGAINS,0),
					 ISNULL(@INCOMEFROMHOUSEPROPERTY,0), ISNULL(@INCOMEFROMOTHERSOURCES,0))            
				SET @SALARYDETAILID = SCOPE_IDENTITY();
			  END   
			DELETE FROM SECTION16DETAIL WHERE SALARYDETAILID = @SALARYDETAILID      
			  INSERT INTO SECTION16DETAIL(SALARYDETAILID, SALARYSECTIONID, AMOUNT)            
			  SELECT @SALARYDETAILID,ID, SAL FROM
			  (
			   SELECT 1 AS ID, ET AS SAL FROM #SALDET
			   UNION
			   SELECT 2 AS ID, PT AS SAL FROM #SALDET
			  )T
		      UPDATE SALARYDETAIL 
		      SET TOTALTAXABLEINCOME = CEILING(CAST(TOTALTAXABLEINCOME AS NUMERIC(13,2)))
		      WHERE SALARYDETAILID = @SALARYDETAILID    
		      DROP TABLE #SALDET
		      DROP TABLE #TABLE1
		      DROP TABLE #TABLE2
		      DROP TABLE #DEDUCTEE
		      DROP TABLE #EMPLOYEE
		      DROP TABLE #EMPWORKMONTH
		      DROP TABLE #LINKTOTC
		      DROP TABLE #SALARYDETAIL
			  SELECT @SALARYDETAILID;    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEBGLIDFORZEROTDS')
DROP PROCEDURE USP_TDS_UPDATEBGLIDFORZEROTDS
GO
CREATE PROCEDURE USP_TDS_UPDATEBGLIDFORZEROTDS
@MONTH INT
AS
	BEGIN
	UPDATE DEDUCTIONDETAIL 
		SET BGLCODEID = TR.BGLCODEID
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK) 
			INNER JOIN TDSRATE TR WITH(NOLOCK)
				ON TR.SECTIONID = DD.SECTIONID
			INNER JOIN TAXSECTIONS TS
				ON TS.SECTIONID = DD.SECTIONID 
		WHERE DD.TOTALDEDUCTED = 0 
			AND ISNULL(DD.BGLCODEID,0) = 0
			AND MONTH(PAYMENTDATE) = @MONTH
			AND TS.SECTIONNAME IN('194A','195')
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECHALLAN')
DROP PROCEDURE USP_TDS_UPDATECHALLAN
GO
CREATE PROCEDURE [USP_TDS_UPDATECHALLAN]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@CHALLANSLNO INT,
	@CHALLANID INT
AS
	BEGIN
		UPDATE CORRCHALLANDETAIL SET MATCHEDID = CASE WHEN @CHALLANID = 0 THEN NULL ELSE @CHALLANID END
		WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
								    AND CHALLANSERIALNO = @CHALLANSLNO ;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECHALLANCINDETAILS')
DROP PROCEDURE USP_TDS_UPDATECHALLANCINDETAILS
GO
CREATE PROCEDURE [USP_TDS_UPDATECHALLANCINDETAILS]  
(
	@BRANCHID INT,  
	@SECTIONID INT,  
	@ISCOMPANY BIT,  
	@TOTALCHALLANAMOUNT NUMERIC(13,2),  
	@BANKCHALLANNO VARCHAR(5),  
	@CHALLANPAIDDATE SMALLDATETIME,  
	@BANKID INT  
)  
AS  
BEGIN  
	 DECLARE @CHALLANID INT
	 SELECT @CHALLANID = CHALLANID FROM CHALLANDETAIL WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID AND (CASE WHEN SECTIONID IN (23,24) THEN 15 ELSE SECTIONID END) = @SECTIONID AND ISCOMPANY=@ISCOMPANY AND  CHALLANTOTAL=@TOTALCHALLANAMOUNT  
	 AND LASTCHALLANTOTAL=@TOTALCHALLANAMOUNT AND ISAUTOGENERATED=1 AND ISOLTASINCLUDED=1 AND BANKCHALLANNO IS NULL  
	 UPDATE CHALLANDETAIL SET BANKCHALLANNO=@BANKCHALLANNO,LASTBANKCHALLANNO=@BANKCHALLANNO,
	 CHALLANPAIDDATE=@CHALLANPAIDDATE,LASTCHALLANPAIDDATE=@CHALLANPAIDDATE,BANKID=@BANKID,LASTBANKID=@BANKID
	 WHERE CHALLANID = @CHALLANID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECHALLANDETAIL')
DROP PROCEDURE USP_TDS_UPDATECHALLANDETAIL
GO
CREATE PROCEDURE [USP_TDS_UPDATECHALLANDETAIL]
@BRANCHID INT,
@FORMID INT
AS
 BEGIN
   UPDATE CHALLANDETAIL SET CHALLANTOTAL=C.DEDUCTED, INCOMETAX= C.INCOMETAX , SURCHARGE=C.SURCHARGE, EDUCATIONCESS=C.EDUCATIONCESS
    FROM CHALLANDETAIL CC
    INNER JOIN
    (
    SELECT SUM(D.TOTALDEDUCTED) AS DEDUCTED, SUM(D.INCOMETAX) INCOMETAX, SUM(D.SURCHARGE) SURCHARGE,SUM(D.EDUCATIONCESS) EDUCATIONCESS, CD.CHALLANID FROM DEDCHALINK DL WITH(NOLOCK)
    INNER  JOIN DEDUCTIONDETAIL D WITH(NOLOCK)
    ON D.DEDUCTIONID=DL.DEDUCTIONID
    INNER JOIN CHALLANDETAIL CD WITH(NOLOCK)
    ON CD.CHALLANID=DL.CHALLANID
    WHERE DL.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID
    GROUP BY CD.CHALLANID
    ) C
    ON C.CHALLANID=CC.CHALLANID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateChallanDetails')
DROP PROCEDURE USP_TDS_UpdateChallanDetails
GO
CREATE PROCEDURE [USP_TDS_UpdateChallanDetails] 
 @BRANCHID INT,    
 @FORMID INT,    
 @QUARTER INT,    
 @SERIALNO INT,    
 @MODEOFPAYMENT TINYINT,      
 @BANKCHALLANNO VARCHAR(5),      
 @TRNVOUCHERNO VARCHAR(9),      
 @BANKID INT,      
 @CHALLANPAIDDATE SMALLDATETIME=NULL,      
 @LASTCHALLANPAIDDATE SMALLDATETIME=NULL,      
 @DATEOFDEBIT SMALLDATETIME=NULL,      
 @SECTIONID INT,      
 @INCOMETAX NUMERIC(14,2),      
 @SURCHARGE NUMERIC(14,2),      
 @EDUCATIONCESS NUMERIC(14,2),      
 @INTEREST NUMERIC(14,2),      
 @PENALTY NUMERIC(14,2),      
 @OTHERS NUMERIC(14,2),      
 @CHALLANTOTAL NUMERIC(14,2) = NULL,      
 @ISCOMPANY BIT,      
 @CHEQUENO VARCHAR(15),      
 @CHEQUEDATE SMALLDATETIME=NULL,      
 @CHEQUEDRAWNON VARCHAR(50),      
 @TVRECEIPTNUMBER VARCHAR(7)=NULL,      
 @TRANREFNO VARCHAR(20)=NULL,
 @FEE NUMERIC(14,2) = NULL,
 @MINORHEAD INT = NULL       
 AS    
  BEGIN      
	   UPDATE CHALLANDETAIL SET BRANCHID=@BRANCHID,FORMID=@FORMID,[QUARTER]=@QUARTER,ERETURNID=@SERIALNO,FEE=@FEE, MINORHEAD = @MINORHEAD,   
			   MODEOFPAYMENT=@MODEOFPAYMENT,BANKCHALLANNO=@BANKCHALLANNO,LASTBANKCHALLANNO=BANKCHALLANNO,      
			   TRNVOUCHERNO=@TRNVOUCHERNO,LASTTRNVOUCHERNO=@TRNVOUCHERNO,BANKID=@BANKID,LASTBANKID=@BANKID,CHALLANPAIDDATE=@CHALLANPAIDDATE,      
			   LASTCHALLANPAIDDATE=@LASTCHALLANPAIDDATE,DATEOFDEBIT=@DATEOFDEBIT,SECTIONID=@SECTIONID,INCOMETAX=@INCOMETAX,SURCHARGE=@SURCHARGE,      
			   EDUCATIONCESS=@EDUCATIONCESS,INTEREST=@INTEREST,PENALTY=@PENALTY,OTHERS=@OTHERS,CHALLANTOTAL=@CHALLANTOTAL,LASTCHALLANTOTAL=@CHALLANTOTAL,      
			   ISCOMPANY=@ISCOMPANY,CHEQUENO=@CHEQUENO,CHEQUEDATE=@CHEQUEDATE,CHEQUEDRAWNON=@CHEQUEDRAWNON,TVRECEIPTNUMBER=@TVRECEIPTNUMBER,TRANREFNO=@TRANREFNO      
		 WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND SERIALNO=@SERIALNO      
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECHALLANFORMAT3')
DROP PROCEDURE USP_TDS_UPDATECHALLANFORMAT3
GO
CREATE PROCEDURE [USP_TDS_UPDATECHALLANFORMAT3]
	@BRANCHID INT,
	@CHALLANIDS VARCHAR(MAX)
AS
BEGIN
	DECLARE @QUERY NVARCHAR(MAX);
	SET @QUERY = 'UPDATE CHALLANDETAIL
			SET INCOMETAX = RESULT.INCOMETAX,
			SURCHARGE = RESULT.SURCHARGE,
			EDUCATIONCESS = RESULT.EDUCATIONCESS,
			CHALLANTOTAL = RESULT.INCOMETAX + RESULT.SURCHARGE + RESULT.EDUCATIONCESS + CD.INTEREST + CD.PENALTY + CD.OTHERS
	FROM CHALLANDETAIL CD
	INNER JOIN
	(
		SELECT CD.CHALLANID,ISNULL(SUM(DD.INCOMETAX),0) INCOMETAX,ISNULL(SUM(DD.SURCHARGE),0) SURCHARGE,ISNULL(SUM(DD.EDUCATIONCESS),0) EDUCATIONCESS
		FROM CHALLANDETAIL CD WITH(NOLOCK)
		LEFT JOIN DEDCHALINK DL WITH(NOLOCK) ON CD.CHALLANID = DL.CHALLANID AND CD.BRANCHID = DL.BRANCHID
		LEFT JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON DL.DEDUCTIONID =  DD.DEDUCTIONID AND DL.BRANCHID = DD.BRANCHID
		WHERE CD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + ' AND CD.CHALLANID IN ('+ @CHALLANIDS + ')
		GROUP BY CD.CHALLANID
	) RESULT
	ON CD.CHALLANID = RESULT.CHALLANID
	WHERE CD.BRANCHID = ' + CAST(@BRANCHID AS VARCHAR) + '  AND CD.CHALLANID IN ('+ @CHALLANIDS + ')';
	EXECUTE SP_EXECUTESQL @QUERY
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateChapterVIADetail')
DROP PROCEDURE USP_TDS_UpdateChapterVIADetail
GO
CREATE PROCEDURE USP_TDS_UpdateChapterVIADetail
@DEDUCTEEID INT,    
@COMID INT,
@SALARYSECTIONID INT,
@FINYEAR INT
AS    
 BEGIN    
	DECLARE @SALARYDETAILID INT, @TOTALDEDUNDERCHAPTERVIA NUMERIC(13,2),@BRANCHID INT,
			 @TAXABLEAMT NUMERIC(13,2), @TOTALDEDUCTIBLE NUMERIC(13,2), @INTERESTONSB NUMERIC(13,2);    
	SET @SALARYDETAILID =-1   
	DECLARE @TAXABLE TABLE(ID INT, GROSSAMT NUMERIC(13,2), QUALIFYINGAMT NUMERIC(13,2), ISORIGINAL BIT); 
	SELECT @BRANCHID = BRANCHID FROM DEDUCTEE WITH (NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID;   
	SET @INTERESTONSB = 0;
	INSERT INTO @TAXABLE
	EXEC USP_TDS_GetActual80CValues @COMID, @BRANCHID
	UPDATE @TAXABLE SET ID = 3
	INSERT INTO @TAXABLE 
	SELECT CDET.SALARYSECTIONID, GROSSAMOUNT, QUALIFYINGAMOUNT,1 FROM CHAPTERVIADET CDET WITH(NOLOCK)
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = CDET.COMID
	WHERE  CDET.COMID = @COMID AND LC.BRANCHID = @BRANCHID AND SALARYSECTIONID <> 3
	UPDATE @TAXABLE SET ID = 6 WHERE ID IN(24,25)
	SELECT @INTERESTONSB = ISNULL(GROSSAMT,0) FROM @TAXABLE WHERE ID = 18
	UPDATE OTHERINCOME SET INTERESTONSB  = @INTERESTONSB WHERE COMID = @COMID
	SELECT @TOTALDEDUNDERCHAPTERVIA = SUM(QUALIFYINGAMOUNT) FROM CHAPTERVIADET WITH(NOLOCK) WHERE COMID = @COMID
	IF EXISTS(SELECT SALARYDETAILID FROM SALARYDETAIL WITH (NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID)    
	BEGIN    
		SELECT @SALARYDETAILID = SALARYDETAILID FROM SALARYDETAIL WITH (NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID
	END
	ELSE
	BEGIN
		INSERT INTO SALARYDETAIL(DEDUCTEEID, BRANCHID, TOTALDEDUNDERCHAPTERVIA)
		VALUES(@DEDUCTEEID, @BRANCHID,@TOTALDEDUNDERCHAPTERVIA)
		SET @SALARYDETAILID = SCOPE_IDENTITY();
	END
	DELETE FROM CHAPTERVIADETAIL WHERE SALARYDETAILID = @SALARYDETAILID
	IF(@FINYEAR > 2013)
		BEGIN
		  INSERT INTO CHAPTERVIADETAIL(SALARYDETAILID, SALARYSECTIONID, GROSSAMOUNT, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT)    
		  SELECT @SALARYDETAILID, ID, SUM(ISNULL(GROSSAMT,0))GROSSAMT, CASE WHEN ID = 3 AND SUM(ISNULL(QUALIFYINGAMT,0)) > 150000 THEN 150000 ELSE SUM(ISNULL(QUALIFYINGAMT,0)) END QUALIFYINGAMT,
			CASE WHEN ID = 3 AND SUM(ISNULL(QUALIFYINGAMT,0)) > 150000 THEN 150000 ELSE SUM(ISNULL(QUALIFYINGAMT,0)) END QUALIFYINGAMT
			FROM @TAXABLE 
			GROUP BY ID
		END
		ELSE
		BEGIN
			INSERT INTO CHAPTERVIADETAIL(SALARYDETAILID, SALARYSECTIONID, GROSSAMOUNT, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT)    
			SELECT @SALARYDETAILID, ID, SUM(GROSSAMT)GROSSAMT, CASE WHEN ID = 3 AND SUM(QUALIFYINGAMT) > 100000 THEN 100000 ELSE SUM(QUALIFYINGAMT) END QUALIFYINGAMT,
			CASE WHEN ID = 3 AND SUM(QUALIFYINGAMT) > 100000 THEN 100000 ELSE SUM(QUALIFYINGAMT) END QUALIFYINGAMT
			FROM @TAXABLE 
			GROUP BY ID
		END
	  SELECT @TOTALDEDUNDERCHAPTERVIA = SUM(DEDUCTIBLEAMOUNT) FROM CHAPTERVIADETAIL WITH (NOLOCK) 
	   WHERE SALARYDETAILID = @SALARYDETAILID
	   GROUP BY SALARYDETAILID
	  UPDATE SALARYDETAIL SET TOTALDEDUNDERCHAPTERVIA = CASE WHEN GROSSTOTALINCOME > ISNULL(@TOTALDEDUNDERCHAPTERVIA,0) 
																									THEN ISNULL(@TOTALDEDUNDERCHAPTERVIA,0) 
																								ELSE GROSSTOTALINCOME END, 
			TOTALTAXABLEINCOME = GROSSTOTALINCOME - (CASE WHEN GROSSTOTALINCOME > ISNULL(@TOTALDEDUNDERCHAPTERVIA,0) 
																							THEN ISNULL(@TOTALDEDUNDERCHAPTERVIA,0)
																						ELSE GROSSTOTALINCOME END
																				),
			OTHERINCOME = ISNULL(SALARYFROMPREVEMP,0) +  ISNULL(INCOMEFROMHOUSEPROPERTY,0) + ISNULL(INCOMEFROMBUSINESS,0)
						 + ISNULL(CAPITALGAINS,0) + ISNULL(INCOMEFROMOTHERSOURCES,0) + ISNULL(@INTERESTONSB,0)
		WHERE SALARYDETAILID = @SALARYDETAILID
	UPDATE SALARYDETAIL SET TOTALTAXABLEINCOME = CAST(ROUND((TOTALTAXABLEINCOME)*10/10,-1) AS NUMERIC(13,2))
	WHERE SALARYDETAILID = @SALARYDETAILID    
	SELECT @SALARYDETAILID;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateChapterVIADetailS')
DROP PROCEDURE USP_TDS_UpdateChapterVIADetailS
GO
CREATE PROCEDURE USP_TDS_UpdateChapterVIADetailS
	@SalaryDetailID INT,
	@SalarySectionID INT,
	@GrossAmount NUMERIC(13,2),
	@QualifyingAmount NUMERIC(13,2),
	@DeductibleAmount NUMERIC(13,2),
	@Remarks VARCHAR(50)
AS
BEGIN
	UPDATE CHAPTERVIADETAIL
	SET GROSSAMOUNT=@GrossAmount,QUALIFYINGAMOUNT=@QualifyingAmount,
	DEDUCTIBLEAMOUNT=@DeductibleAmount,REMARKS=@Remarks
	WHERE SALARYDETAILID=@SalaryDetailID AND SALARYSECTIONID=@SalarySectionID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECINDETAILS')
DROP PROCEDURE USP_TDS_UPDATECINDETAILS
GO
CREATE PROCEDURE [USP_TDS_UPDATECINDETAILS]
(
@CHALLANID INT,
@BANKCHALLANNO VARCHAR(5),
@LASTBANKCHALLANNO VARCHAR(5),
@BANKID INT,
@LASTBANKID INT,
@CHALLANPAIDDATE SMALLDATETIME,
@LASTCHALLANPAIDDATE SMALLDATETIME
)
AS
BEGIN
	UPDATE CHALLANDETAIL SET BANKCHALLANNO=@BANKCHALLANNO,
	LASTBANKCHALLANNO=@LASTBANKCHALLANNO,BANKID=@BANKID,LASTBANKID=@LASTBANKID,
	CHALLANPAIDDATE=@CHALLANPAIDDATE,LASTCHALLANPAIDDATE=@LASTCHALLANPAIDDATE
	WHERE CHALLANID=@CHALLANID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECINSTATUS')
DROP PROCEDURE USP_TDS_UPDATECINSTATUS
GO
CREATE PROCEDURE [USP_TDS_UPDATECINSTATUS]  
(  
@BRANCHID INT,  
@FORMID TINYINT,  
@QUARTER TINYINT,  
@SERIALNO INT,  
@CINSTATUS VARCHAR(MAX)  
)  
AS  
BEGIN  
UPDATE CHALLANDETAIL SET CINSTATUS=@CINSTATUS WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND SERIALNO=@SERIALNO  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECOMPANYBRANCHDETAILS')
DROP PROCEDURE USP_TDS_UPDATECOMPANYBRANCHDETAILS
GO
CREATE PROCEDURE [USP_TDS_UPDATECOMPANYBRANCHDETAILS]
@OLDBRANCHCODE VARCHAR(100),
@NEWBRANCHCODE VARCHAR(10),
@BRANCHNAME VARCHAR(100),
@DATABASE VARCHAR(MAX)
AS
 BEGIN
   DECLARE @SQLQUERY NVARCHAR(MAX), @BRANCHID NVARCHAR(MAX), @ID INT;
   DECLARE @BRANCH TABLE(BRANCHID INT);
  SET @ID = -5;
  SET @BRANCHID = 'SELECT BRANCHID FROM '+@DATABASE+'.DBO.COMPANYBRANCH WHERE BRANCHCODE = '''+ @NEWBRANCHCODE +''' AND BRANCHNAME <> '''+@BRANCHNAME+'''';
  INSERT INTO @BRANCH
  EXEC SP_EXECUTESQL @BRANCHID;
   IF NOT EXISTS (SELECT BRANCHID FROM @BRANCH)
        BEGIN
        SET @SQLQUERY = 'UPDATE '+ CAST(@DATABASE AS VARCHAR) + '.DBO.COMPANYBRANCH SET BRANCHCODE = ''' +@NEWBRANCHCODE+ ''' WHERE BRANCHCODE = '''+@OLDBRANCHCODE+''' AND BRANCHNAME = '''+ @BRANCHNAME+''''
        EXEC SP_EXECUTESQL @SQLQUERY;
        SET @ID = 1;
        END
    SELECT @ID;
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECOMPANYBRANCHSTATUS')
DROP PROCEDURE USP_TDS_UPDATECOMPANYBRANCHSTATUS
GO
CREATE PROCEDURE [USP_TDS_UPDATECOMPANYBRANCHSTATUS]
@BRANCHID INT,
@USERID INT,
@AUDITTYPE INT,
@AUDITDATE DATETIME,
@AUDITREMARKS VARCHAR(100)
AS
  BEGIN
 DECLARE @AUDITID INT;
 SET @AUDITID =-1;
 IF(@AUDITREMARKS = '')
   BEGIN
	 SELECT @AUDITREMARKS = CAST(BRANCHID AS VARCHAR) + '^'+
		     BRANCHNAME + '^'+ BRANCHCODE +'^'+
		     (SELECT CAST(C.BRANCHID AS VARCHAR) FROM COMPANYBRANCH C WITH(NOLOCK)
				LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON C.BRANCHID = CB.PARENTBRANCHID
				WHERE CB.BRANCHID = @BRANCHID)
			FROM COMPANYBRANCH WITH(NOLOCK)
	 WHERE BRANCHID = @BRANCHID
   END
   INSERT INTO COMPANYBRANCHAUDIT(RECORDID, USERID, AUDITTYPE,AUDITDATE, AUDITREMARKS)
   VALUES (@BRANCHID, @USERID,@AUDITTYPE,CONVERT(VARCHAR(20),@AUDITDATE,120),@AUDITREMARKS)
   SET @AUDITID = SCOPE_IDENTITY();
  SELECT @AUDITID;
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECORRDEDUCTIONSNO')
DROP PROCEDURE USP_TDS_UPDATECORRDEDUCTIONSNO
GO
CREATE PROCEDURE [USP_TDS_UPDATECORRDEDUCTIONSNO]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@CURRENTDATE SMALLDATETIME
AS
 BEGIN
DECLARE @DEDTABLE TABLE(TOTAL INT,PAYMENTDATE SMALLDATETIME, INCOMETAX NUMERIC(13,2), SURCHARGE NUMERIC(13,2), EDUCATIONCESS NUMERIC(13,2),  TOTALDEDUCTED NUMERIC(13,2), SECTIONID INT, PAYMENTMADE NUMERIC(13,2));
      INSERT INTO @DEDTABLE
  SELECT COUNT(DEDUCTIONID) AS TOTAL ,DD.PAYMENTDATE,DD.INCOMETAX , DD.SURCHARGE,DD.EDUCATIONCESS,  DD.TOTALDEDUCTED, DD.SECTIONID,DD.PAYMENTMADE
  FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER =@QUARTER
  GROUP BY   DD.PAYMENTDATE,DD.INCOMETAX , DD.SURCHARGE,DD.EDUCATIONCESS,  DD.TOTALDEDUCTED, DD.SECTIONID,DD.PAYMENTMADE
   HAVING COUNT(DEDUCTIONID) = 1
  UPDATE CORRDEDUCTIONDETAIL
  SET DEDUCTIONID = D.DEDUCTIONID , DEDUCTIONSERIALNO = D.SERIALNO
  FROM CORRDEDUCTIONDETAIL CDD
  INNER JOIN
  (
   SELECT DISTINCT DD.DEDUCTIONID , DD.SERIALNO,DD.PAYMENTDATE,DD.PAYMENTMADE,DD.INCOMETAX,DD.SURCHARGE,DD.EDUCATIONCESS,
   DD.SECTIONID, DD.TOTALDEDUCTED
     FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN @DEDTABLE D
   ON
   DD.PAYMENTDATE = D.PAYMENTDATE AND DD.PAYMENTMADE = D.PAYMENTMADE AND
   DD.INCOMETAX = D.INCOMETAX AND DD.SURCHARGE = D.SURCHARGE AND DD.EDUCATIONCESS = D.EDUCATIONCESS AND
   DD.SECTIONID = D.SECTIONID AND DD.TOTALDEDUCTED = D.TOTALDEDUCTED
   WHERE DD.BRANCHID =@BRANCHID AND DD.FORMID =@FORMID AND DD.QUARTER =@QUARTER
  )D
  ON CDD.INCOMETAX =D.INCOMETAX AND CDD.EDUCATIONCESS =D.EDUCATIONCESS AND CDD.SURCHARGE =D.SURCHARGE AND
  CDD.PAYMENTMADE = D.PAYMENTMADE AND CDD.PAYMENTDATE = D.PAYMENTDATE AND CDD.SECTIONID = D.SECTIONID AND
     CDD.TOTALDEDUCTED = D.TOTALDEDUCTED
  WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER =@QUARTER AND CDD.DEDUCTIONID = 0 AND CDD.DEDUCTIONSERIALNO = 0
  UPDATE CORRDEDUCTIONDETAIL SET DEDUCTIONID = NULL
  WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DEDUCTIONID = -1
  UPDATE CORRDEDUCTIONDETAIL
  SET DEDUCTEDDATE = NULL
  WHERE BRANCHID =@BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER AND TOTALDEDUCTED = 0
  UPDATE CORRCHALLANDETAIL
  SET DATEOFDEBIT  = NULL
  WHERE BRANCHID =@BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER AND DATEOFDEBIT = @CURRENTDATE
  UPDATE CORRCHALLANDETAIL
  SET CHEQUEDATE  = NULL
  WHERE BRANCHID =@BRANCHID AND FORMID =@FORMID AND QUARTER =@QUARTER AND CHEQUEDATE = @CURRENTDATE
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECORRECTIONDETAILS')
DROP PROCEDURE USP_TDS_UPDATECORRECTIONDETAILS
GO
CREATE PROCEDURE USP_TDS_UPDATECORRECTIONDETAILS
	@BRANCHID INT,
	@FORMID SMALLINT,
	@QUARTER SMALLINT,
	@REVISENUMBER INT,
	@ISVALIDCORRERETURN BIT,
	@ISFINALUPDATE BIT,
	@ISCANCELLED BIT
AS
BEGIN
	UPDATE CORRECTIONDETAILS 
	SET ISVALIDCORRERETURN=@ISVALIDCORRERETURN,
		ISFINALUPDATE =@ISFINALUPDATE,
		ISCANCELLED=@ISCANCELLED,
		FILEDDATE = GETDATE()
	WHERE BRANCHID=@BRANCHID
		AND FORMID=@FORMID
		AND QUARTER=@QUARTER
		AND REVISENUMBER=@REVISENUMBER
	DECLARE @ACKID INT;
	SET @ACKID = (SELECT ACKID 
				  FROM ACKNO
				  WHERE BRANCHID=@BRANCHID
					   AND FORMID=@FORMID
					   AND QUARTER=@QUARTER)
	INSERT INTO ACKNOREV(ACKID,REVISENUMBER) 
	VALUES(@ACKID,@REVISENUMBER)
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECORRECTIONRECORDS')
DROP PROCEDURE USP_TDS_UPDATECORRECTIONRECORDS
GO
CREATE PROCEDURE USP_TDS_UPDATECORRECTIONRECORDS 
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT  
AS  
 BEGIN  
       DECLARE @DYNAMICSQL NVARCHAR(200)  
       DECLARE @DEDUCTIONID INT, @NAME VARCHAR(75), @PAN VARCHAR(10), @PAYMENTMADE NUMERIC(13,2), @PAYMENTDATE SMALLDATETIME,  
      @INCOMETAX NUMERIC(13,2),@SURCHARGE NUMERIC(13,2),@EDUCATIONCESS NUMERIC(13,2),@TOTALDEDUCTED NUMERIC(13,2),  
      @SECTIONID INT;  
       SET NOCOUNT ON  
		SELECT CDD.BRANCHID,FORMID,QUARTER
		INTO #COMPANY
		FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
		INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CDD.BRANCHID = CB.BRANCHID
		WHERE DEDUCTIONID IS NULL AND CORRECTIONSTATUS = 1
		AND CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER
		GROUP BY CDD.BRANCHID,FORMID,QUARTER
		SELECT DEDUCTIONSERIALNO 
		INTO #CORRDED
		FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
		INNER JOIN #COMPANY C ON C.BRANCHID = CDD.BRANCHID AND C.FORMID = CDD.FORMID AND C.QUARTER = CDD.QUARTER
		WHERE CORRECTIONSTATUS <> 1 AND DEDUCTIONID IS NULL 
		SELECT DISTINCT RTRIM(LTRIM(UPPER(CNE.NAME)))NAME, RTRIM(LTRIM(UPPER(CNE.PAN)))PAN, CDD.BRANCHID,CDD.FORMID, CDD.QUARTER , PAYMENTMADE, 
							PAYMENTDATE, INCOMETAX, SURCHARGE,EDUCATIONCESS, TOTALDEDUCTED, SECTIONID
		INTO #DISTINCT
		FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
		INNER JOIN #COMPANY C ON C.BRANCHID = CDD.BRANCHID AND C.FORMID = CDD.FORMID AND C.QUARTER = CDD.QUARTER
		INNER JOIN CORRNONEMPLOYEE CNE WITH(NOLOCK) ON CDD.DEDUCTEESERIALNO = CNE.DEDUCTEESERIALNO AND CDD.BRANCHID = CNE.BRANCHID AND CDD.FORMID = CNE.FORMID AND CDD.QUARTER = CNE.QUARTER 
		INNER JOIN #CORRDED CD ON CDD.DEDUCTIONSERIALNO = CD.DEDUCTIONSERIALNO
		WHERE CDD.CORRECTIONSTATUS = 1
		DECLARE CUR CURSOR FOR 
		SELECT DD.DEDUCTIONID,RTRIM(LTRIM(UPPER(D.NAME)))NAME, RTRIM(LTRIM(UPPER(D.PAN)))PAN, DD.BRANCHID,DD.FORMID, DD.QUARTER , DD.PAYMENTMADE, DD.PAYMENTDATE, 
							  DD.INCOMETAX, DD.SURCHARGE,DD.EDUCATIONCESS, DD.TOTALDEDUCTED, DD.SECTIONID FROM DEDUCTIONDETAIL DD
		INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
		INNER JOIN #DISTINCT DI ON RTRIM(LTRIM(UPPER(D.NAME))) = RTRIM(LTRIM(UPPER(DI.NAME))) AND
						RTRIM(LTRIM(UPPER(D.PAN))) = RTRIM(LTRIM(UPPER(DI.PAN))) AND DD.BRANCHID = DI.BRANCHID AND DD.FORMID = DI.FORMID AND 
						DD.QUARTER = DI.QUARTER AND DD.PAYMENTMADE = DI.PAYMENTMADE AND DD.PAYMENTDATE = DI.PAYMENTDATE  
						AND DD.INCOMETAX = DI.INCOMETAX AND DD.SURCHARGE = DI.SURCHARGE AND DD.EDUCATIONCESS = DI.EDUCATIONCESS
						AND DD.TOTALDEDUCTED = DI.TOTALDEDUCTED AND DD.SECTIONID = DI.SECTIONID
		--PRINT 1
		OPEN CUR				    
		FETCH NEXT FROM CUR INTO 
		@DEDUCTIONID, @NAME, @PAN, @BRANCHID, @FORMID, @QUARTER, @PAYMENTMADE, @PAYMENTDATE, @INCOMETAX, @SURCHARGE,
						@EDUCATIONCESS,@TOTALDEDUCTED,@SECTIONID
		--PRINT 2
		WHILE (@@FETCH_STATUS = 0)
		BEGIN
			IF(@FORMID = 1)
			  BEGIN
				UPDATE TOP(1) CORRDEDUCTIONDETAIL SET DEDUCTIONID = @DEDUCTIONID
				FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
				INNER JOIN CORREMPLOYEE CE WITH(NOLOCK) ON CDD.DEDUCTEESERIALNO = CE.DEDUCTEESERIALNO AND CDD.BRANCHID = CE.BRANCHID AND CDD.FORMID = CE.FORMID AND CDD.QUARTER = CE.QUARTER
				WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER AND PAYMENTMADE = @PAYMENTMADE AND NAME = @NAME AND PAN = @PAN AND
								PAYMENTDATE = @PAYMENTDATE AND INCOMETAX = @INCOMETAX AND SURCHARGE = @SURCHARGE AND EDUCATIONCESS = @EDUCATIONCESS AND
								TOTALDEDUCTED = @TOTALDEDUCTED AND SECTIONID = @SECTIONID AND ISNULL(DEDUCTIONID,0) <=0 AND CDD.CORRECTIONSTATUS = 1
			  END
			ELSE
			  BEGIN
				UPDATE TOP(1) CORRDEDUCTIONDETAIL SET DEDUCTIONID = @DEDUCTIONID
				FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
				INNER JOIN CORRNONEMPLOYEE CE WITH(NOLOCK) ON CDD.DEDUCTEESERIALNO = CE.DEDUCTEESERIALNO AND CDD.BRANCHID = CE.BRANCHID AND CDD.FORMID = CE.FORMID AND CDD.QUARTER = CE.QUARTER
				WHERE CDD.BRANCHID = @BRANCHID AND CDD.FORMID = @FORMID AND CDD.QUARTER = @QUARTER AND PAYMENTMADE = @PAYMENTMADE AND NAME = @NAME AND PAN = @PAN AND
								PAYMENTDATE = @PAYMENTDATE AND INCOMETAX = @INCOMETAX AND SURCHARGE = @SURCHARGE AND EDUCATIONCESS = @EDUCATIONCESS AND
								TOTALDEDUCTED = @TOTALDEDUCTED AND SECTIONID = @SECTIONID AND ISNULL(DEDUCTIONID,0) <=0 AND CDD.CORRECTIONSTATUS = 1
			  END
			FETCH NEXT FROM CUR INTO @DEDUCTIONID,@NAME, @PAN, @BRANCHID, @FORMID, @QUARTER, @PAYMENTMADE, @PAYMENTDATE, @INCOMETAX, @SURCHARGE,
						@EDUCATIONCESS,@TOTALDEDUCTED,@SECTIONID
		END
		CLOSE CUR
		DEALLOCATE CUR
		SELECT DEDUCTIONID, DEDUCTIONSERIALNO, CDD.BRANCHID, CDD.FORMID, CDD.QUARTER 
		INTO #CORRDED1
		FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) 
		INNER JOIN #COMPANY C ON C.BRANCHID = CDD.BRANCHID AND C.FORMID = CDD.FORMID AND C.QUARTER = CDD.QUARTER
		WHERE CORRECTIONSTATUS = 1 AND ISNULL(DEDUCTIONID,0) > 0
		UPDATE CORRDEDUCTIONDETAIL SET DEDUCTIONID = C.DEDUCTIONID
		FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
		INNER JOIN #CORRDED1 C ON CDD.DEDUCTIONSERIALNO = C.DEDUCTIONSERIALNO AND CDD.BRANCHID = C.BRANCHID AND CDD.FORMID = C.FORMID AND CDD.QUARTER = C.QUARTER
		AND CDD.CORRECTIONSTATUS NOT IN(1,5)
	  SET NOCOUNT OFF  
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECORREMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_UPDATECORREMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_UPDATECORREMPLOYEEDETAIL]  
@EMPFROMDATE SMALLDATETIME,  
@EMPTODATE SMALLDATETIME,  
@ISSENIORCITIZEN INT,  
@DEDUCTEESERIALNO INT,
@GENDER INT  
AS  
 BEGIN  
   UPDATE CORREMPLOYEE SET GENDER = @GENDER, EMPLOYMENTFROM = @EMPFROMDATE , 
		EMPLOYMENTTO = @EMPTODATE, ISSENIORCITIZEN=@ISSENIORCITIZEN WHERE DEDUCTEESERIALNO = @DEDUCTEESERIALNO  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECORREMPLOYEEPAN')
DROP PROCEDURE USP_TDS_UPDATECORREMPLOYEEPAN
GO
CREATE PROCEDURE [USP_TDS_UPDATECORREMPLOYEEPAN]  
 @BRANCHID INT,  
 @FORMID INT,  
 @QUARTER INT,  
 @DEDUCTEESERIALNO INT,  
 @NAME VARCHAR(75),  
 @PAN VARCHAR(10),
 @PANREFERENCE VARCHAR(10),  
 @UPDATEINDICATOR TINYINT,  
 @CORRECTIONSTATUS SMALLINT,  
 @FINANCIALYEAR INT  ,
 @ISDUPLICATEPAN BIT
AS  
 BEGIN  
 DECLARE @RETURNVALUE INT ;  
  /*CHECK FOR DUPLICATE NAME AND PAN*/  
  IF(@ISDUPLICATEPAN=1)
			BEGIN
  IF EXISTS (SELECT DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND   
     NAME = @NAME AND PAN = @PAN AND DEDUCTEESERIALNO <> @DEDUCTEESERIALNO AND QUARTER = @QUARTER)  
   BEGIN  
  --  SET @RETURNVALUE = -1 ;  
  SELECT -1;
   END  
  ELSE 
  IF EXISTS (SELECT E.SERIALNO FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID   
     WHERE D.BRANCHID = @BRANCHID AND D.NAME=@NAME AND PAN=@PAN AND E.SERIALNO <> @DEDUCTEESERIALNO )  
   BEGIN  
   -- SET @RETURNVALUE = -1 ;  
   SELECT -1;
   END  
   END
  --ELSE  
   BEGIN  
    IF EXISTS(SELECT DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER   
        AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND UPDATEINDICATOR = 1 AND CORRECTIONSTATUS = 3)  
     BEGIN      
      UPDATE CORREMPLOYEE SET PAN = @PAN,PANREFERENCE=@PANREFERENCE,LASTPAN=@PAN,LASTPANREFERENCE=@PANREFERENCE   
      WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO   
             AND UPDATEINDICATOR = @UPDATEINDICATOR AND CORRECTIONSTATUS = @CORRECTIONSTATUS;  
     END  
    ELSE  
     BEGIN  
      DECLARE @DEDUCTEEID INT  
      DECLARE @FVUNAME VARCHAR(75),@FVUPAN VARCHAR(10),@FVUPANREFERENCE VARCHAR(10)  
      SELECT @FVUNAME=NAME,@FVUPAN=PAN,@FVUPANREFERENCE=PANREFERENCE   
      FROM CORREMPLOYEE WITH(NOLOCK)  
      WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESERIALNO  
      IF(@FINANCIALYEAR=2009)  
      BEGIN  
       SELECT @DEDUCTEEID=DEDUCTEEID   
       FROM   DEDUCTEE WITH(NOLOCK)  
       WHERE  BRANCHID=@BRANCHID AND NAME=@FVUNAME AND PAN=@FVUPAN AND PANREFERENCE=@FVUPANREFERENCE;  
      END  
      ELSE  
      BEGIN  
       SELECT @DEDUCTEEID=DEDUCTEEID   
       FROM   DEDUCTEE WITH(NOLOCK)  
       WHERE  BRANCHID=@BRANCHID AND NAME=@FVUNAME AND PAN=@FVUPAN --AND PANREFERENCE=@FVUPANREFERENCE;  
      END  
      INSERT INTO CORREMPLOYEE (BRANCHID,FORMID,QUARTER,DEDUCTEESERIALNO,DEDUCTEEID,NAME,SALUTATION,ADDRESS1,ADDRESS2,ADDRESS3,  
              ADDRESS4,ADDRESS5,STATEID,PINCODE,GENDER,ISSENIORCITIZEN,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,  
              PHONENO,EMAILADDRESS,PAN,PANREFERENCE,LASTPAN,LASTPANREFERENCE,UPDATEINDICATOR,CORRECTIONSTATUS)  
      SELECT  BRANCHID,FORMID,[QUARTER],CE.DEDUCTEESERIALNO,@DEDUCTEEID,NAME,SALUTATION,ADDRESS1,ADDRESS2,ADDRESS3,  
        ADDRESS4,ADDRESS5,STATEID,PINCODE,GENDER,ISSENIORCITIZEN,DESIGNATION,EMPLOYMENTFROM,EMPLOYMENTTO,  
        PHONENO,EMAILADDRESS,PAN,PANREFERENCE,PAN,PANREFERENCE,UPDATEINDICATOR,3 AS CORRECTIONSTATUS   
      FROM CORREMPLOYEE CE WITH(NOLOCK)
      INNER JOIN
      (
		SELECT MAX(CORRECTIONSTATUS)CORRECTIONSTATUS, DEDUCTEESERIALNO FROM CORREMPLOYEE WITH(NOLOCK) 
			WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO
			GROUP BY DEDUCTEESERIALNO
      )C ON CE.DEDUCTEESERIALNO = C.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = C.CORRECTIONSTATUS
      WHERE   BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND CE.DEDUCTEESERIALNO = @DEDUCTEESERIALNO
      UPDATE CORREMPLOYEE SET PAN = @PAN,PANREFERENCE=@PANREFERENCE,LASTPAN=@PAN,LASTPANREFERENCE=@PANREFERENCE   
      WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND [QUARTER] = @QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO   
             AND UPDATEINDICATOR = @UPDATEINDICATOR AND CORRECTIONSTATUS <> 1;  
     END  
    SET @RETURNVALUE=@DEDUCTEESERIALNO  
   END  
   SELECT @RETURNVALUE  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECORRNONEMPLOYEEPAN')
DROP PROCEDURE USP_TDS_UPDATECORRNONEMPLOYEEPAN
GO
CREATE PROCEDURE [USP_TDS_UPDATECORRNONEMPLOYEEPAN] 
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESERIALNO INT,
	@NAME VARCHAR(75),
	@PAN VARCHAR(10),
	@PANREFERENCE VARCHAR(10),
	@UPDATEINDICATOR TINYINT,
	@CORRECTIONSTATUS SMALLINT,
	@FINANCIALYEAR INT,
	@ISDUPLICATEPAN BIT
AS
	BEGIN
		DECLARE @RETURNVALUE INT;
			/*CHECK FOR DUPLICATE NAME AND PAN*/
			IF(@ISDUPLICATEPAN=1)
			BEGIN
				IF EXISTS (SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND
								 NAME=@NAME AND PAN=@PAN AND DEDUCTEESERIALNO <> @DEDUCTEESERIALNO)
					BEGIN
						SET @RETURNVALUE = -1;
					END
				ELSE IF EXISTS (SELECT NE.SERIALNO FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
								WHERE D.BRANCHID = @BRANCHID AND D.NAME=@NAME AND D.PAN=@PAN AND NE.SERIALNO <> @DEDUCTEESERIALNO)
					BEGIN
						SET @RETURNVALUE = -1;
					END
			END
			IF((SELECT ISNULL(@RETURNVALUE,0)) >= 0)
				BEGIN
					IF EXISTS(SELECT DEDUCTEESERIALNO FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID
								AND [QUARTER] = @QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO AND UPDATEINDICATOR = 1 AND CORRECTIONSTATUS = 3)
						BEGIN
							UPDATE CORRNONEMPLOYEE SET PAN = @PAN, PANREFERENCE=@PANREFERENCE,LASTPAN=@PAN,LASTPANREFERENCE=@PANREFERENCE
							WHERE  BRANCHID = @BRANCHID
							  AND FORMID = @FORMID
							  AND [QUARTER] = @QUARTER
							  AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO
							  AND UPDATEINDICATOR = @UPDATEINDICATOR
							  AND CORRECTIONSTATUS = @CORRECTIONSTATUS;
						END
					ELSE
						BEGIN
							DECLARE @DEDUCTEEID INT
							DECLARE @FVUNAME VARCHAR(75),@FVUPAN VARCHAR(10),@FVUPANREFERENCE VARCHAR(10)
							SELECT @FVUNAME=NAME,@FVUPAN=PAN,@FVUPANREFERENCE=PANREFERENCE FROM CORRNONEMPLOYEE WITH(NOLOCK)
							 WHERE BRANCHID=@BRANCHID
							   AND FORMID=@FORMID
							   AND QUARTER=@QUARTER
							   AND DEDUCTEESERIALNO=@DEDUCTEESERIALNO
							IF(@FINANCIALYEAR=2009)
							BEGIN
								SELECT @DEDUCTEEID=DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
																			  AND NAME=@FVUNAME
																			  AND PAN=@FVUPAN
																			  AND PANREFERENCE=@FVUPANREFERENCE
							END
							ELSE
							BEGIN
								SELECT @DEDUCTEEID=DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
																			  AND NAME=@FVUNAME
																			  AND PAN=@FVUPAN
							END
							INSERT INTO CORRNONEMPLOYEE (BRANCHID,FORMID,QUARTER,DEDUCTEESERIALNO,DEDUCTEEID,NAME,SALUTATION,ADDRESS1,ADDRESS2,ADDRESS3,
														 ADDRESS4,ADDRESS5,STATEID,PINCODE,ISAPPLICABLE26,ISAPPLICABLE27,PHONENO,EMAILADDRESS,
														 PAN,PANREFERENCE,LASTPAN,LASTPANREFERENCE,CODE,UPDATEINDICATOR,CORRECTIONSTATUS)
							SELECT  BRANCHID,FORMID,QUARTER,DEDUCTEESERIALNO,@DEDUCTEEID,NAME,SALUTATION,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,
									ADDRESS5,STATEID,PINCODE,ISAPPLICABLE26,ISAPPLICABLE27,PHONENO,EMAILADDRESS,PAN,PANREFERENCE,PAN,PANREFERENCE,
									CODE,UPDATEINDICATOR,3 AS CORRECTIONSTATUS
							  FROM  CORRNONEMPLOYEE WITH(NOLOCK)
							 WHERE  BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO ;
							UPDATE CORRNONEMPLOYEE SET PAN = @PAN,PANREFERENCE=@PANREFERENCE,LASTPAN=@PAN,LASTPANREFERENCE=@PANREFERENCE
							WHERE  BRANCHID = @BRANCHID
							  AND FORMID = @FORMID
							  AND [QUARTER] = @QUARTER
							  AND DEDUCTEESERIALNO = @DEDUCTEESERIALNO
							  AND UPDATEINDICATOR = @UPDATEINDICATOR
							  AND CORRECTIONSTATUS = @CORRECTIONSTATUS;
						END
					SET @RETURNVALUE = @DEDUCTEESERIALNO ;
			END
			SELECT @RETURNVALUE
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECORRPANSTATUS')
DROP PROCEDURE USP_TDS_UPDATECORRPANSTATUS
GO
CREATE PROCEDURE [USP_TDS_UPDATECORRPANSTATUS]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT,
@DEDUCTEESLNO INT,
@PANFLAG VARCHAR(1)
AS
BEGIN
	IF @FORMID=1
	BEGIN
		UPDATE CORREMPLOYEE SET PANFLAG=@PANFLAG WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID 
		AND QUARTER=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESLNO;
	END
	ELSE
		UPDATE CORRNONEMPLOYEE SET PANFLAG=@PANFLAG WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID 
		AND QUARTER=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESLNO;
	DECLARE @ISVALID INT;
	IF @PANFLAG='Y'
	BEGIN
		SET @ISVALID=1;
	END
	ELSE
		SET @ISVALID=0;
	UPDATE CORRDEDUCTIONDETAIL SET ISPANVALIDBYITD=@ISVALID WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID 
	AND QUARTER=@QUARTER AND DEDUCTEESERIALNO=@DEDUCTEESLNO;
--SELECT @ISVALID;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECURREQ')
DROP PROCEDURE USP_TDS_UPDATECURREQ
GO
CREATE PROCEDURE USP_TDS_UPDATECURREQ  
@BRANCHID INT  
AS  
 BEGIN  
	UPDATE IMPORTSTATUS SET CURSTATUS = 2   
	WHERE BRANCHID = @BRANCHID AND CURREQ = 1 AND ISREQACTIVE = 1  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECURREQFORNEW')
DROP PROCEDURE USP_TDS_UPDATECURREQFORNEW
GO
CREATE PROCEDURE USP_TDS_UPDATECURREQFORNEW  
@BRANCHID INT  
AS  
BEGIN  
 UPDATE IMPORTSTATUS SET CURREQ = 0  
 WHERE BRANCHID = @BRANCHID AND CURREQ = 1  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATECURREQFORNEWEXCEL')
DROP PROCEDURE USP_TDS_UPDATECURREQFORNEWEXCEL
GO
CREATE PROCEDURE [USP_TDS_UPDATECURREQFORNEWEXCEL]
@BRANCHID INT    
AS    
BEGIN    
 UPDATE EXCELIMPORTSTATUS SET CURREQ = 0    
 WHERE BRANCHID = @BRANCHID AND CURREQ = 1    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEDEDUCTEEF006')
DROP PROCEDURE USP_TDS_UPDATEDEDUCTEEF006
GO
CREATE PROCEDURE USP_TDS_UPDATEDEDUCTEEF006
@NAME VARCHAR(75),
@PAN VARCHAR(10),
@REFERENCENO VARCHAR(20),
@BRANCHCODE VARCHAR(10)
AS
 BEGIN
	UPDATE DEDUCTEE SET NAME = @NAME,PAN = @PAN
	FROM DEDUCTEE D WITH(NOLOCK) INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = D.BRANCHID
	WHERE REFERENCENO = @REFERENCENO AND CB.BRANCHCODE = @BRANCHCODE 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEDEDUCTEEID')
DROP PROCEDURE USP_TDS_UPDATEDEDUCTEEID
GO
CREATE PROCEDURE [USP_TDS_UPDATEDEDUCTEEID]
AS
	BEGIN
			BEGIN TRY
				SET  NOCOUNT ON
				SELECT DD.DEDUCTEEID, DD.DEDUCTIONID, D.NAME, D.PAN , DD.BRANCHID
				INTO #DEDTEMP
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
				INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON NE.DEDUCTEEID = D.DEDUCTEEID
				SELECT MIN(D.DEDUCTEEID)DEDUCTEEID, NAME, PAN, BRANCHID
				INTO #DEDUCTEE
				FROM DEDUCTEE D WITH(NOLOCK)
				INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
				GROUP BY NAME, PAN, BRANCHID
				UPDATE #DEDTEMP SET DEDUCTEEID = DE.DEDUCTEEID
				FROM #DEDTEMP DT
				INNER JOIN  #DEDUCTEE DE ON DT.NAME = DE.NAME AND DT.PAN = DE.PAN AND DT.BRANCHID = DE.BRANCHID
				UPDATE DEDUCTIONDETAIL SET DEDUCTEEID = DT.DEDUCTEEID
				FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
				INNER JOIN #DEDTEMP DT ON DD.DEDUCTIONID = DT.DEDUCTIONID
				WHERE DD.FORMID <> 1
				DELETE FROM NONEMPLOYEE WHERE DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM #DEDUCTEE
				)
				DELETE FROM DEDUCTEE WHERE DEDUCTEEID NOT IN (SELECT DEDUCTEEID FROM #DEDUCTEE
				UNION
				SELECT DEDUCTEEID FROM EMPLOYEE
				)
				SELECT ROW_NUMBER() OVER(PARTITION BY BRANCHID ORDER BY BRANCHID)ROWNO, DEDUCTEEID
				INTO #DEDUCTEESERIALNO
				FROM DEDUCTEE
				UPDATE NONEMPLOYEE SET SERIALNO = DNO.ROWNO
				FROM NONEMPLOYEE NE
				INNER JOIN DEDUCTEE  D  ON D.DEDUCTEEID = NE.DEDUCTEEID
				INNER JOIN #DEDUCTEESERIALNO DNO ON DNO.DEDUCTEEID = D.DEDUCTEEID
			   SET  NOCOUNT OFF
			   PRINT 'UPDATED SUCCESSFULLY'
			END TRY
			BEGIN CATCH
				PRINT 'FAILED TO UPDATE'
			END CATCH
    END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEDEDUCTEESERIALNO')
DROP PROCEDURE USP_TDS_UPDATEDEDUCTEESERIALNO
GO
CREATE PROCEDURE [USP_TDS_UPDATEDEDUCTEESERIALNO]     
@BRANCHID INT,            
@FORMID INT                    
AS                      
 BEGIN         
  SET NOCOUNT ON     
   IF(@FORMID = 1)            
      BEGIN       
		UPDATE EMPLOYEE SET SERIALNO = 0
		FROM EMPLOYEE E                    
		INNER JOIN DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID                    
		WHERE D.BRANCHID = @BRANCHID AND CODE <> -1        
      END  
    ELSE   
      BEGIN  
  UPDATE EMPLOYEE SET SERIALNO = 0             
     FROM NONEMPLOYEE E                    
     INNER JOIN DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID                    
     WHERE D.BRANCHID = @BRANCHID AND CODE <> -1                
      END  
   SET NOCOUNT OFF                      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEDEDUCTEESTATUS')
DROP PROCEDURE USP_TDS_UPDATEDEDUCTEESTATUS
GO
CREATE PROCEDURE [USP_TDS_UPDATEDEDUCTEESTATUS]        
@DEDUCTEEID INT = NULL,      
@BRANCHID INT = NULL,      
@USERID INT,        
@ISEMPLOYEE BIT,        
@AUDITTYPE INT,        
@AUDITDATE DATETIME,        
@AUDITREMARKS VARCHAR(100)        
AS        
  BEGIN        
 DECLARE @AUDITID INT;                      
 SET @AUDITID =-1;        
   IF(@AUDITREMARKS = '')        
     BEGIN        
  IF(@DEDUCTEEID IS NOT NULL)    
          BEGIN     
   SELECT @AUDITREMARKS = CAST(BRANCHID AS VARCHAR) + '^'+     
      CASE WHEN (@ISEMPLOYEE = 1)       
    THEN '1'        
     ELSE '0'         
      END         
    + '^' + NAME +'^'+PAN FROM DEDUCTEE       
     WHERE DEDUCTEEID = @DEDUCTEEID      
    END     
      END      
   IF(@DEDUCTEEID IS NOT NULL)    
   BEGIN    
     INSERT INTO DEDUCTEEAUDIT(RECORDID, USERID, AUDITTYPE,AUDITDATE, AUDITREMARKS)                      
     VALUES (@DEDUCTEEID, @USERID,@AUDITTYPE,CONVERT(VARCHAR(20),@AUDITDATE,120),@AUDITREMARKS)                      
     SET @AUDITID = SCOPE_IDENTITY();    
   END    
  ELSE    
     BEGIN    
  IF(@ISEMPLOYEE = 1)    
   BEGIN    
    INSERT INTO DEDUCTEEAUDIT(RECORDID, USERID, AUDITTYPE,AUDITDATE, AUDITREMARKS)    
    SELECT D.DEDUCTEEID, @USERID, @AUDITTYPE, @AUDITDATE, (CAST(@BRANCHID AS VARCHAR) + '^'+'1^'+ D.NAME +'^'+ D.PAN) FROM DEDUCTEE D WITH(NOLOCK)    
    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID    
    WHERE D.BRANCHID = @BRANCHID;    
    SET @AUDITID = 1;    
       END    
   ELSE    
    BEGIN    
   INSERT INTO DEDUCTEEAUDIT(RECORDID, USERID, AUDITTYPE,AUDITDATE, AUDITREMARKS)    
   SELECT D.DEDUCTEEID, @USERID, @AUDITTYPE, @AUDITDATE, CAST(@BRANCHID AS VARCHAR) + '^'+'0^'+ D.NAME +'^'+ D.PAN FROM DEDUCTEE D WITH(NOLOCK)    
   INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID    
   WHERE D.BRANCHID = @BRANCHID;    
   SET @AUDITID = 1;    
       END    
    END    
   SELECT @AUDITID;           
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEDEDUCTION')
DROP PROCEDURE USP_TDS_UPDATEDEDUCTION
GO
CREATE PROCEDURE [USP_TDS_UPDATEDEDUCTION]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTIONSLNO INT,
	@DEDUCTIONID INT
AS
	BEGIN
		UPDATE CORRDEDUCTIONDETAIL
		SET    MATCHEDID = CASE WHEN @DEDUCTIONID = 0 THEN NULL ELSE @DEDUCTIONID END
		WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DEDUCTIONSERIALNO = @DEDUCTIONSLNO AND CORRECTIONSTATUS <> 1 ;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEDEDUCTIONDETAIL')
DROP PROCEDURE USP_TDS_UPDATEDEDUCTIONDETAIL
GO
CREATE PROCEDURE [USP_TDS_UPDATEDEDUCTIONDETAIL]  
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT,
@SECTIONID INT,  
@DEDUCTIONSERIALNO INT,  
@PAYMENTMADE NUMERIC(13,2),  
@PAYMENTDATE SMALLDATETIME,  
@INCOMETAX NUMERIC(13,2) = NULL,  
@INCOMETAXRATE NUMERIC(4,2) = NULL,  
@CESS NUMERIC(13,2) = NULL,  
@CESSRATE NUMERIC(13,2) = NULL,  
@SURCHARGE NUMERIC(13,2) = NULL,  
@SURCHARGERATE NUMERIC(13,2) = NULL,  
@DEDUCTEDDATE SMALLDATETIME = NULL,  
@NONDEDREASON INT,
@CERTNO VARCHAR(25) = NULL,
@TDSRATEASPER CHAR(1) = NULL,
@ACKNO VARCHAR(15) = NULL,
@REMITTANCEID INT = NULL,
@COUNTRYID INT = NULL
AS  
  BEGIN  
	   UPDATE DEDUCTIONDETAIL   
	   SET PAYMENTMADE = @PAYMENTMADE,ORGPAYMENTMADE = @PAYMENTMADE,  
	   PAYMENTDATE = @PAYMENTDATE,SECTIONID=@SECTIONID,ORGINCOMETAX = @INCOMETAX,ORGSURCHARGE = @SURCHARGE,  
	   ORGEDUCATIONCESS = @CESS,CERTNO = @CERTNO, TDSRATEASPER = @TDSRATEASPER, ACKNO= @ACKNO, REMITTANCEID = @REMITTANCEID, 
	   INCOMETAX = @INCOMETAX,INCOMETAXRATE = @INCOMETAXRATE,  COUNTRYID= @COUNTRYID,
	   EDUCATIONCESSRATE = @CESSRATE,EDUCATIONCESS = @CESS,    
	   SURCHARGE = @SURCHARGE, @SURCHARGERATE = @SURCHARGE,              
	   TOTALDEDUCTED = (ISNULL(@INCOMETAX,0) +  ISNULL(@SURCHARGE,0) +  ISNULL(@CESS,0)),  
	   TAXRATE = (ISNULL(@INCOMETAXRATE,0) +  ISNULL(@CESSRATE,0) + ISNULL(@SURCHARGERATE,0)),  
	   DEDUCTEDDATE = @DEDUCTEDDATE,NONDEDREASON=@NONDEDREASON  
	   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER AND SERIALNO=@DEDUCTIONSERIALNO        
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateDeductionEReturnIDInBulk')
DROP PROCEDURE USP_TDS_UpdateDeductionEReturnIDInBulk
GO
CREATE PROCEDURE [dbo].[USP_TDS_UpdateDeductionEReturnIDInBulk] 
 @BRANCHID INT, 
 @FORMID INT, 
 @QUARTER INT,
 @ISEXCLUDE BIT
AS
BEGIN
	IF( @ISEXCLUDE=0) 
	BEGIN 
		SELECT ROW_NUMBER() OVER (PARTITION BY CD.CHALLANID ORDER BY CD.CHALLANID,DCL.DEDCHALINKID) RNUM,CD.CHALLANID, 
		DD.DEDUCTIONID,CD.ERETURNID AS CHAERETURNID,DCL.DEDCHALINKID  
		INTO #ERETURNID1 
		FROM CHALLANDETAIL CD 
			INNER JOIN DEDCHALINK DCL ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID 
			INNER JOIN DEDUCTIONDETAIL DD ON DCL.DEDUCTIONID=DD.DEDUCTIONID AND DCL.BRANCHID=DD.BRANCHID 
			INNER JOIN DEDUCTEE D ON D.DEDUCTEEID=DD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID 
		WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND DD.QUARTER=@QUARTER 
		UPDATE DEDUCTIONDETAIL SET ERETURNID=ID.RNUM
		FROM DEDUCTIONDETAIL DD 
			INNER JOIN #ERETURNID1 ID ON DD.DEDUCTIONID=ID.DEDUCTIONID 
		DROP TABLE #ERETURNID1 
	END 
	ELSE 
	BEGIN 
		SELECT ROW_NUMBER() OVER (PARTITION BY CD.CHALLANID ORDER BY CD.CHALLANID,DCL.DEDCHALINKID) RNUM,CD.CHALLANID, 
		DD.DEDUCTIONID,CD.ERETURNID AS CHAERETURNID,DCL.DEDCHALINKID 
		INTO #ERETURNID2 
		FROM CHALLANDETAIL CD 
			INNER JOIN DEDCHALINK DCL ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID 
			INNER JOIN DEDUCTIONDETAIL DD ON DCL.DEDUCTIONID=DD.DEDUCTIONID AND DCL.BRANCHID=DD.BRANCHID 
			INNER JOIN DEDUCTEE D ON D.DEDUCTEEID=DD.DEDUCTEEID AND D.BRANCHID=DD.BRANCHID 
		WHERE CD.BRANCHID=@BRANCHID AND CD.FORMID=@FORMID AND DD.QUARTER=@QUARTER AND ((ISNULL(D.ISEXCLUDED,0) <> 1) OR (ISNULL(D.ISEXCLUDED,0)= 1 AND DD.NONDEDREASON=3))   
		UPDATE DEDUCTIONDETAIL SET ERETURNID=ID.RNUM
		FROM DEDUCTIONDETAIL DD 
			INNER JOIN #ERETURNID2 ID ON DD.DEDUCTIONID=ID.DEDUCTIONID
		DROP TABLE #ERETURNID2 
	END
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEDEDUCTIONSTATUS')
DROP PROCEDURE USP_TDS_UPDATEDEDUCTIONSTATUS
GO
CREATE PROCEDURE [dbo].[USP_TDS_UPDATEDEDUCTIONSTATUS]  
@BRANCHID INT,  
@FORMID INT,  
@USERID INT,                        
@TRANSSTATUS INT,                       
@AUDITTYPE INT,                
@AUDITDATE DATETIME,                       
@AUDITREMARKS VARCHAR(500)  
AS  
  BEGIN 
  SELECT * INTO #DEDDETAIL 
	FROM DEDUCTIONDETAIL WITH(NOLOCK)
	WHERE BRANCHID=@BRANCHID
   SELECT * INTO #DEDMST FROM DEDUCTEE WITH(NOLOCK)
    WHERE BRANCHID=@BRANCHID	 
   DECLARE @FORMIDS VARCHAR(10);  
   SELECT @FORMIDS = CASE WHEN @FORMID = -1 THEN '2,3' ELSE CAST(@FORMID AS VARCHAR) END  
   BEGIN TRY   
	   INSERT INTO DEDUCTIONDETAILAUDIT(RECORDID, USERID, AUDITTYPE,TRANSSTATUS, AUDITDATE, AUDITREMARKS)               
	   SELECT DEDUCTIONID, @USERID, @AUDITTYPE, @TRANSSTATUS, @AUDITDATE,   
	   (CAST(C.BRANCHCODE AS VARCHAR) + '^' + CAST(DR.TAN AS VARCHAR) + '^'+ CAST(CB.BRANCHNAME AS VARCHAR)+'^'+ CASE WHEN @AUDITTYPE = 1 THEN 'Addition' WHEN @AUDITTYPE = 2 THEN 'Modification' ELSE 'Deletion' END +'^' + CONVERT(VARCHAR, @AUDITDATE, 103) +'^' +               
      CAST(U.USERNAME AS VARCHAR) + '^'+ CAST(DD.SERIALNO AS VARCHAR) + '^'+ CAST(ISNULL(DD.ADDITIONALFIELD1,'') AS VARCHAR) + '^' + CAST(D.NAME AS VARCHAR) + '^'+ CAST(D.PAN AS VARCHAR) + '^' + CASE WHEN DD.FORMID = 1 THEN 'Form24' WHEN DD.FORMID = 2 THEN 'Form26' ELSE 'Form27' END + '^' + CAST(TS.SECTIONNAME AS VARCHAR) + '^' +
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(TS.SECTIONNAME AS VARCHAR) END + '^' + CAST(DD.PAYMENTMADE AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.PAYMENTMADE AS VARCHAR) END + '^' + CAST(DD.TAXRATE AS VARCHAR) + '^' + 
      CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TAXRATE AS VARCHAR) END + '^' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '^' + CASE WHEN @TRANSSTATUS = 5 THEN 'Deleted' ELSE CAST(DD.TOTALDEDUCTED AS VARCHAR) END + '^')AS AUDITREMARKS   
	   FROM #DEDDETAIL DD  
	   INNER JOIN #DEDMST D ON DD.DEDUCTEEID = D.DEDUCTEEID 
	   INNER JOIN COMPANYBRANCH C WITH(NOLOCK) ON DD.BRANCHID = C.BRANCHID
      LEFT JOIN COMPANYBRANCH CB WITH(NOLOCK) ON C.PARENTBRANCHID = CB.BRANCHID
      INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON DD.BRANCHID = BD.BRANCHID AND BD.QUARTER = DD.QUARTER
      INNER JOIN DEDUCTOR DR WITH(NOLOCK) ON DR.DEDUCTORID = BD.DEDUCTORID
      INNER JOIN USERMASTER U WITH(NOLOCK) ON U.USERID = @USERID 
	  INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID
	   WHERE DD.BRANCHID = @BRANCHID AND FORMID IN (SELECT * FROM  dbo.UDF_TDS_SplitString(@FORMIDS,','))       
	   SELECT 1;
	 END TRY
	 BEGIN CATCH
		SELECT 0;
	 END CATCH
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateDeductorFY')
DROP PROCEDURE USP_TDS_UpdateDeductorFY
GO
CREATE PROCEDURE USP_TDS_UpdateDeductorFY
@DEDUCTORID INT,
@FINYEAR INT
AS
BEGIN
	UPDATE DEDUCTOR SET FINANCIALYEAR = @FINYEAR WHERE DEDUCTORID = @DEDUCTORID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEDUMMYRECORDS')
DROP PROCEDURE USP_TDS_UPDATEDUMMYRECORDS
GO
CREATE PROCEDURE [USP_TDS_UPDATEDUMMYRECORDS]
AS
BEGIN
 DECLARE @VAL VARCHAR(30)
 SET @VAL='';
 SET NOCOUNT ON
 BEGIN TRANSACTION
  BEGIN TRY
    SET @VAL='SUCCESSFULLY UPDATED.';
    INSERT INTO NONEMPLOYEE (SERIALNO, DEDUCTEEID, DEDUCTEECODE, ISAPPLICABLE26, ISAPPLICABLE27, ISTRANSPORTER)
    SELECT 0 AS SERIALNO, DEDUCTEEID,CASE WHEN SUBSTRING(PAN,4, 1) = 'C' THEN 1 ELSE 2 END AS DEDUCTEECODE ,1 AS ISAPPLICABLE26,
          1 AS ISAPPLICABLE27,0 AS ISTRANSPORTER FROM DEDUCTEE WHERE DEDUCTEEID NOT IN
     (
      SELECT DISTINCT D.DEDUCTEEID FROM NONEMPLOYEE DD WITH(NOLOCK)
      INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
      UNION ALL
      SELECT DISTINCT D.DEDUCTEEID FROM EMPLOYEE DD WITH(NOLOCK)
      INNER JOIN DEDUCTEE D WITH(NOLOCK) ON DD.DEDUCTEEID = D.DEDUCTEEID
     )
   SELECT MAX(D.DEDUCTEEID) DEDUCTEEID , RTRIM(LTRIM(D.NAME)) AS NAME, D.PAN
   INTO #DEDUCTEE
   FROM DEDUCTEE D WITH(NOLOCK)
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
   INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
   WHERE DD.FORMID IN (2,3)
   GROUP BY RTRIM(LTRIM(D.NAME)), D.PAN
   SELECT DD.DEDUCTIONID , D.NAME, D.PAN, D.DEDUCTEEID,D.REFERENCENO
   INTO #DEDUCTION
   FROM DEDUCTEE D WITH(NOLOCK)
   INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
   INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID
   WHERE DD.FORMID IN (2,3)
   UPDATE #DEDUCTION SET DEDUCTEEID = D.DEDUCTEEID
   FROM #DEDUCTION DD
   INNER JOIN #DEDUCTEE D ON DD.NAME = D.NAME AND DD.PAN = D.PAN
   UPDATE DEDUCTIONDETAIL SET DEDUCTEEID = D.DEDUCTEEID,ADDITIONALFIELD1=D.REFERENCENO
   FROM DEDUCTIONDETAIL DD
   INNER JOIN #DEDUCTION D ON D.DEDUCTIONID = DD.DEDUCTIONID
   WHERE DD.FORMID IN(2,3) AND DD.SECTIONID IN (5,17) AND DD.ENTRYTYPE = 4
   SELECT DEDUCTEEID
   INTO #NONEMPLOYEE
   FROM NONEMPLOYEE WITH(NOLOCK) WHERE DEDUCTEEID NOT IN (SELECT DISTINCT DEDUCTEEID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE FORMID IN (2,3)
               UNION
               SELECT DEDUCTEEID FROM EMPLOYEE)
   DELETE FROM NONEMPLOYEE
   WHERE NONEMPLOYEEID NOT IN
   (
    SELECT NE.NONEMPLOYEEID
    FROM NONEMPLOYEE NE WITH(NOLOCK)
    INNER JOIN
    (
     SELECT MAX(NONEMPLOYEEID)NONEMPLOYEEID, DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK)
     GROUP BY DEDUCTEEID
     HAVING COUNT(DEDUCTEEID) > 1
     UNION ALL
     SELECT MAX(NONEMPLOYEEID)NONEMPLOYEEID, DEDUCTEEID FROM NONEMPLOYEE WITH(NOLOCK)
     GROUP BY DEDUCTEEID
     HAVING COUNT(DEDUCTEEID) = 1
    )N ON NE.DEDUCTEEID = N.DEDUCTEEID AND N.NONEMPLOYEEID = NE.NONEMPLOYEEID
    )
   UPDATE NONEMPLOYEE SET SERIALNO = 0;
   UPDATE NONEMPLOYEE SET SERIALNO = N.SERIALNO
   FROM NONEMPLOYEE NE
   INNER JOIN
   (
    SELECT ROW_NUMBER() OVER (PARTITION BY D.BRANCHID ORDER BY BRANCHID) SERIALNO, D.DEDUCTEEID, D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK)
    INNER JOIN NONEMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
   )N
   ON NE.DEDUCTEEID = N.DEDUCTEEID
   DELETE FROM EMPLOYEE
   WHERE EMPLOYEEID NOT IN
   (
    SELECT NE.EMPLOYEEID
    FROM EMPLOYEE NE WITH(NOLOCK)
    INNER JOIN
    (
     SELECT MAX(EMPLOYEEID)EMPLOYEEID, DEDUCTEEID FROM EMPLOYEE WITH(NOLOCK)
     GROUP BY DEDUCTEEID
     HAVING COUNT(DEDUCTEEID) > 1
     UNION ALL
     SELECT MAX(EMPLOYEEID)EMPLOYEEID, DEDUCTEEID FROM EMPLOYEE WITH(NOLOCK)
     GROUP BY DEDUCTEEID
     HAVING COUNT(DEDUCTEEID) = 1
    )N ON NE.DEDUCTEEID = N.DEDUCTEEID AND N.EMPLOYEEID = NE.EMPLOYEEID
    )
   UPDATE EMPLOYEE SET SERIALNO = 0;
   UPDATE EMPLOYEE SET SERIALNO = N.SERIALNO
   FROM EMPLOYEE NE
   INNER JOIN
   (
    SELECT ROW_NUMBER() OVER (PARTITION BY D.BRANCHID ORDER BY BRANCHID) SERIALNO, D.DEDUCTEEID, D.BRANCHID FROM DEDUCTEE D WITH(NOLOCK)
    INNER JOIN EMPLOYEE NE WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
   )N
   ON NE.DEDUCTEEID = N.DEDUCTEEID
   COMMIT
  END TRY
  BEGIN CATCH
  SET @VAL='ERROR OCCURED WHILE UPDATING.';
  ROLLBACK
  END  CATCH
   PRINT @VAL
   SET NOCOUNT OFF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEMPLOYEE')
DROP PROCEDURE USP_TDS_UPDATEEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_UPDATEEMPLOYEE]       
 @BRANCHID INT,          
 @SERIALNO INT,                       
 @NAME VARCHAR(75),                        
 @PAN VARCHAR(10),          
 @SALUTATION INT,        
 @REFERENCENO VARCHAR(20),          
 @DESIGNATION VARCHAR(20),                        
 @GENDER INT,                        
 @ISSENIORCITIZEN SMALLINT,                        
 @EMPLOYMENTFROM SMALLDATETIME,                        
 @EMPLOYMENTTO SMALLDATETIME,                        
 @FLATDOORBLOCKNO VARCHAR(25),                        
 @NAMEOFBUILDING VARCHAR(25),                        
 @STREETROADNAME VARCHAR(25),                        
 @AREA VARCHAR(25),                        
 @CITY VARCHAR(25),                        
 @STATE TINYINT,                        
 @PINCODE VARCHAR(6),                        
 @PHONE VARCHAR(15),                        
 @EMAIL VARCHAR(75) ,          
 @ISKB BIT,
 @PANREFERENCE VARCHAR(15)                     
 AS          
   BEGIN          
 DECLARE @DEDUCTEEID INT;          
 IF(@ISKB = 1)          
    BEGIN           
  SELECT @DEDUCTEEID = D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)          
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID          
  WHERE D.BRANCHID = @BRANCHID AND D.REFERENCENO = @REFERENCENO          
    END          
 ELSE          
    BEGIN           
  SELECT @DEDUCTEEID = D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)          
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID          
  WHERE D.BRANCHID = @BRANCHID AND E.SERIALNO = @SERIALNO          
    END                   
        UPDATE DEDUCTEE SET NAME=@NAME,PAN=@PAN,ADDRESS1=@FLATDOORBLOCKNO,ADDRESS2=@NAMEOFBUILDING,                        
        ADDRESS3=@STREETROADNAME,ADDRESS4=@AREA,ADDRESS5=@CITY,STATEID=@STATE,PINCODE=@PINCODE,PHONENO=@PHONE,
        EMAILADDRESS=@EMAIL,PANREFERENCE=@PANREFERENCE           
        FROM DEDUCTEE D          
        INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                        
        WHERE D.DEDUCTEEID = @DEDUCTEEID          
  UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYMENTFROM,EMPLOYMENTTO=@EMPLOYMENTTO,GENDER=@GENDER,          
  ISSENIORCITIZEN=@ISSENIORCITIZEN                         
  WHERE DEDUCTEEID=@DEDUCTEEID           
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_UPDATEEMPLOYEEDETAIL
GO
CREATE PROCEDURE [USP_TDS_UPDATEEMPLOYEEDETAIL]    
@EMPFROMDATE SMALLDATETIME,    
@EMPTODATE SMALLDATETIME, 
@ISSENIORCITIZEN INT, 
@GENDER INT,  
@DEDUCTEEID INT    
AS    
 BEGIN    
   UPDATE EMPLOYEE SET EMPLOYMENTFROM = @EMPFROMDATE , EMPLOYMENTTO = @EMPTODATE, ISSENIORCITIZEN=@ISSENIORCITIZEN , GENDER = @GENDER
		WHERE DEDUCTEEID = @DEDUCTEEID    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateEmployeePensioner')
DROP PROCEDURE USP_TDS_UpdateEmployeePensioner
GO
CREATE PROCEDURE [USP_TDS_UpdateEmployeePensioner]     
 @BRANCHID INT,        
 @SERIALNO INT,  
 @ACCOUNTNO VARCHAR(15),  
 @PPONUMBER VARCHAR(15),                     
 @NAME VARCHAR(75),                      
 @PAN VARCHAR(10),        
 @SALUTATION INT,      
 @REFERENCENO VARCHAR(20),        
 @DESIGNATION VARCHAR(20),                      
 @GENDER INT,                      
 @ISSENIORCITIZEN SMALLINT,                      
 @EMPLOYMENTFROM SMALLDATETIME,                      
 @EMPLOYMENTTO SMALLDATETIME,                      
 @FLATDOORBLOCKNO VARCHAR(25),                      
 @NAMEOFBUILDING VARCHAR(25),                      
 @STREETROADNAME VARCHAR(25),                      
 @AREA VARCHAR(25),                      
 @CITY VARCHAR(25),                      
 @STATE TINYINT,                      
 @PINCODE VARCHAR(6),                      
 @PHONE VARCHAR(15),                      
 @EMAIL VARCHAR(75) ,        
 @ISKB BIT,
 @PANREFERENCE VARCHAR(15)                   
 AS        
   BEGIN        
   DECLARE @DEDUCTEEID INT;              
   SELECT @DEDUCTEEID = D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)        
   INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID        
   WHERE D.BRANCHID = @BRANCHID AND D.REFERENCENO = @REFERENCENO        
        UPDATE DEDUCTEE SET NAME=@NAME,PAN=@PAN,ADDRESS1=@FLATDOORBLOCKNO,ADDRESS2=@NAMEOFBUILDING,                      
        ADDRESS3=@STREETROADNAME,ADDRESS4=@AREA,ADDRESS5=@CITY,STATEID=@STATE,PINCODE=@PINCODE,
        PHONENO=@PHONE,EMAILADDRESS=@EMAIL,PANREFERENCE=@PANREFERENCE
        FROM DEDUCTEE D        
        INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID                      
        WHERE D.DEDUCTEEID = @DEDUCTEEID        
   UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYMENTFROM,EMPLOYMENTTO=@EMPLOYMENTTO,GENDER=@GENDER,        
   ISSENIORCITIZEN=@ISSENIORCITIZEN,ACCOUNTNO=@ACCOUNTNO,PPONUMBER=@PPONUMBER                       
   WHERE DEDUCTEEID=@DEDUCTEEID         
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEMPLOYEEREFDETAIL')
DROP PROCEDURE USP_TDS_UPDATEEMPLOYEEREFDETAIL
GO
CREATE PROCEDURE USP_TDS_UPDATEEMPLOYEEREFDETAIL     
@DEDUCTEEID INT,  
@REFERENCENO varchar(20)
AS        
BEGIN           
	UPDATE DEDUCTEE SET REFERENCENO = @REFERENCENO
		WHERE DEDUCTEEID = @DEDUCTEEID               
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEMPLOYEESB')
DROP PROCEDURE USP_TDS_UPDATEEMPLOYEESB
GO
CREATE PROCEDURE [USP_TDS_UPDATEEMPLOYEESB]    
 @BRANCHID INT,   
 @NAME VARCHAR(75),
 @REFERENCENO VARCHAR(20),       
 @DESIGNATION VARCHAR(20),    
 @GENDER INT,    
 @EMPLOYMENTFROM SMALLDATETIME,    
 @EMPLOYMENTTO SMALLDATETIME    
 AS    
   BEGIN    
    DECLARE @DEDUCTEEID INT;    
    SELECT @DEDUCTEEID = D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)    
    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID    
    WHERE D.BRANCHID = @BRANCHID AND D.REFERENCENO = @REFERENCENO
        UPDATE DEDUCTEE SET NAME=@NAME    
        FROM DEDUCTEE D          
        WHERE D.DEDUCTEEID = @DEDUCTEEID    
    UPDATE EMPLOYEE SET DESIGNATION=@DESIGNATION,EMPLOYMENTFROM=@EMPLOYMENTFROM,
									 EMPLOYMENTTO=@EMPLOYMENTTO,GENDER=@GENDER, ISTRANSFERED = 0
    WHERE DEDUCTEEID=@DEDUCTEEID    
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXCELIMPORTSTATUS')
DROP PROCEDURE USP_TDS_UPDATEEXCELIMPORTSTATUS
GO
CREATE PROCEDURE USP_TDS_UPDATEEXCELIMPORTSTATUS        
@BRANCHID INT,        
@QUARTER INT,        
@ISVALID BIT,    
@CURSTATUS INT,  
@IMPORTEDDATE SMALLDATETIME        
AS        
BEGIN        
UPDATE EXCELIMPORTSTATUS SET ISVALID = @ISVALID, 
ISREQACTIVE = 0, QUEUEID = '', CURSTATUS = @CURSTATUS, 
IMPORTEDDATE = @IMPORTEDDATE        
WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXCELRECCOUNT')
DROP PROCEDURE USP_TDS_UPDATEEXCELRECCOUNT
GO
CREATE PROCEDURE USP_TDS_UPDATEEXCELRECCOUNT   
@BRANCHID INT,    
@QUARTER INT,    
@RECCOUNT INT    
AS    
BEGIN    
UPDATE EXCELIMPORTSTATUS SET RECCOUNT = @RECCOUNT    
WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGACKNO')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGACKNO
GO
CREATE PROCEDURE USP_TDS_UPDATEEXISTINGACKNO
(
@BRANCHID INT, 
@FORMID INT, 
@QUARTER INT, 
@ORGNUM VARCHAR(15), 
@ORGFILEDDATE SMALLDATETIME,
@RECEIPTNO VARCHAR(8)
)                
AS              
BEGIN 
	UPDATE ACKNO SET  ORGNUM = @ORGNUM, ORGFILEDDATE = @ORGFILEDDATE, RECEIPTNO = @RECEIPTNO
		WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGDEDUCTEESDETAIL')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGDEDUCTEESDETAIL
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGDEDUCTEESDETAIL]
@BRANCHCODE VARCHAR(6),
@REFERENCENO VARCHAR(20),
@NAME VARCHAR(75),
@PAN VARCHAR(10),
@PANREFERENCE VARCHAR(10),
@ADDRESS1 VARCHAR(25),
@ADDRESS2 VARCHAR(25),
@ADDRESS3 VARCHAR(25),
@ADDRESS4 VARCHAR(25),
@STATEID INT,
@PINCODE VARCHAR(6)
AS
 BEGIN
	UPDATE DEDUCTEE SET NAME = @NAME, PAN = @PAN, PANREFERENCE = @PANREFERENCE,
						ADDRESS1 = @ADDRESS1,ADDRESS2 = @ADDRESS2,ADDRESS3 = @ADDRESS3,
						ADDRESS4 = @ADDRESS4,STATEID = @STATEID,PINCODE = @PINCODE 
	FROM DEDUCTEE D
	INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID
	INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = D.BRANCHID
	WHERE CB.BRANCHCODE = @BRANCHCODE AND REFERENCENO = @REFERENCENO
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGDEDUCTEESF005')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGDEDUCTEESF005
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGDEDUCTEESF005]       
(                
@BRANCHID INT,                
@REFNO VARCHAR(20),                
@NAME VARCHAR(75),                
@PAN VARCHAR(10),              
@PANREFERENCE VARCHAR(10),              
@ADDRESS1 VARCHAR(25),                
@ADDRESS2 VARCHAR(25),                
@ADDRESS3 VARCHAR(25),                
@ADDRESS4 VARCHAR(25),                
@ADDRESS5 VARCHAR(25),                
@PINCODE VARCHAR(6),                
@STATEID INT,          
@CODE TINYINT=1               
)                
AS              
BEGIN            
    DECLARE @DEDUCTEEID INT;          
    SELECT @DEDUCTEEID = DEDUCTEEID FROM DEDUCTEE WITH(NOLOCK)  WHERE BRANCHID=@BRANCHID AND REFERENCENO=@REFNO ;           
    UPDATE DEDUCTEE WITH (ROWLOCK) SET NAME=@NAME,PAN=@PAN,PANREFERENCE = CASE WHEN ISNULL(PANREFERENCE,'')=''THEN @PANREFERENCE ELSE PANREFERENCE END ,
  ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,                
  ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID,CODE=@CODE               
  WHERE DEDUCTEEID = @DEDUCTEEID       
  UPDATE NONEMPLOYEE WITH (ROWLOCK) SET DEDUCTEECODE= @CODE    
   WHERE DEDUCTEEID = @DEDUCTEEID    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateExistingDeducteesF005Others')
DROP PROCEDURE USP_TDS_UpdateExistingDeducteesF005Others
GO
CREATE PROCEDURE [USP_TDS_UpdateExistingDeducteesF005Others]   
(   
@DEDUCTEEID INT,         
@BRANCHID INT,            
@REFNO VARCHAR(20),            
@NAME VARCHAR(75),            
@PAN VARCHAR(10),          
@PANREFERENCE VARCHAR(10),          
@ADDRESS1 VARCHAR(25),            
@ADDRESS2 VARCHAR(25),            
@ADDRESS3 VARCHAR(25),            
@ADDRESS4 VARCHAR(25),            
@ADDRESS5 VARCHAR(25),            
@PINCODE VARCHAR(6),            
@STATEID INT,      
@CODE TINYINT=1           
)            
AS          
BEGIN   
	 UPDATE DEDUCTEE WITH (ROWLOCK) SET NAME=@NAME,PAN=@PAN,PANREFERENCE = CASE WHEN ISNULL(PANREFERENCE,'')=''THEN @PANREFERENCE ELSE PANREFERENCE END,
	 ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,            
	 ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID,CODE=@CODE           
	 WHERE DEDUCTEEID = @DEDUCTEEID   
	 UPDATE NONEMPLOYEE WITH (ROWLOCK) SET DEDUCTEECODE= @CODE
	  WHERE DEDUCTEEID = @DEDUCTEEID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGDEDUCTEESF006')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGDEDUCTEESF006
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGDEDUCTEESF006]         
@NAME VARCHAR(75),
@PAN VARCHAR(10),
@PANREFERENCE VARCHAR(20),
@REFERENCENO VARCHAR(20),
@BRANCHCODE VARCHAR(10),
@DEDUCTEECODE INT
AS
 BEGIN
	UPDATE DEDUCTEE SET NAME = @NAME,PAN = @PAN,PANREFERENCE = @PANREFERENCE
	FROM DEDUCTEE D 
	INNER JOIN NONEMPLOYEE NE ON NE.DEDUCTEEID = D.DEDUCTEEID
	INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = D.BRANCHID
	WHERE REFERENCENO = @REFERENCENO AND CB.BRANCHCODE = @BRANCHCODE 
	UPDATE NONEMPLOYEE SET DEDUCTEECODE = @DEDUCTEECODE
	FROM NONEMPLOYEE NE 
	INNER JOIN DEDUCTEE D ON NE.DEDUCTEEID = D.DEDUCTEEID
	INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = D.BRANCHID
	WHERE REFERENCENO = @REFERENCENO AND CB.BRANCHCODE = @BRANCHCODE
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGDEDUCTEESF007')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGDEDUCTEESF007
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGDEDUCTEESF007]                 
(                  
@DEDUCTEEID INT,                                
@NAME VARCHAR(75),                  
@PAN VARCHAR(10),                
@PANREFERENCE VARCHAR(10),                
@ADDRESS1 VARCHAR(25),                  
@ADDRESS2 VARCHAR(25),                  
@ADDRESS3 VARCHAR(25),                  
@ADDRESS4 VARCHAR(25),                  
@ADDRESS5 VARCHAR(25),                  
@PINCODE VARCHAR(6),                  
@STATEID INT,            
@CODE TINYINT=1                 
)                  
AS                
BEGIN              
	 UPDATE DEDUCTEE SET NAME=@NAME,PAN=@PAN,PANREFERENCE= @PANREFERENCE,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,                  
	 ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID,CODE=@CODE                 
	 WHERE DEDUCTEEID=@DEDUCTEEID ;             
	 --UPDATE NONEMPLOYEE SET DEDUCTEECODE= D.CODE          
	 --FROM NONEMPLOYEE NE          
	 --INNER JOIN DEDUCTEE D ON D.DEDUCTEEID=NE.DEDUCTEEID          
	 -- WHERE D.DEDUCTEEID=@DEDUCTEEID          
	 -- UPDATE DEDUCTEE SET CODE= NULL          
	 -- FROM DEDUCTEE D         
	 -- WHERE D.DEDUCTEEID=@DEDUCTEEID        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGDEDUCTEESF011')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGDEDUCTEESF011
GO
CREATE PROC [DBO].[USP_TDS_UPDATEEXISTINGDEDUCTEESF011]
(                      
@DEDUCTEEID INT,                                    
@NAME VARCHAR(75),                      
@PAN VARCHAR(10),                    
@PANREFERENCE VARCHAR(10),                    
@ADDRESS1 VARCHAR(25),                      
@ADDRESS2 VARCHAR(25),                      
@ADDRESS3 VARCHAR(25),                      
@ADDRESS4 VARCHAR(25),                      
@ADDRESS5 VARCHAR(25),                      
@PINCODE VARCHAR(6),                      
@STATEID INT,                
@EMPLOYMENTFROM DATETIME,  
@EMPLOYMENTTO DATETIME,  
@GENDER BIT,  
@ISSENIORCITIZEN TINYINT,  
@DATEOFBIRTH DATETIME = NULL                   
)                      
AS                    
BEGIN                  
	UPDATE DEDUCTEE SET NAME = @NAME, PAN = @PAN, PANREFERENCE = @PANREFERENCE, ADDRESS1 = @ADDRESS1, ADDRESS2 = @ADDRESS2, 
		ADDRESS3 = @ADDRESS3, ADDRESS4 = @ADDRESS4, ADDRESS5 = @ADDRESS5, PINCODE = @PINCODE, STATEID = @STATEID                     
	WHERE DEDUCTEEID=@DEDUCTEEID ; 
	IF(@DATEOFBIRTH IS NOT NULL)  
		BEGIN    
			UPDATE EMPLOYEE SET EMPLOYMENTFROM = @EMPLOYMENTFROM, EMPLOYMENTTO = @EMPLOYMENTTO, GENDER = @GENDER,
				ISSENIORCITIZEN = @ISSENIORCITIZEN, DATEOFBIRTH = @DATEOFBIRTH 
			WHERE DEDUCTEEID = @DEDUCTEEID ;                    
		END
	ELSE
		BEGIN
			UPDATE EMPLOYEE SET EMPLOYMENTFROM = @EMPLOYMENTFROM, EMPLOYMENTTO = @EMPLOYMENTTO, GENDER = @GENDER,
				ISSENIORCITIZEN = @ISSENIORCITIZEN
			WHERE DEDUCTEEID = @DEDUCTEEID ;   
		END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateExistingDeducteesNOPanUpdate')
DROP PROCEDURE USP_TDS_UpdateExistingDeducteesNOPanUpdate
GO
CREATE PROCEDURE  USP_TDS_UpdateExistingDeducteesNOPanUpdate               
(                  
@DEDUCTEEID INT,                                
@NAME VARCHAR(75),                                  
@ADDRESS1 VARCHAR(25),                  
@ADDRESS2 VARCHAR(25),                  
@ADDRESS3 VARCHAR(25),                  
@ADDRESS4 VARCHAR(25),                  
@ADDRESS5 VARCHAR(25),                  
@PINCODE VARCHAR(6),                  
@STATEID INT,            
@CODE TINYINT=1                 
)                  
AS                
BEGIN              
	 UPDATE DEDUCTEE SET NAME=@NAME,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,                  
	 ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID,CODE=@CODE                 
	 WHERE DEDUCTEEID=@DEDUCTEEID ;                    
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGDEDUCTEESREFNOS')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGDEDUCTEESREFNOS
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGDEDUCTEESREFNOS]
@BRANCHCODE VARCHAR(6),
@NAME VARCHAR(75),
@PAN VARCHAR(10),
@REFERENCENO VARCHAR(20)
AS
 BEGIN
	UPDATE DEDUCTEE SET REFERENCENO = @REFERENCENO
	FROM DEDUCTEE D
	INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID
	INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID = D.BRANCHID
	WHERE CB.BRANCHCODE = @BRANCHCODE AND NAME = @NAME AND PAN = @PAN
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGEMPLOYEEBASEDONNAME')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGEMPLOYEEBASEDONNAME
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGEMPLOYEEBASEDONNAME]
@BRANCHID INT,
@NAME VARCHAR(75),
@PAN VARCHAR(10),
@SERIALNO INT,
@STATUS INT
AS
  BEGIN
 DECLARE @INVALIPAN BIT;
 IF(@PAN IN('PANAPPLIED','PANNOTAVBL', 'PANINVALID'))
  BEGIN
   SET @INVALIPAN = 1;
  END
 ELSE
    BEGIN
  SET @INVALIPAN = 0;
    END
   IF(@INVALIPAN = 0)
     BEGIN
  UPDATE EMPLOYEE SET SERIALNO = @SERIALNO
  FROM EMPLOYEE NE WITH(NOLOCK)
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
  WHERE BRANCHID = @BRANCHID AND PAN = @PAN AND ISNULL(REFERENCENO ,'') = ''
  UPDATE DEDUCTEE SET NAME = @NAME, CODE = -1
  WHERE BRANCHID = @BRANCHID AND PAN = @PAN AND ISNULL(REFERENCENO ,'') = ''
     END
    ELSE
     BEGIN
   UPDATE EMPLOYEE SET SERIALNO = @SERIALNO
   FROM EMPLOYEE NE WITH(NOLOCK)
   INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
   WHERE BRANCHID = @BRANCHID AND NAME = @NAME AND PAN = @PAN AND ISNULL(REFERENCENO ,'') = ''
     END
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGEMPLOYEEBASEDONREFNO')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGEMPLOYEEBASEDONREFNO
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGEMPLOYEEBASEDONREFNO]
@BRANCHID INT,
@REFNO VARCHAR(20),
@SERIALNO INT
AS
  BEGIN
		UPDATE EMPLOYEE SET SERIALNO = @SERIALNO
	    FROM EMPLOYEE NE
	    INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = NE.DEDUCTEEID
	    WHERE BRANCHID = @BRANCHID AND REFERENCENO = @REFNO
	    UPDATE DEDUCTEE SET CODE = -1
		WHERE BRANCHID = @BRANCHID AND REFERENCENO = @REFNO
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGEMPLOYEEDETAILS')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGEMPLOYEEDETAILS
GO
CREATE PROCEDURE USP_TDS_UPDATEEXISTINGEMPLOYEEDETAILS  
@BRANCHID INT,
@DEDUCTEEID INT,
@NAME VARCHAR(75),
@PAN VARCHAR(10),
@ADDRESS1 VARCHAR(25),
@ADDRESS2 VARCHAR(25),
@ADDRESS3 VARCHAR(25),
@ADDRESS4 VARCHAR(25),
@ADDRESS5 VARCHAR(25),
@PINCODE VARCHAR(6),
@STATEID INT,
@EMPFROMDATE SMALLDATETIME,
@EMPTODATE SMALLDATETIME,
@GENDER INT,
@SENIORCITIZEN INT
AS  
 BEGIN  
	UPDATE DEDUCTEE SET NAME = @NAME, PAN = @PAN,--PANREFERENCENO = '',
			ADDRESS1 = @ADDRESS1, ADDRESS2 = @ADDRESS2, ADDRESS3 = @ADDRESS3,
			ADDRESS4 = @ADDRESS4, ADDRESS5 = @ADDRESS5, STATEID = @STATEID,
			PINCODE = @PINCODE
	 FROM DEDUCTEE D
	 WHERE D.BRANCHID = @BRANCHID AND D.DEDUCTEEID = @DEDUCTEEID  
	 UPDATE EMPLOYEE SET EMPLOYMENTFROM = @EMPFROMDATE, EMPLOYMENTTO = @EMPTODATE,
				GENDER = @GENDER, ISSENIORCITIZEN = @SENIORCITIZEN
				WHERE DEDUCTEEID = @DEDUCTEEID  
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGEMPLOYEESNOPANUPDATE')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGEMPLOYEESNOPANUPDATE
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGEMPLOYEESNOPANUPDATE]                    
@DEDUCTEEID INT,                                    
@NAME VARCHAR(75),                                                             
@ADDRESS1 VARCHAR(25),                      
@ADDRESS2 VARCHAR(25),                      
@ADDRESS3 VARCHAR(25),                      
@ADDRESS4 VARCHAR(25),                      
@ADDRESS5 VARCHAR(25),                      
@PINCODE VARCHAR(6),                      
@STATEID INT,                
@EMPLOYMENTFROM DATETIME,  
@EMPLOYMENTTO DATETIME,  
@GENDER BIT,  
@ISSENIORCITIZEN TINYINT                                       
AS                    
	BEGIN                  
		UPDATE DEDUCTEE SET NAME=@NAME,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,                      
		ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID                     
		WHERE DEDUCTEEID=@DEDUCTEEID ;       
		UPDATE EMPLOYEE SET EMPLOYMENTFROM = @EMPLOYMENTFROM,EMPLOYMENTTO = @EMPLOYMENTTO,GENDER = @GENDER,ISSENIORCITIZEN = @ISSENIORCITIZEN  
		WHERE DEDUCTEEID = @DEDUCTEEID ;                    
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGNONEMPLOYEEBASEDONNAME')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGNONEMPLOYEEBASEDONNAME
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGNONEMPLOYEEBASEDONNAME]
@BRANCHID INT,
@NAME VARCHAR(75),
@PAN VARCHAR(10),
@SERIALNO INT,
@STATUS INT
AS
  BEGIN
 DECLARE @NONEMPLOYEEID INT;
 SELECT @NONEMPLOYEEID = MIN(NONEMPLOYEEID) FROM NONEMPLOYEE NE WITH(NOLOCK)
    INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = NE.DEDUCTEEID
    WHERE BRANCHID = @BRANCHID AND NAME = @NAME AND PAN = @PAN AND ISNULL(REFERENCENO ,'') = '' AND ISNULL(STATUS,0) = 0
   UPDATE NONEMPLOYEE SET SERIALNO = @SERIALNO, STATUS = @STATUS
   WHERE NONEMPLOYEEID = @NONEMPLOYEEID
   UPDATE DEDUCTEE SET NAME = @NAME, CODE = -1
   WHERE BRANCHID = @BRANCHID AND NAME = @NAME AND PAN = @PAN AND ISNULL(REFERENCENO ,'') = ''
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGNONEMPLOYEEBASEDONREFNO')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGNONEMPLOYEEBASEDONREFNO
GO
CREATE PROCEDURE [USP_TDS_UPDATEEXISTINGNONEMPLOYEEBASEDONREFNO]
@BRANCHID INT,
@REFNO VARCHAR(20),
@SERIALNO INT
AS
  BEGIN
   UPDATE NONEMPLOYEE SET SERIALNO = @SERIALNO
   FROM NONEMPLOYEE NE
   INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = NE.DEDUCTEEID
   WHERE BRANCHID = @BRANCHID AND REFERENCENO = @REFNO
   UPDATE DEDUCTEE SET CODE = -1
   WHERE BRANCHID = @BRANCHID AND REFERENCENO = @REFNO
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEEXISTINGSALARY')
DROP PROCEDURE USP_TDS_UPDATEEXISTINGSALARY
GO
CREATE PROCEDURE  USP_TDS_UPDATEEXISTINGSALARY  
@SALDATA NTEXT            
AS             
 DECLARE @HDOC INT               
 EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT,@SALDATA               
--THIS CODE UPDATES OLD DATA.      
 UPDATE SALDETAIL             
 SET GROSSAMT1 = XMLSALARY.GROSSAMOUNT1,  
  EXEMPTAMT = XMLSALARY.EXEMPTAMOUNT,
  NETAMT = CASE WHEN  XMLSALARY.GROSSAMOUNT1 + SALDETAIL.GROSSAMT2 < XMLSALARY.EXEMPTAMOUNT 
						 THEN XMLSALARY.GROSSAMOUNT1 + SALDETAIL.GROSSAMT2 - ISNULL(SALDETAIL.RECOVERYAMT,0) 
					ELSE XMLSALARY.GROSSAMOUNT1 + SALDETAIL.GROSSAMT2 - (XMLSALARY.EXEMPTAMOUNT + ISNULL(SALDETAIL.RECOVERYAMT,0))
				END
 FROM OPENXML(@HDOC, 'NEWDATASET/SALARY')               
       WITH (SALDETAILID INT,GROSSAMOUNT1 NUMERIC(13,2), EXEMPTAMOUNT NUMERIC(13,2)) XMLSALARY  
WHERE SALDETAIL.SALDETAILID = XMLSALARY.SALDETAILID  
EXEC SP_XML_REMOVEDOCUMENT @HDOC
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEFIELDSINSALARYDETAIL')
DROP PROCEDURE USP_TDS_UPDATEFIELDSINSALARYDETAIL
GO
CREATE PROCEDURE USP_TDS_UPDATEFIELDSINSALARYDETAIL  
 @DEDUCTEEID INT,  
 @BRANCHID INT,  
 @TOTALTDS INT,  
 @NETTAXPAYABLE INT,  
 @TAXPAYABLE DECIMAL(10,2),  
 @EDUCESSDEDUCTED INT,  
 @TDSSURCHARGEDEDUCTED INT,  
 @TDSITDEDUCTED INT  
AS  
BEGIN  
 UPDATE SALARYDETAIL SET TOTALTDS=@TOTALTDS,NETTAXPAYABLE=@NETTAXPAYABLE,      
  TAXPAYABLE=@TAXPAYABLE,EDUCESSDEDUCTED=@EDUCESSDEDUCTED,      
  TDSSURCHARGEDEDUCTED=@TDSSURCHARGEDEDUCTED,TDSITDEDUCTED=@TDSITDEDUCTED        
  WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID;  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateFinalSalaryDetails')
DROP PROCEDURE USP_TDS_UpdateFinalSalaryDetails
GO
CREATE PROCEDURE USP_TDS_UpdateFinalSalaryDetails 
@MONTHID INT
AS                    
  BEGIN          
		 SET NOCOUNT ON      
		 SELECT MONTHID,BRANCHID,COMID INTO #EMPWORKMONTH FROM EMPWORKMONTH WITH(NOLOCK) 
		 WHERE MONTHID=@MONTHID		 
         SELECT LTC.* 
         INTO #LINKTOTC
         FROM LINKTOTC LTC WITH(NOLOCK)
         INNER JOIN #EMPWORKMONTH EMPW 
         ON EMPW.COMID = LTC.COMID
         SELECT E.* 
         INTO #EMPLOYEE
         FROM EMPLOYEE E WITH(NOLOCK)
         INNER JOIN #LINKTOTC LTC
         ON LTC.EMPLOYEEID = E.EMPLOYEEID
         SELECT D.* INTO #DEDUCTEE
         FROM DEDUCTEE D WITH(NOLOCK)
         INNER JOIN #EMPLOYEE E
         ON E.DEDUCTEEID = D.DEDUCTEEID
         UPDATE SALDETAIL SET RECOVERYAMT = 0 WHERE RECOVERYAMT IS NULL        
		 SELECT DISTINCT SD.COMID, EM.BRANCHID 
		 INTO #COMID 
		 FROM SALDETAIL SD WITH(NOLOCK)
		 INNER JOIN #EMPWORKMONTH EM WITH(NOLOCK) ON EM.COMID = SD.COMID  AND EM.MONTHID = SD.MONTHID
		 WHERE EM.MONTHID = @MONTHID
		 SELECT SD.* INTO #SALDETAIL FROM SALDETAIL SD WITH(NOLOCK)
		 INNER JOIN #COMID C
		 ON SD.COMID = C.COMID
		 SELECT SUM(NETAMT)NETAMT,DEDUCTEEID,INCLUDEUS10,BRANCHID
		 INTO #BASIC
		 FROM
        ( 
			SELECT D.DEDUCTEEID,D.BRANCHID, INCLUDEUS10, CASE WHEN EARNING = 0 THEN -1 * (SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) + ISNULL(GROSSAMT3,0) - ISNULL(SD.EXEMPTAMT,0) - ISNULL(SD.RECOVERYAMT,0)))  
				ELSE SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0) + ISNULL(GROSSAMT3,0) - ISNULL(SD.RECOVERYAMT,0) - ISNULL(SD.EXEMPTAMT,0)) END AS NETAMT
			 FROM #SALDETAIL SD
			INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SH.SALARYHEADID = SD.SALARYHEADID    
			INNER JOIN #LINKTOTC LC ON LC.COMID = SD.COMID 
			INNER JOIN #EMPLOYEE  E ON E.EMPLOYEEID = LC.EMPLOYEEID 
			INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID AND LC.BRANCHID = D.BRANCHID
			INNER JOIN #EMPWORKMONTH EM ON EM.BRANCHID = LC.BRANCHID AND EM.COMID = LC.COMID AND EM.MONTHID = SD.MONTHID
			--INNER JOIN #COMID C ON C.COMID = SD.COMID AND C.BRANCHID = L.BRANCHID
			WHERE ISNULL(SH.C80CID,-1) <=0 AND ISNULL(INCLUDEINTAX,0) = 1  
			GROUP BY EARNING, D.DEDUCTEEID,INCLUDEUS10,D.BRANCHID
		)T 
		GROUP BY DEDUCTEEID,INCLUDEUS10,BRANCHID		
		SELECT SUM(TAXABLEAMT)TAXABLEAMT,DEDUCTEEID,BRANCHID
		 INTO #TAXABLEPERQ
		 FROM
        ( 
			SELECT D.DEDUCTEEID,D.BRANCHID, SUM(SD.TAXABLEAMT)TAXABLEAMT
			 FROM TAXABLEPERQUISITE SD  WITH(NOLOCK)
			--INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SH.SALARYHEADID = SD.SALARYHEADID    
			INNER JOIN #LINKTOTC LC ON LC.COMID = SD.COMID 
			INNER JOIN #EMPLOYEE  E ON E.EMPLOYEEID = LC.EMPLOYEEID 
			INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID AND LC.BRANCHID = D.BRANCHID
			INNER JOIN EMPWORKMONTH EM ON EM.BRANCHID = LC.BRANCHID AND EM.COMID = LC.COMID AND EM.MONTHID = SD.MONTHID
			--INNER JOIN #COMID C ON C.COMID = SD.COMID AND C.BRANCHID = L.BRANCHID			
			GROUP BY D.DEDUCTEEID,D.BRANCHID
		)T 
		GROUP BY DEDUCTEEID,BRANCHID		
		SELECT DEDUCTEEID, BRANCHID, [0] AS BASIC, [1] AS INCLUDEUS10 
		INTO #SALARY
		FROM 
		(
			SELECT * FROM #BASIC
		) AS S
		PIVOT
		(
			SUM(NETAMT)
			FOR INCLUDEUS10 IN ([0],[1])
		)AS S
	    SELECT SALARYSECTIONID, SUM(ISNULL(GROSSAMT1,0) + ISNULL(GROSSAMT2,0)) - SUM(ISNULL(RECOVERYAMT,0)) AS NETAMT ,D.DEDUCTEEID, D.BRANCHID
	    INTO #SEC16
	    FROM SECTION16DET SD WITH(NOLOCK)
		INNER JOIN #LINKTOTC LC ON LC.COMID = SD.COMID  
		INNER JOIN #EMPLOYEE  E ON E.EMPLOYEEID = LC.EMPLOYEEID 
		INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID AND LC.BRANCHID = D.BRANCHID
		INNER JOIN EMPWORKMONTH EM ON EM.BRANCHID = LC.BRANCHID AND EM.COMID = LC.COMID AND EM.MONTHID = SD.MONTHID
		--INNER JOIN #COMID C ON C.COMID = SD.COMID  AND C.BRANCHID = L.BRANCHID
		GROUP BY SALARYSECTIONID,D.DEDUCTEEID,D.BRANCHID 		
		SELECT DEDUCTEEID,BRANCHID, [1] AS ET, [2] AS PT 
		INTO #SECTION16
		FROM 
		(
			SELECT *
			FROM #SEC16
		) as s
		PIVOT
		(
			SUM(NETAMT)
			FOR SALARYSECTIONID IN ([1],[2])
		)AS S	
	   SELECT D.DEDUCTEEID ,SUM(ISNULL(HOUSEPROL,0)) + SUM(ISNULL(HOUSEPROS,0)) AS HOUSEPROPERTY,SUM(ISNULL(INTERESTONSB,0))INTERESTONSB,
					SUM(ISNULL(LGAIN,0))+SUM(ISNULL(SGAIN,0)) GAIN, SUM(ISNULL(AMOUNT,0)) - SUM(ISNULL(EXEMPTAMT,0)) AS INCOMEFROMOTHERSOURCES 
	   INTO #OTHER  
	   FROM OTHERINCOME O WITH(NOLOCK)
	   LEFT JOIN OTHERINCOMESOURCES OS WITH(NOLOCK) ON OS.OTHERINCOMEID = O.OTHERINCOMEID  
	   INNER JOIN #LINKTOTC L ON L.COMID = O.COMID  
	   INNER JOIN #EMPLOYEE  E ON E.EMPLOYEEID = L.EMPLOYEEID 
	   INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID AND L.BRANCHID = D.BRANCHID
	   --INNER JOIN #COMID C ON C.COMID = O.COMID
	   GROUP BY D.DEDUCTEEID
		 UPDATE SALARYDETAIL SET BASICSALARY = ISNULL(S.BASIC,0), TAXABLEALLOWANCE =ISNULL(S.INCLUDEUS10,0), 
				TAXABLEPERQUISITES = ISNULL(T.TAXABLEAMT,0),
				VALUEOFPERQUISITES = ISNULL(T.TAXABLEAMT,0),
				GROSSSALARY = ISNULL(T.TAXABLEAMT,0) + ISNULL(S.BASIC,0) + ISNULL(S.INCLUDEUS10,0),--+ ISNULL(S16.ET,0) + ISNULL(S16.PT,0),  
				 DEDUCTIONUS16 = ISNULL(S16.ET,0) + ISNULL(S16.PT,0),  
				 INCOMEFROMSALARIES = ISNULL(S.BASIC,0) + ISNULL(S.INCLUDEUS10,0) + ISNULL(T.TAXABLEAMT,0) - (ISNULL(S16.ET,0) + ISNULL(S16.PT,0)),
			-- SALARYFROMPREVEMP = 0,--ISNULL(I.INCOMEFROMSALARIES,0),  
				INCOMEFROMHOUSEPROPERTY= ISNULL(O.HOUSEPROPERTY,0),  
				CAPITALGAINS= ISNULL(O.GAIN,0),  
				OTHERINCOME = ISNULL(O.HOUSEPROPERTY,0) + ISNULL(O.GAIN,0) + ISNULL(O.INTERESTONSB,0) + ISNULL(O.INCOMEFROMOTHERSOURCES,0),  
				INCOMEFROMOTHERSOURCES = ISNULL(O.INCOMEFROMOTHERSOURCES,0) ,    
			-- INCOMEFROMSALARIES = ISNULL(S.BASIC,0) + ISNULL(S.INCLUDEUS10,0) + ISNULL(SD.TAXABLEPERQUISITES,0) - (ISNULL(S16.ET,0) + ISNULL(S16.PT,0)),      
				GROSSTOTALINCOME = ISNULL(O.HOUSEPROPERTY,0) + ISNULL(O.GAIN,0) + ISNULL(O.INTERESTONSB,0) + ISNULL(O.INCOMEFROMOTHERSOURCES,0) + ISNULL(S.BASIC,0) + ISNULL(S.INCLUDEUS10,0) + ISNULL(T.TAXABLEAMT,0) - (ISNULL(S16.ET,0) + ISNULL(S16.PT,0)),        
				TOTALTAXABLEINCOME = ISNULL(O.HOUSEPROPERTY,0) + ISNULL(O.GAIN,0) + ISNULL(O.INTERESTONSB,0) + ISNULL(O.INCOMEFROMOTHERSOURCES,0) + ISNULL(S.BASIC,0) + ISNULL(S.INCLUDEUS10,0) + ISNULL(T.TAXABLEAMT,0) - (ISNULL(S16.ET,0) + ISNULL(S16.PT,0)) - ISNULL(TOTALDEDUNDERCHAPTERVIA,0)       
		 FROM SALARYDETAIL SD WITH(NOLOCK)
		 INNER JOIN #SALARY S ON S.DEDUCTEEID = SD.DEDUCTEEID
		 LEFT JOIN #TAXABLEPERQ T ON T.DEDUCTEEID = SD.DEDUCTEEID 
		 LEFT JOIN #SECTION16 S16 ON S16.DEDUCTEEID = SD.DEDUCTEEID 
		 --LEFT JOIN #INCOME I ON I.DEDUCTEEID = F.DEDUCTEEID
		 LEFT JOIN #OTHER O ON O.DEDUCTEEID = S.DEDUCTEEID
		 INSERT INTO SALARYDETAIL(DEDUCTEEID,BRANCHID,BASICSALARY, TAXABLEALLOWANCE, GROSSSALARY,DEDUCTIONUS16, SALARYFROMPREVEMP, INCOMEFROMHOUSEPROPERTY,CAPITALGAINS,
												OTHERINCOME,INCOMEFROMOTHERSOURCES, INCOMEFROMSALARIES, GROSSTOTALINCOME, TOTALTAXABLEINCOME) 
		 SELECT S.DEDUCTEEID, S.BRANCHID,ISNULL(S.BASIC,0) BASICSALARY,ISNULL(S.INCLUDEUS10,0)TAXABLEALLOWANCE,
						 ISNULL(S.BASIC,0) + ISNULL(S.INCLUDEUS10,0) GROSSSALARY,ISNULL(S16.ET,0) + ISNULL(S16.PT,0) DEDUCTIONUS16, 0 AS SALARYFROMPREVEMP ,
						 ISNULL(O.HOUSEPROPERTY,0)INCOMEFROMHOUSEPROPERTY,ISNULL(O.GAIN,0)CAPITALGAINS,ISNULL(O.HOUSEPROPERTY,0) + ISNULL(O.GAIN,0) + ISNULL(O.INTERESTONSB,0) + ISNULL(O.INCOMEFROMOTHERSOURCES,0)OTHERINCOME, 
						 ISNULL(O.INCOMEFROMOTHERSOURCES,0)INCOMEFROMOTHERSOURCES,
						 ISNULL(S.BASIC,0) + ISNULL(S.INCLUDEUS10,0) + ISNULL(SD.TAXABLEPERQUISITES,0) - (ISNULL(S16.ET,0) + ISNULL(S16.PT,0))INCOMEFROMSALARIES,
						 ISNULL(O.HOUSEPROPERTY,0) + ISNULL(O.GAIN,0) + ISNULL(O.INTERESTONSB,0) + ISNULL(O.INCOMEFROMOTHERSOURCES,0) + ISNULL(S.BASIC,0) + ISNULL(S.INCLUDEUS10,0) + ISNULL(SD.TAXABLEPERQUISITES,0) - (ISNULL(S16.ET,0) + ISNULL(S16.PT,0))GROSSTOTALINCOME,
						 ISNULL(O.HOUSEPROPERTY,0) + ISNULL(O.GAIN,0) + ISNULL(O.INTERESTONSB,0) + ISNULL(O.INCOMEFROMOTHERSOURCES,0) + ISNULL(S.BASIC,0) + ISNULL(S.INCLUDEUS10,0) + ISNULL(SD.TAXABLEPERQUISITES,0) - (ISNULL(S16.ET,0) + ISNULL(S16.PT,0)) - ISNULL(TOTALDEDUNDERCHAPTERVIA,0)TOTALTAXABLEINCOME
		   FROM #SALARY S
		  LEFT JOIN #SECTION16 S16 ON S.DEDUCTEEID = S16.DEDUCTEEID 
		  LEFT JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.DEDUCTEEID = S.DEDUCTEEID
		 -- LEFT JOIN #INCOME I ON I.DEDUCTEEID = F.DEDUCTEEID
		  LEFT JOIN #OTHER O ON O.DEDUCTEEID = S.DEDUCTEEID
		  WHERE SD.DEDUCTEEID IS NULL 
		  UPDATE SECTION16DETAIL SET AMOUNT = S.NETAMT
		  FROM SECTION16DETAIL S16     
		  INNER JOIN SALARYDETAIL SD ON SD.SALARYDETAILID = S16.SALARYDETAILID    
		  INNER JOIN #SEC16 S ON S.DEDUCTEEID = SD.DEDUCTEEID AND S16.SALARYSECTIONID = S.SALARYSECTIONID
		  INSERT INTO SECTION16DETAIL(SALARYDETAILID, SALARYSECTIONID, AMOUNT)  
		  SELECT SD.SALARYDETAILID, S.SALARYSECTIONID, NETAMT FROM SALARYDETAIL SD WITH(NOLOCK) 
		  INNER JOIN #SEC16 S ON S.DEDUCTEEID = SD.DEDUCTEEID
		  LEFT JOIN SECTION16DETAIL S16 WITH(NOLOCK) ON S16.SALARYDETAILID = SD.SALARYDETAILID
		  WHERE S16.SALARYDETAILID IS NULL	 
		  UPDATE SALARYDETAIL SET TOTALTAXABLEINCOME = CAST(ROUND((TOTALTAXABLEINCOME)*10/10,-1) AS NUMERIC(13,2))
		  DROP TABLE #BASIC
		  DROP TABLE #COMID
		  DROP TABLE #DEDUCTEE
		  DROP TABLE #EMPLOYEE
		  DROP TABLE #EMPWORKMONTH
		  DROP TABLE #LINKTOTC
		  DROP TABLE #OTHER
		  DROP TABLE #SALARY
		  DROP TABLE #SEC16
		  DROP TABLE #SECTION16
		  DROP TABLE #TAXABLEPERQ
		  DROP TABLE #SALDETAIL
  SET NOCOUNT OFF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEFORM26QAA')
DROP PROCEDURE USP_TDS_UPDATEFORM26QAA
GO
CREATE PROCEDURE USP_TDS_UPDATEFORM26QAA 
	@BRANCHID INT,  
	@TDACCNO VARCHAR(50),  
	@OPENINGDATE VARCHAR(50),  
	@DEPOSITEDAMOUNT DECIMAL,  
	@CLOSUREDATE VARCHAR(50),
	@AMT1 TINYINT,
	@AMT2 TINYINT,
	@AMT3 TINYINT,
	@AMT4 TINYINT,
	@AMT5 TINYINT
AS    
	BEGIN     
		UPDATE TERMDEPOSIT26QAA 
		SET BRANCHID = @BRANCHID, 
			OPENINGDATE = @OPENINGDATE, 
		    DEPOSITEDAMOUNT = @DEPOSITEDAMOUNT, 
			CLOSUREDATE = @CLOSUREDATE,					
			AMT1 = @AMT1,
			AMT2 = @AMT2,
			AMT3 = @AMT3,
			AMT4 = @AMT4,
			AMT5 = @AMT5	
		WHERE TDACCNO = @TDACCNO
	END 
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEFORM27ADETAIL')
DROP PROCEDURE USP_TDS_UPDATEFORM27ADETAIL
GO
CREATE PROCEDURE [USP_TDS_UPDATEFORM27ADETAIL]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@MEDIAUSED VARCHAR(20),
	@NUMOFMEDIA INT,
	@PLACE VARCHAR(50),
	@DATE SMALLDATETIME=NULL
AS
	BEGIN
		IF EXISTS (SELECT BRANCHID FROM FORM27A WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER)
			BEGIN
				UPDATE FORM27A SET MEDIAUSED = @MEDIAUSED,NUMOFMEDIA = @NUMOFMEDIA,PLACEFILED = @PLACE,DATEFILED = @DATE
				WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER;
			END
		ELSE
			BEGIN
				INSERT INTO FORM27A (BRANCHID,FORMID,QUARTER,DEDCOUNT,DEDAMOUNTPAID,DEDTDSAMOUNT,CHACOUNT,CHAAMOUNT,TOTALCHAAMOUNT,MEDIAUSED,NUMOFMEDIA,PLACEFILED,DATEFILED)
				VALUES(@BRANCHID,@FORMID,@QUARTER,0,0,0,0,0,0,@MEDIAUSED,@NUMOFMEDIA,@PLACE,@DATE)
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEHRAEXEAMOUNT')
DROP PROCEDURE USP_TDS_UPDATEHRAEXEAMOUNT
GO
CREATE PROCEDURE  USP_TDS_UPDATEHRAEXEAMOUNT
@COMIDS NVARCHAR(MAX),
@MONTHID INT
AS
BEGIN
SELECT * INTO #COMID FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',')
SELECT (SD.GROSSAMT1 +  SD.GROSSAMT3)HRA,
	(SELECT SD.NETAMT FROM SALDETAIL WITH(NOLOCK) WHERE COMID = SD.COMID AND SALARYHEADID = 1 AND MONTHID = SD.MONTHID) AS BASIC,
	(SELECT SD.NETAMT FROM SALDETAIL WITH(NOLOCK) WHERE COMID = SD.COMID AND SALARYHEADID = 2 AND MONTHID = SD.MONTHID) AS DA,
	R.RENTPAID, R.ISMETRORESIDENT, SD.COMID, SD.MONTHID
	INTO #RENT 
	FROM SALDETAIL SD WITH(NOLOCK)
LEFT JOIN RENTDETAILS R WITH(NOLOCK) ON R.SALDETAILID = SD.SALDETAILID
INNER JOIN #COMID COM ON COM.DATA = COMID
WHERE MONTHID = @MONTHID AND SD.SALARYHEADID = 3 
SELECT CASE WHEN ISMETRORESIDENT = 1 THEN 0.5 * (ISNULL(BASIC,0) + ISNULL(DA,0)) 
		    ELSE 0.4 * (ISNULL(BASIC,0) + ISNULL(DA,0)) END AS BASICDA,
		    RENTPAID - 0.1 * (ISNULL(BASIC,0) + ISNULL(DA,0)) AS RENT,
		    HRA, COMID, MONTHID
		    INTO #FINAL
		    FROM #RENT 	        
	        UPDATE SALDETAIL SET EXEMPTAMT = R.HRAEXEMPTION, 
								 NETAMT = GROSSAMT1 + GROSSAMT2 + GROSSAMT3 - R.HRAEXEMPTION
	        FROM SALDETAIL SD
	        INNER JOIN 
	        (
	         SELECT CASE WHEN BASICDA <= RENT AND BASICDA <=HRA THEN BASICDA
				WHEN RENT <= BASICDA AND RENT <= HRA THEN RENT
				ELSE HRA END HRAEXEMPTION, COMID, MONTHID FROM #FINAL				
	        )R
	        ON R.COMID = SD.COMID AND R.MONTHID = SD.MONTHID
	        AND SD.SALARYHEADID = 3
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEHRAEXEMPTIONAMOUNT')
DROP PROCEDURE USP_TDS_UPDATEHRAEXEMPTIONAMOUNT
GO
CREATE PROCEDURE [USP_TDS_UPDATEHRAEXEMPTIONAMOUNT]
@COMID INT
AS
 BEGIN
	DECLARE  @RENTAMT NUMERIC(13,2);
	SELECT SUM(NETAMT) AS TOT,SUM(NETAMT)*40/100 AS BASICDATOT,MONTHID 
	INTO #TEMP1
	FROM SALDETAIL WHERE COMID = @COMID AND SALARYHEADID IN (1,2)
	GROUP BY MONTHID
	SELECT SUM(GROSSAMT1 + GROSSAMT2+ GROSSAMT3)AS TOT,MONTHID 
	INTO #TEMP2
	FROM SALDETAIL WHERE COMID = @COMID AND SALARYHEADID = 3
	GROUP BY MONTHID
	SELECT @RENTAMT = A.RENTPAIDBYEMP FROM ACCOMODATION A WITH(NOLOCK) 
	INNER JOIN TAXABLEPERQUISITE T WITH(NOLOCK) ON A.TAXABLEPERKID = T.TAXABLEPERKID
	WHERE T.COMID = @COMID
	SELECT T1.BASICDATOT,T1.MONTHID,T2.TOT AS HRA,@RENTAMT - (T1.TOT * 0.1) RENT 
	INTO #TEMP3
	FROM #TEMP1 T1
	INNER JOIN #TEMP2 T2 ON T1.MONTHID = T2.MONTHID
		   UPDATE SALDETAIL SET EXEMPTAMT = TT.HRAEXEMMPTAMT, NETAMT = GROSSAMT1 + GROSSAMT2 + GROSSAMT3 - TT.HRAEXEMMPTAMT 
		   FROM SALDETAIL SD 
		   INNER JOIN
		   (
			SELECT CASE WHEN BASICDATOT <= HRA AND BASICDATOT <= RENT THEN BASICDATOT
			 WHEN RENT <= BASICDATOT AND RENT <= HRA THEN RENT 
			 ELSE HRA END AS HRAEXEMMPTAMT, MONTHID  
			FROM  #TEMP3  
		   )TT ON TT.MONTHID = SD.MONTHID 
		   WHERE SD.SALARYHEADID = 3 AND SD.COMID = @COMID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEIMPORTEMPLOYEEDETAIL')
DROP PROCEDURE USP_TDS_UPDATEIMPORTEMPLOYEEDETAIL
GO
CREATE PROCEDURE USP_TDS_UPDATEIMPORTEMPLOYEEDETAIL        
@DEDUCTEEID INT,  
@EMPFROMDATE SMALLDATETIME,        
@EMPTODATE SMALLDATETIME,     
@ISSENIORCITIZEN INT,     
@GENDER INT,      
@ADDRESS1 VARCHAR(25),  
@ADDRESS2 VARCHAR(25),  
@ADDRESS3 VARCHAR(25),  
@ADDRESS4 VARCHAR(25),  
@ADDRESS5 VARCHAR(25),  
@STATEID INT,  
@PINCODE VARCHAR(6),  
@PHONENO VARCHAR(15),  
@EMAILADDRESS VARCHAR(100),
@NAME VARCHAR(75) = NULL,                      
@PAN VARCHAR(10) = NULL,                    
@PANREFERENCE VARCHAR(10) = NULL  
AS        
 BEGIN        
	UPDATE EMPLOYEE SET EMPLOYMENTFROM = @EMPFROMDATE , EMPLOYMENTTO = @EMPTODATE, ISSENIORCITIZEN=@ISSENIORCITIZEN ,   
			GENDER = @GENDER  
	WHERE DEDUCTEEID = @DEDUCTEEID
	IF(@NAME IS NOT NULL AND @PAN IS NOT NULL)   
		BEGIN     
			UPDATE DEDUCTEE SET NAME = @NAME, PAN = @PAN, PANREFERENCE = @PANREFERENCE, ADDRESS1 = @ADDRESS1, ADDRESS2 = @ADDRESS2, ADDRESS3= @ADDRESS3, ADDRESS4=@ADDRESS4, ADDRESS5= @ADDRESS5,  
					STATEID = @STATEID, PINCODE= @PINCODE, PHONENO = @PHONENO, EMAILADDRESS = @EMAILADDRESS  
			WHERE DEDUCTEEID = @DEDUCTEEID 
		END
	ELSE
		BEGIN     
			UPDATE DEDUCTEE SET ADDRESS1 = @ADDRESS1, ADDRESS2 = @ADDRESS2, ADDRESS3= @ADDRESS3, ADDRESS4=@ADDRESS4, ADDRESS5= @ADDRESS5,  
					STATEID = @STATEID, PINCODE= @PINCODE, PHONENO = @PHONENO, EMAILADDRESS = @EMAILADDRESS  
			WHERE DEDUCTEEID = @DEDUCTEEID 
		END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEIMPORTEMPLOYEEDETAILPENSIONER')
DROP PROCEDURE USP_TDS_UPDATEIMPORTEMPLOYEEDETAILPENSIONER
GO
CREATE PROCEDURE [USP_TDS_UPDATEIMPORTEMPLOYEEDETAILPENSIONER]          
@DEDUCTEEID INT,    
@EMPFROMDATE SMALLDATETIME,          
@EMPTODATE SMALLDATETIME,       
@ISSENIORCITIZEN INT,       
@GENDER INT,        
@ADDRESS1 VARCHAR(25),    
@ADDRESS2 VARCHAR(25),    
@ADDRESS3 VARCHAR(25),    
@ADDRESS4 VARCHAR(25),    
@ADDRESS5 VARCHAR(25),    
@STATEID INT,    
@PINCODE VARCHAR(6),    
@PHONENO VARCHAR(15),    
@EMAILADDRESS VARCHAR(100),
@ACCOUNTNO VARCHAR(15),
@PPONUMBER VARCHAR(15)    
AS          
 BEGIN          
   UPDATE EMPLOYEE SET EMPLOYMENTFROM = @EMPFROMDATE, EMPLOYMENTTO = @EMPTODATE, ISSENIORCITIZEN=@ISSENIORCITIZEN,     
                 GENDER = @GENDER, ACCOUNTNO = @ACCOUNTNO, PPONUMBER = @PPONUMBER     
  WHERE DEDUCTEEID = @DEDUCTEEID          
  UPDATE DEDUCTEE SET ADDRESS1 = @ADDRESS1, ADDRESS2 = @ADDRESS2, ADDRESS3= @ADDRESS3, ADDRESS4=@ADDRESS4, ADDRESS5= @ADDRESS5,    
          STATEID = @STATEID, PINCODE= @PINCODE, PHONENO = @PHONENO, EMAILADDRESS = @EMAILADDRESS    
    WHERE DEDUCTEEID = @DEDUCTEEID                 
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEIMPORTEMPLOYEEDETAILS')
DROP PROCEDURE USP_TDS_UPDATEIMPORTEMPLOYEEDETAILS
GO
CREATE PROCEDURE USP_TDS_UPDATEIMPORTEMPLOYEEDETAILS     
@DEDUCTEEID INT,  
@EMPFROMDATE SMALLDATETIME,        
@EMPTODATE SMALLDATETIME,     
@ISSENIORCITIZEN INT,     
@GENDER INT,
@NAME VARCHAR(75),                      
@PAN VARCHAR(10),                    
@PANREFERENCE VARCHAR(10),      
@ADDRESS1 VARCHAR(25),  
@ADDRESS2 VARCHAR(25),  
@ADDRESS3 VARCHAR(25),  
@ADDRESS4 VARCHAR(25),  
@ADDRESS5 VARCHAR(25),  
@STATEID INT,  
@PINCODE VARCHAR(6),  
@PHONENO VARCHAR(15),  
@EMAILADDRESS VARCHAR(100),
@WORKINGBRANCHID VARCHAR(6)  
AS        
BEGIN        
	UPDATE EMPLOYEE SET EMPLOYMENTFROM = @EMPFROMDATE , EMPLOYMENTTO = @EMPTODATE, ISSENIORCITIZEN=@ISSENIORCITIZEN ,   
				 GENDER = @GENDER, WORKINGBRANCHID = @WORKINGBRANCHID  
	WHERE DEDUCTEEID = @DEDUCTEEID        
	UPDATE DEDUCTEE SET NAME = @NAME, PAN = @PAN, PANREFERENCE = @PANREFERENCE, ADDRESS1 = @ADDRESS1, ADDRESS2 = @ADDRESS2, ADDRESS3= @ADDRESS3, ADDRESS4=@ADDRESS4, ADDRESS5= @ADDRESS5,  
		  STATEID = @STATEID, PINCODE= @PINCODE, PHONENO = @PHONENO, EMAILADDRESS = @EMAILADDRESS  
	WHERE DEDUCTEEID = @DEDUCTEEID               
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEIMPORTSTATUSDETAIL')
DROP PROCEDURE USP_TDS_UPDATEIMPORTSTATUSDETAIL
GO
CREATE PROCEDURE USP_TDS_UPDATEIMPORTSTATUSDETAIL      
@BRANCHID INT,      
@MONTHID INT,      
@ISVALID BIT,  
@CURSTATUS INT,
@IMPORTEDDATE SMALLDATETIME      
AS      
BEGIN      
UPDATE IMPORTSTATUS SET ISVALID = @ISVALID, ISREQACTIVE = 0, QUEUEID = '', CURSTATUS = @CURSTATUS, IMPORTEDDATE = @IMPORTEDDATE      
WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEISDEDUCTEEEXCLUDED')
DROP PROCEDURE USP_TDS_UPDATEISDEDUCTEEEXCLUDED
GO
CREATE PROCEDURE [USP_TDS_UPDATEISDEDUCTEEEXCLUDED]
@BRANCHID INT,    
@ISEXCLUDEPAN BIT    
AS    
BEGIN    
	UPDATE DEDUCTEE SET ISEXCLUDED = 
		CASE WHEN PAN LIKE '[A-Z][A-Z][A-Z][P|H|C|J|F|A|T|B|L|G][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 0
				  ELSE 1 END
		FROM  DEDUCTEE D
		INNER JOIN EMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID
	WHERE BRANCHID=@BRANCHID
	UPDATE DEDUCTEE SET ISEXCLUDED = 
		CASE WHEN PAN LIKE '[A-Z][A-Z][A-Z][P][A-Z][0-9][0-9][0-9][0-9][A-Z]' THEN 0
				  ELSE 1 END
		FROM DEDUCTEE D
		INNER JOIN NONEMPLOYEE NE ON D.DEDUCTEEID = NE.DEDUCTEEID
	WHERE BRANCHID=@BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEISGENERATED')
DROP PROCEDURE USP_TDS_UPDATEISGENERATED
GO
CREATE PROCEDURE  USP_TDS_UPDATEISGENERATED  
@DEDEUCTIONIDS NVARCHAR(MAX)
AS
BEGIN
SELECT * INTO #DEDUCTIONS FROM DBO.UDF_TDS_SPLITSTRING(@DEDEUCTIONIDS,',')
UPDATE DEDUCTIONDETAIL SET ORDERID=1 
FROM DEDUCTIONDETAIL
INNER JOIN #DEDUCTIONS D ON D.DATA = DEDUCTIONID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEISREVERSALREQUEST')
DROP PROCEDURE USP_TDS_UPDATEISREVERSALREQUEST
GO
CREATE PROCEDURE USP_TDS_UPDATEISREVERSALREQUEST                               
 @ISREVERSAL INT,                  
 @DEDUCTIONID INT,
 @TRANSACTIONSEQNO VARCHAR(25)                                                      
AS                              
BEGIN                                        
 BEGIN                         
   IF(@ISREVERSAL=1)                        
   BEGIN                    
   IF(EXISTS(SELECT DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID=@DEDUCTIONID))          
	   BEGIN              
	   UPDATE DEDUCTIONDETAIL SET ISREVERSAL=1,TRANSSTATUS=1,TRANSACTIONSEQNO=@TRANSACTIONSEQNO
	   WHERE DEDUCTIONID=@DEDUCTIONID;               
	   SELECT 1;                              
	   END              
   ELSE              
	   BEGIN              
	   SELECT 0              
	   END              
   END                    
   ELSE                     
		BEGIN                    
		IF((SELECT ISREVERSAL FROM DEDUCTIONDETAIL WHERE DEDUCTIONID=@DEDUCTIONID)=1)
		BEGIN
			UPDATE DEDUCTIONDETAIL SET ISREVERSAL=0,TRANSSTATUS=2
			WHERE DEDUCTIONID=@DEDUCTIONID
			SELECT @DEDUCTIONID;
		END
		ELSE
		BEGIN
			SELECT 0;
		END
   END                    
 END                              
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATENONEMPLOYEE')
DROP PROCEDURE USP_TDS_UPDATENONEMPLOYEE
GO
CREATE PROCEDURE [USP_TDS_UPDATENONEMPLOYEE]        
 @BRANCHID INT,        
 @SERIALNO INT,        
 @NAME VARCHAR(75),        
 @PAN VARCHAR(10),        
 @SALUTATION INT,        
 @REFERENCENO VARCHAR(20),        
 @DEDUCTEECODE INT,        
 @ISAPPLICABLE26 BIT,        
 @ISAPPLICABLE27 BIT,        
 @ISTRANSPORTER BIT,        
 @FLATDOORBLOCKNO VARCHAR(25),        
 @NAMEOFBUILDING VARCHAR(25),        
 @STREETROADNAME VARCHAR(25),        
 @AREA VARCHAR(25),        
 @CITY VARCHAR(25),        
 @STATE TINYINT,        
 @PINCODE VARCHAR(6),        
 @PHONE VARCHAR(15),        
 @EMAIL VARCHAR(75),        
 @ISKB BIT,  
 @PANREFERENCE VARCHAR(15)        
 AS        
BEGIN        
  DECLARE @DEDUCTEEID INT;        
  IF(@ISKB = 1)        
    BEGIN        
  SELECT @DEDUCTEEID = D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)        
  INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID        
  WHERE D.BRANCHID = @BRANCHID AND D.REFERENCENO = @REFERENCENO        
    END        
  ELSE        
    BEGIN        
    SELECT @DEDUCTEEID = D.DEDUCTEEID FROM DEDUCTEE D WITH(NOLOCK)        
    INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID        
    WHERE D.BRANCHID = @BRANCHID AND E.SERIALNO = @SERIALNO        
    END        
     UPDATE DEDUCTEE SET NAME=@NAME,PAN=@PAN,ADDRESS1=@FLATDOORBLOCKNO,ADDRESS2=@NAMEOFBUILDING,        
     ADDRESS3=@STREETROADNAME,ADDRESS4=@AREA,ADDRESS5=@CITY,STATEID=@STATE,PINCODE=@PINCODE,  
     PHONENO=@PHONE,EMAILADDRESS=@EMAIL,PANREFERENCE= @PANREFERENCE      
     FROM DEDUCTEE D        
     INNER JOIN NONEMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID        
     WHERE D.DEDUCTEEID = @DEDUCTEEID        
  UPDATE NONEMPLOYEE SET DEDUCTEECODE= @DEDUCTEECODE,ISAPPLICABLE26=@ISAPPLICABLE26,ISAPPLICABLE27=@ISAPPLICABLE27        
  WHERE DEDUCTEEID=@DEDUCTEEID        
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateNullChallan')
DROP PROCEDURE USP_TDS_UpdateNullChallan
GO
CREATE PROCEDURE [dbo].[USP_TDS_UpdateNullChallan]
@CLIENTID INT,
@TRANSACTIONNO VARCHAR(20)=NULL,
@TRANSACTIONDATE SMALLDATETIME=NULL
AS
BEGIN
		DECLARE @ISUBI INT;
       IF(@TRANSACTIONNO IS NULL)
		BEGIN
			SET @ISUBI=0;
		END
		ELSE
		BEGIN
			SET @ISUBI=1;
			SELECT @ISUBI
		END
		SELECT CHALLANID
		INTO #TEMP 
		FROM CHALLANDETAIL CD
			INNER JOIN TAXSECTIONS TS 
				ON CD.SECTIONID = TS.SECTIONID AND TS.FORMID = CD.FORMID	
			INNER JOIN COMPANYBRANCH CB ON CB.BRANCHID=CD.BRANCHID 
			INNER JOIN REMITTINGBANK RB ON CD.BANKID=RB.BANKID
		WHERE CD.BANKCHALLANNO IS NULL 
			AND CD.CHALLANPAIDDATE IS NULL 
			AND CD.ISAUTOGENERATED=1 
			AND CD.ISOLTASINCLUDED=0 
			AND ISTTUMINCLUDED= @ISUBI
		DECLARE @MAXCHALLANNO varchar(10)
		SELECT @MAXCHALLANNO=ISNULL(MAX(BANKCHALLANNO+1),
				CASE WHEN @CLIENTID = 3 
					 THEN 50001 
					 WHEN @CLIENTID = 12 
					 THEN 80001 
					 ELSE 
					 CASE WHEN @CLIENTID = 9  
					 THEN 80000 
					 ELSE 60000 END END ) 
		FROM CHALLANDETAIL 
		WHERE CONVERT(VARCHAR,CHALLANPAIDDATE,112)=CONVERT(VARCHAR,GETDATE(),112) 
			AND ISAUTOGENERATED=1 
		EXEC('ALTER TABLE #TEMP ADD CHALLANNO INT IDENTITY(' + @MAXCHALLANNO + ', 1)') 
		UPDATE CHALLANDETAIL 
		SET BANKCHALLANNO=T.CHALLANNO,LASTBANKCHALLANNO=T.CHALLANNO,
			CHALLANPAIDDATE=GETDATE(),LASTCHALLANPAIDDATE=GETDATE(),
			TRANSACTIONNO=@TRANSACTIONNO,TRANSACTIONDATE=@TRANSACTIONDATE 
		FROM CHALLANDETAIL CD 
			INNER JOIN #TEMP T ON CD.CHALLANID=T.CHALLANID
		WHERE BANKCHALLANNO IS NULL	AND CHALLANPAIDDATE IS NULL
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATENULLCHALLAN02')
DROP PROCEDURE USP_TDS_UPDATENULLCHALLAN02
GO
CREATE PROCEDURE [USP_TDS_UPDATENULLCHALLAN02]
@TRANSACTIONNO VARCHAR(20)=NULL,
@TRANSACTIONDATE SMALLDATETIME=NULL
AS
BEGIN
DECLARE @ISUBI INT;
SET @ISUBI=0;
  --     IF(@TRANSACTIONNO IS NULL)
		--BEGIN
		--	SET @ISUBI=0;
		--END
		--ELSE
		--BEGIN
		--	SET @ISUBI=1;
		--	SELECT @ISUBI
		--END
SELECT CHALLANID
INTO #TEMP 
			 FROM CHALLANDETAIL CD WITH(NOLOCK)
			 INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON CD.SECTIONID = TS.SECTIONID AND TS.FORMID = CD.FORMID	
			 INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID=CD.BRANCHID 
			 INNER JOIN REMITTINGBANK RB WITH(NOLOCK) ON CD.BANKID=RB.BANKID
			 WHERE CD.BANKCHALLANNO IS NULL AND CD.CHALLANPAIDDATE IS NULL AND CD.ISAUTOGENERATED=1 AND CD.ISOLTASINCLUDED=0 AND ISTTUMINCLUDED= @ISUBI
			 DECLARE @MAXCHALLANNO VARCHAR(10)
             SELECT @MAXCHALLANNO=ISNULL(MAX(BANKCHALLANNO+1),60001 ) FROM CHALLANDETAIL WHERE CONVERT(VARCHAR,CHALLANPAIDDATE,112)=CONVERT(VARCHAR,GETDATE(),112) AND ISAUTOGENERATED=1 
			 EXEC('ALTER TABLE #TEMP ADD CHALLANNO INT IDENTITY(' + @MAXCHALLANNO + ', 1)')  
	UPDATE CHALLANDETAIL 
	SET 
		BANKCHALLANNO = T.CHALLANNO, 
		LASTBANKCHALLANNO = T.CHALLANNO,
		CHALLANPAIDDATE = GETDATE(),
		LASTCHALLANPAIDDATE = GETDATE(), 
		TRANSACTIONNO = @TRANSACTIONNO,
		TRANSACTIONDATE = @TRANSACTIONDATE 
	FROM 
		CHALLANDETAIL CD INNER JOIN #TEMP T ON CD.CHALLANID = T.CHALLANID
	WHERE 
		BANKCHALLANNO IS NULL	AND CHALLANPAIDDATE IS NULL
END
--UPDATE CHALLANDETAIL SET BANKCHALLANNO=NULL,LASTBANKCHALLANNO=NULL,CHALLANPAIDDATE=NULL,LASTCHALLANPAIDDATE=NULL WHERE CONVERT(VARCHAR,CHALLANPAIDDATE,112)=CONVERT(VARCHAR,GETDATE(),112)
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEOTHERINCOME')
DROP PROCEDURE USP_TDS_UPDATEOTHERINCOME
GO
CREATE PROCEDURE [USP_TDS_UPDATEOTHERINCOME]      
@DEDUCTEEID INT,        
@COMID INT        
AS        
 BEGIN        
   DECLARE @SALARYDETAILID INT, @INCOMEFROMOTHERSOURCES NUMERIC(13,2),@BRANCHID INT, @PREVEMP NUMERIC(13,2),      
     @CAPITALGAINS NUMERIC(13,2),@INCOMEFROMHOUSEPROPERTY NUMERIC(13,2), @OTHERINCOME NUMERIC(13,2), @INTERESTONSB NUMERIC(13,2),    
     @TOTALDEDUNDERCHAPTERVIA NUMERIC(13,2);        
     SET @SALARYDETAILID =-1; SET @INCOMEFROMOTHERSOURCES = 0;       
	 SELECT @BRANCHID = BRANCHID FROM DEDUCTEE WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID;        
	  SELECT @INCOMEFROMOTHERSOURCES = SUM(OS.AMOUNT  - OS.EXEMPTAMT) FROM OTHERINCOME OI WITH (NOLOCK)        
		 INNER JOIN OTHERINCOMESOURCES OS WITH (NOLOCK) ON OS.OTHERINCOMEID = OI.OTHERINCOMEID      
	  WHERE OI.COMID = @COMID       
	  SELECT @PREVEMP = OI.PREVEMP, @CAPITALGAINS = LGAIN + SGAIN,@INTERESTONSB = INTERESTONSB,     
	   @INCOMEFROMHOUSEPROPERTY = HOUSEPROL + HOUSEPROS FROM OTHERINCOME OI WITH (NOLOCK)       
	  WHERE OI.COMID = @COMID       
	  SELECT @OTHERINCOME = ISNULL(@PREVEMP,0) + ISNULL(@CAPITALGAINS,0) + ISNULL(@INCOMEFROMHOUSEPROPERTY,0) + ISNULL(@INCOMEFROMOTHERSOURCES,0)+ISNULL(@INTERESTONSB,0)
	 IF EXISTS(SELECT SALARYDETAILID FROM SALARYDETAIL WITH (NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID)        
		 BEGIN        
			SELECT @SALARYDETAILID = SALARYDETAILID FROM SALARYDETAIL WITH (NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID      
		 END        
	  ELSE        
		 BEGIN        
			  INSERT INTO SALARYDETAIL(DEDUCTEEID, BRANCHID, CAPITALGAINS, INCOMEFROMHOUSEPROPERTY,     
				 INCOMEFROMOTHERSOURCES, OTHERINCOME, GROSSTOTALINCOME, TOTALTAXABLEINCOME)        
			  VALUES(@DEDUCTEEID, @BRANCHID, ISNULL(@CAPITALGAINS,0), ISNULL(@INCOMEFROMHOUSEPROPERTY,0), ISNULL(@INCOMEFROMOTHERSOURCES,0),    
			   ISNULL(@OTHERINCOME,0), ISNULL(@OTHERINCOME,0) ,ISNULL(@OTHERINCOME,0))      
			  SET @SALARYDETAILID = SCOPE_IDENTITY();      
		 END
		 DELETE FROM CHAPTERVIADETAIL WHERE SALARYDETAILID = @SALARYDETAILID AND SALARYSECTIONID = 18
		 IF(@INTERESTONSB > 0)
		    INSERT INTO CHAPTERVIADETAIL (SALARYDETAILID, SALARYSECTIONID, GROSSAMOUNT, QUALIFYINGAMOUNT, DEDUCTIBLEAMOUNT)
		    VALUES(@SALARYDETAILID, 18, @INTERESTONSB,@INTERESTONSB, @INTERESTONSB) 
		 SELECT @TOTALDEDUNDERCHAPTERVIA = SUM(DEDUCTIBLEAMOUNT)  FROM CHAPTERVIADETAIL WITH(NOLOCK) WHERE SALARYDETAILID = @SALARYDETAILID 
		 UPDATE SALARYDETAIL SET CAPITALGAINS = @CAPITALGAINS, INCOMEFROMHOUSEPROPERTY = @INCOMEFROMHOUSEPROPERTY,      
			 INCOMEFROMOTHERSOURCES = ISNULL(@INCOMEFROMOTHERSOURCES,0),
			 INCOMEFROMSALARIES = ISNULL(GROSSSALARY,0)  - ISNULL(DEDUCTIONUS16,0),    
			 GROSSTOTALINCOME =  ISNULL(@OTHERINCOME,0) + (ISNULL(GROSSSALARY,0)  - ISNULL(DEDUCTIONUS16,0)),    
			 OTHERINCOME = ISNULL(@OTHERINCOME,0),    
			 TOTALTAXABLEINCOME = ISNULL(@OTHERINCOME,0) + (ISNULL(GROSSSALARY,0)  - ISNULL(DEDUCTIONUS16,0)) - ISNULL(@TOTALDEDUNDERCHAPTERVIA,0)    
			 WHERE SALARYDETAILID = @SALARYDETAILID; 
       SELECT @SALARYDETAILID;        
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEPAN')
DROP PROCEDURE USP_TDS_UPDATEPAN
GO
CREATE PROCEDURE [USP_TDS_UPDATEPAN]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@DEDUCTEESLNO INT,
	@DEDUCTEEID INT
AS
	BEGIN
		IF @FORMID = 1
			BEGIN
				UPDATE CORREMPLOYEE SET MATCHEDID = CASE WHEN @DEDUCTEEID = 0 THEN NULL ELSE @DEDUCTEEID END
				WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESLNO ;
			END
		ELSE
			BEGIN
				UPDATE CORRNONEMPLOYEE SET MATCHEDID = CASE WHEN @DEDUCTEEID = 0 THEN NULL ELSE @DEDUCTEEID END
				WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND DEDUCTEESERIALNO = @DEDUCTEESLNO ;
			END
		END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEPANREFERENCE')
DROP PROCEDURE USP_TDS_UPDATEPANREFERENCE
GO
CREATE PROCEDURE USP_TDS_UPDATEPANREFERENCE
AS
BEGIN
	SELECT BRANCHID, MAX(CAST(SUBSTRING(PANREFERENCE, 6,5) AS INT)) MAXPANREF
	INTO #MAXPAN
	FROM DEDUCTEE D WITH(NOLOCK)
		INNER JOIN NONEMPLOYEE N WITH(NOLOCK)
		ON D.DEDUCTEEID = N.DEDUCTEEID
	WHERE LEN(ISNULL(D.PANREFERENCE, '')) > 0
	GROUP BY BRANCHID
	SELECT ROW_NUMBER() OVER (PARTITION BY BRANCHID ORDER BY BRANCHID) ROWNUM, D.DEDUCTEEID, 
			D.BRANCHID, D.NAME, D.PAN, D.PANREFERENCE
	INTO #TOUPD
	FROM DEDUCTEE D WITH(NOLOCK)
		INNER JOIN NONEMPLOYEE N WITH(NOLOCK)
		ON D.DEDUCTEEID = N.DEDUCTEEID
	WHERE D.PAN IN ('PANINVALID','PANNOTAVBL','PANAPPLIED')
		AND LEN(ISNULL(D.PANREFERENCE, '')) = 0
	ORDER BY D.BRANCHID, D.DEDUCTEEID
	SELECT ISNULL(M.MAXPANREF, 0) MAXVAL, T.*,
			'NOPAN' + RIGHT('00000' + CAST((ISNULL(M.MAXPANREF, 0) + ROWNUM) AS VARCHAR), 5) PREF
	INTO #PREFVAL
	FROM #TOUPD T 
		LEFT JOIN #MAXPAN M 
		ON M.BRANCHID = T.BRANCHID
	UPDATE DEDUCTEE 
	SET PANREFERENCE = P.PREF
	FROM #PREFVAL P
		INNER JOIN DEDUCTEE D 
		ON D.DEDUCTEEID = P.DEDUCTEEID 
		AND D.BRANCHID = P.BRANCHID 	
	IF OBJECT_ID('TEMPDB..#PREFVAL') IS NOT NULL
		DROP TABLE #PREFVAL  
	IF OBJECT_ID('TEMPDB..#TOUPD') IS NOT NULL
		DROP TABLE #TOUPD  
	IF OBJECT_ID('TEMPDB..#MAXPAN') IS NOT NULL
		DROP TABLE #MAXPAN
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEPANSTATUS')
DROP PROCEDURE USP_TDS_UPDATEPANSTATUS
GO
CREATE PROCEDURE [USP_TDS_UPDATEPANSTATUS]  
(  
@DEUCTEEID INT,  
@PANSTATUS VARCHAR(MAX)  
)  
AS  
BEGIN  
UPDATE DEDUCTEE SET PANSTATUS=@PANSTATUS WHERE DEDUCTEEID=@DEUCTEEID   
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEPARKEDAMOUNT')
DROP PROCEDURE USP_TDS_UPDATEPARKEDAMOUNT
GO
CREATE PROCEDURE [USP_TDS_UPDATEPARKEDAMOUNT]
@ID INT,
@ACCOUNTNO VARCHAR(20),
@AMOUNT NUMERIC(17,2)
AS
 BEGIN
	UPDATE PARKEDAMOUNT SET ACCOUNTNO = @ACCOUNTNO, AMOUNT = @AMOUNT
	WHERE ID = @ID
	SELECT @ID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEPARKEDUNMATCHEDAMT')
DROP PROCEDURE USP_TDS_UPDATEPARKEDUNMATCHEDAMT
GO
CREATE PROCEDURE [USP_TDS_UPDATEPARKEDUNMATCHEDAMT] 
@BRANCHID INT,
@FORMTYPE VARCHAR(20),
@MONTH VARCHAR(10),
@EDITAMOUNT NUMERIC(17,2),
@ACCOUNTNO VARCHAR(20)
AS
 BEGIN
   DECLARE @BRANCHEXIST INT;
		SELECT @BRANCHEXIST= COUNT(ID) FROM PARKEDAMOUNT WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND MONTHYEAR = @MONTH AND FORMTYPE = @FORMTYPE
		IF EXISTS(SELECT ID FROM PARKEDAMOUNT WHERE BRANCHID = @BRANCHID AND MONTHYEAR = @MONTH AND FORMTYPE = @FORMTYPE)
		  BEGIN
			UPDATE PARKEDAMOUNT SET AMOUNT = @EDITAMOUNT,ACCOUNTNO=@ACCOUNTNO WHERE BRANCHID = @BRANCHID AND MONTHYEAR = @MONTH AND FORMTYPE = @FORMTYPE 
		  END
		ELSE
		  BEGIN
			INSERT INTO PARKEDAMOUNT (MONTHYEAR, BRANCHID, FORMTYPE, ACCOUNTNO, AMOUNT)
			VALUES (@MONTH, @BRANCHID, @FORMTYPE, '', @EDITAMOUNT)
		 END
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEPARTPAYMENTBALANCE')
DROP PROCEDURE USP_TDS_UPDATEPARTPAYMENTBALANCE
GO
CREATE PROCEDURE [USP_TDS_UPDATEPARTPAYMENTBALANCE]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@PARTPAYMENTID INT
AS
	BEGIN
		DECLARE @IT NUMERIC(13,2),@SC NUMERIC(13,2),@EC NUMERIC(13,2),@TD NUMERIC(13,2),@PM NUMERIC(13,2);
		DECLARE @ITBALANCE NUMERIC(13,2),@SCBALANCE NUMERIC(13,2),@ECBALANCE NUMERIC(13,2),@TDBALANCE NUMERIC(13,2),@PMBALANCE NUMERIC(13,2);
		SELECT @IT = ISNULL(SUM(INCOMETAX),0),
			   @SC = ISNULL(SUM(SURCHARGE),0),
			   @EC = ISNULL(SUM(EDUCATIONCESS),0),
			   @TD = ISNULL(SUM(TOTALDEDUCTED),0),
			   @PM = ISNULL(SUM(PAYMENTMADE),0)
		FROM   DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
		SELECT TOP 1 @ITBALANCE = ORGINCOMETAX - @IT ,
					 @SCBALANCE = ORGSURCHARGE-@SC,
					 @ECBALANCE = ORGEDUCATIONCESS - @EC,
					 @TDBALANCE = ORGTOTALDEDUCTED - @TD,
					 @PMBALANCE = ORGPAYMENTMADE - @PM
		FROM   DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
		IF EXISTS(SELECT PARTDETAILID FROM PARTPAYMENTDETAILS WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID)
			BEGIN
				UPDATE PARTPAYMENTDETAILS
				SET    REMINCOMETAX  = @ITBALANCE,REMEDUCATIONCESS = @ECBALANCE,REMSURCHARGE = @SCBALANCE,REMTOTALDEDUCTED = @TDBALANCE,REMPAYMENTMADE = @PMBALANCE
				WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND PARTPAYMENTID = @PARTPAYMENTID;
			END
		ELSE
			BEGIN
				INSERT INTO PARTPAYMENTDETAILS(PARTPAYMENTID,BRANCHID,FORMID,QUARTER,REMINCOMETAX,REMEDUCATIONCESS,REMSURCHARGE,REMTOTALDEDUCTED,REMPAYMENTMADE)
				VALUES(@PARTPAYMENTID,@BRANCHID,@FORMID,@QUARTER,@ITBALANCE,@ECBALANCE,@SCBALANCE,@TDBALANCE,@PMBALANCE)
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEPARTPAYMENTFORFINALUPDATE')
DROP PROCEDURE USP_TDS_UPDATEPARTPAYMENTFORFINALUPDATE
GO
CREATE PROCEDURE [USP_TDS_UPDATEPARTPAYMENTFORFINALUPDATE]
				@BRANCHID INT,
				@FORMID INT,
				@QUARTER INT
AS
BEGIN
		DECLARE @DEDUCTIONDETAIL TABLE(ID INT IDENTITY(1,1),PARTPAYMENTID INT,DEDUCTIONID INT,BRANCHID INT,FORMID INT,QUARTER INT,
										PAYMENTMADE NUMERIC(13,2),ORGPAYMENTMADE NUMERIC(13,2),
										INCOMETAX NUMERIC(13,2),ORGINCOMETAX NUMERIC(13,2),SURCHARGE NUMERIC(13,2),ORGSURCHARGE NUMERIC(13,2),
										EDUCATIONCESS NUMERIC(13,2),ORGEDUCATIONCESS NUMERIC(13,2),
										TOTALDEDUCTED NUMERIC(13,2),ORGTOTALDEDUCTED NUMERIC(13,2),
										PAYMENTDATE SMALLDATETIME,DEDUCTEDDATE SMALLDATETIME,NONDEDUCTIONREASON TINYINT)
		INSERT INTO @DEDUCTIONDETAIL
		SELECT DD.PARTPAYMENTID,DD.DEDUCTIONID,CDD.BRANCHID,CDD.FORMID,CDD.QUARTER,CDD.PAYMENTMADE,DD.ORGPAYMENTMADE,
			   CDD.INCOMETAX,DD.ORGINCOMETAX,CDD.SURCHARGE,DD.ORGSURCHARGE,CDD.EDUCATIONCESS,DD.ORGEDUCATIONCESS,
			   CDD.TOTALDEDUCTED,DD.ORGTOTALDEDUCTED,
			   CDD.PAYMENTDATE,CDD.DEDUCTEDDATE,CDD.NONDEDREASON
		   FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
						INNER JOIN
						  (SELECT DISTINCT DEDUCTIONID,PDD.PARTPAYMENTID,ORGPAYMENTMADE,ORGINCOMETAX,ORGSURCHARGE,
											ORGEDUCATIONCESS,ORGTOTALDEDUCTED FROM
							DEDUCTIONDETAIL DD WITH(NOLOCK)
							INNER JOIN
							PARTPAYMENTDETAILS PDD WITH(NOLOCK)
						  ON DD.PARTPAYMENTID=PDD.PARTPAYMENTID AND DD.BRANCHID=PDD.BRANCHID AND
							 DD.FORMID=PDD.FORMID AND DD.QUARTER=PDD.QUARTER
					   WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
					  ) DD
				  ON CDD.DEDUCTIONID=DD.DEDUCTIONID
		WHERE CDD.BRANCHID=@BRANCHID AND CDD.FORMID=@FORMID AND CDD.QUARTER=@QUARTER AND CDD.CORRECTIONSTATUS=2 ORDER BY DD.PARTPAYMENTID ASC
		DECLARE @ROWCOUNT INT,@MAXROWCOUNT INT
		SET @ROWCOUNT=1;
		SELECT @MAXROWCOUNT=COUNT(ID) FROM @DEDUCTIONDETAIL
		DECLARE @PREVIOUSPARTPAYMENTID INT
		SET @PREVIOUSPARTPAYMENTID=-1;
		WHILE(@ROWCOUNT<=@MAXROWCOUNT)
		BEGIN
				DECLARE @DEDUCTIONID INT,@PARTPAYMENTID INT
				DECLARE @ORGPAYMENTMADE NUMERIC(13,2),@ORGINCOMETAX NUMERIC(13,2),@ORGSURCHARGE NUMERIC(13,2)
				DECLARE @ORGEDUCATIONCESS NUMERIC(13,2),@ORGTOTALDEDUCTED NUMERIC(13,2)
				DECLARE @TOTALPAYMENTMADE NUMERIC(13,2),@TOTALINCOMETAX NUMERIC(13,2),@TOTALSURCHARGE NUMERIC(13,2)
				DECLARE @TOTALEDUCATIONCESS NUMERIC(13,2),@TOTALTOTALDEDUCTED NUMERIC(13,2)
				SELECT @DEDUCTIONID=DEDUCTIONID,@PARTPAYMENTID=PARTPAYMENTID,
					   @ORGPAYMENTMADE=ORGPAYMENTMADE,@ORGINCOMETAX=ORGINCOMETAX,
					   @ORGSURCHARGE=ORGSURCHARGE,@ORGEDUCATIONCESS=ORGEDUCATIONCESS,
					   @ORGTOTALDEDUCTED=ORGTOTALDEDUCTED
				  FROM @DEDUCTIONDETAIL WHERE ID=@ROWCOUNT
				IF(@PREVIOUSPARTPAYMENTID <> @PARTPAYMENTID)
				BEGIN
					/*GETTING TOTAL AMOUNTS FROM DEDUCTIONDETAIL BASED ON PARTPAYMENTID */
					SELECT @TOTALPAYMENTMADE=SUM(PAYMENTMADE),@TOTALINCOMETAX=SUM(INCOMETAX),@TOTALSURCHARGE=SUM(SURCHARGE),
								@TOTALEDUCATIONCESS=SUM(EDUCATIONCESS),@TOTALTOTALDEDUCTED=SUM(TOTALDEDUCTED)
						  FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE PARTPAYMENTID=@PARTPAYMENTID AND BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
					  DECLARE @SQLQUERY NVARCHAR(MAX)
					  DECLARE @ISQUERYTOEXECUTE BIT;
					  DECLARE @ISCOMMATOADD BIT;
					  SET @ISQUERYTOEXECUTE =0;
					  SET @ISCOMMATOADD =0;
					  SET @SQLQUERY='UPDATE DEDUCTIONDETAIL SET '
					  IF(@TOTALPAYMENTMADE<>@ORGPAYMENTMADE)
					  BEGIN
						SET @ISQUERYTOEXECUTE=1;
						SET @SQLQUERY=@SQLQUERY+' ORGPAYMENTMADE= '+CAST(@TOTALPAYMENTMADE AS VARCHAR(50)) +' ';
						SET @ISCOMMATOADD=1;
					  END
					  IF(@TOTALINCOMETAX<>@ORGINCOMETAX)
					  BEGIN
						SET @ISQUERYTOEXECUTE=1;
							IF(@ISCOMMATOADD=1)
								SET @SQLQUERY=@SQLQUERY+', ';
						SET @SQLQUERY=@SQLQUERY+'ORGINCOMETAX= '+CAST(@TOTALINCOMETAX AS VARCHAR(50)) +' ';
						SET @ISCOMMATOADD=1;
					  END
					  IF(@TOTALSURCHARGE<>@ORGSURCHARGE)
					  BEGIN
						SET @ISQUERYTOEXECUTE=1;
							IF(@ISCOMMATOADD=1)
								SET @SQLQUERY=@SQLQUERY+', ';
						SET @SQLQUERY=@SQLQUERY+' ORGSURCHARGE= '+CAST(@TOTALSURCHARGE AS VARCHAR(50)) +' ';
						SET @ISCOMMATOADD=1;
					  END
					  IF(@TOTALEDUCATIONCESS<>@ORGEDUCATIONCESS)
					  BEGIN
						SET @ISQUERYTOEXECUTE=1;
							IF(@ISCOMMATOADD=1)
								SET @SQLQUERY=@SQLQUERY+', ';
						SET @SQLQUERY=@SQLQUERY+' ORGEDUCATIONCESS= '+CAST(@TOTALEDUCATIONCESS AS VARCHAR(50)) +' ';
						SET @ISCOMMATOADD=1;
					  END
					  IF(@TOTALTOTALDEDUCTED<>@ORGTOTALDEDUCTED)
					  BEGIN
						SET @ISQUERYTOEXECUTE=1;
							IF(@ISCOMMATOADD=1)
								SET @SQLQUERY=@SQLQUERY+', ';
						SET @SQLQUERY=@SQLQUERY+' ORGTOTALDEDUCTED= '+CAST(@TOTALTOTALDEDUCTED AS VARCHAR(50)) +' ';
						SET @ISCOMMATOADD=1;
					  END
					  IF(@ISQUERYTOEXECUTE=1)
					  BEGIN
					    SET @SQLQUERY=@SQLQUERY+' WHERE BRANCHID = '+CAST(@BRANCHID AS VARCHAR)+' AND FORMID = '+CAST(@FORMID AS VARCHAR)+' AND QUARTER = '+CAST(@QUARTER AS VARCHAR)+' AND PARTPAYMENTID = '+CAST(@PARTPAYMENTID AS VARCHAR)+'';
						EXECUTE SP_EXECUTESQL @SQLQUERY
					  END
					  ELSE
					  BEGIN
					   SET @SQLQUERY='';
					  END
					  /*UPDATING BALANCE IN PARTPAYMENTDETAILS TABLE*/
					  EXEC USP_TDS_UPDATEPARTPAYMENTBALANCE @BRANCHID,@FORMID,@QUARTER,@PARTPAYMENTID
				END
			SET @PREVIOUSPARTPAYMENTID=@PARTPAYMENTID;
			SET @ROWCOUNT=@ROWCOUNT+1;
		END
		/*UPDATING THE LATEST PAYMENT DATE AND TAX DEDUCTED DATE*/
		DECLARE @DDDATEUPDATE TABLE(ID INT IDENTITY(1,1),PARTPAYMENTID INT,DEDUCTIONID INT,
									PAYMENTDATE SMALLDATETIME,DEDUCTEDDATE SMALLDATETIME,
									NONDEDUCTIONREASON TINYINT)
		INSERT INTO @DDDATEUPDATE
		SELECT PPD.PARTPAYMENTID,PPD.DEDUCTIONID,DD.PAYMENTDATE,DD.DEDUCTEDDATE,DD.NONDEDUCTIONREASON
							  FROM @DEDUCTIONDETAIL DD
									INNER JOIN
								  (SELECT PARTPAYMENTID,MAX(DEDUCTIONID) DEDUCTIONID
									FROM @DEDUCTIONDETAIL GROUP BY PARTPAYMENTID) PPD
								ON DD.DEDUCTIONID=PPD.DEDUCTIONID
							 WHERE DD.BRANCHID=@BRANCHID AND DD.FORMID=@FORMID AND DD.QUARTER=@QUARTER
		SET @ROWCOUNT=1;
		SET @MAXROWCOUNT=0;
		SET @PARTPAYMENTID=0;
		DECLARE @PAYMENTDATE SMALLDATETIME,@DEDUCTEDDATE SMALLDATETIME,@NONDEDUCTIONREASON TINYINT
		SELECT @MAXROWCOUNT=COUNT(ID) FROM @DDDATEUPDATE;
		WHILE(@ROWCOUNT<=@MAXROWCOUNT)
		BEGIN
		    SELECT @PARTPAYMENTID=PARTPAYMENTID,@PAYMENTDATE=PAYMENTDATE,@DEDUCTEDDATE=DEDUCTEDDATE,@NONDEDUCTIONREASON=NONDEDUCTIONREASON
			  FROM @DDDATEUPDATE WHERE ID=@ROWCOUNT;
			UPDATE DEDUCTIONDETAIL SET PAYMENTDATE=@PAYMENTDATE,DEDUCTEDDATE=@DEDUCTEDDATE,NONDEDREASON=@NONDEDUCTIONREASON
			WHERE PARTPAYMENTID=@PARTPAYMENTID AND BRANCHID=@BRANCHID AND FORMID=@FORMID AND QUARTER=@QUARTER
		SET @ROWCOUNT=@ROWCOUNT+1;
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEPRINTCERTIFICATENOS')
DROP PROCEDURE USP_TDS_UPDATEPRINTCERTIFICATENOS
GO
CREATE PROCEDURE [USP_TDS_UPDATEPRINTCERTIFICATENOS]
	@PRINTCERTNO VARCHAR(50),
	@DEDUCTIONID INT,
	@ISCERTGIVEN INT
AS
	BEGIN
		DECLARE @BRANCHID INT,@FORMID INT,@SECTIONID INT;
		SELECT  @BRANCHID = BRANCHID,@FORMID = FORMID,@SECTIONID = SECTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTIONID=@DEDUCTIONID;
		IF @FORMID = 1
			BEGIN
				UPDATE  FORM16
				SET	    ISCERTIFICATEGIVEN = @ISCERTGIVEN
				FROM    DEDUCTIONDETAIL INNER JOIN FORM16 ON DEDUCTIONDETAIL.DEDUCTIONID = FORM16.DEDUCTIONID
				WHERE   DEDUCTIONDETAIL.BRANCHID = @BRANCHID AND DEDUCTIONDETAIL.SECTIONID = @SECTIONID AND FORM16.PRINTCERTIFICATENO = @PRINTCERTNO
															 AND DEDUCTIONDETAIL.DEDUCTIONID <> @DEDUCTIONID;
			END
		ELSE
			BEGIN
				UPDATE  FORM16A
				SET	    ISCERTIFICATEGIVEN=@ISCERTGIVEN
				FROM    DEDUCTIONDETAIL INNER JOIN FORM16A ON DEDUCTIONDETAIL.DEDUCTIONID=FORM16A.DEDUCTIONID
				WHERE   DEDUCTIONDETAIL.BRANCHID = @BRANCHID AND DEDUCTIONDETAIL.SECTIONID = @SECTIONID AND FORM16A.PRINTCERTIFICATENO = @PRINTCERTNO
														     AND DEDUCTIONDETAIL.DEDUCTIONID <> @DEDUCTIONID;
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATERECCOUNT')
DROP PROCEDURE USP_TDS_UPDATERECCOUNT
GO
CREATE PROCEDURE USP_TDS_UPDATERECCOUNT  
@BRANCHID INT,  
@MONTHID INT,  
@RECCOUNT INT  
AS  
BEGIN  
UPDATE IMPORTSTATUS SET RECCOUNT = @RECCOUNT  
WHERE BRANCHID = @BRANCHID AND MONTHID = @MONTHID  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateRecordsHavingMismatchTDSAmount')
DROP PROCEDURE USP_TDS_UpdateRecordsHavingMismatchTDSAmount
GO
CREATE PROCEDURE [dbo].[USP_TDS_UpdateRecordsHavingMismatchTDSAmount]
@QUARTER INT,  
@VALUE INT  
AS   
  BEGIN  
 IF(@VALUE = 1)  
  BEGIN   
  --Change Interest Amount of records where Actual Tax Deducted Amount > Interest paid Payment   
  UPDATE DEDUCTIONDETAIL SET PAYMENTMADE = CASE WHEN TAXRATE > 0 THEN CAST((TOTALDEDUCTED / (TAXRATE/100)) AS NUMERIC(13,2)) ELSE PAYMENTMADE END,
						ORGPAYMENTMADE = CASE WHEN TAXRATE > 0 THEN CAST((TOTALDEDUCTED / (TAXRATE/100)) AS NUMERIC(13,2)) ELSE PAYMENTMADE END,
						INCOMETAX = CASE WHEN TAXRATE > 0 THEN INCOMETAX ELSE 0 END,
						TOTALDEDUCTED = CASE WHEN TAXRATE > 0 THEN TOTALDEDUCTED ELSE 0 END,
						ORGINCOMETAX = CASE WHEN TAXRATE > 0 THEN ORGINCOMETAX ELSE 0 END,
						ORGTOTALDEDUCTED = CASE WHEN TAXRATE > 0 THEN ORGTOTALDEDUCTED ELSE 0 END
  WHERE DEDUCTIONID IN (  
   SELECT DEDUCTIONID  
   FROM DEDUCTIONDETAIL DD WHERE TOTALDEDUCTED > (PAYMENTMADE * TAXRATE / 100)   
   AND FORMID <> 1 AND SECTIONID IN (5, 17) AND DD.QUARTER = @QUARTER  
   --AND PAYMENTMADE < 99999999999  
  )  
  END  
 ELSE IF(@VALUE = 2)  
  BEGIN  
  --Change Interest Amount of records where Actual Tax Deducted Amount < TDS Amount as per Rate   
  UPDATE DEDUCTIONDETAIL SET PAYMENTMADE = CASE WHEN TAXRATE > 0 THEN CAST((TOTALDEDUCTED / (TAXRATE/100)) AS NUMERIC(13,2)) ELSE PAYMENTMADE END,
						ORGPAYMENTMADE = CASE WHEN TAXRATE > 0 THEN CAST((TOTALDEDUCTED / (TAXRATE/100)) AS NUMERIC(13,2)) ELSE PAYMENTMADE END,
						INCOMETAX = CASE WHEN TAXRATE > 0 THEN INCOMETAX ELSE 0 END,
						TOTALDEDUCTED = CASE WHEN TAXRATE > 0 THEN TOTALDEDUCTED ELSE 0 END,
						ORGINCOMETAX = CASE WHEN TAXRATE > 0 THEN ORGINCOMETAX ELSE 0 END,
						ORGTOTALDEDUCTED = CASE WHEN TAXRATE > 0 THEN ORGTOTALDEDUCTED ELSE 0 END
  WHERE DEDUCTIONID IN (  
   SELECT DEDUCTIONID  
   FROM DEDUCTIONDETAIL DD WHERE TOTALDEDUCTED < (PAYMENTMADE * TAXRATE / 100)  
   AND FORMID <> 1 AND SECTIONID IN (5, 17) AND DD.QUARTER = @QUARTER  
  )  
  END  
 ELSE  
  BEGIN  
  -- Deductions where TDS Rate is Zero / Not entered  
  UPDATE DEDUCTIONDETAIL SET TAXRATE = CASE WHEN PAYMENTMADE > 0 THEN CAST(((TOTALDEDUCTED / PAYMENTMADE) * 100.00) AS NUMERIC(7,2)) ELSE 0 END
  WHERE DEDUCTIONID IN   
  (  
   SELECT DD.DEDUCTIONID  
   FROM DEDUCTIONDETAIL DD LEFT OUTER JOIN DEDCHALINK LNK ON DD.DEDUCTIONID = LNK.DEDUCTIONID  
   LEFT OUTER JOIN CHALLANDETAIL CD ON LNK.CHALLANID = CD.CHALLANID  
   WHERE   
   DD.QUARTER = @QUARTER AND DD.TAXRATE = 0 AND DD.FORMID <> 1 AND DD.TOTALDEDUCTED > 0  
  )  
  END  
  END 

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATERECORDSHAVINGMORETDSAMOUNT')
DROP PROCEDURE USP_TDS_UPDATERECORDSHAVINGMORETDSAMOUNT
GO
CREATE PROCEDURE [USP_TDS_UPDATERECORDSHAVINGMORETDSAMOUNT]
@QUARTER INT
AS
 BEGIN
	UPDATE DEDUCTIONDETAIL SET PAYMENTMADE = CAST((TOTALDEDUCTED / (TAXRATE/100)) AS NUMERIC(13,2))
	WHERE DEDUCTIONID IN 
	(
		SELECT DEDUCTIONID
		FROM DEDUCTIONDETAIL DD WITH(NOLOCK) WHERE TOTALDEDUCTED > PAYMENTMADE 
		AND FORMID <> 1 AND SECTIONID IN (5, 17) AND DD.QUARTER = @QUARTER
	)
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEREFNOF006')
DROP PROCEDURE USP_TDS_UPDATEREFNOF006
GO
CREATE PROCEDURE [USP_TDS_UPDATEREFNOF006]      
@EMPDATA NTEXT          
AS        
   BEGIN    
      DECLARE @HDOC INT             
   EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT,@EMPDATA             
  --THIS CODE UPDATES OLD DATA.          
   UPDATE DEDUCTEE           
   SET NAME = XMLEMPLOYEE.NAME, PAN=XMLEMPLOYEE.PAN, PANREFERENCE = XMLEMPLOYEE.PANREFERENCE    
   FROM OPENXML(@HDOC, 'NEWDATASET/DEDUCTEE')             
      WITH (REFERENCENO VARCHAR(20), NAME VARCHAR(75), PAN VARCHAR(10), PANREFERENCE VARCHAR(10), BRANCHID INT)  XMLEMPLOYEE          
  WHERE DEDUCTEE.REFERENCENO = XMLEMPLOYEE.REFERENCENO AND DEDUCTEE.BRANCHID = XMLEMPLOYEE.BRANCHID         
  EXEC SP_XML_REMOVEDOCUMENT @HDOC       
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEREVERSALREQUEST')
DROP PROCEDURE USP_TDS_UPDATEREVERSALREQUEST
GO
CREATE PROCEDURE USP_TDS_UPDATEREVERSALREQUEST  
 @REVERSALDATE SMALLDATETIME,  
 @USERNAME VARCHAR(20)  
AS  
BEGIN  
 UPDATE REVERSALREQUEST  
 SET ISTEXTGENERATED=1  
 WHERE CONVERT(VARCHAR,REVERSALDATE,103)=CONVERT(VARCHAR,@REVERSALDATE,103)
 AND USERNAME=@USERNAME  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATERTFILENO')
DROP PROCEDURE USP_TDS_UPDATERTFILENO
GO
CREATE PROCEDURE [USP_TDS_UPDATERTFILENO]
@ISTTUMGENERATED BIT
AS
BEGIN
	 DECLARE @RTNO INT
	 SELECT @RTNO=ISNULL(RT1FILENO,6000) FROM DEFAULTSETTINGS WITH(NOLOCK)
	 IF (@ISTTUMGENERATED=1)
	 BEGIN
	 	 UPDATE CHALLANDETAIL SET RTFILENO=@RTNO FROM CHALLANDETAIL CD INNER JOIN DEDCHALINK DCL ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID
												 WHERE ISAUTOGENERATED=1 AND ISOLTASINCLUDED=0 AND ISTTUMINCLUDED=1
	 END
	 ELSE
	  BEGIN
	  	 UPDATE CHALLANDETAIL SET RTFILENO=@RTNO FROM CHALLANDETAIL CD INNER JOIN DEDCHALINK DCL ON CD.CHALLANID=DCL.CHALLANID AND CD.BRANCHID=DCL.BRANCHID
												 WHERE ISAUTOGENERATED=1 AND ISOLTASINCLUDED=0 AND ISTTUMINCLUDED=0
	  END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATESALARYDEDCUTEE')
DROP PROCEDURE USP_TDS_UPDATESALARYDEDCUTEE
GO
CREATE PROCEDURE  USP_TDS_UPDATESALARYDEDCUTEE     
@EMPDATA NTEXT          
AS           
 DECLARE @HDOC INT             
 EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT,@EMPDATA             
--THIS CODE UPDATES OLD DATA.          
 UPDATE DEDUCTEE           
 SET NAME = XMLEMPLOYEE.NAME    
 FROM OPENXML(@HDOC, 'NEWDATASET/DEDUCTEE')             
       WITH (REFERENCENO VARCHAR(20), NAME VARCHAR(75),BRANCHID INT,DEDUCTEEID INT, GENDER BIT,EMPLOYMENTFROM SMALLDATETIME, EMPLOYMENTTO SMALLDATETIME, DESIGNATION VARCHAR(20))  XMLEMPLOYEE          
WHERE DEDUCTEE.REFERENCENO = XMLEMPLOYEE.REFERENCENO AND DEDUCTEE.BRANCHID = XMLEMPLOYEE.BRANCHID  
 UPDATE EMPLOYEE  SET DESIGNATION = XMLEMPLOYEE.DESIGNATION, EMPLOYMENTFROM =  XMLEMPLOYEE.EMPLOYMENTFROM, EMPLOYMENTTO = XMLEMPLOYEE.EMPLOYMENTTO,    
           GENDER = XMLEMPLOYEE.GENDER , ISTRANSFERED = 0                    
 FROM OPENXML(@HDOC, 'NEWDATASET/DEDUCTEE')             
       WITH (DEDUCTEEID INT, GENDER BIT,EMPLOYMENTFROM SMALLDATETIME, EMPLOYMENTTO SMALLDATETIME, DESIGNATION VARCHAR(20))  XMLEMPLOYEE          
WHERE EMPLOYEE.DEDUCTEEID = XMLEMPLOYEE.DEDUCTEEID          
EXEC SP_XML_REMOVEDOCUMENT @HDOC
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATESALARYDEDUCTIONDETAILS')
DROP PROCEDURE USP_TDS_UPDATESALARYDEDUCTIONDETAILS
GO
CREATE PROCEDURE [USP_TDS_UPDATESALARYDEDUCTIONDETAILS]  
@BRANCHID INT, 
@QUARTER INT,     
@DEDUCTEEID INT,      
@TRANSACTIONSEQNO VARCHAR(20),      
@PAYMENTMADE NUMERIC(13,2),      
@PAYMENTDATE SMALLDATETIME,      
@ITRATE NUMERIC(4,2) = NULL,      
@ITAMOUNT NUMERIC(13,2) = NULL,      
@SURCHARGERATE NUMERIC(4,2) = NULL,      
@SURCHARGE NUMERIC(13,2) = NULL,      
@CESSRATE NUMERIC(4,2) = NULL,      
@CESS NUMERIC(13,2) = NULL,      
@TAXRATE NUMERIC(4,2) = NULL,      
@TOTALDEDUCTED NUMERIC(13,2) = NULL,      
@DEDUCTEDDATE SMALLDATETIME = NULL,
@NONDEDREASON INT 
AS  
BEGIN  
 UPDATE DEDUCTIONDETAIL SET DEDUCTEEID = @DEDUCTEEID , INCOMETAX = @ITAMOUNT, SURCHARGE = @SURCHARGE, EDUCATIONCESS = @CESS , TOTALDEDUCTED = @TOTALDEDUCTED,       
                    PAYMENTMADE = @PAYMENTMADE, PAYMENTDATE = @PAYMENTDATE, DEDUCTEDDATE = @DEDUCTEDDATE, INCOMETAXRATE = @ITRATE,       
                    SURCHARGERATE = @SURCHARGERATE, EDUCATIONCESSRATE = @CESSRATE, TAXRATE = @TAXRATE, NONDEDREASON = @NONDEDREASON,ORGPAYMENTMADE = @PAYMENTMADE,      
                    ORGINCOMETAX = @ITAMOUNT, ORGSURCHARGE = @SURCHARGE, ORGEDUCATIONCESS = @CESS, ORGTOTALDEDUCTED = @TOTALDEDUCTED      
      WHERE BRANCHID = @BRANCHID AND QUARTER = @QUARTER AND FORMID = 1 AND  TRANSACTIONSEQNO = @TRANSACTIONSEQNO  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATESALARYDETAIL')
DROP PROCEDURE USP_TDS_UPDATESALARYDETAIL
GO
CREATE PROCEDURE [USP_TDS_UPDATESALARYDETAIL]    
@SALDETAILID INT,
@MONTHID INT,    
@COMID INT,    
@SALARYHEADID INT,    
@GROSSAMOUNT1 NUMERIC(13,2),    
@EXEMPTAMT NUMERIC(13,2),    
@NETAMT NUMERIC(13,2)  
AS 
 UPDATE SALDETAIL SET GROSSAMT1=@GROSSAMOUNT1,EXEMPTAMT=@EXEMPTAMT,NETAMT=@NETAMT  
     WHERE MONTHID=@MONTHID AND COMID=@COMID AND SALARYHEADID=@SALARYHEADID  AND SALDETAILID=@SALDETAILID
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATESALARYDETAIL_DEDUCTIONBULKDELETE')
DROP PROCEDURE USP_TDS_UPDATESALARYDETAIL_DEDUCTIONBULKDELETE
GO
CREATE PROCEDURE [USP_TDS_UPDATESALARYDETAIL_DEDUCTIONBULKDELETE]
	@BRANCHID INT,
	@FORMID INT,
	@DEDUCTEEID INT
AS
	BEGIN
		DECLARE @TABLE TABLE(ID INT IDENTITY(1,1),DEDUCTEEID INT ,INCOMETAX NUMERIC(13,2),SURCHARGE NUMERIC(13,2),EDUCATIONCESS NUMERIC(13,2))
			IF @DEDUCTEEID =-1
				BEGIN
					INSERT INTO @TABLE SELECT DEDUCTEEID,SUM(INCOMETAX),SUM(SURCHARGE),SUM(EDUCATIONCESS) FROM DEDUCTIONDETAIL WITH(NOLOCK)
									   WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID GROUP BY DEDUCTEEID
				END
			ELSE
				BEGIN
					INSERT INTO @TABLE SELECT DEDUCTEEID,SUM(INCOMETAX),SUM(SURCHARGE),SUM(EDUCATIONCESS)
									   FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND DEDUCTEEID=@DEDUCTEEID  GROUP BY DEDUCTEEID
				END
		DECLARE @COUNT INT,@MAXCOUNT INT;
		DECLARE @INCOMETAX NUMERIC(13,2),@SURCHARGE NUMERIC(13,2),@EDUCATIONCESS NUMERIC(13,2),@EXISTINGAMOUNT NUMERIC(13,2),@NETTAXPAYABLE NUMERIC(13,2),@TOTALTDS NUMERIC(13,2)
		SET @COUNT=1
		SELECT @MAXCOUNT=COUNT(ID) FROM @TABLE
		WHILE @COUNT<=@MAXCOUNT
			BEGIN
				SELECT @DEDUCTEEID=DEDUCTEEID,@INCOMETAX=INCOMETAX,@SURCHARGE=@SURCHARGE,@EDUCATIONCESS=EDUCATIONCESS FROM @TABLE WHERE ID=@COUNT
				SELECT @EXISTINGAMOUNT=SUM(ISNULL(PREVEMPINCOMETAX,0)+ISNULL(PREVEMPSURCHARGE,0)+ISNULL(PREVEMPCESS,0)+ISNULL(MANUALINCOMETAX,0)+ISNULL(MANUALSURCHARGE,0)+ISNULL(MANUALCESS,0)),
					   @NETTAXPAYABLE=SUM(ISNULL(NETTAXPAYABLE,0))  FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID
				SET @TOTALTDS=(ISNULL(@INCOMETAX,0)+ISNULL(@SURCHARGE,0)+ISNULL(@EDUCATIONCESS,0)+ISNULL(@EXISTINGAMOUNT,0))
				UPDATE SALARYDETAIL SET TDSITDEDUCTED=@INCOMETAX,TDSSURCHARGEDEDUCTED=@SURCHARGE,EDUCESSDEDUCTED=@EDUCATIONCESS,TOTALTDS=@TOTALTDS,TAXPAYABLE=ISNULL(@NETTAXPAYABLE,0)-@TOTALTDS WHERE DEDUCTEEID=@DEDUCTEEID
				SET @COUNT=@COUNT+1
			END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATESALARYDETAILS')
DROP PROCEDURE USP_TDS_UPDATESALARYDETAILS
GO
CREATE PROCEDURE [USP_TDS_UPDATESALARYDETAILS]
@DEDUCTEEID INT
AS
 BEGIN
	DECLARE @BASIC NUMERIC(13,2), @TAXABLEALLOWANCE NUMERIC(13,2);
	SELECT @BASIC = ISNULL(SUM(NETAMT),0)
	FROM SALDETAIL SD WITH(NOLOCK) 
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID
	INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON LC.COMID = EM.COMID AND SD.MONTHID = EM.MONTHID
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
	WHERE D.DEDUCTEEID = @DEDUCTEEID AND SD.SALARYHEADID = 1
	SELECT @TAXABLEALLOWANCE = ISNULL(SUM(NETAMT),0)
	FROM SALDETAIL SD WITH(NOLOCK) 
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.COMID = SD.COMID
	INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID
	INNER JOIN EMPWORKMONTH EM WITH(NOLOCK) ON LC.COMID = EM.COMID AND SD.MONTHID = EM.MONTHID
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
	WHERE D.DEDUCTEEID = @DEDUCTEEID AND SD.SALARYHEADID <> 1
	UPDATE SALARYDETAIL SET	BASICSALARY = @BASIC, TAXABLEALLOWANCE = @TAXABLEALLOWANCE, PERKACCUNFURNISHED = A.PERKACCUNFURNISHED, PERKFURNISHEDVALUE = A.PERKFURNISHEDVALUE,
			COSTOFFURNITURE = A.COSTOFFURNITURE,FURNITURERENTALS = A.FURNITURERENTALS,PERQVALUEOFFURNITURE = A.PERQVALUEOFFURNITURE,
			PERKFURNISHEDTOTAL = A.PERKFURNISHEDTOTAL, RENTPAIDBYEMP= A.RENTPAIDBYEMP, VALUEOFPERQUISITES = A.VALUEOFPERQUISITES,
			OTHERBENEFITS = (SELECT SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE WHERE COMID = LC.COMID) - A.VALUEOFPERQUISITES,
			TAXABLEPERQUISITES = (SELECT SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE WHERE COMID = LC.COMID), 
			TOTALPERQUISITE = (SELECT SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE WHERE COMID = LC.COMID),
			GROSSSALARY = @BASIC + @TAXABLEALLOWANCE + (SELECT SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE WHERE COMID = LC.COMID),
			INCOMEFROMSALARIES = @BASIC + @TAXABLEALLOWANCE + (SELECT SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE WHERE COMID = LC.COMID) - DEDUCTIONUS16,
			SALARYFROMPREVEMP = OI.PREVEMP, CAPITALGAINS = ISNULL(OI.LGAIN,0) + ISNULL(OI.SGAIN,0),
			INCOMEFROMOTHERSOURCES = (SELECT SUM(ISNULL(AMOUNT,0) - ISNULL(EXEMPTAMT,0)) FROM OTHERINCOMESOURCES WITH(NOLOCK) WHERE OTHERINCOMEID = OI.OTHERINCOMEID),
			OTHERINCOME = (SELECT ISNULL(SUM(ISNULL(AMOUNT,0) - ISNULL(EXEMPTAMT,0)),0) FROM OTHERINCOMESOURCES WITH(NOLOCK) WHERE OTHERINCOMEID = OI.OTHERINCOMEID) + ISNULL(OI.PREVEMP,0) + 
					 ISNULL(OI.LGAIN,0) + ISNULL(OI.SGAIN,0),
		    GROSSTOTALINCOME = (SELECT ISNULL(SUM(ISNULL(AMOUNT,0) - ISNULL(EXEMPTAMT,0)),0) FROM OTHERINCOMESOURCES WITH(NOLOCK) WHERE OTHERINCOMEID = OI.OTHERINCOMEID) + ISNULL(OI.PREVEMP,0) + 
					 ISNULL(OI.LGAIN,0) + ISNULL(OI.SGAIN,0) + ISNULL(BASICSALARY,0) + ISNULL(TAXABLEALLOWANCE,0) + (SELECT ISNULL(SUM(TAXABLEAMT),0) FROM TAXABLEPERQUISITE WHERE COMID = LC.COMID) - DEDUCTIONUS16,
			TOTALDEDUNDERCHAPTERVIA = (SELECT ISNULL(SUM(DEDUCTIBLEAMOUNT),0) FROM CHAPTERVIADET WHERE COMID = LC.COMID),
			TOTALTAXABLEINCOME = (SELECT ISNULL(SUM(ISNULL(AMOUNT,0) - ISNULL(EXEMPTAMT,0)),0) FROM OTHERINCOMESOURCES WHERE OTHERINCOMEID = OI.OTHERINCOMEID) + ISNULL(OI.PREVEMP,0) + 
					 ISNULL(OI.LGAIN,0) + ISNULL(OI.SGAIN,0) + ISNULL(BASICSALARY,0) + ISNULL(TAXABLEALLOWANCE,0) + (SELECT ISNULL(SUM(TAXABLEAMT),0) FROM TAXABLEPERQUISITE WHERE COMID = LC.COMID) - DEDUCTIONUS16 - (SELECT ISNULL(SUM(DEDUCTIBLEAMOUNT),0) FROM CHAPTERVIADET WHERE COMID = LC.COMID),
			TOTALINCOMETAXPAYABLE = ISNULL(TAXONTOTALINCOME,0)+ ISNULL(SURCHARGE,0) + ISNULL(EDUCATIONCESS,0)
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = SD.DEDUCTEEID
	INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID
	INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID
	LEFT JOIN TAXABLEPERQUISITE TE WITH(NOLOCK) ON TE.COMID = LC.COMID
	LEFT JOIN ACCOMODATION A WITH(NOLOCK) ON A.TAXABLEPERKID = TE.TAXABLEPERKID
	LEFT JOIN OTHERINCOME OI WITH(NOLOCK) ON OI.COMID = LC.COMID
	WHERE D.DEDUCTEEID = @DEDUCTEEID
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATESALARYDETAILSFORIMPORT')
DROP PROCEDURE USP_TDS_UPDATESALARYDETAILSFORIMPORT
GO
CREATE PROCEDURE USP_TDS_UPDATESALARYDETAILSFORIMPORT  
@SALARYDETAILID INT,  
@BASICSALARY NUMERIC(12,2),  
@TAXABLEALLOWANCE NUMERIC(12,2),  
@PERKACCUNFURNISHED NUMERIC(12,2),  
@PERKFURNISHEDVALUE NUMERIC(12,2),  
@COSTOFFURNITURE NUMERIC(12,2),  
@FURNITURERENTALS NUMERIC(12,2),  
@PERQVALUEOFFURNITURE NUMERIC(12,2),  
@PERKFURNISHEDTOTAL NUMERIC(12,2),  
@RENTPAIDBYEMP NUMERIC(12,2),  
@VALUEOFPERQUISITES NUMERIC(12,2),  
@CONVEYANCE NUMERIC(12,2),  
@REMUNERATION NUMERIC(12,2),  
@TAXABLELTC NUMERIC(12,2),  
@OTHERBENEFITS NUMERIC(12,2),  
@PFINEXCESSOF12PERC NUMERIC(12,2),  
@EXCESSINTERESTCREDITED NUMERIC(12,2),  
@TOTALPERQUISITE NUMERIC(12,2),  
@TAXABLEPERQUISITES NUMERIC(12,2),  
@EXEMPTEDALLOWANCES NUMERIC(12,2),  
@GROSSSALARY NUMERIC(12,2),  
@DEDUCTIONUS16 NUMERIC(12,2),  
@INCOMEFROMSALARIES NUMERIC(12,2),  
@ISOTHERINCOMEDETAILSOPTED NUMERIC(12,2),  
@SALARYFROMPREVEMP NUMERIC(12,2),  
@INCOMEFROMHOUSEPROPERTY NUMERIC(12,2),  
--@INCOMEFROMBUSINESS NUMERIC(12,2),  
@CAPITALGAINS NUMERIC(12,2),  
@INCOMEFROMOTHERSOURCES NUMERIC(12,2),  
@OTHERINCOME NUMERIC(12,2),  
@GROSSTOTALINCOME NUMERIC(12,2),  
@TOTALDEDUNDERCHAPTERVIA NUMERIC(12,2),  
@TOTALTAXABLEINCOME NUMERIC(12,2),  
@TAXONTOTALINCOME NUMERIC(13,2),  
@SURCHARGE NUMERIC(12,2),  
@EDUCATIONCESS NUMERIC(12,2),  
@TOTALINCOMETAXPAYABLE NUMERIC(12,2),  
@RELIEFUS89 NUMERIC(12,2),  
@NETTAXPAYABLE NUMERIC(12,2),  
@TDSITDEDUCTED NUMERIC(12,2),  
@TDSSURCHARGEDEDUCTED NUMERIC(12,2),  
@EDUCESSDEDUCTED NUMERIC(12,2),  
@PREVEMPINCOMETAX NUMERIC(12,2),  
@PREVEMPSURCHARGE NUMERIC(12,2),  
@PREVEMPCESS NUMERIC(12,2),  
@MANUALINCOMETAX NUMERIC(12,2),  
@MANUALSURCHARGE NUMERIC(12,2),  
@MANUALCESS NUMERIC(12,2),  
@TOTALTDS NUMERIC(12,2),  
@TAXPAYABLE NUMERIC(12,2),
 @PANLL1 VARCHAR(10) = NULL, 
 @NAMELL1 VARCHAR(75) = NULL, 
 @PANLL2 VARCHAR(10)= NULL, 
 @NAMELL2 VARCHAR(75) = NULL,
 @PANLL3 VARCHAR(10) = NULL, 
 @NAMELL3 VARCHAR(75) = NULL, 
 @PANLL4 VARCHAR(10) = NULL, 
 @NAMELL4 VARCHAR(75) = NULL, 
 @PANLEND1 VARCHAR(10) = NULL, 
 @NAMELEND1 VARCHAR(75) = NULL, 
 @PANLEND2 VARCHAR(10) = NULL, 
 @NAMELEND2 VARCHAR(75) = NULL, 
 @PANLEND3 VARCHAR(10) = NULL, 
 @NAMELEND3 VARCHAR(75) = NULL, 
 @PANLEND4 VARCHAR(10) = NULL, 
 @NAMELEND4 VARCHAR(75) = NULL, 
 @SAFNAME VARCHAR(75) = NULL,
 @SAFFROMDATE SMALLDATETIME = NULL, 
 @SAFTODATE SMALLDATETIME = NULL, 
 @AMTREPAID NUMERIC(12,2) = NULL, 
 @SAFTAXRATE NUMERIC(7,4) = NULL, 
 @SAFTAXDEDUCTED NUMERIC(12,2) = NULL  
AS  
 BEGIN  
	UPDATE SALARYDETAIL SET  BASICSALARY = @BASICSALARY, TAXABLEALLOWANCE= @TAXABLEALLOWANCE,  
		PERKACCUNFURNISHED = @PERKACCUNFURNISHED, PERKFURNISHEDVALUE = @PERKFURNISHEDVALUE,  
		COSTOFFURNITURE = @COSTOFFURNITURE, FURNITURERENTALS = @FURNITURERENTALS,  
		PERQVALUEOFFURNITURE = @PERQVALUEOFFURNITURE,PERKFURNISHEDTOTAL = @PERKFURNISHEDTOTAL,  
		RENTPAIDBYEMP = @RENTPAIDBYEMP, VALUEOFPERQUISITES = @VALUEOFPERQUISITES,  
		CONVEYANCE = @CONVEYANCE, REMUNERATION = @REMUNERATION, TAXABLELTC = @TAXABLELTC,  
		OTHERBENEFITS = @OTHERBENEFITS, PFINEXCESSOF12PERC = @PFINEXCESSOF12PERC,  
		EXCESSINTERESTCREDITED = @EXCESSINTERESTCREDITED, TOTALPERQUISITE = @TOTALPERQUISITE,  
		TAXABLEPERQUISITES = @TAXABLEPERQUISITES, EXEMPTEDALLOWANCES = @EXEMPTEDALLOWANCES,  
		GROSSSALARY = @GROSSSALARY, DEDUCTIONUS16 = @DEDUCTIONUS16, INCOMEFROMSALARIES = @INCOMEFROMSALARIES,  
		ISOTHERINCOMEDETAILSOPTED = @ISOTHERINCOMEDETAILSOPTED ,SALARYFROMPREVEMP = @SALARYFROMPREVEMP,  
		INCOMEFROMHOUSEPROPERTY = @INCOMEFROMHOUSEPROPERTY,--INCOMEFROMBUSINESS=@INCOMEFROMBUSINESS,  
		CAPITALGAINS = @CAPITALGAINS, INCOMEFROMOTHERSOURCES = @INCOMEFROMOTHERSOURCES, OTHERINCOME = @OTHERINCOME,  
		GROSSTOTALINCOME = @GROSSTOTALINCOME, TOTALDEDUNDERCHAPTERVIA = @TOTALDEDUNDERCHAPTERVIA,  
		TOTALTAXABLEINCOME = @TOTALTAXABLEINCOME, TAXONTOTALINCOME = @TAXONTOTALINCOME,  
		SURCHARGE = @SURCHARGE, EDUCATIONCESS = @EDUCATIONCESS, TOTALINCOMETAXPAYABLE = @TOTALINCOMETAXPAYABLE,  
		RELIEFUS89 = @RELIEFUS89, NETTAXPAYABLE = @NETTAXPAYABLE, TDSITDEDUCTED = @TDSITDEDUCTED,  
		TDSSURCHARGEDEDUCTED = @TDSSURCHARGEDEDUCTED, EDUCESSDEDUCTED = @EDUCESSDEDUCTED,  
		PREVEMPINCOMETAX = @PREVEMPINCOMETAX, PREVEMPSURCHARGE = @PREVEMPSURCHARGE, PREVEMPCESS = @PREVEMPCESS,  
		MANUALINCOMETAX = @MANUALINCOMETAX, MANUALSURCHARGE = @MANUALSURCHARGE, MANUALCESS = @MANUALCESS,  
		TOTALTDS = @TOTALTDS, TAXPAYABLE = @TAXPAYABLE, PANLL1 = @PANLL1, NAMELL1 = @NAMELL1, PANLL2 = @PANLL2, 
		NAMELL2 = @NAMELL2, PANLL3 = @PANLL3, NAMELL3 = @NAMELL3, PANLL4 = @PANLL4, NAMELL4 = @NAMELL4, 
		PANLEND1 = @PANLEND1, NAMELEND1 = @NAMELEND1, PANLEND2 = @PANLEND2, NAMELEND2 = @NAMELEND2, PANLEND3 = @PANLEND3, 
		NAMELEND3 = @NAMELEND3, PANLEND4 = @PANLEND4, NAMELEND4 = @NAMELEND4, SAFNAME = @SAFNAME, SAFFROMDATE = @SAFFROMDATE, 
		SAFTODATE = @SAFTODATE, AMTREPAID = @AMTREPAID, SAFTAXRATE = @SAFTAXRATE, SAFTAXDEDUCTED = @SAFTAXDEDUCTED
	WHERE SALARYDETAILID = @SALARYDETAILID  
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateSalaryFromPrevEmp')
DROP PROCEDURE USP_TDS_UpdateSalaryFromPrevEmp
GO
CREATE PROCEDURE USP_TDS_UpdateSalaryFromPrevEmp
@COMIDS NVARCHAR(MAX)
AS
BEGIN
		DECLARE @STATUS TABLE(SALARY NUMERIC(13,2), BRANCHID INT, COMID INT, MONTHID INT);
		DECLARE @FINALSTATUS TABLE(ID INT IDENTITY(1,1), SALARY NUMERIC(13,2), BRANCHID INT, COMID INT, C80CAMOUNT NUMERIC(13,2), C80GROSSAMOUNT NUMERIC(13,2), C80DEDUCTIBLEAMOUNT NUMERIC(13,2));
		DECLARE @COMID INT, @MONTHID INT,@BRANCHID INT, @LASTBRANCHID INT, @BASICSALARY NUMERIC(13,2), @LASTCOMID INT, @GROSSSALARY NUMERIC(13,2), @80TTA NUMERIC(13,2);
		DECLARE @C80CAMOUNT NUMERIC(13,2), @C80GROSSAMOUNT NUMERIC(13,2), @C80DEDUCTIBLEAMOUNT NUMERIC(13,2);
		SET @LASTBRANCHID = 0;
		SET @BASICSALARY = 0;
		SET @GROSSSALARY = 0;
		SET @LASTCOMID = 0;
		SET @C80CAMOUNT = 0;
		SET @C80GROSSAMOUNT = 0;
		SET @C80DEDUCTIBLEAMOUNT = 0;
		SELECT * INTO #COMIDS FROM dbo.UDF_TDS_SPLITSTRING(@COMIDS,',');
		SELECT CASE WHEN MONTHID = 1 THEN 13 WHEN MONTHID = 2 THEN 14 WHEN MONTHID = 3 THEN 15 ELSE MONTHID END AS MONTHID, BRANCHID, COMID 
		INTO #EMPWM
		FROM EMPWORKMONTH EM
		INNER JOIN #COMIDS C ON C.DATA = EM.COMID
		ORDER BY COMID,MONTHID
		DECLARE SALARY_CURSOR CURSOR FOR 
		SELECT MONTHID,BRANCHID, COMID FROM #EMPWM
		OPEN SALARY_CURSOR
		FETCH NEXT FROM SALARY_CURSOR 
		INTO @MONTHID, @BRANCHID, @COMID
		SELECT @C80GROSSAMOUNT = GROSSAMOUNT FROM CHAPTERVIADET WHERE COMID = @COMID AND SALARYSECTIONID = 3
		SELECT @C80DEDUCTIBLEAMOUNT = DEDUCTIBLEAMOUNT FROM CHAPTERVIADET WHERE COMID = @COMID AND SALARYSECTIONID = 3
		IF(@LASTBRANCHID = 0)
		 BEGIN
			SET @LASTBRANCHID = @BRANCHID
			SET @LASTCOMID = @COMID
		 END
			WHILE @@FETCH_STATUS = 0
			BEGIN  
				SELECT @GROSSSALARY = @GROSSSALARY + ISNULL(SUM(BASICSALARY),0) + ISNULL(SUM(TAXABLEALLOWANCE),0) , 
						   @BASICSALARY = ISNULL(SUM(BASICSALARY),0) + ISNULL(SUM(TAXABLEALLOWANCE),0)    			
					FROM  
					(  
					 SELECT EARNING, MONTHID,
					 CASE WHEN INCLUDEUS10 = 1 THEN SUM(ISNULL(NETAMT,0)) END AS TAXABLEALLOWANCE ,  
					 CASE WHEN INCLUDEUS10 =  0   
					   THEN   
						CASE WHEN EARNING = 1   
						 THEN SUM(ISNULL(NETAMT,0))   
						 ELSE -1 * SUM(ISNULL(NETAMT,0))
						END  
					  END AS BASICSALARY
					 FROM SALDETAIL SD
					 INNER JOIN SALARYHEAD SH ON SD.SALARYHEADID = SH.SALARYHEADID  			
					 WHERE SH.INCLUDEINTAX = 1 AND ISNULL(SH.C80CID,-1) <=0  AND COMID = @COMID AND 
							   MONTHID = CASE WHEN @MONTHID = 13 THEN 1 WHEN @MONTHID = 14 THEN 2 WHEN @MONTHID = 15 THEN 3 ELSE @MONTHID END
					 GROUP BY EARNING, INCLUDEUS10, MONTHID  
					)S  
					GROUP BY MONTHID
					SELECT @C80CAMOUNT = @C80CAMOUNT + ISNULL(SUM(C80C),0)
					FROM  
					(  
					 SELECT MONTHID, SUM(ISNULL(NETAMT,0)) AS C80C
					 FROM SALDETAIL SD
					 INNER JOIN SALARYHEAD SH ON SD.SALARYHEADID = SH.SALARYHEADID  			
					 WHERE SH.INCLUDEINTAX = 1 AND ISNULL(SH.C80CID,-1) > 0  AND COMID = @COMID AND ISNULL(INCLUDEUS10,0) = 0 AND 
							   MONTHID = CASE WHEN @MONTHID = 13 THEN 1 WHEN @MONTHID = 14 THEN 2 WHEN @MONTHID = 15 THEN 3 ELSE @MONTHID END
					 GROUP BY MONTHID  
					)S  
					GROUP BY MONTHID
				   SELECT @GROSSSALARY = @GROSSSALARY - (ISNULL(S16.GROSSAMT1,0) + ISNULL(S16.GROSSAMT2,0)),
								@BASICSALARY = ISNULL(S16.GROSSAMT1,0) + ISNULL(S16.GROSSAMT2,0)		
					 FROM SECTION16DET S16
					 WHERE COMID = @COMID AND MONTHID = CASE WHEN @MONTHID = 13 THEN 1 WHEN @MONTHID = 14 THEN 2 WHEN @MONTHID = 15 THEN 3 ELSE @MONTHID END
				   SELECT @GROSSSALARY = @GROSSSALARY + ISNULL(SUM(ISNULL(T.TAXABLEAMT,0)),0),
								@BASICSALARY = SUM(ISNULL(T.TAXABLEAMT,0))		
					 FROM TAXABLEPERQUISITE T
					 WHERE COMID = @COMID AND MONTHID = CASE WHEN @MONTHID = 13 THEN 1 WHEN @MONTHID = 14 THEN 2 WHEN @MONTHID = 15 THEN 3 ELSE @MONTHID END
								AND T.PERKID <> 21
   				   INSERT INTO @STATUS(SALARY, BRANCHID, COMID, MONTHID) VALUES(@BASICSALARY, @BRANCHID, @COMID, @MONTHID)
				   FETCH NEXT FROM SALARY_CURSOR 
				   INTO @MONTHID, @BRANCHID, @COMID
				   IF(@LASTCOMID = @COMID)
					 BEGIN
						  IF(@LASTBRANCHID <> @BRANCHID)
							BEGIN
								SELECT @C80GROSSAMOUNT = GROSSAMOUNT, @C80DEDUCTIBLEAMOUNT = DEDUCTIBLEAMOUNT FROM CHAPTERVIADET WHERE COMID = @COMID AND SALARYSECTIONID = 3		
   								INSERT INTO @FINALSTATUS(SALARY, BRANCHID, COMID,C80CAMOUNT,C80GROSSAMOUNT, C80DEDUCTIBLEAMOUNT) VALUES(@GROSSSALARY, @LASTBRANCHID, @LASTCOMID,@C80CAMOUNT,@C80GROSSAMOUNT, @C80DEDUCTIBLEAMOUNT)
   			   					SET @BASICSALARY = 0;
  								SET @GROSSSALARY = 0;  	
  								SET @C80CAMOUNT = 0;
  								SET @LASTBRANCHID = @BRANCHID
 							END 		
					 END
				   ELSE
					BEGIN		
						SELECT @C80GROSSAMOUNT = GROSSAMOUNT, @C80DEDUCTIBLEAMOUNT = DEDUCTIBLEAMOUNT FROM CHAPTERVIADET WHERE COMID = @COMID AND SALARYSECTIONID = 3								
  						INSERT INTO @FINALSTATUS(SALARY, BRANCHID, COMID,C80CAMOUNT,C80GROSSAMOUNT, C80DEDUCTIBLEAMOUNT) VALUES(@GROSSSALARY, @LASTBRANCHID, @LASTCOMID,@C80CAMOUNT,@C80GROSSAMOUNT, @C80DEDUCTIBLEAMOUNT)
  						SET @BASICSALARY = 0;
  						SET @GROSSSALARY = 0; 		
  						SET @C80CAMOUNT = 0;
  						SET @LASTCOMID = @COMID
  						SET @LASTBRANCHID = @BRANCHID	
					END 
			END 
					CLOSE SALARY_CURSOR;
					DEALLOCATE SALARY_CURSOR;
					INSERT INTO @FINALSTATUS(SALARY, BRANCHID, COMID, C80CAMOUNT, C80GROSSAMOUNT, C80DEDUCTIBLEAMOUNT) VALUES(@GROSSSALARY, @LASTBRANCHID, @LASTCOMID, @C80CAMOUNT,@C80GROSSAMOUNT, @C80DEDUCTIBLEAMOUNT)
					SELECT F1.ID, F1.COMID,F1.SALARY, F1.BRANCHID, (SELECT SUM(SALARY) FROM @FINALSTATUS F2 WHERE F2.COMID = F1.COMID AND F2.ID <= F1.ID) - F1.SALARY 
					--					- ISNULL((SELECT SUM(F3.SALARY) FROM @FINALSTATUS F3 WHERE F3.COMID = F1.COMID AND F3.BRANCHID = F1.BRANCHID AND F3.ID < F1.ID),0) 
					AS SALARYFROMPREV
					INTO #FINAL
					FROM @FINALSTATUS F1
					SELECT F1.ID, F1.COMID,F1.SALARY,F1.BRANCHID,ISNULL((SELECT SUM(C80CAMOUNT) FROM @FINALSTATUS F2 WHERE F2.COMID = F1.COMID AND F2.ID <= F1.ID) 
					+ ISNULL((SELECT SUM(F3.C80CAMOUNT) FROM @FINALSTATUS F3 WHERE F3.COMID = F1.COMID AND F3.BRANCHID = F1.BRANCHID AND F3.ID < F1.ID),0),0) + ISNULL(F1.C80GROSSAMOUNT,0) AS C80CGROSSAMOUNT,
					ISNULL((SELECT SUM(C80CAMOUNT) FROM @FINALSTATUS F2 WHERE F2.COMID = F1.COMID AND F2.ID <= F1.ID) 
					+ ISNULL((SELECT SUM(F3.C80CAMOUNT) FROM @FINALSTATUS F3 WHERE F3.COMID = F1.COMID AND F3.BRANCHID = F1.BRANCHID AND F3.ID < F1.ID),0),0) + ISNULL(F1.C80DEDUCTIBLEAMOUNT,0) AS C80CDEDUCTIBLEAMOUNT
					INTO #FINAL1
					FROM @FINALSTATUS F1	
					SELECT @80TTA = DEDUCTIBLEAMOUNT FROM CHAPTERVIADETAIL CVIA
					INNER JOIN SALARYDETAIL SD ON SD.SALARYDETAILID = CVIA.SALARYDETAILID 
					INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
					INNER JOIN EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID
					INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID
					INNER JOIN #FINAL F1 ON F1.COMID = LC.COMID AND F1.BRANCHID = LC.BRANCHID
					WHERE SALARYSECTIONID = 18
					UPDATE SALARYDETAIL SET SALARYFROMPREVEMP = ROUND(F1.SALARYFROMPREV,0),
														  OTHERINCOME = ROUND(F1.SALARYFROMPREV,0) + ISNULL(INCOMEFROMHOUSEPROPERTY,0) + ISNULL(CAPITALGAINS,0) + ISNULL(INCOMEFROMOTHERSOURCES,0) + ISNULL(@80TTA,0),
														  GROSSTOTALINCOME = ROUND(F1.SALARYFROMPREV,0) + ISNULL(INCOMEFROMHOUSEPROPERTY,0) + ISNULL(CAPITALGAINS,0) + ISNULL(INCOMEFROMOTHERSOURCES,0) + ISNULL(@80TTA,0) + ISNULL(INCOMEFROMSALARIES,0)													   
					FROM SALARYDETAIL SD
					INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
					INNER JOIN EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID
					INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID
					INNER JOIN #FINAL F1 ON F1.COMID = LC.COMID AND F1.BRANCHID = LC.BRANCHID
					INNER JOIN
					(			
						SELECT MAX(ID)ID ,BRANCHID, COMID FROM #FINAL 
						GROUP BY BRANCHID, COMID
					) F2 ON F1.ID = F2.ID
					UPDATE CHAPTERVIADETAIL SET GROSSAMOUNT = CASE WHEN CVIA.SALARYSECTIONID = 3 THEN F1.C80CGROSSAMOUNT ELSE CVIA.GROSSAMOUNT END,
																 QUALIFYINGAMOUNT = CASE WHEN CVIA.SALARYSECTIONID = 3 THEN F1.C80CGROSSAMOUNT ELSE CVIA.QUALIFYINGAMOUNT END,
										DEDUCTIBLEAMOUNT = CASE WHEN CVIA.SALARYSECTIONID = 3 
																						THEN
																							CASE WHEN F1.C80CDEDUCTIBLEAMOUNT > 100000
																										THEN 100000	
																								ELSE F1.C80CDEDUCTIBLEAMOUNT
																							END																																					
																				ELSE CVIA.DEDUCTIBLEAMOUNT 
																		END
					FROM CHAPTERVIADETAIL CVIA
					INNER JOIN SALARYDETAIL SD ON SD.SALARYDETAILID = CVIA.SALARYDETAILID
					INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
					INNER JOIN EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID
					INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID
					INNER JOIN #FINAL1 F1 ON F1.COMID = LC.COMID AND F1.BRANCHID = LC.BRANCHID
					INNER JOIN
					(			
						SELECT MAX(ID)ID ,BRANCHID, COMID FROM #FINAL1 
						GROUP BY BRANCHID, COMID
					) F2 ON F1.ID = F2.ID
					UPDATE SALARYDETAIL SET TOTALDEDUNDERCHAPTERVIA = ISNULL((SELECT SUM(DEDUCTIBLEAMOUNT) FROM CHAPTERVIADETAIL WHERE SALARYDETAILID = SD.SALARYDETAILID),0),
															TOTALTAXABLEINCOME = GROSSTOTALINCOME - ISNULL((SELECT SUM(DEDUCTIBLEAMOUNT) FROM CHAPTERVIADETAIL WHERE SALARYDETAILID = SD.SALARYDETAILID),0)
					FROM SALARYDETAIL SD
					INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
					INNER JOIN EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID
					INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID
					INNER JOIN #FINAL1 F1 ON F1.COMID = LC.COMID AND F1.BRANCHID = LC.BRANCHID
					INNER JOIN
					(			
						SELECT MAX(ID)ID ,BRANCHID, COMID FROM #FINAL1 
						GROUP BY BRANCHID, COMID
					) F2 ON F1.ID = F2.ID
					UPDATE SALARYDETAIL SET TOTALTAXABLEINCOME = CAST(ROUND((TOTALTAXABLEINCOME)*10/10,-1) AS NUMERIC(13,2))
					FROM SALARYDETAIL SD
					INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
					INNER JOIN EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID
					INNER JOIN LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID
					INNER JOIN #FINAL1 F1 ON F1.COMID = LC.COMID AND F1.BRANCHID = LC.BRANCHID
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateSection16')
DROP PROCEDURE USP_TDS_UpdateSection16
GO
CREATE PROCEDURE USP_TDS_UpdateSection16
	@AMOUNT NUMERIC(13,2),
	@REMARKS VARCHAR(50),
	@SALARYSECTIONID INT,
	@SALARYDETAILID INT	
AS
BEGIN
	UPDATE SECTION16DETAIL
	SET AMOUNT=@AMOUNT,REMARKS=@REMARKS,SALARYSECTIONID=@SALARYSECTIONID
	WHERE SALARYDETAILID=@SALARYDETAILID AND SALARYSECTIONID=@SALARYSECTIONID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATESECTION16DETAILS')
DROP PROCEDURE USP_TDS_UPDATESECTION16DETAILS
GO
CREATE PROCEDURE [USP_TDS_UPDATESECTION16DETAILS]  
@SECTION16DETID INT,  
@GROSSAMT1 NUMERIC(13,2)  
AS  
BEGIN  
  UPDATE SECTION16DET SET GROSSAMT1 = @GROSSAMT1 WHERE SECTION16DETID =    @SECTION16DETID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATESECTIONID')
DROP PROCEDURE USP_TDS_UPDATESECTIONID
GO
CREATE PROCEDURE [USP_TDS_UPDATESECTIONID]
@BRANCHID INT,
@QUARTER INT
AS
BEGIN
	DECLARE @DEDUCTORID INT,@STATUSID INT;
	IF (SELECT COUNT(*) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=1 AND QUARTER=@QUARTER )>0
	BEGIN
		SELECT @DEDUCTORID = DEDUCTORID FROM BRANCHDEDUCTORS WITH(NOLOCK)  WHERE BRANCHID = @BRANCHID AND [QUARTER] = @QUARTER;
		SELECT @STATUSID = DEDUCTORTYPEID FROM DEDUCTOR WITH(NOLOCK) WHERE DEDUCTORID = @DEDUCTORID;
		IF (@STATUSID=1 OR @STATUSID=3 OR @STATUSID=4 OR @STATUSID=7)
			BEGIN
				UPDATE DEDUCTIONDETAIL SET SECTIONID=28 WHERE BRANCHID=@BRANCHID AND FORMID=1 AND QUARTER=@QUARTER AND SECTIONID <> 28;
			END
		ELSE 
			IF (@STATUSID=2 OR @STATUSID=5 OR @STATUSID=6 OR @STATUSID=8)
				BEGIN
					UPDATE DEDUCTIONDETAIL SET SECTIONID=1 WHERE BRANCHID=@BRANCHID AND FORMID=1 AND QUARTER=@QUARTER AND SECTIONID <> 1;
				END
			ELSE
				BEGIN
					UPDATE DEDUCTIONDETAIL SET SECTIONID = 2 WHERE BRANCHID=@BRANCHID AND FORMID=1 AND QUARTER=@QUARTER AND SECTIONID <> 2;
				END
	END
	IF (SELECT COUNT(*) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=1 AND QUARTER=@QUARTER)>0
	BEGIN
		IF (@STATUSID=1 OR @STATUSID=3 OR @STATUSID=4 OR @STATUSID=7)
			BEGIN
				UPDATE CHALLANDETAIL SET SECTIONID=28 WHERE BRANCHID=@BRANCHID AND FORMID=1 AND QUARTER=@QUARTER AND SECTIONID<>28;
			END
		ELSE
			IF (@STATUSID=2 OR @STATUSID=5 OR @STATUSID=6 OR @STATUSID=8)
				BEGIN
					UPDATE CHALLANDETAIL SET SECTIONID=1 WHERE BRANCHID=@BRANCHID AND FORMID=1 AND QUARTER=@QUARTER AND SECTIONID<>1;
				END
			ELSE
				BEGIN
					UPDATE CHALLANDETAIL SET SECTIONID=2 WHERE BRANCHID=@BRANCHID AND FORMID=1 AND QUARTER=@QUARTER AND SECTIONID<>2;
				END
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATESERIALNO')
DROP PROCEDURE USP_TDS_UPDATESERIALNO
GO
CREATE PROCEDURE [USP_TDS_UPDATESERIALNO]
 @BRANCHID INT,
 @FORMID INT
AS
 BEGIN
 DECLARE @PANREF VARCHAR(5);
  SET NOCOUNT ON
   IF(@FORMID = 1)
     BEGIN
    UPDATE EMPLOYEE SET SERIALNO = 0
    FROM EMPLOYEE E
    INNER JOIN DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID
    WHERE D.BRANCHID = @BRANCHID
    UPDATE EMPLOYEE SET SERIALNO = EE.SERIALNO
    FROM EMPLOYEE E
    INNER JOIN
    (
  SELECT ROW_NUMBER() OVER (PARTITION BY D.BRANCHID ORDER BY D.DEDUCTEEID)SERIALNO, D.DEDUCTEEID FROM EMPLOYEE E WITH(NOLOCK)
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
  WHERE D.BRANCHID = @BRANCHID
    )EE
    ON EE.DEDUCTEEID = E.DEDUCTEEID
    UPDATE DEDUCTEE SET CODE = 0
    FROM DEDUCTEE D
    INNER JOIN EMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
    WHERE BRANCHID = @BRANCHID
    END
   ELSE
     BEGIN
  UPDATE NONEMPLOYEE SET SERIALNO = 0
  FROM NONEMPLOYEE E
  INNER JOIN DEDUCTEE D ON E.DEDUCTEEID = D.DEDUCTEEID
  WHERE D.BRANCHID = @BRANCHID
  UPDATE NONEMPLOYEE SET SERIALNO = NEE.SERIALNO
    FROM NONEMPLOYEE NE
    INNER JOIN
    (
  SELECT ROW_NUMBER() OVER (PARTITION BY D.BRANCHID ORDER BY D.DEDUCTEEID)SERIALNO, D.DEDUCTEEID FROM NONEMPLOYEE E WITH(NOLOCK)
  INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
  WHERE D.BRANCHID = @BRANCHID
    )NEE
    ON NEE.DEDUCTEEID = NE.DEDUCTEEID
       UPDATE DEDUCTEE SET CODE = E.DEDUCTEECODE
    FROM DEDUCTEE D
    INNER JOIN NONEMPLOYEE E ON D.DEDUCTEEID = E.DEDUCTEEID
    WHERE BRANCHID = @BRANCHID
     END
   UPDATE DEDUCTIONDETAIL SET SERIALNO = 0 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = 1
   UPDATE DEDUCTIONDETAIL SET PARTPAYMENTID = 0 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = 1
   UPDATE PARTPAYMENTDETAILS SET PARTPAYMENTID = 0 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = 1
   UPDATE CHALLANDETAIL SET SERIALNO = 0 WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = 1
   UPDATE DEDUCTIONDETAIL SET SERIALNO = D.SERIALNO
   FROM DEDUCTIONDETAIL DD
   INNER JOIN
   (
    SELECT ROW_NUMBER() OVER (PARTITION BY BRANCHID, FORMID, QUARTER ORDER BY BRANCHID)SERIALNO, BRANCHID, FORMID, QUARTER, DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK)
    WHERE BRANCHID = @BRANCHID
   )D
   ON DD.DEDUCTIONID = D.DEDUCTIONID AND DD.BRANCHID = D.BRANCHID AND DD.FORMID = D.FORMID AND DD.QUARTER = D.QUARTER
   UPDATE DEDUCTIONDETAIL SET PARTPAYMENTID = D.PARTPAYMENTID
   FROM DEDUCTIONDETAIL DD
   INNER JOIN
   (
    SELECT ROW_NUMBER() OVER (PARTITION BY BRANCHID, FORMID, QUARTER ORDER BY BRANCHID)PARTPAYMENTID, BRANCHID, FORMID, QUARTER, DEDUCTIONID FROM DEDUCTIONDETAIL WITH(NOLOCK)
    WHERE BRANCHID = @BRANCHID
   )D
   ON DD.DEDUCTIONID = D.DEDUCTIONID AND DD.BRANCHID = D.BRANCHID AND DD.FORMID = D.FORMID AND DD.QUARTER = D.QUARTER
    UPDATE PARTPAYMENTDETAILS SET PARTPAYMENTID = P.PARTPAYMENTID
    FROM PARTPAYMENTDETAILS PP
    INNER JOIN
    (
  SELECT ROW_NUMBER() OVER (PARTITION BY BRANCHID, FORMID, QUARTER ORDER BY BRANCHID)PARTPAYMENTID, BRANCHID, FORMID, QUARTER, PARTDETAILID FROM PARTPAYMENTDETAILS WITH(NOLOCK)
  WHERE BRANCHID = @BRANCHID
    )P
    ON PP.PARTDETAILID = P.PARTDETAILID AND PP.BRANCHID = P.BRANCHID AND PP.FORMID = P.FORMID AND PP.QUARTER = P.QUARTER
    UPDATE CHALLANDETAIL SET SERIALNO = C.SERIALNO
   FROM CHALLANDETAIL CC
   INNER JOIN
   (
    SELECT ROW_NUMBER() OVER (PARTITION BY BRANCHID, FORMID, QUARTER ORDER BY BRANCHID)SERIALNO, BRANCHID, FORMID, QUARTER, CHALLANID FROM CHALLANDETAIL WITH(NOLOCK)
    WHERE BRANCHID = @BRANCHID
   )C
   ON CC.CHALLANID = C.CHALLANID AND CC.BRANCHID = C.BRANCHID AND CC.FORMID = C.FORMID AND CC.QUARTER = C.QUARTER
    UPDATE NONEMPLOYEE SET STATUS = NULL
    UPDATE DEDUCTEE SET ENTRYBRANCHID = NULL
   SET NOCOUNT OFF
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATETAN')
DROP PROCEDURE USP_TDS_UPDATETAN
GO
CREATE PROCEDURE [USP_TDS_UPDATETAN]
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@TAN VARCHAR(10)
AS
	BEGIN
		IF EXISTS (SELECT BRANCHID FROM CORRDEDUCTOR WITH(NOLOCK) WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND CORRECTIONSTATUS = 6)
		BEGIN
			UPDATE CORRDEDUCTOR SET [TAN]=@TAN WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND CORRECTIONSTATUS = 6;
		END
		ELSE
		BEGIN
			INSERT INTO CORRDEDUCTOR(BRANCHID,FORMID,[QUARTER],DEDUCTORID,DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,ISADDRCHANGED,STDCODE,PHONENO,
								 EMAILADDRESS,PAN,[TAN],LASTTAN,FINANCIALYEAR,STATUSID,DEDUCTORTYPEID,GOVTADDSTATEID,GOVTADDPAOCODE,GOVTADDPAOREGNNO,GOVTADDDDOCODE,GOVTADDDDOREGNNO,GOVTADDMINISTRY,GOVTADDOTHERNAME,
								 RPNAME,RPDESIGNATION,RPADDRESS1,RPADDRESS2,RPADDRESS3,RPADDRESS4,RPADDRESS5,RPSTATEID,RPPINCODE,RPISADDRCHANGED,RPSTDCODE,RPPHONENO,RPEMAILADDRESS,CORRECTIONSTATUS)
			SELECT					 BRANCHID,FORMID,[QUARTER],DEDUCTORID,DEDUCTORNAME,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,ADDRESS5,PINCODE,STATEID,ISADDRCHANGED,STDCODE,PHONENO,
									 EMAILADDRESS,PAN,@TAN,[TAN],FINANCIALYEAR,STATUSID,DEDUCTORTYPEID,GOVTADDSTATEID,GOVTADDPAOCODE,GOVTADDPAOREGNNO,GOVTADDDDOCODE,GOVTADDDDOREGNNO,GOVTADDMINISTRY,GOVTADDOTHERNAME,
									 RPNAME,RPDESIGNATION,RPADDRESS1,RPADDRESS2,RPADDRESS3,RPADDRESS4,RPADDRESS5,RPSTATEID,RPPINCODE,RPISADDRCHANGED,RPSTDCODE,RPPHONENO,RPEMAILADDRESS,6 AS CORRECTIONSTATUS
			FROM CORRDEDUCTOR WHERE BRANCHID=@BRANCHID AND FORMID=@FORMID AND [QUARTER]=@QUARTER AND CORRECTIONSTATUS = 1 ;
		END
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateTaxablePerquiste')
DROP PROCEDURE USP_TDS_UpdateTaxablePerquiste
GO
CREATE PROCEDURE USP_TDS_UpdateTaxablePerquiste
@DEDUCTEEID INT,        
@COMID INT
AS        
 BEGIN        
   DECLARE @SALARYDETAILID INT,@BRANCHID INT, @PERKACCUNFURNISHED NUMERIC(13,2),   
   @VALUEOFPERQUISITES NUMERIC(13,2), @TAXABLEPERQUISITES NUMERIC(13,2), @PROFITLIEU NUMERIC(13,2),  
   @OTHERBENEFITS NUMERIC(13,2), @INCOMEFROMSALARIES NUMERIC(13,2), @REFERENCENO VARCHAR(15),
   @OTHERINCOME NUMERIC(13,2);
   SET @SALARYDETAILID =-1;
   SELECT @BRANCHID = BRANCHID, @REFERENCENO = REFERENCENO FROM DEDUCTEE WITH(NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID;
    SELECT @TAXABLEPERQUISITES = SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE TA WITH (NOLOCK) 
					INNER JOIN LINKTOTC LC WITH (NOLOCK) ON TA.COMID = LC.COMID
					INNER JOIN EMPWORKMONTH EM WITH (NOLOCK) ON EM.BRANCHID = LC.BRANCHID AND EM.COMID = LC.COMID AND EM.MONTHID = TA.MONTHID
    WHERE TA.COMID = @COMID AND PERKID <> 21 AND LC.BRANCHID = @BRANCHID 
    SELECT @PROFITLIEU = SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE TA WITH (NOLOCK) 
					INNER JOIN LINKTOTC LC WITH (NOLOCK) ON TA.COMID = LC.COMID
					INNER JOIN EMPWORKMONTH EM WITH (NOLOCK) ON EM.BRANCHID = LC.BRANCHID AND EM.COMID = LC.COMID AND EM.MONTHID = TA.MONTHID
    WHERE TA.COMID = @COMID AND PERKID = 21 AND LC.BRANCHID = @BRANCHID
    SELECT @OTHERBENEFITS = SUM(TAXABLEAMT) FROM TAXABLEPERQUISITE TA WITH (NOLOCK) 
					INNER JOIN LINKTOTC LC WITH (NOLOCK) ON TA.COMID = LC.COMID
					INNER JOIN EMPWORKMONTH EM WITH (NOLOCK) ON EM.BRANCHID = LC.BRANCHID AND EM.COMID = LC.COMID AND EM.MONTHID = TA.MONTHID
    WHERE TA.COMID = @COMID AND PERKID = 16 AND LC.BRANCHID = @BRANCHID
     SELECT @INCOMEFROMSALARIES = INCOMEFROMSALARIES FROM SALARYDETAIL WHERE SALARYDETAILID IN
		(
			SELECT MAX(SALARYDETAILID)
			FROM DEDUCTEE D WITH(NOLOCK)
			INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID
			INNER JOIN LINKTOTC LC WITH(NOLOCK) ON LC.EMPLOYEEID = E.EMPLOYEEID		
			INNER JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.DEDUCTEEID = D.DEDUCTEEID
			WHERE REFERENCENO = @REFERENCENO AND LC.BRANCHID <> @BRANCHID
		)
 IF EXISTS(SELECT SALARYDETAILID FROM SALARYDETAIL WITH (NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID)        
      BEGIN        
		SELECT @SALARYDETAILID = SALARYDETAILID FROM SALARYDETAIL WITH (NOLOCK) WHERE DEDUCTEEID = @DEDUCTEEID    
		 SELECT @OTHERINCOME = ISNULL(@INCOMEFROMSALARIES,0) + ISNULL(INCOMEFROMHOUSEPROPERTY,0) + ISNULL(INCOMEFROMBUSINESS,0) + ISNULL(CAPITALGAINS,0) + 
				ISNULL(INCOMEFROMOTHERSOURCES,0) FROM SALARYDETAIL WITH(NOLOCK) 				
		WHERE BRANCHID = @BRANCHID AND DEDUCTEEID = @DEDUCTEEID
		UPDATE SALARYDETAIL SET PERKACCUNFURNISHED = @PERKACCUNFURNISHED, VALUEOFPERQUISITES = @VALUEOFPERQUISITES,      
		 TOTALPERQUISITE = @TAXABLEPERQUISITES, TAXABLEPERQUISITES = @TAXABLEPERQUISITES, EXEMPTEDALLOWANCES = 0,    
		 OTHERINCOME = ISNULL(@OTHERINCOME,0),
		 PROFITLIEU = @PROFITLIEU,GROSSSALARY = BASICSALARY + ISNULL(@TAXABLEPERQUISITES,0) + TAXABLEALLOWANCE,
		 INCOMEFROMSALARIES = BASICSALARY + ISNULL(@TAXABLEPERQUISITES,0) + TAXABLEALLOWANCE + ISNULL(DEDUCTIONUS16,0),
		 GROSSTOTALINCOME = BASICSALARY + ISNULL(@TAXABLEPERQUISITES,0) + TAXABLEALLOWANCE + ISNULL(DEDUCTIONUS16,0) +  ISNULL(@OTHERINCOME,0)
		 WHERE DEDUCTEEID = @DEDUCTEEID
      END        
    ELSE        
      BEGIN        
		   INSERT INTO SALARYDETAIL(DEDUCTEEID, BRANCHID, PERKACCUNFURNISHED,VALUEOFPERQUISITES,TOTALPERQUISITE,      
		      TAXABLEPERQUISITES,PROFITLIEU, BASICSALARY,OTHERBENEFITS, SALARYFROMPREVEMP, OTHERINCOME)		        
		   VALUES(@DEDUCTEEID, @BRANCHID, @PERKACCUNFURNISHED,ISNULL(@VALUEOFPERQUISITES,0), ISNULL(@TAXABLEPERQUISITES,0), 
		 ISNULL(@TAXABLEPERQUISITES,0),ISNULL(@PROFITLIEU,0),@TAXABLEPERQUISITES,ISNULL(@OTHERBENEFITS,0),ISNULL(@INCOMEFROMSALARIES,0),ISNULL(@INCOMEFROMSALARIES,0))      
		   SET @SALARYDETAILID = SCOPE_IDENTITY();      
      END      
      SELECT @SALARYDETAILID;    
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATETDSAMOUNT')
DROP PROCEDURE USP_TDS_UPDATETDSAMOUNT
GO
CREATE PROCEDURE USP_TDS_UPDATETDSAMOUNT 
AS
 BEGIN
	UPDATE SALARYDETAIL 
	SET TDSITDEDUCTED = D.TOTALINCOMETAX, 
		TDSSURCHARGEDEDUCTED = D.TOTALSURCHARGE, 
		EDUCESSDEDUCTED = D.TOTALEDUCATIONCESS,
		TOTALTDS = (   D.TOTALINCOMETAX
					 + D.TOTALSURCHARGE
					 + D.TOTALEDUCATIONCESS
					 + SD.PREVEMPINCOMETAX
					 + SD.PREVEMPSURCHARGE
					 + SD.PREVEMPCESS 
					 + SD.MANUALINCOMETAX
					 + SD.MANUALSURCHARGE
					 + SD.MANUALCESS
				   )
	FROM 
		(
			SELECT DEDUCTEEID, BRANCHID, 
				   SUM(DD.INCOMETAX) TOTALINCOMETAX, 
				   SUM(DD.SURCHARGE) TOTALSURCHARGE, 
				   SUM(DD.EDUCATIONCESS) TOTALEDUCATIONCESS 
			FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
			WHERE FORMID = 1
			GROUP BY DEDUCTEEID, BRANCHID
		) D
	INNER JOIN SALARYDETAIL SD
		ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATETDSFROMPREVEMP')
DROP PROCEDURE USP_TDS_UPDATETDSFROMPREVEMP
GO
CREATE PROCEDURE USP_TDS_UPDATETDSFROMPREVEMP
@COMIDS NVARCHAR(MAX)  
AS  
BEGIN           
  CREATE  TABLE #STATUS(TOTALDEDUCTED NUMERIC(13,2), BRANCHID INT,MONTHID INT, DEDUCTEEID INT, COMID INT);  
  CREATE TABLE #FINALSTATUS (ID INT IDENTITY(1,1), TOTALDEDUCTED NUMERIC(13,2), BRANCHID INT, DEDUCTEEID INT, COMID INT)    
  DECLARE @MONTHID INT,@BRANCHID INT, @LASTBRANCHID INT, @DEDUCTEEID INT , @LASTDEDUCTEEID INT, @COMID INT, @LASTCOMID INT;  
  DECLARE @TOTALDEDUCTED NUMERIC(13,2), @DEDUCTEDAMT NUMERIC(13,2);  
  SET @LASTBRANCHID = 0;    
  SET @LASTCOMID = 0;  
  SET @TOTALDEDUCTED = 0;  
  SET @DEDUCTEDAMT = 0;  
  SELECT * INTO #COMIDS FROM DBO.UDF_TDS_SPLITSTRING(@COMIDS,',');  
  SELECT LTC.COMID,LTC.BRANCHID,LTC.EMPLOYEEID
  INTO #LINKTOTC
   FROM LINKTOTC LTC WITH(NOLOCK)
  INNER JOIN #COMIDS C
  ON C.DATA=LTC.COMID
  GROUP BY LTC.COMID,LTC.BRANCHID,LTC.EMPLOYEEID
  SELECT D.BRANCHID,D.DEDUCTEEID,D.EMPTYPE
  INTO #DEDUCTEE
   FROM DEDUCTEE D WITH(NOLOCK)
  INNER JOIN #LINKTOTC LTC
  ON LTC.BRANCHID=D.BRANCHID
  GROUP BY D.BRANCHID,D.DEDUCTEEID,D.EMPTYPE
  SELECT E.EMPLOYEEID,E.DEDUCTEEID 
   INTO #EMPLOYEE
   FROM EMPLOYEE E WITH(NOLOCK)
  INNER JOIN #DEDUCTEE D
  ON D.DEDUCTEEID=E.DEDUCTEEID
  GROUP BY E.EMPLOYEEID,E.DEDUCTEEID
   SELECT DD.TOTALDEDUCTED,DD.TRANSSTATUS,DD.DEDUCTEEID,DD.PAYMENTDATE,DD.DEDUCTIONID
     INTO #DEDUCTIONDETAIL
     FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
  INNER JOIN #DEDUCTEE D
  ON D.DEDUCTEEID =DD.DEDUCTEEID
   WHERE DD.TRANSSTATUS=2
   GROUP BY DD.TOTALDEDUCTED,DD.TRANSSTATUS,DD.DEDUCTEEID,DD.PAYMENTDATE,DD.DEDUCTIONID
  SELECT COMID , MONTHID, BRANCHID, DEDUCTEEID  
  INTO #EMPWM  
  FROM  
  (  
   SELECT EM.COMID, CASE WHEN EM.MONTHID = 1 THEN 13 WHEN EM.MONTHID = 2 THEN 14 WHEN EM.MONTHID = 3 THEN 15 ELSE EM.MONTHID END AS MONTHID, D.BRANCHID, D.DEDUCTEEID      
   FROM EMPWORKMONTH EM WITH(NOLOCK)   
   INNER JOIN #LINKTOTC LC ON LC.COMID = EM.COMID AND LC.BRANCHID = EM.BRANCHID  
   INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID  
   INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = E.DEDUCTEEID  
   INNER JOIN #COMIDS C ON C.DATA = LC.COMID  
   WHERE ISNULL(D.EMPTYPE,0) = 0  
  )R  
  ORDER BY COMID, MONTHID 
  DECLARE DEDUCTION_CURSOR CURSOR FOR   
  SELECT COMID, MONTHID,BRANCHID,DEDUCTEEID FROM #EMPWM  
  OPEN DEDUCTION_CURSOR  
  FETCH NEXT FROM DEDUCTION_CURSOR   
  INTO @COMID, @MONTHID, @BRANCHID, @DEDUCTEEID    
  IF(@LASTBRANCHID = 0)  
   BEGIN  
   SET @LASTBRANCHID = @BRANCHID  
   SET @LASTDEDUCTEEID = @DEDUCTEEID  
   SET @LASTCOMID = @COMID  
   END  
   WHILE @@FETCH_STATUS = 0  
    BEGIN 
     SELECT @TOTALDEDUCTED = @TOTALDEDUCTED + ISNULL(SUM(ISNULL(TOTALDEDUCTED,0)),0),  
     @DEDUCTEDAMT  = ISNULL(SUM(ISNULL(TOTALDEDUCTED,0)),0)  
     FROM #DEDUCTIONDETAIL DD
     WHERE DEDUCTEEID = @LASTDEDUCTEEID AND MONTH(PAYMENTDATE) = CASE WHEN @MONTHID = 13 THEN 1 WHEN @MONTHID = 14 THEN 2 WHEN @MONTHID = 15 THEN 3 ELSE @MONTHID END  
     INSERT INTO #STATUS(DEDUCTEEID, BRANCHID, MONTHID,TOTALDEDUCTED, COMID)  
       VALUES(@LASTDEDUCTEEID, @LASTBRANCHID, @MONTHID, @DEDUCTEDAMT, @LASTCOMID)  
     FETCH NEXT FROM DEDUCTION_CURSOR   
     INTO @COMID, @MONTHID, @BRANCHID, @DEDUCTEEID    
        IF(@LASTCOMID = @COMID)  
        BEGIN  
           IF(@LASTDEDUCTEEID <> @DEDUCTEEID)  
         BEGIN  
          INSERT INTO #FINALSTATUS(DEDUCTEEID, BRANCHID, TOTALDEDUCTED, COMID) VALUES(@LASTDEDUCTEEID, @LASTBRANCHID, @TOTALDEDUCTED, @LASTCOMID)           
            SET @TOTALDEDUCTED = 0   
            SET @LASTBRANCHID = @BRANCHID  
            SET @LASTDEDUCTEEID = @DEDUCTEEID  
         END   
        END  
        ELSE  
        BEGIN   
          INSERT INTO #FINALSTATUS(DEDUCTEEID, BRANCHID, TOTALDEDUCTED, COMID) VALUES(@LASTDEDUCTEEID, @LASTBRANCHID, @TOTALDEDUCTED, @LASTCOMID)  
    SET @TOTALDEDUCTED = 0             
          SET @LASTBRANCHID = @BRANCHID   
  SET @LASTDEDUCTEEID = @DEDUCTEEID  
          SET @LASTCOMID = @COMID  
        END  
    END 
     INSERT INTO #FINALSTATUS(DEDUCTEEID, BRANCHID, TOTALDEDUCTED, COMID) VALUES(@LASTDEDUCTEEID, @LASTBRANCHID, @TOTALDEDUCTED, @LASTCOMID)   
     CLOSE DEDUCTION_CURSOR;  
     DEALLOCATE DEDUCTION_CURSOR;    
     SELECT F1.ID, F1.COMID,F1.TOTALDEDUCTED, F1.BRANCHID,F1.DEDUCTEEID,   
       ((SELECT SUM(TOTALDEDUCTED) FROM #FINALSTATUS F2 WHERE F2.COMID = F1.COMID AND F2.ID <= F1.ID) - ISNULL(F1.TOTALDEDUCTED,0)    
       - ISNULL((SELECT SUM(F3.TOTALDEDUCTED) FROM #FINALSTATUS F3 WHERE F3.COMID = F1.COMID AND F3.BRANCHID = F1.BRANCHID AND F3.ID < F1.ID),0)  
       ) AS PREVTDS  
     INTO #PREVTDS  
     FROM #FINALSTATUS F1  
     UPDATE SALARYDETAIL SET PREVEMPINCOMETAX = P.PREVTDS  
        FROM SALARYDETAIL SD  
     INNER JOIN  #PREVTDS P ON P.DEDUCTEEID = SD.DEDUCTEEID  
     INNER JOIN   
     (  
      SELECT MAX(ID)ID FROM #PREVTDS   
      GROUP BY BRANCHID, COMID  
     )PR ON P.ID = PR.ID               
        UPDATE SALARYDETAIL SET TOTALTDS = ISNULL((SELECT SUM(ISNULL(TOTALDEDUCTED,0)) FROM DEDUCTIONDETAIL WHERE TRANSSTATUS = 2 AND DEDUCTEEID = SD.DEDUCTEEID),0),  
       TAXPAYABLE = ISNULL(NETTAXPAYABLE,0) - (ISNULL(MANUALINCOMETAX,0) + ISNULL(MANUALSURCHARGE,0) + ISNULL(MANUALCESS,0) +   
          ISNULL(PREVEMPINCOMETAX,0) + ISNULL(PREVEMPCESS,0) + ISNULL(PREVEMPSURCHARGE,0) +   
          ISNULL((SELECT SUM(ISNULL(TOTALDEDUCTED,0)) FROM DEDUCTIONDETAIL WHERE TRANSSTATUS = 2 AND DEDUCTEEID = SD.DEDUCTEEID),0))  
     FROM SALARYDETAIL SD  
     INNER JOIN #PREVTDS P ON P.DEDUCTEEID = SD.DEDUCTEEID  
     DROP TABLE #COMIDS
     DROP TABLE #DEDUCTEE
     DROP TABLE #DEDUCTIONDETAIL
     DROP TABLE #EMPLOYEE
     DROP TABLE #EMPWM
     DROP TABLE #FINALSTATUS
     DROP TABLE #LINKTOTC
     DROP TABLE #PREVTDS
     DROP TABLE #STATUS
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATETEXTRECORD')
DROP PROCEDURE USP_TDS_UPDATETEXTRECORD
GO
CREATE PROCEDURE [USP_TDS_UPDATETEXTRECORD]
@ID INT,
@MONTHID INT,
@BRANCHID INT,
@TEXT VARCHAR(MAX),
@ISTRUE BIT
AS
  BEGIN
		UPDATE TEXTRECORDS SET [TEXT]=@TEXT, ISCORRECT=@ISTRUE WHERE ID=@ID  AND MONTHID=@MONTHID
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATETOKENNO')
DROP PROCEDURE USP_TDS_UPDATETOKENNO
GO
CREATE PROCEDURE USP_TDS_UPDATETOKENNO  
@BRANCHID INT,
@FORMID INT,  
@QUARTER INT,  
@TOKENNO VARCHAR(15)  
AS  
   BEGIN  
		IF EXISTS(SELECT ACKID FROM ACKNO WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER= @QUARTER)
			BEGIN
				UPDATE ACKNO SET TOKENNO = @TOKENNO
					WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER= @QUARTER
			END
		ELSE
			BEGIN
				INSERT INTO ACKNO(BRANCHID, FORMID, QUARTER, TOKENNO)
				VALUES(@BRANCHID,@FORMID, @QUARTER, @TOKENNO)
			END
   END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATETOTALTDSINSALARYDETAIL')
DROP PROCEDURE USP_TDS_UPDATETOTALTDSINSALARYDETAIL
GO
CREATE PROCEDURE [USP_TDS_UPDATETOTALTDSINSALARYDETAIL]  
      @DEDUTEEIDS VARCHAR(MAX),  
      @BRANCHID INT  
AS  
DECLARE @TOTAL INT;  
DECLARE @COUNTER INT;  
DECLARE @DEDUCTEEID INT;  
SET @COUNTER=1;   
SELECT DATA,ROW_NUMBER() OVER(ORDER BY DATA) AS ROWNUMBER INTO #TEMP   
FROM UDF_TDS_SPLITSTRING(@DEDUTEEIDS,',');  
SELECT @TOTAL=COUNT(*) FROM #TEMP;  
WHILE(@COUNTER<=@TOTAL)  
BEGIN   
SET @DEDUCTEEID=CAST((SELECT DATA FROM #TEMP WHERE ROWNUMBER=@COUNTER) AS INT);  
IF EXISTS(SELECT DEDUCTEEID FROM SALARYDETAIL WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID)        
BEGIN  
 DECLARE @TOTALTDS INT;        
 DECLARE @NETTAXPAYABLE INT;        
 DECLARE @TAXPAYABLE INT;        
 DECLARE @TOTALINCOMETAXPAYABLE INT;       
 DECLARE @EDUCATIONCESS INT;       
 DECLARE @SURCHARGE INT;      
 DECLARE @TDSITDEDUCTED INT;      
 SET @TOTALTDS=(SELECT SUM(INCOMETAX+SURCHARGE+EDUCATIONCESS) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID);        
 SET @EDUCATIONCESS=(SELECT SUM(EDUCATIONCESS) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID);      
 SET @SURCHARGE=(SELECT SUM(SURCHARGE) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID);      
 SET @TDSITDEDUCTED=(SELECT SUM(INCOMETAX) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID);      
 SET @NETTAXPAYABLE=((SELECT SUM(NETTAXPAYABLE)FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID)-(SELECT RELIEFUS89 FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID));        
 SET @TOTALINCOMETAXPAYABLE=(SELECT TOTALINCOMETAXPAYABLE FROM SALARYDETAIL WITH(NOLOCK) WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID);        
 SET @TAXPAYABLE=(@TOTALINCOMETAXPAYABLE-@TOTALTDS);        
 DECLARE @ROUNDEDAMOUNT INT;         
 DECLARE @REM INT;  
 --SET @ROUNDEDAMOUNT = ROUND(@TAXPAYABLE,-1)        
 SET @REM=@TAXPAYABLE%10;   
  IF(@TAXPAYABLE<0)        
  BEGIN        
   SET @REM=@REM*-1;        
   IF (@REM >5)         
    BEGIN        
  SET @ROUNDEDAMOUNT = ((@TAXPAYABLE / 10) * 10) - 10;        
    END        
   ELSE        
    BEGIN        
  SET @ROUNDEDAMOUNT = ((@TAXPAYABLE / 10) * 10);         
    END        
  END        
  ELSE        
  BEGIN        
   IF (@REM >5)         
    BEGIN        
  SET @ROUNDEDAMOUNT = ((@TAXPAYABLE / 10) * 10) + 10;        
    END        
   ELSE        
    BEGIN        
  SET @ROUNDEDAMOUNT = ((@TAXPAYABLE / 10) * 10);         
    END        
  END        
   UPDATE SALARYDETAIL SET TOTALTDS=@TOTALTDS,NETTAXPAYABLE=@NETTAXPAYABLE,      
   TAXPAYABLE=@ROUNDEDAMOUNT,EDUCESSDEDUCTED=@EDUCATIONCESS,      
   TDSSURCHARGEDEDUCTED=@SURCHARGE,TDSITDEDUCTED=@TDSITDEDUCTED        
   WHERE DEDUCTEEID=@DEDUCTEEID AND BRANCHID=@BRANCHID;        
   END  
   SET @COUNTER=@COUNTER+1;  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEUSERAUDIT')
DROP PROCEDURE USP_TDS_UPDATEUSERAUDIT
GO
CREATE PROCEDURE [USP_TDS_UPDATEUSERAUDIT]  
@RECORDID INT,    
@USERID INT,    
@AUDITTYPE INT,    
@AUDITDATE DATETIME,    
@AUDITREMARKS VARCHAR(100),
@BRANCH VARCHAR(MAX)    
AS    
  BEGIN    
 DECLARE @AUDITID INT;                  
 SET @AUDITID =-1;    
 IF(@AUDITREMARKS = '')    
   BEGIN  
  SELECT @AUDITREMARKS = USERNAME + '^'+@BRANCH+ '^' +   
  CAST(ISSUPERADMIN AS VARCHAR)+ '^'+ CAST(ISBRANCHADMIN AS VARCHAR) + '^' + CAST(ISNULL(ISACTIVE,0) AS VARCHAR) FROM USERMASTER U WITH(NOLOCK) 
  WHERE USERID = @RECORDID  
   END     
   INSERT INTO USERMASTERAUDIT(RECORDID, USERID, AUDITTYPE,AUDITDATE, AUDITREMARKS)                  
   VALUES (@RECORDID, @USERID,@AUDITTYPE,CONVERT(VARCHAR(20),@AUDITDATE,120),@AUDITREMARKS)                  
   SET @AUDITID = SCOPE_IDENTITY();     
  SELECT @AUDITID;       
  END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UpdateUserDetails')
DROP PROCEDURE USP_TDS_UpdateUserDetails
GO
CREATE PROCEDURE USP_TDS_UpdateUserDetails
	@userName VARCHAR(20),
	@password NVARCHAR(100),
	@oldUserName VARCHAR(20) = NULL
AS
BEGIN
	IF EXISTS(SELECT * FROM USERMASTER WHERE USERNAME = @userName)
	BEGIN
		UPDATE USERMASTER
		SET [PASSWORD] = @password
		WHERE USERNAME = @userName
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT * FROM USERMASTER WHERE USERNAME = @oldUserName)
		BEGIN
			UPDATE USERMASTER
			SET [PASSWORD] = @password,
			USERNAME = @userName
			WHERE USERNAME = @oldUserName
		END
	END
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEXML')
DROP PROCEDURE USP_TDS_UPDATEXML
GO
CREATE PROCEDURE  USP_TDS_UPDATEXML @EMPDATA NTEXT      
AS       
 DECLARE @HDOC INT         
 EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT,@EMPDATA         
--THIS CODE UPDATES OLD DATA.      
 UPDATE DEDUCTEE       
 SET NAME = XMLEMPLOYEE.NAME, PAN= XMLEMPLOYEE.PAN, ADDRESS1 = XMLEMPLOYEE.ADDRESS1,ADDRESS2=XMLEMPLOYEE.ADDRESS2,      
  ADDRESS3 = XMLEMPLOYEE.ADDRESS3,ADDRESS4 = XMLEMPLOYEE.ADDRESS4,ADDRESS5 = XMLEMPLOYEE.ADDRESS5,PINCODE = XMLEMPLOYEE.PINCODE,      
  STATEID = XMLEMPLOYEE.STATEID, PANREFERENCE = CASE WHEN XMLEMPLOYEE.PAN NOT IN ('PANAPPLIED', 'PANINVALID', 'PANNOTAVBL') THEN '' ELSE DEDUCTEE.PANREFERENCE END      
 FROM OPENXML(@HDOC, 'NEWDATASET/DEDUCTEE')         
       WITH (REFERENCENO VARCHAR(20), NAME VARCHAR(75),PAN VARCHAR(10),ADDRESS1 VARCHAR(25), ADDRESS2 VARCHAR(25), ADDRESS3 VARCHAR(25),      
      ADDRESS4 VARCHAR(25), ADDRESS5 VARCHAR(25),PINCODE VARCHAR(10),STATEID INT,DEDUCTEECODE INT, BRANCHID INT, DEDUCTEEID INT)  XMLEMPLOYEE      
WHERE DEDUCTEE.REFERENCENO = XMLEMPLOYEE.REFERENCENO AND DEDUCTEE.BRANCHID = XMLEMPLOYEE.BRANCHID    
 UPDATE NONEMPLOYEE  SET DEDUCTEECODE = XMLEMPLOYEE.DEDUCTEECODE        
 --FROM NONEMPLOYEE NE      
 --INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = NE.DEDUCTEEID          
 FROM OPENXML(@HDOC, 'NEWDATASET/DEDUCTEE')         
       WITH (DEDUCTEECODE INT, DEDUCTEEID INT)  XMLEMPLOYEE      
WHERE NONEMPLOYEE.DEDUCTEEID = XMLEMPLOYEE.DEDUCTEEID      
EXEC SP_XML_REMOVEDOCUMENT @HDOC
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDATEXMLSBP')
DROP PROCEDURE USP_TDS_UPDATEXMLSBP
GO
CREATE PROCEDURE  USP_TDS_UPDATEXMLSBP 
@EMPDATA NTEXT      
AS       
 DECLARE @HDOC INT         
 EXEC SP_XML_PREPAREDOCUMENT @HDOC OUTPUT,@EMPDATA         
--THIS CODE UPDATES OLD DATA.      
 UPDATE DEDUCTEE       
 SET NAME = XMLNONEMPLOYEE.NAME, PAN= XMLNONEMPLOYEE.PAN, ADDRESS1 = XMLNONEMPLOYEE.ADDRESS1,ADDRESS2=XMLNONEMPLOYEE.ADDRESS2,      
  ADDRESS3 = XMLNONEMPLOYEE.ADDRESS3,ADDRESS4 = XMLNONEMPLOYEE.ADDRESS4,ADDRESS5 = XMLNONEMPLOYEE.ADDRESS5,PINCODE = XMLNONEMPLOYEE.PINCODE,      
  STATEID = XMLNONEMPLOYEE.STATEID, PANREFERENCE = CASE WHEN XMLNONEMPLOYEE.PAN NOT IN ('PANAPPLIED', 'PANINVALID', 'PANNOTAVBL') THEN '' ELSE XMLNONEMPLOYEE.PANREFERENCE END      
 FROM OPENXML(@HDOC, 'NEWDATASET/DEDUCTEE')         
       WITH (REFERENCENO VARCHAR(20), NAME VARCHAR(75),PAN VARCHAR(10),PANREFERENCE VARCHAR(10),ADDRESS1 VARCHAR(25), ADDRESS2 VARCHAR(25), ADDRESS3 VARCHAR(25),      
      ADDRESS4 VARCHAR(25), ADDRESS5 VARCHAR(25),PINCODE VARCHAR(10),STATEID INT,DEDUCTEECODE INT, BRANCHID INT, DEDUCTEEID INT)  XMLNONEMPLOYEE      
WHERE DEDUCTEE.REFERENCENO = XMLNONEMPLOYEE.REFERENCENO AND DEDUCTEE.BRANCHID = XMLNONEMPLOYEE.BRANCHID    
 UPDATE NONEMPLOYEE  SET DEDUCTEECODE = XMLNONEMPLOYEE.DEDUCTEECODE, ACCOUNTNUMBER = XMLNONEMPLOYEE.ACCOUNTNUMBER        
 --FROM NONEMPLOYEE NE      
 --INNER JOIN DEDUCTEE D ON D.DEDUCTEEID = NE.DEDUCTEEID          
 FROM OPENXML(@HDOC, 'NEWDATASET/DEDUCTEE')         
       WITH (DEDUCTEECODE INT, ACCOUNTNUMBER VARCHAR(20), DEDUCTEEID INT)  XMLNONEMPLOYEE      
WHERE NONEMPLOYEE.DEDUCTEEID = XMLNONEMPLOYEE.DEDUCTEEID      
EXEC SP_XML_REMOVEDOCUMENT @HDOC
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDDBREMOVINGJUNKCHALLANS')
DROP PROCEDURE USP_TDS_UPDDBREMOVINGJUNKCHALLANS
GO
CREATE PROCEDURE USP_TDS_UPDDBREMOVINGJUNKCHALLANS  
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT  
AS  
BEGIN  
 DELETE FROM CORRCHALLANDETAIL   
 WHERE ISUPDATECHALLAN <> 1 AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS <> 1 AND CHALLANERETURNID NOT IN  
 (SELECT DISTINCT CCD.CHALLANERETURNID FROM CORRCHALLANDETAIL CCD WITH(NOLOCK)  
 INNER JOIN CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) ON CDD.CHALLANERETURNID = CCD.CHALLANERETURNID AND CDD.BRANCHID = CCD.BRANCHID AND CDD.FORMID = CCD.FORMID AND CDD.QUARTER = CCD.QUARTER  
 WHERE CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.QUARTER = @QUARTER AND CCD.CORRECTIONSTATUS <> 2 AND CDD.CORRECTIONSTATUS <> 1)  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_UPDDBSEQUENCINGDEDUCTIONERETURNID')
DROP PROCEDURE USP_TDS_UPDDBSEQUENCINGDEDUCTIONERETURNID
GO
CREATE PROCEDURE [dbo].[USP_TDS_UPDDBSEQUENCINGDEDUCTIONERETURNID]
@BRANCHID INT,
@FORMID INT,
@QUARTER INT
AS
BEGIN
DECLARE @ACTUALERETID INT;
DECLARE @EXPECTEDERETID INT;
DECLARE @ROWCOUNT INT;
DECLARE @CHALLANERETIDTODELETE INT;
DECLARE @ROWSDELETED INT;
SELECT TMP.CHALLANERETURNID, MAX(TMP.DEDUCTIONERETURNID)DEDUCTIONERETURNID,MAX(TMP.RN)RN,
CASE WHEN MAX(TMP.DEDUCTIONERETURNID) = MAX(TMP.RN) THEN '1' ELSE '0' END AS RENUM INTO #CHECK FROM 
(
	SELECT CHALLANERETURNID,DEDUCTIONERETURNID,ROW_NUMBER() OVER (PARTITION BY CHALLANERETURNID ORDER BY CORRECTIONSTATUS,DEDUCTIONERETURNID)RN,CORRECTIONSTATUS   
	FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)  
	WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND (CORRECTIONSTATUS = 5 OR CORRECTIONSTATUS = 1)
)TMP
WHERE CORRECTIONSTATUS = 5
GROUP BY TMP.CHALLANERETURNID
IF EXISTS( SELECT * FROM #CHECK C WHERE C.RENUM = 0)
	BEGIN
		--SELECT CHALLANERETURNID INTO #TEMP FROM CORRDEDUCTIONDETAIL WHERE BRANCHID = @BRANCHID AND CORRECTIONSTATUS = 5 
		--GROUP BY CHALLANERETURNID
		--ORDER BY CHALLANERETURNID
		SELECT DEDUCTIONSERIALNO , ROW_NUMBER() OVER(PARTITION BY CDD.CHALLANERETURNID ORDER BY CORRECTIONSTATUS,CDD.DEDUCTIONERETURNID) ROWNO
		INTO #DED
		FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
		INNER JOIN #CHECK C ON C.CHALLANERETURNID = CDD.CHALLANERETURNID
		WHERE CDD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND C.RENUM = 0
		UPDATE CORRDEDUCTIONDETAIL SET DEDUCTIONERETURNID = D.ROWNO
		FROM CORRDEDUCTIONDETAIL CDD
		INNER JOIN #DED D ON D.DEDUCTIONSERIALNO = CDD.DEDUCTIONSERIALNO
		INNER JOIN #CHECK C ON C.CHALLANERETURNID = CDD.CHALLANERETURNID
		WHERE CDD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND C.RENUM = 0 AND CORRECTIONSTATUS = 5
	END
SELECT MIN(DEDUCTIONERETURNID) ACTUALERETID, CHALLANERETURNID 
	INTO #ACTUALERETID 
	FROM CORRDEDUCTIONDETAIL WITH(NOLOCK)
	WHERE CORRECTIONSTATUS = 5 AND BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER
GROUP BY CHALLANERETURNID
ORDER BY CHALLANERETURNID
SELECT EXPECTEDDID, CCD.CHALLANERETURNID INTO #EXPECTEDDID 
			FROM CORRCHALLANDETAIL CCD WITH(NOLOCK) INNER JOIN #ACTUALERETID A ON CCD.CHALLANERETURNID = A.CHALLANERETURNID
			WHERE BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 1
			ORDER BY CCD.CHALLANERETURNID
SELECT @ROWCOUNT = COUNT(ACTUALERETID) FROM #ACTUALERETID
WHILE (@ROWCOUNT > 0)
	BEGIN
		SELECT @CHALLANERETIDTODELETE = (SELECT TOP 1 CHALLANERETURNID FROM #ACTUALERETID)
		SELECT 	@ACTUALERETID  =  ACTUALERETID FROM  #ACTUALERETID WHERE CHALLANERETURNID = @CHALLANERETIDTODELETE
		SELECT @EXPECTEDERETID =  EXPECTEDDID FROM #EXPECTEDDID WHERE CHALLANERETURNID = @CHALLANERETIDTODELETE
		print @CHALLANERETIDTODELETE
		print @ACTUALERETID
		print @EXPECTEDERETID
		IF (@ACTUALERETID <> @EXPECTEDERETID)
			BEGIN
				SELECT DEDUCTIONSERIALNO ,((SELECT @EXPECTEDERETID-1) + ROW_NUMBER() OVER(PARTITION BY CDD.CHALLANERETURNID ORDER BY CORRECTIONSTATUS,CDD.DEDUCTIONERETURNID)) ROWNO
				INTO #NEWDED
				FROM CORRDEDUCTIONDETAIL CDD WITH(NOLOCK)
				WHERE CDD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 5
				UPDATE CORRDEDUCTIONDETAIL SET DEDUCTIONERETURNID = D.ROWNO
				FROM CORRDEDUCTIONDETAIL CDD
				INNER JOIN #NEWDED D ON D.DEDUCTIONSERIALNO = CDD.DEDUCTIONSERIALNO
				INNER JOIN #CHECK C ON C.CHALLANERETURNID = CDD.CHALLANERETURNID
				WHERE CDD.BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS = 5 
				AND CDD.CHALLANERETURNID = @CHALLANERETIDTODELETE
			END
		SELECT @ROWSDELETED = COUNT(ACTUALERETID) FROM #ACTUALERETID WHERE CHALLANERETURNID = @CHALLANERETIDTODELETE
		DELETE FROM #ACTUALERETID WHERE CHALLANERETURNID = @CHALLANERETIDTODELETE
		DELETE FROM #EXPECTEDDID WHERE CHALLANERETURNID = @CHALLANERETIDTODELETE
		SET @ROWCOUNT = @ROWCOUNT-@ROWSDELETED;
		IF OBJECT_ID('TEMPDB..#NEWDED') IS NOT NULL
			DROP TABLE #NEWDED
	END	
DROP TABLE #CHECK
DROP TABLE #ACTUALERETID
DROP TABLE #EXPECTEDDID
IF OBJECT_ID('TEMPDB..#DED') IS NOT NULL
	   DROP TABLE #DED
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_URNDETAILS')
DROP PROCEDURE USP_TDS_URNDETAILS
GO
CREATE PROCEDURE USP_TDS_URNDETAILS
 @DEDDATE DATETIME  
AS  
BEGIN  
 SELECT   
      SUBSTRING(DD.URN, 0, 5) + '|' + SUBSTRING(DD.URN, 5, 9) + '|' +   
      CONVERT(VARCHAR, DD.DEDUCTEDDATE, 105) + '|' +  
      CB.BRANCHCODE + '|' + D.NAME + '|' + TS.SECTIONNAME + '|' +  
      D.REFERENCENO + '|' + CAST(DD.TOTALDEDUCTED AS VARCHAR) + '|' + D.PAN + '|' + DD.ADDITIONALFIELD1 AS DATA  
 FROM  
    DEDUCTIONDETAIL DD WITH(NOLOCK)  
    INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID   
    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID  
    INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID   
 WHERE  
    DD.DEDUCTEDDATE =@DEDDATE --CONVERT(VARCHAR(11),@DEDDATE,106)    
    AND DD.URN IS NOT NULL  
 ORDER BY        
  CB.BRANCHCODE, SUBSTRING(DD.URN, 5, 9), SUBSTRING(DD.URN, 1, 4)  
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_URNSUMMARY')
DROP PROCEDURE USP_TDS_URNSUMMARY
GO
CREATE PROCEDURE USP_TDS_URNSUMMARY      
 @DEDDATE DATETIME      
AS      
BEGIN      
 SELECT       
      SUBSTRING(DD.URN, 0, 5) +'|'+ SUBSTRING(DD.URN, 5, 9) + '|' + CONVERT(VARCHAR, DD.DEDUCTEDDATE, 105) +'|'+       
      CB.BRANCHCODE+'|'+ D.NAME+'|'+TS.SECTIONNAME+'|'+    
      D.REFERENCENO +'|'+CAST(SUM(DD.TOTALDEDUCTED) AS VARCHAR) +'|'+D.PAN  AS DATA    
 FROM      
    DEDUCTIONDETAIL DD WITH(NOLOCK)      
    INNER JOIN DEDUCTEE D WITH(NOLOCK) ON D.DEDUCTEEID = DD.DEDUCTEEID AND D.BRANCHID = DD.BRANCHID       
    INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON D.BRANCHID = CB.BRANCHID      
    INNER JOIN TAXSECTIONS TS WITH(NOLOCK) ON TS.SECTIONID = DD.SECTIONID       
 WHERE      
    DD.DEDUCTEDDATE = @DEDDATE      
    AND DD.URN IS NOT NULL      
 GROUP BY       
    DD.URN, DD.DEDUCTEDDATE, CB.BRANCHCODE, D.NAME, TS.SECTIONNAME, D.REFERENCENO, D.PAN      
 ORDER BY            
  CB.BRANCHCODE, SUBSTRING(DD.URN, 5, 9), SUBSTRING(DD.URN, 1, 4)      
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_USERLIST')
DROP PROCEDURE USP_TDS_USERLIST
GO
CREATE PROCEDURE USP_TDS_USERLIST  
 @UsrName VARCHAR(15)          
AS          
 BEGIN          
  SELECT UM.USERID AS USERID,UM.USERNAME AS USERNAME           
  FROM USERMASTER AS UM     
  WHERE UM.USERNAME LIKE '%'+@UsrName+'%'             
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_USP_TDS_GET26QAAHEADER')
DROP PROCEDURE USP_TDS_USP_TDS_GET26QAAHEADER
GO
--USP_TDS_GET26QAASUMMARYPARTA '30/Mar/2019', 1
CREATE PROCEDURE USP_TDS_USP_TDS_GET26QAAHEADER	
	@QTREND SMALLDATETIME,
	@BRANCHID INT
AS    
	BEGIN
		DECLARE @QTR INT
		SELECT @QTR = (CASE WHEN MONTH(@QTREND) = 6 THEN 1
							WHEN MONTH(@QTREND) = 9 THEN 2
							WHEN MONTH(@QTREND) = 12 THEN 3
							ELSE 4 END) 
		SELECT COUNT(DISTINCT TD.BRANCHID) BRANCH_COUNT, COUNT(TD.TRANID) TD_COUNT
		INTO #QAASUM
		FROM TERMDEPOSIT26QAA TD WITH(NOLOCK)
		WHERE CLOSUREDATE >= @QTREND
		SELECT RP.PERSONNAME, DD.TANREGISTRATION AS PAN, RP.ADDRESS1, RP.ADDRESS2, RP.ADDRESS3, RP.ADDRESS4, RP.ADDRESS5, 
			   SM.STATENAME,RP.PINCODE,RP.MOBILENO,RP.EMAILADDRESS,Q.BRANCH_COUNT, Q.TD_COUNT 
		FROM 
			(SELECT @BRANCHID HOBRANCHID, BRANCH_COUNT, TD_COUNT
			FROM #QAASUM) Q
			INNER JOIN COMPANYBRANCH CB WITH(NOLOCK) ON CB.BRANCHID = Q.HOBRANCHID 
			INNER JOIN BRANCHDEDUCTORS BD WITH(NOLOCK) ON BD.BRANCHID = CB.BRANCHID
			INNER JOIN DEDUCTOR DD WITH(NOLOCK) ON DD.DEDUCTORID = BD.DEDUCTORID
			INNER JOIN RESPONSIBLEPERSON RP WITH(NOLOCK) ON RP.DEDUCTORID = DD.DEDUCTORID
			INNER JOIN STATEMASTER SM WITH(NOLOCK) ON SM.STATEID = RP.STATEID 
		WHERE BD.QUARTER = @QTR 
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_VALIDATEDEDCERTNO')
DROP PROCEDURE USP_TDS_VALIDATEDEDCERTNO
GO
CREATE PROCEDURE USP_TDS_VALIDATEDEDCERTNO 
@BRANCHID INT,  
@FORMID INT,  
@QUARTER INT  
AS  
 BEGIN  
	SELECT DD.FORMID,DD.NONDEDREASON,DD.DEDUCTEEID,DD.CERTNO,DD.SERIALNO,
	DD.SECTIONID,DD.BRANCHID,DD.QUARTER 
	INTO #DEDDETAIL 
	FROM DEDUCTIONDETAIL DD WITH(NOLOCK)
	WHERE DD.BRANCHID=@BRANCHID AND DD.QUARTER=@QUARTER AND DD.FORMID=@FORMID
	SELECT D.NAME,D.PAN,D.DEDUCTEEID
	INTO #DEDMST
	FROM DEDUCTEE D WITH(NOLOCK)
	INNER JOIN #DEDDETAIL DD
	ON DD.DEDUCTEEID=D.DEDUCTEEID
	GROUP BY D.NAME,D.PAN,D.DEDUCTEEID
    SELECT SERIALNO,D.NAME,D.PAN,TS.SECTIONNAME,
    CASE 
		WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION U/S 197'
		WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197'
		WHEN DD.FORMID = 1 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'
		WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 197'
		WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'
		WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'
		WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 4 THEN 'Transporter with valid PAN (0%)'
		WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 5 THEN 'Amount Paid/Credited is Under Threshold'
		WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'
		WHEN DD.FORMID = 2 AND DD.NONDEDREASON = 7 THEN 'NO DEDUCTION U/S 197A(1F)'
		WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 1 THEN 'LOWER DEDUCTION/NO DEDUCTION U/S 195/197'
		WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 2 THEN 'NO DEDUCTION U/S 197A'
		WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 3 THEN 'PAN Not available - Higher Rate (20%)'
		WHEN DD.FORMID = 3 AND DD.NONDEDREASON = 6 THEN 'Software Vendor Transaction'
		ELSE ''
	END NONDEDREASON,
    CERTNO FROM #DEDDETAIL DD
	INNER JOIN #DEDMST D ON D.DEDUCTEEID = DD.DEDUCTEEID
	INNER JOIN TAXSECTIONS TS ON DD.SECTIONID = TS.SECTIONID 
	WHERE DD.BRANCHID = @BRANCHID AND DD.FORMID = @FORMID AND QUARTER = @QUARTER AND ISNULL(CERTNO,'') <> '' 
		--AND CERTNO NOT LIKE '[0-9][0-9][0-9][0-9][A-Z][A-Z][0-9][0-9][0-9][A-Z]' 
		AND CERTNO NOT LIKE '[0-9A-Za-z][0-9A-Za-z][0-9A-Za-z][0-9A-Za-z][0-9A-Za-z][0-9A-Za-z][0-9A-Za-z][0-9A-Za-z][0-9A-Za-z][0-9A-Za-z]' 
		AND (DD.FORMID = 2 AND DD.NONDEDREASON <> 2)
	DROP TABLE #DEDDETAIL
	DROP TABLE #DEDMST
 END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_VALIDATEREVREQDATE')
DROP PROCEDURE USP_TDS_VALIDATEREVREQDATE
GO
CREATE PROCEDURE USP_TDS_VALIDATEREVREQDATE
	@MONTHID INT
AS
BEGIN
	SELECT DAYID FROM REVREQDATE
	WHERE MONTHID=@MONTHID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_VALIDATEUSERNAME')
DROP PROCEDURE USP_TDS_VALIDATEUSERNAME
GO
CREATE PROCEDURE USP_TDS_VALIDATEUSERNAME --'SUDIP'
	@USERNAME VARCHAR(50)
AS
BEGIN
	SELECT COUNT(*) FROM USERMASTER 
	WHERE USERNAME=@USERNAME;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_VerifyChallanPay')
DROP PROCEDURE USP_TDS_VerifyChallanPay
GO
CREATE PROCEDURE USP_TDS_VerifyChallanPay
	@branchID INT
AS
BEGIN
	SELECT ISNULL(NOCHALLANPAY,0) NOCHALLANPAY FROM COMPANYBRANCH WITH(NOLOCK)
	WHERE BRANCHID=@branchID
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDS_VerifyPAN')
DROP PROCEDURE USP_TDS_VerifyPAN
GO
CREATE PROCEDURE USP_TDS_VerifyPAN
 @DeductedDate DATETIME    
AS    
BEGIN    
	SELECT DEDUCTEEID INTO #OLDDED FROM DEDUCTIONDETAIL WITH(NOLOCK)    
    WHERE PAYMENTDATE < @DeductedDate    
    SELECT DEDUCTEEID INTO #TOVERIFY FROM DEDUCTIONDETAIL WITH(NOLOCK)    
	WHERE    
	MONTH(PAYMENTDATE) = MONTH(@DeductedDate)    
	AND DEDUCTEEID NOT IN     
	(    
		SELECT DEDUCTEEID FROM #OLDDED    
	)    
	SELECT     
	CB.BRANCHCODE, D.NAME, D.PAN, D.REFERENCENO,'' REMARK,'' ITD  
	INTO #TEMP 
	FROM DEDUCTEE D WITH(NOLOCK)    
	INNER JOIN COMPANYBRANCH CB WITH(NOLOCK)    
		ON CB.BRANCHID = D.BRANCHID    
	WHERE D.PAN NOT IN ('PANAPPLIED','PANINVALID','PANNOTAVBL')    
		AND D.DEDUCTEEID IN     
		(    
		SELECT DEDUCTEEID FROM #TOVERIFY    
		)  
		ORDER BY CB.BRANCHCODE, D.PAN  
	DROP TABLE #TOVERIFY 
	DROP TABLE #OLDDED
	SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 0)) AS SRNO,* FROM #TEMP		
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_TDSRecalculateForSeriallyTransferredEmployees')
DROP PROCEDURE USP_TDSRecalculateForSeriallyTransferredEmployees
GO
CREATE PROCEDURE USP_TDSRecalculateForSeriallyTransferredEmployees
	@comID INT,
	@finYear INT
AS
BEGIN
	DECLARE @firstWorkingBranch INT=0;
	DECLARE @lastWorkingBranch INT=0;
	/*EMPWORKMONTH table data*/
	SELECT BRANCHID,COMID,(CASE 
							WHEN MONTHID IN(1,2,3) THEN (MONTHID+12) 
							ELSE MONTHID
					   END
					   ) MONTHID
	INTO #EMPWORKMONTH
	FROM EMPWORKMONTH EMPWM WITH(NOLOCK)
	WHERE EMPWM.COMID=@COMID	
	ORDER BY MONTHID
	/*Getting working branches serially*/
	CREATE TABLE #WORKSUMMARY(BRANCHID INT,COMID INT,MONTHID INT)
	DECLARE @BRID INT;
	DECLARE @MONTHID INT;
	DECLARE @COUNTER INT=4;
	WHILE(@COUNTER<=15)
	BEGIN
		SET @BRID=ISNULL((SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID=@COUNTER),0)
		SET @MONTHID=ISNULL((SELECT MONTHID FROM #EMPWORKMONTH WHERE MONTHID=@COUNTER),0)
			IF(NOT EXISTS(SELECT BRANCHID FROM #WORKSUMMARY WHERE BRANCHID=@BRID))
				BEGIN
					IF(@BRID<>0)
					BEGIN
						INSERT INTO #WORKSUMMARY(BRANCHID,COMID,MONTHID)
						VALUES(@BRID,@COMID,@MONTHID)
					END
				END
			ELSE
				BEGIN
				IF((SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID=@COUNTER)<>(SELECT BRANCHID FROM #EMPWORKMONTH WHERE MONTHID=@COUNTER-1))
					BEGIN
						INSERT INTO #WORKSUMMARY(BRANCHID,COMID,MONTHID)
						VALUES(@BRID,@COMID,@MONTHID)
					END
				END
		SET @COUNTER=@COUNTER+1;
	END
	DECLARE @MAXMONTHID INT=0;
	DECLARE @MINMONTHID INT=0;
	SET @MAXMONTHID=(SELECT MAX(MONTHID) FROM #WORKSUMMARY)
	SET @MINMONTHID=(SELECT MIN(MONTHID) FROM #WORKSUMMARY)
	SET @firstWorkingBranch=(SELECT BRANCHID FROM #WORKSUMMARY WHERE MONTHID=@MINMONTHID)
	SET @lastWorkingBranch=(SELECT BRANCHID FROM #WORKSUMMARY WHERE MONTHID=@MAXMONTHID)
	UPDATE #EMPWORKMONTH
	SET MONTHID=MONTHID-12
	WHERE MONTHID>12
	/*LINKTOTC table data*/
	SELECT COMID,EMPLOYEEID,BRANCHID 
	INTO #LINKTOTC
	FROM LINKTOTC WITH(NOLOCK)
	WHERE COMID=@comID
	/*Employee table data*/
	SELECT E.* 
	INTO #EMPLOYEE
	FROM EMPLOYEE E WITH(NOLOCK)
	INNER JOIN #LINKTOTC LTC
	ON LTC.EMPLOYEEID=E.EMPLOYEEID
	/*Deductee table data*/
	SELECT D.*
	INTO #DEDUCTEE
	FROM DEDUCTEE D WITH(NOLOCK)
	INNER JOIN #EMPLOYEE E
	ON E.DEDUCTEEID=D.DEDUCTEEID
	/*salary detail*/
	SELECT SALDETAILID,MONTHID,COMID,SALARYHEADID,
	GROSSAMT1, GROSSAMT2, GROSSAMT3,
	EXEMPTAMT, NETAMT, [BASIC],
	DA, HRA, EPF, RECOVERYAMT
	INTO #SALDETAIL
	FROM SALDETAIL WITH(NOLOCK) WHERE COMID=@comID
	/*CHAPTERVIADET table data*/
	SELECT CHAPTERVIADETAILID,COMID,SALARYSECTIONID,
	CEILING(ISNULL(GROSSAMOUNT,0)) GROSSAMOUNT,
	CEILING(ISNULL(QUALIFYINGAMOUNT,0)) QUALIFYINGAMOUNT,
	CEILING(ISNULL(DEDUCTIBLEAMOUNT,0)) DEDUCTIBLEAMOUNT
	INTO #CHAPTERVIADET
	FROM CHAPTERVIADET WITH(NOLOCK)
	WHERE COMID=@comID
	/*Chapter VIA detail*/
	/*Mannual Entry only for 80C sections */
	/*Mannual entry will be decimal free,hence no need of ceiling*/
	SELECT E.DEDUCTEEID,LC.BRANCHID, LC.COMID, CEILING(SUM(GROSS))GROSS, 
	CEILING(SUM(QUALIFYING))QUALIFYING,CVIA.SALARYSECTIONID
	INTO #MANNUALENTRY80C
	FROM #LINKTOTC LC
	INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID  
	INNER JOIN #CHAPTERVIADET CVIA ON LC.COMID = CVIA.COMID  
	INNER JOIN CVIA80CDET C80C WITH(NOLOCK) ON C80C.CHAPTERVIADETID = CVIA.CHAPTERVIADETAILID  
	WHERE ISNULL(GROSS,0) > 0 
	GROUP BY E.DEDUCTEEID,LC.BRANCHID,LC.COMID,CVIA.SALARYSECTIONID 
	ORDER BY LC.COMID 
	DECLARE @MANUALGROSS INT;
	SELECT @MANUALGROSS = GROSS FROM #MANNUALENTRY80C WHERE BRANCHID = @lastWorkingBranch
	UPDATE #MANNUALENTRY80C SET GROSS = 0 , QUALIFYING = 0 WHERE BRANCHID <> @lastWorkingBranch
	/*Configured 80C data, from imported data*/	
	SELECT DEDUCTEEID, BRANCHID,COMID, SUM(GROSS) GROSS, SUM(QUALIFYING) QUALIFYING    
	INTO #C80CCONFIGUREDDATA
	FROM  
	(  
	 SELECT E.DEDUCTEEID,LC.BRANCHID, LC.COMID,  CEILING(SUM(NETAMT)) GROSS, CEILING(SUM(NETAMT)) QUALIFYING, ISNULL(SH.C80CID,-1)C80CID  
	  FROM #LINKTOTC LC
	 INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID  
	 INNER JOIN #EMPWORKMONTH EM ON EM.COMID = LC.COMID AND EM.BRANCHID = LC.BRANCHID  
	 INNER JOIN #SALDETAIL SD ON SD.COMID = LC.COMID AND SD.MONTHID = EM.MONTHID  
	 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID  
	 WHERE LC.COMID=@comID AND INCLUDEINTAX = 1 AND ISNULL(SH.C80CID,-1) > 0 
	 GROUP BY E.DEDUCTEEID,LC.BRANCHID, LC.COMID,ISNULL(SH.C80CID,-1)  
	)R
	GROUP BY DEDUCTEEID, BRANCHID,COMID
	ORDER BY COMID 
	DECLARE @CONFIGUREDGROSS INT;
	SELECT @CONFIGUREDGROSS = GROSS FROM #C80CCONFIGUREDDATA WHERE BRANCHID = @lastWorkingBranch
	IF (@finYear > 2013)
	BEGIN
		IF (@CONFIGUREDGROSS + @MANUALGROSS > 150000)
		BEGIN
			IF (@CONFIGUREDGROSS > 150000)
			BEGIN
				UPDATE #C80CCONFIGUREDDATA SET QUALIFYING = 150000
				WHERE GROSS = @CONFIGUREDGROSS
				UPDATE #MANNUALENTRY80C SET QUALIFYING = 0
				WHERE BRANCHID = @lastWorkingBranch
			END
			ELSE
			BEGIN
				UPDATE #MANNUALENTRY80C SET QUALIFYING = 150000 - @CONFIGUREDGROSS
				WHERE BRANCHID = @lastWorkingBranch
			END
		END
	END
	ELSE
	BEGIN
		IF (@CONFIGUREDGROSS + @MANUALGROSS > 100000)
		BEGIN
			IF (@CONFIGUREDGROSS > 100000)
			BEGIN
				UPDATE #C80CCONFIGUREDDATA SET QUALIFYING = 100000
				WHERE GROSS = @CONFIGUREDGROSS
				UPDATE #MANNUALENTRY80C SET QUALIFYING = 0
				WHERE BRANCHID = @lastWorkingBranch
			END
			ELSE
			BEGIN
				UPDATE #MANNUALENTRY80C SET QUALIFYING = 100000 - @CONFIGUREDGROSS
				WHERE BRANCHID = @lastWorkingBranch
			END
		END
	END
	/*Chapter VIA mannual entry other than 80C section */ 
	/*Mannual entry will be decimal free,hence no need of ceiling*/
	 SELECT E.DEDUCTEEID,LC.COMID, LC.BRANCHID, CEILING(SUM(CVIA.GROSSAMOUNT)) GROSSAMOUNT
	 ,CEILING(SUM(CVIA.QUALIFYINGAMOUNT)) QUALIFYINGAMOUNT,CVIA.SALARYSECTIONID  
	 INTO #MANNUALENTRYEXCEPT80C
	  FROM #LINKTOTC LC
	 INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID  
	 INNER JOIN #CHAPTERVIADET CVIA ON CVIA.COMID = LC.COMID
	 WHERE LC.COMID=@comID AND SALARYSECTIONID <> 3 
	 GROUP BY  E.DEDUCTEEID,LC.COMID, LC.BRANCHID, CVIA.SALARYSECTIONID
	/*Mannual entries entered in previous branchs*/
	SELECT * INTO #MANNUALENTRY801 FROM #MANNUALENTRY80C WHERE BRANCHID<>@lastWorkingBranch
	SELECT * INTO #MANNUALENTRYEXCEPT80C1 FROM #MANNUALENTRYEXCEPT80C WHERE BRANCHID<>@lastWorkingBranch
	/*getting only 80C mannual entries for last branch*/
	DELETE FROM #MANNUALENTRY80C WHERE BRANCHID<>@lastWorkingBranch
	/*getting mannual entries other than 80C for last branch*/
	DELETE FROM #MANNUALENTRYEXCEPT80C WHERE BRANCHID<>@lastWorkingBranch
	/*Update configured data */
	UPDATE SALARYDETAIL 
	SET TOTALDEDUNDERCHAPTERVIA = C.QUALIFYING
	FROM SALARYDETAIL SD  WITH(NOLOCK)
	INNER JOIN #C80CCONFIGUREDDATA C 
	ON C.DEDUCTEEID = SD.DEDUCTEEID AND C.BRANCHID = SD.BRANCHID
	UPDATE CHAPTERVIADETAIL 
	SET GROSSAMOUNT = C.GROSS,
	QUALIFYINGAMOUNT = C.QUALIFYING,
	DEDUCTIBLEAMOUNT = C.QUALIFYING
	FROM CHAPTERVIADETAIL CVIA  WITH(NOLOCK) 
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.SALARYDETAILID = CVIA.SALARYDETAILID  
	INNER JOIN #C80CCONFIGUREDDATA C 
	ON C.DEDUCTEEID = SD.DEDUCTEEID AND C.BRANCHID = SD.BRANCHID
	WHERE CVIA.SALARYSECTIONID=3
	/*Update SALARYDETAIL,chapter VIA detail in the last branch(mannual entries to be considered in the last branch)*/
	/*Update mannual entry except 80C*/
	UPDATE SALARYDETAIL
	SET TOTALDEDUNDERCHAPTERVIA = TOTALDEDUNDERCHAPTERVIA + (SELECT  SUM(QUALIFYINGAMOUNT) FROM #MANNUALENTRYEXCEPT80C)
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #MANNUALENTRYEXCEPT80C MEEC80C
	ON MEEC80C.DEDUCTEEID=SD.DEDUCTEEID AND MEEC80C.BRANCHID=SD.BRANCHID
	--WHERE SD.BRANCHID=@lastWorkingBranch
	UPDATE CHAPTERVIADETAIL
	SET GROSSAMOUNT= ME80C.GROSSAMOUNT,
	QUALIFYINGAMOUNT= ME80C.QUALIFYINGAMOUNT,
	DEDUCTIBLEAMOUNT= ME80C.QUALIFYINGAMOUNT
	FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID=CVIA.SALARYDETAILID
	INNER JOIN #MANNUALENTRYEXCEPT80C ME80C
	ON ME80C.DEDUCTEEID=SD.DEDUCTEEID AND ME80C.BRANCHID=SD.BRANCHID 
	AND ME80C.SALARYSECTIONID=CVIA.SALARYSECTIONID
	UPDATE CHAPTERVIADETAIL
	SET GROSSAMOUNT= CVIA.GROSSAMOUNT - ME80C.GROSSAMOUNT,
	QUALIFYINGAMOUNT= CVIA.QUALIFYINGAMOUNT - ME80C.QUALIFYINGAMOUNT,
	DEDUCTIBLEAMOUNT= CVIA.QUALIFYINGAMOUNT - ME80C.QUALIFYINGAMOUNT
	FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID=CVIA.SALARYDETAILID
	INNER JOIN #MANNUALENTRYEXCEPT80C1 ME80C
	ON ME80C.DEDUCTEEID=SD.DEDUCTEEID AND ME80C.BRANCHID=SD.BRANCHID 
	AND ME80C.SALARYSECTIONID=CVIA.SALARYSECTIONID
	WHERE CVIA.GROSSAMOUNT>0
	/*Update mannual entry 80C*/
	UPDATE SALARYDETAIL
	SET TOTALDEDUNDERCHAPTERVIA = TOTALDEDUNDERCHAPTERVIA + MEC80C.QUALIFYING
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #MANNUALENTRY80C MEC80C
	ON MEC80C.DEDUCTEEID = SD.DEDUCTEEID AND MEC80C.BRANCHID=SD.BRANCHID
	UPDATE CHAPTERVIADETAIL
	SET GROSSAMOUNT=CVIA.GROSSAMOUNT + ME80C.GROSS,
	QUALIFYINGAMOUNT=CVIA.QUALIFYINGAMOUNT + ME80C.QUALIFYING,
	DEDUCTIBLEAMOUNT=CVIA.QUALIFYINGAMOUNT + ME80C.QUALIFYING
	FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID=CVIA.SALARYDETAILID
	INNER JOIN #MANNUALENTRY80C ME80C
	ON ME80C.DEDUCTEEID=SD.DEDUCTEEID AND ME80C.BRANCHID=SD.BRANCHID 
	AND ME80C.SALARYSECTIONID=CVIA.SALARYSECTIONID
	/*Mannual entry other than last branch making to zero*/
	--UPDATE CHAPTERVIADETAIL
	--SET GROSSAMOUNT=0,DEDUCTIBLEAMOUNT=0,QUALIFYINGAMOUNT=0
	--FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
	--INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	--ON SD.SALARYDETAILID=CVIA.SALARYDETAILID
	--INNER JOIN #MANNUALENTRY80C MEC80C
	--ON MEC80C.DEDUCTEEID=SD.BRANCHID
	--WHERE CVIA.SALARYSECTIONID<>3 AND SD.BRANCHID<>@lastWorkingBranch
	/*end chapter VIA detail*/
	/*Section 16 Details*/
	SELECT E.DEDUCTEEID,LC.COMID, LC.BRANCHID, S16.SALARYSECTIONID, CEILING(SUM(ISNULL(S16.GROSSAMT1,0) + ISNULL(S16.GROSSAMT2,0) - ISNULL(RECOVERYAMT,0))) DEDUCTIONUS16
	INTO #DEDUCTIONUS16  
	FROM #LINKTOTC LC
	INNER JOIN #EMPWORKMONTH EM ON LC.COMID = EM.COMID AND LC.BRANCHID = EM.BRANCHID  
	LEFT JOIN SECTION16DET S16  WITH(NOLOCK) ON S16.COMID = LC.COMID AND S16.MONTHID = EM.MONTHID
	INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID
	GROUP BY E.DEDUCTEEID,LC.COMID, LC.BRANCHID, S16.SALARYSECTIONID
	UPDATE SALARYDETAIL 
	SET DEDUCTIONUS16 = (SELECT SUM(DEDUCTIONUS16) FROM #DEDUCTIONUS16 WHERE SD.DEDUCTEEID = DEDUCTEEID AND SD.BRANCHID = BRANCHID)
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #DEDUCTIONUS16 S16 
	ON S16.DEDUCTEEID = SD.DEDUCTEEID
	AND S16.BRANCHID = SD.BRANCHID
	UPDATE SECTION16DETAIL SET AMOUNT = S.DEDUCTIONUS16
	FROM SECTION16DETAIL S16  WITH(NOLOCK)
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK)
	ON SD.SALARYDETAILID = S16.SALARYDETAILID
	INNER JOIN #DEDUCTIONUS16 S
	ON S.DEDUCTEEID = SD.DEDUCTEEID
	AND S16.SALARYSECTIONID = S.SALARYSECTIONID
	AND S.BRANCHID = SD.BRANCHID
	/*End Section 16*/
	/*Taxable perquisite*/
	SELECT DEDUCTEEID, BRANCHID, CEILING(SUM(ISNULL(PROFITLIEU,0)))PROFITLIEU, 
	CEILING(SUM(ISNULL(TAXABLEPERQUISITE,0)))TAXABLEPERQUISITE,  
	 CEILING(SUM(ISNULL(OTHERBENEFITS,0))) OTHERBENEFITS  
	INTO #TAXABLEPERQUISITE  
	FROM  
	(  
	 SELECT E.DEDUCTEEID, LC.COMID, LC.BRANCHID,CASE WHEN T.PERKID = 21 THEN T.TAXABLEAMT END AS PROFITLIEU,  
		  CASE WHEN T.PERKID = 16 THEN T.TAXABLEAMT END AS OTHERBENEFITS,
		  CASE WHEN T.PERKID <> 21 THEN T.TAXABLEAMT END AS TAXABLEPERQUISITE FROM #LINKTOTC LC
	  INNER JOIN #EMPWORKMONTH EM ON LC.COMID = EM.COMID AND LC.BRANCHID = EM.BRANCHID  
	  INNER JOIN TAXABLEPERQUISITE T ON T.COMID = LC.COMID AND T.MONTHID = EM.MONTHID   
	  INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID  
	  WHERE LC.COMID=@comID
	)P  
	GROUP BY DEDUCTEEID, BRANCHID 
	UPDATE SALARYDETAIL 
	SET OTHERBENEFITS = T.OTHERBENEFITS,
	VALUEOFPERQUISITES = T.TAXABLEPERQUISITE, 
	TAXABLEPERQUISITES = T.TAXABLEPERQUISITE,
	TOTALPERQUISITE =  T.TAXABLEPERQUISITE, 
	PROFITLIEU = T.PROFITLIEU,
	GROSSSALARY = CEILING(BASICSALARY + ISNULL(TAXABLEALLOWANCE,0) + ISNULL(T.TAXABLEPERQUISITE,0)),
	INCOMEFROMSALARIES =  CEILING(BASICSALARY +  ISNULL(TAXABLEALLOWANCE,0) + ISNULL(T.TAXABLEPERQUISITE,0) - ISNULL(DEDUCTIONUS16,0))
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #TAXABLEPERQUISITE T
	ON SD.DEDUCTEEID = T.DEDUCTEEID AND SD.BRANCHID = T.BRANCHID
	/*End of Taxable perquisite*/
	/*Other Income*/
	SELECT E.DEDUCTEEID,LC.COMID, LC.BRANCHID, 
		 CEILING(ISNULL(O.HOUSEPROL,0) + ISNULL(O.HOUSEPROS,0)) AS INCOMEFROMHOUSEPROPERTY,   
		 CEILING(ISNULL(O.LGAIN,0) + ISNULL(O.SGAIN,0)) AS CAPITALGAINS, 
		 CEILING(ISNULL(OS.AMOUNT,0)) AS INCOMEFROMOTHERSOURCES  
	INTO #OTHERINCOME  
	FROM #LINKTOTC LC  WITH(NOLOCK)      
	INNER JOIN OTHERINCOME O  WITH(NOLOCK) ON O.COMID = LC.COMID   
	INNER JOIN #EMPLOYEE E ON E.EMPLOYEEID = LC.EMPLOYEEID  
	LEFT JOIN   
	(  
	 SELECT SUM(ISNULL(AMOUNT,0)-ISNULL(EXEMPTAMT,0)) AMOUNT,OTHERINCOMEID FROM OTHERINCOMESOURCES  
	 GROUP BY OTHERINCOMEID   
	)OS ON OS.OTHERINCOMEID = O.OTHERINCOMEID  
	WHERE LC.COMID=@comID
	--DELETE O FROM #OTHERINCOME O
	--INNER JOIN #WORKSUMMARY WS
	--ON WS.BRANCHID=O.BRANCHID
	--WHERE WS.MONTHID=@MAXMONTHID
	/*Update other income for last branch*/
	DECLARE @80TTA NUMERIC(13,2) = 0;
	SET @80TTA = CEILING(ISNULL((SELECT GROSSAMOUNT FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK)
					INNER JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.SALARYDETAILID = CVIA.SALARYDETAILID 
					INNER JOIN #DEDUCTEE D ON D.DEDUCTEEID = SD.DEDUCTEEID
					INNER JOIN #EMPLOYEE E ON E.DEDUCTEEID = D.DEDUCTEEID
					INNER JOIN #LINKTOTC LC ON LC.EMPLOYEEID = E.EMPLOYEEID AND LC.BRANCHID = D.BRANCHID
					WHERE SALARYSECTIONID = 18 AND SD.BRANCHID = @lastWorkingBranch),0))
	UPDATE SALARYDETAIL 
	SET INCOMEFROMHOUSEPROPERTY = O.INCOMEFROMHOUSEPROPERTY, 
	CAPITALGAINS = O.CAPITALGAINS,
	INCOMEFROMOTHERSOURCES = O.INCOMEFROMOTHERSOURCES,
	OTHERINCOME = CEILING(ISNULL(SALARYFROMPREVEMP,0) +  O.INCOMEFROMHOUSEPROPERTY + O.CAPITALGAINS + O.INCOMEFROMOTHERSOURCES)
	FROM SALARYDETAIL SD  WITH(NOLOCK) 
	INNER JOIN #OTHERINCOME O 
	ON O.DEDUCTEEID = SD.DEDUCTEEID  AND O.BRANCHID = SD.BRANCHID
	INNER JOIN #WORKSUMMARY WS ON WS.BRANCHID=O.BRANCHID
	WHERE WS.MONTHID = @MAXMONTHID
	/*Update other income for previous branches*/
	UPDATE SALARYDETAIL 
	SET INCOMEFROMHOUSEPROPERTY = 0,--SD.INCOMEFROMHOUSEPROPERTY-CEILING(ISNULL(O.INCOMEFROMHOUSEPROPERTY,0)), 
	CAPITALGAINS = 0,--SD.CAPITALGAINS-CEILING(ISNULL(O.CAPITALGAINS,0)),
	INCOMEFROMOTHERSOURCES = 0,--SD.INCOMEFROMOTHERSOURCES-CEILING(ISNULL(O.INCOMEFROMOTHERSOURCES,0)),
	OTHERINCOME = 0--SD.OTHERINCOME-CEILING(ISNULL(O.INCOMEFROMHOUSEPROPERTY,0) + ISNULL(O.CAPITALGAINS,0) + ISNULL(O.INCOMEFROMOTHERSOURCES,0))
	FROM SALARYDETAIL SD  WITH(NOLOCK) 
	INNER JOIN #OTHERINCOME O 
	ON O.DEDUCTEEID = SD.DEDUCTEEID  AND O.BRANCHID = SD.BRANCHID
	INNER JOIN #WORKSUMMARY WS ON WS.BRANCHID=O.BRANCHID
	WHERE WS.MONTHID <> @MAXMONTHID
	/*End of other income */
	/*Salary data*/
	SELECT DEDUCTEEID, COMID, BRANCHID, CEILING(SUM(ISNULL(BASICSALARY,0))) BASICSALARY,
	CEILING(SUM(ISNULL(TAXABLEALLOWANCE,0))) TAXABLEALLOWANCE
	INTO #SALARY  
	FROM  
	(  
	 SELECT E.DEDUCTEEID, LC.COMID, LC.BRANCHID,EARNING,   
	 CASE WHEN INCLUDEUS10 = 1 THEN SUM(ISNULL(NETAMT,0)) END AS TAXABLEALLOWANCE ,  
	 CASE WHEN INCLUDEUS10 =  0   
	   THEN   
		CASE WHEN EARNING = 1   
		 THEN SUM(ISNULL(NETAMT,0))   
		 ELSE -1 * SUM(ISNULL(NETAMT,0))   
		END  
	  END AS BASICSALARY FROM #LINKTOTC LC
	 INNER JOIN #EMPWORKMONTH EM ON LC.COMID = EM.COMID AND LC.BRANCHID = EM.BRANCHID  
	 INNER JOIN #SALDETAIL SD ON SD.COMID = LC.COMID AND SD.MONTHID = EM.MONTHID   
	 INNER JOIN SALARYHEAD SH WITH(NOLOCK) ON SD.SALARYHEADID = SH.SALARYHEADID  
	 INNER JOIN #EMPLOYEE E WITH(NOLOCK) ON E.EMPLOYEEID = LC.EMPLOYEEID  
	 WHERE LC.COMID=@comID AND SH.INCLUDEINTAX = 1 AND ISNULL(SH.C80CID,-1) <=0  
	 GROUP BY E.DEDUCTEEID, LC.COMID, LC.BRANCHID, EARNING, INCLUDEUS10  
	)S  
	GROUP BY DEDUCTEEID, COMID, BRANCHID
	/*Section 80TTA-interest on SB-account */
	SELECT S.DEDUCTEEID, CEILING(ISNULL(DEDUCTIBLEAMOUNT,0)) DEDUCTIBLEAMOUNT
	INTO #CHAPTER
	FROM CHAPTERVIADETAIL CVIA WITH(NOLOCK) 
	INNER JOIN SALARYDETAIL SD WITH(NOLOCK) ON SD.SALARYDETAILID = CVIA.SALARYDETAILID
	INNER JOIN #SALARY S ON SD.DEDUCTEEID = S.DEDUCTEEID AND SD.BRANCHID = S.BRANCHID  
	WHERE CVIA.SALARYSECTIONID = 18 AND SD.BRANCHID = @lastWorkingBranch
	UPDATE SALARYDETAIL 
	SET BASICSALARY = S.BASICSALARY, TAXABLEALLOWANCE = S.TAXABLEALLOWANCE,
	GROSSSALARY = CEILING(S.BASICSALARY +  S.TAXABLEALLOWANCE + ISNULL(TAXABLEPERQUISITES,0)),
	INCOMEFROMSALARIES =  CEILING(S.BASICSALARY +  S.TAXABLEALLOWANCE + ISNULL(TAXABLEPERQUISITES,0) - ISNULL(DEDUCTIONUS16,0)),
	OTHERINCOME = CEILING(ISNULL(SD.SALARYFROMPREVEMP,0) + ISNULL(SD.INCOMEFROMHOUSEPROPERTY,0) + ISNULL(SD.CAPITALGAINS,0) + ISNULL(SD.INCOMEFROMOTHERSOURCES,0) +  ISNULL(C.DEDUCTIBLEAMOUNT,0)),
	GROSSTOTALINCOME =  CEILING(S.BASICSALARY +  S.TAXABLEALLOWANCE + ISNULL(TAXABLEPERQUISITES,0) - ISNULL(DEDUCTIONUS16,0) + (ISNULL(SD.SALARYFROMPREVEMP,0) + ISNULL(SD.INCOMEFROMHOUSEPROPERTY,0) + ISNULL(SD.CAPITALGAINS,0) + ISNULL(SD.INCOMEFROMOTHERSOURCES,0) +  ISNULL(C.DEDUCTIBLEAMOUNT,0))),
	TOTALTAXABLEINCOME =  CEILING((S.BASICSALARY +  S.TAXABLEALLOWANCE + ISNULL(TAXABLEPERQUISITES,0) - ISNULL(DEDUCTIONUS16,0)) + (ISNULL(SD.SALARYFROMPREVEMP,0) + ISNULL(SD.INCOMEFROMHOUSEPROPERTY,0) + ISNULL(SD.CAPITALGAINS,0) + ISNULL(SD.INCOMEFROMOTHERSOURCES,0) +  ISNULL(C.DEDUCTIBLEAMOUNT,0)) - ISNULL(TOTALDEDUNDERCHAPTERVIA,0))
	FROM SALARYDETAIL SD  WITH(NOLOCK) 
	INNER JOIN #SALARY S ON SD.DEDUCTEEID = S.DEDUCTEEID AND SD.BRANCHID = S.BRANCHID  
	LEFT JOIN #CHAPTER C ON C.DEDUCTEEID = SD.DEDUCTEEID
	/*Getting gross salary*/
	/*Basic Salary*/	
	SELECT SD.MONTHID,SUM(ISNULL(SD.NETAMT,0)) NET,0 ALLOWANCE,0 PERK,SD.COMID 
	INTO #BASICTAXABLEALLOWANCE
	FROM #SALDETAIL SD
	INNER JOIN SALARYHEAD SH
	ON SH.SALARYHEADID=SD.SALARYHEADID
	WHERE SD.COMID=@comID AND SH.INCLUDEINTAX=1 AND SH.INCLUDEUS10=0 AND ISNULL(SH.C80CID,-1) <=0 
	GROUP BY MONTHID,SD.COMID
	/*Taxable allowance*/	
	SELECT SD.MONTHID,SUM(CEILING(ISNULL(SD.NETAMT,0))) NET,SH.EARNING,SH.INCLUDEUS10,SD.COMID 
	INTO #TAXABLEALLOWANCE
	FROM #SALDETAIL SD
	INNER JOIN SALARYHEAD SH
	ON SH.SALARYHEADID=SD.SALARYHEADID
	WHERE SD.COMID=@comID AND SH.INCLUDEINTAX=1 AND SH.INCLUDEUS10=1 AND ISNULL(SH.C80CID,-1) <=0 
	GROUP BY MONTHID,EARNING,SH.INCLUDEUS10,SD.COMID
	UPDATE #BASICTAXABLEALLOWANCE
	SET ALLOWANCE=TA.NET
	FROM #BASICTAXABLEALLOWANCE BT
	INNER JOIN #TAXABLEALLOWANCE TA
	ON TA.MONTHID=BT.MONTHID
	SELECT *,ROW_NUMBER() OVER(ORDER BY(SELECT 0)) ROWNUM INTO #WORKSUM FROM #WORKSUMMARY
	CREATE TABLE #GROSSSALARY(GROSS NUMERIC(12,2),BRANCHID INT,ROWCOUNTER INT)
	/*Gross salary*/
	DECLARE @I INT=1;
	DECLARE @CNT INT=0;
	DECLARE @GROSS NUMERIC(12,2);
	DECLARE @BID INT;
	SET @CNT=(SELECT COUNT(*) FROM #WORKSUM)
	WHILE(@I<=@CNT)
	BEGIN
		SET @BID=ISNULL((SELECT BRANCHID FROM #WORKSUM WHERE ROWNUM=@I),0)
		SET @GROSS=(SELECT SUM(NET+ALLOWANCE) FROM #BASICTAXABLEALLOWANCE BA 
		INNER JOIN #EMPWORKMONTH EMPWM 
		ON EMPWM.MONTHID=BA.MONTHID
		WHERE EMPWM.BRANCHID=@BID)
		SET @GROSS = @GROSS + ISNULL((SELECT TAXABLEPERQUISITE FROM #TAXABLEPERQUISITE WHERE BRANCHID = @BID),0)
		INSERT INTO #GROSSSALARY(GROSS,BRANCHID,ROWCOUNTER)
		VALUES(@GROSS,@BID,@I)
		SET @I=@I+1
	END
	/*Income from salaries*/
	UPDATE #GROSSSALARY
	SET GROSS=GROSS-D16.DEDUCTIONUS16
	FROM #GROSSSALARY GS
	INNER JOIN #DEDUCTIONUS16 D16
	ON D16.BRANCHID=GS.BRANCHID
	/*Update other branches otherincome*/
	--UPDATE #GROSSSALARY
	--SET GROSS=GROSS-(O.CAPITALGAINS+O.INCOMEFROMHOUSEPROPERTY+O.INCOMEFROMOTHERSOURCES)
	--FROM #GROSSSALARY GS
	--INNER JOIN #OTHERINCOME O
	--ON O.BRANCHID=GS.BRANCHID
	--WHERE GS.BRANCHID<>@lastWorkingBranch
	/*Other income only for last branch*/
	DELETE FROM #OTHERINCOME
	WHERE BRANCHID<>@lastWorkingBranch
	/*Gross total income*/
	UPDATE #GROSSSALARY
	SET GROSS = GROSS + (O.CAPITALGAINS + O.INCOMEFROMHOUSEPROPERTY + O.INCOMEFROMOTHERSOURCES)
	FROM #GROSSSALARY GS
	INNER JOIN #OTHERINCOME O
	ON O.BRANCHID = GS.BRANCHID
	/*Update gross total income*/
	UPDATE SALARYDETAIL
	SET GROSSTOTALINCOME = GS.GROSS
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID
	INNER JOIN #GROSSSALARY GS
	ON GS.BRANCHID = D.BRANCHID
	/*total taxable income*/
	UPDATE #GROSSSALARY
	SET GROSS=GS.GROSS - C80C.QUALIFYING
	FROM #GROSSSALARY GS
	INNER JOIN #C80CCONFIGUREDDATA C80C
	ON C80C.BRANCHID = GS.BRANCHID
	/*Update total taxable income*/
	UPDATE SALARYDETAIL
	SET TOTALTAXABLEINCOME=GS.GROSS
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID
	INNER JOIN #GROSSSALARY GS
	ON GS.BRANCHID = D.BRANCHID
	/*update Previous income*/
	SET @I=1;
	SET @CNT=(SELECT COUNT(*) FROM #GROSSSALARY)
	DECLARE @DEDIDTOBEUPDATED INT;
	DECLARE @BRIDTOBEUPDATED INT;
	DECLARE @AMT NUMERIC(13,2);
	DECLARE @DEDUCTEEID INT;
	DECLARE @CURRENTTDS NUMERIC(13,2) = 0;
	WHILE(@I<@CNT)
	BEGIN
		SET @BID = (SELECT BRANCHID FROM #GROSSSALARY WHERE ROWCOUNTER= @I)
		SET @DEDUCTEEID = (SELECT DEDUCTEEID FROM #DEDUCTEE WHERE BRANCHID = @BID)
		SET @CURRENTTDS = @CURRENTTDS + (SELECT SUM(INCOMETAX) FROM DEDUCTIONDETAIL WHERE BRANCHID = @BID AND DEDUCTEEID = @DEDUCTEEID)
		/*Adding all the previous branch income*/
		IF (@I + 1 = @CNT)
		BEGIN
			SET @AMT=ISNULL((SELECT SUM(GROSS) FROM #GROSSSALARY WHERE ROWCOUNTER<=@I),0)
		END
		ELSE
		BEGIN
			SET @AMT=0
		END
		/*Showing only previous branch income*/
		--SET @AMT = ISNULL((SELECT SUM(GROSS) FROM #GROSSSALARY WHERE ROWCOUNTER = @I),0)
		SET @BRIDTOBEUPDATED = (SELECT BRANCHID FROM #GROSSSALARY WHERE ROWCOUNTER = @I+1)
		SET @DEDIDTOBEUPDATED = (SELECT DEDUCTEEID FROM #DEDUCTEE WHERE BRANCHID = @BRIDTOBEUPDATED)
		UPDATE SALARYDETAIL
		SET SALARYFROMPREVEMP = @AMT
		,GROSSTOTALINCOME = INCOMEFROMSALARIES + OTHERINCOME
		--,TOTALTAXABLEINCOME=GROSSTOTALINCOME-DEDUCTIONUS16
		--,OTHERINCOME=OTHERINCOME+@AMT
		WHERE DEDUCTEEID=@DEDIDTOBEUPDATED AND BRANCHID=@BRIDTOBEUPDATED
		SET @I=@I+1
	END
	UPDATE SALARYDETAIL
	SET PREVEMPINCOMETAX = @CURRENTTDS
	WHERE DEDUCTEEID=@DEDIDTOBEUPDATED AND BRANCHID=@BRIDTOBEUPDATED
	UPDATE SALARYDETAIL
	SET TOTALTAXABLEINCOME=GROSSTOTALINCOME - SD.TOTALDEDUNDERCHAPTERVIA
	,OTHERINCOME = CEILING((ISNULL(INCOMEFROMBUSINESS,0) + ISNULL(INCOMEFROMHOUSEPROPERTY,0) + ISNULL(INCOMEFROMOTHERSOURCES,0) + ISNULL(SALARYFROMPREVEMP,0)) + ISNULL(CAPITALGAINS,0))
	FROM SALARYDETAIL SD
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
	UPDATE SALARYDETAIL
	SET OTHERINCOME = OTHERINCOME + @80TTA
	FROM SALARYDETAIL SD
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
	WHERE SD.BRANCHID = @lastWorkingBranch
	--UPDATE SALARYDETAIL
	--SET OTHERINCOME = CEILING((ISNULL(INCOMEFROMBUSINESS,0) + ISNULL(INCOMEFROMHOUSEPROPERTY,0) + ISNULL(INCOMEFROMOTHERSOURCES,0) + ISNULL(SALARYFROMPREVEMP,0)) + ISNULL(CAPITALGAINS,0))
	--FROM SALARYDETAIL SD
	--INNER JOIN #DEDUCTEE D
	--ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
	--WHERE SD.BRANCHID<>@firstWorkingBranch
	UPDATE SALARYDETAIL
	SET GROSSTOTALINCOME = OTHERINCOME + INCOMEFROMSALARIES,
	TOTALTAXABLEINCOME = OTHERINCOME + INCOMEFROMSALARIES - TOTALDEDUNDERCHAPTERVIA
	FROM SALARYDETAIL SD
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID AND D.BRANCHID = SD.BRANCHID
	UPDATE SALARYDETAIL
	SET TOTALTAXABLEINCOME = 0
	FROM SALARYDETAIL SD WITH(NOLOCK)
	INNER JOIN #DEDUCTEE D
	ON D.DEDUCTEEID = SD.DEDUCTEEID
	WHERE SD.TOTALTAXABLEINCOME < 0
	UPDATE SALARYDETAIL SET PREVEMPINCOMETAX = NULL WHERE DEDUCTEEID IN (SELECT DEDUCTEEID FROM #DEDUCTEE) AND BRANCHID <> @lastWorkingBranch
	/*Update chapter VIA Details and total taxable income in previous branches*/
	--UPDATE SALARYDETAIL
	--SET TOTALDEDUNDERCHAPTERVIA=TOTALDEDUNDERCHAPTERVIA - ME80C1.QUALIFYING,
	--TOTALTAXABLEINCOME=TOTALTAXABLEINCOME + ME80C1.QUALIFYING
	--FROM SALARYDETAIL SD WITH(NOLOCK)
	--INNER JOIN #MANNUALENTRY801 ME80C1
	--ON ME80C1.DEDUCTEEID=SD.DEDUCTEEID AND ME80C1.BRANCHID=SD.BRANCHID
	--UPDATE SALARYDETAIL
	--SET TOTALDEDUNDERCHAPTERVIA=TOTALDEDUNDERCHAPTERVIA - MEEC80C1.QUALIFYINGAMOUNT,
	--TOTALTAXABLEINCOME=TOTALTAXABLEINCOME + MEEC80C1.QUALIFYINGAMOUNT
	--FROM SALARYDETAIL SD WITH(NOLOCK)
	--INNER JOIN #MANNUALENTRYEXCEPT80C1 MEEC80C1
	--ON MEEC80C1.DEDUCTEEID=SD.DEDUCTEEID AND MEEC80C1.BRANCHID=SD.BRANCHID
	DROP TABLE #BASICTAXABLEALLOWANCE
	DROP TABLE #C80CCONFIGUREDDATA
	DROP TABLE #CHAPTER
	DROP TABLE #CHAPTERVIADET
	DROP TABLE #DEDUCTEE
	DROP TABLE #DEDUCTIONUS16
	DROP TABLE #EMPLOYEE
	DROP TABLE #EMPWORKMONTH
	DROP TABLE #GROSSSALARY
	DROP TABLE #LINKTOTC
	DROP TABLE #MANNUALENTRY80C
	DROP TABLE #MANNUALENTRYEXCEPT80C
	DROP TABLE #OTHERINCOME
	DROP TABLE #SALARY
	DROP TABLE #SALDETAIL
	DROP TABLE #TAXABLEALLOWANCE
	DROP TABLE #TAXABLEPERQUISITE
	DROP TABLE #WORKSUM
	DROP TABLE #WORKSUMMARY
	DROP TABLE #MANNUALENTRY801
	DROP TABLE #MANNUALENTRYEXCEPT80C1
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'USP_VPM_UpdateExistingVendors')
DROP PROCEDURE USP_VPM_UpdateExistingVendors
GO
CREATE PROC [USP_VPM_UpdateExistingVendors]                     
(                      
@DEDUCTEEID INT,                                    
@NAME VARCHAR(75),                      
@PAN VARCHAR(10),                    
@PANREFERENCE VARCHAR(10),                    
@ADDRESS1 VARCHAR(25),                      
@ADDRESS2 VARCHAR(25),                      
@ADDRESS3 VARCHAR(25),                      
@ADDRESS4 VARCHAR(25),                      
@ADDRESS5 VARCHAR(25),                      
@PINCODE BIGINT,                      
@STATEID INT                               
)                      
AS                    
BEGIN                  
  UPDATE DEDUCTEE SET NAME=@NAME,PAN=@PAN,PANREFERENCE= @PANREFERENCE,ADDRESS1=@ADDRESS1,ADDRESS2=@ADDRESS2,ADDRESS3=@ADDRESS3,                      
  ADDRESS4=@ADDRESS4,ADDRESS5=@ADDRESS5,PINCODE=@PINCODE,STATEID=@STATEID                   
  WHERE DEDUCTEEID=@DEDUCTEEID ;                 
END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'P' AND name = 'What_DB_is_this')
DROP PROCEDURE What_DB_is_this
GO
CREATE PROC What_DB_is_this     
AS   
SELECT DB_NAME() AS ThisDB;
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'fn_diagramobjects')
DROP Function fn_diagramobjects
GO
	CREATE FUNCTION dbo.fn_diagramobjects() 
	RETURNS int
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		declare @id_upgraddiagrams		int
		declare @id_sysdiagrams			int
		declare @id_helpdiagrams		int
		declare @id_helpdiagramdefinition	int
		declare @id_creatediagram	int
		declare @id_renamediagram	int
		declare @id_alterdiagram 	int 
		declare @id_dropdiagram		int
		declare @InstalledObjects	int
		select @InstalledObjects = 0
		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'),
			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'),
			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'),
			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'),
			@id_creatediagram = object_id(N'dbo.sp_creatediagram'),
			@id_renamediagram = object_id(N'dbo.sp_renamediagram'),
			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'), 
			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')
		if @id_upgraddiagrams is not null
			select @InstalledObjects = @InstalledObjects + 1
		if @id_sysdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 2
		if @id_helpdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 4
		if @id_helpdiagramdefinition is not null
			select @InstalledObjects = @InstalledObjects + 8
		if @id_creatediagram is not null
			select @InstalledObjects = @InstalledObjects + 16
		if @id_renamediagram is not null
			select @InstalledObjects = @InstalledObjects + 32
		if @id_alterdiagram  is not null
			select @InstalledObjects = @InstalledObjects + 64
		if @id_dropdiagram is not null
			select @InstalledObjects = @InstalledObjects + 128
		return @InstalledObjects 
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'fnTest')
DROP Function fnTest
GO
create function fnTest()
returns int
as
begin
 return(1)
end;

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_GETQUARTER')
DROP Function UDF_TDS_GETQUARTER
GO
CREATE FUNCTION [dbo].[UDF_TDS_GETQUARTER] 
(
	@MONTH INT
)
RETURNS INT
AS
	BEGIN
		DECLARE @QUARTER INT;
		IF (@MONTH = 4 OR @MONTH = 5 OR @MONTH = 6)
		   SET @QUARTER = 1
		ELSE IF (@MONTH = 7 OR @MONTH = 8 OR @MONTH = 9)
		   SET @QUARTER = 2
		ELSE IF (@MONTH = 10 OR @MONTH = 11 OR @MONTH = 12)
		   SET @QUARTER = 3
		ELSE 
		   SET @QUARTER = 4
		RETURN @QUARTER;
	END

GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_GETSPLITTEDSTRING')
DROP Function UDF_TDS_GETSPLITTEDSTRING
GO
-------------------------------------FUNCTION----------------------------------------------------
CREATE FUNCTION [DBO].[UDF_TDS_GETSPLITTEDSTRING]        
(        
@SPLITSTR NVARCHAR(MAX),        
@SPLITCHAR NVARCHAR(5),  
@ROWNO INT        
)         
RETURNS VARCHAR(500)      
BEGIN         
DECLARE @COUNT INT        
SET @COUNT = 1 
DECLARE @RTNVALUE TABLE  
      (  
        ROWNO INT,  
        DATA VARCHAR(500)  
      )           
WHILE (CHARINDEX(@SPLITCHAR,@SPLITSTR)>0)        
BEGIN             
 INSERT INTO @RTNVALUE(ROWNO,DATA)  
 SELECT @COUNT,DATA = LTRIM(RTRIM(SUBSTRING(@SPLITSTR,1,CHARINDEX(@SPLITCHAR,@SPLITSTR)-1)))              
 SET @SPLITSTR = SUBSTRING(@SPLITSTR,CHARINDEX(@SPLITCHAR,@SPLITSTR)+1,LEN(@SPLITSTR))        
 SET @COUNT = @COUNT + 1        
END   
DECLARE @VAL VARCHAR(500)  
   SELECT @VAL=DATA FROM @RTNVALUE WHERE ROWNO=@ROWNO    
 RETURN @VAL  
END 
-------------------------------------PROCEDURES----------------------------------------------------
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_ISBANKIDUSED')
DROP Function UDF_TDS_ISBANKIDUSED
GO
CREATE FUNCTION [DBO].[UDF_TDS_ISBANKIDUSED]
(
	@BANKID INT
)
RETURNS INT
AS
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT=COUNT(BANKID) FROM CHALLANDETAIL WITH(NOLOCK) WHERE BANKID=@BANKID
	RETURN @COUNT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_ISBRANCHUSED')
DROP Function UDF_TDS_ISBRANCHUSED
GO
CREATE FUNCTION [DBO].[UDF_TDS_ISBRANCHUSED]
(
	@BRANCHID INT
)
RETURNS INT
AS
BEGIN
	DECLARE @COUNT INT
    DECLARE @TOTALCOUNT INT
    SET @TOTALCOUNT=0
	--CHECKING IN COMPANYBRANCH TABLE
	SELECT @COUNT=COUNT(PARENTBRANCHID) FROM COMPANYBRANCH WITH(NOLOCK) WHERE PARENTBRANCHID=@BRANCHID
	IF @COUNT>0
	BEGIN
	SET @TOTALCOUNT=@TOTALCOUNT+@COUNT
	SET @COUNT=0
    END
    --CHECKING IN BRANCHDEDUCTORS TABLE
    SELECT @COUNT=COUNT(BRANCHID) FROM BRANCHDEDUCTORS WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
    IF @COUNT>0
    BEGIN
    SET @TOTALCOUNT=@TOTALCOUNT+@COUNT
    SET @COUNT=0
    END
    --CHECKING IN DEDUCTEE TABLE
    SELECT @COUNT=COUNT(BRANCHID) FROM DEDUCTEE WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
    IF @COUNT>0
    BEGIN
    SET @TOTALCOUNT=@TOTALCOUNT+@COUNT
    SET @COUNT=0
    END
    --CHECKING IN DEDUCTIONDETAIL
    SELECT @COUNT=COUNT(BRANCHID) FROM DEDUCTIONDETAIL WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
    IF @COUNT>0
    BEGIN
    SET @TOTALCOUNT=@TOTALCOUNT+@COUNT
    SET @COUNT=0
    END
     --CHECKING IN USERMASTER
    SELECT @COUNT=COUNT(BRANCHID) FROM USERMASTER WITH(NOLOCK) WHERE BRANCHID=@BRANCHID
    IF @COUNT>0
    BEGIN
    SET @TOTALCOUNT=@TOTALCOUNT+@COUNT
    SET @COUNT=0
    END
	-- RETURN THE RESULT OF THE FUNCTION
	RETURN @TOTALCOUNT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_ISERETURNDONE')
DROP Function UDF_TDS_ISERETURNDONE
GO
CREATE FUNCTION [DBO].[UDF_TDS_ISERETURNDONE]
(
	@BRANCHID INT,
	@CHALLANID INT
) 
RETURNS INT
AS
	BEGIN
		DECLARE @RETURNVALUE INT;
		IF EXISTS(SELECT ACKID FROM ACKNO WITH(NOLOCK) INNER JOIN (SELECT DISTINCT BRANCHID,FORMID,[QUARTER]
													  FROM   DEDUCTIONDETAIL WITH(NOLOCK)
													  WHERE  DEDUCTIONID IN (SELECT DEDUCTIONID 
																			 FROM   DEDCHALINK WITH(NOLOCK) 
																			 WHERE  BRANCHID = @BRANCHID AND CHALLANID = @CHALLANID)) DD
						  ON ACKNO.BRANCHID = DD.BRANCHID AND ACKNO.FORMID = DD.FORMID AND ACKNO.[QUARTER] = DD.[QUARTER]
				   WHERE ACKNO.BRANCHID = @BRANCHID AND LEN(ISNULL(ORGNUM,'')) = 15)
				SELECT @RETURNVALUE = 1;
		ELSE
				SELECT @RETURNVALUE = 0;
		RETURN @RETURNVALUE;				
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_ISUSEREXISTS')
DROP Function UDF_TDS_ISUSEREXISTS
GO
CREATE FUNCTION [DBO].[UDF_TDS_ISUSEREXISTS]
    (@USERID INT,
	@USERNAME VARCHAR(25))
	RETURNS INT
AS
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT=COUNT(USERNAME) FROM USERMASTER WITH(NOLOCK) WHERE USERNAME=@USERNAME AND USERID<>@USERID
	RETURN @COUNT
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'TF' AND name = 'UDF_TDS_SPLITSTRING')
DROP Function UDF_TDS_SPLITSTRING
GO
CREATE FUNCTION [DBO].[UDF_TDS_SPLITSTRING]                
(                
@SPLITSTR NVARCHAR(MAX),                
@SPLITCHAR NVARCHAR(5)                
)                 
RETURNS @RTNVALUE TABLE                 
(                
DATA NVARCHAR(500)                
)                 
AS                 
BEGIN                 
DECLARE @COUNT INT                
SET @COUNT = 1                
WHILE (CHARINDEX(@SPLITCHAR,@SPLITSTR)>0)                
BEGIN                
INSERT INTO @RTNVALUE (DATA)                
SELECT                 
DATA = LTRIM(RTRIM(SUBSTRING(@SPLITSTR,1,CHARINDEX(@SPLITCHAR,@SPLITSTR)-1)))                
SET @SPLITSTR = SUBSTRING(@SPLITSTR,CHARINDEX(@SPLITCHAR,@SPLITSTR)+1,LEN(@SPLITSTR))                
SET @COUNT = @COUNT + 1                
END                
INSERT INTO @RTNVALUE (DATA)                
SELECT DATA = LTRIM(RTRIM(@SPLITSTR))                
RETURN                
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_GETCORRPANREFERENCEBASEDONBRANCHID')
DROP Function UDF_TDS_GETCORRPANREFERENCEBASEDONBRANCHID
GO
CREATE FUNCTION [dbo].[UDF_TDS_GETCORRPANREFERENCEBASEDONBRANCHID](@BRANCHID INT,  @ISEMPLOYEE BIT)   
RETURNS VARCHAR(10)          
AS            
 BEGIN
  DECLARE @PANREF VARCHAR(10);
  DECLARE @PANREF1 VARCHAR(10);
  DECLARE @PANREFTABLE TABLE(PANREFERENCE VARCHAR(10));
   IF(@ISEMPLOYEE = 1)        
    BEGIN   
	   IF EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM DEDUCTEE D WITH(NOLOCK)           
							    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND ISNULL(PANREFERENCE,'')  <> '' AND PANREFERENCE LIKE '%NP%' )         
		   BEGIN
		   INSERT INTO @PANREFTABLE
		   SELECT MAX(PANREFERENCE) FROM DEDUCTEE D WITH(NOLOCK)           
							    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NP%'
			INSERT INTO @PANREFTABLE
			SELECT MAX(PANREFERENCE) FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NP%' 
			 SELECT @PANREF1 =  MAX(PANREFERENCE) FROM @PANREFTABLE
			  --SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(MAX(D.PANREFERENCE), 6, 5))            
				 -- WHEN 1 THEN CAST((SUBSTRING(MAX(D.PANREFERENCE), 6, 5)) + 1 AS VARCHAR)            
				 -- WHEN 0 THEN '00001' END FROM DEDUCTEE D WITH(NOLOCK)
				 -- INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID           
				 -- WHERE BRANCHID = @BRANCHID             
				 -- GROUP BY D.BRANCHID
			SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(@PANREF1, 3, 8))            
				  WHEN 1 THEN CAST((SUBSTRING(@PANREF1, 3, 8)) + 1 AS VARCHAR)            
				  WHEN 0 THEN '00000001' END 
		   END   
	   ELSE
	       BEGIN
			 SET @PANREF = '00000001'
	       END                 
      END            
     ELSE            
    BEGIN            
        IF EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM DEDUCTEE D WITH(NOLOCK)            
							    INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND ISNULL(PANREFERENCE,'')  <> '' AND PANREFERENCE LIKE '%NP%')         
		   BEGIN
		    INSERT INTO @PANREFTABLE
		   SELECT MAX(PANREFERENCE) FROM DEDUCTEE D WITH(NOLOCK)           
							    INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NP%'
			INSERT INTO @PANREFTABLE
			SELECT MAX(PANREFERENCE) FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NP%' 
			 SELECT @PANREF1 =  MAX(PANREFERENCE) FROM @PANREFTABLE
			  --SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(MAX(D.PANREFERENCE), 6, 5))            
				 -- WHEN 1 THEN CAST((SUBSTRING(MAX(D.PANREFERENCE), 6, 5)) + 1 AS VARCHAR)            
				 -- WHEN 0 THEN '00001' END FROM DEDUCTEE D WITH(NOLOCK)            
				 -- INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
				 -- WHERE BRANCHID = @BRANCHID             
				 -- GROUP BY D.BRANCHID
			SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(@PANREF1, 3, 8))            
				  WHEN 1 THEN CAST((SUBSTRING(@PANREF1, 3, 8)) + 1 AS VARCHAR)            
				  WHEN 0 THEN '00000001' END 
		   END   
	   ELSE
	       BEGIN
			 SET @PANREF = '00000001'
	       END               
    END             
   SET @PANREF =  REPLICATE('0', 8 - LEN(@PANREF)) + @PANREF
   RETURN @PANREF
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_GETPANREFERENCEBASEDONBRANCHIDFORCB')
DROP Function UDF_TDS_GETPANREFERENCEBASEDONBRANCHIDFORCB
GO
CREATE FUNCTION [dbo].[UDF_TDS_GETPANREFERENCEBASEDONBRANCHIDFORCB](@BRANCHID INT,  @ISEMPLOYEE BIT)   
RETURNS VARCHAR(10)          
AS            
 BEGIN
  DECLARE @PANREF VARCHAR(10);
  DECLARE @PANREF1 VARCHAR(10);
  DECLARE @PANREFTABLE TABLE(PANREFERENCE VARCHAR(10));
   IF(@ISEMPLOYEE = 1)        
    BEGIN   
	   IF EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM DEDUCTEE D WITH(NOLOCK)           
							    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND (ISNULL(PANREFERENCE,'')  <> '') AND PANREFERENCE LIKE '%NP%') OR EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND (ISNULL(PANREFERENCE,'')  <> '') AND PANREFERENCE LIKE '%NP%')       
		   BEGIN
		   INSERT INTO @PANREFTABLE
		   SELECT MAX(PANREFERENCE) FROM  DEDUCTEE D WITH(NOLOCK)           
							    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NP%'
			INSERT INTO @PANREFTABLE
			SELECT MAX(PANREFERENCE) FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NP%' 
			 SELECT @PANREF1 =  MAX(PANREFERENCE) FROM @PANREFTABLE
			  --SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(MAX(D.PANREFERENCE), 6, 5))            
				 -- WHEN 1 THEN CAST((SUBSTRING(MAX(D.PANREFERENCE), 6, 5)) + 1 AS VARCHAR)            
				 -- WHEN 0 THEN '00001' END FROM DEDUCTEE D WITH(NOLOCK)
				 -- INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID           
				 -- WHERE BRANCHID = @BRANCHID             
				 -- GROUP BY D.BRANCHID
			SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(@PANREF1, 3, 8))            
				  WHEN 1 THEN CAST((SUBSTRING(@PANREF1, 3, 8)) + 1 AS VARCHAR)            
				  WHEN 0 THEN '00000001' END 
		   END   
	   ELSE
	       BEGIN
			 SET @PANREF = '00000001'
	       END                 
      END            
     ELSE            
    BEGIN            
        IF EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM DEDUCTEE D WITH(NOLOCK)            
							    INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND ISNULL(PANREFERENCE,'')  <> '' AND PANREFERENCE LIKE '%NP%') OR EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND (ISNULL(PANREFERENCE,'')  <> '') AND PANREFERENCE LIKE '%NP%')        
		   BEGIN
		    INSERT INTO @PANREFTABLE
		   SELECT MAX(PANREFERENCE) FROM DEDUCTEE D WITH(NOLOCK)           
							    INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NP%'
			INSERT INTO @PANREFTABLE
			SELECT MAX(PANREFERENCE) FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NP%' 
			 SELECT @PANREF1 =  MAX(PANREFERENCE) FROM @PANREFTABLE
			  --SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(MAX(D.PANREFERENCE), 6, 5))            
				 -- WHEN 1 THEN CAST((SUBSTRING(MAX(D.PANREFERENCE), 6, 5)) + 1 AS VARCHAR)            
				 -- WHEN 0 THEN '00001' END FROM DEDUCTEE D WITH(NOLOCK)            
				 -- INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
				 -- WHERE BRANCHID = @BRANCHID             
				 -- GROUP BY D.BRANCHID
			SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(@PANREF1, 3, 8))            
				  WHEN 1 THEN CAST((SUBSTRING(@PANREF1, 3, 8)) + 1 AS VARCHAR)            
				  WHEN 0 THEN '00000001' END 
		   END   
	   ELSE
	       BEGIN
			 SET @PANREF = '00000001'
	       END               
    END             
   SET @PANREF =  REPLICATE('0', 8 - LEN(@PANREF)) + @PANREF
   RETURN @PANREF
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_CHECKFORCORRECTIONSTATEMENTS')
DROP Function UDF_TDS_CHECKFORCORRECTIONSTATEMENTS
GO
CREATE FUNCTION [DBO].[UDF_TDS_CHECKFORCORRECTIONSTATEMENTS]
(
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT
)
RETURNS INT
AS
	BEGIN
		DECLARE @RETURNVALUE INT;
		/* C3 */
		IF EXISTS(SELECT CDD.DEDUCTIONSERIALNO AS SERIALNO 
				  FROM   CORRCHALLANDETAIL CCD WITH(NOLOCK) INNER JOIN CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) ON CCD.CHALLANERETURNID = CDD.CHALLANERETURNID AND CCD.BRANCHID = CDD.BRANCHID AND CCD.FORMID = CDD.FORMID AND CCD.QUARTER = CDD.QUARTER
				  WHERE  CDD.CORRECTIONSTATUS IN(2,4,5) AND CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.QUARTER = @QUARTER AND CCD.CORRECTIONSTATUS = 2
				  UNION
				  SELECT DISTINCT CCD.CHALLANSERIALNO AS SERIALNO
				  FROM   CORRCHALLANDETAIL CCD WITH(NOLOCK) INNER JOIN CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) ON CCD.CHALLANERETURNID = CDD.CHALLANERETURNID  AND CCD.BRANCHID = CDD.BRANCHID AND CCD.FORMID = CDD.FORMID AND CCD.QUARTER = CDD.QUARTER
				  WHERE CCD.CORRECTIONSTATUS = 2 AND CDD.CORRECTIONSTATUS IN(2,4,5) AND CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.QUARTER = @QUARTER)
			BEGIN
				SET @RETURNVALUE = 1;				
			END
		/* C2 */			
		ELSE IF EXISTS (SELECT CORRUPDATEDCHALLAN.CHALLANERETURNID AS SERIALNO
						FROM (SELECT DISTINCT CD.CHALLANERETURNID 
							  FROM   CORRCHALLANDETAIL CD WITH(NOLOCK) 
							  WHERE  CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.QUARTER = @QUARTER AND CD.CORRECTIONSTATUS = 2 AND CD.ISUPDATECHALLAN = 1) AS CORRUPDATEDCHALLAN
												LEFT JOIN (SELECT DISTINCT CHALLANERETURNID
														   FROM   CORRDEDUCTIONDETAIL WITH(NOLOCK)
														   WHERE  BRANCHID = @BRANCHID AND FORMID = @FORMID AND QUARTER = @QUARTER AND CORRECTIONSTATUS IN (2,4,5)
														  ) AS CORRUPDATEDDEDUCTION ON CORRUPDATEDCHALLAN.CHALLANERETURNID = CORRUPDATEDDEDUCTION.CHALLANERETURNID
					WHERE CORRUPDATEDDEDUCTION.CHALLANERETURNID IS NULL)
			BEGIN
				SET @RETURNVALUE = 1;
			END
			/* C9 */
			ELSE IF EXISTS (SELECT DISTINCT CCD.CHALLANSERIALNO AS SERIALNO
							FROM CORRCHALLANDETAIL CCD  WITH(NOLOCK)   
							WHERE CCD.CORRECTIONSTATUS = 5 AND CCD.BRANCHID = @BRANCHID AND CCD.FORMID = @FORMID AND CCD.QUARTER = @QUARTER					
							UNION
							SELECT DISTINCT CDD.DEDUCTIONSERIALNO AS SERIALNO
							FROM   CORRDEDUCTIONDETAIL CDD WITH(NOLOCK) INNER JOIN CORRCHALLANDETAIL CCD WITH(NOLOCK) ON CCD.CHALLANERETURNID = CDD.CHALLANERETURNID AND CCD.BRANCHID = CDD.BRANCHID AND CCD.FORMID = CDD.FORMID AND CCD.QUARTER = CDD.QUARTER
							WHERE  CCD.CORRECTIONSTATUS = 5 AND CCD.BRANCHID = @BRANCHID  AND CCD.FORMID = @FORMID AND CCD.QUARTER = @QUARTER AND CDD.CORRECTIONSTATUS = 5)
				BEGIN
					SET @RETURNVALUE = 1;
				END
			/* C4 */
			ELSE IF EXISTS (SELECT DISTINCT CSD.DEDUCTEESERIALNO AS SERIALNO
					FROM   CORRSALARYDETAIL CSD WITH(NOLOCK) INNER JOIN (SELECT CE.DEDUCTEESERIALNO,CE.BRANCHID,CE.FORMID,CE.QUARTER
															FROM   CORREMPLOYEE CE WITH(NOLOCK) INNER JOIN (SELECT MAX(CORRECTIONSTATUS) CURRENTCORRECTIONSTATUS,DEDUCTEESERIALNO 
																							   FROM   CORREMPLOYEE WITH(NOLOCK) 
																							   WHERE  BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4
																							   GROUP BY DEDUCTEESERIALNO) UCE
												ON CE.DEDUCTEESERIALNO = UCE.DEDUCTEESERIALNO AND CE.CORRECTIONSTATUS = UCE.CURRENTCORRECTIONSTATUS
															WHERE BRANCHID = @BRANCHID AND FORMID = 1 AND QUARTER = 4) CE
												ON CSD.BRANCHID = CE.BRANCHID AND CE.FORMID = 1 AND CE.QUARTER = 4
					WHERE  CSD.BRANCHID = @BRANCHID AND CSD.CORRECTIONSTATUS <> 1 AND CSD.RECORDSTATUS = 1)
				BEGIN
					SET @RETURNVALUE = 1;
				END
			ELSE
				BEGIN
					SET @RETURNVALUE = 0;
				END
			RETURN @RETURNVALUE;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_CHECKFORERETURN')
DROP Function UDF_TDS_CHECKFORERETURN
GO
CREATE FUNCTION [DBO].[UDF_TDS_CHECKFORERETURN]
(
	@BRANCHID INT,
	@FORMID INT,
	@QUARTER INT,
	@CHALLANID INT = NULL
)
RETURNS INT
AS
	BEGIN
		DECLARE @RETURNVALUE INT;
		IF @CHALLANID IS NULL
			BEGIN
				IF EXISTS(SELECT ACKID FROM ACKNO WITH(NOLOCK) INNER JOIN (SELECT DISTINCT BRANCHID,FORMID,[QUARTER]
															  FROM   DEDUCTIONDETAIL WITH(NOLOCK)
															  WHERE  DEDUCTIONID IN (SELECT DEDUCTIONID 
																					 FROM DEDCHALINK AS DCL WITH(NOLOCK) INNER JOIN CHALLANDETAIL AS CD WITH(NOLOCK) ON DCL.CHALLANID = CD.CHALLANID				
																					 WHERE  CD.BRANCHID = @BRANCHID AND CD.FORMID = @FORMID AND CD.[QUARTER] = @QUARTER)) DD
								ON ACKNO.BRANCHID = DD.BRANCHID AND ACKNO.FORMID = DD.FORMID AND ACKNO.[QUARTER] = DD.[QUARTER]
						  WHERE ACKNO.BRANCHID = @BRANCHID AND LEN(ISNULL(ORGNUM,'')) = 15)
					SELECT @RETURNVALUE = 1;
				ELSE
					SELECT @RETURNVALUE = 0;
			END
		ELSE
			BEGIN
				IF EXISTS(SELECT ACKID FROM ACKNO WITH(NOLOCK) INNER JOIN (SELECT DISTINCT BRANCHID,FORMID,[QUARTER]
															  FROM   DEDUCTIONDETAIL WITH(NOLOCK)
															  WHERE  DEDUCTIONID IN (SELECT DD.DEDUCTIONID 
																					 FROM DEDUCTIONDETAIL DD WITH(NOLOCK) INNER JOIN DEDCHALINK DCL WITH(NOLOCK) ON DD.DEDUCTIONID = DCL.DEDUCTIONID AND DD.BRANCHID = DCL.BRANCHID
																					 WHERE DD.BRANCHID = @BRANCHID AND DCL.CHALLANID = @CHALLANID)) DD
								ON ACKNO.BRANCHID = DD.BRANCHID AND ACKNO.FORMID = DD.FORMID AND ACKNO.[QUARTER] = DD.[QUARTER]
						  WHERE ACKNO.BRANCHID = @BRANCHID AND LEN(ISNULL(ORGNUM,'')) = 15)
						SELECT @RETURNVALUE = 1;
				ELSE
						SELECT @RETURNVALUE = 0;
			END
		RETURN @RETURNVALUE;
	END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_GETDEFAULTSETTINGSTATUS')
DROP Function UDF_TDS_GETDEFAULTSETTINGSTATUS
GO
CREATE FUNCTION [DBO].[UDF_TDS_GETDEFAULTSETTINGSTATUS]
(
 @ALLOW92A92B INT,
 @ENABLEREFERENCE INT
)
RETURNS INT 
AS
BEGIN
        DECLARE @RETURNVALUE INT;
        SET @RETURNVALUE=1;
        IF(@ALLOW92A92B=0)   
			BEGIN   
					/* IF ENTRIES ARE FOUND ALREADY FOR BOTH FOR SECTION OPPOSITE TO DEDUCTORS STATUS THEN DONT ALLOW TO UNSELECT CHECKBOX */
 					IF EXISTS(SELECT DISTINCT BD.*,D.STATUSID,DD.SECTIONID,DD.QUARTER FROM BRANCHDEDUCTORS BD WITH(NOLOCK)
     										INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID
    										INNER JOIN DEDUCTIONDETAIL DD WITH(NOLOCK) ON BD.BRANCHID = DD.BRANCHID AND BD.QUARTER = DD.QUARTER AND FORMID = 1
					WHERE D.STATUSID <> DD.SECTIONID) AND @ALLOW92A92B=0
							/* DEDUCTIONS FOUND */
							BEGIN
								SET @RETURNVALUE=-1
							END
					ELSE IF EXISTS(SELECT DISTINCT BD.*,D.STATUSID,CD.SECTIONID,CD.QUARTER FROM BRANCHDEDUCTORS BD WITH(NOLOCK)
											 INNER JOIN DEDUCTOR D WITH(NOLOCK) ON BD.DEDUCTORID = D.DEDUCTORID
											 INNER JOIN CHALLANDETAIL CD WITH(NOLOCK) ON BD.BRANCHID = CD.BRANCHID AND CD.QUARTER = CD.QUARTER AND FORMID = 1
					WHERE D.STATUSID <> CD.SECTIONID) AND @ALLOW92A92B=0
						  /* CHALLANS FOUND */
							BEGIN
								SET @RETURNVALUE=-1
							END
			END
		IF(@RETURNVALUE>0 AND @ENABLEREFERENCE=0)
		BEGIN
			IF EXISTS(SELECT * FROM DEDUCTEE WITH(NOLOCK) WHERE REFERENCENO <> '' AND REFERENCENO IS NOT NULL)
					BEGIN
						SET @RETURNVALUE=-2
					END	
        END
		RETURN @RETURNVALUE	
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_GETFORMATEDPARENTBASEID')
DROP Function UDF_TDS_GETFORMATEDPARENTBASEID
GO
CREATE FUNCTION [DBO].[UDF_TDS_GETFORMATEDPARENTBASEID]
(
	@VALUE INT
)
RETURNS NVARCHAR(5)
AS
BEGIN
	DECLARE @CASTEDVALUE VARCHAR(5);
	DECLARE @FORMATEDVALUE VARCHAR(5);
	DECLARE @RESULT VARCHAR(5);
	SET @CASTEDVALUE = CAST(@VALUE AS VARCHAR);	
	SET @FORMATEDVALUE = '00000';
	SET @RESULT = SUBSTRING(@FORMATEDVALUE,1,LEN(@FORMATEDVALUE)-LEN(@CASTEDVALUE)) + @CASTEDVALUE;
	RETURN @RESULT;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_GETMAXNUMBER')
DROP Function UDF_TDS_GETMAXNUMBER
GO
CREATE FUNCTION [DBO].[UDF_TDS_GETMAXNUMBER](@REFERENCE VARCHAR(10))
RETURNS INT
AS
BEGIN
	DECLARE @VALUE INT;
	SET @VALUE = 0;
	IF(ISNUMERIC(RIGHT(@REFERENCE,1))=1) SET @VALUE = RIGHT(@REFERENCE,1) ELSE RETURN @VALUE;
	IF(ISNUMERIC(RIGHT(@REFERENCE,2))=1) SET @VALUE = RIGHT(@REFERENCE,2) ELSE RETURN @VALUE;
	IF(ISNUMERIC(RIGHT(@REFERENCE,3))=1) SET @VALUE = RIGHT(@REFERENCE,3) ELSE RETURN @VALUE;
	IF(ISNUMERIC(RIGHT(@REFERENCE,4))=1) SET @VALUE = RIGHT(@REFERENCE,4) ELSE RETURN @VALUE;
	IF(ISNUMERIC(RIGHT(@REFERENCE,5))=1) SET @VALUE = RIGHT(@REFERENCE,5) ELSE RETURN @VALUE;
	IF(ISNUMERIC(RIGHT(@REFERENCE,6))=1) SET @VALUE = RIGHT(@REFERENCE,6) ELSE RETURN @VALUE;
	IF(ISNUMERIC(RIGHT(@REFERENCE,7))=1) SET @VALUE = RIGHT(@REFERENCE,7) ELSE RETURN @VALUE;
	IF(ISNUMERIC(RIGHT(@REFERENCE,8))=1) SET @VALUE = RIGHT(@REFERENCE,8) ELSE RETURN @VALUE;
	IF(ISNUMERIC(RIGHT(@REFERENCE,9))=1) SET @VALUE = RIGHT(@REFERENCE,9) ELSE RETURN @VALUE;
	IF(ISNUMERIC(RIGHT(@REFERENCE,10))=1)SET @VALUE = RIGHT(@REFERENCE,10) ELSE RETURN @VALUE;	
	RETURN @VALUE;
END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_GETPANREFERENCEBASEDONBRANCHID')
DROP Function UDF_TDS_GETPANREFERENCEBASEDONBRANCHID
GO
CREATE FUNCTION [dbo].[UDF_TDS_GETPANREFERENCEBASEDONBRANCHID](@BRANCHID INT,  @ISEMPLOYEE BIT)     
RETURNS VARCHAR(10)          
AS            
 BEGIN
  DECLARE @PANREF VARCHAR(10);
  DECLARE @PANREF1 VARCHAR(10);
  DECLARE @PANREFTABLE TABLE(PANREFERENCE VARCHAR(10));
   IF(@ISEMPLOYEE = 1)        
    BEGIN   
	   IF EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM DEDUCTEE D WITH(NOLOCK)           
							    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND ISNULL(PANREFERENCE,'')  <> '' AND PANREFERENCE LIKE '%NOPAN%') OR EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND (ISNULL(PANREFERENCE,'')  <> '') AND PANREFERENCE LIKE '%NOPAN%')        
		   BEGIN
		   INSERT INTO @PANREFTABLE
		   SELECT MAX(PANREFERENCE) FROM DEDUCTEE D WITH(NOLOCK)           
							    INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NOPAN%'
			INSERT INTO @PANREFTABLE
			SELECT MAX(PANREFERENCE) FROM CORREMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NOPAN%'
			 SELECT @PANREF1 =  MAX(PANREFERENCE) FROM @PANREFTABLE
			  --SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(MAX(D.PANREFERENCE), 6, 5))            
				 -- WHEN 1 THEN CAST((SUBSTRING(MAX(D.PANREFERENCE), 6, 5)) + 1 AS VARCHAR)            
				 -- WHEN 0 THEN '00001' END FROM DEDUCTEE D WITH(NOLOCK)
				 -- INNER JOIN EMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID           
				 -- WHERE BRANCHID = @BRANCHID             
				 -- GROUP BY D.BRANCHID
			SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(@PANREF1, 6, 5))            
				  WHEN 1 THEN CAST((SUBSTRING(@PANREF1, 6, 5)) + 1 AS VARCHAR)            
				  WHEN 0 THEN '00001' END 
		   END   
	   ELSE
	       BEGIN
			 SET @PANREF = '00001'
	       END                 
      END            
     ELSE            
    BEGIN            
        IF EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM DEDUCTEE D WITH(NOLOCK)            
							    INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND ISNULL(PANREFERENCE,'')  <> '' AND PANREFERENCE LIKE '%NOPAN%') OR EXISTS(SELECT ISNULL(PANREFERENCE,'') FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND (ISNULL(PANREFERENCE,'')  <> '') AND PANREFERENCE LIKE '%NOPAN%')       
		   BEGIN
		    INSERT INTO @PANREFTABLE
		   SELECT MAX(PANREFERENCE) FROM DEDUCTEE D WITH(NOLOCK)           
							    INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
					  WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NOPAN%'
			INSERT INTO @PANREFTABLE
			SELECT MAX(PANREFERENCE) FROM CORRNONEMPLOYEE WITH(NOLOCK) WHERE BRANCHID = @BRANCHID AND PANREFERENCE LIKE '%NOPAN%'
			 SELECT @PANREF1 =  MAX(PANREFERENCE) FROM @PANREFTABLE
			  --SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(MAX(D.PANREFERENCE), 6, 5))            
				 -- WHEN 1 THEN CAST((SUBSTRING(MAX(D.PANREFERENCE), 6, 5)) + 1 AS VARCHAR)            
				 -- WHEN 0 THEN '00001' END FROM DEDUCTEE D WITH(NOLOCK)            
				 -- INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON D.DEDUCTEEID = E.DEDUCTEEID            
				 -- WHERE BRANCHID = @BRANCHID             
				 -- GROUP BY D.BRANCHID
			SELECT @PANREF = CASE ISNUMERIC(SUBSTRING(@PANREF1, 6, 5))            
				  WHEN 1 THEN CAST((SUBSTRING(@PANREF1, 6, 5)) + 1 AS VARCHAR)            
				  WHEN 0 THEN '00001' END 
		   END   
	   ELSE
	       BEGIN
			 SET @PANREF = '00001'
	       END               
    END             
   SET @PANREF =  REPLICATE('0', 5 - LEN(@PANREF)) + @PANREF
   RETURN @PANREF
 END
GO

IF EXISTS(SELECT NAME FROM sys.objects WHERE type = 'FN' AND name = 'UDF_TDS_GETPANREFERENCEFORIMPORT')
DROP Function UDF_TDS_GETPANREFERENCEFORIMPORT
GO
CREATE FUNCTION [DBO].[UDF_TDS_GETPANREFERENCEFORIMPORT]  
(  
 @BRANCHID INT,  
 @ISEMPLOYEE BIT    
)  
RETURNS VARCHAR(10)  
AS    
BEGIN    
 DECLARE @VALUE INT, @NOPAN VARCHAR(5), @CASTEDVALUE VARCHAR(5),@FORMATEDVALUE VARCHAR(5),@RESULT VARCHAR(10);      
 IF(@ISEMPLOYEE = 1)  
  BEGIN  
 SELECT @VALUE=ISNULL(MAX(CAST(RIGHT(ISNULL(PANREFERENCE,0),5)AS INT)),0)+1 FROM DEDUCTEE D WITH(NOLOCK)  
  INNER JOIN EMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID     
      WHERE LEFT(ISNULL(PANREFERENCE,0),5)='NOPAN' AND D.BRANCHID = @BRANCHID AND  
      ISNUMERIC(RIGHT(ISNULL(PANREFERENCE,0),5))=1    
  END  
 ELSE  
  BEGIN  
 SELECT @VALUE=ISNULL(MAX(CAST(RIGHT(ISNULL(PANREFERENCE,0),5)AS INT)),0)+1 FROM DEDUCTEE D WITH(NOLOCK) 
  INNER JOIN NONEMPLOYEE E WITH(NOLOCK) ON E.DEDUCTEEID = D.DEDUCTEEID     
      WHERE LEFT(ISNULL(PANREFERENCE,0),5)='NOPAN' AND D.BRANCHID = @BRANCHID AND  
      ISNUMERIC(RIGHT(ISNULL(PANREFERENCE,0),5))=1   
  END  
 SET @NOPAN='NOPAN'     
 SET @CASTEDVALUE = CAST(@VALUE AS VARCHAR);     
 SET @FORMATEDVALUE = '00000';    
 SET @RESULT = @NOPAN+SUBSTRING(@FORMATEDVALUE,1,LEN(@FORMATEDVALUE)-LEN(@CASTEDVALUE)) + @CASTEDVALUE;    
 RETURN @RESULT;    
END
GO

